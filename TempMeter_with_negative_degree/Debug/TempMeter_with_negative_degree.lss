
TempMeter_with_negative_degree.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  000028d4  00002968  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080016e  0080016e  00002a76  2**0
                  ALLOC
  3 .stab         00001b3c  00000000  00000000  00002a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a34  00000000  00000000  000045b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00004fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00005168  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000533b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000734a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  000084ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  000094bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000965c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000991d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a1cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 37       	cpi	r26, 0x73	; 115
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 31 13 	call	0x2662	; 0x2662 <main>
      8a:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 41 14 	jmp	0x2882	; 0x2882 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e2 59       	subi	r30, 0x92	; 146
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <ADC_vinit>:
 *  Author: Mohamed Zaghlol
 */ 
#include <avr/io.h>
#include "std_macros.h"
void ADC_vinit(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX,REFS0); //configure VREF
     cde:	a7 e2       	ldi	r26, 0x27	; 39
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e7 e2       	ldi	r30, 0x27	; 39
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	80 64       	ori	r24, 0x40	; 64
     cea:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS1);
     cec:	a7 e2       	ldi	r26, 0x27	; 39
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e7 e2       	ldi	r30, 0x27	; 39
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	80 68       	ori	r24, 0x80	; 128
     cf8:	8c 93       	st	X, r24
	SET_BIT(ADMUX, MUX4);
     cfa:	a7 e2       	ldi	r26, 0x27	; 39
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e7 e2       	ldi	r30, 0x27	; 39
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	80 61       	ori	r24, 0x10	; 16
     d06:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADEN); // enable ADC
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24
	/* adjust ADC clock*/
	SET_BIT(ADCSRA,ADPS2);
     d16:	a6 e2       	ldi	r26, 0x26	; 38
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e6 e2       	ldi	r30, 0x26	; 38
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	84 60       	ori	r24, 0x04	; 4
     d22:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
     d24:	a6 e2       	ldi	r26, 0x26	; 38
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e6 e2       	ldi	r30, 0x26	; 38
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	82 60       	ori	r24, 0x02	; 2
     d30:	8c 93       	st	X, r24
}
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	08 95       	ret

00000d38 <ADC_u16Read>:
 unsigned short ADC_u16Read(void)
{
     d38:	df 93       	push	r29
     d3a:	cf 93       	push	r28
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <ADC_u16Read+0x6>
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
	 unsigned short read_val;
	
	SET_BIT(ADCSRA,ADSC);
     d42:	a6 e2       	ldi	r26, 0x26	; 38
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e6 e2       	ldi	r30, 0x26	; 38
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	80 64       	ori	r24, 0x40	; 64
     d4e:	8c 93       	st	X, r24
	while(IS_BIT_CLR(ADCSRA,ADIF));//stay in your position till ADIF become 1
     d50:	e6 e2       	ldi	r30, 0x26	; 38
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	88 2f       	mov	r24, r24
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	80 71       	andi	r24, 0x10	; 16
     d5c:	90 70       	andi	r25, 0x00	; 0
     d5e:	95 95       	asr	r25
     d60:	87 95       	ror	r24
     d62:	95 95       	asr	r25
     d64:	87 95       	ror	r24
     d66:	95 95       	asr	r25
     d68:	87 95       	ror	r24
     d6a:	95 95       	asr	r25
     d6c:	87 95       	ror	r24
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	79 f3       	breq	.-34     	; 0xd50 <ADC_u16Read+0x18>
	SET_BIT(ADCSRA,ADIF); // clear ADIF
     d72:	a6 e2       	ldi	r26, 0x26	; 38
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e6 e2       	ldi	r30, 0x26	; 38
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	80 61       	ori	r24, 0x10	; 16
     d7e:	8c 93       	st	X, r24
	read_val=(ADCL);
     d80:	e4 e2       	ldi	r30, 0x24	; 36
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	88 2f       	mov	r24, r24
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	9a 83       	std	Y+2, r25	; 0x02
     d8c:	89 83       	std	Y+1, r24	; 0x01
	read_val|=(ADCH<<8);
     d8e:	e5 e2       	ldi	r30, 0x25	; 37
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	88 2f       	mov	r24, r24
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	98 2f       	mov	r25, r24
     d9a:	88 27       	eor	r24, r24
     d9c:	9c 01       	movw	r18, r24
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	9a 81       	ldd	r25, Y+2	; 0x02
     da2:	82 2b       	or	r24, r18
     da4:	93 2b       	or	r25, r19
     da6:	9a 83       	std	Y+2, r25	; 0x02
     da8:	89 83       	std	Y+1, r24	; 0x01
	return read_val ;
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	9a 81       	ldd	r25, Y+2	; 0x02
}
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <DIO_vsetPINDir>:


#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <DIO_vsetPINDir+0x6>
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <DIO_vsetPINDir+0x8>
     dc0:	0f 92       	push	r0
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	89 83       	std	Y+1, r24	; 0x01
     dc8:	6a 83       	std	Y+2, r22	; 0x02
     dca:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	3d 83       	std	Y+5, r19	; 0x05
     dd4:	2c 83       	std	Y+4, r18	; 0x04
     dd6:	8c 81       	ldd	r24, Y+4	; 0x04
     dd8:	9d 81       	ldd	r25, Y+5	; 0x05
     dda:	82 34       	cpi	r24, 0x42	; 66
     ddc:	91 05       	cpc	r25, r1
     dde:	09 f4       	brne	.+2      	; 0xde2 <DIO_vsetPINDir+0x2a>
     de0:	44 c0       	rjmp	.+136    	; 0xe6a <DIO_vsetPINDir+0xb2>
     de2:	2c 81       	ldd	r18, Y+4	; 0x04
     de4:	3d 81       	ldd	r19, Y+5	; 0x05
     de6:	23 34       	cpi	r18, 0x43	; 67
     de8:	31 05       	cpc	r19, r1
     dea:	34 f4       	brge	.+12     	; 0xdf8 <DIO_vsetPINDir+0x40>
     dec:	8c 81       	ldd	r24, Y+4	; 0x04
     dee:	9d 81       	ldd	r25, Y+5	; 0x05
     df0:	81 34       	cpi	r24, 0x41	; 65
     df2:	91 05       	cpc	r25, r1
     df4:	71 f0       	breq	.+28     	; 0xe12 <DIO_vsetPINDir+0x5a>
     df6:	bc c0       	rjmp	.+376    	; 0xf70 <DIO_vsetPINDir+0x1b8>
     df8:	2c 81       	ldd	r18, Y+4	; 0x04
     dfa:	3d 81       	ldd	r19, Y+5	; 0x05
     dfc:	23 34       	cpi	r18, 0x43	; 67
     dfe:	31 05       	cpc	r19, r1
     e00:	09 f4       	brne	.+2      	; 0xe04 <DIO_vsetPINDir+0x4c>
     e02:	5f c0       	rjmp	.+190    	; 0xec2 <DIO_vsetPINDir+0x10a>
     e04:	8c 81       	ldd	r24, Y+4	; 0x04
     e06:	9d 81       	ldd	r25, Y+5	; 0x05
     e08:	84 34       	cpi	r24, 0x44	; 68
     e0a:	91 05       	cpc	r25, r1
     e0c:	09 f4       	brne	.+2      	; 0xe10 <DIO_vsetPINDir+0x58>
     e0e:	85 c0       	rjmp	.+266    	; 0xf1a <DIO_vsetPINDir+0x162>
     e10:	af c0       	rjmp	.+350    	; 0xf70 <DIO_vsetPINDir+0x1b8>
	{
		
		
		case 'A':
		if(direction==1)
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	a1 f4       	brne	.+40     	; 0xe40 <DIO_vsetPINDir+0x88>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
     e18:	aa e3       	ldi	r26, 0x3A	; 58
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	ea e3       	ldi	r30, 0x3A	; 58
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 2e       	mov	r0, r18
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <DIO_vsetPINDir+0x7e>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	0a 94       	dec	r0
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <DIO_vsetPINDir+0x7a>
     e3a:	84 2b       	or	r24, r20
     e3c:	8c 93       	st	X, r24
     e3e:	98 c0       	rjmp	.+304    	; 0xf70 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
     e40:	aa e3       	ldi	r26, 0x3A	; 58
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	ea e3       	ldi	r30, 0x3A	; 58
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	48 2f       	mov	r20, r24
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	02 2e       	mov	r0, r18
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <DIO_vsetPINDir+0xa6>
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	0a 94       	dec	r0
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <DIO_vsetPINDir+0xa2>
     e62:	80 95       	com	r24
     e64:	84 23       	and	r24, r20
     e66:	8c 93       	st	X, r24
     e68:	83 c0       	rjmp	.+262    	; 0xf70 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'B':
		if(direction==1)
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	a1 f4       	brne	.+40     	; 0xe98 <DIO_vsetPINDir+0xe0>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
     e70:	a7 e3       	ldi	r26, 0x37	; 55
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e7 e3       	ldi	r30, 0x37	; 55
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 2e       	mov	r0, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <DIO_vsetPINDir+0xd6>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	0a 94       	dec	r0
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <DIO_vsetPINDir+0xd2>
     e92:	84 2b       	or	r24, r20
     e94:	8c 93       	st	X, r24
     e96:	6c c0       	rjmp	.+216    	; 0xf70 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
     e98:	a7 e3       	ldi	r26, 0x37	; 55
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e7 e3       	ldi	r30, 0x37	; 55
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 2e       	mov	r0, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <DIO_vsetPINDir+0xfe>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <DIO_vsetPINDir+0xfa>
     eba:	80 95       	com	r24
     ebc:	84 23       	and	r24, r20
     ebe:	8c 93       	st	X, r24
     ec0:	57 c0       	rjmp	.+174    	; 0xf70 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'C':
		if(direction==1)
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	a1 f4       	brne	.+40     	; 0xef0 <DIO_vsetPINDir+0x138>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
     ec8:	a4 e3       	ldi	r26, 0x34	; 52
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e4 e3       	ldi	r30, 0x34	; 52
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <DIO_vsetPINDir+0x12e>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <DIO_vsetPINDir+0x12a>
     eea:	84 2b       	or	r24, r20
     eec:	8c 93       	st	X, r24
     eee:	40 c0       	rjmp	.+128    	; 0xf70 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
     ef0:	a4 e3       	ldi	r26, 0x34	; 52
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e4 e3       	ldi	r30, 0x34	; 52
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	48 2f       	mov	r20, r24
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	02 2e       	mov	r0, r18
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <DIO_vsetPINDir+0x156>
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	0a 94       	dec	r0
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <DIO_vsetPINDir+0x152>
     f12:	80 95       	com	r24
     f14:	84 23       	and	r24, r20
     f16:	8c 93       	st	X, r24
     f18:	2b c0       	rjmp	.+86     	; 0xf70 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'D':
		if(direction==1)
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	a1 f4       	brne	.+40     	; 0xf48 <DIO_vsetPINDir+0x190>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
     f20:	a1 e3       	ldi	r26, 0x31	; 49
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e1 e3       	ldi	r30, 0x31	; 49
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	48 2f       	mov	r20, r24
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	02 2e       	mov	r0, r18
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <DIO_vsetPINDir+0x186>
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	0a 94       	dec	r0
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <DIO_vsetPINDir+0x182>
     f42:	84 2b       	or	r24, r20
     f44:	8c 93       	st	X, r24
     f46:	14 c0       	rjmp	.+40     	; 0xf70 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
     f48:	a1 e3       	ldi	r26, 0x31	; 49
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e1 e3       	ldi	r30, 0x31	; 49
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <DIO_vsetPINDir+0x1ae>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <DIO_vsetPINDir+0x1aa>
     f6a:	80 95       	com	r24
     f6c:	84 23       	and	r24, r20
     f6e:	8c 93       	st	X, r24
		}
		break;
		default: 
		break;
	}
}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <DIO_write>:


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	00 d0       	rcall	.+0      	; 0xf86 <DIO_write+0x6>
     f86:	00 d0       	rcall	.+0      	; 0xf88 <DIO_write+0x8>
     f88:	0f 92       	push	r0
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	6a 83       	std	Y+2, r22	; 0x02
     f92:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	3d 83       	std	Y+5, r19	; 0x05
     f9c:	2c 83       	std	Y+4, r18	; 0x04
     f9e:	8c 81       	ldd	r24, Y+4	; 0x04
     fa0:	9d 81       	ldd	r25, Y+5	; 0x05
     fa2:	82 34       	cpi	r24, 0x42	; 66
     fa4:	91 05       	cpc	r25, r1
     fa6:	09 f4       	brne	.+2      	; 0xfaa <DIO_write+0x2a>
     fa8:	44 c0       	rjmp	.+136    	; 0x1032 <DIO_write+0xb2>
     faa:	2c 81       	ldd	r18, Y+4	; 0x04
     fac:	3d 81       	ldd	r19, Y+5	; 0x05
     fae:	23 34       	cpi	r18, 0x43	; 67
     fb0:	31 05       	cpc	r19, r1
     fb2:	34 f4       	brge	.+12     	; 0xfc0 <DIO_write+0x40>
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	9d 81       	ldd	r25, Y+5	; 0x05
     fb8:	81 34       	cpi	r24, 0x41	; 65
     fba:	91 05       	cpc	r25, r1
     fbc:	71 f0       	breq	.+28     	; 0xfda <DIO_write+0x5a>
     fbe:	bc c0       	rjmp	.+376    	; 0x1138 <DIO_write+0x1b8>
     fc0:	2c 81       	ldd	r18, Y+4	; 0x04
     fc2:	3d 81       	ldd	r19, Y+5	; 0x05
     fc4:	23 34       	cpi	r18, 0x43	; 67
     fc6:	31 05       	cpc	r19, r1
     fc8:	09 f4       	brne	.+2      	; 0xfcc <DIO_write+0x4c>
     fca:	5f c0       	rjmp	.+190    	; 0x108a <DIO_write+0x10a>
     fcc:	8c 81       	ldd	r24, Y+4	; 0x04
     fce:	9d 81       	ldd	r25, Y+5	; 0x05
     fd0:	84 34       	cpi	r24, 0x44	; 68
     fd2:	91 05       	cpc	r25, r1
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <DIO_write+0x58>
     fd6:	85 c0       	rjmp	.+266    	; 0x10e2 <DIO_write+0x162>
     fd8:	af c0       	rjmp	.+350    	; 0x1138 <DIO_write+0x1b8>
	{
		case 'A' :
		
		if(outputvalue==1)
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	a1 f4       	brne	.+40     	; 0x1008 <DIO_write+0x88>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
     fe0:	ab e3       	ldi	r26, 0x3B	; 59
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	eb e3       	ldi	r30, 0x3B	; 59
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_write+0x7e>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO_write+0x7a>
    1002:	84 2b       	or	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	98 c0       	rjmp	.+304    	; 0x1138 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
    1008:	ab e3       	ldi	r26, 0x3B	; 59
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	eb e3       	ldi	r30, 0x3B	; 59
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_write+0xa6>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_write+0xa2>
    102a:	80 95       	com	r24
    102c:	84 23       	and	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	83 c0       	rjmp	.+262    	; 0x1138 <DIO_write+0x1b8>
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	a1 f4       	brne	.+40     	; 0x1060 <DIO_write+0xe0>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
    1038:	a8 e3       	ldi	r26, 0x38	; 56
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e8 e3       	ldi	r30, 0x38	; 56
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <DIO_write+0xd6>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <DIO_write+0xd2>
    105a:	84 2b       	or	r24, r20
    105c:	8c 93       	st	X, r24
    105e:	6c c0       	rjmp	.+216    	; 0x1138 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
    1060:	a8 e3       	ldi	r26, 0x38	; 56
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e8 e3       	ldi	r30, 0x38	; 56
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <DIO_write+0xfe>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <DIO_write+0xfa>
    1082:	80 95       	com	r24
    1084:	84 23       	and	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	57 c0       	rjmp	.+174    	; 0x1138 <DIO_write+0x1b8>
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	a1 f4       	brne	.+40     	; 0x10b8 <DIO_write+0x138>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
    1090:	a5 e3       	ldi	r26, 0x35	; 53
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e5 e3       	ldi	r30, 0x35	; 53
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 2e       	mov	r0, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <DIO_write+0x12e>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <DIO_write+0x12a>
    10b2:	84 2b       	or	r24, r20
    10b4:	8c 93       	st	X, r24
    10b6:	40 c0       	rjmp	.+128    	; 0x1138 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
    10b8:	a5 e3       	ldi	r26, 0x35	; 53
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e5 e3       	ldi	r30, 0x35	; 53
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <DIO_write+0x156>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <DIO_write+0x152>
    10da:	80 95       	com	r24
    10dc:	84 23       	and	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	2b c0       	rjmp	.+86     	; 0x1138 <DIO_write+0x1b8>
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	a1 f4       	brne	.+40     	; 0x1110 <DIO_write+0x190>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
    10e8:	a2 e3       	ldi	r26, 0x32	; 50
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e2 e3       	ldi	r30, 0x32	; 50
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <DIO_write+0x186>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <DIO_write+0x182>
    110a:	84 2b       	or	r24, r20
    110c:	8c 93       	st	X, r24
    110e:	14 c0       	rjmp	.+40     	; 0x1138 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
    1110:	a2 e3       	ldi	r26, 0x32	; 50
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e2 e3       	ldi	r30, 0x32	; 50
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_write+0x1ae>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <DIO_write+0x1aa>
    1132:	80 95       	com	r24
    1134:	84 23       	and	r24, r20
    1136:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <DIO_u8read+0x6>
    114e:	00 d0       	rcall	.+0      	; 0x1150 <DIO_u8read+0x8>
    1150:	0f 92       	push	r0
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	8a 83       	std	Y+2, r24	; 0x02
    1158:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char return_value=0;
    115a:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	3d 83       	std	Y+5, r19	; 0x05
    1164:	2c 83       	std	Y+4, r18	; 0x04
    1166:	4c 81       	ldd	r20, Y+4	; 0x04
    1168:	5d 81       	ldd	r21, Y+5	; 0x05
    116a:	42 34       	cpi	r20, 0x42	; 66
    116c:	51 05       	cpc	r21, r1
    116e:	b1 f1       	breq	.+108    	; 0x11dc <DIO_u8read+0x94>
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	9d 81       	ldd	r25, Y+5	; 0x05
    1174:	83 34       	cpi	r24, 0x43	; 67
    1176:	91 05       	cpc	r25, r1
    1178:	34 f4       	brge	.+12     	; 0x1186 <DIO_u8read+0x3e>
    117a:	2c 81       	ldd	r18, Y+4	; 0x04
    117c:	3d 81       	ldd	r19, Y+5	; 0x05
    117e:	21 34       	cpi	r18, 0x41	; 65
    1180:	31 05       	cpc	r19, r1
    1182:	71 f0       	breq	.+28     	; 0x11a0 <DIO_u8read+0x58>
    1184:	84 c0       	rjmp	.+264    	; 0x128e <DIO_u8read+0x146>
    1186:	4c 81       	ldd	r20, Y+4	; 0x04
    1188:	5d 81       	ldd	r21, Y+5	; 0x05
    118a:	43 34       	cpi	r20, 0x43	; 67
    118c:	51 05       	cpc	r21, r1
    118e:	09 f4       	brne	.+2      	; 0x1192 <DIO_u8read+0x4a>
    1190:	43 c0       	rjmp	.+134    	; 0x1218 <DIO_u8read+0xd0>
    1192:	8c 81       	ldd	r24, Y+4	; 0x04
    1194:	9d 81       	ldd	r25, Y+5	; 0x05
    1196:	84 34       	cpi	r24, 0x44	; 68
    1198:	91 05       	cpc	r25, r1
    119a:	09 f4       	brne	.+2      	; 0x119e <DIO_u8read+0x56>
    119c:	5b c0       	rjmp	.+182    	; 0x1254 <DIO_u8read+0x10c>
    119e:	77 c0       	rjmp	.+238    	; 0x128e <DIO_u8read+0x146>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
    11a0:	e9 e3       	ldi	r30, 0x39	; 57
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_u8read+0x72>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	2a 95       	dec	r18
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <DIO_u8read+0x6e>
    11be:	9a 01       	movw	r18, r20
    11c0:	28 23       	and	r18, r24
    11c2:	39 23       	and	r19, r25
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	a9 01       	movw	r20, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <DIO_u8read+0x8a>
    11ce:	55 95       	asr	r21
    11d0:	47 95       	ror	r20
    11d2:	8a 95       	dec	r24
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <DIO_u8read+0x86>
    11d6:	ca 01       	movw	r24, r20
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	59 c0       	rjmp	.+178    	; 0x128e <DIO_u8read+0x146>
		break;
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
    11dc:	e6 e3       	ldi	r30, 0x36	; 54
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO_u8read+0xae>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	2a 95       	dec	r18
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO_u8read+0xaa>
    11fa:	9a 01       	movw	r18, r20
    11fc:	28 23       	and	r18, r24
    11fe:	39 23       	and	r19, r25
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a9 01       	movw	r20, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_u8read+0xc6>
    120a:	55 95       	asr	r21
    120c:	47 95       	ror	r20
    120e:	8a 95       	dec	r24
    1210:	e2 f7       	brpl	.-8      	; 0x120a <DIO_u8read+0xc2>
    1212:	ca 01       	movw	r24, r20
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	3b c0       	rjmp	.+118    	; 0x128e <DIO_u8read+0x146>
		break;
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
    1218:	e3 e3       	ldi	r30, 0x33	; 51
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	48 2f       	mov	r20, r24
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <DIO_u8read+0xea>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	2a 95       	dec	r18
    1234:	e2 f7       	brpl	.-8      	; 0x122e <DIO_u8read+0xe6>
    1236:	9a 01       	movw	r18, r20
    1238:	28 23       	and	r18, r24
    123a:	39 23       	and	r19, r25
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	a9 01       	movw	r20, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_u8read+0x102>
    1246:	55 95       	asr	r21
    1248:	47 95       	ror	r20
    124a:	8a 95       	dec	r24
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_u8read+0xfe>
    124e:	ca 01       	movw	r24, r20
    1250:	89 83       	std	Y+1, r24	; 0x01
    1252:	1d c0       	rjmp	.+58     	; 0x128e <DIO_u8read+0x146>
		break;
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
    1254:	e0 e3       	ldi	r30, 0x30	; 48
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 c0       	rjmp	.+4      	; 0x126e <DIO_u8read+0x126>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	2a 95       	dec	r18
    1270:	e2 f7       	brpl	.-8      	; 0x126a <DIO_u8read+0x122>
    1272:	9a 01       	movw	r18, r20
    1274:	28 23       	and	r18, r24
    1276:	39 23       	and	r19, r25
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a9 01       	movw	r20, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_u8read+0x13e>
    1282:	55 95       	asr	r21
    1284:	47 95       	ror	r20
    1286:	8a 95       	dec	r24
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_u8read+0x13a>
    128a:	ca 01       	movw	r24, r20
    128c:	89 83       	std	Y+1, r24	; 0x01
		break;
		default: 
		break;
	}
	return return_value ;
    128e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <DIO_toggle+0x6>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <DIO_toggle+0x8>
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	3c 83       	std	Y+4, r19	; 0x04
    12b8:	2b 83       	std	Y+3, r18	; 0x03
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	9c 81       	ldd	r25, Y+4	; 0x04
    12be:	82 34       	cpi	r24, 0x42	; 66
    12c0:	91 05       	cpc	r25, r1
    12c2:	51 f1       	breq	.+84     	; 0x1318 <DIO_toggle+0x78>
    12c4:	2b 81       	ldd	r18, Y+3	; 0x03
    12c6:	3c 81       	ldd	r19, Y+4	; 0x04
    12c8:	23 34       	cpi	r18, 0x43	; 67
    12ca:	31 05       	cpc	r19, r1
    12cc:	34 f4       	brge	.+12     	; 0x12da <DIO_toggle+0x3a>
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	81 34       	cpi	r24, 0x41	; 65
    12d4:	91 05       	cpc	r25, r1
    12d6:	61 f0       	breq	.+24     	; 0x12f0 <DIO_toggle+0x50>
    12d8:	5a c0       	rjmp	.+180    	; 0x138e <DIO_toggle+0xee>
    12da:	2b 81       	ldd	r18, Y+3	; 0x03
    12dc:	3c 81       	ldd	r19, Y+4	; 0x04
    12de:	23 34       	cpi	r18, 0x43	; 67
    12e0:	31 05       	cpc	r19, r1
    12e2:	71 f1       	breq	.+92     	; 0x1340 <DIO_toggle+0xa0>
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	84 34       	cpi	r24, 0x44	; 68
    12ea:	91 05       	cpc	r25, r1
    12ec:	e9 f1       	breq	.+122    	; 0x1368 <DIO_toggle+0xc8>
    12ee:	4f c0       	rjmp	.+158    	; 0x138e <DIO_toggle+0xee>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
    12f0:	ab e3       	ldi	r26, 0x3B	; 59
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	eb e3       	ldi	r30, 0x3B	; 59
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	48 2f       	mov	r20, r24
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	02 2e       	mov	r0, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <DIO_toggle+0x6e>
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	0a 94       	dec	r0
    1310:	e2 f7       	brpl	.-8      	; 0x130a <DIO_toggle+0x6a>
    1312:	84 27       	eor	r24, r20
    1314:	8c 93       	st	X, r24
    1316:	3b c0       	rjmp	.+118    	; 0x138e <DIO_toggle+0xee>
		break;
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
    1318:	a8 e3       	ldi	r26, 0x38	; 56
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e8 e3       	ldi	r30, 0x38	; 56
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	48 2f       	mov	r20, r24
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	02 2e       	mov	r0, r18
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <DIO_toggle+0x96>
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	0a 94       	dec	r0
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <DIO_toggle+0x92>
    133a:	84 27       	eor	r24, r20
    133c:	8c 93       	st	X, r24
    133e:	27 c0       	rjmp	.+78     	; 0x138e <DIO_toggle+0xee>
		break;
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
    1340:	a5 e3       	ldi	r26, 0x35	; 53
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e5 e3       	ldi	r30, 0x35	; 53
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <DIO_toggle+0xbe>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <DIO_toggle+0xba>
    1362:	84 27       	eor	r24, r20
    1364:	8c 93       	st	X, r24
    1366:	13 c0       	rjmp	.+38     	; 0x138e <DIO_toggle+0xee>
		break;
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
    1368:	a2 e3       	ldi	r26, 0x32	; 50
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e2 e3       	ldi	r30, 0x32	; 50
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <DIO_toggle+0xe6>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <DIO_toggle+0xe2>
    138a:	84 27       	eor	r24, r20
    138c:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <DIO_set_port_direction>:
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <DIO_set_port_direction+0x6>
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <DIO_set_port_direction+0x8>
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	89 83       	std	Y+1, r24	; 0x01
    13aa:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	3c 83       	std	Y+4, r19	; 0x04
    13b4:	2b 83       	std	Y+3, r18	; 0x03
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	82 34       	cpi	r24, 0x42	; 66
    13bc:	91 05       	cpc	r25, r1
    13be:	d9 f0       	breq	.+54     	; 0x13f6 <DIO_set_port_direction+0x5a>
    13c0:	2b 81       	ldd	r18, Y+3	; 0x03
    13c2:	3c 81       	ldd	r19, Y+4	; 0x04
    13c4:	23 34       	cpi	r18, 0x43	; 67
    13c6:	31 05       	cpc	r19, r1
    13c8:	34 f4       	brge	.+12     	; 0x13d6 <DIO_set_port_direction+0x3a>
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	9c 81       	ldd	r25, Y+4	; 0x04
    13ce:	81 34       	cpi	r24, 0x41	; 65
    13d0:	91 05       	cpc	r25, r1
    13d2:	61 f0       	breq	.+24     	; 0x13ec <DIO_set_port_direction+0x50>
    13d4:	1e c0       	rjmp	.+60     	; 0x1412 <DIO_set_port_direction+0x76>
    13d6:	2b 81       	ldd	r18, Y+3	; 0x03
    13d8:	3c 81       	ldd	r19, Y+4	; 0x04
    13da:	23 34       	cpi	r18, 0x43	; 67
    13dc:	31 05       	cpc	r19, r1
    13de:	81 f0       	breq	.+32     	; 0x1400 <DIO_set_port_direction+0x64>
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	84 34       	cpi	r24, 0x44	; 68
    13e6:	91 05       	cpc	r25, r1
    13e8:	81 f0       	breq	.+32     	; 0x140a <DIO_set_port_direction+0x6e>
    13ea:	13 c0       	rjmp	.+38     	; 0x1412 <DIO_set_port_direction+0x76>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
    13ec:	ea e3       	ldi	r30, 0x3A	; 58
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	80 83       	st	Z, r24
    13f4:	0e c0       	rjmp	.+28     	; 0x1412 <DIO_set_port_direction+0x76>
		break ;
		case 'B':
		DDRB=direction; //set the direction of port B
    13f6:	e7 e3       	ldi	r30, 0x37	; 55
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	80 83       	st	Z, r24
    13fe:	09 c0       	rjmp	.+18     	; 0x1412 <DIO_set_port_direction+0x76>
		break ;
		case 'C' :
		DDRC=direction; //set the direction of port C
    1400:	e4 e3       	ldi	r30, 0x34	; 52
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	80 83       	st	Z, r24
    1408:	04 c0       	rjmp	.+8      	; 0x1412 <DIO_set_port_direction+0x76>
		break ;
		case 'D':
		DDRD=direction; //set the direction of port D
    140a:	e1 e3       	ldi	r30, 0x31	; 49
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	80 83       	st	Z, r24
		break ;
		default:
		break ;
	}
	
}
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <DIO_write_port>:
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	00 d0       	rcall	.+0      	; 0x1426 <DIO_write_port+0x6>
    1426:	00 d0       	rcall	.+0      	; 0x1428 <DIO_write_port+0x8>
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	3c 83       	std	Y+4, r19	; 0x04
    1438:	2b 83       	std	Y+3, r18	; 0x03
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	82 34       	cpi	r24, 0x42	; 66
    1440:	91 05       	cpc	r25, r1
    1442:	d9 f0       	breq	.+54     	; 0x147a <DIO_write_port+0x5a>
    1444:	2b 81       	ldd	r18, Y+3	; 0x03
    1446:	3c 81       	ldd	r19, Y+4	; 0x04
    1448:	23 34       	cpi	r18, 0x43	; 67
    144a:	31 05       	cpc	r19, r1
    144c:	34 f4       	brge	.+12     	; 0x145a <DIO_write_port+0x3a>
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	81 34       	cpi	r24, 0x41	; 65
    1454:	91 05       	cpc	r25, r1
    1456:	61 f0       	breq	.+24     	; 0x1470 <DIO_write_port+0x50>
    1458:	1e c0       	rjmp	.+60     	; 0x1496 <DIO_write_port+0x76>
    145a:	2b 81       	ldd	r18, Y+3	; 0x03
    145c:	3c 81       	ldd	r19, Y+4	; 0x04
    145e:	23 34       	cpi	r18, 0x43	; 67
    1460:	31 05       	cpc	r19, r1
    1462:	81 f0       	breq	.+32     	; 0x1484 <DIO_write_port+0x64>
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	84 34       	cpi	r24, 0x44	; 68
    146a:	91 05       	cpc	r25, r1
    146c:	81 f0       	breq	.+32     	; 0x148e <DIO_write_port+0x6e>
    146e:	13 c0       	rjmp	.+38     	; 0x1496 <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
    1470:	eb e3       	ldi	r30, 0x3B	; 59
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	80 83       	st	Z, r24
    1478:	0e c0       	rjmp	.+28     	; 0x1496 <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
    147a:	e8 e3       	ldi	r30, 0x38	; 56
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	80 83       	st	Z, r24
    1482:	09 c0       	rjmp	.+18     	; 0x1496 <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
    1484:	e5 e3       	ldi	r30, 0x35	; 53
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	80 83       	st	Z, r24
    148c:	04 c0       	rjmp	.+8      	; 0x1496 <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
    148e:	e2 e3       	ldi	r30, 0x32	; 50
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	80 83       	st	Z, r24
		break ;
		default:
		 break ;
	}
}
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <DIO_read_port>:

unsigned char DIO_read_port(unsigned char portname)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <DIO_read_port+0x6>
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <DIO_read_port+0x8>
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char return_val=0;
    14b2:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	3c 83       	std	Y+4, r19	; 0x04
    14bc:	2b 83       	std	Y+3, r18	; 0x03
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	82 34       	cpi	r24, 0x42	; 66
    14c4:	91 05       	cpc	r25, r1
    14c6:	d9 f0       	breq	.+54     	; 0x14fe <DIO_read_port+0x5a>
    14c8:	2b 81       	ldd	r18, Y+3	; 0x03
    14ca:	3c 81       	ldd	r19, Y+4	; 0x04
    14cc:	23 34       	cpi	r18, 0x43	; 67
    14ce:	31 05       	cpc	r19, r1
    14d0:	34 f4       	brge	.+12     	; 0x14de <DIO_read_port+0x3a>
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	9c 81       	ldd	r25, Y+4	; 0x04
    14d6:	81 34       	cpi	r24, 0x41	; 65
    14d8:	91 05       	cpc	r25, r1
    14da:	61 f0       	breq	.+24     	; 0x14f4 <DIO_read_port+0x50>
    14dc:	1e c0       	rjmp	.+60     	; 0x151a <DIO_read_port+0x76>
    14de:	2b 81       	ldd	r18, Y+3	; 0x03
    14e0:	3c 81       	ldd	r19, Y+4	; 0x04
    14e2:	23 34       	cpi	r18, 0x43	; 67
    14e4:	31 05       	cpc	r19, r1
    14e6:	81 f0       	breq	.+32     	; 0x1508 <DIO_read_port+0x64>
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	84 34       	cpi	r24, 0x44	; 68
    14ee:	91 05       	cpc	r25, r1
    14f0:	81 f0       	breq	.+32     	; 0x1512 <DIO_read_port+0x6e>
    14f2:	13 c0       	rjmp	.+38     	; 0x151a <DIO_read_port+0x76>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
    14f4:	e9 e3       	ldi	r30, 0x39	; 57
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	0e c0       	rjmp	.+28     	; 0x151a <DIO_read_port+0x76>
		break ;
		case 'B':
		return_val=PINB; // read the value of port B 
    14fe:	e6 e3       	ldi	r30, 0x36	; 54
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	09 c0       	rjmp	.+18     	; 0x151a <DIO_read_port+0x76>
		break ;
		case 'C' :
		return_val=PINC; // read the value of port C 
    1508:	e3 e3       	ldi	r30, 0x33	; 51
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	04 c0       	rjmp	.+8      	; 0x151a <DIO_read_port+0x76>
		break ;
		case 'D':
		return_val=PIND; // read the value of port D 
    1512:	e0 e3       	ldi	r30, 0x30	; 48
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	89 83       	std	Y+1, r24	; 0x01
		break ;
		default:
		break ;
	}
	return return_val;
    151a:	89 81       	ldd	r24, Y+1	; 0x01
}
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	00 d0       	rcall	.+0      	; 0x1530 <DIO_vconnectpullup+0x6>
    1530:	00 d0       	rcall	.+0      	; 0x1532 <DIO_vconnectpullup+0x8>
    1532:	0f 92       	push	r0
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	6a 83       	std	Y+2, r22	; 0x02
    153c:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	3d 83       	std	Y+5, r19	; 0x05
    1546:	2c 83       	std	Y+4, r18	; 0x04
    1548:	8c 81       	ldd	r24, Y+4	; 0x04
    154a:	9d 81       	ldd	r25, Y+5	; 0x05
    154c:	82 34       	cpi	r24, 0x42	; 66
    154e:	91 05       	cpc	r25, r1
    1550:	09 f4       	brne	.+2      	; 0x1554 <DIO_vconnectpullup+0x2a>
    1552:	44 c0       	rjmp	.+136    	; 0x15dc <DIO_vconnectpullup+0xb2>
    1554:	2c 81       	ldd	r18, Y+4	; 0x04
    1556:	3d 81       	ldd	r19, Y+5	; 0x05
    1558:	23 34       	cpi	r18, 0x43	; 67
    155a:	31 05       	cpc	r19, r1
    155c:	34 f4       	brge	.+12     	; 0x156a <DIO_vconnectpullup+0x40>
    155e:	8c 81       	ldd	r24, Y+4	; 0x04
    1560:	9d 81       	ldd	r25, Y+5	; 0x05
    1562:	81 34       	cpi	r24, 0x41	; 65
    1564:	91 05       	cpc	r25, r1
    1566:	71 f0       	breq	.+28     	; 0x1584 <DIO_vconnectpullup+0x5a>
    1568:	bc c0       	rjmp	.+376    	; 0x16e2 <DIO_vconnectpullup+0x1b8>
    156a:	2c 81       	ldd	r18, Y+4	; 0x04
    156c:	3d 81       	ldd	r19, Y+5	; 0x05
    156e:	23 34       	cpi	r18, 0x43	; 67
    1570:	31 05       	cpc	r19, r1
    1572:	09 f4       	brne	.+2      	; 0x1576 <DIO_vconnectpullup+0x4c>
    1574:	5f c0       	rjmp	.+190    	; 0x1634 <DIO_vconnectpullup+0x10a>
    1576:	8c 81       	ldd	r24, Y+4	; 0x04
    1578:	9d 81       	ldd	r25, Y+5	; 0x05
    157a:	84 34       	cpi	r24, 0x44	; 68
    157c:	91 05       	cpc	r25, r1
    157e:	09 f4       	brne	.+2      	; 0x1582 <DIO_vconnectpullup+0x58>
    1580:	85 c0       	rjmp	.+266    	; 0x168c <DIO_vconnectpullup+0x162>
    1582:	af c0       	rjmp	.+350    	; 0x16e2 <DIO_vconnectpullup+0x1b8>
	{
		case 'A':
		if(connect_pullup==1)
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	a1 f4       	brne	.+40     	; 0x15b2 <DIO_vconnectpullup+0x88>
		{
			SET_BIT(PORTA,pinnumber);
    158a:	ab e3       	ldi	r26, 0x3B	; 59
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	eb e3       	ldi	r30, 0x3B	; 59
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	48 2f       	mov	r20, r24
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 2e       	mov	r0, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <DIO_vconnectpullup+0x7e>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	0a 94       	dec	r0
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <DIO_vconnectpullup+0x7a>
    15ac:	84 2b       	or	r24, r20
    15ae:	8c 93       	st	X, r24
    15b0:	98 c0       	rjmp	.+304    	; 0x16e2 <DIO_vconnectpullup+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
    15b2:	ab e3       	ldi	r26, 0x3B	; 59
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	eb e3       	ldi	r30, 0x3B	; 59
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	48 2f       	mov	r20, r24
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	02 2e       	mov	r0, r18
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <DIO_vconnectpullup+0xa6>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	0a 94       	dec	r0
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <DIO_vconnectpullup+0xa2>
    15d4:	80 95       	com	r24
    15d6:	84 23       	and	r24, r20
    15d8:	8c 93       	st	X, r24
    15da:	83 c0       	rjmp	.+262    	; 0x16e2 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'B':
		if(connect_pullup==1)
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	a1 f4       	brne	.+40     	; 0x160a <DIO_vconnectpullup+0xe0>
		{
			SET_BIT(PORTB,pinnumber);
    15e2:	a8 e3       	ldi	r26, 0x38	; 56
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e8 e3       	ldi	r30, 0x38	; 56
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <DIO_vconnectpullup+0xd6>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <DIO_vconnectpullup+0xd2>
    1604:	84 2b       	or	r24, r20
    1606:	8c 93       	st	X, r24
    1608:	6c c0       	rjmp	.+216    	; 0x16e2 <DIO_vconnectpullup+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
    160a:	a8 e3       	ldi	r26, 0x38	; 56
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e8 e3       	ldi	r30, 0x38	; 56
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	48 2f       	mov	r20, r24
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 2e       	mov	r0, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <DIO_vconnectpullup+0xfe>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <DIO_vconnectpullup+0xfa>
    162c:	80 95       	com	r24
    162e:	84 23       	and	r24, r20
    1630:	8c 93       	st	X, r24
    1632:	57 c0       	rjmp	.+174    	; 0x16e2 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'C':
		if(connect_pullup==1)
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	a1 f4       	brne	.+40     	; 0x1662 <DIO_vconnectpullup+0x138>
		{
			SET_BIT(PORTC,pinnumber);
    163a:	a5 e3       	ldi	r26, 0x35	; 53
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e5 e3       	ldi	r30, 0x35	; 53
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	48 2f       	mov	r20, r24
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 2e       	mov	r0, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <DIO_vconnectpullup+0x12e>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <DIO_vconnectpullup+0x12a>
    165c:	84 2b       	or	r24, r20
    165e:	8c 93       	st	X, r24
    1660:	40 c0       	rjmp	.+128    	; 0x16e2 <DIO_vconnectpullup+0x1b8>
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
    1662:	a5 e3       	ldi	r26, 0x35	; 53
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e5 e3       	ldi	r30, 0x35	; 53
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	48 2f       	mov	r20, r24
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	02 2e       	mov	r0, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <DIO_vconnectpullup+0x156>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	0a 94       	dec	r0
    1682:	e2 f7       	brpl	.-8      	; 0x167c <DIO_vconnectpullup+0x152>
    1684:	80 95       	com	r24
    1686:	84 23       	and	r24, r20
    1688:	8c 93       	st	X, r24
    168a:	2b c0       	rjmp	.+86     	; 0x16e2 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'D':
		if(connect_pullup==1)
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	a1 f4       	brne	.+40     	; 0x16ba <DIO_vconnectpullup+0x190>
		{
			SET_BIT(PORTD,pinnumber);
    1692:	a2 e3       	ldi	r26, 0x32	; 50
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e2 e3       	ldi	r30, 0x32	; 50
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_vconnectpullup+0x186>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_vconnectpullup+0x182>
    16b4:	84 2b       	or	r24, r20
    16b6:	8c 93       	st	X, r24
    16b8:	14 c0       	rjmp	.+40     	; 0x16e2 <DIO_vconnectpullup+0x1b8>
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
    16ba:	a2 e3       	ldi	r26, 0x32	; 50
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e2 e3       	ldi	r30, 0x32	; 50
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <DIO_vconnectpullup+0x1ae>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <DIO_vconnectpullup+0x1aa>
    16dc:	80 95       	com	r24
    16de:	84 23       	and	r24, r20
    16e0:	8c 93       	st	X, r24
		}
		break;
		
	}
}
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <write_low_nibble>:

void write_low_nibble(unsigned char portname,unsigned char value)
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	00 d0       	rcall	.+0      	; 0x16f8 <write_low_nibble+0x6>
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <write_low_nibble+0x8>
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	8f 70       	andi	r24, 0x0F	; 15
    1706:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	3c 83       	std	Y+4, r19	; 0x04
    1710:	2b 83       	std	Y+3, r18	; 0x03
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	9c 81       	ldd	r25, Y+4	; 0x04
    1716:	82 34       	cpi	r24, 0x42	; 66
    1718:	91 05       	cpc	r25, r1
    171a:	29 f1       	breq	.+74     	; 0x1766 <write_low_nibble+0x74>
    171c:	2b 81       	ldd	r18, Y+3	; 0x03
    171e:	3c 81       	ldd	r19, Y+4	; 0x04
    1720:	23 34       	cpi	r18, 0x43	; 67
    1722:	31 05       	cpc	r19, r1
    1724:	34 f4       	brge	.+12     	; 0x1732 <write_low_nibble+0x40>
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
    172a:	81 34       	cpi	r24, 0x41	; 65
    172c:	91 05       	cpc	r25, r1
    172e:	61 f0       	breq	.+24     	; 0x1748 <write_low_nibble+0x56>
    1730:	47 c0       	rjmp	.+142    	; 0x17c0 <write_low_nibble+0xce>
    1732:	2b 81       	ldd	r18, Y+3	; 0x03
    1734:	3c 81       	ldd	r19, Y+4	; 0x04
    1736:	23 34       	cpi	r18, 0x43	; 67
    1738:	31 05       	cpc	r19, r1
    173a:	21 f1       	breq	.+72     	; 0x1784 <write_low_nibble+0x92>
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	9c 81       	ldd	r25, Y+4	; 0x04
    1740:	84 34       	cpi	r24, 0x44	; 68
    1742:	91 05       	cpc	r25, r1
    1744:	71 f1       	breq	.+92     	; 0x17a2 <write_low_nibble+0xb0>
    1746:	3c c0       	rjmp	.+120    	; 0x17c0 <write_low_nibble+0xce>
	{
		case 'A':
		PORTA&=0xf0;
    1748:	ab e3       	ldi	r26, 0x3B	; 59
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	eb e3       	ldi	r30, 0x3B	; 59
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	80 7f       	andi	r24, 0xF0	; 240
    1754:	8c 93       	st	X, r24
		PORTA|=value;
    1756:	ab e3       	ldi	r26, 0x3B	; 59
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	eb e3       	ldi	r30, 0x3B	; 59
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	90 81       	ld	r25, Z
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	89 2b       	or	r24, r25
    1764:	8c 93       	st	X, r24
		case 'B':
		PORTB&=0xf0;
    1766:	a8 e3       	ldi	r26, 0x38	; 56
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e8 e3       	ldi	r30, 0x38	; 56
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	80 7f       	andi	r24, 0xF0	; 240
    1772:	8c 93       	st	X, r24
		PORTB|=value;
    1774:	a8 e3       	ldi	r26, 0x38	; 56
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e8 e3       	ldi	r30, 0x38	; 56
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	90 81       	ld	r25, Z
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	89 2b       	or	r24, r25
    1782:	8c 93       	st	X, r24
		case 'C':
		PORTC&=0xf0;
    1784:	a5 e3       	ldi	r26, 0x35	; 53
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e5 e3       	ldi	r30, 0x35	; 53
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	80 7f       	andi	r24, 0xF0	; 240
    1790:	8c 93       	st	X, r24
		PORTC|=value;
    1792:	a5 e3       	ldi	r26, 0x35	; 53
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e5 e3       	ldi	r30, 0x35	; 53
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	90 81       	ld	r25, Z
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	89 2b       	or	r24, r25
    17a0:	8c 93       	st	X, r24
		case 'D':
		PORTD&=0xf0;
    17a2:	a2 e3       	ldi	r26, 0x32	; 50
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e2 e3       	ldi	r30, 0x32	; 50
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	80 7f       	andi	r24, 0xF0	; 240
    17ae:	8c 93       	st	X, r24
		PORTD|=value;
    17b0:	a2 e3       	ldi	r26, 0x32	; 50
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e2 e3       	ldi	r30, 0x32	; 50
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	90 81       	ld	r25, Z
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	89 2b       	or	r24, r25
    17be:	8c 93       	st	X, r24
	}
}
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	08 95       	ret

000017ce <write_high_nibble>:

void write_high_nibble(unsigned char portname,unsigned char value)
{
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <write_high_nibble+0x6>
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <write_high_nibble+0x8>
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	89 83       	std	Y+1, r24	; 0x01
    17dc:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	82 95       	swap	r24
    17e2:	80 7f       	andi	r24, 0xF0	; 240
    17e4:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	3c 83       	std	Y+4, r19	; 0x04
    17ee:	2b 83       	std	Y+3, r18	; 0x03
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	9c 81       	ldd	r25, Y+4	; 0x04
    17f4:	82 34       	cpi	r24, 0x42	; 66
    17f6:	91 05       	cpc	r25, r1
    17f8:	29 f1       	breq	.+74     	; 0x1844 <write_high_nibble+0x76>
    17fa:	2b 81       	ldd	r18, Y+3	; 0x03
    17fc:	3c 81       	ldd	r19, Y+4	; 0x04
    17fe:	23 34       	cpi	r18, 0x43	; 67
    1800:	31 05       	cpc	r19, r1
    1802:	34 f4       	brge	.+12     	; 0x1810 <write_high_nibble+0x42>
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	9c 81       	ldd	r25, Y+4	; 0x04
    1808:	81 34       	cpi	r24, 0x41	; 65
    180a:	91 05       	cpc	r25, r1
    180c:	61 f0       	breq	.+24     	; 0x1826 <write_high_nibble+0x58>
    180e:	47 c0       	rjmp	.+142    	; 0x189e <write_high_nibble+0xd0>
    1810:	2b 81       	ldd	r18, Y+3	; 0x03
    1812:	3c 81       	ldd	r19, Y+4	; 0x04
    1814:	23 34       	cpi	r18, 0x43	; 67
    1816:	31 05       	cpc	r19, r1
    1818:	21 f1       	breq	.+72     	; 0x1862 <write_high_nibble+0x94>
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	9c 81       	ldd	r25, Y+4	; 0x04
    181e:	84 34       	cpi	r24, 0x44	; 68
    1820:	91 05       	cpc	r25, r1
    1822:	71 f1       	breq	.+92     	; 0x1880 <write_high_nibble+0xb2>
    1824:	3c c0       	rjmp	.+120    	; 0x189e <write_high_nibble+0xd0>
	{
		case 'A':
		PORTA&=0x0f;
    1826:	ab e3       	ldi	r26, 0x3B	; 59
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	eb e3       	ldi	r30, 0x3B	; 59
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	8f 70       	andi	r24, 0x0F	; 15
    1832:	8c 93       	st	X, r24
		PORTA|=value;
    1834:	ab e3       	ldi	r26, 0x3B	; 59
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	eb e3       	ldi	r30, 0x3B	; 59
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	90 81       	ld	r25, Z
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	89 2b       	or	r24, r25
    1842:	8c 93       	st	X, r24
		case 'B':
		PORTB&=0x0f;
    1844:	a8 e3       	ldi	r26, 0x38	; 56
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e8 e3       	ldi	r30, 0x38	; 56
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	8f 70       	andi	r24, 0x0F	; 15
    1850:	8c 93       	st	X, r24
		PORTB|=value;
    1852:	a8 e3       	ldi	r26, 0x38	; 56
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e8 e3       	ldi	r30, 0x38	; 56
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	90 81       	ld	r25, Z
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	89 2b       	or	r24, r25
    1860:	8c 93       	st	X, r24
		case 'C':
		PORTC&=0x0f;
    1862:	a5 e3       	ldi	r26, 0x35	; 53
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e5 e3       	ldi	r30, 0x35	; 53
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	8f 70       	andi	r24, 0x0F	; 15
    186e:	8c 93       	st	X, r24
		PORTC|=value;
    1870:	a5 e3       	ldi	r26, 0x35	; 53
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e5 e3       	ldi	r30, 0x35	; 53
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	90 81       	ld	r25, Z
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	89 2b       	or	r24, r25
    187e:	8c 93       	st	X, r24
		case 'D':
		PORTD&=0x0f;
    1880:	a2 e3       	ldi	r26, 0x32	; 50
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e2 e3       	ldi	r30, 0x32	; 50
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	8f 70       	andi	r24, 0x0F	; 15
    188c:	8c 93       	st	X, r24
		PORTD|=value;
    188e:	a2 e3       	ldi	r26, 0x32	; 50
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e2 e3       	ldi	r30, 0x32	; 50
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	90 81       	ld	r25, Z
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	89 2b       	or	r24, r25
    189c:	8c 93       	st	X, r24
	}
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <LCD_vInit>:
#include "LCD.h"
#define  F_CPU 8000000UL 
#include <util/delay.h>

void LCD_vInit(void)
{
    18ac:	0f 93       	push	r16
    18ae:	1f 93       	push	r17
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	c4 55       	subi	r28, 0x54	; 84
    18ba:	d0 40       	sbci	r29, 0x00	; 0
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	f8 94       	cli
    18c0:	de bf       	out	0x3e, r29	; 62
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	cd bf       	out	0x3d, r28	; 61
    18c6:	fe 01       	movw	r30, r28
    18c8:	ef 5a       	subi	r30, 0xAF	; 175
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	a8 e4       	ldi	r26, 0x48	; 72
    18d2:	b3 e4       	ldi	r27, 0x43	; 67
    18d4:	80 83       	st	Z, r24
    18d6:	91 83       	std	Z+1, r25	; 0x01
    18d8:	a2 83       	std	Z+2, r26	; 0x02
    18da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18dc:	8e 01       	movw	r16, r28
    18de:	03 5b       	subi	r16, 0xB3	; 179
    18e0:	1f 4f       	sbci	r17, 0xFF	; 255
    18e2:	fe 01       	movw	r30, r28
    18e4:	ef 5a       	subi	r30, 0xAF	; 175
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	60 81       	ld	r22, Z
    18ea:	71 81       	ldd	r23, Z+1	; 0x01
    18ec:	82 81       	ldd	r24, Z+2	; 0x02
    18ee:	93 81       	ldd	r25, Z+3	; 0x03
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	4a ef       	ldi	r20, 0xFA	; 250
    18f6:	54 e4       	ldi	r21, 0x44	; 68
    18f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	f8 01       	movw	r30, r16
    1902:	80 83       	st	Z, r24
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	a2 83       	std	Z+2, r26	; 0x02
    1908:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    190a:	fe 01       	movw	r30, r28
    190c:	e3 5b       	subi	r30, 0xB3	; 179
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	60 81       	ld	r22, Z
    1912:	71 81       	ldd	r23, Z+1	; 0x01
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e8       	ldi	r20, 0x80	; 128
    191e:	5f e3       	ldi	r21, 0x3F	; 63
    1920:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1924:	88 23       	and	r24, r24
    1926:	44 f4       	brge	.+16     	; 0x1938 <LCD_vInit+0x8c>
		__ticks = 1;
    1928:	fe 01       	movw	r30, r28
    192a:	e5 5b       	subi	r30, 0xB5	; 181
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	91 83       	std	Z+1, r25	; 0x01
    1934:	80 83       	st	Z, r24
    1936:	64 c0       	rjmp	.+200    	; 0x1a00 <LCD_vInit+0x154>
	else if (__tmp > 65535)
    1938:	fe 01       	movw	r30, r28
    193a:	e3 5b       	subi	r30, 0xB3	; 179
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	60 81       	ld	r22, Z
    1940:	71 81       	ldd	r23, Z+1	; 0x01
    1942:	82 81       	ldd	r24, Z+2	; 0x02
    1944:	93 81       	ldd	r25, Z+3	; 0x03
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	3f ef       	ldi	r19, 0xFF	; 255
    194a:	4f e7       	ldi	r20, 0x7F	; 127
    194c:	57 e4       	ldi	r21, 0x47	; 71
    194e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1952:	18 16       	cp	r1, r24
    1954:	0c f0       	brlt	.+2      	; 0x1958 <LCD_vInit+0xac>
    1956:	43 c0       	rjmp	.+134    	; 0x19de <LCD_vInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1958:	fe 01       	movw	r30, r28
    195a:	ef 5a       	subi	r30, 0xAF	; 175
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	60 81       	ld	r22, Z
    1960:	71 81       	ldd	r23, Z+1	; 0x01
    1962:	82 81       	ldd	r24, Z+2	; 0x02
    1964:	93 81       	ldd	r25, Z+3	; 0x03
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e2       	ldi	r20, 0x20	; 32
    196c:	51 e4       	ldi	r21, 0x41	; 65
    196e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	8e 01       	movw	r16, r28
    1978:	05 5b       	subi	r16, 0xB5	; 181
    197a:	1f 4f       	sbci	r17, 0xFF	; 255
    197c:	bc 01       	movw	r22, r24
    197e:	cd 01       	movw	r24, r26
    1980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	f8 01       	movw	r30, r16
    198a:	91 83       	std	Z+1, r25	; 0x01
    198c:	80 83       	st	Z, r24
    198e:	1f c0       	rjmp	.+62     	; 0x19ce <LCD_vInit+0x122>
    1990:	fe 01       	movw	r30, r28
    1992:	e7 5b       	subi	r30, 0xB7	; 183
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	88 ec       	ldi	r24, 0xC8	; 200
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	91 83       	std	Z+1, r25	; 0x01
    199c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    199e:	fe 01       	movw	r30, r28
    19a0:	e7 5b       	subi	r30, 0xB7	; 183
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	80 81       	ld	r24, Z
    19a6:	91 81       	ldd	r25, Z+1	; 0x01
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <LCD_vInit+0xfc>
    19ac:	fe 01       	movw	r30, r28
    19ae:	e7 5b       	subi	r30, 0xB7	; 183
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	91 83       	std	Z+1, r25	; 0x01
    19b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b6:	de 01       	movw	r26, r28
    19b8:	a5 5b       	subi	r26, 0xB5	; 181
    19ba:	bf 4f       	sbci	r27, 0xFF	; 255
    19bc:	fe 01       	movw	r30, r28
    19be:	e5 5b       	subi	r30, 0xB5	; 181
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	80 81       	ld	r24, Z
    19c4:	91 81       	ldd	r25, Z+1	; 0x01
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	11 96       	adiw	r26, 0x01	; 1
    19ca:	9c 93       	st	X, r25
    19cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ce:	fe 01       	movw	r30, r28
    19d0:	e5 5b       	subi	r30, 0xB5	; 181
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	80 81       	ld	r24, Z
    19d6:	91 81       	ldd	r25, Z+1	; 0x01
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	d1 f6       	brne	.-76     	; 0x1990 <LCD_vInit+0xe4>
    19dc:	27 c0       	rjmp	.+78     	; 0x1a2c <LCD_vInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19de:	8e 01       	movw	r16, r28
    19e0:	05 5b       	subi	r16, 0xB5	; 181
    19e2:	1f 4f       	sbci	r17, 0xFF	; 255
    19e4:	fe 01       	movw	r30, r28
    19e6:	e3 5b       	subi	r30, 0xB3	; 179
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	60 81       	ld	r22, Z
    19ec:	71 81       	ldd	r23, Z+1	; 0x01
    19ee:	82 81       	ldd	r24, Z+2	; 0x02
    19f0:	93 81       	ldd	r25, Z+3	; 0x03
    19f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	f8 01       	movw	r30, r16
    19fc:	91 83       	std	Z+1, r25	; 0x01
    19fe:	80 83       	st	Z, r24
    1a00:	de 01       	movw	r26, r28
    1a02:	a9 5b       	subi	r26, 0xB9	; 185
    1a04:	bf 4f       	sbci	r27, 0xFF	; 255
    1a06:	fe 01       	movw	r30, r28
    1a08:	e5 5b       	subi	r30, 0xB5	; 181
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	80 81       	ld	r24, Z
    1a0e:	91 81       	ldd	r25, Z+1	; 0x01
    1a10:	8d 93       	st	X+, r24
    1a12:	9c 93       	st	X, r25
    1a14:	fe 01       	movw	r30, r28
    1a16:	e9 5b       	subi	r30, 0xB9	; 185
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	80 81       	ld	r24, Z
    1a1c:	91 81       	ldd	r25, Z+1	; 0x01
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <LCD_vInit+0x172>
    1a22:	fe 01       	movw	r30, r28
    1a24:	e9 5b       	subi	r30, 0xB9	; 185
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	91 83       	std	Z+1, r25	; 0x01
    1a2a:	80 83       	st	Z, r24
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1); 
	
	#elif defined four_bits_mode
	DIO_vsetPINDir('D',4,1);
    1a2c:	84 e4       	ldi	r24, 0x44	; 68
    1a2e:	64 e0       	ldi	r22, 0x04	; 4
    1a30:	41 e0       	ldi	r20, 0x01	; 1
    1a32:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',5,1);
    1a36:	84 e4       	ldi	r24, 0x44	; 68
    1a38:	65 e0       	ldi	r22, 0x05	; 5
    1a3a:	41 e0       	ldi	r20, 0x01	; 1
    1a3c:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',6,1);
    1a40:	84 e4       	ldi	r24, 0x44	; 68
    1a42:	66 e0       	ldi	r22, 0x06	; 6
    1a44:	41 e0       	ldi	r20, 0x01	; 1
    1a46:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',7,1);
    1a4a:	84 e4       	ldi	r24, 0x44	; 68
    1a4c:	67 e0       	ldi	r22, 0x07	; 7
    1a4e:	41 e0       	ldi	r20, 0x01	; 1
    1a50:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
    1a54:	82 e4       	ldi	r24, 0x42	; 66
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	41 e0       	ldi	r20, 0x01	; 1
    1a5a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
    1a5e:	82 e4       	ldi	r24, 0x42	; 66
    1a60:	62 e0       	ldi	r22, 0x02	; 2
    1a62:	41 e0       	ldi	r20, 0x01	; 1
    1a64:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
    1a68:	82 e4       	ldi	r24, 0x42	; 66
    1a6a:	61 e0       	ldi	r22, 0x01	; 1
    1a6c:	41 e0       	ldi	r20, 0x01	; 1
    1a6e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <DIO_vsetPINDir>
   	DIO_write('B',RW,0);
    1a72:	82 e4       	ldi	r24, 0x42	; 66
    1a74:	62 e0       	ldi	r22, 0x02	; 2
    1a76:	40 e0       	ldi	r20, 0x00	; 0
    1a78:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_write>
	LCD_vSend_cmd(RETURN_HOME); //return home
    1a7c:	82 e0       	ldi	r24, 0x02	; 2
    1a7e:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_vSend_cmd>
    1a82:	fe 01       	movw	r30, r28
    1a84:	ed 5b       	subi	r30, 0xBD	; 189
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	a0 e2       	ldi	r26, 0x20	; 32
    1a8e:	b1 e4       	ldi	r27, 0x41	; 65
    1a90:	80 83       	st	Z, r24
    1a92:	91 83       	std	Z+1, r25	; 0x01
    1a94:	a2 83       	std	Z+2, r26	; 0x02
    1a96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a98:	8e 01       	movw	r16, r28
    1a9a:	01 5c       	subi	r16, 0xC1	; 193
    1a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	ed 5b       	subi	r30, 0xBD	; 189
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	60 81       	ld	r22, Z
    1aa6:	71 81       	ldd	r23, Z+1	; 0x01
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	4a ef       	ldi	r20, 0xFA	; 250
    1ab2:	54 e4       	ldi	r21, 0x44	; 68
    1ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	f8 01       	movw	r30, r16
    1abe:	80 83       	st	Z, r24
    1ac0:	91 83       	std	Z+1, r25	; 0x01
    1ac2:	a2 83       	std	Z+2, r26	; 0x02
    1ac4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	ff 96       	adiw	r30, 0x3f	; 63
    1aca:	60 81       	ld	r22, Z
    1acc:	71 81       	ldd	r23, Z+1	; 0x01
    1ace:	82 81       	ldd	r24, Z+2	; 0x02
    1ad0:	93 81       	ldd	r25, Z+3	; 0x03
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e8       	ldi	r20, 0x80	; 128
    1ad8:	5f e3       	ldi	r21, 0x3F	; 63
    1ada:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ade:	88 23       	and	r24, r24
    1ae0:	2c f4       	brge	.+10     	; 0x1aec <LCD_vInit+0x240>
		__ticks = 1;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	9e af       	std	Y+62, r25	; 0x3e
    1ae8:	8d af       	std	Y+61, r24	; 0x3d
    1aea:	46 c0       	rjmp	.+140    	; 0x1b78 <LCD_vInit+0x2cc>
	else if (__tmp > 65535)
    1aec:	fe 01       	movw	r30, r28
    1aee:	ff 96       	adiw	r30, 0x3f	; 63
    1af0:	60 81       	ld	r22, Z
    1af2:	71 81       	ldd	r23, Z+1	; 0x01
    1af4:	82 81       	ldd	r24, Z+2	; 0x02
    1af6:	93 81       	ldd	r25, Z+3	; 0x03
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	3f ef       	ldi	r19, 0xFF	; 255
    1afc:	4f e7       	ldi	r20, 0x7F	; 127
    1afe:	57 e4       	ldi	r21, 0x47	; 71
    1b00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b04:	18 16       	cp	r1, r24
    1b06:	64 f5       	brge	.+88     	; 0x1b60 <LCD_vInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b08:	fe 01       	movw	r30, r28
    1b0a:	ed 5b       	subi	r30, 0xBD	; 189
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	60 81       	ld	r22, Z
    1b10:	71 81       	ldd	r23, Z+1	; 0x01
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	93 81       	ldd	r25, Z+3	; 0x03
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e2       	ldi	r20, 0x20	; 32
    1b1c:	51 e4       	ldi	r21, 0x41	; 65
    1b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	bc 01       	movw	r22, r24
    1b28:	cd 01       	movw	r24, r26
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9e af       	std	Y+62, r25	; 0x3e
    1b34:	8d af       	std	Y+61, r24	; 0x3d
    1b36:	0f c0       	rjmp	.+30     	; 0x1b56 <LCD_vInit+0x2aa>
    1b38:	88 ec       	ldi	r24, 0xC8	; 200
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	9c af       	std	Y+60, r25	; 0x3c
    1b3e:	8b af       	std	Y+59, r24	; 0x3b
    1b40:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b42:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <LCD_vInit+0x298>
    1b48:	9c af       	std	Y+60, r25	; 0x3c
    1b4a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	9e af       	std	Y+62, r25	; 0x3e
    1b54:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b56:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b58:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	69 f7       	brne	.-38     	; 0x1b38 <LCD_vInit+0x28c>
    1b5e:	16 c0       	rjmp	.+44     	; 0x1b8c <LCD_vInit+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b60:	fe 01       	movw	r30, r28
    1b62:	ff 96       	adiw	r30, 0x3f	; 63
    1b64:	60 81       	ld	r22, Z
    1b66:	71 81       	ldd	r23, Z+1	; 0x01
    1b68:	82 81       	ldd	r24, Z+2	; 0x02
    1b6a:	93 81       	ldd	r25, Z+3	; 0x03
    1b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	9e af       	std	Y+62, r25	; 0x3e
    1b76:	8d af       	std	Y+61, r24	; 0x3d
    1b78:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b7c:	9a af       	std	Y+58, r25	; 0x3a
    1b7e:	89 af       	std	Y+57, r24	; 0x39
    1b80:	89 ad       	ldd	r24, Y+57	; 0x39
    1b82:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <LCD_vInit+0x2d8>
    1b88:	9a af       	std	Y+58, r25	; 0x3a
    1b8a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS); //4bit mode
    1b8c:	88 e2       	ldi	r24, 0x28	; 40
    1b8e:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_vSend_cmd>
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	a0 e8       	ldi	r26, 0x80	; 128
    1b98:	bf e3       	ldi	r27, 0x3F	; 63
    1b9a:	8d ab       	std	Y+53, r24	; 0x35
    1b9c:	9e ab       	std	Y+54, r25	; 0x36
    1b9e:	af ab       	std	Y+55, r26	; 0x37
    1ba0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ba4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ba6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ba8:	98 ad       	ldd	r25, Y+56	; 0x38
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	4a ef       	ldi	r20, 0xFA	; 250
    1bb0:	54 e4       	ldi	r21, 0x44	; 68
    1bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	89 ab       	std	Y+49, r24	; 0x31
    1bbc:	9a ab       	std	Y+50, r25	; 0x32
    1bbe:	ab ab       	std	Y+51, r26	; 0x33
    1bc0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bc2:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc4:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc6:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc8:	9c a9       	ldd	r25, Y+52	; 0x34
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e8       	ldi	r20, 0x80	; 128
    1bd0:	5f e3       	ldi	r21, 0x3F	; 63
    1bd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bd6:	88 23       	and	r24, r24
    1bd8:	2c f4       	brge	.+10     	; 0x1be4 <LCD_vInit+0x338>
		__ticks = 1;
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	98 ab       	std	Y+48, r25	; 0x30
    1be0:	8f a7       	std	Y+47, r24	; 0x2f
    1be2:	3f c0       	rjmp	.+126    	; 0x1c62 <LCD_vInit+0x3b6>
	else if (__tmp > 65535)
    1be4:	69 a9       	ldd	r22, Y+49	; 0x31
    1be6:	7a a9       	ldd	r23, Y+50	; 0x32
    1be8:	8b a9       	ldd	r24, Y+51	; 0x33
    1bea:	9c a9       	ldd	r25, Y+52	; 0x34
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	3f ef       	ldi	r19, 0xFF	; 255
    1bf0:	4f e7       	ldi	r20, 0x7F	; 127
    1bf2:	57 e4       	ldi	r21, 0x47	; 71
    1bf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bf8:	18 16       	cp	r1, r24
    1bfa:	4c f5       	brge	.+82     	; 0x1c4e <LCD_vInit+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfc:	6d a9       	ldd	r22, Y+53	; 0x35
    1bfe:	7e a9       	ldd	r23, Y+54	; 0x36
    1c00:	8f a9       	ldd	r24, Y+55	; 0x37
    1c02:	98 ad       	ldd	r25, Y+56	; 0x38
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e2       	ldi	r20, 0x20	; 32
    1c0a:	51 e4       	ldi	r21, 0x41	; 65
    1c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	bc 01       	movw	r22, r24
    1c16:	cd 01       	movw	r24, r26
    1c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	98 ab       	std	Y+48, r25	; 0x30
    1c22:	8f a7       	std	Y+47, r24	; 0x2f
    1c24:	0f c0       	rjmp	.+30     	; 0x1c44 <LCD_vInit+0x398>
    1c26:	88 ec       	ldi	r24, 0xC8	; 200
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	9e a7       	std	Y+46, r25	; 0x2e
    1c2c:	8d a7       	std	Y+45, r24	; 0x2d
    1c2e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c30:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	f1 f7       	brne	.-4      	; 0x1c32 <LCD_vInit+0x386>
    1c36:	9e a7       	std	Y+46, r25	; 0x2e
    1c38:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c3c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	98 ab       	std	Y+48, r25	; 0x30
    1c42:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c44:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c46:	98 a9       	ldd	r25, Y+48	; 0x30
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	69 f7       	brne	.-38     	; 0x1c26 <LCD_vInit+0x37a>
    1c4c:	14 c0       	rjmp	.+40     	; 0x1c76 <LCD_vInit+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c50:	7a a9       	ldd	r23, Y+50	; 0x32
    1c52:	8b a9       	ldd	r24, Y+51	; 0x33
    1c54:	9c a9       	ldd	r25, Y+52	; 0x34
    1c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	98 ab       	std	Y+48, r25	; 0x30
    1c60:	8f a7       	std	Y+47, r24	; 0x2f
    1c62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c64:	98 a9       	ldd	r25, Y+48	; 0x30
    1c66:	9c a7       	std	Y+44, r25	; 0x2c
    1c68:	8b a7       	std	Y+43, r24	; 0x2b
    1c6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c6c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c6e:	01 97       	sbiw	r24, 0x01	; 1
    1c70:	f1 f7       	brne	.-4      	; 0x1c6e <LCD_vInit+0x3c2>
    1c72:	9c a7       	std	Y+44, r25	; 0x2c
    1c74:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_OFF);//display on cursor on
    1c76:	8c e0       	ldi	r24, 0x0C	; 12
    1c78:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_vSend_cmd>
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a0 e8       	ldi	r26, 0x80	; 128
    1c82:	bf e3       	ldi	r27, 0x3F	; 63
    1c84:	8f a3       	std	Y+39, r24	; 0x27
    1c86:	98 a7       	std	Y+40, r25	; 0x28
    1c88:	a9 a7       	std	Y+41, r26	; 0x29
    1c8a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8c:	6f a1       	ldd	r22, Y+39	; 0x27
    1c8e:	78 a5       	ldd	r23, Y+40	; 0x28
    1c90:	89 a5       	ldd	r24, Y+41	; 0x29
    1c92:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	4a ef       	ldi	r20, 0xFA	; 250
    1c9a:	54 e4       	ldi	r21, 0x44	; 68
    1c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	8b a3       	std	Y+35, r24	; 0x23
    1ca6:	9c a3       	std	Y+36, r25	; 0x24
    1ca8:	ad a3       	std	Y+37, r26	; 0x25
    1caa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cac:	6b a1       	ldd	r22, Y+35	; 0x23
    1cae:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb0:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb2:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e8       	ldi	r20, 0x80	; 128
    1cba:	5f e3       	ldi	r21, 0x3F	; 63
    1cbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc0:	88 23       	and	r24, r24
    1cc2:	2c f4       	brge	.+10     	; 0x1cce <LCD_vInit+0x422>
		__ticks = 1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	9a a3       	std	Y+34, r25	; 0x22
    1cca:	89 a3       	std	Y+33, r24	; 0x21
    1ccc:	3f c0       	rjmp	.+126    	; 0x1d4c <LCD_vInit+0x4a0>
	else if (__tmp > 65535)
    1cce:	6b a1       	ldd	r22, Y+35	; 0x23
    1cd0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cd2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cd4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	3f ef       	ldi	r19, 0xFF	; 255
    1cda:	4f e7       	ldi	r20, 0x7F	; 127
    1cdc:	57 e4       	ldi	r21, 0x47	; 71
    1cde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce2:	18 16       	cp	r1, r24
    1ce4:	4c f5       	brge	.+82     	; 0x1d38 <LCD_vInit+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ce8:	78 a5       	ldd	r23, Y+40	; 0x28
    1cea:	89 a5       	ldd	r24, Y+41	; 0x29
    1cec:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e2       	ldi	r20, 0x20	; 32
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9a a3       	std	Y+34, r25	; 0x22
    1d0c:	89 a3       	std	Y+33, r24	; 0x21
    1d0e:	0f c0       	rjmp	.+30     	; 0x1d2e <LCD_vInit+0x482>
    1d10:	88 ec       	ldi	r24, 0xC8	; 200
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	98 a3       	std	Y+32, r25	; 0x20
    1d16:	8f 8f       	std	Y+31, r24	; 0x1f
    1d18:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d1a:	98 a1       	ldd	r25, Y+32	; 0x20
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <LCD_vInit+0x470>
    1d20:	98 a3       	std	Y+32, r25	; 0x20
    1d22:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d24:	89 a1       	ldd	r24, Y+33	; 0x21
    1d26:	9a a1       	ldd	r25, Y+34	; 0x22
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	9a a3       	std	Y+34, r25	; 0x22
    1d2c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d30:	9a a1       	ldd	r25, Y+34	; 0x22
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	69 f7       	brne	.-38     	; 0x1d10 <LCD_vInit+0x464>
    1d36:	14 c0       	rjmp	.+40     	; 0x1d60 <LCD_vInit+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d38:	6b a1       	ldd	r22, Y+35	; 0x23
    1d3a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d3e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	9a a3       	std	Y+34, r25	; 0x22
    1d4a:	89 a3       	std	Y+33, r24	; 0x21
    1d4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d4e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d50:	9e 8f       	std	Y+30, r25	; 0x1e
    1d52:	8d 8f       	std	Y+29, r24	; 0x1d
    1d54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d56:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <LCD_vInit+0x4ac>
    1d5c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d5e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_vSend_cmd>
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	a0 e2       	ldi	r26, 0x20	; 32
    1d6c:	b1 e4       	ldi	r27, 0x41	; 65
    1d6e:	89 8f       	std	Y+25, r24	; 0x19
    1d70:	9a 8f       	std	Y+26, r25	; 0x1a
    1d72:	ab 8f       	std	Y+27, r26	; 0x1b
    1d74:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d76:	69 8d       	ldd	r22, Y+25	; 0x19
    1d78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	4a ef       	ldi	r20, 0xFA	; 250
    1d84:	54 e4       	ldi	r21, 0x44	; 68
    1d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	8d 8b       	std	Y+21, r24	; 0x15
    1d90:	9e 8b       	std	Y+22, r25	; 0x16
    1d92:	af 8b       	std	Y+23, r26	; 0x17
    1d94:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d96:	6d 89       	ldd	r22, Y+21	; 0x15
    1d98:	7e 89       	ldd	r23, Y+22	; 0x16
    1d9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e8       	ldi	r20, 0x80	; 128
    1da4:	5f e3       	ldi	r21, 0x3F	; 63
    1da6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1daa:	88 23       	and	r24, r24
    1dac:	2c f4       	brge	.+10     	; 0x1db8 <LCD_vInit+0x50c>
		__ticks = 1;
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	9c 8b       	std	Y+20, r25	; 0x14
    1db4:	8b 8b       	std	Y+19, r24	; 0x13
    1db6:	3f c0       	rjmp	.+126    	; 0x1e36 <LCD_vInit+0x58a>
	else if (__tmp > 65535)
    1db8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dba:	7e 89       	ldd	r23, Y+22	; 0x16
    1dbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	3f ef       	ldi	r19, 0xFF	; 255
    1dc4:	4f e7       	ldi	r20, 0x7F	; 127
    1dc6:	57 e4       	ldi	r21, 0x47	; 71
    1dc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dcc:	18 16       	cp	r1, r24
    1dce:	4c f5       	brge	.+82     	; 0x1e22 <LCD_vInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd0:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e2       	ldi	r20, 0x20	; 32
    1dde:	51 e4       	ldi	r21, 0x41	; 65
    1de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	bc 01       	movw	r22, r24
    1dea:	cd 01       	movw	r24, r26
    1dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	9c 8b       	std	Y+20, r25	; 0x14
    1df6:	8b 8b       	std	Y+19, r24	; 0x13
    1df8:	0f c0       	rjmp	.+30     	; 0x1e18 <LCD_vInit+0x56c>
    1dfa:	88 ec       	ldi	r24, 0xC8	; 200
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	9a 8b       	std	Y+18, r25	; 0x12
    1e00:	89 8b       	std	Y+17, r24	; 0x11
    1e02:	89 89       	ldd	r24, Y+17	; 0x11
    1e04:	9a 89       	ldd	r25, Y+18	; 0x12
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	f1 f7       	brne	.-4      	; 0x1e06 <LCD_vInit+0x55a>
    1e0a:	9a 8b       	std	Y+18, r25	; 0x12
    1e0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e10:	9c 89       	ldd	r25, Y+20	; 0x14
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	9c 8b       	std	Y+20, r25	; 0x14
    1e16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e18:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	69 f7       	brne	.-38     	; 0x1dfa <LCD_vInit+0x54e>
    1e20:	14 c0       	rjmp	.+40     	; 0x1e4a <LCD_vInit+0x59e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e22:	6d 89       	ldd	r22, Y+21	; 0x15
    1e24:	7e 89       	ldd	r23, Y+22	; 0x16
    1e26:	8f 89       	ldd	r24, Y+23	; 0x17
    1e28:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	9c 8b       	std	Y+20, r25	; 0x14
    1e34:	8b 8b       	std	Y+19, r24	; 0x13
    1e36:	8b 89       	ldd	r24, Y+19	; 0x13
    1e38:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3a:	98 8b       	std	Y+16, r25	; 0x10
    1e3c:	8f 87       	std	Y+15, r24	; 0x0f
    1e3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e40:	98 89       	ldd	r25, Y+16	; 0x10
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <LCD_vInit+0x596>
    1e46:	98 8b       	std	Y+16, r25	; 0x10
    1e48:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
    1e4a:	86 e0       	ldi	r24, 0x06	; 6
    1e4c:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_vSend_cmd>
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	a0 e8       	ldi	r26, 0x80	; 128
    1e56:	bf e3       	ldi	r27, 0x3F	; 63
    1e58:	8b 87       	std	Y+11, r24	; 0x0b
    1e5a:	9c 87       	std	Y+12, r25	; 0x0c
    1e5c:	ad 87       	std	Y+13, r26	; 0x0d
    1e5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	4a ef       	ldi	r20, 0xFA	; 250
    1e6e:	54 e4       	ldi	r21, 0x44	; 68
    1e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	8f 83       	std	Y+7, r24	; 0x07
    1e7a:	98 87       	std	Y+8, r25	; 0x08
    1e7c:	a9 87       	std	Y+9, r26	; 0x09
    1e7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e80:	6f 81       	ldd	r22, Y+7	; 0x07
    1e82:	78 85       	ldd	r23, Y+8	; 0x08
    1e84:	89 85       	ldd	r24, Y+9	; 0x09
    1e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e8       	ldi	r20, 0x80	; 128
    1e8e:	5f e3       	ldi	r21, 0x3F	; 63
    1e90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e94:	88 23       	and	r24, r24
    1e96:	2c f4       	brge	.+10     	; 0x1ea2 <LCD_vInit+0x5f6>
		__ticks = 1;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	9e 83       	std	Y+6, r25	; 0x06
    1e9e:	8d 83       	std	Y+5, r24	; 0x05
    1ea0:	3f c0       	rjmp	.+126    	; 0x1f20 <LCD_vInit+0x674>
	else if (__tmp > 65535)
    1ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea4:	78 85       	ldd	r23, Y+8	; 0x08
    1ea6:	89 85       	ldd	r24, Y+9	; 0x09
    1ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	3f ef       	ldi	r19, 0xFF	; 255
    1eae:	4f e7       	ldi	r20, 0x7F	; 127
    1eb0:	57 e4       	ldi	r21, 0x47	; 71
    1eb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb6:	18 16       	cp	r1, r24
    1eb8:	4c f5       	brge	.+82     	; 0x1f0c <LCD_vInit+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ebc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ebe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e2       	ldi	r20, 0x20	; 32
    1ec8:	51 e4       	ldi	r21, 0x41	; 65
    1eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	bc 01       	movw	r22, r24
    1ed4:	cd 01       	movw	r24, r26
    1ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	9e 83       	std	Y+6, r25	; 0x06
    1ee0:	8d 83       	std	Y+5, r24	; 0x05
    1ee2:	0f c0       	rjmp	.+30     	; 0x1f02 <LCD_vInit+0x656>
    1ee4:	88 ec       	ldi	r24, 0xC8	; 200
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	9c 83       	std	Y+4, r25	; 0x04
    1eea:	8b 83       	std	Y+3, r24	; 0x03
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <LCD_vInit+0x644>
    1ef4:	9c 83       	std	Y+4, r25	; 0x04
    1ef6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    1efa:	9e 81       	ldd	r25, Y+6	; 0x06
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	9e 83       	std	Y+6, r25	; 0x06
    1f00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f02:	8d 81       	ldd	r24, Y+5	; 0x05
    1f04:	9e 81       	ldd	r25, Y+6	; 0x06
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	69 f7       	brne	.-38     	; 0x1ee4 <LCD_vInit+0x638>
    1f0a:	14 c0       	rjmp	.+40     	; 0x1f34 <LCD_vInit+0x688>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f0e:	78 85       	ldd	r23, Y+8	; 0x08
    1f10:	89 85       	ldd	r24, Y+9	; 0x09
    1f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	9e 83       	std	Y+6, r25	; 0x06
    1f1e:	8d 83       	std	Y+5, r24	; 0x05
    1f20:	8d 81       	ldd	r24, Y+5	; 0x05
    1f22:	9e 81       	ldd	r25, Y+6	; 0x06
    1f24:	9a 83       	std	Y+2, r25	; 0x02
    1f26:	89 83       	std	Y+1, r24	; 0x01
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <LCD_vInit+0x680>
    1f30:	9a 83       	std	Y+2, r25	; 0x02
    1f32:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	#endif
}
    1f34:	cc 5a       	subi	r28, 0xAC	; 172
    1f36:	df 4f       	sbci	r29, 0xFF	; 255
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	f8 94       	cli
    1f3c:	de bf       	out	0x3e, r29	; 62
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	cd bf       	out	0x3d, r28	; 61
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	1f 91       	pop	r17
    1f48:	0f 91       	pop	r16
    1f4a:	08 95       	ret

00001f4c <send_falling_edge>:


static void send_falling_edge(void)
{
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	6c 97       	sbiw	r28, 0x1c	; 28
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
	DIO_write('B',EN,1);
    1f60:	82 e4       	ldi	r24, 0x42	; 66
    1f62:	60 e0       	ldi	r22, 0x00	; 0
    1f64:	41 e0       	ldi	r20, 0x01	; 1
    1f66:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_write>
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	a0 e0       	ldi	r26, 0x00	; 0
    1f70:	b0 e4       	ldi	r27, 0x40	; 64
    1f72:	89 8f       	std	Y+25, r24	; 0x19
    1f74:	9a 8f       	std	Y+26, r25	; 0x1a
    1f76:	ab 8f       	std	Y+27, r26	; 0x1b
    1f78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	4a ef       	ldi	r20, 0xFA	; 250
    1f88:	54 e4       	ldi	r21, 0x44	; 68
    1f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	8d 8b       	std	Y+21, r24	; 0x15
    1f94:	9e 8b       	std	Y+22, r25	; 0x16
    1f96:	af 8b       	std	Y+23, r26	; 0x17
    1f98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e8       	ldi	r20, 0x80	; 128
    1fa8:	5f e3       	ldi	r21, 0x3F	; 63
    1faa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fae:	88 23       	and	r24, r24
    1fb0:	2c f4       	brge	.+10     	; 0x1fbc <send_falling_edge+0x70>
		__ticks = 1;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9c 8b       	std	Y+20, r25	; 0x14
    1fb8:	8b 8b       	std	Y+19, r24	; 0x13
    1fba:	3f c0       	rjmp	.+126    	; 0x203a <send_falling_edge+0xee>
	else if (__tmp > 65535)
    1fbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	3f ef       	ldi	r19, 0xFF	; 255
    1fc8:	4f e7       	ldi	r20, 0x7F	; 127
    1fca:	57 e4       	ldi	r21, 0x47	; 71
    1fcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fd0:	18 16       	cp	r1, r24
    1fd2:	4c f5       	brge	.+82     	; 0x2026 <send_falling_edge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd4:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e2       	ldi	r20, 0x20	; 32
    1fe2:	51 e4       	ldi	r21, 0x41	; 65
    1fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	bc 01       	movw	r22, r24
    1fee:	cd 01       	movw	r24, r26
    1ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	9c 8b       	std	Y+20, r25	; 0x14
    1ffa:	8b 8b       	std	Y+19, r24	; 0x13
    1ffc:	0f c0       	rjmp	.+30     	; 0x201c <send_falling_edge+0xd0>
    1ffe:	88 ec       	ldi	r24, 0xC8	; 200
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9a 8b       	std	Y+18, r25	; 0x12
    2004:	89 8b       	std	Y+17, r24	; 0x11
    2006:	89 89       	ldd	r24, Y+17	; 0x11
    2008:	9a 89       	ldd	r25, Y+18	; 0x12
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <send_falling_edge+0xbe>
    200e:	9a 8b       	std	Y+18, r25	; 0x12
    2010:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2012:	8b 89       	ldd	r24, Y+19	; 0x13
    2014:	9c 89       	ldd	r25, Y+20	; 0x14
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	9c 8b       	std	Y+20, r25	; 0x14
    201a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201c:	8b 89       	ldd	r24, Y+19	; 0x13
    201e:	9c 89       	ldd	r25, Y+20	; 0x14
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	69 f7       	brne	.-38     	; 0x1ffe <send_falling_edge+0xb2>
    2024:	14 c0       	rjmp	.+40     	; 0x204e <send_falling_edge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2026:	6d 89       	ldd	r22, Y+21	; 0x15
    2028:	7e 89       	ldd	r23, Y+22	; 0x16
    202a:	8f 89       	ldd	r24, Y+23	; 0x17
    202c:	98 8d       	ldd	r25, Y+24	; 0x18
    202e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	9c 8b       	std	Y+20, r25	; 0x14
    2038:	8b 8b       	std	Y+19, r24	; 0x13
    203a:	8b 89       	ldd	r24, Y+19	; 0x13
    203c:	9c 89       	ldd	r25, Y+20	; 0x14
    203e:	98 8b       	std	Y+16, r25	; 0x10
    2040:	8f 87       	std	Y+15, r24	; 0x0f
    2042:	8f 85       	ldd	r24, Y+15	; 0x0f
    2044:	98 89       	ldd	r25, Y+16	; 0x10
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	f1 f7       	brne	.-4      	; 0x2046 <send_falling_edge+0xfa>
    204a:	98 8b       	std	Y+16, r25	; 0x10
    204c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_write('B',EN,0);
    204e:	82 e4       	ldi	r24, 0x42	; 66
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	40 e0       	ldi	r20, 0x00	; 0
    2054:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_write>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e0       	ldi	r26, 0x00	; 0
    205e:	b0 e4       	ldi	r27, 0x40	; 64
    2060:	8b 87       	std	Y+11, r24	; 0x0b
    2062:	9c 87       	std	Y+12, r25	; 0x0c
    2064:	ad 87       	std	Y+13, r26	; 0x0d
    2066:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2068:	6b 85       	ldd	r22, Y+11	; 0x0b
    206a:	7c 85       	ldd	r23, Y+12	; 0x0c
    206c:	8d 85       	ldd	r24, Y+13	; 0x0d
    206e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4a ef       	ldi	r20, 0xFA	; 250
    2076:	54 e4       	ldi	r21, 0x44	; 68
    2078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	8f 83       	std	Y+7, r24	; 0x07
    2082:	98 87       	std	Y+8, r25	; 0x08
    2084:	a9 87       	std	Y+9, r26	; 0x09
    2086:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2088:	6f 81       	ldd	r22, Y+7	; 0x07
    208a:	78 85       	ldd	r23, Y+8	; 0x08
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e8       	ldi	r20, 0x80	; 128
    2096:	5f e3       	ldi	r21, 0x3F	; 63
    2098:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    209c:	88 23       	and	r24, r24
    209e:	2c f4       	brge	.+10     	; 0x20aa <send_falling_edge+0x15e>
		__ticks = 1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9e 83       	std	Y+6, r25	; 0x06
    20a6:	8d 83       	std	Y+5, r24	; 0x05
    20a8:	3f c0       	rjmp	.+126    	; 0x2128 <send_falling_edge+0x1dc>
	else if (__tmp > 65535)
    20aa:	6f 81       	ldd	r22, Y+7	; 0x07
    20ac:	78 85       	ldd	r23, Y+8	; 0x08
    20ae:	89 85       	ldd	r24, Y+9	; 0x09
    20b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	3f ef       	ldi	r19, 0xFF	; 255
    20b6:	4f e7       	ldi	r20, 0x7F	; 127
    20b8:	57 e4       	ldi	r21, 0x47	; 71
    20ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20be:	18 16       	cp	r1, r24
    20c0:	4c f5       	brge	.+82     	; 0x2114 <send_falling_edge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e2       	ldi	r20, 0x20	; 32
    20d0:	51 e4       	ldi	r21, 0x41	; 65
    20d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	bc 01       	movw	r22, r24
    20dc:	cd 01       	movw	r24, r26
    20de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	9e 83       	std	Y+6, r25	; 0x06
    20e8:	8d 83       	std	Y+5, r24	; 0x05
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <send_falling_edge+0x1be>
    20ec:	88 ec       	ldi	r24, 0xC8	; 200
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9c 83       	std	Y+4, r25	; 0x04
    20f2:	8b 83       	std	Y+3, r24	; 0x03
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	9c 81       	ldd	r25, Y+4	; 0x04
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <send_falling_edge+0x1ac>
    20fc:	9c 83       	std	Y+4, r25	; 0x04
    20fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	9e 83       	std	Y+6, r25	; 0x06
    2108:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210a:	8d 81       	ldd	r24, Y+5	; 0x05
    210c:	9e 81       	ldd	r25, Y+6	; 0x06
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	69 f7       	brne	.-38     	; 0x20ec <send_falling_edge+0x1a0>
    2112:	14 c0       	rjmp	.+40     	; 0x213c <send_falling_edge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2114:	6f 81       	ldd	r22, Y+7	; 0x07
    2116:	78 85       	ldd	r23, Y+8	; 0x08
    2118:	89 85       	ldd	r24, Y+9	; 0x09
    211a:	9a 85       	ldd	r25, Y+10	; 0x0a
    211c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	9e 83       	std	Y+6, r25	; 0x06
    2126:	8d 83       	std	Y+5, r24	; 0x05
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	9a 83       	std	Y+2, r25	; 0x02
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	9a 81       	ldd	r25, Y+2	; 0x02
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <send_falling_edge+0x1e8>
    2138:	9a 83       	std	Y+2, r25	; 0x02
    213a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    213c:	6c 96       	adiw	r28, 0x1c	; 28
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	08 95       	ret

0000214e <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	2f 97       	sbiw	r28, 0x0f	; 15
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61
    2162:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_write_port('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('D',cmd>>4);
    2164:	8f 85       	ldd	r24, Y+15	; 0x0f
    2166:	98 2f       	mov	r25, r24
    2168:	92 95       	swap	r25
    216a:	9f 70       	andi	r25, 0x0F	; 15
    216c:	84 e4       	ldi	r24, 0x44	; 68
    216e:	69 2f       	mov	r22, r25
    2170:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <write_high_nibble>
	DIO_write('B',RS,0);
    2174:	82 e4       	ldi	r24, 0x42	; 66
    2176:	61 e0       	ldi	r22, 0x01	; 1
    2178:	40 e0       	ldi	r20, 0x00	; 0
    217a:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_write>
	send_falling_edge();
    217e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <send_falling_edge>
	write_high_nibble('D',cmd);
    2182:	84 e4       	ldi	r24, 0x44	; 68
    2184:	6f 85       	ldd	r22, Y+15	; 0x0f
    2186:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <write_high_nibble>
	DIO_write('B',RS,0);
    218a:	82 e4       	ldi	r24, 0x42	; 66
    218c:	61 e0       	ldi	r22, 0x01	; 1
    218e:	40 e0       	ldi	r20, 0x00	; 0
    2190:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_write>
	send_falling_edge();
    2194:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <send_falling_edge>
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	a0 e8       	ldi	r26, 0x80	; 128
    219e:	bf e3       	ldi	r27, 0x3F	; 63
    21a0:	8b 87       	std	Y+11, r24	; 0x0b
    21a2:	9c 87       	std	Y+12, r25	; 0x0c
    21a4:	ad 87       	std	Y+13, r26	; 0x0d
    21a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	4a ef       	ldi	r20, 0xFA	; 250
    21b6:	54 e4       	ldi	r21, 0x44	; 68
    21b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	8f 83       	std	Y+7, r24	; 0x07
    21c2:	98 87       	std	Y+8, r25	; 0x08
    21c4:	a9 87       	std	Y+9, r26	; 0x09
    21c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21c8:	6f 81       	ldd	r22, Y+7	; 0x07
    21ca:	78 85       	ldd	r23, Y+8	; 0x08
    21cc:	89 85       	ldd	r24, Y+9	; 0x09
    21ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e8       	ldi	r20, 0x80	; 128
    21d6:	5f e3       	ldi	r21, 0x3F	; 63
    21d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21dc:	88 23       	and	r24, r24
    21de:	2c f4       	brge	.+10     	; 0x21ea <LCD_vSend_cmd+0x9c>
		__ticks = 1;
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	9e 83       	std	Y+6, r25	; 0x06
    21e6:	8d 83       	std	Y+5, r24	; 0x05
    21e8:	3f c0       	rjmp	.+126    	; 0x2268 <LCD_vSend_cmd+0x11a>
	else if (__tmp > 65535)
    21ea:	6f 81       	ldd	r22, Y+7	; 0x07
    21ec:	78 85       	ldd	r23, Y+8	; 0x08
    21ee:	89 85       	ldd	r24, Y+9	; 0x09
    21f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	3f ef       	ldi	r19, 0xFF	; 255
    21f6:	4f e7       	ldi	r20, 0x7F	; 127
    21f8:	57 e4       	ldi	r21, 0x47	; 71
    21fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21fe:	18 16       	cp	r1, r24
    2200:	4c f5       	brge	.+82     	; 0x2254 <LCD_vSend_cmd+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2202:	6b 85       	ldd	r22, Y+11	; 0x0b
    2204:	7c 85       	ldd	r23, Y+12	; 0x0c
    2206:	8d 85       	ldd	r24, Y+13	; 0x0d
    2208:	9e 85       	ldd	r25, Y+14	; 0x0e
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	40 e2       	ldi	r20, 0x20	; 32
    2210:	51 e4       	ldi	r21, 0x41	; 65
    2212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	bc 01       	movw	r22, r24
    221c:	cd 01       	movw	r24, r26
    221e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	9e 83       	std	Y+6, r25	; 0x06
    2228:	8d 83       	std	Y+5, r24	; 0x05
    222a:	0f c0       	rjmp	.+30     	; 0x224a <LCD_vSend_cmd+0xfc>
    222c:	88 ec       	ldi	r24, 0xC8	; 200
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	9c 83       	std	Y+4, r25	; 0x04
    2232:	8b 83       	std	Y+3, r24	; 0x03
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	9c 81       	ldd	r25, Y+4	; 0x04
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	f1 f7       	brne	.-4      	; 0x2238 <LCD_vSend_cmd+0xea>
    223c:	9c 83       	std	Y+4, r25	; 0x04
    223e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2240:	8d 81       	ldd	r24, Y+5	; 0x05
    2242:	9e 81       	ldd	r25, Y+6	; 0x06
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	9e 83       	std	Y+6, r25	; 0x06
    2248:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224a:	8d 81       	ldd	r24, Y+5	; 0x05
    224c:	9e 81       	ldd	r25, Y+6	; 0x06
    224e:	00 97       	sbiw	r24, 0x00	; 0
    2250:	69 f7       	brne	.-38     	; 0x222c <LCD_vSend_cmd+0xde>
    2252:	14 c0       	rjmp	.+40     	; 0x227c <LCD_vSend_cmd+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2254:	6f 81       	ldd	r22, Y+7	; 0x07
    2256:	78 85       	ldd	r23, Y+8	; 0x08
    2258:	89 85       	ldd	r24, Y+9	; 0x09
    225a:	9a 85       	ldd	r25, Y+10	; 0x0a
    225c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	9e 83       	std	Y+6, r25	; 0x06
    2266:	8d 83       	std	Y+5, r24	; 0x05
    2268:	8d 81       	ldd	r24, Y+5	; 0x05
    226a:	9e 81       	ldd	r25, Y+6	; 0x06
    226c:	9a 83       	std	Y+2, r25	; 0x02
    226e:	89 83       	std	Y+1, r24	; 0x01
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	9a 81       	ldd	r25, Y+2	; 0x02
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <LCD_vSend_cmd+0x126>
    2278:	9a 83       	std	Y+2, r25	; 0x02
    227a:	89 83       	std	Y+1, r24	; 0x01
	#endif
	_delay_ms(1);
}
    227c:	2f 96       	adiw	r28, 0x0f	; 15
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <LCD_vSend_char>:

void LCD_vSend_char(char data)
{
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	2f 97       	sbiw	r28, 0x0f	; 15
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_write_port('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('D',data>>4);
    22a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a6:	98 2f       	mov	r25, r24
    22a8:	92 95       	swap	r25
    22aa:	9f 70       	andi	r25, 0x0F	; 15
    22ac:	84 e4       	ldi	r24, 0x44	; 68
    22ae:	69 2f       	mov	r22, r25
    22b0:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <write_high_nibble>
	DIO_write('B',RS,1);
    22b4:	82 e4       	ldi	r24, 0x42	; 66
    22b6:	61 e0       	ldi	r22, 0x01	; 1
    22b8:	41 e0       	ldi	r20, 0x01	; 1
    22ba:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_write>
	send_falling_edge();
    22be:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <send_falling_edge>
	write_high_nibble('D',data);
    22c2:	84 e4       	ldi	r24, 0x44	; 68
    22c4:	6f 85       	ldd	r22, Y+15	; 0x0f
    22c6:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <write_high_nibble>
	DIO_write('B',RS,1);
    22ca:	82 e4       	ldi	r24, 0x42	; 66
    22cc:	61 e0       	ldi	r22, 0x01	; 1
    22ce:	41 e0       	ldi	r20, 0x01	; 1
    22d0:	0e 94 c0 07 	call	0xf80	; 0xf80 <DIO_write>
	send_falling_edge();
    22d4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <send_falling_edge>
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	a0 e8       	ldi	r26, 0x80	; 128
    22de:	bf e3       	ldi	r27, 0x3F	; 63
    22e0:	8b 87       	std	Y+11, r24	; 0x0b
    22e2:	9c 87       	std	Y+12, r25	; 0x0c
    22e4:	ad 87       	std	Y+13, r26	; 0x0d
    22e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	4a ef       	ldi	r20, 0xFA	; 250
    22f6:	54 e4       	ldi	r21, 0x44	; 68
    22f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	8f 83       	std	Y+7, r24	; 0x07
    2302:	98 87       	std	Y+8, r25	; 0x08
    2304:	a9 87       	std	Y+9, r26	; 0x09
    2306:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2308:	6f 81       	ldd	r22, Y+7	; 0x07
    230a:	78 85       	ldd	r23, Y+8	; 0x08
    230c:	89 85       	ldd	r24, Y+9	; 0x09
    230e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e8       	ldi	r20, 0x80	; 128
    2316:	5f e3       	ldi	r21, 0x3F	; 63
    2318:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    231c:	88 23       	and	r24, r24
    231e:	2c f4       	brge	.+10     	; 0x232a <LCD_vSend_char+0x9c>
		__ticks = 1;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9e 83       	std	Y+6, r25	; 0x06
    2326:	8d 83       	std	Y+5, r24	; 0x05
    2328:	3f c0       	rjmp	.+126    	; 0x23a8 <LCD_vSend_char+0x11a>
	else if (__tmp > 65535)
    232a:	6f 81       	ldd	r22, Y+7	; 0x07
    232c:	78 85       	ldd	r23, Y+8	; 0x08
    232e:	89 85       	ldd	r24, Y+9	; 0x09
    2330:	9a 85       	ldd	r25, Y+10	; 0x0a
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	3f ef       	ldi	r19, 0xFF	; 255
    2336:	4f e7       	ldi	r20, 0x7F	; 127
    2338:	57 e4       	ldi	r21, 0x47	; 71
    233a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    233e:	18 16       	cp	r1, r24
    2340:	4c f5       	brge	.+82     	; 0x2394 <LCD_vSend_char+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2342:	6b 85       	ldd	r22, Y+11	; 0x0b
    2344:	7c 85       	ldd	r23, Y+12	; 0x0c
    2346:	8d 85       	ldd	r24, Y+13	; 0x0d
    2348:	9e 85       	ldd	r25, Y+14	; 0x0e
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e2       	ldi	r20, 0x20	; 32
    2350:	51 e4       	ldi	r21, 0x41	; 65
    2352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	bc 01       	movw	r22, r24
    235c:	cd 01       	movw	r24, r26
    235e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	9e 83       	std	Y+6, r25	; 0x06
    2368:	8d 83       	std	Y+5, r24	; 0x05
    236a:	0f c0       	rjmp	.+30     	; 0x238a <LCD_vSend_char+0xfc>
    236c:	88 ec       	ldi	r24, 0xC8	; 200
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9c 83       	std	Y+4, r25	; 0x04
    2372:	8b 83       	std	Y+3, r24	; 0x03
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	9c 81       	ldd	r25, Y+4	; 0x04
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	f1 f7       	brne	.-4      	; 0x2378 <LCD_vSend_char+0xea>
    237c:	9c 83       	std	Y+4, r25	; 0x04
    237e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2380:	8d 81       	ldd	r24, Y+5	; 0x05
    2382:	9e 81       	ldd	r25, Y+6	; 0x06
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	9e 83       	std	Y+6, r25	; 0x06
    2388:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238a:	8d 81       	ldd	r24, Y+5	; 0x05
    238c:	9e 81       	ldd	r25, Y+6	; 0x06
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	69 f7       	brne	.-38     	; 0x236c <LCD_vSend_char+0xde>
    2392:	14 c0       	rjmp	.+40     	; 0x23bc <LCD_vSend_char+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2394:	6f 81       	ldd	r22, Y+7	; 0x07
    2396:	78 85       	ldd	r23, Y+8	; 0x08
    2398:	89 85       	ldd	r24, Y+9	; 0x09
    239a:	9a 85       	ldd	r25, Y+10	; 0x0a
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	9e 83       	std	Y+6, r25	; 0x06
    23a6:	8d 83       	std	Y+5, r24	; 0x05
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	9a 81       	ldd	r25, Y+2	; 0x02
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <LCD_vSend_char+0x126>
    23b8:	9a 83       	std	Y+2, r25	; 0x02
    23ba:	89 83       	std	Y+1, r24	; 0x01
	#endif
	_delay_ms(1);
}
    23bc:	2f 96       	adiw	r28, 0x0f	; 15
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	f8 94       	cli
    23c2:	de bf       	out	0x3e, r29	; 62
    23c4:	0f be       	out	0x3f, r0	; 63
    23c6:	cd bf       	out	0x3d, r28	; 61
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	00 d0       	rcall	.+0      	; 0x23d4 <LCD_vSend_string+0x6>
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
    23d8:	9a 83       	std	Y+2, r25	; 0x02
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	0a c0       	rjmp	.+20     	; 0x23f2 <LCD_vSend_string+0x24>
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
    23de:	e9 81       	ldd	r30, Y+1	; 0x01
    23e0:	fa 81       	ldd	r31, Y+2	; 0x02
    23e2:	80 81       	ld	r24, Z
    23e4:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_vSend_char>
		data++;
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	9a 81       	ldd	r25, Y+2	; 0x02
    23ec:	01 96       	adiw	r24, 0x01	; 1
    23ee:	9a 83       	std	Y+2, r25	; 0x02
    23f0:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
    23f2:	e9 81       	ldd	r30, Y+1	; 0x01
    23f4:	fa 81       	ldd	r31, Y+2	; 0x02
    23f6:	80 81       	ld	r24, Z
    23f8:	88 23       	and	r24, r24
    23fa:	89 f7       	brne	.-30     	; 0x23de <LCD_vSend_string+0x10>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <LCD_clearscreen>:
void LCD_clearscreen()
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	2e 97       	sbiw	r28, 0x0e	; 14
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	de bf       	out	0x3e, r29	; 62
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	cd bf       	out	0x3d, r28	; 61
	LCD_vSend_cmd(CLR_SCREEN);
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_vSend_cmd>
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	a0 e2       	ldi	r26, 0x20	; 32
    2426:	b1 e4       	ldi	r27, 0x41	; 65
    2428:	8b 87       	std	Y+11, r24	; 0x0b
    242a:	9c 87       	std	Y+12, r25	; 0x0c
    242c:	ad 87       	std	Y+13, r26	; 0x0d
    242e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2430:	6b 85       	ldd	r22, Y+11	; 0x0b
    2432:	7c 85       	ldd	r23, Y+12	; 0x0c
    2434:	8d 85       	ldd	r24, Y+13	; 0x0d
    2436:	9e 85       	ldd	r25, Y+14	; 0x0e
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	4a ef       	ldi	r20, 0xFA	; 250
    243e:	54 e4       	ldi	r21, 0x44	; 68
    2440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	8f 83       	std	Y+7, r24	; 0x07
    244a:	98 87       	std	Y+8, r25	; 0x08
    244c:	a9 87       	std	Y+9, r26	; 0x09
    244e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2450:	6f 81       	ldd	r22, Y+7	; 0x07
    2452:	78 85       	ldd	r23, Y+8	; 0x08
    2454:	89 85       	ldd	r24, Y+9	; 0x09
    2456:	9a 85       	ldd	r25, Y+10	; 0x0a
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	40 e8       	ldi	r20, 0x80	; 128
    245e:	5f e3       	ldi	r21, 0x3F	; 63
    2460:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2464:	88 23       	and	r24, r24
    2466:	2c f4       	brge	.+10     	; 0x2472 <LCD_clearscreen+0x6c>
		__ticks = 1;
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	9e 83       	std	Y+6, r25	; 0x06
    246e:	8d 83       	std	Y+5, r24	; 0x05
    2470:	3f c0       	rjmp	.+126    	; 0x24f0 <LCD_clearscreen+0xea>
	else if (__tmp > 65535)
    2472:	6f 81       	ldd	r22, Y+7	; 0x07
    2474:	78 85       	ldd	r23, Y+8	; 0x08
    2476:	89 85       	ldd	r24, Y+9	; 0x09
    2478:	9a 85       	ldd	r25, Y+10	; 0x0a
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	3f ef       	ldi	r19, 0xFF	; 255
    247e:	4f e7       	ldi	r20, 0x7F	; 127
    2480:	57 e4       	ldi	r21, 0x47	; 71
    2482:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2486:	18 16       	cp	r1, r24
    2488:	4c f5       	brge	.+82     	; 0x24dc <LCD_clearscreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248a:	6b 85       	ldd	r22, Y+11	; 0x0b
    248c:	7c 85       	ldd	r23, Y+12	; 0x0c
    248e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2490:	9e 85       	ldd	r25, Y+14	; 0x0e
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e2       	ldi	r20, 0x20	; 32
    2498:	51 e4       	ldi	r21, 0x41	; 65
    249a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	bc 01       	movw	r22, r24
    24a4:	cd 01       	movw	r24, r26
    24a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	9e 83       	std	Y+6, r25	; 0x06
    24b0:	8d 83       	std	Y+5, r24	; 0x05
    24b2:	0f c0       	rjmp	.+30     	; 0x24d2 <LCD_clearscreen+0xcc>
    24b4:	88 ec       	ldi	r24, 0xC8	; 200
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	9c 83       	std	Y+4, r25	; 0x04
    24ba:	8b 83       	std	Y+3, r24	; 0x03
    24bc:	8b 81       	ldd	r24, Y+3	; 0x03
    24be:	9c 81       	ldd	r25, Y+4	; 0x04
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	f1 f7       	brne	.-4      	; 0x24c0 <LCD_clearscreen+0xba>
    24c4:	9c 83       	std	Y+4, r25	; 0x04
    24c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ca:	9e 81       	ldd	r25, Y+6	; 0x06
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	9e 83       	std	Y+6, r25	; 0x06
    24d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d2:	8d 81       	ldd	r24, Y+5	; 0x05
    24d4:	9e 81       	ldd	r25, Y+6	; 0x06
    24d6:	00 97       	sbiw	r24, 0x00	; 0
    24d8:	69 f7       	brne	.-38     	; 0x24b4 <LCD_clearscreen+0xae>
    24da:	14 c0       	rjmp	.+40     	; 0x2504 <LCD_clearscreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24dc:	6f 81       	ldd	r22, Y+7	; 0x07
    24de:	78 85       	ldd	r23, Y+8	; 0x08
    24e0:	89 85       	ldd	r24, Y+9	; 0x09
    24e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	9e 83       	std	Y+6, r25	; 0x06
    24ee:	8d 83       	std	Y+5, r24	; 0x05
    24f0:	8d 81       	ldd	r24, Y+5	; 0x05
    24f2:	9e 81       	ldd	r25, Y+6	; 0x06
    24f4:	9a 83       	std	Y+2, r25	; 0x02
    24f6:	89 83       	std	Y+1, r24	; 0x01
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	9a 81       	ldd	r25, Y+2	; 0x02
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	f1 f7       	brne	.-4      	; 0x24fc <LCD_clearscreen+0xf6>
    2500:	9a 83       	std	Y+2, r25	; 0x02
    2502:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2504:	2e 96       	adiw	r28, 0x0e	; 14
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	61 97       	sbiw	r28, 0x11	; 17
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
    252a:	88 8b       	std	Y+16, r24	; 0x10
    252c:	69 8b       	std	Y+17, r22	; 0x11
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
    252e:	88 89       	ldd	r24, Y+16	; 0x10
    2530:	83 30       	cpi	r24, 0x03	; 3
    2532:	48 f4       	brcc	.+18     	; 0x2546 <LCD_movecursor+0x30>
    2534:	88 89       	ldd	r24, Y+16	; 0x10
    2536:	88 23       	and	r24, r24
    2538:	31 f0       	breq	.+12     	; 0x2546 <LCD_movecursor+0x30>
    253a:	89 89       	ldd	r24, Y+17	; 0x11
    253c:	81 31       	cpi	r24, 0x11	; 17
    253e:	18 f4       	brcc	.+6      	; 0x2546 <LCD_movecursor+0x30>
    2540:	89 89       	ldd	r24, Y+17	; 0x11
    2542:	88 23       	and	r24, r24
    2544:	19 f4       	brne	.+6      	; 0x254c <LCD_movecursor+0x36>
	{
		data=0x80;
    2546:	80 e8       	ldi	r24, 0x80	; 128
    2548:	8f 87       	std	Y+15, r24	; 0x0f
    254a:	0d c0       	rjmp	.+26     	; 0x2566 <LCD_movecursor+0x50>
	}
	else if(row==1)
    254c:	88 89       	ldd	r24, Y+16	; 0x10
    254e:	81 30       	cpi	r24, 0x01	; 1
    2550:	21 f4       	brne	.+8      	; 0x255a <LCD_movecursor+0x44>
	{
		data=0x80+coloumn-1 ;
    2552:	89 89       	ldd	r24, Y+17	; 0x11
    2554:	81 58       	subi	r24, 0x81	; 129
    2556:	8f 87       	std	Y+15, r24	; 0x0f
    2558:	06 c0       	rjmp	.+12     	; 0x2566 <LCD_movecursor+0x50>
	}
	else if (row==2)
    255a:	88 89       	ldd	r24, Y+16	; 0x10
    255c:	82 30       	cpi	r24, 0x02	; 2
    255e:	19 f4       	brne	.+6      	; 0x2566 <LCD_movecursor+0x50>
	{
		data=0xc0+coloumn-1;
    2560:	89 89       	ldd	r24, Y+17	; 0x11
    2562:	81 54       	subi	r24, 0x41	; 65
    2564:	8f 87       	std	Y+15, r24	; 0x0f
	}
	LCD_vSend_cmd(data);
    2566:	8f 85       	ldd	r24, Y+15	; 0x0f
    2568:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_vSend_cmd>
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	a0 e8       	ldi	r26, 0x80	; 128
    2572:	bf e3       	ldi	r27, 0x3F	; 63
    2574:	8b 87       	std	Y+11, r24	; 0x0b
    2576:	9c 87       	std	Y+12, r25	; 0x0c
    2578:	ad 87       	std	Y+13, r26	; 0x0d
    257a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257c:	6b 85       	ldd	r22, Y+11	; 0x0b
    257e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2580:	8d 85       	ldd	r24, Y+13	; 0x0d
    2582:	9e 85       	ldd	r25, Y+14	; 0x0e
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	4a ef       	ldi	r20, 0xFA	; 250
    258a:	54 e4       	ldi	r21, 0x44	; 68
    258c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	8f 83       	std	Y+7, r24	; 0x07
    2596:	98 87       	std	Y+8, r25	; 0x08
    2598:	a9 87       	std	Y+9, r26	; 0x09
    259a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    259c:	6f 81       	ldd	r22, Y+7	; 0x07
    259e:	78 85       	ldd	r23, Y+8	; 0x08
    25a0:	89 85       	ldd	r24, Y+9	; 0x09
    25a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e8       	ldi	r20, 0x80	; 128
    25aa:	5f e3       	ldi	r21, 0x3F	; 63
    25ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25b0:	88 23       	and	r24, r24
    25b2:	2c f4       	brge	.+10     	; 0x25be <LCD_movecursor+0xa8>
		__ticks = 1;
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	9e 83       	std	Y+6, r25	; 0x06
    25ba:	8d 83       	std	Y+5, r24	; 0x05
    25bc:	3f c0       	rjmp	.+126    	; 0x263c <LCD_movecursor+0x126>
	else if (__tmp > 65535)
    25be:	6f 81       	ldd	r22, Y+7	; 0x07
    25c0:	78 85       	ldd	r23, Y+8	; 0x08
    25c2:	89 85       	ldd	r24, Y+9	; 0x09
    25c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	3f ef       	ldi	r19, 0xFF	; 255
    25ca:	4f e7       	ldi	r20, 0x7F	; 127
    25cc:	57 e4       	ldi	r21, 0x47	; 71
    25ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25d2:	18 16       	cp	r1, r24
    25d4:	4c f5       	brge	.+82     	; 0x2628 <LCD_movecursor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25da:	8d 85       	ldd	r24, Y+13	; 0x0d
    25dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e2       	ldi	r20, 0x20	; 32
    25e4:	51 e4       	ldi	r21, 0x41	; 65
    25e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	bc 01       	movw	r22, r24
    25f0:	cd 01       	movw	r24, r26
    25f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	9e 83       	std	Y+6, r25	; 0x06
    25fc:	8d 83       	std	Y+5, r24	; 0x05
    25fe:	0f c0       	rjmp	.+30     	; 0x261e <LCD_movecursor+0x108>
    2600:	88 ec       	ldi	r24, 0xC8	; 200
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	9c 83       	std	Y+4, r25	; 0x04
    2606:	8b 83       	std	Y+3, r24	; 0x03
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	9c 81       	ldd	r25, Y+4	; 0x04
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	f1 f7       	brne	.-4      	; 0x260c <LCD_movecursor+0xf6>
    2610:	9c 83       	std	Y+4, r25	; 0x04
    2612:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2614:	8d 81       	ldd	r24, Y+5	; 0x05
    2616:	9e 81       	ldd	r25, Y+6	; 0x06
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	9e 83       	std	Y+6, r25	; 0x06
    261c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261e:	8d 81       	ldd	r24, Y+5	; 0x05
    2620:	9e 81       	ldd	r25, Y+6	; 0x06
    2622:	00 97       	sbiw	r24, 0x00	; 0
    2624:	69 f7       	brne	.-38     	; 0x2600 <LCD_movecursor+0xea>
    2626:	14 c0       	rjmp	.+40     	; 0x2650 <LCD_movecursor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2628:	6f 81       	ldd	r22, Y+7	; 0x07
    262a:	78 85       	ldd	r23, Y+8	; 0x08
    262c:	89 85       	ldd	r24, Y+9	; 0x09
    262e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	9e 83       	std	Y+6, r25	; 0x06
    263a:	8d 83       	std	Y+5, r24	; 0x05
    263c:	8d 81       	ldd	r24, Y+5	; 0x05
    263e:	9e 81       	ldd	r25, Y+6	; 0x06
    2640:	9a 83       	std	Y+2, r25	; 0x02
    2642:	89 83       	std	Y+1, r24	; 0x01
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	9a 81       	ldd	r25, Y+2	; 0x02
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	f1 f7       	brne	.-4      	; 0x2648 <LCD_movecursor+0x132>
    264c:	9a 83       	std	Y+2, r25	; 0x02
    264e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2650:	61 96       	adiw	r28, 0x11	; 17
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	08 95       	ret

00002662 <main>:
#include "LCD.h"
char read_val;
unsigned short temp;
unsigned short volt;
int main(void)
{
    2662:	df 93       	push	r29
    2664:	cf 93       	push	r28
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
	LCD_vInit();
    266a:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_vInit>
	ADC_vinit();
    266e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <ADC_vinit>
	LCD_vSend_string("temp=");
    2672:	80 e6       	ldi	r24, 0x60	; 96
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_vSend_string>
	while(1)
	{

		volt = ADC_u16Read() * 2.5;
    267a:	0e 94 9c 06 	call	0xd38	; 0xd38 <ADC_u16Read>
    267e:	cc 01       	movw	r24, r24
    2680:	a0 e0       	ldi	r26, 0x00	; 0
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	bc 01       	movw	r22, r24
    2686:	cd 01       	movw	r24, r26
    2688:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	bc 01       	movw	r22, r24
    2692:	cd 01       	movw	r24, r26
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e2       	ldi	r20, 0x20	; 32
    269a:	50 e4       	ldi	r21, 0x40	; 64
    269c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	bc 01       	movw	r22, r24
    26a6:	cd 01       	movw	r24, r26
    26a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	90 93 72 01 	sts	0x0172, r25
    26b4:	80 93 71 01 	sts	0x0171, r24
		if (volt >= 1000)
    26b8:	80 91 71 01 	lds	r24, 0x0171
    26bc:	90 91 72 01 	lds	r25, 0x0172
    26c0:	23 e0       	ldi	r18, 0x03	; 3
    26c2:	88 3e       	cpi	r24, 0xE8	; 232
    26c4:	92 07       	cpc	r25, r18
    26c6:	08 f4       	brcc	.+2      	; 0x26ca <main+0x68>
    26c8:	58 c0       	rjmp	.+176    	; 0x277a <main+0x118>
		{
			temp = (volt - 1000)/ 10;
    26ca:	80 91 71 01 	lds	r24, 0x0171
    26ce:	90 91 72 01 	lds	r25, 0x0172
    26d2:	88 5e       	subi	r24, 0xE8	; 232
    26d4:	93 40       	sbci	r25, 0x03	; 3
    26d6:	2a e0       	ldi	r18, 0x0A	; 10
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	b9 01       	movw	r22, r18
    26dc:	0e 94 1d 14 	call	0x283a	; 0x283a <__udivmodhi4>
    26e0:	cb 01       	movw	r24, r22
    26e2:	90 93 6f 01 	sts	0x016F, r25
    26e6:	80 93 6e 01 	sts	0x016E, r24
			if (temp < 10)
    26ea:	80 91 6e 01 	lds	r24, 0x016E
    26ee:	90 91 6f 01 	lds	r25, 0x016F
    26f2:	8a 30       	cpi	r24, 0x0A	; 10
    26f4:	91 05       	cpc	r25, r1
    26f6:	a8 f4       	brcc	.+42     	; 0x2722 <main+0xc0>
			{
				LCD_movecursor(1, 6);
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	66 e0       	ldi	r22, 0x06	; 6
    26fc:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_movecursor>
				LCD_vSend_char(temp + 48);
    2700:	80 91 6e 01 	lds	r24, 0x016E
    2704:	90 91 6f 01 	lds	r25, 0x016F
    2708:	80 5d       	subi	r24, 0xD0	; 208
    270a:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_vSend_char>
				LCD_vSend_char(0xDF);
    270e:	8f ed       	ldi	r24, 0xDF	; 223
    2710:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_vSend_char>
				LCD_vSend_char('C');
    2714:	83 e4       	ldi	r24, 0x43	; 67
    2716:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_vSend_char>
				LCD_vSend_char(' ');
    271a:	80 e2       	ldi	r24, 0x20	; 32
    271c:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_vSend_char>
    2720:	ac cf       	rjmp	.-168    	; 0x267a <main+0x18>
			}
			else if (temp < 100)
    2722:	80 91 6e 01 	lds	r24, 0x016E
    2726:	90 91 6f 01 	lds	r25, 0x016F
    272a:	84 36       	cpi	r24, 0x64	; 100
    272c:	91 05       	cpc	r25, r1
    272e:	08 f0       	brcs	.+2      	; 0x2732 <main+0xd0>
    2730:	a4 cf       	rjmp	.-184    	; 0x267a <main+0x18>
			{
				LCD_movecursor(1, 6);
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	66 e0       	ldi	r22, 0x06	; 6
    2736:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_movecursor>
				LCD_vSend_char((temp/10) + 48);
    273a:	80 91 6e 01 	lds	r24, 0x016E
    273e:	90 91 6f 01 	lds	r25, 0x016F
    2742:	2a e0       	ldi	r18, 0x0A	; 10
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	b9 01       	movw	r22, r18
    2748:	0e 94 1d 14 	call	0x283a	; 0x283a <__udivmodhi4>
    274c:	cb 01       	movw	r24, r22
    274e:	80 5d       	subi	r24, 0xD0	; 208
    2750:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_vSend_char>
				LCD_vSend_char((temp % 10) + 48);
    2754:	80 91 6e 01 	lds	r24, 0x016E
    2758:	90 91 6f 01 	lds	r25, 0x016F
    275c:	2a e0       	ldi	r18, 0x0A	; 10
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	b9 01       	movw	r22, r18
    2762:	0e 94 1d 14 	call	0x283a	; 0x283a <__udivmodhi4>
    2766:	80 5d       	subi	r24, 0xD0	; 208
    2768:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_vSend_char>
				LCD_vSend_char(0xDF);
    276c:	8f ed       	ldi	r24, 0xDF	; 223
    276e:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_vSend_char>
				LCD_vSend_char('C');
    2772:	83 e4       	ldi	r24, 0x43	; 67
    2774:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_vSend_char>
    2778:	80 cf       	rjmp	.-256    	; 0x267a <main+0x18>
			}
		}
		else
		{
			temp = (1000 - volt )/ 10;
    277a:	20 91 71 01 	lds	r18, 0x0171
    277e:	30 91 72 01 	lds	r19, 0x0172
    2782:	88 ee       	ldi	r24, 0xE8	; 232
    2784:	93 e0       	ldi	r25, 0x03	; 3
    2786:	82 1b       	sub	r24, r18
    2788:	93 0b       	sbc	r25, r19
    278a:	2a e0       	ldi	r18, 0x0A	; 10
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	b9 01       	movw	r22, r18
    2790:	0e 94 1d 14 	call	0x283a	; 0x283a <__udivmodhi4>
    2794:	cb 01       	movw	r24, r22
    2796:	90 93 6f 01 	sts	0x016F, r25
    279a:	80 93 6e 01 	sts	0x016E, r24
			if (temp < 10)
    279e:	80 91 6e 01 	lds	r24, 0x016E
    27a2:	90 91 6f 01 	lds	r25, 0x016F
    27a6:	8a 30       	cpi	r24, 0x0A	; 10
    27a8:	91 05       	cpc	r25, r1
    27aa:	c0 f4       	brcc	.+48     	; 0x27dc <main+0x17a>
			{
				LCD_movecursor(1, 6);
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	66 e0       	ldi	r22, 0x06	; 6
    27b0:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_movecursor>
				LCD_vSend_char('-');
    27b4:	8d e2       	ldi	r24, 0x2D	; 45
    27b6:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_vSend_char>
				LCD_vSend_char(temp + 48);
    27ba:	80 91 6e 01 	lds	r24, 0x016E
    27be:	90 91 6f 01 	lds	r25, 0x016F
    27c2:	80 5d       	subi	r24, 0xD0	; 208
    27c4:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_vSend_char>
				LCD_vSend_char(0xDF);
    27c8:	8f ed       	ldi	r24, 0xDF	; 223
    27ca:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_vSend_char>
				LCD_vSend_char('C');
    27ce:	83 e4       	ldi	r24, 0x43	; 67
    27d0:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_vSend_char>
				LCD_vSend_char(' ');
    27d4:	80 e2       	ldi	r24, 0x20	; 32
    27d6:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_vSend_char>
    27da:	4f cf       	rjmp	.-354    	; 0x267a <main+0x18>
			}
			else if (temp < 100)
    27dc:	80 91 6e 01 	lds	r24, 0x016E
    27e0:	90 91 6f 01 	lds	r25, 0x016F
    27e4:	84 36       	cpi	r24, 0x64	; 100
    27e6:	91 05       	cpc	r25, r1
    27e8:	08 f0       	brcs	.+2      	; 0x27ec <main+0x18a>
    27ea:	47 cf       	rjmp	.-370    	; 0x267a <main+0x18>
			{
				LCD_movecursor(1, 6);
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	66 e0       	ldi	r22, 0x06	; 6
    27f0:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_movecursor>
				LCD_vSend_char('-');
    27f4:	8d e2       	ldi	r24, 0x2D	; 45
    27f6:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_vSend_char>
				LCD_vSend_char((temp/10) + 48);
    27fa:	80 91 6e 01 	lds	r24, 0x016E
    27fe:	90 91 6f 01 	lds	r25, 0x016F
    2802:	2a e0       	ldi	r18, 0x0A	; 10
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	b9 01       	movw	r22, r18
    2808:	0e 94 1d 14 	call	0x283a	; 0x283a <__udivmodhi4>
    280c:	cb 01       	movw	r24, r22
    280e:	80 5d       	subi	r24, 0xD0	; 208
    2810:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_vSend_char>
				LCD_vSend_char((temp % 10) + 48);
    2814:	80 91 6e 01 	lds	r24, 0x016E
    2818:	90 91 6f 01 	lds	r25, 0x016F
    281c:	2a e0       	ldi	r18, 0x0A	; 10
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	b9 01       	movw	r22, r18
    2822:	0e 94 1d 14 	call	0x283a	; 0x283a <__udivmodhi4>
    2826:	80 5d       	subi	r24, 0xD0	; 208
    2828:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_vSend_char>
				LCD_vSend_char(0xDF);
    282c:	8f ed       	ldi	r24, 0xDF	; 223
    282e:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_vSend_char>
				LCD_vSend_char('C');
    2832:	83 e4       	ldi	r24, 0x43	; 67
    2834:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_vSend_char>
    2838:	20 cf       	rjmp	.-448    	; 0x267a <main+0x18>

0000283a <__udivmodhi4>:
    283a:	aa 1b       	sub	r26, r26
    283c:	bb 1b       	sub	r27, r27
    283e:	51 e1       	ldi	r21, 0x11	; 17
    2840:	07 c0       	rjmp	.+14     	; 0x2850 <__udivmodhi4_ep>

00002842 <__udivmodhi4_loop>:
    2842:	aa 1f       	adc	r26, r26
    2844:	bb 1f       	adc	r27, r27
    2846:	a6 17       	cp	r26, r22
    2848:	b7 07       	cpc	r27, r23
    284a:	10 f0       	brcs	.+4      	; 0x2850 <__udivmodhi4_ep>
    284c:	a6 1b       	sub	r26, r22
    284e:	b7 0b       	sbc	r27, r23

00002850 <__udivmodhi4_ep>:
    2850:	88 1f       	adc	r24, r24
    2852:	99 1f       	adc	r25, r25
    2854:	5a 95       	dec	r21
    2856:	a9 f7       	brne	.-22     	; 0x2842 <__udivmodhi4_loop>
    2858:	80 95       	com	r24
    285a:	90 95       	com	r25
    285c:	bc 01       	movw	r22, r24
    285e:	cd 01       	movw	r24, r26
    2860:	08 95       	ret

00002862 <__prologue_saves__>:
    2862:	2f 92       	push	r2
    2864:	3f 92       	push	r3
    2866:	4f 92       	push	r4
    2868:	5f 92       	push	r5
    286a:	6f 92       	push	r6
    286c:	7f 92       	push	r7
    286e:	8f 92       	push	r8
    2870:	9f 92       	push	r9
    2872:	af 92       	push	r10
    2874:	bf 92       	push	r11
    2876:	cf 92       	push	r12
    2878:	df 92       	push	r13
    287a:	ef 92       	push	r14
    287c:	ff 92       	push	r15
    287e:	0f 93       	push	r16
    2880:	1f 93       	push	r17
    2882:	cf 93       	push	r28
    2884:	df 93       	push	r29
    2886:	cd b7       	in	r28, 0x3d	; 61
    2888:	de b7       	in	r29, 0x3e	; 62
    288a:	ca 1b       	sub	r28, r26
    288c:	db 0b       	sbc	r29, r27
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	de bf       	out	0x3e, r29	; 62
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	cd bf       	out	0x3d, r28	; 61
    2898:	09 94       	ijmp

0000289a <__epilogue_restores__>:
    289a:	2a 88       	ldd	r2, Y+18	; 0x12
    289c:	39 88       	ldd	r3, Y+17	; 0x11
    289e:	48 88       	ldd	r4, Y+16	; 0x10
    28a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    28a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    28a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    28a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    28a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    28aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    28ac:	b9 84       	ldd	r11, Y+9	; 0x09
    28ae:	c8 84       	ldd	r12, Y+8	; 0x08
    28b0:	df 80       	ldd	r13, Y+7	; 0x07
    28b2:	ee 80       	ldd	r14, Y+6	; 0x06
    28b4:	fd 80       	ldd	r15, Y+5	; 0x05
    28b6:	0c 81       	ldd	r16, Y+4	; 0x04
    28b8:	1b 81       	ldd	r17, Y+3	; 0x03
    28ba:	aa 81       	ldd	r26, Y+2	; 0x02
    28bc:	b9 81       	ldd	r27, Y+1	; 0x01
    28be:	ce 0f       	add	r28, r30
    28c0:	d1 1d       	adc	r29, r1
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	cd bf       	out	0x3d, r28	; 61
    28cc:	ed 01       	movw	r28, r26
    28ce:	08 95       	ret

000028d0 <_exit>:
    28d0:	f8 94       	cli

000028d2 <__stop_program>:
    28d2:	ff cf       	rjmp	.-2      	; 0x28d2 <__stop_program>
