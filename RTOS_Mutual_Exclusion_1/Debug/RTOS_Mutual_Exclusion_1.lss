
RTOS_Mutual_Exclusion_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000548e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000548e  00005522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003bc  00800076  00800076  00005538  2**0
                  ALLOC
  3 .stab         00006d68  00000000  00000000  00005538  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000037a3  00000000  00000000  0000c2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000fa43  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000fb83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000fcf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0001193c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00012827  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000135d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00013734  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000139c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001418f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 45 13 	jmp	0x268a	; 0x268a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	f4 e5       	ldi	r31, 0x54	; 84
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 33       	cpi	r26, 0x32	; 50
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <main>
      8a:	0c 94 45 2a 	jmp	0x548a	; 0x548a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 05 2a 	jmp	0x540a	; 0x540a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e6       	ldi	r26, 0x69	; 105
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 21 2a 	jmp	0x5442	; 0x5442 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 11 2a 	jmp	0x5422	; 0x5422 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2d 2a 	jmp	0x545a	; 0x545a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 11 2a 	jmp	0x5422	; 0x5422 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2d 2a 	jmp	0x545a	; 0x545a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 05 2a 	jmp	0x540a	; 0x540a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e6       	ldi	r24, 0x69	; 105
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 21 2a 	jmp	0x5442	; 0x5442 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 11 2a 	jmp	0x5422	; 0x5422 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2d 2a 	jmp	0x545a	; 0x545a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 11 2a 	jmp	0x5422	; 0x5422 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2d 2a 	jmp	0x545a	; 0x545a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 11 2a 	jmp	0x5422	; 0x5422 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2d 2a 	jmp	0x545a	; 0x545a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 15 2a 	jmp	0x542a	; 0x542a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 31 2a 	jmp	0x5462	; 0x5462 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_vsetPINDir>:




void DIO_vsetPINDir(char portname,char pinnumber,char direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_vsetPINDir+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_vsetPINDir+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	82 34       	cpi	r24, 0x42	; 66
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <DIO_vsetPINDir+0x2a>
     b6e:	44 c0       	rjmp	.+136    	; 0xbf8 <DIO_vsetPINDir+0xb2>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	23 34       	cpi	r18, 0x43	; 67
     b76:	31 05       	cpc	r19, r1
     b78:	34 f4       	brge	.+12     	; 0xb86 <DIO_vsetPINDir+0x40>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	81 34       	cpi	r24, 0x41	; 65
     b80:	91 05       	cpc	r25, r1
     b82:	71 f0       	breq	.+28     	; 0xba0 <DIO_vsetPINDir+0x5a>
     b84:	bc c0       	rjmp	.+376    	; 0xcfe <DIO_vsetPINDir+0x1b8>
     b86:	2c 81       	ldd	r18, Y+4	; 0x04
     b88:	3d 81       	ldd	r19, Y+5	; 0x05
     b8a:	23 34       	cpi	r18, 0x43	; 67
     b8c:	31 05       	cpc	r19, r1
     b8e:	09 f4       	brne	.+2      	; 0xb92 <DIO_vsetPINDir+0x4c>
     b90:	5f c0       	rjmp	.+190    	; 0xc50 <DIO_vsetPINDir+0x10a>
     b92:	8c 81       	ldd	r24, Y+4	; 0x04
     b94:	9d 81       	ldd	r25, Y+5	; 0x05
     b96:	84 34       	cpi	r24, 0x44	; 68
     b98:	91 05       	cpc	r25, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <DIO_vsetPINDir+0x58>
     b9c:	85 c0       	rjmp	.+266    	; 0xca8 <DIO_vsetPINDir+0x162>
     b9e:	af c0       	rjmp	.+350    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	{
		
	
	case 'A':
	if(direction==1)
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	a1 f4       	brne	.+40     	; 0xbce <DIO_vsetPINDir+0x88>
	{
		DDRA|=(1<<pinnumber);
     ba6:	aa e3       	ldi	r26, 0x3A	; 58
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e3       	ldi	r30, 0x3A	; 58
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_vsetPINDir+0x7e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_vsetPINDir+0x7a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	98 c0       	rjmp	.+304    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	else
	{
		DDRA&=(~(1<<pinnumber));
     bce:	aa e3       	ldi	r26, 0x3A	; 58
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	ea e3       	ldi	r30, 0x3A	; 58
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_vsetPINDir+0xa6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_vsetPINDir+0xa2>
     bf0:	80 95       	com	r24
     bf2:	84 23       	and	r24, r20
     bf4:	8c 93       	st	X, r24
     bf6:	83 c0       	rjmp	.+262    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	break;
	case 'B':
	if(direction==1)
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	a1 f4       	brne	.+40     	; 0xc26 <DIO_vsetPINDir+0xe0>
	{
		DDRB|=(1<<pinnumber);
     bfe:	a7 e3       	ldi	r26, 0x37	; 55
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e7 e3       	ldi	r30, 0x37	; 55
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	48 2f       	mov	r20, r24
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	02 2e       	mov	r0, r18
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <DIO_vsetPINDir+0xd6>
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	0a 94       	dec	r0
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <DIO_vsetPINDir+0xd2>
     c20:	84 2b       	or	r24, r20
     c22:	8c 93       	st	X, r24
     c24:	6c c0       	rjmp	.+216    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	else
	{
		DDRB&=(~(1<<pinnumber));
     c26:	a7 e3       	ldi	r26, 0x37	; 55
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e7 e3       	ldi	r30, 0x37	; 55
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	48 2f       	mov	r20, r24
     c32:	8a 81       	ldd	r24, Y+2	; 0x02
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	02 2e       	mov	r0, r18
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_vsetPINDir+0xfe>
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <DIO_vsetPINDir+0xfa>
     c48:	80 95       	com	r24
     c4a:	84 23       	and	r24, r20
     c4c:	8c 93       	st	X, r24
     c4e:	57 c0       	rjmp	.+174    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	break;
	case 'C':
	if(direction==1)
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	a1 f4       	brne	.+40     	; 0xc7e <DIO_vsetPINDir+0x138>
	{
		DDRC|=(1<<pinnumber);
     c56:	a4 e3       	ldi	r26, 0x34	; 52
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e4 e3       	ldi	r30, 0x34	; 52
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	48 2f       	mov	r20, r24
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 2e       	mov	r0, r18
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <DIO_vsetPINDir+0x12e>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	0a 94       	dec	r0
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <DIO_vsetPINDir+0x12a>
     c78:	84 2b       	or	r24, r20
     c7a:	8c 93       	st	X, r24
     c7c:	40 c0       	rjmp	.+128    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	else
	{
		DDRC&=(~(1<<pinnumber));
     c7e:	a4 e3       	ldi	r26, 0x34	; 52
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e4 e3       	ldi	r30, 0x34	; 52
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	48 2f       	mov	r20, r24
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	02 2e       	mov	r0, r18
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <DIO_vsetPINDir+0x156>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	0a 94       	dec	r0
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <DIO_vsetPINDir+0x152>
     ca0:	80 95       	com	r24
     ca2:	84 23       	and	r24, r20
     ca4:	8c 93       	st	X, r24
     ca6:	2b c0       	rjmp	.+86     	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	break;
	case 'D':
	if(direction==1)
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	a1 f4       	brne	.+40     	; 0xcd6 <DIO_vsetPINDir+0x190>
	{
		DDRD|=(1<<pinnumber);
     cae:	a1 e3       	ldi	r26, 0x31	; 49
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e1 e3       	ldi	r30, 0x31	; 49
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	48 2f       	mov	r20, r24
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 2e       	mov	r0, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <DIO_vsetPINDir+0x186>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	0a 94       	dec	r0
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <DIO_vsetPINDir+0x182>
     cd0:	84 2b       	or	r24, r20
     cd2:	8c 93       	st	X, r24
     cd4:	14 c0       	rjmp	.+40     	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	else
	{
		DDRD&=(~(1<<pinnumber));
     cd6:	a1 e3       	ldi	r26, 0x31	; 49
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e1 e3       	ldi	r30, 0x31	; 49
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 2e       	mov	r0, r18
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <DIO_vsetPINDir+0x1ae>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <DIO_vsetPINDir+0x1aa>
     cf8:	80 95       	com	r24
     cfa:	84 23       	and	r24, r20
     cfc:	8c 93       	st	X, r24
	}
	break;
	default: break;
	}	
}
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <DIO_write>:


void DIO_write(char portname,char pinnumber,char outputvalue)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <DIO_write+0x6>
     d14:	00 d0       	rcall	.+0      	; 0xd16 <DIO_write+0x8>
     d16:	0f 92       	push	r0
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	89 83       	std	Y+1, r24	; 0x01
     d1e:	6a 83       	std	Y+2, r22	; 0x02
     d20:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	3d 83       	std	Y+5, r19	; 0x05
     d2a:	2c 83       	std	Y+4, r18	; 0x04
     d2c:	8c 81       	ldd	r24, Y+4	; 0x04
     d2e:	9d 81       	ldd	r25, Y+5	; 0x05
     d30:	82 34       	cpi	r24, 0x42	; 66
     d32:	91 05       	cpc	r25, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <DIO_write+0x2a>
     d36:	44 c0       	rjmp	.+136    	; 0xdc0 <DIO_write+0xb2>
     d38:	2c 81       	ldd	r18, Y+4	; 0x04
     d3a:	3d 81       	ldd	r19, Y+5	; 0x05
     d3c:	23 34       	cpi	r18, 0x43	; 67
     d3e:	31 05       	cpc	r19, r1
     d40:	34 f4       	brge	.+12     	; 0xd4e <DIO_write+0x40>
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	9d 81       	ldd	r25, Y+5	; 0x05
     d46:	81 34       	cpi	r24, 0x41	; 65
     d48:	91 05       	cpc	r25, r1
     d4a:	71 f0       	breq	.+28     	; 0xd68 <DIO_write+0x5a>
     d4c:	bc c0       	rjmp	.+376    	; 0xec6 <DIO_write+0x1b8>
     d4e:	2c 81       	ldd	r18, Y+4	; 0x04
     d50:	3d 81       	ldd	r19, Y+5	; 0x05
     d52:	23 34       	cpi	r18, 0x43	; 67
     d54:	31 05       	cpc	r19, r1
     d56:	09 f4       	brne	.+2      	; 0xd5a <DIO_write+0x4c>
     d58:	5f c0       	rjmp	.+190    	; 0xe18 <DIO_write+0x10a>
     d5a:	8c 81       	ldd	r24, Y+4	; 0x04
     d5c:	9d 81       	ldd	r25, Y+5	; 0x05
     d5e:	84 34       	cpi	r24, 0x44	; 68
     d60:	91 05       	cpc	r25, r1
     d62:	09 f4       	brne	.+2      	; 0xd66 <DIO_write+0x58>
     d64:	85 c0       	rjmp	.+266    	; 0xe70 <DIO_write+0x162>
     d66:	af c0       	rjmp	.+350    	; 0xec6 <DIO_write+0x1b8>
	{
		case 'A' :
		
			if(outputvalue==1)
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	a1 f4       	brne	.+40     	; 0xd96 <DIO_write+0x88>
			{
				PORTA|=(1<<pinnumber);
     d6e:	ab e3       	ldi	r26, 0x3B	; 59
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	eb e3       	ldi	r30, 0x3B	; 59
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 2e       	mov	r0, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <DIO_write+0x7e>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <DIO_write+0x7a>
     d90:	84 2b       	or	r24, r20
     d92:	8c 93       	st	X, r24
     d94:	98 c0       	rjmp	.+304    	; 0xec6 <DIO_write+0x1b8>
			}
			else
			{
				PORTA&=(~(1<<pinnumber));
     d96:	ab e3       	ldi	r26, 0x3B	; 59
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	eb e3       	ldi	r30, 0x3B	; 59
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <DIO_write+0xa6>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <DIO_write+0xa2>
     db8:	80 95       	com	r24
     dba:	84 23       	and	r24, r20
     dbc:	8c 93       	st	X, r24
     dbe:	83 c0       	rjmp	.+262    	; 0xec6 <DIO_write+0x1b8>
			}
			break ;
			case 'B':
			
			if(outputvalue==1)
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	a1 f4       	brne	.+40     	; 0xdee <DIO_write+0xe0>
			{
				PORTB|=(1<<pinnumber);
     dc6:	a8 e3       	ldi	r26, 0x38	; 56
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e3       	ldi	r30, 0x38	; 56
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	48 2f       	mov	r20, r24
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 2e       	mov	r0, r18
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <DIO_write+0xd6>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	0a 94       	dec	r0
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <DIO_write+0xd2>
     de8:	84 2b       	or	r24, r20
     dea:	8c 93       	st	X, r24
     dec:	6c c0       	rjmp	.+216    	; 0xec6 <DIO_write+0x1b8>
			}
			else
			{
				PORTB&=(~(1<<pinnumber));
     dee:	a8 e3       	ldi	r26, 0x38	; 56
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e8 e3       	ldi	r30, 0x38	; 56
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	48 2f       	mov	r20, r24
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 2e       	mov	r0, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_write+0xfe>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_write+0xfa>
     e10:	80 95       	com	r24
     e12:	84 23       	and	r24, r20
     e14:	8c 93       	st	X, r24
     e16:	57 c0       	rjmp	.+174    	; 0xec6 <DIO_write+0x1b8>
			}
			break ;
			case 'C' :
			
			if(outputvalue==1)
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	a1 f4       	brne	.+40     	; 0xe46 <DIO_write+0x138>
			{
				PORTC|=(1<<pinnumber);
     e1e:	a5 e3       	ldi	r26, 0x35	; 53
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e5 e3       	ldi	r30, 0x35	; 53
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_write+0x12e>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_write+0x12a>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	40 c0       	rjmp	.+128    	; 0xec6 <DIO_write+0x1b8>
			}
			else
			{
				PORTC&=(~(1<<pinnumber));
     e46:	a5 e3       	ldi	r26, 0x35	; 53
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e5 e3       	ldi	r30, 0x35	; 53
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <DIO_write+0x156>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <DIO_write+0x152>
     e68:	80 95       	com	r24
     e6a:	84 23       	and	r24, r20
     e6c:	8c 93       	st	X, r24
     e6e:	2b c0       	rjmp	.+86     	; 0xec6 <DIO_write+0x1b8>
			}
			break ;
		case 'D':
		
		if(outputvalue==1)
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	a1 f4       	brne	.+40     	; 0xe9e <DIO_write+0x190>
		{
			PORTD|=(1<<pinnumber);
     e76:	a2 e3       	ldi	r26, 0x32	; 50
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e2 e3       	ldi	r30, 0x32	; 50
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_write+0x186>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_write+0x182>
     e98:	84 2b       	or	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	14 c0       	rjmp	.+40     	; 0xec6 <DIO_write+0x1b8>
		}
		else
	{
			PORTD&=(~(1<<pinnumber));
     e9e:	a2 e3       	ldi	r26, 0x32	; 50
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e2 e3       	ldi	r30, 0x32	; 50
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DIO_write+0x1ae>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <DIO_write+0x1aa>
     ec0:	80 95       	com	r24
     ec2:	84 23       	and	r24, r20
     ec4:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <DIO_u8read>:


char DIO_u8read(char portname,char pinnumber)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	00 d0       	rcall	.+0      	; 0xedc <DIO_u8read+0x6>
     edc:	00 d0       	rcall	.+0      	; 0xede <DIO_u8read+0x8>
     ede:	0f 92       	push	r0
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	8a 83       	std	Y+2, r24	; 0x02
     ee6:	6b 83       	std	Y+3, r22	; 0x03
	char x ;
	switch(portname)
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	3d 83       	std	Y+5, r19	; 0x05
     ef0:	2c 83       	std	Y+4, r18	; 0x04
     ef2:	4c 81       	ldd	r20, Y+4	; 0x04
     ef4:	5d 81       	ldd	r21, Y+5	; 0x05
     ef6:	42 34       	cpi	r20, 0x42	; 66
     ef8:	51 05       	cpc	r21, r1
     efa:	b1 f1       	breq	.+108    	; 0xf68 <DIO_u8read+0x92>
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	9d 81       	ldd	r25, Y+5	; 0x05
     f00:	83 34       	cpi	r24, 0x43	; 67
     f02:	91 05       	cpc	r25, r1
     f04:	34 f4       	brge	.+12     	; 0xf12 <DIO_u8read+0x3c>
     f06:	2c 81       	ldd	r18, Y+4	; 0x04
     f08:	3d 81       	ldd	r19, Y+5	; 0x05
     f0a:	21 34       	cpi	r18, 0x41	; 65
     f0c:	31 05       	cpc	r19, r1
     f0e:	71 f0       	breq	.+28     	; 0xf2c <DIO_u8read+0x56>
     f10:	84 c0       	rjmp	.+264    	; 0x101a <DIO_u8read+0x144>
     f12:	4c 81       	ldd	r20, Y+4	; 0x04
     f14:	5d 81       	ldd	r21, Y+5	; 0x05
     f16:	43 34       	cpi	r20, 0x43	; 67
     f18:	51 05       	cpc	r21, r1
     f1a:	09 f4       	brne	.+2      	; 0xf1e <DIO_u8read+0x48>
     f1c:	43 c0       	rjmp	.+134    	; 0xfa4 <DIO_u8read+0xce>
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	9d 81       	ldd	r25, Y+5	; 0x05
     f22:	84 34       	cpi	r24, 0x44	; 68
     f24:	91 05       	cpc	r25, r1
     f26:	09 f4       	brne	.+2      	; 0xf2a <DIO_u8read+0x54>
     f28:	5b c0       	rjmp	.+182    	; 0xfe0 <DIO_u8read+0x10a>
     f2a:	77 c0       	rjmp	.+238    	; 0x101a <DIO_u8read+0x144>
	{
		case 'A' :
		x=((PINA&(1<<pinnumber))>>pinnumber);
     f2c:	e9 e3       	ldi	r30, 0x39	; 57
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <DIO_u8read+0x70>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	2a 95       	dec	r18
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <DIO_u8read+0x6c>
     f4a:	9a 01       	movw	r18, r20
     f4c:	28 23       	and	r18, r24
     f4e:	39 23       	and	r19, r25
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	a9 01       	movw	r20, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_u8read+0x88>
     f5a:	55 95       	asr	r21
     f5c:	47 95       	ror	r20
     f5e:	8a 95       	dec	r24
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_u8read+0x84>
     f62:	ca 01       	movw	r24, r20
     f64:	89 83       	std	Y+1, r24	; 0x01
     f66:	59 c0       	rjmp	.+178    	; 0x101a <DIO_u8read+0x144>
		break;
		
	case 'B' :
	x=((PINB&(1<<pinnumber))>>pinnumber) ;
     f68:	e6 e3       	ldi	r30, 0x36	; 54
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <DIO_u8read+0xac>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	2a 95       	dec	r18
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <DIO_u8read+0xa8>
     f86:	9a 01       	movw	r18, r20
     f88:	28 23       	and	r18, r24
     f8a:	39 23       	and	r19, r25
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	a9 01       	movw	r20, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_u8read+0xc4>
     f96:	55 95       	asr	r21
     f98:	47 95       	ror	r20
     f9a:	8a 95       	dec	r24
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_u8read+0xc0>
     f9e:	ca 01       	movw	r24, r20
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	3b c0       	rjmp	.+118    	; 0x101a <DIO_u8read+0x144>
	break;
	
	case 'C' :
	x=((PINC&(1<<pinnumber))>>pinnumber) ;
     fa4:	e3 e3       	ldi	r30, 0x33	; 51
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_u8read+0xe8>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	2a 95       	dec	r18
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_u8read+0xe4>
     fc2:	9a 01       	movw	r18, r20
     fc4:	28 23       	and	r18, r24
     fc6:	39 23       	and	r19, r25
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a9 01       	movw	r20, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_u8read+0x100>
     fd2:	55 95       	asr	r21
     fd4:	47 95       	ror	r20
     fd6:	8a 95       	dec	r24
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_u8read+0xfc>
     fda:	ca 01       	movw	r24, r20
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	1d c0       	rjmp	.+58     	; 0x101a <DIO_u8read+0x144>
	break;
	
	case 'D' :
	x=((PIND&(1<<pinnumber))>>pinnumber) ;
     fe0:	e0 e3       	ldi	r30, 0x30	; 48
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_u8read+0x124>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	2a 95       	dec	r18
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_u8read+0x120>
     ffe:	9a 01       	movw	r18, r20
    1000:	28 23       	and	r18, r24
    1002:	39 23       	and	r19, r25
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	88 2f       	mov	r24, r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a9 01       	movw	r20, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_u8read+0x13c>
    100e:	55 95       	asr	r21
    1010:	47 95       	ror	r20
    1012:	8a 95       	dec	r24
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_u8read+0x138>
    1016:	ca 01       	movw	r24, r20
    1018:	89 83       	std	Y+1, r24	; 0x01
	break;
	default: break;
}
return x ;
    101a:	89 81       	ldd	r24, Y+1	; 0x01
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <DIO_toggle>:
void DIO_toggle(char portname,char pinnumber)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	00 d0       	rcall	.+0      	; 0x1032 <DIO_toggle+0x6>
    1032:	00 d0       	rcall	.+0      	; 0x1034 <DIO_toggle+0x8>
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	89 83       	std	Y+1, r24	; 0x01
    103a:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	3c 83       	std	Y+4, r19	; 0x04
    1044:	2b 83       	std	Y+3, r18	; 0x03
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	82 34       	cpi	r24, 0x42	; 66
    104c:	91 05       	cpc	r25, r1
    104e:	51 f1       	breq	.+84     	; 0x10a4 <DIO_toggle+0x78>
    1050:	2b 81       	ldd	r18, Y+3	; 0x03
    1052:	3c 81       	ldd	r19, Y+4	; 0x04
    1054:	23 34       	cpi	r18, 0x43	; 67
    1056:	31 05       	cpc	r19, r1
    1058:	34 f4       	brge	.+12     	; 0x1066 <DIO_toggle+0x3a>
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	9c 81       	ldd	r25, Y+4	; 0x04
    105e:	81 34       	cpi	r24, 0x41	; 65
    1060:	91 05       	cpc	r25, r1
    1062:	61 f0       	breq	.+24     	; 0x107c <DIO_toggle+0x50>
    1064:	5a c0       	rjmp	.+180    	; 0x111a <DIO_toggle+0xee>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	23 34       	cpi	r18, 0x43	; 67
    106c:	31 05       	cpc	r19, r1
    106e:	71 f1       	breq	.+92     	; 0x10cc <DIO_toggle+0xa0>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	84 34       	cpi	r24, 0x44	; 68
    1076:	91 05       	cpc	r25, r1
    1078:	e9 f1       	breq	.+122    	; 0x10f4 <DIO_toggle+0xc8>
    107a:	4f c0       	rjmp	.+158    	; 0x111a <DIO_toggle+0xee>
	{
		case 'A':
		PORTA^=(1<<pinnumber);
    107c:	ab e3       	ldi	r26, 0x3B	; 59
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	eb e3       	ldi	r30, 0x3B	; 59
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_toggle+0x6e>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_toggle+0x6a>
    109e:	84 27       	eor	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	3b c0       	rjmp	.+118    	; 0x111a <DIO_toggle+0xee>
		break;
		case 'B':
		PORTB^=(1<<pinnumber);
    10a4:	a8 e3       	ldi	r26, 0x38	; 56
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e8 e3       	ldi	r30, 0x38	; 56
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_toggle+0x96>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_toggle+0x92>
    10c6:	84 27       	eor	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	27 c0       	rjmp	.+78     	; 0x111a <DIO_toggle+0xee>
		break;
		case 'C':
		PORTC^=(1<<pinnumber);
    10cc:	a5 e3       	ldi	r26, 0x35	; 53
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e5 e3       	ldi	r30, 0x35	; 53
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_toggle+0xbe>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_toggle+0xba>
    10ee:	84 27       	eor	r24, r20
    10f0:	8c 93       	st	X, r24
    10f2:	13 c0       	rjmp	.+38     	; 0x111a <DIO_toggle+0xee>
		break;
		case 'D':
		PORTD^=(1<<pinnumber);
    10f4:	a2 e3       	ldi	r26, 0x32	; 50
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e2 e3       	ldi	r30, 0x32	; 50
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_toggle+0xe6>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_toggle+0xe2>
    1116:	84 27       	eor	r24, r20
    1118:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <DIO_write_port>:
void DIO_write_port(char portname,char portvalue)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	00 d0       	rcall	.+0      	; 0x112e <DIO_write_port+0x6>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <DIO_write_port+0x8>
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	89 83       	std	Y+1, r24	; 0x01
    1136:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	3c 83       	std	Y+4, r19	; 0x04
    1140:	2b 83       	std	Y+3, r18	; 0x03
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	9c 81       	ldd	r25, Y+4	; 0x04
    1146:	82 34       	cpi	r24, 0x42	; 66
    1148:	91 05       	cpc	r25, r1
    114a:	d9 f0       	breq	.+54     	; 0x1182 <DIO_write_port+0x5a>
    114c:	2b 81       	ldd	r18, Y+3	; 0x03
    114e:	3c 81       	ldd	r19, Y+4	; 0x04
    1150:	23 34       	cpi	r18, 0x43	; 67
    1152:	31 05       	cpc	r19, r1
    1154:	34 f4       	brge	.+12     	; 0x1162 <DIO_write_port+0x3a>
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	81 34       	cpi	r24, 0x41	; 65
    115c:	91 05       	cpc	r25, r1
    115e:	61 f0       	breq	.+24     	; 0x1178 <DIO_write_port+0x50>
    1160:	1e c0       	rjmp	.+60     	; 0x119e <DIO_write_port+0x76>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	23 34       	cpi	r18, 0x43	; 67
    1168:	31 05       	cpc	r19, r1
    116a:	81 f0       	breq	.+32     	; 0x118c <DIO_write_port+0x64>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	84 34       	cpi	r24, 0x44	; 68
    1172:	91 05       	cpc	r25, r1
    1174:	81 f0       	breq	.+32     	; 0x1196 <DIO_write_port+0x6e>
    1176:	13 c0       	rjmp	.+38     	; 0x119e <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue;
    1178:	eb e3       	ldi	r30, 0x3B	; 59
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	80 83       	st	Z, r24
    1180:	0e c0       	rjmp	.+28     	; 0x119e <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue;
    1182:	e8 e3       	ldi	r30, 0x38	; 56
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	80 83       	st	Z, r24
    118a:	09 c0       	rjmp	.+18     	; 0x119e <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue;
    118c:	e5 e3       	ldi	r30, 0x35	; 53
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	80 83       	st	Z, r24
    1194:	04 c0       	rjmp	.+8      	; 0x119e <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue;
    1196:	e2 e3       	ldi	r30, 0x32	; 50
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	80 83       	st	Z, r24
		break ;
		default: break ;
	}
}
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <dio_write_highnibble>:
void dio_write_highnibble(char portname,char value)
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <dio_write_highnibble+0x6>
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <dio_write_highnibble+0x8>
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	6a 83       	std	Y+2, r22	; 0x02
		switch(portname)
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	3c 83       	std	Y+4, r19	; 0x04
    11c4:	2b 83       	std	Y+3, r18	; 0x03
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	82 34       	cpi	r24, 0x42	; 66
    11cc:	91 05       	cpc	r25, r1
    11ce:	09 f1       	breq	.+66     	; 0x1212 <dio_write_highnibble+0x66>
    11d0:	2b 81       	ldd	r18, Y+3	; 0x03
    11d2:	3c 81       	ldd	r19, Y+4	; 0x04
    11d4:	23 34       	cpi	r18, 0x43	; 67
    11d6:	31 05       	cpc	r19, r1
    11d8:	34 f4       	brge	.+12     	; 0x11e6 <dio_write_highnibble+0x3a>
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	81 34       	cpi	r24, 0x41	; 65
    11e0:	91 05       	cpc	r25, r1
    11e2:	61 f0       	breq	.+24     	; 0x11fc <dio_write_highnibble+0x50>
    11e4:	36 c0       	rjmp	.+108    	; 0x1252 <dio_write_highnibble+0xa6>
    11e6:	2b 81       	ldd	r18, Y+3	; 0x03
    11e8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ea:	23 34       	cpi	r18, 0x43	; 67
    11ec:	31 05       	cpc	r19, r1
    11ee:	e1 f0       	breq	.+56     	; 0x1228 <dio_write_highnibble+0x7c>
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	84 34       	cpi	r24, 0x44	; 68
    11f6:	91 05       	cpc	r25, r1
    11f8:	11 f1       	breq	.+68     	; 0x123e <dio_write_highnibble+0x92>
    11fa:	2b c0       	rjmp	.+86     	; 0x1252 <dio_write_highnibble+0xa6>
		{
			case 'A' :
			PORTA|=(value&0xf0);
    11fc:	ab e3       	ldi	r26, 0x3B	; 59
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	eb e3       	ldi	r30, 0x3B	; 59
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	98 2f       	mov	r25, r24
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	80 7f       	andi	r24, 0xF0	; 240
    120c:	89 2b       	or	r24, r25
    120e:	8c 93       	st	X, r24
    1210:	20 c0       	rjmp	.+64     	; 0x1252 <dio_write_highnibble+0xa6>
			break ;
			case 'B':
			PORTB|=(value&0xf0);
    1212:	a8 e3       	ldi	r26, 0x38	; 56
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e8 e3       	ldi	r30, 0x38	; 56
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	98 2f       	mov	r25, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	80 7f       	andi	r24, 0xF0	; 240
    1222:	89 2b       	or	r24, r25
    1224:	8c 93       	st	X, r24
    1226:	15 c0       	rjmp	.+42     	; 0x1252 <dio_write_highnibble+0xa6>
			break ;
			case 'C' :
			PORTC|=(value&0xf0);
    1228:	a5 e3       	ldi	r26, 0x35	; 53
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e5 e3       	ldi	r30, 0x35	; 53
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	98 2f       	mov	r25, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	80 7f       	andi	r24, 0xF0	; 240
    1238:	89 2b       	or	r24, r25
    123a:	8c 93       	st	X, r24
    123c:	0a c0       	rjmp	.+20     	; 0x1252 <dio_write_highnibble+0xa6>
			break ;
			case 'D':
			PORTD|=(value&0xf0);
    123e:	a2 e3       	ldi	r26, 0x32	; 50
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e2 e3       	ldi	r30, 0x32	; 50
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	98 2f       	mov	r25, r24
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	80 7f       	andi	r24, 0xF0	; 240
    124e:	89 2b       	or	r24, r25
    1250:	8c 93       	st	X, r24
			break ;
			default: break ;
	
}
}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <clear_high_nibble>:
void clear_high_nibble(char portname)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <clear_high_nibble+0x6>
    1266:	0f 92       	push	r0
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	3b 83       	std	Y+3, r19	; 0x03
    1276:	2a 83       	std	Y+2, r18	; 0x02
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	9b 81       	ldd	r25, Y+3	; 0x03
    127c:	82 34       	cpi	r24, 0x42	; 66
    127e:	91 05       	cpc	r25, r1
    1280:	f1 f0       	breq	.+60     	; 0x12be <clear_high_nibble+0x5e>
    1282:	2a 81       	ldd	r18, Y+2	; 0x02
    1284:	3b 81       	ldd	r19, Y+3	; 0x03
    1286:	23 34       	cpi	r18, 0x43	; 67
    1288:	31 05       	cpc	r19, r1
    128a:	34 f4       	brge	.+12     	; 0x1298 <clear_high_nibble+0x38>
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	9b 81       	ldd	r25, Y+3	; 0x03
    1290:	81 34       	cpi	r24, 0x41	; 65
    1292:	91 05       	cpc	r25, r1
    1294:	61 f0       	breq	.+24     	; 0x12ae <clear_high_nibble+0x4e>
    1296:	2a c0       	rjmp	.+84     	; 0x12ec <clear_high_nibble+0x8c>
    1298:	2a 81       	ldd	r18, Y+2	; 0x02
    129a:	3b 81       	ldd	r19, Y+3	; 0x03
    129c:	23 34       	cpi	r18, 0x43	; 67
    129e:	31 05       	cpc	r19, r1
    12a0:	b1 f0       	breq	.+44     	; 0x12ce <clear_high_nibble+0x6e>
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	9b 81       	ldd	r25, Y+3	; 0x03
    12a6:	84 34       	cpi	r24, 0x44	; 68
    12a8:	91 05       	cpc	r25, r1
    12aa:	c9 f0       	breq	.+50     	; 0x12de <clear_high_nibble+0x7e>
    12ac:	1f c0       	rjmp	.+62     	; 0x12ec <clear_high_nibble+0x8c>
	{
		case 'A' :
		PORTA&=0x0f;
    12ae:	ab e3       	ldi	r26, 0x3B	; 59
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	eb e3       	ldi	r30, 0x3B	; 59
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	8f 70       	andi	r24, 0x0F	; 15
    12ba:	8c 93       	st	X, r24
    12bc:	17 c0       	rjmp	.+46     	; 0x12ec <clear_high_nibble+0x8c>
		break ;
		case 'B':
		PORTB&=0x0f;
    12be:	a8 e3       	ldi	r26, 0x38	; 56
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e8 e3       	ldi	r30, 0x38	; 56
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	8f 70       	andi	r24, 0x0F	; 15
    12ca:	8c 93       	st	X, r24
    12cc:	0f c0       	rjmp	.+30     	; 0x12ec <clear_high_nibble+0x8c>
		break ;
		case 'C' :
		PORTC&=0x0f;
    12ce:	a5 e3       	ldi	r26, 0x35	; 53
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e5 e3       	ldi	r30, 0x35	; 53
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	8f 70       	andi	r24, 0x0F	; 15
    12da:	8c 93       	st	X, r24
    12dc:	07 c0       	rjmp	.+14     	; 0x12ec <clear_high_nibble+0x8c>
		break ;
		case 'D':
		PORTD&=0x0f;
    12de:	a2 e3       	ldi	r26, 0x32	; 50
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e2 e3       	ldi	r30, 0x32	; 50
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	8f 70       	andi	r24, 0x0F	; 15
    12ea:	8c 93       	st	X, r24
		break ;
		default: break ;
		
	}
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <main>:
#include <avr/interrupt.h>
int x,y;
void task1(void *pv);
void task2 (void *pv);
int main(void)
{
    12f8:	ef 92       	push	r14
    12fa:	ff 92       	push	r15
    12fc:	0f 93       	push	r16
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
	/* create the tasks */
	xTaskCreate(task1,"M",100,NULL,2,NULL);
    1306:	82 ea       	ldi	r24, 0xA2	; 162
    1308:	99 e0       	ldi	r25, 0x09	; 9
    130a:	20 e6       	ldi	r18, 0x60	; 96
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	b9 01       	movw	r22, r18
    1310:	44 e6       	ldi	r20, 0x64	; 100
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	02 e0       	ldi	r16, 0x02	; 2
    131a:	ee 24       	eor	r14, r14
    131c:	ff 24       	eor	r15, r15
    131e:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <xTaskCreate>
	xTaskCreate(task2,"N",100,NULL,1,NULL);
    1322:	88 ec       	ldi	r24, 0xC8	; 200
    1324:	99 e0       	ldi	r25, 0x09	; 9
    1326:	22 e6       	ldi	r18, 0x62	; 98
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	b9 01       	movw	r22, r18
    132c:	44 e6       	ldi	r20, 0x64	; 100
    132e:	50 e0       	ldi	r21, 0x00	; 0
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	01 e0       	ldi	r16, 0x01	; 1
    1336:	ee 24       	eor	r14, r14
    1338:	ff 24       	eor	r15, r15
    133a:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <xTaskCreate>
	/* start os*/
	vTaskStartScheduler();
    133e:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <vTaskStartScheduler>
    1342:	ff cf       	rjmp	.-2      	; 0x1342 <main+0x4a>

00001344 <task1>:
	{
		
	}
}
void task1(void *pv)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	00 d0       	rcall	.+0      	; 0x134a <task1+0x6>
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	9a 83       	std	Y+2, r25	; 0x02
    1350:	89 83       	std	Y+1, r24	; 0x01
	DDRD|=(1<<7);
    1352:	a1 e3       	ldi	r26, 0x31	; 49
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e1 e3       	ldi	r30, 0x31	; 49
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	80 68       	ori	r24, 0x80	; 128
    135e:	8c 93       	st	X, r24
	while(1)
	{
		if(x==y)
    1360:	20 91 0e 04 	lds	r18, 0x040E
    1364:	30 91 0f 04 	lds	r19, 0x040F
    1368:	80 91 10 04 	lds	r24, 0x0410
    136c:	90 91 11 04 	lds	r25, 0x0411
    1370:	28 17       	cp	r18, r24
    1372:	39 07       	cpc	r19, r25
    1374:	41 f4       	brne	.+16     	; 0x1386 <task1+0x42>
		{
			PORTD^=(1<<7);
    1376:	a2 e3       	ldi	r26, 0x32	; 50
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e2 e3       	ldi	r30, 0x32	; 50
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	90 81       	ld	r25, Z
    1380:	80 e8       	ldi	r24, 0x80	; 128
    1382:	89 27       	eor	r24, r25
    1384:	8c 93       	st	X, r24
		}
		vTaskDelay(500);
    1386:	84 ef       	ldi	r24, 0xF4	; 244
    1388:	91 e0       	ldi	r25, 0x01	; 1
    138a:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <vTaskDelay>
    138e:	e8 cf       	rjmp	.-48     	; 0x1360 <task1+0x1c>

00001390 <task2>:
	}
}

void task2(void *pv)
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	60 97       	sbiw	r28, 0x10	; 16
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	98 8b       	std	Y+16, r25	; 0x10
    13a6:	8f 87       	std	Y+15, r24	; 0x0f
	while(1)
	{
		taskENTER_CRITICAL();    //sei()
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	0f 92       	push	r0
		++x;
    13ae:	80 91 0e 04 	lds	r24, 0x040E
    13b2:	90 91 0f 04 	lds	r25, 0x040F
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	90 93 0f 04 	sts	0x040F, r25
    13bc:	80 93 0e 04 	sts	0x040E, r24
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	a8 e4       	ldi	r26, 0x48	; 72
    13c6:	b3 e4       	ldi	r27, 0x43	; 67
    13c8:	8b 87       	std	Y+11, r24	; 0x0b
    13ca:	9c 87       	std	Y+12, r25	; 0x0c
    13cc:	ad 87       	std	Y+13, r26	; 0x0d
    13ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	4a ef       	ldi	r20, 0xFA	; 250
    13de:	54 e4       	ldi	r21, 0x44	; 68
    13e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e4:	dc 01       	movw	r26, r24
    13e6:	cb 01       	movw	r24, r22
    13e8:	8f 83       	std	Y+7, r24	; 0x07
    13ea:	98 87       	std	Y+8, r25	; 0x08
    13ec:	a9 87       	std	Y+9, r26	; 0x09
    13ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13f0:	6f 81       	ldd	r22, Y+7	; 0x07
    13f2:	78 85       	ldd	r23, Y+8	; 0x08
    13f4:	89 85       	ldd	r24, Y+9	; 0x09
    13f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	40 e8       	ldi	r20, 0x80	; 128
    13fe:	5f e3       	ldi	r21, 0x3F	; 63
    1400:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1404:	88 23       	and	r24, r24
    1406:	2c f4       	brge	.+10     	; 0x1412 <task2+0x82>
		__ticks = 1;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	9e 83       	std	Y+6, r25	; 0x06
    140e:	8d 83       	std	Y+5, r24	; 0x05
    1410:	3f c0       	rjmp	.+126    	; 0x1490 <task2+0x100>
	else if (__tmp > 65535)
    1412:	6f 81       	ldd	r22, Y+7	; 0x07
    1414:	78 85       	ldd	r23, Y+8	; 0x08
    1416:	89 85       	ldd	r24, Y+9	; 0x09
    1418:	9a 85       	ldd	r25, Y+10	; 0x0a
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	3f ef       	ldi	r19, 0xFF	; 255
    141e:	4f e7       	ldi	r20, 0x7F	; 127
    1420:	57 e4       	ldi	r21, 0x47	; 71
    1422:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1426:	18 16       	cp	r1, r24
    1428:	4c f5       	brge	.+82     	; 0x147c <task2+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142a:	6b 85       	ldd	r22, Y+11	; 0x0b
    142c:	7c 85       	ldd	r23, Y+12	; 0x0c
    142e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1430:	9e 85       	ldd	r25, Y+14	; 0x0e
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e2       	ldi	r20, 0x20	; 32
    1438:	51 e4       	ldi	r21, 0x41	; 65
    143a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	bc 01       	movw	r22, r24
    1444:	cd 01       	movw	r24, r26
    1446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144a:	dc 01       	movw	r26, r24
    144c:	cb 01       	movw	r24, r22
    144e:	9e 83       	std	Y+6, r25	; 0x06
    1450:	8d 83       	std	Y+5, r24	; 0x05
    1452:	0f c0       	rjmp	.+30     	; 0x1472 <task2+0xe2>
    1454:	88 ec       	ldi	r24, 0xC8	; 200
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	9c 83       	std	Y+4, r25	; 0x04
    145a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	9c 81       	ldd	r25, Y+4	; 0x04
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	f1 f7       	brne	.-4      	; 0x1460 <task2+0xd0>
    1464:	9c 83       	std	Y+4, r25	; 0x04
    1466:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1468:	8d 81       	ldd	r24, Y+5	; 0x05
    146a:	9e 81       	ldd	r25, Y+6	; 0x06
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	9e 83       	std	Y+6, r25	; 0x06
    1470:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1472:	8d 81       	ldd	r24, Y+5	; 0x05
    1474:	9e 81       	ldd	r25, Y+6	; 0x06
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	69 f7       	brne	.-38     	; 0x1454 <task2+0xc4>
    147a:	14 c0       	rjmp	.+40     	; 0x14a4 <task2+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    147c:	6f 81       	ldd	r22, Y+7	; 0x07
    147e:	78 85       	ldd	r23, Y+8	; 0x08
    1480:	89 85       	ldd	r24, Y+9	; 0x09
    1482:	9a 85       	ldd	r25, Y+10	; 0x0a
    1484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	9e 83       	std	Y+6, r25	; 0x06
    148e:	8d 83       	std	Y+5, r24	; 0x05
    1490:	8d 81       	ldd	r24, Y+5	; 0x05
    1492:	9e 81       	ldd	r25, Y+6	; 0x06
    1494:	9a 83       	std	Y+2, r25	; 0x02
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	9a 81       	ldd	r25, Y+2	; 0x02
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	f1 f7       	brne	.-4      	; 0x149c <task2+0x10c>
    14a0:	9a 83       	std	Y+2, r25	; 0x02
    14a2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		++y;
    14a4:	80 91 10 04 	lds	r24, 0x0410
    14a8:	90 91 11 04 	lds	r25, 0x0411
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	90 93 11 04 	sts	0x0411, r25
    14b2:	80 93 10 04 	sts	0x0410, r24
		taskEXIT_CRITICAL(); //cli()
    14b6:	0f 90       	pop	r0
    14b8:	0f be       	out	0x3f, r0	; 63
		vTaskDelay(500);
    14ba:	84 ef       	ldi	r24, 0xF4	; 244
    14bc:	91 e0       	ldi	r25, 0x01	; 1
    14be:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <vTaskDelay>
    14c2:	72 cf       	rjmp	.-284    	; 0x13a8 <task2+0x18>

000014c4 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <xEventGroupCreate+0x6>
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
    14ce:	8b e0       	ldi	r24, 0x0B	; 11
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <pvPortMalloc>
    14d6:	9a 83       	std	Y+2, r25	; 0x02
    14d8:	89 83       	std	Y+1, r24	; 0x01

		if( pxEventBits != NULL )
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	9a 81       	ldd	r25, Y+2	; 0x02
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	49 f0       	breq	.+18     	; 0x14f4 <xEventGroupCreate+0x30>
		{
			pxEventBits->uxEventBits = 0;
    14e2:	e9 81       	ldd	r30, Y+1	; 0x01
    14e4:	fa 81       	ldd	r31, Y+2	; 0x02
    14e6:	11 82       	std	Z+1, r1	; 0x01
    14e8:	10 82       	st	Z, r1
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	02 96       	adiw	r24, 0x02	; 2
    14f0:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	60 97       	sbiw	r28, 0x10	; 16
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	9a 87       	std	Y+10, r25	; 0x0a
    1518:	89 87       	std	Y+9, r24	; 0x09
    151a:	7c 87       	std	Y+12, r23	; 0x0c
    151c:	6b 87       	std	Y+11, r22	; 0x0b
    151e:	5e 87       	std	Y+14, r21	; 0x0e
    1520:	4d 87       	std	Y+13, r20	; 0x0d
    1522:	38 8b       	std	Y+16, r19	; 0x10
    1524:	2f 87       	std	Y+15, r18	; 0x0f
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    1526:	89 85       	ldd	r24, Y+9	; 0x09
    1528:	9a 85       	ldd	r25, Y+10	; 0x0a
    152a:	9c 83       	std	Y+4, r25	; 0x04
    152c:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    152e:	19 82       	std	Y+1, r1	; 0x01
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    1530:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
    1534:	eb 81       	ldd	r30, Y+3	; 0x03
    1536:	fc 81       	ldd	r31, Y+4	; 0x04
    1538:	80 81       	ld	r24, Z
    153a:	91 81       	ldd	r25, Z+1	; 0x01
    153c:	98 87       	std	Y+8, r25	; 0x08
    153e:	8f 83       	std	Y+7, r24	; 0x07

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
    1540:	89 85       	ldd	r24, Y+9	; 0x09
    1542:	9a 85       	ldd	r25, Y+10	; 0x0a
    1544:	2b 85       	ldd	r18, Y+11	; 0x0b
    1546:	3c 85       	ldd	r19, Y+12	; 0x0c
    1548:	b9 01       	movw	r22, r18
    154a:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
    154e:	2f 81       	ldd	r18, Y+7	; 0x07
    1550:	38 85       	ldd	r19, Y+8	; 0x08
    1552:	8b 85       	ldd	r24, Y+11	; 0x0b
    1554:	9c 85       	ldd	r25, Y+12	; 0x0c
    1556:	28 2b       	or	r18, r24
    1558:	39 2b       	or	r19, r25
    155a:	8d 85       	ldd	r24, Y+13	; 0x0d
    155c:	9e 85       	ldd	r25, Y+14	; 0x0e
    155e:	28 23       	and	r18, r24
    1560:	39 23       	and	r19, r25
    1562:	8d 85       	ldd	r24, Y+13	; 0x0d
    1564:	9e 85       	ldd	r25, Y+14	; 0x0e
    1566:	28 17       	cp	r18, r24
    1568:	39 07       	cpc	r19, r25
    156a:	c9 f4       	brne	.+50     	; 0x159e <xEventGroupSync+0x9c>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
    156c:	2f 81       	ldd	r18, Y+7	; 0x07
    156e:	38 85       	ldd	r19, Y+8	; 0x08
    1570:	8b 85       	ldd	r24, Y+11	; 0x0b
    1572:	9c 85       	ldd	r25, Y+12	; 0x0c
    1574:	82 2b       	or	r24, r18
    1576:	93 2b       	or	r25, r19
    1578:	9e 83       	std	Y+6, r25	; 0x06
    157a:	8d 83       	std	Y+5, r24	; 0x05

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    157c:	eb 81       	ldd	r30, Y+3	; 0x03
    157e:	fc 81       	ldd	r31, Y+4	; 0x04
    1580:	20 81       	ld	r18, Z
    1582:	31 81       	ldd	r19, Z+1	; 0x01
    1584:	8d 85       	ldd	r24, Y+13	; 0x0d
    1586:	9e 85       	ldd	r25, Y+14	; 0x0e
    1588:	80 95       	com	r24
    158a:	90 95       	com	r25
    158c:	82 23       	and	r24, r18
    158e:	93 23       	and	r25, r19
    1590:	eb 81       	ldd	r30, Y+3	; 0x03
    1592:	fc 81       	ldd	r31, Y+4	; 0x04
    1594:	91 83       	std	Z+1, r25	; 0x01
    1596:	80 83       	st	Z, r24

			xTicksToWait = 0;
    1598:	18 8a       	std	Y+16, r1	; 0x10
    159a:	1f 86       	std	Y+15, r1	; 0x0f
    159c:	1c c0       	rjmp	.+56     	; 0x15d6 <xEventGroupSync+0xd4>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
    159e:	8f 85       	ldd	r24, Y+15	; 0x0f
    15a0:	98 89       	ldd	r25, Y+16	; 0x10
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	91 f0       	breq	.+36     	; 0x15ca <xEventGroupSync+0xc8>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	bc 01       	movw	r22, r24
    15ac:	6e 5f       	subi	r22, 0xFE	; 254
    15ae:	7f 4f       	sbci	r23, 0xFF	; 255
    15b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b4:	9c 01       	movw	r18, r24
    15b6:	35 60       	ori	r19, 0x05	; 5
    15b8:	4f 85       	ldd	r20, Y+15	; 0x0f
    15ba:	58 89       	ldd	r21, Y+16	; 0x10
    15bc:	cb 01       	movw	r24, r22
    15be:	b9 01       	movw	r22, r18
    15c0:	0e 94 30 22 	call	0x4460	; 0x4460 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
    15c4:	1e 82       	std	Y+6, r1	; 0x06
    15c6:	1d 82       	std	Y+5, r1	; 0x05
    15c8:	06 c0       	rjmp	.+12     	; 0x15d6 <xEventGroupSync+0xd4>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    15ca:	eb 81       	ldd	r30, Y+3	; 0x03
    15cc:	fc 81       	ldd	r31, Y+4	; 0x04
    15ce:	80 81       	ld	r24, Z
    15d0:	91 81       	ldd	r25, Z+1	; 0x01
    15d2:	9e 83       	std	Y+6, r25	; 0x06
    15d4:	8d 83       	std	Y+5, r24	; 0x05
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    15d6:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <xTaskResumeAll>
    15da:	8a 83       	std	Y+2, r24	; 0x02

	if( xTicksToWait != ( TickType_t ) 0 )
    15dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    15de:	98 89       	ldd	r25, Y+16	; 0x10
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <xEventGroupSync+0xe4>
    15e4:	3a c0       	rjmp	.+116    	; 0x165a <xEventGroupSync+0x158>
	{
		if( xAlreadyYielded == pdFALSE )
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	88 23       	and	r24, r24
    15ea:	11 f4       	brne	.+4      	; 0x15f0 <xEventGroupSync+0xee>
		{
			portYIELD_WITHIN_API();
    15ec:	0e 94 33 12 	call	0x2466	; 0x2466 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    15f0:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <uxTaskResetEventItemValue>
    15f4:	9e 83       	std	Y+6, r25	; 0x06
    15f6:	8d 83       	std	Y+5, r24	; 0x05

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    15f8:	8d 81       	ldd	r24, Y+5	; 0x05
    15fa:	9e 81       	ldd	r25, Y+6	; 0x06
    15fc:	80 70       	andi	r24, 0x00	; 0
    15fe:	92 70       	andi	r25, 0x02	; 2
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	31 f5       	brne	.+76     	; 0x1650 <xEventGroupSync+0x14e>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	0f 92       	push	r0
			{
				uxReturn = pxEventBits->uxEventBits;
    160a:	eb 81       	ldd	r30, Y+3	; 0x03
    160c:	fc 81       	ldd	r31, Y+4	; 0x04
    160e:	80 81       	ld	r24, Z
    1610:	91 81       	ldd	r25, Z+1	; 0x01
    1612:	9e 83       	std	Y+6, r25	; 0x06
    1614:	8d 83       	std	Y+5, r24	; 0x05

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1616:	2d 81       	ldd	r18, Y+5	; 0x05
    1618:	3e 81       	ldd	r19, Y+6	; 0x06
    161a:	8d 85       	ldd	r24, Y+13	; 0x0d
    161c:	9e 85       	ldd	r25, Y+14	; 0x0e
    161e:	28 23       	and	r18, r24
    1620:	39 23       	and	r19, r25
    1622:	8d 85       	ldd	r24, Y+13	; 0x0d
    1624:	9e 85       	ldd	r25, Y+14	; 0x0e
    1626:	28 17       	cp	r18, r24
    1628:	39 07       	cpc	r19, r25
    162a:	71 f4       	brne	.+28     	; 0x1648 <xEventGroupSync+0x146>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    162c:	eb 81       	ldd	r30, Y+3	; 0x03
    162e:	fc 81       	ldd	r31, Y+4	; 0x04
    1630:	20 81       	ld	r18, Z
    1632:	31 81       	ldd	r19, Z+1	; 0x01
    1634:	8d 85       	ldd	r24, Y+13	; 0x0d
    1636:	9e 85       	ldd	r25, Y+14	; 0x0e
    1638:	80 95       	com	r24
    163a:	90 95       	com	r25
    163c:	82 23       	and	r24, r18
    163e:	93 23       	and	r25, r19
    1640:	eb 81       	ldd	r30, Y+3	; 0x03
    1642:	fc 81       	ldd	r31, Y+4	; 0x04
    1644:	91 83       	std	Z+1, r25	; 0x01
    1646:	80 83       	st	Z, r24
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    1648:	0f 90       	pop	r0
    164a:	0f be       	out	0x3f, r0	; 63

			xTimeoutOccurred = pdTRUE;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	89 83       	std	Y+1, r24	; 0x01
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    1650:	8d 81       	ldd	r24, Y+5	; 0x05
    1652:	9e 81       	ldd	r25, Y+6	; 0x06
    1654:	90 70       	andi	r25, 0x00	; 0
    1656:	9e 83       	std	Y+6, r25	; 0x06
    1658:	8d 83       	std	Y+5, r24	; 0x05
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
    165a:	8d 81       	ldd	r24, Y+5	; 0x05
    165c:	9e 81       	ldd	r25, Y+6	; 0x06
}
    165e:	60 96       	adiw	r28, 0x10	; 16
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	63 97       	sbiw	r28, 0x13	; 19
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	9d 87       	std	Y+13, r25	; 0x0d
    168a:	8c 87       	std	Y+12, r24	; 0x0c
    168c:	7f 87       	std	Y+15, r23	; 0x0f
    168e:	6e 87       	std	Y+14, r22	; 0x0e
    1690:	48 8b       	std	Y+16, r20	; 0x10
    1692:	29 8b       	std	Y+17, r18	; 0x11
    1694:	1b 8b       	std	Y+19, r17	; 0x13
    1696:	0a 8b       	std	Y+18, r16	; 0x12
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    1698:	8c 85       	ldd	r24, Y+12	; 0x0c
    169a:	9d 85       	ldd	r25, Y+13	; 0x0d
    169c:	9b 87       	std	Y+11, r25	; 0x0b
    169e:	8a 87       	std	Y+10, r24	; 0x0a
EventBits_t uxReturn, uxControlBits = 0;
    16a0:	1f 82       	std	Y+7, r1	; 0x07
    16a2:	1e 82       	std	Y+6, r1	; 0x06
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    16a4:	1b 82       	std	Y+3, r1	; 0x03
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    16a6:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    16aa:	ea 85       	ldd	r30, Y+10	; 0x0a
    16ac:	fb 85       	ldd	r31, Y+11	; 0x0b
    16ae:	80 81       	ld	r24, Z
    16b0:	91 81       	ldd	r25, Z+1	; 0x01
    16b2:	9a 83       	std	Y+2, r25	; 0x02
    16b4:	89 83       	std	Y+1, r24	; 0x01

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ba:	2e 85       	ldd	r18, Y+14	; 0x0e
    16bc:	3f 85       	ldd	r19, Y+15	; 0x0f
    16be:	b9 01       	movw	r22, r18
    16c0:	49 89       	ldd	r20, Y+17	; 0x11
    16c2:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <prvTestWaitCondition>
    16c6:	8d 83       	std	Y+5, r24	; 0x05

		if( xWaitConditionMet != pdFALSE )
    16c8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ca:	88 23       	and	r24, r24
    16cc:	c1 f0       	breq	.+48     	; 0x16fe <xEventGroupWaitBits+0x8e>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	9a 81       	ldd	r25, Y+2	; 0x02
    16d2:	99 87       	std	Y+9, r25	; 0x09
    16d4:	88 87       	std	Y+8, r24	; 0x08
			xTicksToWait = ( TickType_t ) 0;
    16d6:	1b 8a       	std	Y+19, r1	; 0x13
    16d8:	1a 8a       	std	Y+18, r1	; 0x12

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
    16da:	88 89       	ldd	r24, Y+16	; 0x10
    16dc:	88 23       	and	r24, r24
    16de:	d9 f1       	breq	.+118    	; 0x1756 <xEventGroupWaitBits+0xe6>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    16e0:	ea 85       	ldd	r30, Y+10	; 0x0a
    16e2:	fb 85       	ldd	r31, Y+11	; 0x0b
    16e4:	20 81       	ld	r18, Z
    16e6:	31 81       	ldd	r19, Z+1	; 0x01
    16e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    16ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    16ec:	80 95       	com	r24
    16ee:	90 95       	com	r25
    16f0:	82 23       	and	r24, r18
    16f2:	93 23       	and	r25, r19
    16f4:	ea 85       	ldd	r30, Y+10	; 0x0a
    16f6:	fb 85       	ldd	r31, Y+11	; 0x0b
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	80 83       	st	Z, r24
    16fc:	2c c0       	rjmp	.+88     	; 0x1756 <xEventGroupWaitBits+0xe6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
    16fe:	8a 89       	ldd	r24, Y+18	; 0x12
    1700:	9b 89       	ldd	r25, Y+19	; 0x13
    1702:	00 97       	sbiw	r24, 0x00	; 0
    1704:	29 f4       	brne	.+10     	; 0x1710 <xEventGroupWaitBits+0xa0>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	9a 81       	ldd	r25, Y+2	; 0x02
    170a:	99 87       	std	Y+9, r25	; 0x09
    170c:	88 87       	std	Y+8, r24	; 0x08
    170e:	23 c0       	rjmp	.+70     	; 0x1756 <xEventGroupWaitBits+0xe6>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
    1710:	88 89       	ldd	r24, Y+16	; 0x10
    1712:	88 23       	and	r24, r24
    1714:	29 f0       	breq	.+10     	; 0x1720 <xEventGroupWaitBits+0xb0>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
    1716:	8e 81       	ldd	r24, Y+6	; 0x06
    1718:	9f 81       	ldd	r25, Y+7	; 0x07
    171a:	91 60       	ori	r25, 0x01	; 1
    171c:	9f 83       	std	Y+7, r25	; 0x07
    171e:	8e 83       	std	Y+6, r24	; 0x06
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
    1720:	89 89       	ldd	r24, Y+17	; 0x11
    1722:	88 23       	and	r24, r24
    1724:	29 f0       	breq	.+10     	; 0x1730 <xEventGroupWaitBits+0xc0>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
    1726:	8e 81       	ldd	r24, Y+6	; 0x06
    1728:	9f 81       	ldd	r25, Y+7	; 0x07
    172a:	94 60       	ori	r25, 0x04	; 4
    172c:	9f 83       	std	Y+7, r25	; 0x07
    172e:	8e 83       	std	Y+6, r24	; 0x06
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
    1730:	8a 85       	ldd	r24, Y+10	; 0x0a
    1732:	9b 85       	ldd	r25, Y+11	; 0x0b
    1734:	bc 01       	movw	r22, r24
    1736:	6e 5f       	subi	r22, 0xFE	; 254
    1738:	7f 4f       	sbci	r23, 0xFF	; 255
    173a:	2e 85       	ldd	r18, Y+14	; 0x0e
    173c:	3f 85       	ldd	r19, Y+15	; 0x0f
    173e:	8e 81       	ldd	r24, Y+6	; 0x06
    1740:	9f 81       	ldd	r25, Y+7	; 0x07
    1742:	28 2b       	or	r18, r24
    1744:	39 2b       	or	r19, r25
    1746:	4a 89       	ldd	r20, Y+18	; 0x12
    1748:	5b 89       	ldd	r21, Y+19	; 0x13
    174a:	cb 01       	movw	r24, r22
    174c:	b9 01       	movw	r22, r18
    174e:	0e 94 30 22 	call	0x4460	; 0x4460 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
    1752:	19 86       	std	Y+9, r1	; 0x09
    1754:	18 86       	std	Y+8, r1	; 0x08

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    1756:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <xTaskResumeAll>
    175a:	8c 83       	std	Y+4, r24	; 0x04

	if( xTicksToWait != ( TickType_t ) 0 )
    175c:	8a 89       	ldd	r24, Y+18	; 0x12
    175e:	9b 89       	ldd	r25, Y+19	; 0x13
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	09 f4       	brne	.+2      	; 0x1766 <xEventGroupWaitBits+0xf6>
    1764:	3b c0       	rjmp	.+118    	; 0x17dc <xEventGroupWaitBits+0x16c>
	{
		if( xAlreadyYielded == pdFALSE )
    1766:	8c 81       	ldd	r24, Y+4	; 0x04
    1768:	88 23       	and	r24, r24
    176a:	11 f4       	brne	.+4      	; 0x1770 <xEventGroupWaitBits+0x100>
		{
			portYIELD_WITHIN_API();
    176c:	0e 94 33 12 	call	0x2466	; 0x2466 <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    1770:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <uxTaskResetEventItemValue>
    1774:	99 87       	std	Y+9, r25	; 0x09
    1776:	88 87       	std	Y+8, r24	; 0x08

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    1778:	88 85       	ldd	r24, Y+8	; 0x08
    177a:	99 85       	ldd	r25, Y+9	; 0x09
    177c:	80 70       	andi	r24, 0x00	; 0
    177e:	92 70       	andi	r25, 0x02	; 2
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	39 f5       	brne	.+78     	; 0x17d2 <xEventGroupWaitBits+0x162>
		{
			taskENTER_CRITICAL();
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	0f 92       	push	r0
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    178a:	ea 85       	ldd	r30, Y+10	; 0x0a
    178c:	fb 85       	ldd	r31, Y+11	; 0x0b
    178e:	80 81       	ld	r24, Z
    1790:	91 81       	ldd	r25, Z+1	; 0x01
    1792:	99 87       	std	Y+9, r25	; 0x09
    1794:	88 87       	std	Y+8, r24	; 0x08

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
    1796:	88 85       	ldd	r24, Y+8	; 0x08
    1798:	99 85       	ldd	r25, Y+9	; 0x09
    179a:	2e 85       	ldd	r18, Y+14	; 0x0e
    179c:	3f 85       	ldd	r19, Y+15	; 0x0f
    179e:	b9 01       	movw	r22, r18
    17a0:	49 89       	ldd	r20, Y+17	; 0x11
    17a2:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <prvTestWaitCondition>
    17a6:	88 23       	and	r24, r24
    17a8:	89 f0       	breq	.+34     	; 0x17cc <xEventGroupWaitBits+0x15c>
				{
					if( xClearOnExit != pdFALSE )
    17aa:	88 89       	ldd	r24, Y+16	; 0x10
    17ac:	88 23       	and	r24, r24
    17ae:	71 f0       	breq	.+28     	; 0x17cc <xEventGroupWaitBits+0x15c>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    17b0:	ea 85       	ldd	r30, Y+10	; 0x0a
    17b2:	fb 85       	ldd	r31, Y+11	; 0x0b
    17b4:	20 81       	ld	r18, Z
    17b6:	31 81       	ldd	r19, Z+1	; 0x01
    17b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    17ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    17bc:	80 95       	com	r24
    17be:	90 95       	com	r25
    17c0:	82 23       	and	r24, r18
    17c2:	93 23       	and	r25, r19
    17c4:	ea 85       	ldd	r30, Y+10	; 0x0a
    17c6:	fb 85       	ldd	r31, Y+11	; 0x0b
    17c8:	91 83       	std	Z+1, r25	; 0x01
    17ca:	80 83       	st	Z, r24
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    17cc:	0f 90       	pop	r0
    17ce:	0f be       	out	0x3f, r0	; 63

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
    17d0:	1b 82       	std	Y+3, r1	; 0x03
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    17d2:	88 85       	ldd	r24, Y+8	; 0x08
    17d4:	99 85       	ldd	r25, Y+9	; 0x09
    17d6:	90 70       	andi	r25, 0x00	; 0
    17d8:	99 87       	std	Y+9, r25	; 0x09
    17da:	88 87       	std	Y+8, r24	; 0x08
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
    17dc:	88 85       	ldd	r24, Y+8	; 0x08
    17de:	99 85       	ldd	r25, Y+9	; 0x09
}
    17e0:	63 96       	adiw	r28, 0x13	; 19
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	1f 91       	pop	r17
    17f2:	0f 91       	pop	r16
    17f4:	08 95       	ret

000017f6 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	28 97       	sbiw	r28, 0x08	; 8
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	9e 83       	std	Y+6, r25	; 0x06
    180c:	8d 83       	std	Y+5, r24	; 0x05
    180e:	78 87       	std	Y+8, r23	; 0x08
    1810:	6f 83       	std	Y+7, r22	; 0x07
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	9e 81       	ldd	r25, Y+6	; 0x06
    1816:	9c 83       	std	Y+4, r25	; 0x04
    1818:	8b 83       	std	Y+3, r24	; 0x03
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	0f 92       	push	r0
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
    1820:	eb 81       	ldd	r30, Y+3	; 0x03
    1822:	fc 81       	ldd	r31, Y+4	; 0x04
    1824:	80 81       	ld	r24, Z
    1826:	91 81       	ldd	r25, Z+1	; 0x01
    1828:	9a 83       	std	Y+2, r25	; 0x02
    182a:	89 83       	std	Y+1, r24	; 0x01

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    182c:	eb 81       	ldd	r30, Y+3	; 0x03
    182e:	fc 81       	ldd	r31, Y+4	; 0x04
    1830:	20 81       	ld	r18, Z
    1832:	31 81       	ldd	r19, Z+1	; 0x01
    1834:	8f 81       	ldd	r24, Y+7	; 0x07
    1836:	98 85       	ldd	r25, Y+8	; 0x08
    1838:	80 95       	com	r24
    183a:	90 95       	com	r25
    183c:	82 23       	and	r24, r18
    183e:	93 23       	and	r25, r19
    1840:	eb 81       	ldd	r30, Y+3	; 0x03
    1842:	fc 81       	ldd	r31, Y+4	; 0x04
    1844:	91 83       	std	Z+1, r25	; 0x01
    1846:	80 83       	st	Z, r24
	}
	taskEXIT_CRITICAL();
    1848:	0f 90       	pop	r0
    184a:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1850:	28 96       	adiw	r28, 0x08	; 8
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cd bf       	out	0x3d, r28	; 61
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	27 97       	sbiw	r28, 0x07	; 7
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	9f 83       	std	Y+7, r25	; 0x07
    1878:	8e 83       	std	Y+6, r24	; 0x06
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    187a:	8e 81       	ldd	r24, Y+6	; 0x06
    187c:	9f 81       	ldd	r25, Y+7	; 0x07
    187e:	9c 83       	std	Y+4, r25	; 0x04
    1880:	8b 83       	std	Y+3, r24	; 0x03
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1882:	1d 82       	std	Y+5, r1	; 0x05
	{
		uxReturn = pxEventBits->uxEventBits;
    1884:	eb 81       	ldd	r30, Y+3	; 0x03
    1886:	fc 81       	ldd	r31, Y+4	; 0x04
    1888:	80 81       	ld	r24, Z
    188a:	91 81       	ldd	r25, Z+1	; 0x01
    188c:	9a 83       	std	Y+2, r25	; 0x02
    188e:	89 83       	std	Y+1, r24	; 0x01
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1894:	27 96       	adiw	r28, 0x07	; 7
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	65 97       	sbiw	r28, 0x15	; 21
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	f8 94       	cli
    18b4:	de bf       	out	0x3e, r29	; 62
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	cd bf       	out	0x3d, r28	; 61
    18ba:	9b 8b       	std	Y+19, r25	; 0x13
    18bc:	8a 8b       	std	Y+18, r24	; 0x12
    18be:	7d 8b       	std	Y+21, r23	; 0x15
    18c0:	6c 8b       	std	Y+20, r22	; 0x14
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    18c2:	19 86       	std	Y+9, r1	; 0x09
    18c4:	18 86       	std	Y+8, r1	; 0x08
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    18c6:	8a 89       	ldd	r24, Y+18	; 0x12
    18c8:	9b 89       	ldd	r25, Y+19	; 0x13
    18ca:	9b 83       	std	Y+3, r25	; 0x03
    18cc:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xMatchFound = pdFALSE;
    18ce:	19 82       	std	Y+1, r1	; 0x01
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	9b 81       	ldd	r25, Y+3	; 0x03
    18d4:	02 96       	adiw	r24, 0x02	; 2
    18d6:	9b 87       	std	Y+11, r25	; 0x0b
    18d8:	8a 87       	std	Y+10, r24	; 0x0a
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    18da:	8a 85       	ldd	r24, Y+10	; 0x0a
    18dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    18de:	03 96       	adiw	r24, 0x03	; 3
    18e0:	9d 87       	std	Y+13, r25	; 0x0d
    18e2:	8c 87       	std	Y+12, r24	; 0x0c
	vTaskSuspendAll();
    18e4:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
    18e8:	ea 85       	ldd	r30, Y+10	; 0x0a
    18ea:	fb 85       	ldd	r31, Y+11	; 0x0b
    18ec:	85 81       	ldd	r24, Z+5	; 0x05
    18ee:	96 81       	ldd	r25, Z+6	; 0x06
    18f0:	99 8b       	std	Y+17, r25	; 0x11
    18f2:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
    18f4:	ea 81       	ldd	r30, Y+2	; 0x02
    18f6:	fb 81       	ldd	r31, Y+3	; 0x03
    18f8:	20 81       	ld	r18, Z
    18fa:	31 81       	ldd	r19, Z+1	; 0x01
    18fc:	8c 89       	ldd	r24, Y+20	; 0x14
    18fe:	9d 89       	ldd	r25, Y+21	; 0x15
    1900:	82 2b       	or	r24, r18
    1902:	93 2b       	or	r25, r19
    1904:	ea 81       	ldd	r30, Y+2	; 0x02
    1906:	fb 81       	ldd	r31, Y+3	; 0x03
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	80 83       	st	Z, r24
    190c:	59 c0       	rjmp	.+178    	; 0x19c0 <xEventGroupSetBits+0x11a>

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
		{
			pxNext = listGET_NEXT( pxListItem );
    190e:	e8 89       	ldd	r30, Y+16	; 0x10
    1910:	f9 89       	ldd	r31, Y+17	; 0x11
    1912:	82 81       	ldd	r24, Z+2	; 0x02
    1914:	93 81       	ldd	r25, Z+3	; 0x03
    1916:	9f 87       	std	Y+15, r25	; 0x0f
    1918:	8e 87       	std	Y+14, r24	; 0x0e
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    191a:	e8 89       	ldd	r30, Y+16	; 0x10
    191c:	f9 89       	ldd	r31, Y+17	; 0x11
    191e:	80 81       	ld	r24, Z
    1920:	91 81       	ldd	r25, Z+1	; 0x01
    1922:	9f 83       	std	Y+7, r25	; 0x07
    1924:	8e 83       	std	Y+6, r24	; 0x06
			xMatchFound = pdFALSE;
    1926:	19 82       	std	Y+1, r1	; 0x01

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
    1928:	8e 81       	ldd	r24, Y+6	; 0x06
    192a:	9f 81       	ldd	r25, Y+7	; 0x07
    192c:	80 70       	andi	r24, 0x00	; 0
    192e:	9d 83       	std	Y+5, r25	; 0x05
    1930:	8c 83       	std	Y+4, r24	; 0x04
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    1932:	8e 81       	ldd	r24, Y+6	; 0x06
    1934:	9f 81       	ldd	r25, Y+7	; 0x07
    1936:	90 70       	andi	r25, 0x00	; 0
    1938:	9f 83       	std	Y+7, r25	; 0x07
    193a:	8e 83       	std	Y+6, r24	; 0x06

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    193c:	8c 81       	ldd	r24, Y+4	; 0x04
    193e:	9d 81       	ldd	r25, Y+5	; 0x05
    1940:	80 70       	andi	r24, 0x00	; 0
    1942:	94 70       	andi	r25, 0x04	; 4
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	69 f4       	brne	.+26     	; 0x1962 <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    1948:	ea 81       	ldd	r30, Y+2	; 0x02
    194a:	fb 81       	ldd	r31, Y+3	; 0x03
    194c:	20 81       	ld	r18, Z
    194e:	31 81       	ldd	r19, Z+1	; 0x01
    1950:	8e 81       	ldd	r24, Y+6	; 0x06
    1952:	9f 81       	ldd	r25, Y+7	; 0x07
    1954:	82 23       	and	r24, r18
    1956:	93 23       	and	r25, r19
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	91 f0       	breq	.+36     	; 0x1980 <xEventGroupSetBits+0xda>
				{
					xMatchFound = pdTRUE;
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	0f c0       	rjmp	.+30     	; 0x1980 <xEventGroupSetBits+0xda>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    1962:	ea 81       	ldd	r30, Y+2	; 0x02
    1964:	fb 81       	ldd	r31, Y+3	; 0x03
    1966:	20 81       	ld	r18, Z
    1968:	31 81       	ldd	r19, Z+1	; 0x01
    196a:	8e 81       	ldd	r24, Y+6	; 0x06
    196c:	9f 81       	ldd	r25, Y+7	; 0x07
    196e:	28 23       	and	r18, r24
    1970:	39 23       	and	r19, r25
    1972:	8e 81       	ldd	r24, Y+6	; 0x06
    1974:	9f 81       	ldd	r25, Y+7	; 0x07
    1976:	28 17       	cp	r18, r24
    1978:	39 07       	cpc	r19, r25
    197a:	11 f4       	brne	.+4      	; 0x1980 <xEventGroupSetBits+0xda>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	88 23       	and	r24, r24
    1984:	c9 f0       	breq	.+50     	; 0x19b8 <xEventGroupSetBits+0x112>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	9d 81       	ldd	r25, Y+5	; 0x05
    198a:	80 70       	andi	r24, 0x00	; 0
    198c:	91 70       	andi	r25, 0x01	; 1
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	41 f0       	breq	.+16     	; 0x19a2 <xEventGroupSetBits+0xfc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
    1992:	88 85       	ldd	r24, Y+8	; 0x08
    1994:	99 85       	ldd	r25, Y+9	; 0x09
    1996:	2e 81       	ldd	r18, Y+6	; 0x06
    1998:	3f 81       	ldd	r19, Y+7	; 0x07
    199a:	82 2b       	or	r24, r18
    199c:	93 2b       	or	r25, r19
    199e:	99 87       	std	Y+9, r25	; 0x09
    19a0:	88 87       	std	Y+8, r24	; 0x08
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    19a2:	ea 81       	ldd	r30, Y+2	; 0x02
    19a4:	fb 81       	ldd	r31, Y+3	; 0x03
    19a6:	80 81       	ld	r24, Z
    19a8:	91 81       	ldd	r25, Z+1	; 0x01
    19aa:	9c 01       	movw	r18, r24
    19ac:	32 60       	ori	r19, 0x02	; 2
    19ae:	88 89       	ldd	r24, Y+16	; 0x10
    19b0:	99 89       	ldd	r25, Y+17	; 0x11
    19b2:	b9 01       	movw	r22, r18
    19b4:	0e 94 cb 22 	call	0x4596	; 0x4596 <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
    19b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    19ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    19bc:	99 8b       	std	Y+17, r25	; 0x11
    19be:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
    19c0:	28 89       	ldd	r18, Y+16	; 0x10
    19c2:	39 89       	ldd	r19, Y+17	; 0x11
    19c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    19c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    19c8:	28 17       	cp	r18, r24
    19ca:	39 07       	cpc	r19, r25
    19cc:	09 f0       	breq	.+2      	; 0x19d0 <xEventGroupSetBits+0x12a>
    19ce:	9f cf       	rjmp	.-194    	; 0x190e <xEventGroupSetBits+0x68>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    19d0:	ea 81       	ldd	r30, Y+2	; 0x02
    19d2:	fb 81       	ldd	r31, Y+3	; 0x03
    19d4:	20 81       	ld	r18, Z
    19d6:	31 81       	ldd	r19, Z+1	; 0x01
    19d8:	88 85       	ldd	r24, Y+8	; 0x08
    19da:	99 85       	ldd	r25, Y+9	; 0x09
    19dc:	80 95       	com	r24
    19de:	90 95       	com	r25
    19e0:	82 23       	and	r24, r18
    19e2:	93 23       	and	r25, r19
    19e4:	ea 81       	ldd	r30, Y+2	; 0x02
    19e6:	fb 81       	ldd	r31, Y+3	; 0x03
    19e8:	91 83       	std	Z+1, r25	; 0x01
    19ea:	80 83       	st	Z, r24
	}
	( void ) xTaskResumeAll();
    19ec:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <xTaskResumeAll>

	return pxEventBits->uxEventBits;
    19f0:	ea 81       	ldd	r30, Y+2	; 0x02
    19f2:	fb 81       	ldd	r31, Y+3	; 0x03
    19f4:	80 81       	ld	r24, Z
    19f6:	91 81       	ldd	r25, Z+1	; 0x01
}
    19f8:	65 96       	adiw	r28, 0x15	; 21
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	00 d0       	rcall	.+0      	; 0x1a10 <vEventGroupDelete+0x6>
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <vEventGroupDelete+0x8>
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <vEventGroupDelete+0xa>
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	9e 83       	std	Y+6, r25	; 0x06
    1a1a:	8d 83       	std	Y+5, r24	; 0x05
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    1a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a20:	9c 83       	std	Y+4, r25	; 0x04
    1a22:	8b 83       	std	Y+3, r24	; 0x03
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	9c 81       	ldd	r25, Y+4	; 0x04
    1a28:	02 96       	adiw	r24, 0x02	; 2
    1a2a:	9a 83       	std	Y+2, r25	; 0x02
    1a2c:	89 83       	std	Y+1, r24	; 0x01

	vTaskSuspendAll();
    1a2e:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <vTaskSuspendAll>
    1a32:	08 c0       	rjmp	.+16     	; 0x1a44 <vEventGroupDelete+0x3a>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
    1a34:	e9 81       	ldd	r30, Y+1	; 0x01
    1a36:	fa 81       	ldd	r31, Y+2	; 0x02
    1a38:	85 81       	ldd	r24, Z+5	; 0x05
    1a3a:	96 81       	ldd	r25, Z+6	; 0x06
    1a3c:	60 e0       	ldi	r22, 0x00	; 0
    1a3e:	72 e0       	ldi	r23, 0x02	; 2
    1a40:	0e 94 cb 22 	call	0x4596	; 0x4596 <xTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    1a44:	e9 81       	ldd	r30, Y+1	; 0x01
    1a46:	fa 81       	ldd	r31, Y+2	; 0x02
    1a48:	80 81       	ld	r24, Z
    1a4a:	88 23       	and	r24, r24
    1a4c:	99 f7       	brne	.-26     	; 0x1a34 <vEventGroupDelete+0x2a>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	9c 81       	ldd	r25, Y+4	; 0x04
    1a52:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
    1a56:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <xTaskResumeAll>
}
    1a5a:	26 96       	adiw	r28, 0x06	; 6
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <vEventGroupSetBitsCallback+0x6>
    1a72:	00 d0       	rcall	.+0      	; 0x1a74 <vEventGroupSetBitsCallback+0x8>
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <vEventGroupSetBitsCallback+0xa>
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	9a 83       	std	Y+2, r25	; 0x02
    1a7c:	89 83       	std	Y+1, r24	; 0x01
    1a7e:	4b 83       	std	Y+3, r20	; 0x03
    1a80:	5c 83       	std	Y+4, r21	; 0x04
    1a82:	6d 83       	std	Y+5, r22	; 0x05
    1a84:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
    1a86:	2b 81       	ldd	r18, Y+3	; 0x03
    1a88:	3c 81       	ldd	r19, Y+4	; 0x04
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8e:	b9 01       	movw	r22, r18
    1a90:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <xEventGroupSetBits>
}
    1a94:	26 96       	adiw	r28, 0x06	; 6
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <vEventGroupClearBitsCallback+0x6>
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <vEventGroupClearBitsCallback+0x8>
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <vEventGroupClearBitsCallback+0xa>
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	9a 83       	std	Y+2, r25	; 0x02
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	4b 83       	std	Y+3, r20	; 0x03
    1aba:	5c 83       	std	Y+4, r21	; 0x04
    1abc:	6d 83       	std	Y+5, r22	; 0x05
    1abe:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
    1ac0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac8:	b9 01       	movw	r22, r18
    1aca:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <xEventGroupClearBits>
}
    1ace:	26 96       	adiw	r28, 0x06	; 6
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <prvTestWaitCondition+0x6>
    1ae6:	00 d0       	rcall	.+0      	; 0x1ae8 <prvTestWaitCondition+0x8>
    1ae8:	00 d0       	rcall	.+0      	; 0x1aea <prvTestWaitCondition+0xa>
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	9b 83       	std	Y+3, r25	; 0x03
    1af0:	8a 83       	std	Y+2, r24	; 0x02
    1af2:	7d 83       	std	Y+5, r23	; 0x05
    1af4:	6c 83       	std	Y+4, r22	; 0x04
    1af6:	4e 83       	std	Y+6, r20	; 0x06
BaseType_t xWaitConditionMet = pdFALSE;
    1af8:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
    1afa:	8e 81       	ldd	r24, Y+6	; 0x06
    1afc:	88 23       	and	r24, r24
    1afe:	59 f4       	brne	.+22     	; 0x1b16 <prvTestWaitCondition+0x36>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	9b 81       	ldd	r25, Y+3	; 0x03
    1b04:	2c 81       	ldd	r18, Y+4	; 0x04
    1b06:	3d 81       	ldd	r19, Y+5	; 0x05
    1b08:	82 23       	and	r24, r18
    1b0a:	93 23       	and	r25, r19
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	81 f0       	breq	.+32     	; 0x1b30 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	89 83       	std	Y+1, r24	; 0x01
    1b14:	0d c0       	rjmp	.+26     	; 0x1b30 <prvTestWaitCondition+0x50>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1b16:	2a 81       	ldd	r18, Y+2	; 0x02
    1b18:	3b 81       	ldd	r19, Y+3	; 0x03
    1b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1e:	28 23       	and	r18, r24
    1b20:	39 23       	and	r19, r25
    1b22:	8c 81       	ldd	r24, Y+4	; 0x04
    1b24:	9d 81       	ldd	r25, Y+5	; 0x05
    1b26:	28 17       	cp	r18, r24
    1b28:	39 07       	cpc	r19, r25
    1b2a:	11 f4       	brne	.+4      	; 0x1b30 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b32:	26 96       	adiw	r28, 0x06	; 6
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	2e 97       	sbiw	r28, 0x0e	; 14
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	9e 87       	std	Y+14, r25	; 0x0e
    1b5a:	8d 87       	std	Y+13, r24	; 0x0d
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    1b5c:	1e 82       	std	Y+6, r1	; 0x06
    1b5e:	1d 82       	std	Y+5, r1	; 0x05

	vTaskSuspendAll();
    1b60:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    1b64:	80 91 76 00 	lds	r24, 0x0076
    1b68:	88 23       	and	r24, r24
    1b6a:	29 f4       	brne	.+10     	; 0x1b76 <pvPortMalloc+0x32>
		{
			prvHeapInit();
    1b6c:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	80 93 76 00 	sts	0x0076, r24
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    1b76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	51 f0       	breq	.+20     	; 0x1b92 <pvPortMalloc+0x4e>
		{
			xWantedSize += heapSTRUCT_SIZE;
    1b7e:	80 91 73 00 	lds	r24, 0x0073
    1b82:	90 91 74 00 	lds	r25, 0x0074
    1b86:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b88:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b8a:	82 0f       	add	r24, r18
    1b8c:	93 1f       	adc	r25, r19
    1b8e:	9e 87       	std	Y+14, r25	; 0x0e
    1b90:	8d 87       	std	Y+13, r24	; 0x0d
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    1b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <pvPortMalloc+0x58>
    1b9a:	af c0       	rjmp	.+350    	; 0x1cfa <pvPortMalloc+0x1b6>
    1b9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba0:	23 e0       	ldi	r18, 0x03	; 3
    1ba2:	8f 31       	cpi	r24, 0x1F	; 31
    1ba4:	92 07       	cpc	r25, r18
    1ba6:	08 f0       	brcs	.+2      	; 0x1baa <pvPortMalloc+0x66>
    1ba8:	a8 c0       	rjmp	.+336    	; 0x1cfa <pvPortMalloc+0x1b6>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    1baa:	87 e9       	ldi	r24, 0x97	; 151
    1bac:	93 e0       	ldi	r25, 0x03	; 3
    1bae:	9a 87       	std	Y+10, r25	; 0x0a
    1bb0:	89 87       	std	Y+9, r24	; 0x09
			pxBlock = xStart.pxNextFreeBlock;
    1bb2:	80 91 97 03 	lds	r24, 0x0397
    1bb6:	90 91 98 03 	lds	r25, 0x0398
    1bba:	9c 87       	std	Y+12, r25	; 0x0c
    1bbc:	8b 87       	std	Y+11, r24	; 0x0b
    1bbe:	0a c0       	rjmp	.+20     	; 0x1bd4 <pvPortMalloc+0x90>
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
			{
				pxPreviousBlock = pxBlock;
    1bc0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bc2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bc4:	9a 87       	std	Y+10, r25	; 0x0a
    1bc6:	89 87       	std	Y+9, r24	; 0x09
				pxBlock = pxBlock->pxNextFreeBlock;
    1bc8:	eb 85       	ldd	r30, Y+11	; 0x0b
    1bca:	fc 85       	ldd	r31, Y+12	; 0x0c
    1bcc:	80 81       	ld	r24, Z
    1bce:	91 81       	ldd	r25, Z+1	; 0x01
    1bd0:	9c 87       	std	Y+12, r25	; 0x0c
    1bd2:	8b 87       	std	Y+11, r24	; 0x0b
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1bd4:	eb 85       	ldd	r30, Y+11	; 0x0b
    1bd6:	fc 85       	ldd	r31, Y+12	; 0x0c
    1bd8:	22 81       	ldd	r18, Z+2	; 0x02
    1bda:	33 81       	ldd	r19, Z+3	; 0x03
    1bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be0:	28 17       	cp	r18, r24
    1be2:	39 07       	cpc	r19, r25
    1be4:	30 f4       	brcc	.+12     	; 0x1bf2 <pvPortMalloc+0xae>
    1be6:	eb 85       	ldd	r30, Y+11	; 0x0b
    1be8:	fc 85       	ldd	r31, Y+12	; 0x0c
    1bea:	80 81       	ld	r24, Z
    1bec:	91 81       	ldd	r25, Z+1	; 0x01
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	39 f7       	brne	.-50     	; 0x1bc0 <pvPortMalloc+0x7c>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    1bf2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bf4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bf6:	43 e0       	ldi	r20, 0x03	; 3
    1bf8:	8b 39       	cpi	r24, 0x9B	; 155
    1bfa:	94 07       	cpc	r25, r20
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <pvPortMalloc+0xbc>
    1bfe:	7d c0       	rjmp	.+250    	; 0x1cfa <pvPortMalloc+0x1b6>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    1c00:	e9 85       	ldd	r30, Y+9	; 0x09
    1c02:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c04:	20 81       	ld	r18, Z
    1c06:	31 81       	ldd	r19, Z+1	; 0x01
    1c08:	80 91 73 00 	lds	r24, 0x0073
    1c0c:	90 91 74 00 	lds	r25, 0x0074
    1c10:	82 0f       	add	r24, r18
    1c12:	93 1f       	adc	r25, r19
    1c14:	9e 83       	std	Y+6, r25	; 0x06
    1c16:	8d 83       	std	Y+5, r24	; 0x05

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1c18:	eb 85       	ldd	r30, Y+11	; 0x0b
    1c1a:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c1c:	80 81       	ld	r24, Z
    1c1e:	91 81       	ldd	r25, Z+1	; 0x01
    1c20:	e9 85       	ldd	r30, Y+9	; 0x09
    1c22:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c24:	91 83       	std	Z+1, r25	; 0x01
    1c26:	80 83       	st	Z, r24

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1c28:	eb 85       	ldd	r30, Y+11	; 0x0b
    1c2a:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c2c:	22 81       	ldd	r18, Z+2	; 0x02
    1c2e:	33 81       	ldd	r19, Z+3	; 0x03
    1c30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c34:	28 1b       	sub	r18, r24
    1c36:	39 0b       	sbc	r19, r25
    1c38:	80 91 73 00 	lds	r24, 0x0073
    1c3c:	90 91 74 00 	lds	r25, 0x0074
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	82 17       	cp	r24, r18
    1c46:	93 07       	cpc	r25, r19
    1c48:	08 f0       	brcs	.+2      	; 0x1c4c <pvPortMalloc+0x108>
    1c4a:	47 c0       	rjmp	.+142    	; 0x1cda <pvPortMalloc+0x196>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1c4c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c4e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c54:	82 0f       	add	r24, r18
    1c56:	93 1f       	adc	r25, r19
    1c58:	98 87       	std	Y+8, r25	; 0x08
    1c5a:	8f 83       	std	Y+7, r24	; 0x07

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1c5c:	eb 85       	ldd	r30, Y+11	; 0x0b
    1c5e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c60:	22 81       	ldd	r18, Z+2	; 0x02
    1c62:	33 81       	ldd	r19, Z+3	; 0x03
    1c64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c68:	a9 01       	movw	r20, r18
    1c6a:	48 1b       	sub	r20, r24
    1c6c:	59 0b       	sbc	r21, r25
    1c6e:	ca 01       	movw	r24, r20
    1c70:	ef 81       	ldd	r30, Y+7	; 0x07
    1c72:	f8 85       	ldd	r31, Y+8	; 0x08
    1c74:	93 83       	std	Z+3, r25	; 0x03
    1c76:	82 83       	std	Z+2, r24	; 0x02
					pxBlock->xBlockSize = xWantedSize;
    1c78:	eb 85       	ldd	r30, Y+11	; 0x0b
    1c7a:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c80:	93 83       	std	Z+3, r25	; 0x03
    1c82:	82 83       	std	Z+2, r24	; 0x02

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    1c84:	ef 81       	ldd	r30, Y+7	; 0x07
    1c86:	f8 85       	ldd	r31, Y+8	; 0x08
    1c88:	82 81       	ldd	r24, Z+2	; 0x02
    1c8a:	93 81       	ldd	r25, Z+3	; 0x03
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	89 83       	std	Y+1, r24	; 0x01
    1c90:	87 e9       	ldi	r24, 0x97	; 151
    1c92:	93 e0       	ldi	r25, 0x03	; 3
    1c94:	9c 83       	std	Y+4, r25	; 0x04
    1c96:	8b 83       	std	Y+3, r24	; 0x03
    1c98:	06 c0       	rjmp	.+12     	; 0x1ca6 <pvPortMalloc+0x162>
    1c9a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c9c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c9e:	80 81       	ld	r24, Z
    1ca0:	91 81       	ldd	r25, Z+1	; 0x01
    1ca2:	9c 83       	std	Y+4, r25	; 0x04
    1ca4:	8b 83       	std	Y+3, r24	; 0x03
    1ca6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ca8:	fc 81       	ldd	r31, Y+4	; 0x04
    1caa:	01 90       	ld	r0, Z+
    1cac:	f0 81       	ld	r31, Z
    1cae:	e0 2d       	mov	r30, r0
    1cb0:	22 81       	ldd	r18, Z+2	; 0x02
    1cb2:	33 81       	ldd	r19, Z+3	; 0x03
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb8:	28 17       	cp	r18, r24
    1cba:	39 07       	cpc	r19, r25
    1cbc:	70 f3       	brcs	.-36     	; 0x1c9a <pvPortMalloc+0x156>
    1cbe:	eb 81       	ldd	r30, Y+3	; 0x03
    1cc0:	fc 81       	ldd	r31, Y+4	; 0x04
    1cc2:	80 81       	ld	r24, Z
    1cc4:	91 81       	ldd	r25, Z+1	; 0x01
    1cc6:	ef 81       	ldd	r30, Y+7	; 0x07
    1cc8:	f8 85       	ldd	r31, Y+8	; 0x08
    1cca:	91 83       	std	Z+1, r25	; 0x01
    1ccc:	80 83       	st	Z, r24
    1cce:	eb 81       	ldd	r30, Y+3	; 0x03
    1cd0:	fc 81       	ldd	r31, Y+4	; 0x04
    1cd2:	8f 81       	ldd	r24, Y+7	; 0x07
    1cd4:	98 85       	ldd	r25, Y+8	; 0x08
    1cd6:	91 83       	std	Z+1, r25	; 0x01
    1cd8:	80 83       	st	Z, r24
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
    1cda:	20 91 71 00 	lds	r18, 0x0071
    1cde:	30 91 72 00 	lds	r19, 0x0072
    1ce2:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ce4:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ce6:	82 81       	ldd	r24, Z+2	; 0x02
    1ce8:	93 81       	ldd	r25, Z+3	; 0x03
    1cea:	a9 01       	movw	r20, r18
    1cec:	48 1b       	sub	r20, r24
    1cee:	59 0b       	sbc	r21, r25
    1cf0:	ca 01       	movw	r24, r20
    1cf2:	90 93 72 00 	sts	0x0072, r25
    1cf6:	80 93 71 00 	sts	0x0071, r24
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1cfa:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    1cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1d00:	9e 81       	ldd	r25, Y+6	; 0x06
}
    1d02:	2e 96       	adiw	r28, 0x0e	; 14
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	cd bf       	out	0x3d, r28	; 61
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	08 95       	ret

00001d14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	2a 97       	sbiw	r28, 0x0a	; 10
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	de bf       	out	0x3e, r29	; 62
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	cd bf       	out	0x3d, r28	; 61
    1d28:	9a 87       	std	Y+10, r25	; 0x0a
    1d2a:	89 87       	std	Y+9, r24	; 0x09
uint8_t *puc = ( uint8_t * ) pv;
    1d2c:	89 85       	ldd	r24, Y+9	; 0x09
    1d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d30:	98 87       	std	Y+8, r25	; 0x08
    1d32:	8f 83       	std	Y+7, r24	; 0x07
BlockLink_t *pxLink;

	if( pv != NULL )
    1d34:	89 85       	ldd	r24, Y+9	; 0x09
    1d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <vPortFree+0x2a>
    1d3c:	4f c0       	rjmp	.+158    	; 0x1ddc <vPortFree+0xc8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    1d3e:	80 91 73 00 	lds	r24, 0x0073
    1d42:	90 91 74 00 	lds	r25, 0x0074
    1d46:	22 27       	eor	r18, r18
    1d48:	33 27       	eor	r19, r19
    1d4a:	28 1b       	sub	r18, r24
    1d4c:	39 0b       	sbc	r19, r25
    1d4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d50:	98 85       	ldd	r25, Y+8	; 0x08
    1d52:	82 0f       	add	r24, r18
    1d54:	93 1f       	adc	r25, r19
    1d56:	98 87       	std	Y+8, r25	; 0x08
    1d58:	8f 83       	std	Y+7, r24	; 0x07

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
    1d5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d5c:	98 85       	ldd	r25, Y+8	; 0x08
    1d5e:	9e 83       	std	Y+6, r25	; 0x06
    1d60:	8d 83       	std	Y+5, r24	; 0x05

		vTaskSuspendAll();
    1d62:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1d66:	ed 81       	ldd	r30, Y+5	; 0x05
    1d68:	fe 81       	ldd	r31, Y+6	; 0x06
    1d6a:	82 81       	ldd	r24, Z+2	; 0x02
    1d6c:	93 81       	ldd	r25, Z+3	; 0x03
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	89 83       	std	Y+1, r24	; 0x01
    1d72:	87 e9       	ldi	r24, 0x97	; 151
    1d74:	93 e0       	ldi	r25, 0x03	; 3
    1d76:	9c 83       	std	Y+4, r25	; 0x04
    1d78:	8b 83       	std	Y+3, r24	; 0x03
    1d7a:	06 c0       	rjmp	.+12     	; 0x1d88 <vPortFree+0x74>
    1d7c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d7e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d80:	80 81       	ld	r24, Z
    1d82:	91 81       	ldd	r25, Z+1	; 0x01
    1d84:	9c 83       	std	Y+4, r25	; 0x04
    1d86:	8b 83       	std	Y+3, r24	; 0x03
    1d88:	eb 81       	ldd	r30, Y+3	; 0x03
    1d8a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d8c:	01 90       	ld	r0, Z+
    1d8e:	f0 81       	ld	r31, Z
    1d90:	e0 2d       	mov	r30, r0
    1d92:	22 81       	ldd	r18, Z+2	; 0x02
    1d94:	33 81       	ldd	r19, Z+3	; 0x03
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9a:	28 17       	cp	r18, r24
    1d9c:	39 07       	cpc	r19, r25
    1d9e:	70 f3       	brcs	.-36     	; 0x1d7c <vPortFree+0x68>
    1da0:	eb 81       	ldd	r30, Y+3	; 0x03
    1da2:	fc 81       	ldd	r31, Y+4	; 0x04
    1da4:	80 81       	ld	r24, Z
    1da6:	91 81       	ldd	r25, Z+1	; 0x01
    1da8:	ed 81       	ldd	r30, Y+5	; 0x05
    1daa:	fe 81       	ldd	r31, Y+6	; 0x06
    1dac:	91 83       	std	Z+1, r25	; 0x01
    1dae:	80 83       	st	Z, r24
    1db0:	eb 81       	ldd	r30, Y+3	; 0x03
    1db2:	fc 81       	ldd	r31, Y+4	; 0x04
    1db4:	8d 81       	ldd	r24, Y+5	; 0x05
    1db6:	9e 81       	ldd	r25, Y+6	; 0x06
    1db8:	91 83       	std	Z+1, r25	; 0x01
    1dba:	80 83       	st	Z, r24
			xFreeBytesRemaining += pxLink->xBlockSize;
    1dbc:	ed 81       	ldd	r30, Y+5	; 0x05
    1dbe:	fe 81       	ldd	r31, Y+6	; 0x06
    1dc0:	22 81       	ldd	r18, Z+2	; 0x02
    1dc2:	33 81       	ldd	r19, Z+3	; 0x03
    1dc4:	80 91 71 00 	lds	r24, 0x0071
    1dc8:	90 91 72 00 	lds	r25, 0x0072
    1dcc:	82 0f       	add	r24, r18
    1dce:	93 1f       	adc	r25, r19
    1dd0:	90 93 72 00 	sts	0x0072, r25
    1dd4:	80 93 71 00 	sts	0x0071, r24
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
    1dd8:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <xTaskResumeAll>
	}
}
    1ddc:	2a 96       	adiw	r28, 0x0a	; 10
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	de bf       	out	0x3e, r29	; 62
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	cd bf       	out	0x3d, r28	; 61
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	08 95       	ret

00001dee <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
	return xFreeBytesRemaining;
    1df6:	80 91 71 00 	lds	r24, 0x0071
    1dfa:	90 91 72 00 	lds	r25, 0x0072
}
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
	/* This just exists to keep the linker quiet. */
}
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <prvHeapInit+0x6>
    1e18:	00 d0       	rcall	.+0      	; 0x1e1a <prvHeapInit+0x8>
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1e1e:	88 e7       	ldi	r24, 0x78	; 120
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	9a 83       	std	Y+2, r25	; 0x02
    1e24:	89 83       	std	Y+1, r24	; 0x01

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2a:	90 93 98 03 	sts	0x0398, r25
    1e2e:	80 93 97 03 	sts	0x0397, r24
	xStart.xBlockSize = ( size_t ) 0;
    1e32:	10 92 9a 03 	sts	0x039A, r1
    1e36:	10 92 99 03 	sts	0x0399, r1

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    1e3a:	8f e1       	ldi	r24, 0x1F	; 31
    1e3c:	93 e0       	ldi	r25, 0x03	; 3
    1e3e:	90 93 9e 03 	sts	0x039E, r25
    1e42:	80 93 9d 03 	sts	0x039D, r24
	xEnd.pxNextFreeBlock = NULL;
    1e46:	10 92 9c 03 	sts	0x039C, r1
    1e4a:	10 92 9b 03 	sts	0x039B, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	9a 81       	ldd	r25, Y+2	; 0x02
    1e52:	9c 83       	std	Y+4, r25	; 0x04
    1e54:	8b 83       	std	Y+3, r24	; 0x03
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    1e56:	eb 81       	ldd	r30, Y+3	; 0x03
    1e58:	fc 81       	ldd	r31, Y+4	; 0x04
    1e5a:	8f e1       	ldi	r24, 0x1F	; 31
    1e5c:	93 e0       	ldi	r25, 0x03	; 3
    1e5e:	93 83       	std	Z+3, r25	; 0x03
    1e60:	82 83       	std	Z+2, r24	; 0x02
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    1e62:	eb 81       	ldd	r30, Y+3	; 0x03
    1e64:	fc 81       	ldd	r31, Y+4	; 0x04
    1e66:	8b e9       	ldi	r24, 0x9B	; 155
    1e68:	93 e0       	ldi	r25, 0x03	; 3
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	80 83       	st	Z, r24
}
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	00 d0       	rcall	.+0      	; 0x1e82 <vListInitialise+0x6>
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
    1e86:	9a 83       	std	Y+2, r25	; 0x02
    1e88:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8e:	03 96       	adiw	r24, 0x03	; 3
    1e90:	e9 81       	ldd	r30, Y+1	; 0x01
    1e92:	fa 81       	ldd	r31, Y+2	; 0x02
    1e94:	92 83       	std	Z+2, r25	; 0x02
    1e96:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1e98:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9c:	8f ef       	ldi	r24, 0xFF	; 255
    1e9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ea0:	94 83       	std	Z+4, r25	; 0x04
    1ea2:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea8:	03 96       	adiw	r24, 0x03	; 3
    1eaa:	e9 81       	ldd	r30, Y+1	; 0x01
    1eac:	fa 81       	ldd	r31, Y+2	; 0x02
    1eae:	96 83       	std	Z+6, r25	; 0x06
    1eb0:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb6:	03 96       	adiw	r24, 0x03	; 3
    1eb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eba:	fa 81       	ldd	r31, Y+2	; 0x02
    1ebc:	90 87       	std	Z+8, r25	; 0x08
    1ebe:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1ec0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec4:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <vListInitialiseItem+0x6>
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	9a 83       	std	Y+2, r25	; 0x02
    1edc:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1ede:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee2:	11 86       	std	Z+9, r1	; 0x09
    1ee4:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <vListInsertEnd+0x6>
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <vListInsertEnd+0x8>
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <vListInsertEnd+0xa>
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	9c 83       	std	Y+4, r25	; 0x04
    1f00:	8b 83       	std	Y+3, r24	; 0x03
    1f02:	7e 83       	std	Y+6, r23	; 0x06
    1f04:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    1f06:	eb 81       	ldd	r30, Y+3	; 0x03
    1f08:	fc 81       	ldd	r31, Y+4	; 0x04
    1f0a:	81 81       	ldd	r24, Z+1	; 0x01
    1f0c:	92 81       	ldd	r25, Z+2	; 0x02
    1f0e:	9a 83       	std	Y+2, r25	; 0x02
    1f10:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1f12:	ed 81       	ldd	r30, Y+5	; 0x05
    1f14:	fe 81       	ldd	r31, Y+6	; 0x06
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1a:	93 83       	std	Z+3, r25	; 0x03
    1f1c:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1f1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f20:	fa 81       	ldd	r31, Y+2	; 0x02
    1f22:	84 81       	ldd	r24, Z+4	; 0x04
    1f24:	95 81       	ldd	r25, Z+5	; 0x05
    1f26:	ed 81       	ldd	r30, Y+5	; 0x05
    1f28:	fe 81       	ldd	r31, Y+6	; 0x06
    1f2a:	95 83       	std	Z+5, r25	; 0x05
    1f2c:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1f2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f30:	fa 81       	ldd	r31, Y+2	; 0x02
    1f32:	04 80       	ldd	r0, Z+4	; 0x04
    1f34:	f5 81       	ldd	r31, Z+5	; 0x05
    1f36:	e0 2d       	mov	r30, r0
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3c:	93 83       	std	Z+3, r25	; 0x03
    1f3e:	82 83       	std	Z+2, r24	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    1f40:	e9 81       	ldd	r30, Y+1	; 0x01
    1f42:	fa 81       	ldd	r31, Y+2	; 0x02
    1f44:	8d 81       	ldd	r24, Y+5	; 0x05
    1f46:	9e 81       	ldd	r25, Y+6	; 0x06
    1f48:	95 83       	std	Z+5, r25	; 0x05
    1f4a:	84 83       	std	Z+4, r24	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1f4c:	ed 81       	ldd	r30, Y+5	; 0x05
    1f4e:	fe 81       	ldd	r31, Y+6	; 0x06
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	9c 81       	ldd	r25, Y+4	; 0x04
    1f54:	91 87       	std	Z+9, r25	; 0x09
    1f56:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1f58:	eb 81       	ldd	r30, Y+3	; 0x03
    1f5a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f5c:	80 81       	ld	r24, Z
    1f5e:	8f 5f       	subi	r24, 0xFF	; 255
    1f60:	eb 81       	ldd	r30, Y+3	; 0x03
    1f62:	fc 81       	ldd	r31, Y+4	; 0x04
    1f64:	80 83       	st	Z, r24
}
    1f66:	26 96       	adiw	r28, 0x06	; 6
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	28 97       	sbiw	r28, 0x08	; 8
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	9e 83       	std	Y+6, r25	; 0x06
    1f8e:	8d 83       	std	Y+5, r24	; 0x05
    1f90:	78 87       	std	Y+8, r23	; 0x08
    1f92:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1f94:	ef 81       	ldd	r30, Y+7	; 0x07
    1f96:	f8 85       	ldd	r31, Y+8	; 0x08
    1f98:	80 81       	ld	r24, Z
    1f9a:	91 81       	ldd	r25, Z+1	; 0x01
    1f9c:	9a 83       	std	Y+2, r25	; 0x02
    1f9e:	89 83       	std	Y+1, r24	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa4:	2f ef       	ldi	r18, 0xFF	; 255
    1fa6:	8f 3f       	cpi	r24, 0xFF	; 255
    1fa8:	92 07       	cpc	r25, r18
    1faa:	39 f4       	brne	.+14     	; 0x1fba <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1fac:	ed 81       	ldd	r30, Y+5	; 0x05
    1fae:	fe 81       	ldd	r31, Y+6	; 0x06
    1fb0:	87 81       	ldd	r24, Z+7	; 0x07
    1fb2:	90 85       	ldd	r25, Z+8	; 0x08
    1fb4:	9c 83       	std	Y+4, r25	; 0x04
    1fb6:	8b 83       	std	Y+3, r24	; 0x03
    1fb8:	18 c0       	rjmp	.+48     	; 0x1fea <vListInsert+0x72>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbe:	03 96       	adiw	r24, 0x03	; 3
    1fc0:	9c 83       	std	Y+4, r25	; 0x04
    1fc2:	8b 83       	std	Y+3, r24	; 0x03
    1fc4:	06 c0       	rjmp	.+12     	; 0x1fd2 <vListInsert+0x5a>
    1fc6:	eb 81       	ldd	r30, Y+3	; 0x03
    1fc8:	fc 81       	ldd	r31, Y+4	; 0x04
    1fca:	82 81       	ldd	r24, Z+2	; 0x02
    1fcc:	93 81       	ldd	r25, Z+3	; 0x03
    1fce:	9c 83       	std	Y+4, r25	; 0x04
    1fd0:	8b 83       	std	Y+3, r24	; 0x03
    1fd2:	eb 81       	ldd	r30, Y+3	; 0x03
    1fd4:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd6:	02 80       	ldd	r0, Z+2	; 0x02
    1fd8:	f3 81       	ldd	r31, Z+3	; 0x03
    1fda:	e0 2d       	mov	r30, r0
    1fdc:	20 81       	ld	r18, Z
    1fde:	31 81       	ldd	r19, Z+1	; 0x01
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe4:	82 17       	cp	r24, r18
    1fe6:	93 07       	cpc	r25, r19
    1fe8:	70 f7       	brcc	.-36     	; 0x1fc6 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1fea:	eb 81       	ldd	r30, Y+3	; 0x03
    1fec:	fc 81       	ldd	r31, Y+4	; 0x04
    1fee:	82 81       	ldd	r24, Z+2	; 0x02
    1ff0:	93 81       	ldd	r25, Z+3	; 0x03
    1ff2:	ef 81       	ldd	r30, Y+7	; 0x07
    1ff4:	f8 85       	ldd	r31, Y+8	; 0x08
    1ff6:	93 83       	std	Z+3, r25	; 0x03
    1ff8:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1ffa:	ef 81       	ldd	r30, Y+7	; 0x07
    1ffc:	f8 85       	ldd	r31, Y+8	; 0x08
    1ffe:	02 80       	ldd	r0, Z+2	; 0x02
    2000:	f3 81       	ldd	r31, Z+3	; 0x03
    2002:	e0 2d       	mov	r30, r0
    2004:	8f 81       	ldd	r24, Y+7	; 0x07
    2006:	98 85       	ldd	r25, Y+8	; 0x08
    2008:	95 83       	std	Z+5, r25	; 0x05
    200a:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    200c:	ef 81       	ldd	r30, Y+7	; 0x07
    200e:	f8 85       	ldd	r31, Y+8	; 0x08
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	9c 81       	ldd	r25, Y+4	; 0x04
    2014:	95 83       	std	Z+5, r25	; 0x05
    2016:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = pxNewListItem;
    2018:	eb 81       	ldd	r30, Y+3	; 0x03
    201a:	fc 81       	ldd	r31, Y+4	; 0x04
    201c:	8f 81       	ldd	r24, Y+7	; 0x07
    201e:	98 85       	ldd	r25, Y+8	; 0x08
    2020:	93 83       	std	Z+3, r25	; 0x03
    2022:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2024:	ef 81       	ldd	r30, Y+7	; 0x07
    2026:	f8 85       	ldd	r31, Y+8	; 0x08
    2028:	8d 81       	ldd	r24, Y+5	; 0x05
    202a:	9e 81       	ldd	r25, Y+6	; 0x06
    202c:	91 87       	std	Z+9, r25	; 0x09
    202e:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    2030:	ed 81       	ldd	r30, Y+5	; 0x05
    2032:	fe 81       	ldd	r31, Y+6	; 0x06
    2034:	80 81       	ld	r24, Z
    2036:	8f 5f       	subi	r24, 0xFF	; 255
    2038:	ed 81       	ldd	r30, Y+5	; 0x05
    203a:	fe 81       	ldd	r31, Y+6	; 0x06
    203c:	80 83       	st	Z, r24
}
    203e:	28 96       	adiw	r28, 0x08	; 8
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	de bf       	out	0x3e, r29	; 62
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	cd bf       	out	0x3d, r28	; 61
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	08 95       	ret

00002050 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2050:	df 93       	push	r29
    2052:	cf 93       	push	r28
    2054:	00 d0       	rcall	.+0      	; 0x2056 <uxListRemove+0x6>
    2056:	00 d0       	rcall	.+0      	; 0x2058 <uxListRemove+0x8>
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	9c 83       	std	Y+4, r25	; 0x04
    205e:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    2060:	eb 81       	ldd	r30, Y+3	; 0x03
    2062:	fc 81       	ldd	r31, Y+4	; 0x04
    2064:	80 85       	ldd	r24, Z+8	; 0x08
    2066:	91 85       	ldd	r25, Z+9	; 0x09
    2068:	9a 83       	std	Y+2, r25	; 0x02
    206a:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    206c:	eb 81       	ldd	r30, Y+3	; 0x03
    206e:	fc 81       	ldd	r31, Y+4	; 0x04
    2070:	a2 81       	ldd	r26, Z+2	; 0x02
    2072:	b3 81       	ldd	r27, Z+3	; 0x03
    2074:	eb 81       	ldd	r30, Y+3	; 0x03
    2076:	fc 81       	ldd	r31, Y+4	; 0x04
    2078:	84 81       	ldd	r24, Z+4	; 0x04
    207a:	95 81       	ldd	r25, Z+5	; 0x05
    207c:	15 96       	adiw	r26, 0x05	; 5
    207e:	9c 93       	st	X, r25
    2080:	8e 93       	st	-X, r24
    2082:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2084:	eb 81       	ldd	r30, Y+3	; 0x03
    2086:	fc 81       	ldd	r31, Y+4	; 0x04
    2088:	a4 81       	ldd	r26, Z+4	; 0x04
    208a:	b5 81       	ldd	r27, Z+5	; 0x05
    208c:	eb 81       	ldd	r30, Y+3	; 0x03
    208e:	fc 81       	ldd	r31, Y+4	; 0x04
    2090:	82 81       	ldd	r24, Z+2	; 0x02
    2092:	93 81       	ldd	r25, Z+3	; 0x03
    2094:	13 96       	adiw	r26, 0x03	; 3
    2096:	9c 93       	st	X, r25
    2098:	8e 93       	st	-X, r24
    209a:	12 97       	sbiw	r26, 0x02	; 2

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    209c:	e9 81       	ldd	r30, Y+1	; 0x01
    209e:	fa 81       	ldd	r31, Y+2	; 0x02
    20a0:	21 81       	ldd	r18, Z+1	; 0x01
    20a2:	32 81       	ldd	r19, Z+2	; 0x02
    20a4:	8b 81       	ldd	r24, Y+3	; 0x03
    20a6:	9c 81       	ldd	r25, Y+4	; 0x04
    20a8:	28 17       	cp	r18, r24
    20aa:	39 07       	cpc	r19, r25
    20ac:	41 f4       	brne	.+16     	; 0x20be <uxListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    20ae:	eb 81       	ldd	r30, Y+3	; 0x03
    20b0:	fc 81       	ldd	r31, Y+4	; 0x04
    20b2:	84 81       	ldd	r24, Z+4	; 0x04
    20b4:	95 81       	ldd	r25, Z+5	; 0x05
    20b6:	e9 81       	ldd	r30, Y+1	; 0x01
    20b8:	fa 81       	ldd	r31, Y+2	; 0x02
    20ba:	92 83       	std	Z+2, r25	; 0x02
    20bc:	81 83       	std	Z+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    20be:	eb 81       	ldd	r30, Y+3	; 0x03
    20c0:	fc 81       	ldd	r31, Y+4	; 0x04
    20c2:	11 86       	std	Z+9, r1	; 0x09
    20c4:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    20c6:	e9 81       	ldd	r30, Y+1	; 0x01
    20c8:	fa 81       	ldd	r31, Y+2	; 0x02
    20ca:	80 81       	ld	r24, Z
    20cc:	81 50       	subi	r24, 0x01	; 1
    20ce:	e9 81       	ldd	r30, Y+1	; 0x01
    20d0:	fa 81       	ldd	r31, Y+2	; 0x02
    20d2:	80 83       	st	Z, r24

	return pxList->uxNumberOfItems;
    20d4:	e9 81       	ldd	r30, Y+1	; 0x01
    20d6:	fa 81       	ldd	r31, Y+2	; 0x02
    20d8:	80 81       	ld	r24, Z
}
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	08 95       	ret

000020e8 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	28 97       	sbiw	r28, 0x08	; 8
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	de bf       	out	0x3e, r29	; 62
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	cd bf       	out	0x3d, r28	; 61
    20fc:	9c 83       	std	Y+4, r25	; 0x04
    20fe:	8b 83       	std	Y+3, r24	; 0x03
    2100:	7e 83       	std	Y+6, r23	; 0x06
    2102:	6d 83       	std	Y+5, r22	; 0x05
    2104:	58 87       	std	Y+8, r21	; 0x08
    2106:	4f 83       	std	Y+7, r20	; 0x07
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    2108:	eb 81       	ldd	r30, Y+3	; 0x03
    210a:	fc 81       	ldd	r31, Y+4	; 0x04
    210c:	81 e1       	ldi	r24, 0x11	; 17
    210e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	9c 81       	ldd	r25, Y+4	; 0x04
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	9c 83       	std	Y+4, r25	; 0x04
    2118:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    211a:	eb 81       	ldd	r30, Y+3	; 0x03
    211c:	fc 81       	ldd	r31, Y+4	; 0x04
    211e:	82 e2       	ldi	r24, 0x22	; 34
    2120:	80 83       	st	Z, r24
	pxTopOfStack--;
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	9c 81       	ldd	r25, Y+4	; 0x04
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	9c 83       	std	Y+4, r25	; 0x04
    212a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    212c:	eb 81       	ldd	r30, Y+3	; 0x03
    212e:	fc 81       	ldd	r31, Y+4	; 0x04
    2130:	83 e3       	ldi	r24, 0x33	; 51
    2132:	80 83       	st	Z, r24
	pxTopOfStack--;
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
    2136:	9c 81       	ldd	r25, Y+4	; 0x04
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	9c 83       	std	Y+4, r25	; 0x04
    213c:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
    213e:	8d 81       	ldd	r24, Y+5	; 0x05
    2140:	9e 81       	ldd	r25, Y+6	; 0x06
    2142:	9a 83       	std	Y+2, r25	; 0x02
    2144:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	eb 81       	ldd	r30, Y+3	; 0x03
    214a:	fc 81       	ldd	r31, Y+4	; 0x04
    214c:	80 83       	st	Z, r24
	pxTopOfStack--;
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	9c 81       	ldd	r25, Y+4	; 0x04
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	9c 83       	std	Y+4, r25	; 0x04
    2156:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	9a 81       	ldd	r25, Y+2	; 0x02
    215c:	89 2f       	mov	r24, r25
    215e:	99 27       	eor	r25, r25
    2160:	9a 83       	std	Y+2, r25	; 0x02
    2162:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	eb 81       	ldd	r30, Y+3	; 0x03
    2168:	fc 81       	ldd	r31, Y+4	; 0x04
    216a:	80 83       	st	Z, r24
	pxTopOfStack--;
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
    216e:	9c 81       	ldd	r25, Y+4	; 0x04
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	9c 83       	std	Y+4, r25	; 0x04
    2174:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    2176:	eb 81       	ldd	r30, Y+3	; 0x03
    2178:	fc 81       	ldd	r31, Y+4	; 0x04
    217a:	10 82       	st	Z, r1
	pxTopOfStack--;
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	9c 81       	ldd	r25, Y+4	; 0x04
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	9c 83       	std	Y+4, r25	; 0x04
    2184:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    2186:	eb 81       	ldd	r30, Y+3	; 0x03
    2188:	fc 81       	ldd	r31, Y+4	; 0x04
    218a:	80 e8       	ldi	r24, 0x80	; 128
    218c:	80 83       	st	Z, r24
	pxTopOfStack--;
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
    2190:	9c 81       	ldd	r25, Y+4	; 0x04
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	9c 83       	std	Y+4, r25	; 0x04
    2196:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    2198:	eb 81       	ldd	r30, Y+3	; 0x03
    219a:	fc 81       	ldd	r31, Y+4	; 0x04
    219c:	10 82       	st	Z, r1
	pxTopOfStack--;
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	9c 81       	ldd	r25, Y+4	; 0x04
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	9c 83       	std	Y+4, r25	; 0x04
    21a6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    21a8:	eb 81       	ldd	r30, Y+3	; 0x03
    21aa:	fc 81       	ldd	r31, Y+4	; 0x04
    21ac:	82 e0       	ldi	r24, 0x02	; 2
    21ae:	80 83       	st	Z, r24
	pxTopOfStack--;
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	9c 81       	ldd	r25, Y+4	; 0x04
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	9c 83       	std	Y+4, r25	; 0x04
    21b8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    21ba:	eb 81       	ldd	r30, Y+3	; 0x03
    21bc:	fc 81       	ldd	r31, Y+4	; 0x04
    21be:	83 e0       	ldi	r24, 0x03	; 3
    21c0:	80 83       	st	Z, r24
	pxTopOfStack--;
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	9c 81       	ldd	r25, Y+4	; 0x04
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	9c 83       	std	Y+4, r25	; 0x04
    21ca:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    21cc:	eb 81       	ldd	r30, Y+3	; 0x03
    21ce:	fc 81       	ldd	r31, Y+4	; 0x04
    21d0:	84 e0       	ldi	r24, 0x04	; 4
    21d2:	80 83       	st	Z, r24
	pxTopOfStack--;
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	9c 81       	ldd	r25, Y+4	; 0x04
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	9c 83       	std	Y+4, r25	; 0x04
    21dc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    21de:	eb 81       	ldd	r30, Y+3	; 0x03
    21e0:	fc 81       	ldd	r31, Y+4	; 0x04
    21e2:	85 e0       	ldi	r24, 0x05	; 5
    21e4:	80 83       	st	Z, r24
	pxTopOfStack--;
    21e6:	8b 81       	ldd	r24, Y+3	; 0x03
    21e8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	9c 83       	std	Y+4, r25	; 0x04
    21ee:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    21f0:	eb 81       	ldd	r30, Y+3	; 0x03
    21f2:	fc 81       	ldd	r31, Y+4	; 0x04
    21f4:	86 e0       	ldi	r24, 0x06	; 6
    21f6:	80 83       	st	Z, r24
	pxTopOfStack--;
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	9c 81       	ldd	r25, Y+4	; 0x04
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	9c 83       	std	Y+4, r25	; 0x04
    2200:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    2202:	eb 81       	ldd	r30, Y+3	; 0x03
    2204:	fc 81       	ldd	r31, Y+4	; 0x04
    2206:	87 e0       	ldi	r24, 0x07	; 7
    2208:	80 83       	st	Z, r24
	pxTopOfStack--;
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	9c 81       	ldd	r25, Y+4	; 0x04
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	9c 83       	std	Y+4, r25	; 0x04
    2212:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    2214:	eb 81       	ldd	r30, Y+3	; 0x03
    2216:	fc 81       	ldd	r31, Y+4	; 0x04
    2218:	88 e0       	ldi	r24, 0x08	; 8
    221a:	80 83       	st	Z, r24
	pxTopOfStack--;
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	9c 81       	ldd	r25, Y+4	; 0x04
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	9c 83       	std	Y+4, r25	; 0x04
    2224:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    2226:	eb 81       	ldd	r30, Y+3	; 0x03
    2228:	fc 81       	ldd	r31, Y+4	; 0x04
    222a:	89 e0       	ldi	r24, 0x09	; 9
    222c:	80 83       	st	Z, r24
	pxTopOfStack--;
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	9c 81       	ldd	r25, Y+4	; 0x04
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	9c 83       	std	Y+4, r25	; 0x04
    2236:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    2238:	eb 81       	ldd	r30, Y+3	; 0x03
    223a:	fc 81       	ldd	r31, Y+4	; 0x04
    223c:	80 e1       	ldi	r24, 0x10	; 16
    223e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	9c 83       	std	Y+4, r25	; 0x04
    2248:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    224a:	eb 81       	ldd	r30, Y+3	; 0x03
    224c:	fc 81       	ldd	r31, Y+4	; 0x04
    224e:	81 e1       	ldi	r24, 0x11	; 17
    2250:	80 83       	st	Z, r24
	pxTopOfStack--;
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	9c 81       	ldd	r25, Y+4	; 0x04
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	9c 83       	std	Y+4, r25	; 0x04
    225a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    225c:	eb 81       	ldd	r30, Y+3	; 0x03
    225e:	fc 81       	ldd	r31, Y+4	; 0x04
    2260:	82 e1       	ldi	r24, 0x12	; 18
    2262:	80 83       	st	Z, r24
	pxTopOfStack--;
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	9c 81       	ldd	r25, Y+4	; 0x04
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	9c 83       	std	Y+4, r25	; 0x04
    226c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    226e:	eb 81       	ldd	r30, Y+3	; 0x03
    2270:	fc 81       	ldd	r31, Y+4	; 0x04
    2272:	83 e1       	ldi	r24, 0x13	; 19
    2274:	80 83       	st	Z, r24
	pxTopOfStack--;
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	9c 81       	ldd	r25, Y+4	; 0x04
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	9c 83       	std	Y+4, r25	; 0x04
    227e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    2280:	eb 81       	ldd	r30, Y+3	; 0x03
    2282:	fc 81       	ldd	r31, Y+4	; 0x04
    2284:	84 e1       	ldi	r24, 0x14	; 20
    2286:	80 83       	st	Z, r24
	pxTopOfStack--;
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	9c 81       	ldd	r25, Y+4	; 0x04
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	9c 83       	std	Y+4, r25	; 0x04
    2290:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    2292:	eb 81       	ldd	r30, Y+3	; 0x03
    2294:	fc 81       	ldd	r31, Y+4	; 0x04
    2296:	85 e1       	ldi	r24, 0x15	; 21
    2298:	80 83       	st	Z, r24
	pxTopOfStack--;
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	9c 81       	ldd	r25, Y+4	; 0x04
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	9c 83       	std	Y+4, r25	; 0x04
    22a2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    22a4:	eb 81       	ldd	r30, Y+3	; 0x03
    22a6:	fc 81       	ldd	r31, Y+4	; 0x04
    22a8:	86 e1       	ldi	r24, 0x16	; 22
    22aa:	80 83       	st	Z, r24
	pxTopOfStack--;
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	9c 81       	ldd	r25, Y+4	; 0x04
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	9c 83       	std	Y+4, r25	; 0x04
    22b4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    22b6:	eb 81       	ldd	r30, Y+3	; 0x03
    22b8:	fc 81       	ldd	r31, Y+4	; 0x04
    22ba:	87 e1       	ldi	r24, 0x17	; 23
    22bc:	80 83       	st	Z, r24
	pxTopOfStack--;
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	9c 81       	ldd	r25, Y+4	; 0x04
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	9c 83       	std	Y+4, r25	; 0x04
    22c6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    22c8:	eb 81       	ldd	r30, Y+3	; 0x03
    22ca:	fc 81       	ldd	r31, Y+4	; 0x04
    22cc:	88 e1       	ldi	r24, 0x18	; 24
    22ce:	80 83       	st	Z, r24
	pxTopOfStack--;
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	9c 81       	ldd	r25, Y+4	; 0x04
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	9c 83       	std	Y+4, r25	; 0x04
    22d8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    22da:	eb 81       	ldd	r30, Y+3	; 0x03
    22dc:	fc 81       	ldd	r31, Y+4	; 0x04
    22de:	89 e1       	ldi	r24, 0x19	; 25
    22e0:	80 83       	st	Z, r24
	pxTopOfStack--;
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	9c 81       	ldd	r25, Y+4	; 0x04
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	9c 83       	std	Y+4, r25	; 0x04
    22ea:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    22ec:	eb 81       	ldd	r30, Y+3	; 0x03
    22ee:	fc 81       	ldd	r31, Y+4	; 0x04
    22f0:	80 e2       	ldi	r24, 0x20	; 32
    22f2:	80 83       	st	Z, r24
	pxTopOfStack--;
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	9c 81       	ldd	r25, Y+4	; 0x04
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	9c 83       	std	Y+4, r25	; 0x04
    22fc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    22fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2300:	fc 81       	ldd	r31, Y+4	; 0x04
    2302:	81 e2       	ldi	r24, 0x21	; 33
    2304:	80 83       	st	Z, r24
	pxTopOfStack--;
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	9c 81       	ldd	r25, Y+4	; 0x04
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	9c 83       	std	Y+4, r25	; 0x04
    230e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    2310:	eb 81       	ldd	r30, Y+3	; 0x03
    2312:	fc 81       	ldd	r31, Y+4	; 0x04
    2314:	82 e2       	ldi	r24, 0x22	; 34
    2316:	80 83       	st	Z, r24
	pxTopOfStack--;
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	9c 81       	ldd	r25, Y+4	; 0x04
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	9c 83       	std	Y+4, r25	; 0x04
    2320:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    2322:	eb 81       	ldd	r30, Y+3	; 0x03
    2324:	fc 81       	ldd	r31, Y+4	; 0x04
    2326:	83 e2       	ldi	r24, 0x23	; 35
    2328:	80 83       	st	Z, r24
	pxTopOfStack--;
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	9c 81       	ldd	r25, Y+4	; 0x04
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	9c 83       	std	Y+4, r25	; 0x04
    2332:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
    2334:	8f 81       	ldd	r24, Y+7	; 0x07
    2336:	98 85       	ldd	r25, Y+8	; 0x08
    2338:	9a 83       	std	Y+2, r25	; 0x02
    233a:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	eb 81       	ldd	r30, Y+3	; 0x03
    2340:	fc 81       	ldd	r31, Y+4	; 0x04
    2342:	80 83       	st	Z, r24
	pxTopOfStack--;
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	9c 81       	ldd	r25, Y+4	; 0x04
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	9c 83       	std	Y+4, r25	; 0x04
    234c:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	9a 81       	ldd	r25, Y+2	; 0x02
    2352:	89 2f       	mov	r24, r25
    2354:	99 27       	eor	r25, r25
    2356:	9a 83       	std	Y+2, r25	; 0x02
    2358:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	eb 81       	ldd	r30, Y+3	; 0x03
    235e:	fc 81       	ldd	r31, Y+4	; 0x04
    2360:	80 83       	st	Z, r24
	pxTopOfStack--;
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	9c 81       	ldd	r25, Y+4	; 0x04
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	9c 83       	std	Y+4, r25	; 0x04
    236a:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    236c:	eb 81       	ldd	r30, Y+3	; 0x03
    236e:	fc 81       	ldd	r31, Y+4	; 0x04
    2370:	86 e2       	ldi	r24, 0x26	; 38
    2372:	80 83       	st	Z, r24
	pxTopOfStack--;
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	9c 81       	ldd	r25, Y+4	; 0x04
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	9c 83       	std	Y+4, r25	; 0x04
    237c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    237e:	eb 81       	ldd	r30, Y+3	; 0x03
    2380:	fc 81       	ldd	r31, Y+4	; 0x04
    2382:	87 e2       	ldi	r24, 0x27	; 39
    2384:	80 83       	st	Z, r24
	pxTopOfStack--;
    2386:	8b 81       	ldd	r24, Y+3	; 0x03
    2388:	9c 81       	ldd	r25, Y+4	; 0x04
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	9c 83       	std	Y+4, r25	; 0x04
    238e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    2390:	eb 81       	ldd	r30, Y+3	; 0x03
    2392:	fc 81       	ldd	r31, Y+4	; 0x04
    2394:	88 e2       	ldi	r24, 0x28	; 40
    2396:	80 83       	st	Z, r24
	pxTopOfStack--;
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	9c 81       	ldd	r25, Y+4	; 0x04
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	9c 83       	std	Y+4, r25	; 0x04
    23a0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    23a2:	eb 81       	ldd	r30, Y+3	; 0x03
    23a4:	fc 81       	ldd	r31, Y+4	; 0x04
    23a6:	89 e2       	ldi	r24, 0x29	; 41
    23a8:	80 83       	st	Z, r24
	pxTopOfStack--;
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	9c 81       	ldd	r25, Y+4	; 0x04
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	9c 83       	std	Y+4, r25	; 0x04
    23b2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    23b4:	eb 81       	ldd	r30, Y+3	; 0x03
    23b6:	fc 81       	ldd	r31, Y+4	; 0x04
    23b8:	80 e3       	ldi	r24, 0x30	; 48
    23ba:	80 83       	st	Z, r24
	pxTopOfStack--;
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	9c 83       	std	Y+4, r25	; 0x04
    23c4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    23c6:	eb 81       	ldd	r30, Y+3	; 0x03
    23c8:	fc 81       	ldd	r31, Y+4	; 0x04
    23ca:	81 e3       	ldi	r24, 0x31	; 49
    23cc:	80 83       	st	Z, r24
	pxTopOfStack--;
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	9c 81       	ldd	r25, Y+4	; 0x04
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	9c 83       	std	Y+4, r25	; 0x04
    23d6:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	9c 81       	ldd	r25, Y+4	; 0x04
}
    23dc:	28 96       	adiw	r28, 0x08	; 8
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	f8 94       	cli
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    23f6:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    23fa:	a0 91 9f 03 	lds	r26, 0x039F
    23fe:	b0 91 a0 03 	lds	r27, 0x03A0
    2402:	cd 91       	ld	r28, X+
    2404:	cd bf       	out	0x3d, r28	; 61
    2406:	dd 91       	ld	r29, X+
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	ff 91       	pop	r31
    240c:	ef 91       	pop	r30
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
    2412:	bf 91       	pop	r27
    2414:	af 91       	pop	r26
    2416:	9f 91       	pop	r25
    2418:	8f 91       	pop	r24
    241a:	7f 91       	pop	r23
    241c:	6f 91       	pop	r22
    241e:	5f 91       	pop	r21
    2420:	4f 91       	pop	r20
    2422:	3f 91       	pop	r19
    2424:	2f 91       	pop	r18
    2426:	1f 91       	pop	r17
    2428:	0f 91       	pop	r16
    242a:	ff 90       	pop	r15
    242c:	ef 90       	pop	r14
    242e:	df 90       	pop	r13
    2430:	cf 90       	pop	r12
    2432:	bf 90       	pop	r11
    2434:	af 90       	pop	r10
    2436:	9f 90       	pop	r9
    2438:	8f 90       	pop	r8
    243a:	7f 90       	pop	r7
    243c:	6f 90       	pop	r6
    243e:	5f 90       	pop	r5
    2440:	4f 90       	pop	r4
    2442:	3f 90       	pop	r3
    2444:	2f 90       	pop	r2
    2446:	1f 90       	pop	r1
    2448:	0f 90       	pop	r0
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    244e:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    2450:	81 e0       	ldi	r24, 0x01	; 1
}
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	08 95       	ret

00002466 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2466:	0f 92       	push	r0
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	0f 92       	push	r0
    246e:	1f 92       	push	r1
    2470:	11 24       	eor	r1, r1
    2472:	2f 92       	push	r2
    2474:	3f 92       	push	r3
    2476:	4f 92       	push	r4
    2478:	5f 92       	push	r5
    247a:	6f 92       	push	r6
    247c:	7f 92       	push	r7
    247e:	8f 92       	push	r8
    2480:	9f 92       	push	r9
    2482:	af 92       	push	r10
    2484:	bf 92       	push	r11
    2486:	cf 92       	push	r12
    2488:	df 92       	push	r13
    248a:	ef 92       	push	r14
    248c:	ff 92       	push	r15
    248e:	0f 93       	push	r16
    2490:	1f 93       	push	r17
    2492:	2f 93       	push	r18
    2494:	3f 93       	push	r19
    2496:	4f 93       	push	r20
    2498:	5f 93       	push	r21
    249a:	6f 93       	push	r22
    249c:	7f 93       	push	r23
    249e:	8f 93       	push	r24
    24a0:	9f 93       	push	r25
    24a2:	af 93       	push	r26
    24a4:	bf 93       	push	r27
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	ef 93       	push	r30
    24ac:	ff 93       	push	r31
    24ae:	a0 91 9f 03 	lds	r26, 0x039F
    24b2:	b0 91 a0 03 	lds	r27, 0x03A0
    24b6:	0d b6       	in	r0, 0x3d	; 61
    24b8:	0d 92       	st	X+, r0
    24ba:	0e b6       	in	r0, 0x3e	; 62
    24bc:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    24be:	0e 94 a1 21 	call	0x4342	; 0x4342 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    24c2:	a0 91 9f 03 	lds	r26, 0x039F
    24c6:	b0 91 a0 03 	lds	r27, 0x03A0
    24ca:	cd 91       	ld	r28, X+
    24cc:	cd bf       	out	0x3d, r28	; 61
    24ce:	dd 91       	ld	r29, X+
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	ff 91       	pop	r31
    24d4:	ef 91       	pop	r30
    24d6:	df 91       	pop	r29
    24d8:	cf 91       	pop	r28
    24da:	bf 91       	pop	r27
    24dc:	af 91       	pop	r26
    24de:	9f 91       	pop	r25
    24e0:	8f 91       	pop	r24
    24e2:	7f 91       	pop	r23
    24e4:	6f 91       	pop	r22
    24e6:	5f 91       	pop	r21
    24e8:	4f 91       	pop	r20
    24ea:	3f 91       	pop	r19
    24ec:	2f 91       	pop	r18
    24ee:	1f 91       	pop	r17
    24f0:	0f 91       	pop	r16
    24f2:	ff 90       	pop	r15
    24f4:	ef 90       	pop	r14
    24f6:	df 90       	pop	r13
    24f8:	cf 90       	pop	r12
    24fa:	bf 90       	pop	r11
    24fc:	af 90       	pop	r10
    24fe:	9f 90       	pop	r9
    2500:	8f 90       	pop	r8
    2502:	7f 90       	pop	r7
    2504:	6f 90       	pop	r6
    2506:	5f 90       	pop	r5
    2508:	4f 90       	pop	r4
    250a:	3f 90       	pop	r3
    250c:	2f 90       	pop	r2
    250e:	1f 90       	pop	r1
    2510:	0f 90       	pop	r0
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2516:	08 95       	ret

00002518 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2518:	0f 92       	push	r0
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	f8 94       	cli
    251e:	0f 92       	push	r0
    2520:	1f 92       	push	r1
    2522:	11 24       	eor	r1, r1
    2524:	2f 92       	push	r2
    2526:	3f 92       	push	r3
    2528:	4f 92       	push	r4
    252a:	5f 92       	push	r5
    252c:	6f 92       	push	r6
    252e:	7f 92       	push	r7
    2530:	8f 92       	push	r8
    2532:	9f 92       	push	r9
    2534:	af 92       	push	r10
    2536:	bf 92       	push	r11
    2538:	cf 92       	push	r12
    253a:	df 92       	push	r13
    253c:	ef 92       	push	r14
    253e:	ff 92       	push	r15
    2540:	0f 93       	push	r16
    2542:	1f 93       	push	r17
    2544:	2f 93       	push	r18
    2546:	3f 93       	push	r19
    2548:	4f 93       	push	r20
    254a:	5f 93       	push	r21
    254c:	6f 93       	push	r22
    254e:	7f 93       	push	r23
    2550:	8f 93       	push	r24
    2552:	9f 93       	push	r25
    2554:	af 93       	push	r26
    2556:	bf 93       	push	r27
    2558:	cf 93       	push	r28
    255a:	df 93       	push	r29
    255c:	ef 93       	push	r30
    255e:	ff 93       	push	r31
    2560:	a0 91 9f 03 	lds	r26, 0x039F
    2564:	b0 91 a0 03 	lds	r27, 0x03A0
    2568:	0d b6       	in	r0, 0x3d	; 61
    256a:	0d 92       	st	X+, r0
    256c:	0e b6       	in	r0, 0x3e	; 62
    256e:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    2570:	0e 94 d5 20 	call	0x41aa	; 0x41aa <xTaskIncrementTick>
    2574:	88 23       	and	r24, r24
    2576:	11 f0       	breq	.+4      	; 0x257c <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    2578:	0e 94 a1 21 	call	0x4342	; 0x4342 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    257c:	a0 91 9f 03 	lds	r26, 0x039F
    2580:	b0 91 a0 03 	lds	r27, 0x03A0
    2584:	cd 91       	ld	r28, X+
    2586:	cd bf       	out	0x3d, r28	; 61
    2588:	dd 91       	ld	r29, X+
    258a:	de bf       	out	0x3e, r29	; 62
    258c:	ff 91       	pop	r31
    258e:	ef 91       	pop	r30
    2590:	df 91       	pop	r29
    2592:	cf 91       	pop	r28
    2594:	bf 91       	pop	r27
    2596:	af 91       	pop	r26
    2598:	9f 91       	pop	r25
    259a:	8f 91       	pop	r24
    259c:	7f 91       	pop	r23
    259e:	6f 91       	pop	r22
    25a0:	5f 91       	pop	r21
    25a2:	4f 91       	pop	r20
    25a4:	3f 91       	pop	r19
    25a6:	2f 91       	pop	r18
    25a8:	1f 91       	pop	r17
    25aa:	0f 91       	pop	r16
    25ac:	ff 90       	pop	r15
    25ae:	ef 90       	pop	r14
    25b0:	df 90       	pop	r13
    25b2:	cf 90       	pop	r12
    25b4:	bf 90       	pop	r11
    25b6:	af 90       	pop	r10
    25b8:	9f 90       	pop	r9
    25ba:	8f 90       	pop	r8
    25bc:	7f 90       	pop	r7
    25be:	6f 90       	pop	r6
    25c0:	5f 90       	pop	r5
    25c2:	4f 90       	pop	r4
    25c4:	3f 90       	pop	r3
    25c6:	2f 90       	pop	r2
    25c8:	1f 90       	pop	r1
    25ca:	0f 90       	pop	r0
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	0f 90       	pop	r0

	asm volatile ( "ret" );
    25d0:	08 95       	ret

000025d2 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <prvSetupTimerInterrupt+0x6>
    25d8:	00 d0       	rcall	.+0      	; 0x25da <prvSetupTimerInterrupt+0x8>
    25da:	00 d0       	rcall	.+0      	; 0x25dc <prvSetupTimerInterrupt+0xa>
    25dc:	cd b7       	in	r28, 0x3d	; 61
    25de:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    25e0:	80 e4       	ldi	r24, 0x40	; 64
    25e2:	9f e1       	ldi	r25, 0x1F	; 31
    25e4:	a0 e0       	ldi	r26, 0x00	; 0
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	8b 83       	std	Y+3, r24	; 0x03
    25ea:	9c 83       	std	Y+4, r25	; 0x04
    25ec:	ad 83       	std	Y+5, r26	; 0x05
    25ee:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	9c 81       	ldd	r25, Y+4	; 0x04
    25f4:	ad 81       	ldd	r26, Y+5	; 0x05
    25f6:	be 81       	ldd	r27, Y+6	; 0x06
    25f8:	68 94       	set
    25fa:	15 f8       	bld	r1, 5
    25fc:	b6 95       	lsr	r27
    25fe:	a7 95       	ror	r26
    2600:	97 95       	ror	r25
    2602:	87 95       	ror	r24
    2604:	16 94       	lsr	r1
    2606:	d1 f7       	brne	.-12     	; 0x25fc <prvSetupTimerInterrupt+0x2a>
    2608:	8b 83       	std	Y+3, r24	; 0x03
    260a:	9c 83       	std	Y+4, r25	; 0x04
    260c:	ad 83       	std	Y+5, r26	; 0x05
    260e:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	9c 81       	ldd	r25, Y+4	; 0x04
    2614:	ad 81       	ldd	r26, Y+5	; 0x05
    2616:	be 81       	ldd	r27, Y+6	; 0x06
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	a1 09       	sbc	r26, r1
    261c:	b1 09       	sbc	r27, r1
    261e:	8b 83       	std	Y+3, r24	; 0x03
    2620:	9c 83       	std	Y+4, r25	; 0x04
    2622:	ad 83       	std	Y+5, r26	; 0x05
    2624:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	9c 81       	ldd	r25, Y+4	; 0x04
    262e:	ad 81       	ldd	r26, Y+5	; 0x05
    2630:	be 81       	ldd	r27, Y+6	; 0x06
    2632:	89 2f       	mov	r24, r25
    2634:	9a 2f       	mov	r25, r26
    2636:	ab 2f       	mov	r26, r27
    2638:	bb 27       	eor	r27, r27
    263a:	8b 83       	std	Y+3, r24	; 0x03
    263c:	9c 83       	std	Y+4, r25	; 0x04
    263e:	ad 83       	std	Y+5, r26	; 0x05
    2640:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    2646:	eb e4       	ldi	r30, 0x4B	; 75
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	8a 81       	ldd	r24, Y+2	; 0x02
    264c:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    264e:	ea e4       	ldi	r30, 0x4A	; 74
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    2656:	8b e0       	ldi	r24, 0x0B	; 11
    2658:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    265a:	ee e4       	ldi	r30, 0x4E	; 78
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    2662:	e9 e5       	ldi	r30, 0x59	; 89
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	80 61       	ori	r24, 0x10	; 16
    266e:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    2670:	e9 e5       	ldi	r30, 0x59	; 89
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	80 83       	st	Z, r24
}
    2678:	26 96       	adiw	r28, 0x06	; 6
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	f8 94       	cli
    267e:	de bf       	out	0x3e, r29	; 62
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	cd bf       	out	0x3d, r28	; 61
    2684:	cf 91       	pop	r28
    2686:	df 91       	pop	r29
    2688:	08 95       	ret

0000268a <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    268a:	0e 94 8c 12 	call	0x2518	; 0x2518 <vPortYieldFromTick>
		asm volatile ( "reti" );
    268e:	18 95       	reti

00002690 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    2690:	df 93       	push	r29
    2692:	cf 93       	push	r28
    2694:	00 d0       	rcall	.+0      	; 0x2696 <xQueueGenericReset+0x6>
    2696:	00 d0       	rcall	.+0      	; 0x2698 <xQueueGenericReset+0x8>
    2698:	0f 92       	push	r0
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	9c 83       	std	Y+4, r25	; 0x04
    26a0:	8b 83       	std	Y+3, r24	; 0x03
    26a2:	6d 83       	std	Y+5, r22	; 0x05
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    26a4:	8b 81       	ldd	r24, Y+3	; 0x03
    26a6:	9c 81       	ldd	r25, Y+4	; 0x04
    26a8:	9a 83       	std	Y+2, r25	; 0x02
    26aa:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    26b2:	e9 81       	ldd	r30, Y+1	; 0x01
    26b4:	fa 81       	ldd	r31, Y+2	; 0x02
    26b6:	40 81       	ld	r20, Z
    26b8:	51 81       	ldd	r21, Z+1	; 0x01
    26ba:	e9 81       	ldd	r30, Y+1	; 0x01
    26bc:	fa 81       	ldd	r31, Y+2	; 0x02
    26be:	83 8d       	ldd	r24, Z+27	; 0x1b
    26c0:	28 2f       	mov	r18, r24
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	e9 81       	ldd	r30, Y+1	; 0x01
    26c6:	fa 81       	ldd	r31, Y+2	; 0x02
    26c8:	84 8d       	ldd	r24, Z+28	; 0x1c
    26ca:	88 2f       	mov	r24, r24
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	bc 01       	movw	r22, r24
    26d0:	26 9f       	mul	r18, r22
    26d2:	c0 01       	movw	r24, r0
    26d4:	27 9f       	mul	r18, r23
    26d6:	90 0d       	add	r25, r0
    26d8:	36 9f       	mul	r19, r22
    26da:	90 0d       	add	r25, r0
    26dc:	11 24       	eor	r1, r1
    26de:	84 0f       	add	r24, r20
    26e0:	95 1f       	adc	r25, r21
    26e2:	e9 81       	ldd	r30, Y+1	; 0x01
    26e4:	fa 81       	ldd	r31, Y+2	; 0x02
    26e6:	93 83       	std	Z+3, r25	; 0x03
    26e8:	82 83       	std	Z+2, r24	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    26ea:	e9 81       	ldd	r30, Y+1	; 0x01
    26ec:	fa 81       	ldd	r31, Y+2	; 0x02
    26ee:	12 8e       	std	Z+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    26f0:	e9 81       	ldd	r30, Y+1	; 0x01
    26f2:	fa 81       	ldd	r31, Y+2	; 0x02
    26f4:	80 81       	ld	r24, Z
    26f6:	91 81       	ldd	r25, Z+1	; 0x01
    26f8:	e9 81       	ldd	r30, Y+1	; 0x01
    26fa:	fa 81       	ldd	r31, Y+2	; 0x02
    26fc:	95 83       	std	Z+5, r25	; 0x05
    26fe:	84 83       	std	Z+4, r24	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    2700:	e9 81       	ldd	r30, Y+1	; 0x01
    2702:	fa 81       	ldd	r31, Y+2	; 0x02
    2704:	40 81       	ld	r20, Z
    2706:	51 81       	ldd	r21, Z+1	; 0x01
    2708:	e9 81       	ldd	r30, Y+1	; 0x01
    270a:	fa 81       	ldd	r31, Y+2	; 0x02
    270c:	83 8d       	ldd	r24, Z+27	; 0x1b
    270e:	88 2f       	mov	r24, r24
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	9c 01       	movw	r18, r24
    2714:	21 50       	subi	r18, 0x01	; 1
    2716:	30 40       	sbci	r19, 0x00	; 0
    2718:	e9 81       	ldd	r30, Y+1	; 0x01
    271a:	fa 81       	ldd	r31, Y+2	; 0x02
    271c:	84 8d       	ldd	r24, Z+28	; 0x1c
    271e:	88 2f       	mov	r24, r24
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	bc 01       	movw	r22, r24
    2724:	26 9f       	mul	r18, r22
    2726:	c0 01       	movw	r24, r0
    2728:	27 9f       	mul	r18, r23
    272a:	90 0d       	add	r25, r0
    272c:	36 9f       	mul	r19, r22
    272e:	90 0d       	add	r25, r0
    2730:	11 24       	eor	r1, r1
    2732:	84 0f       	add	r24, r20
    2734:	95 1f       	adc	r25, r21
    2736:	e9 81       	ldd	r30, Y+1	; 0x01
    2738:	fa 81       	ldd	r31, Y+2	; 0x02
    273a:	97 83       	std	Z+7, r25	; 0x07
    273c:	86 83       	std	Z+6, r24	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
    273e:	e9 81       	ldd	r30, Y+1	; 0x01
    2740:	fa 81       	ldd	r31, Y+2	; 0x02
    2742:	8f ef       	ldi	r24, 0xFF	; 255
    2744:	85 8f       	std	Z+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
    2746:	e9 81       	ldd	r30, Y+1	; 0x01
    2748:	fa 81       	ldd	r31, Y+2	; 0x02
    274a:	8f ef       	ldi	r24, 0xFF	; 255
    274c:	86 8f       	std	Z+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    274e:	8d 81       	ldd	r24, Y+5	; 0x05
    2750:	88 23       	and	r24, r24
    2752:	79 f4       	brne	.+30     	; 0x2772 <xQueueGenericReset+0xe2>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2754:	e9 81       	ldd	r30, Y+1	; 0x01
    2756:	fa 81       	ldd	r31, Y+2	; 0x02
    2758:	80 85       	ldd	r24, Z+8	; 0x08
    275a:	88 23       	and	r24, r24
    275c:	a1 f0       	breq	.+40     	; 0x2786 <xQueueGenericReset+0xf6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	9a 81       	ldd	r25, Y+2	; 0x02
    2762:	08 96       	adiw	r24, 0x08	; 8
    2764:	0e 94 60 22 	call	0x44c0	; 0x44c0 <xTaskRemoveFromEventList>
    2768:	88 23       	and	r24, r24
    276a:	69 f0       	breq	.+26     	; 0x2786 <xQueueGenericReset+0xf6>
				{
					queueYIELD_IF_USING_PREEMPTION();
    276c:	0e 94 33 12 	call	0x2466	; 0x2466 <vPortYield>
    2770:	0a c0       	rjmp	.+20     	; 0x2786 <xQueueGenericReset+0xf6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2772:	89 81       	ldd	r24, Y+1	; 0x01
    2774:	9a 81       	ldd	r25, Y+2	; 0x02
    2776:	08 96       	adiw	r24, 0x08	; 8
    2778:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	9a 81       	ldd	r25, Y+2	; 0x02
    2780:	41 96       	adiw	r24, 0x11	; 17
    2782:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    2786:	0f 90       	pop	r0
    2788:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    278a:	81 e0       	ldi	r24, 0x01	; 1
}
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	cf 91       	pop	r28
    2798:	df 91       	pop	r29
    279a:	08 95       	ret

0000279c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    279c:	0f 93       	push	r16
    279e:	1f 93       	push	r17
    27a0:	df 93       	push	r29
    27a2:	cf 93       	push	r28
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
    27a8:	29 97       	sbiw	r28, 0x09	; 9
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	f8 94       	cli
    27ae:	de bf       	out	0x3e, r29	; 62
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	cd bf       	out	0x3d, r28	; 61
    27b4:	8f 83       	std	Y+7, r24	; 0x07
    27b6:	68 87       	std	Y+8, r22	; 0x08
    27b8:	49 87       	std	Y+9, r20	; 0x09
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    27ba:	88 85       	ldd	r24, Y+8	; 0x08
    27bc:	88 23       	and	r24, r24
    27be:	19 f4       	brne	.+6      	; 0x27c6 <xQueueGenericCreate+0x2a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    27c0:	1c 82       	std	Y+4, r1	; 0x04
    27c2:	1b 82       	std	Y+3, r1	; 0x03
    27c4:	10 c0       	rjmp	.+32     	; 0x27e6 <xQueueGenericCreate+0x4a>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    27c6:	8f 81       	ldd	r24, Y+7	; 0x07
    27c8:	28 2f       	mov	r18, r24
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	88 85       	ldd	r24, Y+8	; 0x08
    27ce:	88 2f       	mov	r24, r24
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	ac 01       	movw	r20, r24
    27d4:	24 9f       	mul	r18, r20
    27d6:	c0 01       	movw	r24, r0
    27d8:	25 9f       	mul	r18, r21
    27da:	90 0d       	add	r25, r0
    27dc:	34 9f       	mul	r19, r20
    27de:	90 0d       	add	r25, r0
    27e0:	11 24       	eor	r1, r1
    27e2:	9c 83       	std	Y+4, r25	; 0x04
    27e4:	8b 83       	std	Y+3, r24	; 0x03
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    27e6:	8b 81       	ldd	r24, Y+3	; 0x03
    27e8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ea:	4f 96       	adiw	r24, 0x1f	; 31
    27ec:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <pvPortMalloc>
    27f0:	9e 83       	std	Y+6, r25	; 0x06
    27f2:	8d 83       	std	Y+5, r24	; 0x05

		if( pxNewQueue != NULL )
    27f4:	8d 81       	ldd	r24, Y+5	; 0x05
    27f6:	9e 81       	ldd	r25, Y+6	; 0x06
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	81 f0       	breq	.+32     	; 0x281c <xQueueGenericCreate+0x80>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    27fc:	8d 81       	ldd	r24, Y+5	; 0x05
    27fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2800:	4f 96       	adiw	r24, 0x1f	; 31
    2802:	9a 83       	std	Y+2, r25	; 0x02
    2804:	89 83       	std	Y+1, r24	; 0x01
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    2806:	29 81       	ldd	r18, Y+1	; 0x01
    2808:	3a 81       	ldd	r19, Y+2	; 0x02
    280a:	ed 81       	ldd	r30, Y+5	; 0x05
    280c:	fe 81       	ldd	r31, Y+6	; 0x06
    280e:	8f 81       	ldd	r24, Y+7	; 0x07
    2810:	68 85       	ldd	r22, Y+8	; 0x08
    2812:	a9 01       	movw	r20, r18
    2814:	29 85       	ldd	r18, Y+9	; 0x09
    2816:	8f 01       	movw	r16, r30
    2818:	0e 94 1b 14 	call	0x2836	; 0x2836 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
    281c:	8d 81       	ldd	r24, Y+5	; 0x05
    281e:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    2820:	29 96       	adiw	r28, 0x09	; 9
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	1f 91       	pop	r17
    2832:	0f 91       	pop	r16
    2834:	08 95       	ret

00002836 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    2836:	0f 93       	push	r16
    2838:	1f 93       	push	r17
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
    2842:	27 97       	sbiw	r28, 0x07	; 7
    2844:	0f b6       	in	r0, 0x3f	; 63
    2846:	f8 94       	cli
    2848:	de bf       	out	0x3e, r29	; 62
    284a:	0f be       	out	0x3f, r0	; 63
    284c:	cd bf       	out	0x3d, r28	; 61
    284e:	89 83       	std	Y+1, r24	; 0x01
    2850:	6a 83       	std	Y+2, r22	; 0x02
    2852:	5c 83       	std	Y+4, r21	; 0x04
    2854:	4b 83       	std	Y+3, r20	; 0x03
    2856:	2d 83       	std	Y+5, r18	; 0x05
    2858:	1f 83       	std	Y+7, r17	; 0x07
    285a:	0e 83       	std	Y+6, r16	; 0x06
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	88 23       	and	r24, r24
    2860:	39 f4       	brne	.+14     	; 0x2870 <prvInitialiseNewQueue+0x3a>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    2862:	8e 81       	ldd	r24, Y+6	; 0x06
    2864:	9f 81       	ldd	r25, Y+7	; 0x07
    2866:	ee 81       	ldd	r30, Y+6	; 0x06
    2868:	ff 81       	ldd	r31, Y+7	; 0x07
    286a:	91 83       	std	Z+1, r25	; 0x01
    286c:	80 83       	st	Z, r24
    286e:	06 c0       	rjmp	.+12     	; 0x287c <prvInitialiseNewQueue+0x46>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    2870:	8b 81       	ldd	r24, Y+3	; 0x03
    2872:	9c 81       	ldd	r25, Y+4	; 0x04
    2874:	ee 81       	ldd	r30, Y+6	; 0x06
    2876:	ff 81       	ldd	r31, Y+7	; 0x07
    2878:	91 83       	std	Z+1, r25	; 0x01
    287a:	80 83       	st	Z, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    287c:	ee 81       	ldd	r30, Y+6	; 0x06
    287e:	ff 81       	ldd	r31, Y+7	; 0x07
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	83 8f       	std	Z+27, r24	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
    2884:	ee 81       	ldd	r30, Y+6	; 0x06
    2886:	ff 81       	ldd	r31, Y+7	; 0x07
    2888:	8a 81       	ldd	r24, Y+2	; 0x02
    288a:	84 8f       	std	Z+28, r24	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    288c:	8e 81       	ldd	r24, Y+6	; 0x06
    288e:	9f 81       	ldd	r25, Y+7	; 0x07
    2890:	61 e0       	ldi	r22, 0x01	; 1
    2892:	0e 94 48 13 	call	0x2690	; 0x2690 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    2896:	27 96       	adiw	r28, 0x07	; 7
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	de bf       	out	0x3e, r29	; 62
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	cd bf       	out	0x3d, r28	; 61
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	1f 91       	pop	r17
    28a8:	0f 91       	pop	r16
    28aa:	08 95       	ret

000028ac <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    28ac:	df 93       	push	r29
    28ae:	cf 93       	push	r28
    28b0:	00 d0       	rcall	.+0      	; 0x28b2 <prvInitialiseMutex+0x6>
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
    28b6:	9a 83       	std	Y+2, r25	; 0x02
    28b8:	89 83       	std	Y+1, r24	; 0x01
		if( pxNewQueue != NULL )
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	9a 81       	ldd	r25, Y+2	; 0x02
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	a1 f0       	breq	.+40     	; 0x28ea <prvInitialiseMutex+0x3e>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    28c2:	e9 81       	ldd	r30, Y+1	; 0x01
    28c4:	fa 81       	ldd	r31, Y+2	; 0x02
    28c6:	13 82       	std	Z+3, r1	; 0x03
    28c8:	12 82       	std	Z+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    28ca:	e9 81       	ldd	r30, Y+1	; 0x01
    28cc:	fa 81       	ldd	r31, Y+2	; 0x02
    28ce:	11 82       	std	Z+1, r1	; 0x01
    28d0:	10 82       	st	Z, r1

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    28d2:	e9 81       	ldd	r30, Y+1	; 0x01
    28d4:	fa 81       	ldd	r31, Y+2	; 0x02
    28d6:	16 82       	std	Z+6, r1	; 0x06

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	9a 81       	ldd	r25, Y+2	; 0x02
    28dc:	60 e0       	ldi	r22, 0x00	; 0
    28de:	70 e0       	ldi	r23, 0x00	; 0
    28e0:	40 e0       	ldi	r20, 0x00	; 0
    28e2:	50 e0       	ldi	r21, 0x00	; 0
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	0e 94 9a 14 	call	0x2934	; 0x2934 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    28ea:	0f 90       	pop	r0
    28ec:	0f 90       	pop	r0
    28ee:	cf 91       	pop	r28
    28f0:	df 91       	pop	r29
    28f2:	08 95       	ret

000028f4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    28f4:	df 93       	push	r29
    28f6:	cf 93       	push	r28
    28f8:	00 d0       	rcall	.+0      	; 0x28fa <xQueueCreateMutex+0x6>
    28fa:	00 d0       	rcall	.+0      	; 0x28fc <xQueueCreateMutex+0x8>
    28fc:	0f 92       	push	r0
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
    2902:	8d 83       	std	Y+5, r24	; 0x05
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	8a 83       	std	Y+2, r24	; 0x02
    2908:	19 82       	std	Y+1, r1	; 0x01

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    290a:	8a 81       	ldd	r24, Y+2	; 0x02
    290c:	69 81       	ldd	r22, Y+1	; 0x01
    290e:	4d 81       	ldd	r20, Y+5	; 0x05
    2910:	0e 94 ce 13 	call	0x279c	; 0x279c <xQueueGenericCreate>
    2914:	9c 83       	std	Y+4, r25	; 0x04
    2916:	8b 83       	std	Y+3, r24	; 0x03
		prvInitialiseMutex( pxNewQueue );
    2918:	8b 81       	ldd	r24, Y+3	; 0x03
    291a:	9c 81       	ldd	r25, Y+4	; 0x04
    291c:	0e 94 56 14 	call	0x28ac	; 0x28ac <prvInitialiseMutex>

		return pxNewQueue;
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	9c 81       	ldd	r25, Y+4	; 0x04
	}
    2924:	0f 90       	pop	r0
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	2f 97       	sbiw	r28, 0x0f	; 15
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	99 87       	std	Y+9, r25	; 0x09
    294a:	88 87       	std	Y+8, r24	; 0x08
    294c:	7b 87       	std	Y+11, r23	; 0x0b
    294e:	6a 87       	std	Y+10, r22	; 0x0a
    2950:	5d 87       	std	Y+13, r21	; 0x0d
    2952:	4c 87       	std	Y+12, r20	; 0x0c
    2954:	2e 87       	std	Y+14, r18	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    2956:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2958:	88 85       	ldd	r24, Y+8	; 0x08
    295a:	99 85       	ldd	r25, Y+9	; 0x09
    295c:	9a 83       	std	Y+2, r25	; 0x02
    295e:	89 83       	std	Y+1, r24	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2966:	e9 81       	ldd	r30, Y+1	; 0x01
    2968:	fa 81       	ldd	r31, Y+2	; 0x02
    296a:	92 8d       	ldd	r25, Z+26	; 0x1a
    296c:	e9 81       	ldd	r30, Y+1	; 0x01
    296e:	fa 81       	ldd	r31, Y+2	; 0x02
    2970:	83 8d       	ldd	r24, Z+27	; 0x1b
    2972:	98 17       	cp	r25, r24
    2974:	18 f0       	brcs	.+6      	; 0x297c <xQueueGenericSend+0x48>
    2976:	8e 85       	ldd	r24, Y+14	; 0x0e
    2978:	82 30       	cpi	r24, 0x02	; 2
    297a:	11 f5       	brne	.+68     	; 0x29c0 <xQueueGenericSend+0x8c>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	9a 81       	ldd	r25, Y+2	; 0x02
    2980:	2a 85       	ldd	r18, Y+10	; 0x0a
    2982:	3b 85       	ldd	r19, Y+11	; 0x0b
    2984:	b9 01       	movw	r22, r18
    2986:	4e 85       	ldd	r20, Y+14	; 0x0e
    2988:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <prvCopyDataToQueue>
    298c:	8b 83       	std	Y+3, r24	; 0x03
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    298e:	e9 81       	ldd	r30, Y+1	; 0x01
    2990:	fa 81       	ldd	r31, Y+2	; 0x02
    2992:	81 89       	ldd	r24, Z+17	; 0x11
    2994:	88 23       	and	r24, r24
    2996:	51 f0       	breq	.+20     	; 0x29ac <xQueueGenericSend+0x78>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	9a 81       	ldd	r25, Y+2	; 0x02
    299c:	41 96       	adiw	r24, 0x11	; 17
    299e:	0e 94 60 22 	call	0x44c0	; 0x44c0 <xTaskRemoveFromEventList>
    29a2:	88 23       	and	r24, r24
    29a4:	41 f0       	breq	.+16     	; 0x29b6 <xQueueGenericSend+0x82>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    29a6:	0e 94 33 12 	call	0x2466	; 0x2466 <vPortYield>
    29aa:	05 c0       	rjmp	.+10     	; 0x29b6 <xQueueGenericSend+0x82>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	88 23       	and	r24, r24
    29b0:	11 f0       	breq	.+4      	; 0x29b6 <xQueueGenericSend+0x82>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    29b2:	0e 94 33 12 	call	0x2466	; 0x2466 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    29b6:	0f 90       	pop	r0
    29b8:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	8f 87       	std	Y+15, r24	; 0x0f
    29be:	5c c0       	rjmp	.+184    	; 0x2a78 <xQueueGenericSend+0x144>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    29c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    29c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    29c4:	00 97       	sbiw	r24, 0x00	; 0
    29c6:	21 f4       	brne	.+8      	; 0x29d0 <xQueueGenericSend+0x9c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    29c8:	0f 90       	pop	r0
    29ca:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    29cc:	1f 86       	std	Y+15, r1	; 0x0f
    29ce:	54 c0       	rjmp	.+168    	; 0x2a78 <xQueueGenericSend+0x144>
				}
				else if( xEntryTimeSet == pdFALSE )
    29d0:	8c 81       	ldd	r24, Y+4	; 0x04
    29d2:	88 23       	and	r24, r24
    29d4:	31 f4       	brne	.+12     	; 0x29e2 <xQueueGenericSend+0xae>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    29d6:	ce 01       	movw	r24, r28
    29d8:	05 96       	adiw	r24, 0x05	; 5
    29da:	0e 94 30 23 	call	0x4660	; 0x4660 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    29e2:	0f 90       	pop	r0
    29e4:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    29e6:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	f8 94       	cli
    29ee:	0f 92       	push	r0
    29f0:	e9 81       	ldd	r30, Y+1	; 0x01
    29f2:	fa 81       	ldd	r31, Y+2	; 0x02
    29f4:	85 8d       	ldd	r24, Z+29	; 0x1d
    29f6:	8f 3f       	cpi	r24, 0xFF	; 255
    29f8:	19 f4       	brne	.+6      	; 0x2a00 <xQueueGenericSend+0xcc>
    29fa:	e9 81       	ldd	r30, Y+1	; 0x01
    29fc:	fa 81       	ldd	r31, Y+2	; 0x02
    29fe:	15 8e       	std	Z+29, r1	; 0x1d
    2a00:	e9 81       	ldd	r30, Y+1	; 0x01
    2a02:	fa 81       	ldd	r31, Y+2	; 0x02
    2a04:	86 8d       	ldd	r24, Z+30	; 0x1e
    2a06:	8f 3f       	cpi	r24, 0xFF	; 255
    2a08:	19 f4       	brne	.+6      	; 0x2a10 <xQueueGenericSend+0xdc>
    2a0a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a0c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a0e:	16 8e       	std	Z+30, r1	; 0x1e
    2a10:	0f 90       	pop	r0
    2a12:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2a14:	ce 01       	movw	r24, r28
    2a16:	05 96       	adiw	r24, 0x05	; 5
    2a18:	9e 01       	movw	r18, r28
    2a1a:	24 5f       	subi	r18, 0xF4	; 244
    2a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1e:	b9 01       	movw	r22, r18
    2a20:	0e 94 49 23 	call	0x4692	; 0x4692 <xTaskCheckForTimeOut>
    2a24:	88 23       	and	r24, r24
    2a26:	09 f5       	brne	.+66     	; 0x2a6a <xQueueGenericSend+0x136>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2c:	0e 94 59 19 	call	0x32b2	; 0x32b2 <prvIsQueueFull>
    2a30:	88 23       	and	r24, r24
    2a32:	a1 f0       	breq	.+40     	; 0x2a5c <xQueueGenericSend+0x128>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	9a 81       	ldd	r25, Y+2	; 0x02
    2a38:	08 96       	adiw	r24, 0x08	; 8
    2a3a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a3c:	3d 85       	ldd	r19, Y+13	; 0x0d
    2a3e:	b9 01       	movw	r22, r18
    2a40:	0e 94 0e 22 	call	0x441c	; 0x441c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	9a 81       	ldd	r25, Y+2	; 0x02
    2a48:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2a4c:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <xTaskResumeAll>
    2a50:	88 23       	and	r24, r24
    2a52:	09 f0       	breq	.+2      	; 0x2a56 <xQueueGenericSend+0x122>
    2a54:	85 cf       	rjmp	.-246    	; 0x2960 <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
    2a56:	0e 94 33 12 	call	0x2466	; 0x2466 <vPortYield>
    2a5a:	82 cf       	rjmp	.-252    	; 0x2960 <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2a5c:	89 81       	ldd	r24, Y+1	; 0x01
    2a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a60:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2a64:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <xTaskResumeAll>
    2a68:	7b cf       	rjmp	.-266    	; 0x2960 <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
    2a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6e:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2a72:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2a76:	1f 86       	std	Y+15, r1	; 0x0f
    2a78:	8f 85       	ldd	r24, Y+15	; 0x0f
		}
	}
}
    2a7a:	2f 96       	adiw	r28, 0x0f	; 15
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	f8 94       	cli
    2a80:	de bf       	out	0x3e, r29	; 62
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	cd bf       	out	0x3d, r28	; 61
    2a86:	cf 91       	pop	r28
    2a88:	df 91       	pop	r29
    2a8a:	08 95       	ret

00002a8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    2a8c:	df 93       	push	r29
    2a8e:	cf 93       	push	r28
    2a90:	cd b7       	in	r28, 0x3d	; 61
    2a92:	de b7       	in	r29, 0x3e	; 62
    2a94:	2c 97       	sbiw	r28, 0x0c	; 12
    2a96:	0f b6       	in	r0, 0x3f	; 63
    2a98:	f8 94       	cli
    2a9a:	de bf       	out	0x3e, r29	; 62
    2a9c:	0f be       	out	0x3f, r0	; 63
    2a9e:	cd bf       	out	0x3d, r28	; 61
    2aa0:	9f 83       	std	Y+7, r25	; 0x07
    2aa2:	8e 83       	std	Y+6, r24	; 0x06
    2aa4:	79 87       	std	Y+9, r23	; 0x09
    2aa6:	68 87       	std	Y+8, r22	; 0x08
    2aa8:	5b 87       	std	Y+11, r21	; 0x0b
    2aaa:	4a 87       	std	Y+10, r20	; 0x0a
    2aac:	2c 87       	std	Y+12, r18	; 0x0c
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2aae:	8e 81       	ldd	r24, Y+6	; 0x06
    2ab0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ab2:	9b 83       	std	Y+3, r25	; 0x03
    2ab4:	8a 83       	std	Y+2, r24	; 0x02
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2ab6:	1c 82       	std	Y+4, r1	; 0x04
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2ab8:	ea 81       	ldd	r30, Y+2	; 0x02
    2aba:	fb 81       	ldd	r31, Y+3	; 0x03
    2abc:	92 8d       	ldd	r25, Z+26	; 0x1a
    2abe:	ea 81       	ldd	r30, Y+2	; 0x02
    2ac0:	fb 81       	ldd	r31, Y+3	; 0x03
    2ac2:	83 8d       	ldd	r24, Z+27	; 0x1b
    2ac4:	98 17       	cp	r25, r24
    2ac6:	18 f0       	brcs	.+6      	; 0x2ace <xQueueGenericSendFromISR+0x42>
    2ac8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2aca:	82 30       	cpi	r24, 0x02	; 2
    2acc:	61 f5       	brne	.+88     	; 0x2b26 <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    2ace:	ea 81       	ldd	r30, Y+2	; 0x02
    2ad0:	fb 81       	ldd	r31, Y+3	; 0x03
    2ad2:	86 8d       	ldd	r24, Z+30	; 0x1e
    2ad4:	89 83       	std	Y+1, r24	; 0x01
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    2ada:	28 85       	ldd	r18, Y+8	; 0x08
    2adc:	39 85       	ldd	r19, Y+9	; 0x09
    2ade:	b9 01       	movw	r22, r18
    2ae0:	4c 85       	ldd	r20, Y+12	; 0x0c
    2ae2:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	8f 3f       	cpi	r24, 0xFF	; 255
    2aea:	a9 f4       	brne	.+42     	; 0x2b16 <xQueueGenericSendFromISR+0x8a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2aec:	ea 81       	ldd	r30, Y+2	; 0x02
    2aee:	fb 81       	ldd	r31, Y+3	; 0x03
    2af0:	81 89       	ldd	r24, Z+17	; 0x11
    2af2:	88 23       	and	r24, r24
    2af4:	a9 f0       	breq	.+42     	; 0x2b20 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2af6:	8a 81       	ldd	r24, Y+2	; 0x02
    2af8:	9b 81       	ldd	r25, Y+3	; 0x03
    2afa:	41 96       	adiw	r24, 0x11	; 17
    2afc:	0e 94 60 22 	call	0x44c0	; 0x44c0 <xTaskRemoveFromEventList>
    2b00:	88 23       	and	r24, r24
    2b02:	71 f0       	breq	.+28     	; 0x2b20 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2b04:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b06:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b08:	00 97       	sbiw	r24, 0x00	; 0
    2b0a:	51 f0       	breq	.+20     	; 0x2b20 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2b0c:	ea 85       	ldd	r30, Y+10	; 0x0a
    2b0e:	fb 85       	ldd	r31, Y+11	; 0x0b
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	80 83       	st	Z, r24
    2b14:	05 c0       	rjmp	.+10     	; 0x2b20 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
    2b18:	8f 5f       	subi	r24, 0xFF	; 255
    2b1a:	ea 81       	ldd	r30, Y+2	; 0x02
    2b1c:	fb 81       	ldd	r31, Y+3	; 0x03
    2b1e:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	8d 83       	std	Y+5, r24	; 0x05
    2b24:	01 c0       	rjmp	.+2      	; 0x2b28 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2b26:	1d 82       	std	Y+5, r1	; 0x05
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2b28:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2b2a:	2c 96       	adiw	r28, 0x0c	; 12
    2b2c:	0f b6       	in	r0, 0x3f	; 63
    2b2e:	f8 94       	cli
    2b30:	de bf       	out	0x3e, r29	; 62
    2b32:	0f be       	out	0x3f, r0	; 63
    2b34:	cd bf       	out	0x3d, r28	; 61
    2b36:	cf 91       	pop	r28
    2b38:	df 91       	pop	r29
    2b3a:	08 95       	ret

00002b3c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    2b44:	2a 97       	sbiw	r28, 0x0a	; 10
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	f8 94       	cli
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	cd bf       	out	0x3d, r28	; 61
    2b50:	98 87       	std	Y+8, r25	; 0x08
    2b52:	8f 83       	std	Y+7, r24	; 0x07
    2b54:	7a 87       	std	Y+10, r23	; 0x0a
    2b56:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2b58:	8f 81       	ldd	r24, Y+7	; 0x07
    2b5a:	98 85       	ldd	r25, Y+8	; 0x08
    2b5c:	9c 83       	std	Y+4, r25	; 0x04
    2b5e:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2b60:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2b62:	eb 81       	ldd	r30, Y+3	; 0x03
    2b64:	fc 81       	ldd	r31, Y+4	; 0x04
    2b66:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b68:	8a 83       	std	Y+2, r24	; 0x02

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    2b6a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b6c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b6e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2b70:	8a 81       	ldd	r24, Y+2	; 0x02
    2b72:	89 17       	cp	r24, r25
    2b74:	48 f5       	brcc	.+82     	; 0x2bc8 <xQueueGiveFromISR+0x8c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    2b76:	eb 81       	ldd	r30, Y+3	; 0x03
    2b78:	fc 81       	ldd	r31, Y+4	; 0x04
    2b7a:	86 8d       	ldd	r24, Z+30	; 0x1e
    2b7c:	89 83       	std	Y+1, r24	; 0x01
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    2b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b80:	8f 5f       	subi	r24, 0xFF	; 255
    2b82:	eb 81       	ldd	r30, Y+3	; 0x03
    2b84:	fc 81       	ldd	r31, Y+4	; 0x04
    2b86:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	8f 3f       	cpi	r24, 0xFF	; 255
    2b8c:	a9 f4       	brne	.+42     	; 0x2bb8 <xQueueGiveFromISR+0x7c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2b8e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b90:	fc 81       	ldd	r31, Y+4	; 0x04
    2b92:	81 89       	ldd	r24, Z+17	; 0x11
    2b94:	88 23       	and	r24, r24
    2b96:	a9 f0       	breq	.+42     	; 0x2bc2 <xQueueGiveFromISR+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2b98:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9c:	41 96       	adiw	r24, 0x11	; 17
    2b9e:	0e 94 60 22 	call	0x44c0	; 0x44c0 <xTaskRemoveFromEventList>
    2ba2:	88 23       	and	r24, r24
    2ba4:	71 f0       	breq	.+28     	; 0x2bc2 <xQueueGiveFromISR+0x86>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2ba6:	89 85       	ldd	r24, Y+9	; 0x09
    2ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2baa:	00 97       	sbiw	r24, 0x00	; 0
    2bac:	51 f0       	breq	.+20     	; 0x2bc2 <xQueueGiveFromISR+0x86>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2bae:	e9 85       	ldd	r30, Y+9	; 0x09
    2bb0:	fa 85       	ldd	r31, Y+10	; 0x0a
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	80 83       	st	Z, r24
    2bb6:	05 c0       	rjmp	.+10     	; 0x2bc2 <xQueueGiveFromISR+0x86>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	8f 5f       	subi	r24, 0xFF	; 255
    2bbc:	eb 81       	ldd	r30, Y+3	; 0x03
    2bbe:	fc 81       	ldd	r31, Y+4	; 0x04
    2bc0:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	8e 83       	std	Y+6, r24	; 0x06
    2bc6:	01 c0       	rjmp	.+2      	; 0x2bca <xQueueGiveFromISR+0x8e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2bc8:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2bca:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2bcc:	2a 96       	adiw	r28, 0x0a	; 10
    2bce:	0f b6       	in	r0, 0x3f	; 63
    2bd0:	f8 94       	cli
    2bd2:	de bf       	out	0x3e, r29	; 62
    2bd4:	0f be       	out	0x3f, r0	; 63
    2bd6:	cd bf       	out	0x3d, r28	; 61
    2bd8:	cf 91       	pop	r28
    2bda:	df 91       	pop	r29
    2bdc:	08 95       	ret

00002bde <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    2bde:	df 93       	push	r29
    2be0:	cf 93       	push	r28
    2be2:	cd b7       	in	r28, 0x3d	; 61
    2be4:	de b7       	in	r29, 0x3e	; 62
    2be6:	61 97       	sbiw	r28, 0x11	; 17
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	f8 94       	cli
    2bec:	de bf       	out	0x3e, r29	; 62
    2bee:	0f be       	out	0x3f, r0	; 63
    2bf0:	cd bf       	out	0x3d, r28	; 61
    2bf2:	9b 87       	std	Y+11, r25	; 0x0b
    2bf4:	8a 87       	std	Y+10, r24	; 0x0a
    2bf6:	7d 87       	std	Y+13, r23	; 0x0d
    2bf8:	6c 87       	std	Y+12, r22	; 0x0c
    2bfa:	5f 87       	std	Y+15, r21	; 0x0f
    2bfc:	4e 87       	std	Y+14, r20	; 0x0e
    2bfe:	28 8b       	std	Y+16, r18	; 0x10
BaseType_t xEntryTimeSet = pdFALSE;
    2c00:	1e 82       	std	Y+6, r1	; 0x06
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2c02:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c04:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c06:	9b 83       	std	Y+3, r25	; 0x03
    2c08:	8a 83       	std	Y+2, r24	; 0x02
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2c0a:	0f b6       	in	r0, 0x3f	; 63
    2c0c:	f8 94       	cli
    2c0e:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2c10:	ea 81       	ldd	r30, Y+2	; 0x02
    2c12:	fb 81       	ldd	r31, Y+3	; 0x03
    2c14:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c16:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	88 23       	and	r24, r24
    2c1c:	09 f4       	brne	.+2      	; 0x2c20 <xQueueGenericReceive+0x42>
    2c1e:	49 c0       	rjmp	.+146    	; 0x2cb2 <xQueueGenericReceive+0xd4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    2c20:	ea 81       	ldd	r30, Y+2	; 0x02
    2c22:	fb 81       	ldd	r31, Y+3	; 0x03
    2c24:	86 81       	ldd	r24, Z+6	; 0x06
    2c26:	97 81       	ldd	r25, Z+7	; 0x07
    2c28:	9d 83       	std	Y+5, r25	; 0x05
    2c2a:	8c 83       	std	Y+4, r24	; 0x04

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c30:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c32:	3d 85       	ldd	r19, Y+13	; 0x0d
    2c34:	b9 01       	movw	r22, r18
    2c36:	0e 94 8a 18 	call	0x3114	; 0x3114 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2c3a:	88 89       	ldd	r24, Y+16	; 0x10
    2c3c:	88 23       	and	r24, r24
    2c3e:	01 f5       	brne	.+64     	; 0x2c80 <xQueueGenericReceive+0xa2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	81 50       	subi	r24, 0x01	; 1
    2c44:	ea 81       	ldd	r30, Y+2	; 0x02
    2c46:	fb 81       	ldd	r31, Y+3	; 0x03
    2c48:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2c4a:	ea 81       	ldd	r30, Y+2	; 0x02
    2c4c:	fb 81       	ldd	r31, Y+3	; 0x03
    2c4e:	80 81       	ld	r24, Z
    2c50:	91 81       	ldd	r25, Z+1	; 0x01
    2c52:	00 97       	sbiw	r24, 0x00	; 0
    2c54:	31 f4       	brne	.+12     	; 0x2c62 <xQueueGenericReceive+0x84>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    2c56:	0e 94 c7 25 	call	0x4b8e	; 0x4b8e <pvTaskIncrementMutexHeldCount>
    2c5a:	ea 81       	ldd	r30, Y+2	; 0x02
    2c5c:	fb 81       	ldd	r31, Y+3	; 0x03
    2c5e:	93 83       	std	Z+3, r25	; 0x03
    2c60:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2c62:	ea 81       	ldd	r30, Y+2	; 0x02
    2c64:	fb 81       	ldd	r31, Y+3	; 0x03
    2c66:	80 85       	ldd	r24, Z+8	; 0x08
    2c68:	88 23       	and	r24, r24
    2c6a:	f1 f0       	breq	.+60     	; 0x2ca8 <xQueueGenericReceive+0xca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c70:	08 96       	adiw	r24, 0x08	; 8
    2c72:	0e 94 60 22 	call	0x44c0	; 0x44c0 <xTaskRemoveFromEventList>
    2c76:	88 23       	and	r24, r24
    2c78:	b9 f0       	breq	.+46     	; 0x2ca8 <xQueueGenericReceive+0xca>
						{
							queueYIELD_IF_USING_PREEMPTION();
    2c7a:	0e 94 33 12 	call	0x2466	; 0x2466 <vPortYield>
    2c7e:	14 c0       	rjmp	.+40     	; 0x2ca8 <xQueueGenericReceive+0xca>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    2c80:	ea 81       	ldd	r30, Y+2	; 0x02
    2c82:	fb 81       	ldd	r31, Y+3	; 0x03
    2c84:	8c 81       	ldd	r24, Y+4	; 0x04
    2c86:	9d 81       	ldd	r25, Y+5	; 0x05
    2c88:	97 83       	std	Z+7, r25	; 0x07
    2c8a:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2c8c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c8e:	fb 81       	ldd	r31, Y+3	; 0x03
    2c90:	81 89       	ldd	r24, Z+17	; 0x11
    2c92:	88 23       	and	r24, r24
    2c94:	49 f0       	breq	.+18     	; 0x2ca8 <xQueueGenericReceive+0xca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2c96:	8a 81       	ldd	r24, Y+2	; 0x02
    2c98:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9a:	41 96       	adiw	r24, 0x11	; 17
    2c9c:	0e 94 60 22 	call	0x44c0	; 0x44c0 <xTaskRemoveFromEventList>
    2ca0:	88 23       	and	r24, r24
    2ca2:	11 f0       	breq	.+4      	; 0x2ca8 <xQueueGenericReceive+0xca>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    2ca4:	0e 94 33 12 	call	0x2466	; 0x2466 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    2ca8:	0f 90       	pop	r0
    2caa:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	89 8b       	std	Y+17, r24	; 0x11
    2cb0:	74 c0       	rjmp	.+232    	; 0x2d9a <xQueueGenericReceive+0x1bc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    2cb2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cb4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cb6:	00 97       	sbiw	r24, 0x00	; 0
    2cb8:	21 f4       	brne	.+8      	; 0x2cc2 <xQueueGenericReceive+0xe4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2cba:	0f 90       	pop	r0
    2cbc:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2cbe:	19 8a       	std	Y+17, r1	; 0x11
    2cc0:	6c c0       	rjmp	.+216    	; 0x2d9a <xQueueGenericReceive+0x1bc>
				}
				else if( xEntryTimeSet == pdFALSE )
    2cc2:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc4:	88 23       	and	r24, r24
    2cc6:	31 f4       	brne	.+12     	; 0x2cd4 <xQueueGenericReceive+0xf6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2cc8:	ce 01       	movw	r24, r28
    2cca:	07 96       	adiw	r24, 0x07	; 7
    2ccc:	0e 94 30 23 	call	0x4660	; 0x4660 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	8e 83       	std	Y+6, r24	; 0x06
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    2cd4:	0f 90       	pop	r0
    2cd6:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2cd8:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2cdc:	0f b6       	in	r0, 0x3f	; 63
    2cde:	f8 94       	cli
    2ce0:	0f 92       	push	r0
    2ce2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ce4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ce6:	85 8d       	ldd	r24, Z+29	; 0x1d
    2ce8:	8f 3f       	cpi	r24, 0xFF	; 255
    2cea:	19 f4       	brne	.+6      	; 0x2cf2 <xQueueGenericReceive+0x114>
    2cec:	ea 81       	ldd	r30, Y+2	; 0x02
    2cee:	fb 81       	ldd	r31, Y+3	; 0x03
    2cf0:	15 8e       	std	Z+29, r1	; 0x1d
    2cf2:	ea 81       	ldd	r30, Y+2	; 0x02
    2cf4:	fb 81       	ldd	r31, Y+3	; 0x03
    2cf6:	86 8d       	ldd	r24, Z+30	; 0x1e
    2cf8:	8f 3f       	cpi	r24, 0xFF	; 255
    2cfa:	19 f4       	brne	.+6      	; 0x2d02 <xQueueGenericReceive+0x124>
    2cfc:	ea 81       	ldd	r30, Y+2	; 0x02
    2cfe:	fb 81       	ldd	r31, Y+3	; 0x03
    2d00:	16 8e       	std	Z+30, r1	; 0x1e
    2d02:	0f 90       	pop	r0
    2d04:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2d06:	ce 01       	movw	r24, r28
    2d08:	07 96       	adiw	r24, 0x07	; 7
    2d0a:	9e 01       	movw	r18, r28
    2d0c:	22 5f       	subi	r18, 0xF2	; 242
    2d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d10:	b9 01       	movw	r22, r18
    2d12:	0e 94 49 23 	call	0x4692	; 0x4692 <xTaskCheckForTimeOut>
    2d16:	88 23       	and	r24, r24
    2d18:	91 f5       	brne	.+100    	; 0x2d7e <xQueueGenericReceive+0x1a0>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d1e:	0e 94 24 19 	call	0x3248	; 0x3248 <prvIsQueueEmpty>
    2d22:	88 23       	and	r24, r24
    2d24:	29 f1       	breq	.+74     	; 0x2d70 <xQueueGenericReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2d26:	ea 81       	ldd	r30, Y+2	; 0x02
    2d28:	fb 81       	ldd	r31, Y+3	; 0x03
    2d2a:	80 81       	ld	r24, Z
    2d2c:	91 81       	ldd	r25, Z+1	; 0x01
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	59 f4       	brne	.+22     	; 0x2d48 <xQueueGenericReceive+0x16a>
					{
						taskENTER_CRITICAL();
    2d32:	0f b6       	in	r0, 0x3f	; 63
    2d34:	f8 94       	cli
    2d36:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2d38:	ea 81       	ldd	r30, Y+2	; 0x02
    2d3a:	fb 81       	ldd	r31, Y+3	; 0x03
    2d3c:	82 81       	ldd	r24, Z+2	; 0x02
    2d3e:	93 81       	ldd	r25, Z+3	; 0x03
    2d40:	0e 94 a3 24 	call	0x4946	; 0x4946 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    2d44:	0f 90       	pop	r0
    2d46:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2d48:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4c:	41 96       	adiw	r24, 0x11	; 17
    2d4e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2d50:	3f 85       	ldd	r19, Y+15	; 0x0f
    2d52:	b9 01       	movw	r22, r18
    2d54:	0e 94 0e 22 	call	0x441c	; 0x441c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2d58:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d5c:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2d60:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <xTaskResumeAll>
    2d64:	88 23       	and	r24, r24
    2d66:	09 f0       	breq	.+2      	; 0x2d6a <xQueueGenericReceive+0x18c>
    2d68:	50 cf       	rjmp	.-352    	; 0x2c0a <xQueueGenericReceive+0x2c>
				{
					portYIELD_WITHIN_API();
    2d6a:	0e 94 33 12 	call	0x2466	; 0x2466 <vPortYield>
    2d6e:	4d cf       	rjmp	.-358    	; 0x2c0a <xQueueGenericReceive+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2d70:	8a 81       	ldd	r24, Y+2	; 0x02
    2d72:	9b 81       	ldd	r25, Y+3	; 0x03
    2d74:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2d78:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <xTaskResumeAll>
    2d7c:	46 cf       	rjmp	.-372    	; 0x2c0a <xQueueGenericReceive+0x2c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d80:	9b 81       	ldd	r25, Y+3	; 0x03
    2d82:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2d86:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8e:	0e 94 24 19 	call	0x3248	; 0x3248 <prvIsQueueEmpty>
    2d92:	88 23       	and	r24, r24
    2d94:	09 f4       	brne	.+2      	; 0x2d98 <xQueueGenericReceive+0x1ba>
    2d96:	39 cf       	rjmp	.-398    	; 0x2c0a <xQueueGenericReceive+0x2c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    2d98:	19 8a       	std	Y+17, r1	; 0x11
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    2d9a:	89 89       	ldd	r24, Y+17	; 0x11
}
    2d9c:	61 96       	adiw	r28, 0x11	; 17
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	f8 94       	cli
    2da2:	de bf       	out	0x3e, r29	; 62
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	cd bf       	out	0x3d, r28	; 61
    2da8:	cf 91       	pop	r28
    2daa:	df 91       	pop	r29
    2dac:	08 95       	ret

00002dae <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    2dae:	df 93       	push	r29
    2db0:	cf 93       	push	r28
    2db2:	cd b7       	in	r28, 0x3d	; 61
    2db4:	de b7       	in	r29, 0x3e	; 62
    2db6:	2c 97       	sbiw	r28, 0x0c	; 12
    2db8:	0f b6       	in	r0, 0x3f	; 63
    2dba:	f8 94       	cli
    2dbc:	de bf       	out	0x3e, r29	; 62
    2dbe:	0f be       	out	0x3f, r0	; 63
    2dc0:	cd bf       	out	0x3d, r28	; 61
    2dc2:	98 87       	std	Y+8, r25	; 0x08
    2dc4:	8f 83       	std	Y+7, r24	; 0x07
    2dc6:	7a 87       	std	Y+10, r23	; 0x0a
    2dc8:	69 87       	std	Y+9, r22	; 0x09
    2dca:	5c 87       	std	Y+12, r21	; 0x0c
    2dcc:	4b 87       	std	Y+11, r20	; 0x0b
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2dce:	8f 81       	ldd	r24, Y+7	; 0x07
    2dd0:	98 85       	ldd	r25, Y+8	; 0x08
    2dd2:	9c 83       	std	Y+4, r25	; 0x04
    2dd4:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2dd6:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2dd8:	eb 81       	ldd	r30, Y+3	; 0x03
    2dda:	fc 81       	ldd	r31, Y+4	; 0x04
    2ddc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2dde:	8a 83       	std	Y+2, r24	; 0x02

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    2de0:	8a 81       	ldd	r24, Y+2	; 0x02
    2de2:	88 23       	and	r24, r24
    2de4:	81 f1       	breq	.+96     	; 0x2e46 <xQueueReceiveFromISR+0x98>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    2de6:	eb 81       	ldd	r30, Y+3	; 0x03
    2de8:	fc 81       	ldd	r31, Y+4	; 0x04
    2dea:	85 8d       	ldd	r24, Z+29	; 0x1d
    2dec:	89 83       	std	Y+1, r24	; 0x01

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2dee:	8b 81       	ldd	r24, Y+3	; 0x03
    2df0:	9c 81       	ldd	r25, Y+4	; 0x04
    2df2:	29 85       	ldd	r18, Y+9	; 0x09
    2df4:	3a 85       	ldd	r19, Y+10	; 0x0a
    2df6:	b9 01       	movw	r22, r18
    2df8:	0e 94 8a 18 	call	0x3114	; 0x3114 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    2dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfe:	81 50       	subi	r24, 0x01	; 1
    2e00:	eb 81       	ldd	r30, Y+3	; 0x03
    2e02:	fc 81       	ldd	r31, Y+4	; 0x04
    2e04:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	8f 3f       	cpi	r24, 0xFF	; 255
    2e0a:	a9 f4       	brne	.+42     	; 0x2e36 <xQueueReceiveFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2e0c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e0e:	fc 81       	ldd	r31, Y+4	; 0x04
    2e10:	80 85       	ldd	r24, Z+8	; 0x08
    2e12:	88 23       	and	r24, r24
    2e14:	a9 f0       	breq	.+42     	; 0x2e40 <xQueueReceiveFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2e16:	8b 81       	ldd	r24, Y+3	; 0x03
    2e18:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1a:	08 96       	adiw	r24, 0x08	; 8
    2e1c:	0e 94 60 22 	call	0x44c0	; 0x44c0 <xTaskRemoveFromEventList>
    2e20:	88 23       	and	r24, r24
    2e22:	71 f0       	breq	.+28     	; 0x2e40 <xQueueReceiveFromISR+0x92>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    2e24:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e26:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e28:	00 97       	sbiw	r24, 0x00	; 0
    2e2a:	51 f0       	breq	.+20     	; 0x2e40 <xQueueReceiveFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    2e2c:	eb 85       	ldd	r30, Y+11	; 0x0b
    2e2e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	80 83       	st	Z, r24
    2e34:	05 c0       	rjmp	.+10     	; 0x2e40 <xQueueReceiveFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	8f 5f       	subi	r24, 0xFF	; 255
    2e3a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e3c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e3e:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	8e 83       	std	Y+6, r24	; 0x06
    2e44:	01 c0       	rjmp	.+2      	; 0x2e48 <xQueueReceiveFromISR+0x9a>
		}
		else
		{
			xReturn = pdFAIL;
    2e46:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2e48:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2e4a:	2c 96       	adiw	r28, 0x0c	; 12
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	cf 91       	pop	r28
    2e58:	df 91       	pop	r29
    2e5a:	08 95       	ret

00002e5c <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    2e5c:	df 93       	push	r29
    2e5e:	cf 93       	push	r28
    2e60:	cd b7       	in	r28, 0x3d	; 61
    2e62:	de b7       	in	r29, 0x3e	; 62
    2e64:	2a 97       	sbiw	r28, 0x0a	; 10
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	f8 94       	cli
    2e6a:	de bf       	out	0x3e, r29	; 62
    2e6c:	0f be       	out	0x3f, r0	; 63
    2e6e:	cd bf       	out	0x3d, r28	; 61
    2e70:	98 87       	std	Y+8, r25	; 0x08
    2e72:	8f 83       	std	Y+7, r24	; 0x07
    2e74:	7a 87       	std	Y+10, r23	; 0x0a
    2e76:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2e78:	8f 81       	ldd	r24, Y+7	; 0x07
    2e7a:	98 85       	ldd	r25, Y+8	; 0x08
    2e7c:	9a 83       	std	Y+2, r25	; 0x02
    2e7e:	89 83       	std	Y+1, r24	; 0x01
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2e80:	1d 82       	std	Y+5, r1	; 0x05
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2e82:	e9 81       	ldd	r30, Y+1	; 0x01
    2e84:	fa 81       	ldd	r31, Y+2	; 0x02
    2e86:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e88:	88 23       	and	r24, r24
    2e8a:	b1 f0       	breq	.+44     	; 0x2eb8 <xQueuePeekFromISR+0x5c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    2e8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e90:	86 81       	ldd	r24, Z+6	; 0x06
    2e92:	97 81       	ldd	r25, Z+7	; 0x07
    2e94:	9c 83       	std	Y+4, r25	; 0x04
    2e96:	8b 83       	std	Y+3, r24	; 0x03
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9c:	29 85       	ldd	r18, Y+9	; 0x09
    2e9e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ea0:	b9 01       	movw	r22, r18
    2ea2:	0e 94 8a 18 	call	0x3114	; 0x3114 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    2ea6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ea8:	fa 81       	ldd	r31, Y+2	; 0x02
    2eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2eac:	9c 81       	ldd	r25, Y+4	; 0x04
    2eae:	97 83       	std	Z+7, r25	; 0x07
    2eb0:	86 83       	std	Z+6, r24	; 0x06

			xReturn = pdPASS;
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	8e 83       	std	Y+6, r24	; 0x06
    2eb6:	01 c0       	rjmp	.+2      	; 0x2eba <xQueuePeekFromISR+0x5e>
		}
		else
		{
			xReturn = pdFAIL;
    2eb8:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2eba:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2ebc:	2a 96       	adiw	r28, 0x0a	; 10
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
    2ec8:	cf 91       	pop	r28
    2eca:	df 91       	pop	r29
    2ecc:	08 95       	ret

00002ece <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    2ece:	df 93       	push	r29
    2ed0:	cf 93       	push	r28
    2ed2:	00 d0       	rcall	.+0      	; 0x2ed4 <uxQueueMessagesWaiting+0x6>
    2ed4:	0f 92       	push	r0
    2ed6:	cd b7       	in	r28, 0x3d	; 61
    2ed8:	de b7       	in	r29, 0x3e	; 62
    2eda:	9b 83       	std	Y+3, r25	; 0x03
    2edc:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    2ede:	0f b6       	in	r0, 0x3f	; 63
    2ee0:	f8 94       	cli
    2ee2:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    2ee4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ee6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ee8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2eea:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    2eec:	0f 90       	pop	r0
    2eee:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2ef2:	0f 90       	pop	r0
    2ef4:	0f 90       	pop	r0
    2ef6:	0f 90       	pop	r0
    2ef8:	cf 91       	pop	r28
    2efa:	df 91       	pop	r29
    2efc:	08 95       	ret

00002efe <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    2efe:	df 93       	push	r29
    2f00:	cf 93       	push	r28
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <uxQueueSpacesAvailable+0x6>
    2f04:	00 d0       	rcall	.+0      	; 0x2f06 <uxQueueSpacesAvailable+0x8>
    2f06:	0f 92       	push	r0
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
    2f0c:	9d 83       	std	Y+5, r25	; 0x05
    2f0e:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    2f10:	8c 81       	ldd	r24, Y+4	; 0x04
    2f12:	9d 81       	ldd	r25, Y+5	; 0x05
    2f14:	9a 83       	std	Y+2, r25	; 0x02
    2f16:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    2f1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f20:	fa 81       	ldd	r31, Y+2	; 0x02
    2f22:	93 8d       	ldd	r25, Z+27	; 0x1b
    2f24:	e9 81       	ldd	r30, Y+1	; 0x01
    2f26:	fa 81       	ldd	r31, Y+2	; 0x02
    2f28:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f2a:	29 2f       	mov	r18, r25
    2f2c:	28 1b       	sub	r18, r24
    2f2e:	82 2f       	mov	r24, r18
    2f30:	8b 83       	std	Y+3, r24	; 0x03
	}
	taskEXIT_CRITICAL();
    2f32:	0f 90       	pop	r0
    2f34:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    2f36:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2f38:	0f 90       	pop	r0
    2f3a:	0f 90       	pop	r0
    2f3c:	0f 90       	pop	r0
    2f3e:	0f 90       	pop	r0
    2f40:	0f 90       	pop	r0
    2f42:	cf 91       	pop	r28
    2f44:	df 91       	pop	r29
    2f46:	08 95       	ret

00002f48 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    2f48:	df 93       	push	r29
    2f4a:	cf 93       	push	r28
    2f4c:	00 d0       	rcall	.+0      	; 0x2f4e <uxQueueMessagesWaitingFromISR+0x6>
    2f4e:	0f 92       	push	r0
    2f50:	cd b7       	in	r28, 0x3d	; 61
    2f52:	de b7       	in	r29, 0x3e	; 62
    2f54:	9b 83       	std	Y+3, r25	; 0x03
    2f56:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    2f58:	ea 81       	ldd	r30, Y+2	; 0x02
    2f5a:	fb 81       	ldd	r31, Y+3	; 0x03
    2f5c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f5e:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2f62:	0f 90       	pop	r0
    2f64:	0f 90       	pop	r0
    2f66:	0f 90       	pop	r0
    2f68:	cf 91       	pop	r28
    2f6a:	df 91       	pop	r29
    2f6c:	08 95       	ret

00002f6e <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    2f6e:	df 93       	push	r29
    2f70:	cf 93       	push	r28
    2f72:	00 d0       	rcall	.+0      	; 0x2f74 <vQueueDelete+0x6>
    2f74:	00 d0       	rcall	.+0      	; 0x2f76 <vQueueDelete+0x8>
    2f76:	cd b7       	in	r28, 0x3d	; 61
    2f78:	de b7       	in	r29, 0x3e	; 62
    2f7a:	9c 83       	std	Y+4, r25	; 0x04
    2f7c:	8b 83       	std	Y+3, r24	; 0x03
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f80:	9c 81       	ldd	r25, Y+4	; 0x04
    2f82:	9a 83       	std	Y+2, r25	; 0x02
    2f84:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
    2f86:	89 81       	ldd	r24, Y+1	; 0x01
    2f88:	9a 81       	ldd	r25, Y+2	; 0x02
    2f8a:	0e 94 19 1a 	call	0x3432	; 0x3432 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	9a 81       	ldd	r25, Y+2	; 0x02
    2f92:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    2f96:	0f 90       	pop	r0
    2f98:	0f 90       	pop	r0
    2f9a:	0f 90       	pop	r0
    2f9c:	0f 90       	pop	r0
    2f9e:	cf 91       	pop	r28
    2fa0:	df 91       	pop	r29
    2fa2:	08 95       	ret

00002fa4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    2fa4:	df 93       	push	r29
    2fa6:	cf 93       	push	r28
    2fa8:	cd b7       	in	r28, 0x3d	; 61
    2faa:	de b7       	in	r29, 0x3e	; 62
    2fac:	27 97       	sbiw	r28, 0x07	; 7
    2fae:	0f b6       	in	r0, 0x3f	; 63
    2fb0:	f8 94       	cli
    2fb2:	de bf       	out	0x3e, r29	; 62
    2fb4:	0f be       	out	0x3f, r0	; 63
    2fb6:	cd bf       	out	0x3d, r28	; 61
    2fb8:	9c 83       	std	Y+4, r25	; 0x04
    2fba:	8b 83       	std	Y+3, r24	; 0x03
    2fbc:	7e 83       	std	Y+6, r23	; 0x06
    2fbe:	6d 83       	std	Y+5, r22	; 0x05
    2fc0:	4f 83       	std	Y+7, r20	; 0x07
BaseType_t xReturn = pdFALSE;
    2fc2:	1a 82       	std	Y+2, r1	; 0x02
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2fc4:	eb 81       	ldd	r30, Y+3	; 0x03
    2fc6:	fc 81       	ldd	r31, Y+4	; 0x04
    2fc8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fca:	89 83       	std	Y+1, r24	; 0x01

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    2fcc:	eb 81       	ldd	r30, Y+3	; 0x03
    2fce:	fc 81       	ldd	r31, Y+4	; 0x04
    2fd0:	84 8d       	ldd	r24, Z+28	; 0x1c
    2fd2:	88 23       	and	r24, r24
    2fd4:	99 f4       	brne	.+38     	; 0x2ffc <prvCopyDataToQueue+0x58>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2fd6:	eb 81       	ldd	r30, Y+3	; 0x03
    2fd8:	fc 81       	ldd	r31, Y+4	; 0x04
    2fda:	80 81       	ld	r24, Z
    2fdc:	91 81       	ldd	r25, Z+1	; 0x01
    2fde:	00 97       	sbiw	r24, 0x00	; 0
    2fe0:	09 f0       	breq	.+2      	; 0x2fe4 <prvCopyDataToQueue+0x40>
    2fe2:	89 c0       	rjmp	.+274    	; 0x30f6 <prvCopyDataToQueue+0x152>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    2fe4:	eb 81       	ldd	r30, Y+3	; 0x03
    2fe6:	fc 81       	ldd	r31, Y+4	; 0x04
    2fe8:	82 81       	ldd	r24, Z+2	; 0x02
    2fea:	93 81       	ldd	r25, Z+3	; 0x03
    2fec:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <xTaskPriorityDisinherit>
    2ff0:	8a 83       	std	Y+2, r24	; 0x02
				pxQueue->pxMutexHolder = NULL;
    2ff2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ff4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ff6:	13 82       	std	Z+3, r1	; 0x03
    2ff8:	12 82       	std	Z+2, r1	; 0x02
    2ffa:	7d c0       	rjmp	.+250    	; 0x30f6 <prvCopyDataToQueue+0x152>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    2ffc:	8f 81       	ldd	r24, Y+7	; 0x07
    2ffe:	88 23       	and	r24, r24
    3000:	99 f5       	brne	.+102    	; 0x3068 <prvCopyDataToQueue+0xc4>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    3002:	eb 81       	ldd	r30, Y+3	; 0x03
    3004:	fc 81       	ldd	r31, Y+4	; 0x04
    3006:	64 81       	ldd	r22, Z+4	; 0x04
    3008:	75 81       	ldd	r23, Z+5	; 0x05
    300a:	eb 81       	ldd	r30, Y+3	; 0x03
    300c:	fc 81       	ldd	r31, Y+4	; 0x04
    300e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3010:	48 2f       	mov	r20, r24
    3012:	50 e0       	ldi	r21, 0x00	; 0
    3014:	2d 81       	ldd	r18, Y+5	; 0x05
    3016:	3e 81       	ldd	r19, Y+6	; 0x06
    3018:	cb 01       	movw	r24, r22
    301a:	b9 01       	movw	r22, r18
    301c:	0e 94 3c 2a 	call	0x5478	; 0x5478 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3020:	eb 81       	ldd	r30, Y+3	; 0x03
    3022:	fc 81       	ldd	r31, Y+4	; 0x04
    3024:	24 81       	ldd	r18, Z+4	; 0x04
    3026:	35 81       	ldd	r19, Z+5	; 0x05
    3028:	eb 81       	ldd	r30, Y+3	; 0x03
    302a:	fc 81       	ldd	r31, Y+4	; 0x04
    302c:	84 8d       	ldd	r24, Z+28	; 0x1c
    302e:	88 2f       	mov	r24, r24
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	82 0f       	add	r24, r18
    3034:	93 1f       	adc	r25, r19
    3036:	eb 81       	ldd	r30, Y+3	; 0x03
    3038:	fc 81       	ldd	r31, Y+4	; 0x04
    303a:	95 83       	std	Z+5, r25	; 0x05
    303c:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    303e:	eb 81       	ldd	r30, Y+3	; 0x03
    3040:	fc 81       	ldd	r31, Y+4	; 0x04
    3042:	24 81       	ldd	r18, Z+4	; 0x04
    3044:	35 81       	ldd	r19, Z+5	; 0x05
    3046:	eb 81       	ldd	r30, Y+3	; 0x03
    3048:	fc 81       	ldd	r31, Y+4	; 0x04
    304a:	82 81       	ldd	r24, Z+2	; 0x02
    304c:	93 81       	ldd	r25, Z+3	; 0x03
    304e:	28 17       	cp	r18, r24
    3050:	39 07       	cpc	r19, r25
    3052:	08 f4       	brcc	.+2      	; 0x3056 <prvCopyDataToQueue+0xb2>
    3054:	50 c0       	rjmp	.+160    	; 0x30f6 <prvCopyDataToQueue+0x152>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    3056:	eb 81       	ldd	r30, Y+3	; 0x03
    3058:	fc 81       	ldd	r31, Y+4	; 0x04
    305a:	80 81       	ld	r24, Z
    305c:	91 81       	ldd	r25, Z+1	; 0x01
    305e:	eb 81       	ldd	r30, Y+3	; 0x03
    3060:	fc 81       	ldd	r31, Y+4	; 0x04
    3062:	95 83       	std	Z+5, r25	; 0x05
    3064:	84 83       	std	Z+4, r24	; 0x04
    3066:	47 c0       	rjmp	.+142    	; 0x30f6 <prvCopyDataToQueue+0x152>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3068:	eb 81       	ldd	r30, Y+3	; 0x03
    306a:	fc 81       	ldd	r31, Y+4	; 0x04
    306c:	66 81       	ldd	r22, Z+6	; 0x06
    306e:	77 81       	ldd	r23, Z+7	; 0x07
    3070:	eb 81       	ldd	r30, Y+3	; 0x03
    3072:	fc 81       	ldd	r31, Y+4	; 0x04
    3074:	84 8d       	ldd	r24, Z+28	; 0x1c
    3076:	48 2f       	mov	r20, r24
    3078:	50 e0       	ldi	r21, 0x00	; 0
    307a:	2d 81       	ldd	r18, Y+5	; 0x05
    307c:	3e 81       	ldd	r19, Y+6	; 0x06
    307e:	cb 01       	movw	r24, r22
    3080:	b9 01       	movw	r22, r18
    3082:	0e 94 3c 2a 	call	0x5478	; 0x5478 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    3086:	eb 81       	ldd	r30, Y+3	; 0x03
    3088:	fc 81       	ldd	r31, Y+4	; 0x04
    308a:	26 81       	ldd	r18, Z+6	; 0x06
    308c:	37 81       	ldd	r19, Z+7	; 0x07
    308e:	eb 81       	ldd	r30, Y+3	; 0x03
    3090:	fc 81       	ldd	r31, Y+4	; 0x04
    3092:	84 8d       	ldd	r24, Z+28	; 0x1c
    3094:	88 2f       	mov	r24, r24
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	90 95       	com	r25
    309a:	81 95       	neg	r24
    309c:	9f 4f       	sbci	r25, 0xFF	; 255
    309e:	82 0f       	add	r24, r18
    30a0:	93 1f       	adc	r25, r19
    30a2:	eb 81       	ldd	r30, Y+3	; 0x03
    30a4:	fc 81       	ldd	r31, Y+4	; 0x04
    30a6:	97 83       	std	Z+7, r25	; 0x07
    30a8:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    30aa:	eb 81       	ldd	r30, Y+3	; 0x03
    30ac:	fc 81       	ldd	r31, Y+4	; 0x04
    30ae:	26 81       	ldd	r18, Z+6	; 0x06
    30b0:	37 81       	ldd	r19, Z+7	; 0x07
    30b2:	eb 81       	ldd	r30, Y+3	; 0x03
    30b4:	fc 81       	ldd	r31, Y+4	; 0x04
    30b6:	80 81       	ld	r24, Z
    30b8:	91 81       	ldd	r25, Z+1	; 0x01
    30ba:	28 17       	cp	r18, r24
    30bc:	39 07       	cpc	r19, r25
    30be:	90 f4       	brcc	.+36     	; 0x30e4 <prvCopyDataToQueue+0x140>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    30c0:	eb 81       	ldd	r30, Y+3	; 0x03
    30c2:	fc 81       	ldd	r31, Y+4	; 0x04
    30c4:	22 81       	ldd	r18, Z+2	; 0x02
    30c6:	33 81       	ldd	r19, Z+3	; 0x03
    30c8:	eb 81       	ldd	r30, Y+3	; 0x03
    30ca:	fc 81       	ldd	r31, Y+4	; 0x04
    30cc:	84 8d       	ldd	r24, Z+28	; 0x1c
    30ce:	88 2f       	mov	r24, r24
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	90 95       	com	r25
    30d4:	81 95       	neg	r24
    30d6:	9f 4f       	sbci	r25, 0xFF	; 255
    30d8:	82 0f       	add	r24, r18
    30da:	93 1f       	adc	r25, r19
    30dc:	eb 81       	ldd	r30, Y+3	; 0x03
    30de:	fc 81       	ldd	r31, Y+4	; 0x04
    30e0:	97 83       	std	Z+7, r25	; 0x07
    30e2:	86 83       	std	Z+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    30e4:	8f 81       	ldd	r24, Y+7	; 0x07
    30e6:	82 30       	cpi	r24, 0x02	; 2
    30e8:	31 f4       	brne	.+12     	; 0x30f6 <prvCopyDataToQueue+0x152>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    30ea:	89 81       	ldd	r24, Y+1	; 0x01
    30ec:	88 23       	and	r24, r24
    30ee:	19 f0       	breq	.+6      	; 0x30f6 <prvCopyDataToQueue+0x152>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    30f0:	89 81       	ldd	r24, Y+1	; 0x01
    30f2:	81 50       	subi	r24, 0x01	; 1
    30f4:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    30f6:	89 81       	ldd	r24, Y+1	; 0x01
    30f8:	8f 5f       	subi	r24, 0xFF	; 255
    30fa:	eb 81       	ldd	r30, Y+3	; 0x03
    30fc:	fc 81       	ldd	r31, Y+4	; 0x04
    30fe:	82 8f       	std	Z+26, r24	; 0x1a

	return xReturn;
    3100:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3102:	27 96       	adiw	r28, 0x07	; 7
    3104:	0f b6       	in	r0, 0x3f	; 63
    3106:	f8 94       	cli
    3108:	de bf       	out	0x3e, r29	; 62
    310a:	0f be       	out	0x3f, r0	; 63
    310c:	cd bf       	out	0x3d, r28	; 61
    310e:	cf 91       	pop	r28
    3110:	df 91       	pop	r29
    3112:	08 95       	ret

00003114 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    3114:	df 93       	push	r29
    3116:	cf 93       	push	r28
    3118:	00 d0       	rcall	.+0      	; 0x311a <prvCopyDataFromQueue+0x6>
    311a:	00 d0       	rcall	.+0      	; 0x311c <prvCopyDataFromQueue+0x8>
    311c:	cd b7       	in	r28, 0x3d	; 61
    311e:	de b7       	in	r29, 0x3e	; 62
    3120:	9a 83       	std	Y+2, r25	; 0x02
    3122:	89 83       	std	Y+1, r24	; 0x01
    3124:	7c 83       	std	Y+4, r23	; 0x04
    3126:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    3128:	e9 81       	ldd	r30, Y+1	; 0x01
    312a:	fa 81       	ldd	r31, Y+2	; 0x02
    312c:	84 8d       	ldd	r24, Z+28	; 0x1c
    312e:	88 23       	and	r24, r24
    3130:	89 f1       	breq	.+98     	; 0x3194 <prvCopyDataFromQueue+0x80>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    3132:	e9 81       	ldd	r30, Y+1	; 0x01
    3134:	fa 81       	ldd	r31, Y+2	; 0x02
    3136:	26 81       	ldd	r18, Z+6	; 0x06
    3138:	37 81       	ldd	r19, Z+7	; 0x07
    313a:	e9 81       	ldd	r30, Y+1	; 0x01
    313c:	fa 81       	ldd	r31, Y+2	; 0x02
    313e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3140:	88 2f       	mov	r24, r24
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	82 0f       	add	r24, r18
    3146:	93 1f       	adc	r25, r19
    3148:	e9 81       	ldd	r30, Y+1	; 0x01
    314a:	fa 81       	ldd	r31, Y+2	; 0x02
    314c:	97 83       	std	Z+7, r25	; 0x07
    314e:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    3150:	e9 81       	ldd	r30, Y+1	; 0x01
    3152:	fa 81       	ldd	r31, Y+2	; 0x02
    3154:	26 81       	ldd	r18, Z+6	; 0x06
    3156:	37 81       	ldd	r19, Z+7	; 0x07
    3158:	e9 81       	ldd	r30, Y+1	; 0x01
    315a:	fa 81       	ldd	r31, Y+2	; 0x02
    315c:	82 81       	ldd	r24, Z+2	; 0x02
    315e:	93 81       	ldd	r25, Z+3	; 0x03
    3160:	28 17       	cp	r18, r24
    3162:	39 07       	cpc	r19, r25
    3164:	40 f0       	brcs	.+16     	; 0x3176 <prvCopyDataFromQueue+0x62>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    3166:	e9 81       	ldd	r30, Y+1	; 0x01
    3168:	fa 81       	ldd	r31, Y+2	; 0x02
    316a:	80 81       	ld	r24, Z
    316c:	91 81       	ldd	r25, Z+1	; 0x01
    316e:	e9 81       	ldd	r30, Y+1	; 0x01
    3170:	fa 81       	ldd	r31, Y+2	; 0x02
    3172:	97 83       	std	Z+7, r25	; 0x07
    3174:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    3176:	e9 81       	ldd	r30, Y+1	; 0x01
    3178:	fa 81       	ldd	r31, Y+2	; 0x02
    317a:	46 81       	ldd	r20, Z+6	; 0x06
    317c:	57 81       	ldd	r21, Z+7	; 0x07
    317e:	e9 81       	ldd	r30, Y+1	; 0x01
    3180:	fa 81       	ldd	r31, Y+2	; 0x02
    3182:	84 8d       	ldd	r24, Z+28	; 0x1c
    3184:	28 2f       	mov	r18, r24
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	8b 81       	ldd	r24, Y+3	; 0x03
    318a:	9c 81       	ldd	r25, Y+4	; 0x04
    318c:	ba 01       	movw	r22, r20
    318e:	a9 01       	movw	r20, r18
    3190:	0e 94 3c 2a 	call	0x5478	; 0x5478 <memcpy>
	}
}
    3194:	0f 90       	pop	r0
    3196:	0f 90       	pop	r0
    3198:	0f 90       	pop	r0
    319a:	0f 90       	pop	r0
    319c:	cf 91       	pop	r28
    319e:	df 91       	pop	r29
    31a0:	08 95       	ret

000031a2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    31a2:	df 93       	push	r29
    31a4:	cf 93       	push	r28
    31a6:	00 d0       	rcall	.+0      	; 0x31a8 <prvUnlockQueue+0x6>
    31a8:	00 d0       	rcall	.+0      	; 0x31aa <prvUnlockQueue+0x8>
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
    31ae:	9c 83       	std	Y+4, r25	; 0x04
    31b0:	8b 83       	std	Y+3, r24	; 0x03

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    31b2:	0f b6       	in	r0, 0x3f	; 63
    31b4:	f8 94       	cli
    31b6:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
    31b8:	eb 81       	ldd	r30, Y+3	; 0x03
    31ba:	fc 81       	ldd	r31, Y+4	; 0x04
    31bc:	86 8d       	ldd	r24, Z+30	; 0x1e
    31be:	8a 83       	std	Y+2, r24	; 0x02
    31c0:	11 c0       	rjmp	.+34     	; 0x31e4 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    31c2:	eb 81       	ldd	r30, Y+3	; 0x03
    31c4:	fc 81       	ldd	r31, Y+4	; 0x04
    31c6:	81 89       	ldd	r24, Z+17	; 0x11
    31c8:	88 23       	and	r24, r24
    31ca:	79 f0       	breq	.+30     	; 0x31ea <prvUnlockQueue+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    31cc:	8b 81       	ldd	r24, Y+3	; 0x03
    31ce:	9c 81       	ldd	r25, Y+4	; 0x04
    31d0:	41 96       	adiw	r24, 0x11	; 17
    31d2:	0e 94 60 22 	call	0x44c0	; 0x44c0 <xTaskRemoveFromEventList>
    31d6:	88 23       	and	r24, r24
    31d8:	11 f0       	breq	.+4      	; 0x31de <prvUnlockQueue+0x3c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    31da:	0e 94 b6 23 	call	0x476c	; 0x476c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    31de:	8a 81       	ldd	r24, Y+2	; 0x02
    31e0:	81 50       	subi	r24, 0x01	; 1
    31e2:	8a 83       	std	Y+2, r24	; 0x02
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    31e4:	8a 81       	ldd	r24, Y+2	; 0x02
    31e6:	18 16       	cp	r1, r24
    31e8:	64 f3       	brlt	.-40     	; 0x31c2 <prvUnlockQueue+0x20>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    31ea:	eb 81       	ldd	r30, Y+3	; 0x03
    31ec:	fc 81       	ldd	r31, Y+4	; 0x04
    31ee:	8f ef       	ldi	r24, 0xFF	; 255
    31f0:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    31f2:	0f 90       	pop	r0
    31f4:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    31f6:	0f b6       	in	r0, 0x3f	; 63
    31f8:	f8 94       	cli
    31fa:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
    31fc:	eb 81       	ldd	r30, Y+3	; 0x03
    31fe:	fc 81       	ldd	r31, Y+4	; 0x04
    3200:	85 8d       	ldd	r24, Z+29	; 0x1d
    3202:	89 83       	std	Y+1, r24	; 0x01
    3204:	11 c0       	rjmp	.+34     	; 0x3228 <prvUnlockQueue+0x86>

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3206:	eb 81       	ldd	r30, Y+3	; 0x03
    3208:	fc 81       	ldd	r31, Y+4	; 0x04
    320a:	80 85       	ldd	r24, Z+8	; 0x08
    320c:	88 23       	and	r24, r24
    320e:	79 f0       	breq	.+30     	; 0x322e <prvUnlockQueue+0x8c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3210:	8b 81       	ldd	r24, Y+3	; 0x03
    3212:	9c 81       	ldd	r25, Y+4	; 0x04
    3214:	08 96       	adiw	r24, 0x08	; 8
    3216:	0e 94 60 22 	call	0x44c0	; 0x44c0 <xTaskRemoveFromEventList>
    321a:	88 23       	and	r24, r24
    321c:	11 f0       	breq	.+4      	; 0x3222 <prvUnlockQueue+0x80>
				{
					vTaskMissedYield();
    321e:	0e 94 b6 23 	call	0x476c	; 0x476c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    3222:	89 81       	ldd	r24, Y+1	; 0x01
    3224:	81 50       	subi	r24, 0x01	; 1
    3226:	89 83       	std	Y+1, r24	; 0x01
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    3228:	89 81       	ldd	r24, Y+1	; 0x01
    322a:	18 16       	cp	r1, r24
    322c:	64 f3       	brlt	.-40     	; 0x3206 <prvUnlockQueue+0x64>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    322e:	eb 81       	ldd	r30, Y+3	; 0x03
    3230:	fc 81       	ldd	r31, Y+4	; 0x04
    3232:	8f ef       	ldi	r24, 0xFF	; 255
    3234:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    3236:	0f 90       	pop	r0
    3238:	0f be       	out	0x3f, r0	; 63
}
    323a:	0f 90       	pop	r0
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	0f 90       	pop	r0
    3242:	cf 91       	pop	r28
    3244:	df 91       	pop	r29
    3246:	08 95       	ret

00003248 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    3248:	df 93       	push	r29
    324a:	cf 93       	push	r28
    324c:	00 d0       	rcall	.+0      	; 0x324e <prvIsQueueEmpty+0x6>
    324e:	0f 92       	push	r0
    3250:	cd b7       	in	r28, 0x3d	; 61
    3252:	de b7       	in	r29, 0x3e	; 62
    3254:	9b 83       	std	Y+3, r25	; 0x03
    3256:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3258:	0f b6       	in	r0, 0x3f	; 63
    325a:	f8 94       	cli
    325c:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    325e:	ea 81       	ldd	r30, Y+2	; 0x02
    3260:	fb 81       	ldd	r31, Y+3	; 0x03
    3262:	82 8d       	ldd	r24, Z+26	; 0x1a
    3264:	88 23       	and	r24, r24
    3266:	19 f4       	brne	.+6      	; 0x326e <prvIsQueueEmpty+0x26>
		{
			xReturn = pdTRUE;
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	89 83       	std	Y+1, r24	; 0x01
    326c:	01 c0       	rjmp	.+2      	; 0x3270 <prvIsQueueEmpty+0x28>
		}
		else
		{
			xReturn = pdFALSE;
    326e:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    3270:	0f 90       	pop	r0
    3272:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3274:	89 81       	ldd	r24, Y+1	; 0x01
}
    3276:	0f 90       	pop	r0
    3278:	0f 90       	pop	r0
    327a:	0f 90       	pop	r0
    327c:	cf 91       	pop	r28
    327e:	df 91       	pop	r29
    3280:	08 95       	ret

00003282 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    3282:	df 93       	push	r29
    3284:	cf 93       	push	r28
    3286:	00 d0       	rcall	.+0      	; 0x3288 <xQueueIsQueueEmptyFromISR+0x6>
    3288:	0f 92       	push	r0
    328a:	cd b7       	in	r28, 0x3d	; 61
    328c:	de b7       	in	r29, 0x3e	; 62
    328e:	9b 83       	std	Y+3, r25	; 0x03
    3290:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    3292:	ea 81       	ldd	r30, Y+2	; 0x02
    3294:	fb 81       	ldd	r31, Y+3	; 0x03
    3296:	82 8d       	ldd	r24, Z+26	; 0x1a
    3298:	88 23       	and	r24, r24
    329a:	19 f4       	brne	.+6      	; 0x32a2 <xQueueIsQueueEmptyFromISR+0x20>
	{
		xReturn = pdTRUE;
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	89 83       	std	Y+1, r24	; 0x01
    32a0:	01 c0       	rjmp	.+2      	; 0x32a4 <xQueueIsQueueEmptyFromISR+0x22>
	}
	else
	{
		xReturn = pdFALSE;
    32a2:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	0f 90       	pop	r0
    32ac:	cf 91       	pop	r28
    32ae:	df 91       	pop	r29
    32b0:	08 95       	ret

000032b2 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    32b2:	df 93       	push	r29
    32b4:	cf 93       	push	r28
    32b6:	00 d0       	rcall	.+0      	; 0x32b8 <prvIsQueueFull+0x6>
    32b8:	0f 92       	push	r0
    32ba:	cd b7       	in	r28, 0x3d	; 61
    32bc:	de b7       	in	r29, 0x3e	; 62
    32be:	9b 83       	std	Y+3, r25	; 0x03
    32c0:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    32c2:	0f b6       	in	r0, 0x3f	; 63
    32c4:	f8 94       	cli
    32c6:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    32c8:	ea 81       	ldd	r30, Y+2	; 0x02
    32ca:	fb 81       	ldd	r31, Y+3	; 0x03
    32cc:	92 8d       	ldd	r25, Z+26	; 0x1a
    32ce:	ea 81       	ldd	r30, Y+2	; 0x02
    32d0:	fb 81       	ldd	r31, Y+3	; 0x03
    32d2:	83 8d       	ldd	r24, Z+27	; 0x1b
    32d4:	98 17       	cp	r25, r24
    32d6:	19 f4       	brne	.+6      	; 0x32de <prvIsQueueFull+0x2c>
		{
			xReturn = pdTRUE;
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	89 83       	std	Y+1, r24	; 0x01
    32dc:	01 c0       	rjmp	.+2      	; 0x32e0 <prvIsQueueFull+0x2e>
		}
		else
		{
			xReturn = pdFALSE;
    32de:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    32e0:	0f 90       	pop	r0
    32e2:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    32e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	0f 90       	pop	r0
    32ec:	cf 91       	pop	r28
    32ee:	df 91       	pop	r29
    32f0:	08 95       	ret

000032f2 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    32f2:	df 93       	push	r29
    32f4:	cf 93       	push	r28
    32f6:	00 d0       	rcall	.+0      	; 0x32f8 <xQueueIsQueueFullFromISR+0x6>
    32f8:	0f 92       	push	r0
    32fa:	cd b7       	in	r28, 0x3d	; 61
    32fc:	de b7       	in	r29, 0x3e	; 62
    32fe:	9b 83       	std	Y+3, r25	; 0x03
    3300:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    3302:	ea 81       	ldd	r30, Y+2	; 0x02
    3304:	fb 81       	ldd	r31, Y+3	; 0x03
    3306:	92 8d       	ldd	r25, Z+26	; 0x1a
    3308:	ea 81       	ldd	r30, Y+2	; 0x02
    330a:	fb 81       	ldd	r31, Y+3	; 0x03
    330c:	83 8d       	ldd	r24, Z+27	; 0x1b
    330e:	98 17       	cp	r25, r24
    3310:	19 f4       	brne	.+6      	; 0x3318 <xQueueIsQueueFullFromISR+0x26>
	{
		xReturn = pdTRUE;
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	89 83       	std	Y+1, r24	; 0x01
    3316:	01 c0       	rjmp	.+2      	; 0x331a <xQueueIsQueueFullFromISR+0x28>
	}
	else
	{
		xReturn = pdFALSE;
    3318:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    331a:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    331c:	0f 90       	pop	r0
    331e:	0f 90       	pop	r0
    3320:	0f 90       	pop	r0
    3322:	cf 91       	pop	r28
    3324:	df 91       	pop	r29
    3326:	08 95       	ret

00003328 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    3328:	df 93       	push	r29
    332a:	cf 93       	push	r28
    332c:	00 d0       	rcall	.+0      	; 0x332e <vQueueAddToRegistry+0x6>
    332e:	00 d0       	rcall	.+0      	; 0x3330 <vQueueAddToRegistry+0x8>
    3330:	0f 92       	push	r0
    3332:	cd b7       	in	r28, 0x3d	; 61
    3334:	de b7       	in	r29, 0x3e	; 62
    3336:	9b 83       	std	Y+3, r25	; 0x03
    3338:	8a 83       	std	Y+2, r24	; 0x02
    333a:	7d 83       	std	Y+5, r23	; 0x05
    333c:	6c 83       	std	Y+4, r22	; 0x04
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    333e:	19 82       	std	Y+1, r1	; 0x01
    3340:	2f c0       	rjmp	.+94     	; 0x33a0 <vQueueAddToRegistry+0x78>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    3342:	89 81       	ldd	r24, Y+1	; 0x01
    3344:	88 2f       	mov	r24, r24
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	88 0f       	add	r24, r24
    334a:	99 1f       	adc	r25, r25
    334c:	88 0f       	add	r24, r24
    334e:	99 1f       	adc	r25, r25
    3350:	fc 01       	movw	r30, r24
    3352:	ee 5e       	subi	r30, 0xEE	; 238
    3354:	fb 4f       	sbci	r31, 0xFB	; 251
    3356:	80 81       	ld	r24, Z
    3358:	91 81       	ldd	r25, Z+1	; 0x01
    335a:	00 97       	sbiw	r24, 0x00	; 0
    335c:	f1 f4       	brne	.+60     	; 0x339a <vQueueAddToRegistry+0x72>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    335e:	89 81       	ldd	r24, Y+1	; 0x01
    3360:	88 2f       	mov	r24, r24
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	88 0f       	add	r24, r24
    3366:	99 1f       	adc	r25, r25
    3368:	88 0f       	add	r24, r24
    336a:	99 1f       	adc	r25, r25
    336c:	fc 01       	movw	r30, r24
    336e:	ee 5e       	subi	r30, 0xEE	; 238
    3370:	fb 4f       	sbci	r31, 0xFB	; 251
    3372:	8c 81       	ldd	r24, Y+4	; 0x04
    3374:	9d 81       	ldd	r25, Y+5	; 0x05
    3376:	91 83       	std	Z+1, r25	; 0x01
    3378:	80 83       	st	Z, r24
				xQueueRegistry[ ux ].xHandle = xQueue;
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	88 2f       	mov	r24, r24
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	88 0f       	add	r24, r24
    3382:	99 1f       	adc	r25, r25
    3384:	01 96       	adiw	r24, 0x01	; 1
    3386:	88 0f       	add	r24, r24
    3388:	99 1f       	adc	r25, r25
    338a:	fc 01       	movw	r30, r24
    338c:	ee 5e       	subi	r30, 0xEE	; 238
    338e:	fb 4f       	sbci	r31, 0xFB	; 251
    3390:	8a 81       	ldd	r24, Y+2	; 0x02
    3392:	9b 81       	ldd	r25, Y+3	; 0x03
    3394:	91 83       	std	Z+1, r25	; 0x01
    3396:	80 83       	st	Z, r24
    3398:	06 c0       	rjmp	.+12     	; 0x33a6 <vQueueAddToRegistry+0x7e>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    339a:	89 81       	ldd	r24, Y+1	; 0x01
    339c:	8f 5f       	subi	r24, 0xFF	; 255
    339e:	89 83       	std	Y+1, r24	; 0x01
    33a0:	89 81       	ldd	r24, Y+1	; 0x01
    33a2:	88 30       	cpi	r24, 0x08	; 8
    33a4:	70 f2       	brcs	.-100    	; 0x3342 <vQueueAddToRegistry+0x1a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    33a6:	0f 90       	pop	r0
    33a8:	0f 90       	pop	r0
    33aa:	0f 90       	pop	r0
    33ac:	0f 90       	pop	r0
    33ae:	0f 90       	pop	r0
    33b0:	cf 91       	pop	r28
    33b2:	df 91       	pop	r29
    33b4:	08 95       	ret

000033b6 <pcQueueGetName>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    33b6:	df 93       	push	r29
    33b8:	cf 93       	push	r28
    33ba:	00 d0       	rcall	.+0      	; 0x33bc <pcQueueGetName+0x6>
    33bc:	00 d0       	rcall	.+0      	; 0x33be <pcQueueGetName+0x8>
    33be:	0f 92       	push	r0
    33c0:	cd b7       	in	r28, 0x3d	; 61
    33c2:	de b7       	in	r29, 0x3e	; 62
    33c4:	9d 83       	std	Y+5, r25	; 0x05
    33c6:	8c 83       	std	Y+4, r24	; 0x04
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    33c8:	1a 82       	std	Y+2, r1	; 0x02
    33ca:	19 82       	std	Y+1, r1	; 0x01

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    33cc:	1b 82       	std	Y+3, r1	; 0x03
    33ce:	24 c0       	rjmp	.+72     	; 0x3418 <pcQueueGetName+0x62>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    33d0:	8b 81       	ldd	r24, Y+3	; 0x03
    33d2:	88 2f       	mov	r24, r24
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	88 0f       	add	r24, r24
    33d8:	99 1f       	adc	r25, r25
    33da:	01 96       	adiw	r24, 0x01	; 1
    33dc:	88 0f       	add	r24, r24
    33de:	99 1f       	adc	r25, r25
    33e0:	fc 01       	movw	r30, r24
    33e2:	ee 5e       	subi	r30, 0xEE	; 238
    33e4:	fb 4f       	sbci	r31, 0xFB	; 251
    33e6:	20 81       	ld	r18, Z
    33e8:	31 81       	ldd	r19, Z+1	; 0x01
    33ea:	8c 81       	ldd	r24, Y+4	; 0x04
    33ec:	9d 81       	ldd	r25, Y+5	; 0x05
    33ee:	28 17       	cp	r18, r24
    33f0:	39 07       	cpc	r19, r25
    33f2:	79 f4       	brne	.+30     	; 0x3412 <pcQueueGetName+0x5c>
			{
				pcReturn = xQueueRegistry[ ux ].pcQueueName;
    33f4:	8b 81       	ldd	r24, Y+3	; 0x03
    33f6:	88 2f       	mov	r24, r24
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	88 0f       	add	r24, r24
    33fc:	99 1f       	adc	r25, r25
    33fe:	88 0f       	add	r24, r24
    3400:	99 1f       	adc	r25, r25
    3402:	fc 01       	movw	r30, r24
    3404:	ee 5e       	subi	r30, 0xEE	; 238
    3406:	fb 4f       	sbci	r31, 0xFB	; 251
    3408:	80 81       	ld	r24, Z
    340a:	91 81       	ldd	r25, Z+1	; 0x01
    340c:	9a 83       	std	Y+2, r25	; 0x02
    340e:	89 83       	std	Y+1, r24	; 0x01
    3410:	06 c0       	rjmp	.+12     	; 0x341e <pcQueueGetName+0x68>
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    3412:	8b 81       	ldd	r24, Y+3	; 0x03
    3414:	8f 5f       	subi	r24, 0xFF	; 255
    3416:	8b 83       	std	Y+3, r24	; 0x03
    3418:	8b 81       	ldd	r24, Y+3	; 0x03
    341a:	88 30       	cpi	r24, 0x08	; 8
    341c:	c8 f2       	brcs	.-78     	; 0x33d0 <pcQueueGetName+0x1a>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return pcReturn;
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    3422:	0f 90       	pop	r0
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	0f 90       	pop	r0
    342a:	0f 90       	pop	r0
    342c:	cf 91       	pop	r28
    342e:	df 91       	pop	r29
    3430:	08 95       	ret

00003432 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
    3432:	df 93       	push	r29
    3434:	cf 93       	push	r28
    3436:	00 d0       	rcall	.+0      	; 0x3438 <vQueueUnregisterQueue+0x6>
    3438:	0f 92       	push	r0
    343a:	cd b7       	in	r28, 0x3d	; 61
    343c:	de b7       	in	r29, 0x3e	; 62
    343e:	9b 83       	std	Y+3, r25	; 0x03
    3440:	8a 83       	std	Y+2, r24	; 0x02
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    3442:	19 82       	std	Y+1, r1	; 0x01
    3444:	2f c0       	rjmp	.+94     	; 0x34a4 <vQueueUnregisterQueue+0x72>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    3446:	89 81       	ldd	r24, Y+1	; 0x01
    3448:	88 2f       	mov	r24, r24
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	88 0f       	add	r24, r24
    344e:	99 1f       	adc	r25, r25
    3450:	01 96       	adiw	r24, 0x01	; 1
    3452:	88 0f       	add	r24, r24
    3454:	99 1f       	adc	r25, r25
    3456:	fc 01       	movw	r30, r24
    3458:	ee 5e       	subi	r30, 0xEE	; 238
    345a:	fb 4f       	sbci	r31, 0xFB	; 251
    345c:	20 81       	ld	r18, Z
    345e:	31 81       	ldd	r19, Z+1	; 0x01
    3460:	8a 81       	ldd	r24, Y+2	; 0x02
    3462:	9b 81       	ldd	r25, Y+3	; 0x03
    3464:	28 17       	cp	r18, r24
    3466:	39 07       	cpc	r19, r25
    3468:	d1 f4       	brne	.+52     	; 0x349e <vQueueUnregisterQueue+0x6c>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
    346a:	89 81       	ldd	r24, Y+1	; 0x01
    346c:	88 2f       	mov	r24, r24
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	88 0f       	add	r24, r24
    3472:	99 1f       	adc	r25, r25
    3474:	88 0f       	add	r24, r24
    3476:	99 1f       	adc	r25, r25
    3478:	fc 01       	movw	r30, r24
    347a:	ee 5e       	subi	r30, 0xEE	; 238
    347c:	fb 4f       	sbci	r31, 0xFB	; 251
    347e:	11 82       	std	Z+1, r1	; 0x01
    3480:	10 82       	st	Z, r1

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
    3482:	89 81       	ldd	r24, Y+1	; 0x01
    3484:	88 2f       	mov	r24, r24
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	88 0f       	add	r24, r24
    348a:	99 1f       	adc	r25, r25
    348c:	01 96       	adiw	r24, 0x01	; 1
    348e:	88 0f       	add	r24, r24
    3490:	99 1f       	adc	r25, r25
    3492:	fc 01       	movw	r30, r24
    3494:	ee 5e       	subi	r30, 0xEE	; 238
    3496:	fb 4f       	sbci	r31, 0xFB	; 251
    3498:	11 82       	std	Z+1, r1	; 0x01
    349a:	10 82       	st	Z, r1
    349c:	06 c0       	rjmp	.+12     	; 0x34aa <vQueueUnregisterQueue+0x78>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    349e:	89 81       	ldd	r24, Y+1	; 0x01
    34a0:	8f 5f       	subi	r24, 0xFF	; 255
    34a2:	89 83       	std	Y+1, r24	; 0x01
    34a4:	89 81       	ldd	r24, Y+1	; 0x01
    34a6:	88 30       	cpi	r24, 0x08	; 8
    34a8:	70 f2       	brcs	.-100    	; 0x3446 <vQueueUnregisterQueue+0x14>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    34aa:	0f 90       	pop	r0
    34ac:	0f 90       	pop	r0
    34ae:	0f 90       	pop	r0
    34b0:	cf 91       	pop	r28
    34b2:	df 91       	pop	r29
    34b4:	08 95       	ret

000034b6 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    34b6:	8f 92       	push	r8
    34b8:	9f 92       	push	r9
    34ba:	af 92       	push	r10
    34bc:	bf 92       	push	r11
    34be:	cf 92       	push	r12
    34c0:	df 92       	push	r13
    34c2:	ef 92       	push	r14
    34c4:	ff 92       	push	r15
    34c6:	0f 93       	push	r16
    34c8:	1f 93       	push	r17
    34ca:	df 93       	push	r29
    34cc:	cf 93       	push	r28
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
    34d2:	60 97       	sbiw	r28, 0x10	; 16
    34d4:	0f b6       	in	r0, 0x3f	; 63
    34d6:	f8 94       	cli
    34d8:	de bf       	out	0x3e, r29	; 62
    34da:	0f be       	out	0x3f, r0	; 63
    34dc:	cd bf       	out	0x3d, r28	; 61
    34de:	9f 83       	std	Y+7, r25	; 0x07
    34e0:	8e 83       	std	Y+6, r24	; 0x06
    34e2:	79 87       	std	Y+9, r23	; 0x09
    34e4:	68 87       	std	Y+8, r22	; 0x08
    34e6:	5b 87       	std	Y+11, r21	; 0x0b
    34e8:	4a 87       	std	Y+10, r20	; 0x0a
    34ea:	3d 87       	std	Y+13, r19	; 0x0d
    34ec:	2c 87       	std	Y+12, r18	; 0x0c
    34ee:	0e 87       	std	Y+14, r16	; 0x0e
    34f0:	f8 8a       	std	Y+16, r15	; 0x10
    34f2:	ef 86       	std	Y+15, r14	; 0x0f
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    34f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    34f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    34f8:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <pvPortMalloc>
    34fc:	9a 83       	std	Y+2, r25	; 0x02
    34fe:	89 83       	std	Y+1, r24	; 0x01

			if( pxStack != NULL )
    3500:	89 81       	ldd	r24, Y+1	; 0x01
    3502:	9a 81       	ldd	r25, Y+2	; 0x02
    3504:	00 97       	sbiw	r24, 0x00	; 0
    3506:	b1 f0       	breq	.+44     	; 0x3534 <xTaskCreate+0x7e>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    3508:	8a e2       	ldi	r24, 0x2A	; 42
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <pvPortMalloc>
    3510:	9d 83       	std	Y+5, r25	; 0x05
    3512:	8c 83       	std	Y+4, r24	; 0x04

				if( pxNewTCB != NULL )
    3514:	8c 81       	ldd	r24, Y+4	; 0x04
    3516:	9d 81       	ldd	r25, Y+5	; 0x05
    3518:	00 97       	sbiw	r24, 0x00	; 0
    351a:	39 f0       	breq	.+14     	; 0x352a <xTaskCreate+0x74>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    351c:	ec 81       	ldd	r30, Y+4	; 0x04
    351e:	fd 81       	ldd	r31, Y+5	; 0x05
    3520:	89 81       	ldd	r24, Y+1	; 0x01
    3522:	9a 81       	ldd	r25, Y+2	; 0x02
    3524:	90 8f       	std	Z+24, r25	; 0x18
    3526:	87 8b       	std	Z+23, r24	; 0x17
    3528:	07 c0       	rjmp	.+14     	; 0x3538 <xTaskCreate+0x82>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    352a:	89 81       	ldd	r24, Y+1	; 0x01
    352c:	9a 81       	ldd	r25, Y+2	; 0x02
    352e:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <vPortFree>
    3532:	02 c0       	rjmp	.+4      	; 0x3538 <xTaskCreate+0x82>
				}
			}
			else
			{
				pxNewTCB = NULL;
    3534:	1d 82       	std	Y+5, r1	; 0x05
    3536:	1c 82       	std	Y+4, r1	; 0x04
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    3538:	8c 81       	ldd	r24, Y+4	; 0x04
    353a:	9d 81       	ldd	r25, Y+5	; 0x05
    353c:	00 97       	sbiw	r24, 0x00	; 0
    353e:	e9 f0       	breq	.+58     	; 0x357a <xTaskCreate+0xc4>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    3540:	8a 85       	ldd	r24, Y+10	; 0x0a
    3542:	9b 85       	ldd	r25, Y+11	; 0x0b
    3544:	9c 01       	movw	r18, r24
    3546:	40 e0       	ldi	r20, 0x00	; 0
    3548:	50 e0       	ldi	r21, 0x00	; 0
    354a:	8e 81       	ldd	r24, Y+6	; 0x06
    354c:	9f 81       	ldd	r25, Y+7	; 0x07
    354e:	68 85       	ldd	r22, Y+8	; 0x08
    3550:	79 85       	ldd	r23, Y+9	; 0x09
    3552:	ec 85       	ldd	r30, Y+12	; 0x0c
    3554:	fd 85       	ldd	r31, Y+13	; 0x0d
    3556:	af 85       	ldd	r26, Y+15	; 0x0f
    3558:	b8 89       	ldd	r27, Y+16	; 0x10
    355a:	ac 80       	ldd	r10, Y+4	; 0x04
    355c:	bd 80       	ldd	r11, Y+5	; 0x05
    355e:	8f 01       	movw	r16, r30
    3560:	ee 84       	ldd	r14, Y+14	; 0x0e
    3562:	6d 01       	movw	r12, r26
    3564:	88 24       	eor	r8, r8
    3566:	99 24       	eor	r9, r9
    3568:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    356c:	8c 81       	ldd	r24, Y+4	; 0x04
    356e:	9d 81       	ldd	r25, Y+5	; 0x05
    3570:	0e 94 8e 1b 	call	0x371c	; 0x371c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	8b 83       	std	Y+3, r24	; 0x03
    3578:	02 c0       	rjmp	.+4      	; 0x357e <xTaskCreate+0xc8>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    357a:	8f ef       	ldi	r24, 0xFF	; 255
    357c:	8b 83       	std	Y+3, r24	; 0x03
		}

		return xReturn;
    357e:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    3580:	60 96       	adiw	r28, 0x10	; 16
    3582:	0f b6       	in	r0, 0x3f	; 63
    3584:	f8 94       	cli
    3586:	de bf       	out	0x3e, r29	; 62
    3588:	0f be       	out	0x3f, r0	; 63
    358a:	cd bf       	out	0x3d, r28	; 61
    358c:	cf 91       	pop	r28
    358e:	df 91       	pop	r29
    3590:	1f 91       	pop	r17
    3592:	0f 91       	pop	r16
    3594:	ff 90       	pop	r15
    3596:	ef 90       	pop	r14
    3598:	df 90       	pop	r13
    359a:	cf 90       	pop	r12
    359c:	bf 90       	pop	r11
    359e:	af 90       	pop	r10
    35a0:	9f 90       	pop	r9
    35a2:	8f 90       	pop	r8
    35a4:	08 95       	ret

000035a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    35a6:	8f 92       	push	r8
    35a8:	9f 92       	push	r9
    35aa:	af 92       	push	r10
    35ac:	bf 92       	push	r11
    35ae:	cf 92       	push	r12
    35b0:	df 92       	push	r13
    35b2:	ef 92       	push	r14
    35b4:	0f 93       	push	r16
    35b6:	1f 93       	push	r17
    35b8:	df 93       	push	r29
    35ba:	cf 93       	push	r28
    35bc:	cd b7       	in	r28, 0x3d	; 61
    35be:	de b7       	in	r29, 0x3e	; 62
    35c0:	64 97       	sbiw	r28, 0x14	; 20
    35c2:	0f b6       	in	r0, 0x3f	; 63
    35c4:	f8 94       	cli
    35c6:	de bf       	out	0x3e, r29	; 62
    35c8:	0f be       	out	0x3f, r0	; 63
    35ca:	cd bf       	out	0x3d, r28	; 61
    35cc:	9d 83       	std	Y+5, r25	; 0x05
    35ce:	8c 83       	std	Y+4, r24	; 0x04
    35d0:	7f 83       	std	Y+7, r23	; 0x07
    35d2:	6e 83       	std	Y+6, r22	; 0x06
    35d4:	28 87       	std	Y+8, r18	; 0x08
    35d6:	39 87       	std	Y+9, r19	; 0x09
    35d8:	4a 87       	std	Y+10, r20	; 0x0a
    35da:	5b 87       	std	Y+11, r21	; 0x0b
    35dc:	1d 87       	std	Y+13, r17	; 0x0d
    35de:	0c 87       	std	Y+12, r16	; 0x0c
    35e0:	ee 86       	std	Y+14, r14	; 0x0e
    35e2:	d8 8a       	std	Y+16, r13	; 0x10
    35e4:	cf 86       	std	Y+15, r12	; 0x0f
    35e6:	ba 8a       	std	Y+18, r11	; 0x12
    35e8:	a9 8a       	std	Y+17, r10	; 0x11
    35ea:	9c 8a       	std	Y+20, r9	; 0x14
    35ec:	8b 8a       	std	Y+19, r8	; 0x13
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    35ee:	e9 89       	ldd	r30, Y+17	; 0x11
    35f0:	fa 89       	ldd	r31, Y+18	; 0x12
    35f2:	27 89       	ldd	r18, Z+23	; 0x17
    35f4:	30 8d       	ldd	r19, Z+24	; 0x18
    35f6:	88 85       	ldd	r24, Y+8	; 0x08
    35f8:	99 85       	ldd	r25, Y+9	; 0x09
    35fa:	01 97       	sbiw	r24, 0x01	; 1
    35fc:	82 0f       	add	r24, r18
    35fe:	93 1f       	adc	r25, r19
    3600:	9b 83       	std	Y+3, r25	; 0x03
    3602:	8a 83       	std	Y+2, r24	; 0x02
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3604:	19 82       	std	Y+1, r1	; 0x01
    3606:	21 c0       	rjmp	.+66     	; 0x364a <prvInitialiseNewTask+0xa4>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    3608:	89 81       	ldd	r24, Y+1	; 0x01
    360a:	48 2f       	mov	r20, r24
    360c:	50 e0       	ldi	r21, 0x00	; 0
    360e:	89 81       	ldd	r24, Y+1	; 0x01
    3610:	28 2f       	mov	r18, r24
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	8e 81       	ldd	r24, Y+6	; 0x06
    3616:	9f 81       	ldd	r25, Y+7	; 0x07
    3618:	fc 01       	movw	r30, r24
    361a:	e2 0f       	add	r30, r18
    361c:	f3 1f       	adc	r31, r19
    361e:	20 81       	ld	r18, Z
    3620:	89 89       	ldd	r24, Y+17	; 0x11
    3622:	9a 89       	ldd	r25, Y+18	; 0x12
    3624:	84 0f       	add	r24, r20
    3626:	95 1f       	adc	r25, r21
    3628:	fc 01       	movw	r30, r24
    362a:	79 96       	adiw	r30, 0x19	; 25
    362c:	20 83       	st	Z, r18

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    362e:	89 81       	ldd	r24, Y+1	; 0x01
    3630:	28 2f       	mov	r18, r24
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	8e 81       	ldd	r24, Y+6	; 0x06
    3636:	9f 81       	ldd	r25, Y+7	; 0x07
    3638:	fc 01       	movw	r30, r24
    363a:	e2 0f       	add	r30, r18
    363c:	f3 1f       	adc	r31, r19
    363e:	80 81       	ld	r24, Z
    3640:	88 23       	and	r24, r24
    3642:	31 f0       	breq	.+12     	; 0x3650 <prvInitialiseNewTask+0xaa>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3644:	89 81       	ldd	r24, Y+1	; 0x01
    3646:	8f 5f       	subi	r24, 0xFF	; 255
    3648:	89 83       	std	Y+1, r24	; 0x01
    364a:	89 81       	ldd	r24, Y+1	; 0x01
    364c:	8a 30       	cpi	r24, 0x0A	; 10
    364e:	e0 f2       	brcs	.-72     	; 0x3608 <prvInitialiseNewTask+0x62>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    3650:	e9 89       	ldd	r30, Y+17	; 0x11
    3652:	fa 89       	ldd	r31, Y+18	; 0x12
    3654:	12 a2       	std	Z+34, r1	; 0x22

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    3656:	8e 85       	ldd	r24, Y+14	; 0x0e
    3658:	85 30       	cpi	r24, 0x05	; 5
    365a:	10 f0       	brcs	.+4      	; 0x3660 <prvInitialiseNewTask+0xba>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    365c:	84 e0       	ldi	r24, 0x04	; 4
    365e:	8e 87       	std	Y+14, r24	; 0x0e
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    3660:	e9 89       	ldd	r30, Y+17	; 0x11
    3662:	fa 89       	ldd	r31, Y+18	; 0x12
    3664:	8e 85       	ldd	r24, Y+14	; 0x0e
    3666:	86 8b       	std	Z+22, r24	; 0x16
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    3668:	e9 89       	ldd	r30, Y+17	; 0x11
    366a:	fa 89       	ldd	r31, Y+18	; 0x12
    366c:	8e 85       	ldd	r24, Y+14	; 0x0e
    366e:	83 a3       	std	Z+35, r24	; 0x23
		pxNewTCB->uxMutexesHeld = 0;
    3670:	e9 89       	ldd	r30, Y+17	; 0x11
    3672:	fa 89       	ldd	r31, Y+18	; 0x12
    3674:	14 a2       	std	Z+36, r1	; 0x24
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    3676:	89 89       	ldd	r24, Y+17	; 0x11
    3678:	9a 89       	ldd	r25, Y+18	; 0x12
    367a:	02 96       	adiw	r24, 0x02	; 2
    367c:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    3680:	89 89       	ldd	r24, Y+17	; 0x11
    3682:	9a 89       	ldd	r25, Y+18	; 0x12
    3684:	0c 96       	adiw	r24, 0x0c	; 12
    3686:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    368a:	e9 89       	ldd	r30, Y+17	; 0x11
    368c:	fa 89       	ldd	r31, Y+18	; 0x12
    368e:	89 89       	ldd	r24, Y+17	; 0x11
    3690:	9a 89       	ldd	r25, Y+18	; 0x12
    3692:	91 87       	std	Z+9, r25	; 0x09
    3694:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3696:	8e 85       	ldd	r24, Y+14	; 0x0e
    3698:	28 2f       	mov	r18, r24
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	85 e0       	ldi	r24, 0x05	; 5
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	82 1b       	sub	r24, r18
    36a2:	93 0b       	sbc	r25, r19
    36a4:	e9 89       	ldd	r30, Y+17	; 0x11
    36a6:	fa 89       	ldd	r31, Y+18	; 0x12
    36a8:	95 87       	std	Z+13, r25	; 0x0d
    36aa:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    36ac:	e9 89       	ldd	r30, Y+17	; 0x11
    36ae:	fa 89       	ldd	r31, Y+18	; 0x12
    36b0:	89 89       	ldd	r24, Y+17	; 0x11
    36b2:	9a 89       	ldd	r25, Y+18	; 0x12
    36b4:	93 8b       	std	Z+19, r25	; 0x13
    36b6:	82 8b       	std	Z+18, r24	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    36b8:	e9 89       	ldd	r30, Y+17	; 0x11
    36ba:	fa 89       	ldd	r31, Y+18	; 0x12
    36bc:	15 a2       	std	Z+37, r1	; 0x25
    36be:	16 a2       	std	Z+38, r1	; 0x26
    36c0:	17 a2       	std	Z+39, r1	; 0x27
    36c2:	10 a6       	std	Z+40, r1	; 0x28
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    36c4:	e9 89       	ldd	r30, Y+17	; 0x11
    36c6:	fa 89       	ldd	r31, Y+18	; 0x12
    36c8:	11 a6       	std	Z+41, r1	; 0x29
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    36ca:	8a 81       	ldd	r24, Y+2	; 0x02
    36cc:	9b 81       	ldd	r25, Y+3	; 0x03
    36ce:	2c 81       	ldd	r18, Y+4	; 0x04
    36d0:	3d 81       	ldd	r19, Y+5	; 0x05
    36d2:	4c 85       	ldd	r20, Y+12	; 0x0c
    36d4:	5d 85       	ldd	r21, Y+13	; 0x0d
    36d6:	b9 01       	movw	r22, r18
    36d8:	0e 94 74 10 	call	0x20e8	; 0x20e8 <pxPortInitialiseStack>
    36dc:	e9 89       	ldd	r30, Y+17	; 0x11
    36de:	fa 89       	ldd	r31, Y+18	; 0x12
    36e0:	91 83       	std	Z+1, r25	; 0x01
    36e2:	80 83       	st	Z, r24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    36e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    36e6:	98 89       	ldd	r25, Y+16	; 0x10
    36e8:	00 97       	sbiw	r24, 0x00	; 0
    36ea:	31 f0       	breq	.+12     	; 0x36f8 <prvInitialiseNewTask+0x152>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    36ec:	ef 85       	ldd	r30, Y+15	; 0x0f
    36ee:	f8 89       	ldd	r31, Y+16	; 0x10
    36f0:	89 89       	ldd	r24, Y+17	; 0x11
    36f2:	9a 89       	ldd	r25, Y+18	; 0x12
    36f4:	91 83       	std	Z+1, r25	; 0x01
    36f6:	80 83       	st	Z, r24
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    36f8:	64 96       	adiw	r28, 0x14	; 20
    36fa:	0f b6       	in	r0, 0x3f	; 63
    36fc:	f8 94       	cli
    36fe:	de bf       	out	0x3e, r29	; 62
    3700:	0f be       	out	0x3f, r0	; 63
    3702:	cd bf       	out	0x3d, r28	; 61
    3704:	cf 91       	pop	r28
    3706:	df 91       	pop	r29
    3708:	1f 91       	pop	r17
    370a:	0f 91       	pop	r16
    370c:	ef 90       	pop	r14
    370e:	df 90       	pop	r13
    3710:	cf 90       	pop	r12
    3712:	bf 90       	pop	r11
    3714:	af 90       	pop	r10
    3716:	9f 90       	pop	r9
    3718:	8f 90       	pop	r8
    371a:	08 95       	ret

0000371c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    371c:	df 93       	push	r29
    371e:	cf 93       	push	r28
    3720:	00 d0       	rcall	.+0      	; 0x3722 <prvAddNewTaskToReadyList+0x6>
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
    3726:	9a 83       	std	Y+2, r25	; 0x02
    3728:	89 83       	std	Y+1, r24	; 0x01
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    372a:	0f b6       	in	r0, 0x3f	; 63
    372c:	f8 94       	cli
    372e:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    3730:	80 91 a2 03 	lds	r24, 0x03A2
    3734:	8f 5f       	subi	r24, 0xFF	; 255
    3736:	80 93 a2 03 	sts	0x03A2, r24
		if( pxCurrentTCB == NULL )
    373a:	80 91 9f 03 	lds	r24, 0x039F
    373e:	90 91 a0 03 	lds	r25, 0x03A0
    3742:	00 97       	sbiw	r24, 0x00	; 0
    3744:	69 f4       	brne	.+26     	; 0x3760 <prvAddNewTaskToReadyList+0x44>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    3746:	89 81       	ldd	r24, Y+1	; 0x01
    3748:	9a 81       	ldd	r25, Y+2	; 0x02
    374a:	90 93 a0 03 	sts	0x03A0, r25
    374e:	80 93 9f 03 	sts	0x039F, r24

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    3752:	80 91 a2 03 	lds	r24, 0x03A2
    3756:	81 30       	cpi	r24, 0x01	; 1
    3758:	b9 f4       	brne	.+46     	; 0x3788 <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    375a:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <prvInitialiseTaskLists>
    375e:	14 c0       	rjmp	.+40     	; 0x3788 <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    3760:	80 91 a6 03 	lds	r24, 0x03A6
    3764:	88 23       	and	r24, r24
    3766:	81 f4       	brne	.+32     	; 0x3788 <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    3768:	e0 91 9f 03 	lds	r30, 0x039F
    376c:	f0 91 a0 03 	lds	r31, 0x03A0
    3770:	96 89       	ldd	r25, Z+22	; 0x16
    3772:	e9 81       	ldd	r30, Y+1	; 0x01
    3774:	fa 81       	ldd	r31, Y+2	; 0x02
    3776:	86 89       	ldd	r24, Z+22	; 0x16
    3778:	89 17       	cp	r24, r25
    377a:	30 f0       	brcs	.+12     	; 0x3788 <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
    377c:	89 81       	ldd	r24, Y+1	; 0x01
    377e:	9a 81       	ldd	r25, Y+2	; 0x02
    3780:	90 93 a0 03 	sts	0x03A0, r25
    3784:	80 93 9f 03 	sts	0x039F, r24
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    3788:	80 91 aa 03 	lds	r24, 0x03AA
    378c:	8f 5f       	subi	r24, 0xFF	; 255
    378e:	80 93 aa 03 	sts	0x03AA, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    3792:	e9 81       	ldd	r30, Y+1	; 0x01
    3794:	fa 81       	ldd	r31, Y+2	; 0x02
    3796:	96 89       	ldd	r25, Z+22	; 0x16
    3798:	80 91 a5 03 	lds	r24, 0x03A5
    379c:	89 17       	cp	r24, r25
    379e:	28 f4       	brcc	.+10     	; 0x37aa <prvAddNewTaskToReadyList+0x8e>
    37a0:	e9 81       	ldd	r30, Y+1	; 0x01
    37a2:	fa 81       	ldd	r31, Y+2	; 0x02
    37a4:	86 89       	ldd	r24, Z+22	; 0x16
    37a6:	80 93 a5 03 	sts	0x03A5, r24
    37aa:	e9 81       	ldd	r30, Y+1	; 0x01
    37ac:	fa 81       	ldd	r31, Y+2	; 0x02
    37ae:	86 89       	ldd	r24, Z+22	; 0x16
    37b0:	28 2f       	mov	r18, r24
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	c9 01       	movw	r24, r18
    37b6:	88 0f       	add	r24, r24
    37b8:	99 1f       	adc	r25, r25
    37ba:	88 0f       	add	r24, r24
    37bc:	99 1f       	adc	r25, r25
    37be:	88 0f       	add	r24, r24
    37c0:	99 1f       	adc	r25, r25
    37c2:	82 0f       	add	r24, r18
    37c4:	93 1f       	adc	r25, r19
    37c6:	ac 01       	movw	r20, r24
    37c8:	40 55       	subi	r20, 0x50	; 80
    37ca:	5c 4f       	sbci	r21, 0xFC	; 252
    37cc:	89 81       	ldd	r24, Y+1	; 0x01
    37ce:	9a 81       	ldd	r25, Y+2	; 0x02
    37d0:	9c 01       	movw	r18, r24
    37d2:	2e 5f       	subi	r18, 0xFE	; 254
    37d4:	3f 4f       	sbci	r19, 0xFF	; 255
    37d6:	ca 01       	movw	r24, r20
    37d8:	b9 01       	movw	r22, r18
    37da:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    37de:	0f 90       	pop	r0
    37e0:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    37e2:	80 91 a6 03 	lds	r24, 0x03A6
    37e6:	88 23       	and	r24, r24
    37e8:	61 f0       	breq	.+24     	; 0x3802 <prvAddNewTaskToReadyList+0xe6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    37ea:	e0 91 9f 03 	lds	r30, 0x039F
    37ee:	f0 91 a0 03 	lds	r31, 0x03A0
    37f2:	96 89       	ldd	r25, Z+22	; 0x16
    37f4:	e9 81       	ldd	r30, Y+1	; 0x01
    37f6:	fa 81       	ldd	r31, Y+2	; 0x02
    37f8:	86 89       	ldd	r24, Z+22	; 0x16
    37fa:	98 17       	cp	r25, r24
    37fc:	10 f4       	brcc	.+4      	; 0x3802 <prvAddNewTaskToReadyList+0xe6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    37fe:	0e 94 33 12 	call	0x2466	; 0x2466 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    3802:	0f 90       	pop	r0
    3804:	0f 90       	pop	r0
    3806:	cf 91       	pop	r28
    3808:	df 91       	pop	r29
    380a:	08 95       	ret

0000380c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    380c:	df 93       	push	r29
    380e:	cf 93       	push	r28
    3810:	00 d0       	rcall	.+0      	; 0x3812 <vTaskDelete+0x6>
    3812:	00 d0       	rcall	.+0      	; 0x3814 <vTaskDelete+0x8>
    3814:	00 d0       	rcall	.+0      	; 0x3816 <vTaskDelete+0xa>
    3816:	cd b7       	in	r28, 0x3d	; 61
    3818:	de b7       	in	r29, 0x3e	; 62
    381a:	9c 83       	std	Y+4, r25	; 0x04
    381c:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    381e:	0f b6       	in	r0, 0x3f	; 63
    3820:	f8 94       	cli
    3822:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    3824:	8b 81       	ldd	r24, Y+3	; 0x03
    3826:	9c 81       	ldd	r25, Y+4	; 0x04
    3828:	00 97       	sbiw	r24, 0x00	; 0
    382a:	39 f4       	brne	.+14     	; 0x383a <vTaskDelete+0x2e>
    382c:	80 91 9f 03 	lds	r24, 0x039F
    3830:	90 91 a0 03 	lds	r25, 0x03A0
    3834:	9e 83       	std	Y+6, r25	; 0x06
    3836:	8d 83       	std	Y+5, r24	; 0x05
    3838:	04 c0       	rjmp	.+8      	; 0x3842 <vTaskDelete+0x36>
    383a:	8b 81       	ldd	r24, Y+3	; 0x03
    383c:	9c 81       	ldd	r25, Y+4	; 0x04
    383e:	9e 83       	std	Y+6, r25	; 0x06
    3840:	8d 83       	std	Y+5, r24	; 0x05
    3842:	8d 81       	ldd	r24, Y+5	; 0x05
    3844:	9e 81       	ldd	r25, Y+6	; 0x06
    3846:	9a 83       	std	Y+2, r25	; 0x02
    3848:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    384a:	89 81       	ldd	r24, Y+1	; 0x01
    384c:	9a 81       	ldd	r25, Y+2	; 0x02
    384e:	02 96       	adiw	r24, 0x02	; 2
    3850:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3854:	e9 81       	ldd	r30, Y+1	; 0x01
    3856:	fa 81       	ldd	r31, Y+2	; 0x02
    3858:	84 89       	ldd	r24, Z+20	; 0x14
    385a:	95 89       	ldd	r25, Z+21	; 0x15
    385c:	00 97       	sbiw	r24, 0x00	; 0
    385e:	29 f0       	breq	.+10     	; 0x386a <vTaskDelete+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3860:	89 81       	ldd	r24, Y+1	; 0x01
    3862:	9a 81       	ldd	r25, Y+2	; 0x02
    3864:	0c 96       	adiw	r24, 0x0c	; 12
    3866:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    386a:	80 91 aa 03 	lds	r24, 0x03AA
    386e:	8f 5f       	subi	r24, 0xFF	; 255
    3870:	80 93 aa 03 	sts	0x03AA, r24

			if( pxTCB == pxCurrentTCB )
    3874:	20 91 9f 03 	lds	r18, 0x039F
    3878:	30 91 a0 03 	lds	r19, 0x03A0
    387c:	89 81       	ldd	r24, Y+1	; 0x01
    387e:	9a 81       	ldd	r25, Y+2	; 0x02
    3880:	82 17       	cp	r24, r18
    3882:	93 07       	cpc	r25, r19
    3884:	81 f4       	brne	.+32     	; 0x38a6 <vTaskDelete+0x9a>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    3886:	89 81       	ldd	r24, Y+1	; 0x01
    3888:	9a 81       	ldd	r25, Y+2	; 0x02
    388a:	9c 01       	movw	r18, r24
    388c:	2e 5f       	subi	r18, 0xFE	; 254
    388e:	3f 4f       	sbci	r19, 0xFF	; 255
    3890:	8c ef       	ldi	r24, 0xFC	; 252
    3892:	93 e0       	ldi	r25, 0x03	; 3
    3894:	b9 01       	movw	r22, r18
    3896:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    389a:	80 91 a1 03 	lds	r24, 0x03A1
    389e:	8f 5f       	subi	r24, 0xFF	; 255
    38a0:	80 93 a1 03 	sts	0x03A1, r24
    38a4:	0b c0       	rjmp	.+22     	; 0x38bc <vTaskDelete+0xb0>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    38a6:	80 91 a2 03 	lds	r24, 0x03A2
    38aa:	81 50       	subi	r24, 0x01	; 1
    38ac:	80 93 a2 03 	sts	0x03A2, r24
				prvDeleteTCB( pxTCB );
    38b0:	89 81       	ldd	r24, Y+1	; 0x01
    38b2:	9a 81       	ldd	r25, Y+2	; 0x02
    38b4:	0e 94 50 24 	call	0x48a0	; 0x48a0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    38b8:	0e 94 66 24 	call	0x48cc	; 0x48cc <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    38bc:	0f 90       	pop	r0
    38be:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    38c0:	80 91 a6 03 	lds	r24, 0x03A6
    38c4:	88 23       	and	r24, r24
    38c6:	59 f0       	breq	.+22     	; 0x38de <vTaskDelete+0xd2>
		{
			if( pxTCB == pxCurrentTCB )
    38c8:	20 91 9f 03 	lds	r18, 0x039F
    38cc:	30 91 a0 03 	lds	r19, 0x03A0
    38d0:	89 81       	ldd	r24, Y+1	; 0x01
    38d2:	9a 81       	ldd	r25, Y+2	; 0x02
    38d4:	82 17       	cp	r24, r18
    38d6:	93 07       	cpc	r25, r19
    38d8:	11 f4       	brne	.+4      	; 0x38de <vTaskDelete+0xd2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    38da:	0e 94 33 12 	call	0x2466	; 0x2466 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    38de:	26 96       	adiw	r28, 0x06	; 6
    38e0:	0f b6       	in	r0, 0x3f	; 63
    38e2:	f8 94       	cli
    38e4:	de bf       	out	0x3e, r29	; 62
    38e6:	0f be       	out	0x3f, r0	; 63
    38e8:	cd bf       	out	0x3d, r28	; 61
    38ea:	cf 91       	pop	r28
    38ec:	df 91       	pop	r29
    38ee:	08 95       	ret

000038f0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    38f0:	df 93       	push	r29
    38f2:	cf 93       	push	r28
    38f4:	cd b7       	in	r28, 0x3d	; 61
    38f6:	de b7       	in	r29, 0x3e	; 62
    38f8:	2a 97       	sbiw	r28, 0x0a	; 10
    38fa:	0f b6       	in	r0, 0x3f	; 63
    38fc:	f8 94       	cli
    38fe:	de bf       	out	0x3e, r29	; 62
    3900:	0f be       	out	0x3f, r0	; 63
    3902:	cd bf       	out	0x3d, r28	; 61
    3904:	98 87       	std	Y+8, r25	; 0x08
    3906:	8f 83       	std	Y+7, r24	; 0x07
    3908:	7a 87       	std	Y+10, r23	; 0x0a
    390a:	69 87       	std	Y+9, r22	; 0x09
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    390c:	1b 82       	std	Y+3, r1	; 0x03

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    390e:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    3912:	80 91 a3 03 	lds	r24, 0x03A3
    3916:	90 91 a4 03 	lds	r25, 0x03A4
    391a:	9a 83       	std	Y+2, r25	; 0x02
    391c:	89 83       	std	Y+1, r24	; 0x01

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    391e:	ef 81       	ldd	r30, Y+7	; 0x07
    3920:	f8 85       	ldd	r31, Y+8	; 0x08
    3922:	20 81       	ld	r18, Z
    3924:	31 81       	ldd	r19, Z+1	; 0x01
    3926:	89 85       	ldd	r24, Y+9	; 0x09
    3928:	9a 85       	ldd	r25, Y+10	; 0x0a
    392a:	82 0f       	add	r24, r18
    392c:	93 1f       	adc	r25, r19
    392e:	9e 83       	std	Y+6, r25	; 0x06
    3930:	8d 83       	std	Y+5, r24	; 0x05

			if( xConstTickCount < *pxPreviousWakeTime )
    3932:	ef 81       	ldd	r30, Y+7	; 0x07
    3934:	f8 85       	ldd	r31, Y+8	; 0x08
    3936:	20 81       	ld	r18, Z
    3938:	31 81       	ldd	r19, Z+1	; 0x01
    393a:	89 81       	ldd	r24, Y+1	; 0x01
    393c:	9a 81       	ldd	r25, Y+2	; 0x02
    393e:	82 17       	cp	r24, r18
    3940:	93 07       	cpc	r25, r19
    3942:	98 f4       	brcc	.+38     	; 0x396a <vTaskDelayUntil+0x7a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    3944:	ef 81       	ldd	r30, Y+7	; 0x07
    3946:	f8 85       	ldd	r31, Y+8	; 0x08
    3948:	20 81       	ld	r18, Z
    394a:	31 81       	ldd	r19, Z+1	; 0x01
    394c:	8d 81       	ldd	r24, Y+5	; 0x05
    394e:	9e 81       	ldd	r25, Y+6	; 0x06
    3950:	82 17       	cp	r24, r18
    3952:	93 07       	cpc	r25, r19
    3954:	e0 f4       	brcc	.+56     	; 0x398e <vTaskDelayUntil+0x9e>
    3956:	2d 81       	ldd	r18, Y+5	; 0x05
    3958:	3e 81       	ldd	r19, Y+6	; 0x06
    395a:	89 81       	ldd	r24, Y+1	; 0x01
    395c:	9a 81       	ldd	r25, Y+2	; 0x02
    395e:	82 17       	cp	r24, r18
    3960:	93 07       	cpc	r25, r19
    3962:	a8 f4       	brcc	.+42     	; 0x398e <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    3964:	81 e0       	ldi	r24, 0x01	; 1
    3966:	8b 83       	std	Y+3, r24	; 0x03
    3968:	12 c0       	rjmp	.+36     	; 0x398e <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    396a:	ef 81       	ldd	r30, Y+7	; 0x07
    396c:	f8 85       	ldd	r31, Y+8	; 0x08
    396e:	20 81       	ld	r18, Z
    3970:	31 81       	ldd	r19, Z+1	; 0x01
    3972:	8d 81       	ldd	r24, Y+5	; 0x05
    3974:	9e 81       	ldd	r25, Y+6	; 0x06
    3976:	82 17       	cp	r24, r18
    3978:	93 07       	cpc	r25, r19
    397a:	38 f0       	brcs	.+14     	; 0x398a <vTaskDelayUntil+0x9a>
    397c:	2d 81       	ldd	r18, Y+5	; 0x05
    397e:	3e 81       	ldd	r19, Y+6	; 0x06
    3980:	89 81       	ldd	r24, Y+1	; 0x01
    3982:	9a 81       	ldd	r25, Y+2	; 0x02
    3984:	82 17       	cp	r24, r18
    3986:	93 07       	cpc	r25, r19
    3988:	10 f4       	brcc	.+4      	; 0x398e <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	8b 83       	std	Y+3, r24	; 0x03
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    398e:	ef 81       	ldd	r30, Y+7	; 0x07
    3990:	f8 85       	ldd	r31, Y+8	; 0x08
    3992:	8d 81       	ldd	r24, Y+5	; 0x05
    3994:	9e 81       	ldd	r25, Y+6	; 0x06
    3996:	91 83       	std	Z+1, r25	; 0x01
    3998:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    399a:	8b 81       	ldd	r24, Y+3	; 0x03
    399c:	88 23       	and	r24, r24
    399e:	49 f0       	breq	.+18     	; 0x39b2 <vTaskDelayUntil+0xc2>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    39a0:	8d 81       	ldd	r24, Y+5	; 0x05
    39a2:	9e 81       	ldd	r25, Y+6	; 0x06
    39a4:	29 81       	ldd	r18, Y+1	; 0x01
    39a6:	3a 81       	ldd	r19, Y+2	; 0x02
    39a8:	82 1b       	sub	r24, r18
    39aa:	93 0b       	sbc	r25, r19
    39ac:	60 e0       	ldi	r22, 0x00	; 0
    39ae:	0e 94 89 29 	call	0x5312	; 0x5312 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    39b2:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <xTaskResumeAll>
    39b6:	8c 83       	std	Y+4, r24	; 0x04

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    39b8:	8c 81       	ldd	r24, Y+4	; 0x04
    39ba:	88 23       	and	r24, r24
    39bc:	11 f4       	brne	.+4      	; 0x39c2 <vTaskDelayUntil+0xd2>
		{
			portYIELD_WITHIN_API();
    39be:	0e 94 33 12 	call	0x2466	; 0x2466 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    39c2:	2a 96       	adiw	r28, 0x0a	; 10
    39c4:	0f b6       	in	r0, 0x3f	; 63
    39c6:	f8 94       	cli
    39c8:	de bf       	out	0x3e, r29	; 62
    39ca:	0f be       	out	0x3f, r0	; 63
    39cc:	cd bf       	out	0x3d, r28	; 61
    39ce:	cf 91       	pop	r28
    39d0:	df 91       	pop	r29
    39d2:	08 95       	ret

000039d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    39d4:	df 93       	push	r29
    39d6:	cf 93       	push	r28
    39d8:	00 d0       	rcall	.+0      	; 0x39da <vTaskDelay+0x6>
    39da:	0f 92       	push	r0
    39dc:	cd b7       	in	r28, 0x3d	; 61
    39de:	de b7       	in	r29, 0x3e	; 62
    39e0:	9b 83       	std	Y+3, r25	; 0x03
    39e2:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xAlreadyYielded = pdFALSE;
    39e4:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    39e6:	8a 81       	ldd	r24, Y+2	; 0x02
    39e8:	9b 81       	ldd	r25, Y+3	; 0x03
    39ea:	00 97       	sbiw	r24, 0x00	; 0
    39ec:	51 f0       	breq	.+20     	; 0x3a02 <vTaskDelay+0x2e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    39ee:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    39f2:	8a 81       	ldd	r24, Y+2	; 0x02
    39f4:	9b 81       	ldd	r25, Y+3	; 0x03
    39f6:	60 e0       	ldi	r22, 0x00	; 0
    39f8:	0e 94 89 29 	call	0x5312	; 0x5312 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    39fc:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <xTaskResumeAll>
    3a00:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3a02:	89 81       	ldd	r24, Y+1	; 0x01
    3a04:	88 23       	and	r24, r24
    3a06:	11 f4       	brne	.+4      	; 0x3a0c <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    3a08:	0e 94 33 12 	call	0x2466	; 0x2466 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3a0c:	0f 90       	pop	r0
    3a0e:	0f 90       	pop	r0
    3a10:	0f 90       	pop	r0
    3a12:	cf 91       	pop	r28
    3a14:	df 91       	pop	r29
    3a16:	08 95       	ret

00003a18 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
    3a18:	df 93       	push	r29
    3a1a:	cf 93       	push	r28
    3a1c:	cd b7       	in	r28, 0x3d	; 61
    3a1e:	de b7       	in	r29, 0x3e	; 62
    3a20:	27 97       	sbiw	r28, 0x07	; 7
    3a22:	0f b6       	in	r0, 0x3f	; 63
    3a24:	f8 94       	cli
    3a26:	de bf       	out	0x3e, r29	; 62
    3a28:	0f be       	out	0x3f, r0	; 63
    3a2a:	cd bf       	out	0x3d, r28	; 61
    3a2c:	9d 83       	std	Y+5, r25	; 0x05
    3a2e:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
    3a30:	0f b6       	in	r0, 0x3f	; 63
    3a32:	f8 94       	cli
    3a34:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    3a36:	8c 81       	ldd	r24, Y+4	; 0x04
    3a38:	9d 81       	ldd	r25, Y+5	; 0x05
    3a3a:	00 97       	sbiw	r24, 0x00	; 0
    3a3c:	39 f4       	brne	.+14     	; 0x3a4c <uxTaskPriorityGet+0x34>
    3a3e:	80 91 9f 03 	lds	r24, 0x039F
    3a42:	90 91 a0 03 	lds	r25, 0x03A0
    3a46:	9f 83       	std	Y+7, r25	; 0x07
    3a48:	8e 83       	std	Y+6, r24	; 0x06
    3a4a:	04 c0       	rjmp	.+8      	; 0x3a54 <uxTaskPriorityGet+0x3c>
    3a4c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a4e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a50:	9f 83       	std	Y+7, r25	; 0x07
    3a52:	8e 83       	std	Y+6, r24	; 0x06
    3a54:	8e 81       	ldd	r24, Y+6	; 0x06
    3a56:	9f 81       	ldd	r25, Y+7	; 0x07
    3a58:	9b 83       	std	Y+3, r25	; 0x03
    3a5a:	8a 83       	std	Y+2, r24	; 0x02
			uxReturn = pxTCB->uxPriority;
    3a5c:	ea 81       	ldd	r30, Y+2	; 0x02
    3a5e:	fb 81       	ldd	r31, Y+3	; 0x03
    3a60:	86 89       	ldd	r24, Z+22	; 0x16
    3a62:	89 83       	std	Y+1, r24	; 0x01
		}
		taskEXIT_CRITICAL();
    3a64:	0f 90       	pop	r0
    3a66:	0f be       	out	0x3f, r0	; 63

		return uxReturn;
    3a68:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3a6a:	27 96       	adiw	r28, 0x07	; 7
    3a6c:	0f b6       	in	r0, 0x3f	; 63
    3a6e:	f8 94       	cli
    3a70:	de bf       	out	0x3e, r29	; 62
    3a72:	0f be       	out	0x3f, r0	; 63
    3a74:	cd bf       	out	0x3d, r28	; 61
    3a76:	cf 91       	pop	r28
    3a78:	df 91       	pop	r29
    3a7a:	08 95       	ret

00003a7c <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
    3a7c:	df 93       	push	r29
    3a7e:	cf 93       	push	r28
    3a80:	cd b7       	in	r28, 0x3d	; 61
    3a82:	de b7       	in	r29, 0x3e	; 62
    3a84:	28 97       	sbiw	r28, 0x08	; 8
    3a86:	0f b6       	in	r0, 0x3f	; 63
    3a88:	f8 94       	cli
    3a8a:	de bf       	out	0x3e, r29	; 62
    3a8c:	0f be       	out	0x3f, r0	; 63
    3a8e:	cd bf       	out	0x3d, r28	; 61
    3a90:	9e 83       	std	Y+6, r25	; 0x06
    3a92:	8d 83       	std	Y+5, r24	; 0x05
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
    3a94:	19 82       	std	Y+1, r1	; 0x01
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    3a96:	8d 81       	ldd	r24, Y+5	; 0x05
    3a98:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9a:	00 97       	sbiw	r24, 0x00	; 0
    3a9c:	39 f4       	brne	.+14     	; 0x3aac <uxTaskPriorityGetFromISR+0x30>
    3a9e:	80 91 9f 03 	lds	r24, 0x039F
    3aa2:	90 91 a0 03 	lds	r25, 0x03A0
    3aa6:	98 87       	std	Y+8, r25	; 0x08
    3aa8:	8f 83       	std	Y+7, r24	; 0x07
    3aaa:	04 c0       	rjmp	.+8      	; 0x3ab4 <uxTaskPriorityGetFromISR+0x38>
    3aac:	8d 81       	ldd	r24, Y+5	; 0x05
    3aae:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab0:	98 87       	std	Y+8, r25	; 0x08
    3ab2:	8f 83       	std	Y+7, r24	; 0x07
    3ab4:	8f 81       	ldd	r24, Y+7	; 0x07
    3ab6:	98 85       	ldd	r25, Y+8	; 0x08
    3ab8:	9c 83       	std	Y+4, r25	; 0x04
    3aba:	8b 83       	std	Y+3, r24	; 0x03
			uxReturn = pxTCB->uxPriority;
    3abc:	eb 81       	ldd	r30, Y+3	; 0x03
    3abe:	fc 81       	ldd	r31, Y+4	; 0x04
    3ac0:	86 89       	ldd	r24, Z+22	; 0x16
    3ac2:	8a 83       	std	Y+2, r24	; 0x02
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
    3ac4:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    3ac6:	28 96       	adiw	r28, 0x08	; 8
    3ac8:	0f b6       	in	r0, 0x3f	; 63
    3aca:	f8 94       	cli
    3acc:	de bf       	out	0x3e, r29	; 62
    3ace:	0f be       	out	0x3f, r0	; 63
    3ad0:	cd bf       	out	0x3d, r28	; 61
    3ad2:	cf 91       	pop	r28
    3ad4:	df 91       	pop	r29
    3ad6:	08 95       	ret

00003ad8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    3ad8:	df 93       	push	r29
    3ada:	cf 93       	push	r28
    3adc:	cd b7       	in	r28, 0x3d	; 61
    3ade:	de b7       	in	r29, 0x3e	; 62
    3ae0:	2a 97       	sbiw	r28, 0x0a	; 10
    3ae2:	0f b6       	in	r0, 0x3f	; 63
    3ae4:	f8 94       	cli
    3ae6:	de bf       	out	0x3e, r29	; 62
    3ae8:	0f be       	out	0x3f, r0	; 63
    3aea:	cd bf       	out	0x3d, r28	; 61
    3aec:	9f 83       	std	Y+7, r25	; 0x07
    3aee:	8e 83       	std	Y+6, r24	; 0x06
    3af0:	68 87       	std	Y+8, r22	; 0x08
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    3af2:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    3af4:	88 85       	ldd	r24, Y+8	; 0x08
    3af6:	85 30       	cpi	r24, 0x05	; 5
    3af8:	10 f0       	brcs	.+4      	; 0x3afe <vTaskPrioritySet+0x26>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    3afa:	84 e0       	ldi	r24, 0x04	; 4
    3afc:	88 87       	std	Y+8, r24	; 0x08
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    3afe:	0f b6       	in	r0, 0x3f	; 63
    3b00:	f8 94       	cli
    3b02:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    3b04:	8e 81       	ldd	r24, Y+6	; 0x06
    3b06:	9f 81       	ldd	r25, Y+7	; 0x07
    3b08:	00 97       	sbiw	r24, 0x00	; 0
    3b0a:	39 f4       	brne	.+14     	; 0x3b1a <vTaskPrioritySet+0x42>
    3b0c:	80 91 9f 03 	lds	r24, 0x039F
    3b10:	90 91 a0 03 	lds	r25, 0x03A0
    3b14:	9a 87       	std	Y+10, r25	; 0x0a
    3b16:	89 87       	std	Y+9, r24	; 0x09
    3b18:	04 c0       	rjmp	.+8      	; 0x3b22 <vTaskPrioritySet+0x4a>
    3b1a:	8e 81       	ldd	r24, Y+6	; 0x06
    3b1c:	9f 81       	ldd	r25, Y+7	; 0x07
    3b1e:	9a 87       	std	Y+10, r25	; 0x0a
    3b20:	89 87       	std	Y+9, r24	; 0x09
    3b22:	89 85       	ldd	r24, Y+9	; 0x09
    3b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b26:	9d 83       	std	Y+5, r25	; 0x05
    3b28:	8c 83       	std	Y+4, r24	; 0x04

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    3b2a:	ec 81       	ldd	r30, Y+4	; 0x04
    3b2c:	fd 81       	ldd	r31, Y+5	; 0x05
    3b2e:	83 a1       	ldd	r24, Z+35	; 0x23
    3b30:	8b 83       	std	Y+3, r24	; 0x03
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    3b32:	9b 81       	ldd	r25, Y+3	; 0x03
    3b34:	88 85       	ldd	r24, Y+8	; 0x08
    3b36:	98 17       	cp	r25, r24
    3b38:	09 f4       	brne	.+2      	; 0x3b3c <vTaskPrioritySet+0x64>
    3b3a:	8d c0       	rjmp	.+282    	; 0x3c56 <vTaskPrioritySet+0x17e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    3b3c:	98 85       	ldd	r25, Y+8	; 0x08
    3b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b40:	89 17       	cp	r24, r25
    3b42:	a0 f4       	brcc	.+40     	; 0x3b6c <vTaskPrioritySet+0x94>
				{
					if( pxTCB != pxCurrentTCB )
    3b44:	20 91 9f 03 	lds	r18, 0x039F
    3b48:	30 91 a0 03 	lds	r19, 0x03A0
    3b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b4e:	9d 81       	ldd	r25, Y+5	; 0x05
    3b50:	82 17       	cp	r24, r18
    3b52:	93 07       	cpc	r25, r19
    3b54:	b1 f0       	breq	.+44     	; 0x3b82 <vTaskPrioritySet+0xaa>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    3b56:	e0 91 9f 03 	lds	r30, 0x039F
    3b5a:	f0 91 a0 03 	lds	r31, 0x03A0
    3b5e:	96 89       	ldd	r25, Z+22	; 0x16
    3b60:	88 85       	ldd	r24, Y+8	; 0x08
    3b62:	89 17       	cp	r24, r25
    3b64:	70 f0       	brcs	.+28     	; 0x3b82 <vTaskPrioritySet+0xaa>
						{
							xYieldRequired = pdTRUE;
    3b66:	81 e0       	ldi	r24, 0x01	; 1
    3b68:	89 83       	std	Y+1, r24	; 0x01
    3b6a:	0b c0       	rjmp	.+22     	; 0x3b82 <vTaskPrioritySet+0xaa>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    3b6c:	20 91 9f 03 	lds	r18, 0x039F
    3b70:	30 91 a0 03 	lds	r19, 0x03A0
    3b74:	8c 81       	ldd	r24, Y+4	; 0x04
    3b76:	9d 81       	ldd	r25, Y+5	; 0x05
    3b78:	82 17       	cp	r24, r18
    3b7a:	93 07       	cpc	r25, r19
    3b7c:	11 f4       	brne	.+4      	; 0x3b82 <vTaskPrioritySet+0xaa>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
    3b7e:	81 e0       	ldi	r24, 0x01	; 1
    3b80:	89 83       	std	Y+1, r24	; 0x01
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    3b82:	ec 81       	ldd	r30, Y+4	; 0x04
    3b84:	fd 81       	ldd	r31, Y+5	; 0x05
    3b86:	86 89       	ldd	r24, Z+22	; 0x16
    3b88:	8a 83       	std	Y+2, r24	; 0x02

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    3b8a:	ec 81       	ldd	r30, Y+4	; 0x04
    3b8c:	fd 81       	ldd	r31, Y+5	; 0x05
    3b8e:	93 a1       	ldd	r25, Z+35	; 0x23
    3b90:	ec 81       	ldd	r30, Y+4	; 0x04
    3b92:	fd 81       	ldd	r31, Y+5	; 0x05
    3b94:	86 89       	ldd	r24, Z+22	; 0x16
    3b96:	98 17       	cp	r25, r24
    3b98:	21 f4       	brne	.+8      	; 0x3ba2 <vTaskPrioritySet+0xca>
					{
						pxTCB->uxPriority = uxNewPriority;
    3b9a:	ec 81       	ldd	r30, Y+4	; 0x04
    3b9c:	fd 81       	ldd	r31, Y+5	; 0x05
    3b9e:	88 85       	ldd	r24, Y+8	; 0x08
    3ba0:	86 8b       	std	Z+22, r24	; 0x16
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    3ba2:	ec 81       	ldd	r30, Y+4	; 0x04
    3ba4:	fd 81       	ldd	r31, Y+5	; 0x05
    3ba6:	88 85       	ldd	r24, Y+8	; 0x08
    3ba8:	83 a3       	std	Z+35, r24	; 0x23
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3baa:	ec 81       	ldd	r30, Y+4	; 0x04
    3bac:	fd 81       	ldd	r31, Y+5	; 0x05
    3bae:	84 85       	ldd	r24, Z+12	; 0x0c
    3bb0:	95 85       	ldd	r25, Z+13	; 0x0d
    3bb2:	99 23       	and	r25, r25
    3bb4:	5c f0       	brlt	.+22     	; 0x3bcc <vTaskPrioritySet+0xf4>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3bb6:	88 85       	ldd	r24, Y+8	; 0x08
    3bb8:	28 2f       	mov	r18, r24
    3bba:	30 e0       	ldi	r19, 0x00	; 0
    3bbc:	85 e0       	ldi	r24, 0x05	; 5
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	82 1b       	sub	r24, r18
    3bc2:	93 0b       	sbc	r25, r19
    3bc4:	ec 81       	ldd	r30, Y+4	; 0x04
    3bc6:	fd 81       	ldd	r31, Y+5	; 0x05
    3bc8:	95 87       	std	Z+13, r25	; 0x0d
    3bca:	84 87       	std	Z+12, r24	; 0x0c

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    3bcc:	ec 81       	ldd	r30, Y+4	; 0x04
    3bce:	fd 81       	ldd	r31, Y+5	; 0x05
    3bd0:	42 85       	ldd	r20, Z+10	; 0x0a
    3bd2:	53 85       	ldd	r21, Z+11	; 0x0b
    3bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd6:	28 2f       	mov	r18, r24
    3bd8:	30 e0       	ldi	r19, 0x00	; 0
    3bda:	c9 01       	movw	r24, r18
    3bdc:	88 0f       	add	r24, r24
    3bde:	99 1f       	adc	r25, r25
    3be0:	88 0f       	add	r24, r24
    3be2:	99 1f       	adc	r25, r25
    3be4:	88 0f       	add	r24, r24
    3be6:	99 1f       	adc	r25, r25
    3be8:	82 0f       	add	r24, r18
    3bea:	93 1f       	adc	r25, r19
    3bec:	80 55       	subi	r24, 0x50	; 80
    3bee:	9c 4f       	sbci	r25, 0xFC	; 252
    3bf0:	48 17       	cp	r20, r24
    3bf2:	59 07       	cpc	r21, r25
    3bf4:	59 f5       	brne	.+86     	; 0x3c4c <vTaskPrioritySet+0x174>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    3bf8:	9d 81       	ldd	r25, Y+5	; 0x05
    3bfa:	02 96       	adiw	r24, 0x02	; 2
    3bfc:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    3c00:	ec 81       	ldd	r30, Y+4	; 0x04
    3c02:	fd 81       	ldd	r31, Y+5	; 0x05
    3c04:	96 89       	ldd	r25, Z+22	; 0x16
    3c06:	80 91 a5 03 	lds	r24, 0x03A5
    3c0a:	89 17       	cp	r24, r25
    3c0c:	28 f4       	brcc	.+10     	; 0x3c18 <vTaskPrioritySet+0x140>
    3c0e:	ec 81       	ldd	r30, Y+4	; 0x04
    3c10:	fd 81       	ldd	r31, Y+5	; 0x05
    3c12:	86 89       	ldd	r24, Z+22	; 0x16
    3c14:	80 93 a5 03 	sts	0x03A5, r24
    3c18:	ec 81       	ldd	r30, Y+4	; 0x04
    3c1a:	fd 81       	ldd	r31, Y+5	; 0x05
    3c1c:	86 89       	ldd	r24, Z+22	; 0x16
    3c1e:	28 2f       	mov	r18, r24
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	c9 01       	movw	r24, r18
    3c24:	88 0f       	add	r24, r24
    3c26:	99 1f       	adc	r25, r25
    3c28:	88 0f       	add	r24, r24
    3c2a:	99 1f       	adc	r25, r25
    3c2c:	88 0f       	add	r24, r24
    3c2e:	99 1f       	adc	r25, r25
    3c30:	82 0f       	add	r24, r18
    3c32:	93 1f       	adc	r25, r19
    3c34:	ac 01       	movw	r20, r24
    3c36:	40 55       	subi	r20, 0x50	; 80
    3c38:	5c 4f       	sbci	r21, 0xFC	; 252
    3c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    3c3c:	9d 81       	ldd	r25, Y+5	; 0x05
    3c3e:	9c 01       	movw	r18, r24
    3c40:	2e 5f       	subi	r18, 0xFE	; 254
    3c42:	3f 4f       	sbci	r19, 0xFF	; 255
    3c44:	ca 01       	movw	r24, r20
    3c46:	b9 01       	movw	r22, r18
    3c48:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
    3c4c:	89 81       	ldd	r24, Y+1	; 0x01
    3c4e:	88 23       	and	r24, r24
    3c50:	11 f0       	breq	.+4      	; 0x3c56 <vTaskPrioritySet+0x17e>
				{
					taskYIELD_IF_USING_PREEMPTION();
    3c52:	0e 94 33 12 	call	0x2466	; 0x2466 <vPortYield>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    3c56:	0f 90       	pop	r0
    3c58:	0f be       	out	0x3f, r0	; 63
	}
    3c5a:	2a 96       	adiw	r28, 0x0a	; 10
    3c5c:	0f b6       	in	r0, 0x3f	; 63
    3c5e:	f8 94       	cli
    3c60:	de bf       	out	0x3e, r29	; 62
    3c62:	0f be       	out	0x3f, r0	; 63
    3c64:	cd bf       	out	0x3d, r28	; 61
    3c66:	cf 91       	pop	r28
    3c68:	df 91       	pop	r29
    3c6a:	08 95       	ret

00003c6c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    3c6c:	df 93       	push	r29
    3c6e:	cf 93       	push	r28
    3c70:	00 d0       	rcall	.+0      	; 0x3c72 <vTaskSuspend+0x6>
    3c72:	00 d0       	rcall	.+0      	; 0x3c74 <vTaskSuspend+0x8>
    3c74:	00 d0       	rcall	.+0      	; 0x3c76 <vTaskSuspend+0xa>
    3c76:	cd b7       	in	r28, 0x3d	; 61
    3c78:	de b7       	in	r29, 0x3e	; 62
    3c7a:	9c 83       	std	Y+4, r25	; 0x04
    3c7c:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    3c7e:	0f b6       	in	r0, 0x3f	; 63
    3c80:	f8 94       	cli
    3c82:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    3c84:	8b 81       	ldd	r24, Y+3	; 0x03
    3c86:	9c 81       	ldd	r25, Y+4	; 0x04
    3c88:	00 97       	sbiw	r24, 0x00	; 0
    3c8a:	39 f4       	brne	.+14     	; 0x3c9a <vTaskSuspend+0x2e>
    3c8c:	80 91 9f 03 	lds	r24, 0x039F
    3c90:	90 91 a0 03 	lds	r25, 0x03A0
    3c94:	9e 83       	std	Y+6, r25	; 0x06
    3c96:	8d 83       	std	Y+5, r24	; 0x05
    3c98:	04 c0       	rjmp	.+8      	; 0x3ca2 <vTaskSuspend+0x36>
    3c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c9e:	9e 83       	std	Y+6, r25	; 0x06
    3ca0:	8d 83       	std	Y+5, r24	; 0x05
    3ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ca6:	9a 83       	std	Y+2, r25	; 0x02
    3ca8:	89 83       	std	Y+1, r24	; 0x01

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3caa:	89 81       	ldd	r24, Y+1	; 0x01
    3cac:	9a 81       	ldd	r25, Y+2	; 0x02
    3cae:	02 96       	adiw	r24, 0x02	; 2
    3cb0:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3cb4:	e9 81       	ldd	r30, Y+1	; 0x01
    3cb6:	fa 81       	ldd	r31, Y+2	; 0x02
    3cb8:	84 89       	ldd	r24, Z+20	; 0x14
    3cba:	95 89       	ldd	r25, Z+21	; 0x15
    3cbc:	00 97       	sbiw	r24, 0x00	; 0
    3cbe:	29 f0       	breq	.+10     	; 0x3cca <vTaskSuspend+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3cc0:	89 81       	ldd	r24, Y+1	; 0x01
    3cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc4:	0c 96       	adiw	r24, 0x0c	; 12
    3cc6:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    3cca:	89 81       	ldd	r24, Y+1	; 0x01
    3ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cce:	9c 01       	movw	r18, r24
    3cd0:	2e 5f       	subi	r18, 0xFE	; 254
    3cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd4:	85 e0       	ldi	r24, 0x05	; 5
    3cd6:	94 e0       	ldi	r25, 0x04	; 4
    3cd8:	b9 01       	movw	r22, r18
    3cda:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    3cde:	0f 90       	pop	r0
    3ce0:	0f be       	out	0x3f, r0	; 63

		if( xSchedulerRunning != pdFALSE )
    3ce2:	80 91 a6 03 	lds	r24, 0x03A6
    3ce6:	88 23       	and	r24, r24
    3ce8:	39 f0       	breq	.+14     	; 0x3cf8 <vTaskSuspend+0x8c>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    3cea:	0f b6       	in	r0, 0x3f	; 63
    3cec:	f8 94       	cli
    3cee:	0f 92       	push	r0
			{
				prvResetNextTaskUnblockTime();
    3cf0:	0e 94 66 24 	call	0x48cc	; 0x48cc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    3cf4:	0f 90       	pop	r0
    3cf6:	0f be       	out	0x3f, r0	; 63
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    3cf8:	20 91 9f 03 	lds	r18, 0x039F
    3cfc:	30 91 a0 03 	lds	r19, 0x03A0
    3d00:	89 81       	ldd	r24, Y+1	; 0x01
    3d02:	9a 81       	ldd	r25, Y+2	; 0x02
    3d04:	82 17       	cp	r24, r18
    3d06:	93 07       	cpc	r25, r19
    3d08:	a1 f4       	brne	.+40     	; 0x3d32 <vTaskSuspend+0xc6>
		{
			if( xSchedulerRunning != pdFALSE )
    3d0a:	80 91 a6 03 	lds	r24, 0x03A6
    3d0e:	88 23       	and	r24, r24
    3d10:	19 f0       	breq	.+6      	; 0x3d18 <vTaskSuspend+0xac>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    3d12:	0e 94 33 12 	call	0x2466	; 0x2466 <vPortYield>
    3d16:	0d c0       	rjmp	.+26     	; 0x3d32 <vTaskSuspend+0xc6>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    3d18:	90 91 05 04 	lds	r25, 0x0405
    3d1c:	80 91 a2 03 	lds	r24, 0x03A2
    3d20:	98 17       	cp	r25, r24
    3d22:	29 f4       	brne	.+10     	; 0x3d2e <vTaskSuspend+0xc2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    3d24:	10 92 a0 03 	sts	0x03A0, r1
    3d28:	10 92 9f 03 	sts	0x039F, r1
    3d2c:	02 c0       	rjmp	.+4      	; 0x3d32 <vTaskSuspend+0xc6>
				}
				else
				{
					vTaskSwitchContext();
    3d2e:	0e 94 a1 21 	call	0x4342	; 0x4342 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3d32:	26 96       	adiw	r28, 0x06	; 6
    3d34:	0f b6       	in	r0, 0x3f	; 63
    3d36:	f8 94       	cli
    3d38:	de bf       	out	0x3e, r29	; 62
    3d3a:	0f be       	out	0x3f, r0	; 63
    3d3c:	cd bf       	out	0x3d, r28	; 61
    3d3e:	cf 91       	pop	r28
    3d40:	df 91       	pop	r29
    3d42:	08 95       	ret

00003d44 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    3d44:	df 93       	push	r29
    3d46:	cf 93       	push	r28
    3d48:	00 d0       	rcall	.+0      	; 0x3d4a <prvTaskIsTaskSuspended+0x6>
    3d4a:	00 d0       	rcall	.+0      	; 0x3d4c <prvTaskIsTaskSuspended+0x8>
    3d4c:	0f 92       	push	r0
    3d4e:	cd b7       	in	r28, 0x3d	; 61
    3d50:	de b7       	in	r29, 0x3e	; 62
    3d52:	9d 83       	std	Y+5, r25	; 0x05
    3d54:	8c 83       	std	Y+4, r24	; 0x04
	BaseType_t xReturn = pdFALSE;
    3d56:	1b 82       	std	Y+3, r1	; 0x03
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
    3d58:	8c 81       	ldd	r24, Y+4	; 0x04
    3d5a:	9d 81       	ldd	r25, Y+5	; 0x05
    3d5c:	9a 83       	std	Y+2, r25	; 0x02
    3d5e:	89 83       	std	Y+1, r24	; 0x01

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    3d60:	e9 81       	ldd	r30, Y+1	; 0x01
    3d62:	fa 81       	ldd	r31, Y+2	; 0x02
    3d64:	82 85       	ldd	r24, Z+10	; 0x0a
    3d66:	93 85       	ldd	r25, Z+11	; 0x0b
    3d68:	24 e0       	ldi	r18, 0x04	; 4
    3d6a:	85 30       	cpi	r24, 0x05	; 5
    3d6c:	92 07       	cpc	r25, r18
    3d6e:	81 f4       	brne	.+32     	; 0x3d90 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    3d70:	e9 81       	ldd	r30, Y+1	; 0x01
    3d72:	fa 81       	ldd	r31, Y+2	; 0x02
    3d74:	84 89       	ldd	r24, Z+20	; 0x14
    3d76:	95 89       	ldd	r25, Z+21	; 0x15
    3d78:	23 e0       	ldi	r18, 0x03	; 3
    3d7a:	83 3f       	cpi	r24, 0xF3	; 243
    3d7c:	92 07       	cpc	r25, r18
    3d7e:	41 f0       	breq	.+16     	; 0x3d90 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
    3d80:	e9 81       	ldd	r30, Y+1	; 0x01
    3d82:	fa 81       	ldd	r31, Y+2	; 0x02
    3d84:	84 89       	ldd	r24, Z+20	; 0x14
    3d86:	95 89       	ldd	r25, Z+21	; 0x15
    3d88:	00 97       	sbiw	r24, 0x00	; 0
    3d8a:	11 f4       	brne	.+4      	; 0x3d90 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
    3d8c:	81 e0       	ldi	r24, 0x01	; 1
    3d8e:	8b 83       	std	Y+3, r24	; 0x03
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    3d90:	8b 81       	ldd	r24, Y+3	; 0x03
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    3d92:	0f 90       	pop	r0
    3d94:	0f 90       	pop	r0
    3d96:	0f 90       	pop	r0
    3d98:	0f 90       	pop	r0
    3d9a:	0f 90       	pop	r0
    3d9c:	cf 91       	pop	r28
    3d9e:	df 91       	pop	r29
    3da0:	08 95       	ret

00003da2 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    3da2:	df 93       	push	r29
    3da4:	cf 93       	push	r28
    3da6:	00 d0       	rcall	.+0      	; 0x3da8 <vTaskResume+0x6>
    3da8:	00 d0       	rcall	.+0      	; 0x3daa <vTaskResume+0x8>
    3daa:	cd b7       	in	r28, 0x3d	; 61
    3dac:	de b7       	in	r29, 0x3e	; 62
    3dae:	9c 83       	std	Y+4, r25	; 0x04
    3db0:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    3db2:	8b 81       	ldd	r24, Y+3	; 0x03
    3db4:	9c 81       	ldd	r25, Y+4	; 0x04
    3db6:	9a 83       	std	Y+2, r25	; 0x02
    3db8:	89 83       	std	Y+1, r24	; 0x01
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
    3dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    3dbe:	00 97       	sbiw	r24, 0x00	; 0
    3dc0:	09 f4       	brne	.+2      	; 0x3dc4 <vTaskResume+0x22>
    3dc2:	4c c0       	rjmp	.+152    	; 0x3e5c <vTaskResume+0xba>
    3dc4:	20 91 9f 03 	lds	r18, 0x039F
    3dc8:	30 91 a0 03 	lds	r19, 0x03A0
    3dcc:	89 81       	ldd	r24, Y+1	; 0x01
    3dce:	9a 81       	ldd	r25, Y+2	; 0x02
    3dd0:	82 17       	cp	r24, r18
    3dd2:	93 07       	cpc	r25, r19
    3dd4:	09 f4       	brne	.+2      	; 0x3dd8 <vTaskResume+0x36>
    3dd6:	42 c0       	rjmp	.+132    	; 0x3e5c <vTaskResume+0xba>
		{
			taskENTER_CRITICAL();
    3dd8:	0f b6       	in	r0, 0x3f	; 63
    3dda:	f8 94       	cli
    3ddc:	0f 92       	push	r0
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    3dde:	89 81       	ldd	r24, Y+1	; 0x01
    3de0:	9a 81       	ldd	r25, Y+2	; 0x02
    3de2:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <prvTaskIsTaskSuspended>
    3de6:	88 23       	and	r24, r24
    3de8:	b9 f1       	breq	.+110    	; 0x3e58 <vTaskResume+0xb6>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    3dea:	89 81       	ldd	r24, Y+1	; 0x01
    3dec:	9a 81       	ldd	r25, Y+2	; 0x02
    3dee:	02 96       	adiw	r24, 0x02	; 2
    3df0:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3df4:	e9 81       	ldd	r30, Y+1	; 0x01
    3df6:	fa 81       	ldd	r31, Y+2	; 0x02
    3df8:	96 89       	ldd	r25, Z+22	; 0x16
    3dfa:	80 91 a5 03 	lds	r24, 0x03A5
    3dfe:	89 17       	cp	r24, r25
    3e00:	28 f4       	brcc	.+10     	; 0x3e0c <vTaskResume+0x6a>
    3e02:	e9 81       	ldd	r30, Y+1	; 0x01
    3e04:	fa 81       	ldd	r31, Y+2	; 0x02
    3e06:	86 89       	ldd	r24, Z+22	; 0x16
    3e08:	80 93 a5 03 	sts	0x03A5, r24
    3e0c:	e9 81       	ldd	r30, Y+1	; 0x01
    3e0e:	fa 81       	ldd	r31, Y+2	; 0x02
    3e10:	86 89       	ldd	r24, Z+22	; 0x16
    3e12:	28 2f       	mov	r18, r24
    3e14:	30 e0       	ldi	r19, 0x00	; 0
    3e16:	c9 01       	movw	r24, r18
    3e18:	88 0f       	add	r24, r24
    3e1a:	99 1f       	adc	r25, r25
    3e1c:	88 0f       	add	r24, r24
    3e1e:	99 1f       	adc	r25, r25
    3e20:	88 0f       	add	r24, r24
    3e22:	99 1f       	adc	r25, r25
    3e24:	82 0f       	add	r24, r18
    3e26:	93 1f       	adc	r25, r19
    3e28:	ac 01       	movw	r20, r24
    3e2a:	40 55       	subi	r20, 0x50	; 80
    3e2c:	5c 4f       	sbci	r21, 0xFC	; 252
    3e2e:	89 81       	ldd	r24, Y+1	; 0x01
    3e30:	9a 81       	ldd	r25, Y+2	; 0x02
    3e32:	9c 01       	movw	r18, r24
    3e34:	2e 5f       	subi	r18, 0xFE	; 254
    3e36:	3f 4f       	sbci	r19, 0xFF	; 255
    3e38:	ca 01       	movw	r24, r20
    3e3a:	b9 01       	movw	r22, r18
    3e3c:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3e40:	e9 81       	ldd	r30, Y+1	; 0x01
    3e42:	fa 81       	ldd	r31, Y+2	; 0x02
    3e44:	96 89       	ldd	r25, Z+22	; 0x16
    3e46:	e0 91 9f 03 	lds	r30, 0x039F
    3e4a:	f0 91 a0 03 	lds	r31, 0x03A0
    3e4e:	86 89       	ldd	r24, Z+22	; 0x16
    3e50:	98 17       	cp	r25, r24
    3e52:	10 f0       	brcs	.+4      	; 0x3e58 <vTaskResume+0xb6>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    3e54:	0e 94 33 12 	call	0x2466	; 0x2466 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    3e58:	0f 90       	pop	r0
    3e5a:	0f be       	out	0x3f, r0	; 63
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3e5c:	0f 90       	pop	r0
    3e5e:	0f 90       	pop	r0
    3e60:	0f 90       	pop	r0
    3e62:	0f 90       	pop	r0
    3e64:	cf 91       	pop	r28
    3e66:	df 91       	pop	r29
    3e68:	08 95       	ret

00003e6a <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    3e6a:	df 93       	push	r29
    3e6c:	cf 93       	push	r28
    3e6e:	00 d0       	rcall	.+0      	; 0x3e70 <xTaskResumeFromISR+0x6>
    3e70:	00 d0       	rcall	.+0      	; 0x3e72 <xTaskResumeFromISR+0x8>
    3e72:	00 d0       	rcall	.+0      	; 0x3e74 <xTaskResumeFromISR+0xa>
    3e74:	cd b7       	in	r28, 0x3d	; 61
    3e76:	de b7       	in	r29, 0x3e	; 62
    3e78:	9e 83       	std	Y+6, r25	; 0x06
    3e7a:	8d 83       	std	Y+5, r24	; 0x05
	BaseType_t xYieldRequired = pdFALSE;
    3e7c:	1c 82       	std	Y+4, r1	; 0x04
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    3e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e80:	9e 81       	ldd	r25, Y+6	; 0x06
    3e82:	9b 83       	std	Y+3, r25	; 0x03
    3e84:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3e86:	19 82       	std	Y+1, r1	; 0x01
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    3e88:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8a:	9b 81       	ldd	r25, Y+3	; 0x03
    3e8c:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <prvTaskIsTaskSuspended>
    3e90:	88 23       	and	r24, r24
    3e92:	09 f4       	brne	.+2      	; 0x3e96 <xTaskResumeFromISR+0x2c>
    3e94:	46 c0       	rjmp	.+140    	; 0x3f22 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3e96:	80 91 af 03 	lds	r24, 0x03AF
    3e9a:	88 23       	and	r24, r24
    3e9c:	c1 f5       	brne	.+112    	; 0x3f0e <xTaskResumeFromISR+0xa4>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3e9e:	ea 81       	ldd	r30, Y+2	; 0x02
    3ea0:	fb 81       	ldd	r31, Y+3	; 0x03
    3ea2:	96 89       	ldd	r25, Z+22	; 0x16
    3ea4:	e0 91 9f 03 	lds	r30, 0x039F
    3ea8:	f0 91 a0 03 	lds	r31, 0x03A0
    3eac:	86 89       	ldd	r24, Z+22	; 0x16
    3eae:	98 17       	cp	r25, r24
    3eb0:	10 f0       	brcs	.+4      	; 0x3eb6 <xTaskResumeFromISR+0x4c>
					{
						xYieldRequired = pdTRUE;
    3eb2:	81 e0       	ldi	r24, 0x01	; 1
    3eb4:	8c 83       	std	Y+4, r24	; 0x04
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    3eba:	02 96       	adiw	r24, 0x02	; 2
    3ebc:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3ec0:	ea 81       	ldd	r30, Y+2	; 0x02
    3ec2:	fb 81       	ldd	r31, Y+3	; 0x03
    3ec4:	96 89       	ldd	r25, Z+22	; 0x16
    3ec6:	80 91 a5 03 	lds	r24, 0x03A5
    3eca:	89 17       	cp	r24, r25
    3ecc:	28 f4       	brcc	.+10     	; 0x3ed8 <xTaskResumeFromISR+0x6e>
    3ece:	ea 81       	ldd	r30, Y+2	; 0x02
    3ed0:	fb 81       	ldd	r31, Y+3	; 0x03
    3ed2:	86 89       	ldd	r24, Z+22	; 0x16
    3ed4:	80 93 a5 03 	sts	0x03A5, r24
    3ed8:	ea 81       	ldd	r30, Y+2	; 0x02
    3eda:	fb 81       	ldd	r31, Y+3	; 0x03
    3edc:	86 89       	ldd	r24, Z+22	; 0x16
    3ede:	28 2f       	mov	r18, r24
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	c9 01       	movw	r24, r18
    3ee4:	88 0f       	add	r24, r24
    3ee6:	99 1f       	adc	r25, r25
    3ee8:	88 0f       	add	r24, r24
    3eea:	99 1f       	adc	r25, r25
    3eec:	88 0f       	add	r24, r24
    3eee:	99 1f       	adc	r25, r25
    3ef0:	82 0f       	add	r24, r18
    3ef2:	93 1f       	adc	r25, r19
    3ef4:	ac 01       	movw	r20, r24
    3ef6:	40 55       	subi	r20, 0x50	; 80
    3ef8:	5c 4f       	sbci	r21, 0xFC	; 252
    3efa:	8a 81       	ldd	r24, Y+2	; 0x02
    3efc:	9b 81       	ldd	r25, Y+3	; 0x03
    3efe:	9c 01       	movw	r18, r24
    3f00:	2e 5f       	subi	r18, 0xFE	; 254
    3f02:	3f 4f       	sbci	r19, 0xFF	; 255
    3f04:	ca 01       	movw	r24, r20
    3f06:	b9 01       	movw	r22, r18
    3f08:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <vListInsertEnd>
    3f0c:	0a c0       	rjmp	.+20     	; 0x3f22 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f10:	9b 81       	ldd	r25, Y+3	; 0x03
    3f12:	9c 01       	movw	r18, r24
    3f14:	24 5f       	subi	r18, 0xF4	; 244
    3f16:	3f 4f       	sbci	r19, 0xFF	; 255
    3f18:	83 ef       	ldi	r24, 0xF3	; 243
    3f1a:	93 e0       	ldi	r25, 0x03	; 3
    3f1c:	b9 01       	movw	r22, r18
    3f1e:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
    3f22:	8c 81       	ldd	r24, Y+4	; 0x04
	}
    3f24:	26 96       	adiw	r28, 0x06	; 6
    3f26:	0f b6       	in	r0, 0x3f	; 63
    3f28:	f8 94       	cli
    3f2a:	de bf       	out	0x3e, r29	; 62
    3f2c:	0f be       	out	0x3f, r0	; 63
    3f2e:	cd bf       	out	0x3d, r28	; 61
    3f30:	cf 91       	pop	r28
    3f32:	df 91       	pop	r29
    3f34:	08 95       	ret

00003f36 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    3f36:	ef 92       	push	r14
    3f38:	ff 92       	push	r15
    3f3a:	0f 93       	push	r16
    3f3c:	df 93       	push	r29
    3f3e:	cf 93       	push	r28
    3f40:	0f 92       	push	r0
    3f42:	cd b7       	in	r28, 0x3d	; 61
    3f44:	de b7       	in	r29, 0x3e	; 62
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    3f46:	80 ec       	ldi	r24, 0xC0	; 192
    3f48:	93 e2       	ldi	r25, 0x23	; 35
    3f4a:	24 e6       	ldi	r18, 0x64	; 100
    3f4c:	30 e0       	ldi	r19, 0x00	; 0
    3f4e:	ed ea       	ldi	r30, 0xAD	; 173
    3f50:	f3 e0       	ldi	r31, 0x03	; 3
    3f52:	b9 01       	movw	r22, r18
    3f54:	48 ec       	ldi	r20, 0xC8	; 200
    3f56:	50 e0       	ldi	r21, 0x00	; 0
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	00 e0       	ldi	r16, 0x00	; 0
    3f5e:	7f 01       	movw	r14, r30
    3f60:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <xTaskCreate>
    3f64:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    3f66:	89 81       	ldd	r24, Y+1	; 0x01
    3f68:	81 30       	cpi	r24, 0x01	; 1
    3f6a:	81 f4       	brne	.+32     	; 0x3f8c <vTaskStartScheduler+0x56>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    3f6c:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    3f6e:	8f ef       	ldi	r24, 0xFF	; 255
    3f70:	9f ef       	ldi	r25, 0xFF	; 255
    3f72:	90 93 ac 03 	sts	0x03AC, r25
    3f76:	80 93 ab 03 	sts	0x03AB, r24
		xSchedulerRunning = pdTRUE;
    3f7a:	81 e0       	ldi	r24, 0x01	; 1
    3f7c:	80 93 a6 03 	sts	0x03A6, r24
		xTickCount = ( TickType_t ) 0U;
    3f80:	10 92 a4 03 	sts	0x03A4, r1
    3f84:	10 92 a3 03 	sts	0x03A3, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    3f88:	0e 94 f7 11 	call	0x23ee	; 0x23ee <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    3f8c:	0f 90       	pop	r0
    3f8e:	cf 91       	pop	r28
    3f90:	df 91       	pop	r29
    3f92:	0f 91       	pop	r16
    3f94:	ff 90       	pop	r15
    3f96:	ef 90       	pop	r14
    3f98:	08 95       	ret

00003f9a <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3f9a:	df 93       	push	r29
    3f9c:	cf 93       	push	r28
    3f9e:	cd b7       	in	r28, 0x3d	; 61
    3fa0:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3fa2:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    3fa4:	10 92 a6 03 	sts	0x03A6, r1
	vPortEndScheduler();
    3fa8:	0e 94 2c 12 	call	0x2458	; 0x2458 <vPortEndScheduler>
}
    3fac:	cf 91       	pop	r28
    3fae:	df 91       	pop	r29
    3fb0:	08 95       	ret

00003fb2 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3fb2:	df 93       	push	r29
    3fb4:	cf 93       	push	r28
    3fb6:	cd b7       	in	r28, 0x3d	; 61
    3fb8:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    3fba:	80 91 af 03 	lds	r24, 0x03AF
    3fbe:	8f 5f       	subi	r24, 0xFF	; 255
    3fc0:	80 93 af 03 	sts	0x03AF, r24
}
    3fc4:	cf 91       	pop	r28
    3fc6:	df 91       	pop	r29
    3fc8:	08 95       	ret

00003fca <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    3fca:	df 93       	push	r29
    3fcc:	cf 93       	push	r28
    3fce:	00 d0       	rcall	.+0      	; 0x3fd0 <xTaskResumeAll+0x6>
    3fd0:	00 d0       	rcall	.+0      	; 0x3fd2 <xTaskResumeAll+0x8>
    3fd2:	cd b7       	in	r28, 0x3d	; 61
    3fd4:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB = NULL;
    3fd6:	1c 82       	std	Y+4, r1	; 0x04
    3fd8:	1b 82       	std	Y+3, r1	; 0x03
BaseType_t xAlreadyYielded = pdFALSE;
    3fda:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3fdc:	0f b6       	in	r0, 0x3f	; 63
    3fde:	f8 94       	cli
    3fe0:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    3fe2:	80 91 af 03 	lds	r24, 0x03AF
    3fe6:	81 50       	subi	r24, 0x01	; 1
    3fe8:	80 93 af 03 	sts	0x03AF, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3fec:	80 91 af 03 	lds	r24, 0x03AF
    3ff0:	88 23       	and	r24, r24
    3ff2:	09 f0       	breq	.+2      	; 0x3ff6 <xTaskResumeAll+0x2c>
    3ff4:	73 c0       	rjmp	.+230    	; 0x40dc <xTaskResumeAll+0x112>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    3ff6:	80 91 a2 03 	lds	r24, 0x03A2
    3ffa:	88 23       	and	r24, r24
    3ffc:	09 f4       	brne	.+2      	; 0x4000 <xTaskResumeAll+0x36>
    3ffe:	6e c0       	rjmp	.+220    	; 0x40dc <xTaskResumeAll+0x112>
    4000:	45 c0       	rjmp	.+138    	; 0x408c <xTaskResumeAll+0xc2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    4002:	e0 91 f8 03 	lds	r30, 0x03F8
    4006:	f0 91 f9 03 	lds	r31, 0x03F9
    400a:	86 81       	ldd	r24, Z+6	; 0x06
    400c:	97 81       	ldd	r25, Z+7	; 0x07
    400e:	9c 83       	std	Y+4, r25	; 0x04
    4010:	8b 83       	std	Y+3, r24	; 0x03
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4012:	8b 81       	ldd	r24, Y+3	; 0x03
    4014:	9c 81       	ldd	r25, Y+4	; 0x04
    4016:	0c 96       	adiw	r24, 0x0c	; 12
    4018:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    401c:	8b 81       	ldd	r24, Y+3	; 0x03
    401e:	9c 81       	ldd	r25, Y+4	; 0x04
    4020:	02 96       	adiw	r24, 0x02	; 2
    4022:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    4026:	eb 81       	ldd	r30, Y+3	; 0x03
    4028:	fc 81       	ldd	r31, Y+4	; 0x04
    402a:	96 89       	ldd	r25, Z+22	; 0x16
    402c:	80 91 a5 03 	lds	r24, 0x03A5
    4030:	89 17       	cp	r24, r25
    4032:	28 f4       	brcc	.+10     	; 0x403e <xTaskResumeAll+0x74>
    4034:	eb 81       	ldd	r30, Y+3	; 0x03
    4036:	fc 81       	ldd	r31, Y+4	; 0x04
    4038:	86 89       	ldd	r24, Z+22	; 0x16
    403a:	80 93 a5 03 	sts	0x03A5, r24
    403e:	eb 81       	ldd	r30, Y+3	; 0x03
    4040:	fc 81       	ldd	r31, Y+4	; 0x04
    4042:	86 89       	ldd	r24, Z+22	; 0x16
    4044:	28 2f       	mov	r18, r24
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	c9 01       	movw	r24, r18
    404a:	88 0f       	add	r24, r24
    404c:	99 1f       	adc	r25, r25
    404e:	88 0f       	add	r24, r24
    4050:	99 1f       	adc	r25, r25
    4052:	88 0f       	add	r24, r24
    4054:	99 1f       	adc	r25, r25
    4056:	82 0f       	add	r24, r18
    4058:	93 1f       	adc	r25, r19
    405a:	ac 01       	movw	r20, r24
    405c:	40 55       	subi	r20, 0x50	; 80
    405e:	5c 4f       	sbci	r21, 0xFC	; 252
    4060:	8b 81       	ldd	r24, Y+3	; 0x03
    4062:	9c 81       	ldd	r25, Y+4	; 0x04
    4064:	9c 01       	movw	r18, r24
    4066:	2e 5f       	subi	r18, 0xFE	; 254
    4068:	3f 4f       	sbci	r19, 0xFF	; 255
    406a:	ca 01       	movw	r24, r20
    406c:	b9 01       	movw	r22, r18
    406e:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4072:	eb 81       	ldd	r30, Y+3	; 0x03
    4074:	fc 81       	ldd	r31, Y+4	; 0x04
    4076:	96 89       	ldd	r25, Z+22	; 0x16
    4078:	e0 91 9f 03 	lds	r30, 0x039F
    407c:	f0 91 a0 03 	lds	r31, 0x03A0
    4080:	86 89       	ldd	r24, Z+22	; 0x16
    4082:	98 17       	cp	r25, r24
    4084:	18 f0       	brcs	.+6      	; 0x408c <xTaskResumeAll+0xc2>
					{
						xYieldPending = pdTRUE;
    4086:	81 e0       	ldi	r24, 0x01	; 1
    4088:	80 93 a8 03 	sts	0x03A8, r24
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    408c:	80 91 f3 03 	lds	r24, 0x03F3
    4090:	88 23       	and	r24, r24
    4092:	09 f0       	breq	.+2      	; 0x4096 <xTaskResumeAll+0xcc>
    4094:	b6 cf       	rjmp	.-148    	; 0x4002 <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    4096:	8b 81       	ldd	r24, Y+3	; 0x03
    4098:	9c 81       	ldd	r25, Y+4	; 0x04
    409a:	00 97       	sbiw	r24, 0x00	; 0
    409c:	11 f0       	breq	.+4      	; 0x40a2 <xTaskResumeAll+0xd8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    409e:	0e 94 66 24 	call	0x48cc	; 0x48cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    40a2:	80 91 a7 03 	lds	r24, 0x03A7
    40a6:	89 83       	std	Y+1, r24	; 0x01

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    40a8:	89 81       	ldd	r24, Y+1	; 0x01
    40aa:	88 23       	and	r24, r24
    40ac:	79 f0       	breq	.+30     	; 0x40cc <xTaskResumeAll+0x102>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    40ae:	0e 94 d5 20 	call	0x41aa	; 0x41aa <xTaskIncrementTick>
    40b2:	88 23       	and	r24, r24
    40b4:	19 f0       	breq	.+6      	; 0x40bc <xTaskResumeAll+0xf2>
							{
								xYieldPending = pdTRUE;
    40b6:	81 e0       	ldi	r24, 0x01	; 1
    40b8:	80 93 a8 03 	sts	0x03A8, r24
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    40bc:	89 81       	ldd	r24, Y+1	; 0x01
    40be:	81 50       	subi	r24, 0x01	; 1
    40c0:	89 83       	std	Y+1, r24	; 0x01
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    40c2:	89 81       	ldd	r24, Y+1	; 0x01
    40c4:	88 23       	and	r24, r24
    40c6:	99 f7       	brne	.-26     	; 0x40ae <xTaskResumeAll+0xe4>

						uxPendedTicks = 0;
    40c8:	10 92 a7 03 	sts	0x03A7, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    40cc:	80 91 a8 03 	lds	r24, 0x03A8
    40d0:	88 23       	and	r24, r24
    40d2:	21 f0       	breq	.+8      	; 0x40dc <xTaskResumeAll+0x112>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    40d4:	81 e0       	ldi	r24, 0x01	; 1
    40d6:	8a 83       	std	Y+2, r24	; 0x02
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    40d8:	0e 94 33 12 	call	0x2466	; 0x2466 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    40dc:	0f 90       	pop	r0
    40de:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    40e0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    40e2:	0f 90       	pop	r0
    40e4:	0f 90       	pop	r0
    40e6:	0f 90       	pop	r0
    40e8:	0f 90       	pop	r0
    40ea:	cf 91       	pop	r28
    40ec:	df 91       	pop	r29
    40ee:	08 95       	ret

000040f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    40f0:	df 93       	push	r29
    40f2:	cf 93       	push	r28
    40f4:	00 d0       	rcall	.+0      	; 0x40f6 <xTaskGetTickCount+0x6>
    40f6:	cd b7       	in	r28, 0x3d	; 61
    40f8:	de b7       	in	r29, 0x3e	; 62
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    40fa:	0f b6       	in	r0, 0x3f	; 63
    40fc:	f8 94       	cli
    40fe:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    4100:	80 91 a3 03 	lds	r24, 0x03A3
    4104:	90 91 a4 03 	lds	r25, 0x03A4
    4108:	9a 83       	std	Y+2, r25	; 0x02
    410a:	89 83       	std	Y+1, r24	; 0x01
	}
	portTICK_TYPE_EXIT_CRITICAL();
    410c:	0f 90       	pop	r0
    410e:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    4110:	89 81       	ldd	r24, Y+1	; 0x01
    4112:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4114:	0f 90       	pop	r0
    4116:	0f 90       	pop	r0
    4118:	cf 91       	pop	r28
    411a:	df 91       	pop	r29
    411c:	08 95       	ret

0000411e <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    411e:	df 93       	push	r29
    4120:	cf 93       	push	r28
    4122:	00 d0       	rcall	.+0      	; 0x4124 <xTaskGetTickCountFromISR+0x6>
    4124:	0f 92       	push	r0
    4126:	cd b7       	in	r28, 0x3d	; 61
    4128:	de b7       	in	r29, 0x3e	; 62
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    412a:	19 82       	std	Y+1, r1	; 0x01
	{
		xReturn = xTickCount;
    412c:	80 91 a3 03 	lds	r24, 0x03A3
    4130:	90 91 a4 03 	lds	r25, 0x03A4
    4134:	9b 83       	std	Y+3, r25	; 0x03
    4136:	8a 83       	std	Y+2, r24	; 0x02
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    4138:	8a 81       	ldd	r24, Y+2	; 0x02
    413a:	9b 81       	ldd	r25, Y+3	; 0x03
}
    413c:	0f 90       	pop	r0
    413e:	0f 90       	pop	r0
    4140:	0f 90       	pop	r0
    4142:	cf 91       	pop	r28
    4144:	df 91       	pop	r29
    4146:	08 95       	ret

00004148 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    4148:	df 93       	push	r29
    414a:	cf 93       	push	r28
    414c:	cd b7       	in	r28, 0x3d	; 61
    414e:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    4150:	80 91 a2 03 	lds	r24, 0x03A2
}
    4154:	cf 91       	pop	r28
    4156:	df 91       	pop	r29
    4158:	08 95       	ret

0000415a <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    415a:	df 93       	push	r29
    415c:	cf 93       	push	r28
    415e:	00 d0       	rcall	.+0      	; 0x4160 <pcTaskGetName+0x6>
    4160:	00 d0       	rcall	.+0      	; 0x4162 <pcTaskGetName+0x8>
    4162:	00 d0       	rcall	.+0      	; 0x4164 <pcTaskGetName+0xa>
    4164:	cd b7       	in	r28, 0x3d	; 61
    4166:	de b7       	in	r29, 0x3e	; 62
    4168:	9c 83       	std	Y+4, r25	; 0x04
    416a:	8b 83       	std	Y+3, r24	; 0x03
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    416c:	8b 81       	ldd	r24, Y+3	; 0x03
    416e:	9c 81       	ldd	r25, Y+4	; 0x04
    4170:	00 97       	sbiw	r24, 0x00	; 0
    4172:	39 f4       	brne	.+14     	; 0x4182 <pcTaskGetName+0x28>
    4174:	80 91 9f 03 	lds	r24, 0x039F
    4178:	90 91 a0 03 	lds	r25, 0x03A0
    417c:	9e 83       	std	Y+6, r25	; 0x06
    417e:	8d 83       	std	Y+5, r24	; 0x05
    4180:	04 c0       	rjmp	.+8      	; 0x418a <pcTaskGetName+0x30>
    4182:	8b 81       	ldd	r24, Y+3	; 0x03
    4184:	9c 81       	ldd	r25, Y+4	; 0x04
    4186:	9e 83       	std	Y+6, r25	; 0x06
    4188:	8d 83       	std	Y+5, r24	; 0x05
    418a:	8d 81       	ldd	r24, Y+5	; 0x05
    418c:	9e 81       	ldd	r25, Y+6	; 0x06
    418e:	9a 83       	std	Y+2, r25	; 0x02
    4190:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    4192:	89 81       	ldd	r24, Y+1	; 0x01
    4194:	9a 81       	ldd	r25, Y+2	; 0x02
    4196:	49 96       	adiw	r24, 0x19	; 25
}
    4198:	26 96       	adiw	r28, 0x06	; 6
    419a:	0f b6       	in	r0, 0x3f	; 63
    419c:	f8 94       	cli
    419e:	de bf       	out	0x3e, r29	; 62
    41a0:	0f be       	out	0x3f, r0	; 63
    41a2:	cd bf       	out	0x3d, r28	; 61
    41a4:	cf 91       	pop	r28
    41a6:	df 91       	pop	r29
    41a8:	08 95       	ret

000041aa <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    41aa:	df 93       	push	r29
    41ac:	cf 93       	push	r28
    41ae:	cd b7       	in	r28, 0x3d	; 61
    41b0:	de b7       	in	r29, 0x3e	; 62
    41b2:	29 97       	sbiw	r28, 0x09	; 9
    41b4:	0f b6       	in	r0, 0x3f	; 63
    41b6:	f8 94       	cli
    41b8:	de bf       	out	0x3e, r29	; 62
    41ba:	0f be       	out	0x3f, r0	; 63
    41bc:	cd bf       	out	0x3d, r28	; 61
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    41be:	1d 82       	std	Y+5, r1	; 0x05

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    41c0:	80 91 af 03 	lds	r24, 0x03AF
    41c4:	88 23       	and	r24, r24
    41c6:	09 f0       	breq	.+2      	; 0x41ca <xTaskIncrementTick+0x20>
    41c8:	a7 c0       	rjmp	.+334    	; 0x4318 <xTaskIncrementTick+0x16e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    41ca:	80 91 a3 03 	lds	r24, 0x03A3
    41ce:	90 91 a4 03 	lds	r25, 0x03A4
    41d2:	01 96       	adiw	r24, 0x01	; 1
    41d4:	9c 83       	std	Y+4, r25	; 0x04
    41d6:	8b 83       	std	Y+3, r24	; 0x03

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    41d8:	8b 81       	ldd	r24, Y+3	; 0x03
    41da:	9c 81       	ldd	r25, Y+4	; 0x04
    41dc:	90 93 a4 03 	sts	0x03A4, r25
    41e0:	80 93 a3 03 	sts	0x03A3, r24

		if( xConstTickCount == ( TickType_t ) 0U )
    41e4:	8b 81       	ldd	r24, Y+3	; 0x03
    41e6:	9c 81       	ldd	r25, Y+4	; 0x04
    41e8:	00 97       	sbiw	r24, 0x00	; 0
    41ea:	d9 f4       	brne	.+54     	; 0x4222 <xTaskIncrementTick+0x78>
		{
			taskSWITCH_DELAYED_LISTS();
    41ec:	80 91 ef 03 	lds	r24, 0x03EF
    41f0:	90 91 f0 03 	lds	r25, 0x03F0
    41f4:	9a 83       	std	Y+2, r25	; 0x02
    41f6:	89 83       	std	Y+1, r24	; 0x01
    41f8:	80 91 f1 03 	lds	r24, 0x03F1
    41fc:	90 91 f2 03 	lds	r25, 0x03F2
    4200:	90 93 f0 03 	sts	0x03F0, r25
    4204:	80 93 ef 03 	sts	0x03EF, r24
    4208:	89 81       	ldd	r24, Y+1	; 0x01
    420a:	9a 81       	ldd	r25, Y+2	; 0x02
    420c:	90 93 f2 03 	sts	0x03F2, r25
    4210:	80 93 f1 03 	sts	0x03F1, r24
    4214:	80 91 a9 03 	lds	r24, 0x03A9
    4218:	8f 5f       	subi	r24, 0xFF	; 255
    421a:	80 93 a9 03 	sts	0x03A9, r24
    421e:	0e 94 66 24 	call	0x48cc	; 0x48cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    4222:	20 91 ab 03 	lds	r18, 0x03AB
    4226:	30 91 ac 03 	lds	r19, 0x03AC
    422a:	8b 81       	ldd	r24, Y+3	; 0x03
    422c:	9c 81       	ldd	r25, Y+4	; 0x04
    422e:	82 17       	cp	r24, r18
    4230:	93 07       	cpc	r25, r19
    4232:	08 f4       	brcc	.+2      	; 0x4236 <xTaskIncrementTick+0x8c>
    4234:	76 c0       	rjmp	.+236    	; 0x4322 <xTaskIncrementTick+0x178>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4236:	e0 91 ef 03 	lds	r30, 0x03EF
    423a:	f0 91 f0 03 	lds	r31, 0x03F0
    423e:	80 81       	ld	r24, Z
    4240:	88 23       	and	r24, r24
    4242:	39 f4       	brne	.+14     	; 0x4252 <xTaskIncrementTick+0xa8>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4244:	8f ef       	ldi	r24, 0xFF	; 255
    4246:	9f ef       	ldi	r25, 0xFF	; 255
    4248:	90 93 ac 03 	sts	0x03AC, r25
    424c:	80 93 ab 03 	sts	0x03AB, r24
    4250:	68 c0       	rjmp	.+208    	; 0x4322 <xTaskIncrementTick+0x178>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4252:	e0 91 ef 03 	lds	r30, 0x03EF
    4256:	f0 91 f0 03 	lds	r31, 0x03F0
    425a:	05 80       	ldd	r0, Z+5	; 0x05
    425c:	f6 81       	ldd	r31, Z+6	; 0x06
    425e:	e0 2d       	mov	r30, r0
    4260:	86 81       	ldd	r24, Z+6	; 0x06
    4262:	97 81       	ldd	r25, Z+7	; 0x07
    4264:	99 87       	std	Y+9, r25	; 0x09
    4266:	88 87       	std	Y+8, r24	; 0x08
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    4268:	e8 85       	ldd	r30, Y+8	; 0x08
    426a:	f9 85       	ldd	r31, Y+9	; 0x09
    426c:	82 81       	ldd	r24, Z+2	; 0x02
    426e:	93 81       	ldd	r25, Z+3	; 0x03
    4270:	9f 83       	std	Y+7, r25	; 0x07
    4272:	8e 83       	std	Y+6, r24	; 0x06

					if( xConstTickCount < xItemValue )
    4274:	2b 81       	ldd	r18, Y+3	; 0x03
    4276:	3c 81       	ldd	r19, Y+4	; 0x04
    4278:	8e 81       	ldd	r24, Y+6	; 0x06
    427a:	9f 81       	ldd	r25, Y+7	; 0x07
    427c:	28 17       	cp	r18, r24
    427e:	39 07       	cpc	r19, r25
    4280:	38 f4       	brcc	.+14     	; 0x4290 <xTaskIncrementTick+0xe6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    4282:	8e 81       	ldd	r24, Y+6	; 0x06
    4284:	9f 81       	ldd	r25, Y+7	; 0x07
    4286:	90 93 ac 03 	sts	0x03AC, r25
    428a:	80 93 ab 03 	sts	0x03AB, r24
    428e:	49 c0       	rjmp	.+146    	; 0x4322 <xTaskIncrementTick+0x178>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4290:	88 85       	ldd	r24, Y+8	; 0x08
    4292:	99 85       	ldd	r25, Y+9	; 0x09
    4294:	02 96       	adiw	r24, 0x02	; 2
    4296:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    429a:	e8 85       	ldd	r30, Y+8	; 0x08
    429c:	f9 85       	ldd	r31, Y+9	; 0x09
    429e:	84 89       	ldd	r24, Z+20	; 0x14
    42a0:	95 89       	ldd	r25, Z+21	; 0x15
    42a2:	00 97       	sbiw	r24, 0x00	; 0
    42a4:	29 f0       	breq	.+10     	; 0x42b0 <xTaskIncrementTick+0x106>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    42a6:	88 85       	ldd	r24, Y+8	; 0x08
    42a8:	99 85       	ldd	r25, Y+9	; 0x09
    42aa:	0c 96       	adiw	r24, 0x0c	; 12
    42ac:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    42b0:	e8 85       	ldd	r30, Y+8	; 0x08
    42b2:	f9 85       	ldd	r31, Y+9	; 0x09
    42b4:	96 89       	ldd	r25, Z+22	; 0x16
    42b6:	80 91 a5 03 	lds	r24, 0x03A5
    42ba:	89 17       	cp	r24, r25
    42bc:	28 f4       	brcc	.+10     	; 0x42c8 <xTaskIncrementTick+0x11e>
    42be:	e8 85       	ldd	r30, Y+8	; 0x08
    42c0:	f9 85       	ldd	r31, Y+9	; 0x09
    42c2:	86 89       	ldd	r24, Z+22	; 0x16
    42c4:	80 93 a5 03 	sts	0x03A5, r24
    42c8:	e8 85       	ldd	r30, Y+8	; 0x08
    42ca:	f9 85       	ldd	r31, Y+9	; 0x09
    42cc:	86 89       	ldd	r24, Z+22	; 0x16
    42ce:	28 2f       	mov	r18, r24
    42d0:	30 e0       	ldi	r19, 0x00	; 0
    42d2:	c9 01       	movw	r24, r18
    42d4:	88 0f       	add	r24, r24
    42d6:	99 1f       	adc	r25, r25
    42d8:	88 0f       	add	r24, r24
    42da:	99 1f       	adc	r25, r25
    42dc:	88 0f       	add	r24, r24
    42de:	99 1f       	adc	r25, r25
    42e0:	82 0f       	add	r24, r18
    42e2:	93 1f       	adc	r25, r19
    42e4:	ac 01       	movw	r20, r24
    42e6:	40 55       	subi	r20, 0x50	; 80
    42e8:	5c 4f       	sbci	r21, 0xFC	; 252
    42ea:	88 85       	ldd	r24, Y+8	; 0x08
    42ec:	99 85       	ldd	r25, Y+9	; 0x09
    42ee:	9c 01       	movw	r18, r24
    42f0:	2e 5f       	subi	r18, 0xFE	; 254
    42f2:	3f 4f       	sbci	r19, 0xFF	; 255
    42f4:	ca 01       	movw	r24, r20
    42f6:	b9 01       	movw	r22, r18
    42f8:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    42fc:	e8 85       	ldd	r30, Y+8	; 0x08
    42fe:	f9 85       	ldd	r31, Y+9	; 0x09
    4300:	96 89       	ldd	r25, Z+22	; 0x16
    4302:	e0 91 9f 03 	lds	r30, 0x039F
    4306:	f0 91 a0 03 	lds	r31, 0x03A0
    430a:	86 89       	ldd	r24, Z+22	; 0x16
    430c:	98 17       	cp	r25, r24
    430e:	08 f4       	brcc	.+2      	; 0x4312 <xTaskIncrementTick+0x168>
    4310:	92 cf       	rjmp	.-220    	; 0x4236 <xTaskIncrementTick+0x8c>
						{
							xSwitchRequired = pdTRUE;
    4312:	81 e0       	ldi	r24, 0x01	; 1
    4314:	8d 83       	std	Y+5, r24	; 0x05
    4316:	8f cf       	rjmp	.-226    	; 0x4236 <xTaskIncrementTick+0x8c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    4318:	80 91 a7 03 	lds	r24, 0x03A7
    431c:	8f 5f       	subi	r24, 0xFF	; 255
    431e:	80 93 a7 03 	sts	0x03A7, r24
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    4322:	80 91 a8 03 	lds	r24, 0x03A8
    4326:	88 23       	and	r24, r24
    4328:	11 f0       	breq	.+4      	; 0x432e <xTaskIncrementTick+0x184>
		{
			xSwitchRequired = pdTRUE;
    432a:	81 e0       	ldi	r24, 0x01	; 1
    432c:	8d 83       	std	Y+5, r24	; 0x05
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    432e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4330:	29 96       	adiw	r28, 0x09	; 9
    4332:	0f b6       	in	r0, 0x3f	; 63
    4334:	f8 94       	cli
    4336:	de bf       	out	0x3e, r29	; 62
    4338:	0f be       	out	0x3f, r0	; 63
    433a:	cd bf       	out	0x3d, r28	; 61
    433c:	cf 91       	pop	r28
    433e:	df 91       	pop	r29
    4340:	08 95       	ret

00004342 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    4342:	df 93       	push	r29
    4344:	cf 93       	push	r28
    4346:	00 d0       	rcall	.+0      	; 0x4348 <vTaskSwitchContext+0x6>
    4348:	0f 92       	push	r0
    434a:	cd b7       	in	r28, 0x3d	; 61
    434c:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    434e:	80 91 af 03 	lds	r24, 0x03AF
    4352:	88 23       	and	r24, r24
    4354:	21 f0       	breq	.+8      	; 0x435e <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    4356:	81 e0       	ldi	r24, 0x01	; 1
    4358:	80 93 a8 03 	sts	0x03A8, r24
    435c:	59 c0       	rjmp	.+178    	; 0x4410 <vTaskSwitchContext+0xce>
	}
	else
	{
		xYieldPending = pdFALSE;
    435e:	10 92 a8 03 	sts	0x03A8, r1
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    4362:	80 91 a5 03 	lds	r24, 0x03A5
    4366:	8b 83       	std	Y+3, r24	; 0x03
    4368:	03 c0       	rjmp	.+6      	; 0x4370 <vTaskSwitchContext+0x2e>
    436a:	8b 81       	ldd	r24, Y+3	; 0x03
    436c:	81 50       	subi	r24, 0x01	; 1
    436e:	8b 83       	std	Y+3, r24	; 0x03
    4370:	8b 81       	ldd	r24, Y+3	; 0x03
    4372:	28 2f       	mov	r18, r24
    4374:	30 e0       	ldi	r19, 0x00	; 0
    4376:	c9 01       	movw	r24, r18
    4378:	88 0f       	add	r24, r24
    437a:	99 1f       	adc	r25, r25
    437c:	88 0f       	add	r24, r24
    437e:	99 1f       	adc	r25, r25
    4380:	88 0f       	add	r24, r24
    4382:	99 1f       	adc	r25, r25
    4384:	82 0f       	add	r24, r18
    4386:	93 1f       	adc	r25, r19
    4388:	fc 01       	movw	r30, r24
    438a:	e0 55       	subi	r30, 0x50	; 80
    438c:	fc 4f       	sbci	r31, 0xFC	; 252
    438e:	80 81       	ld	r24, Z
    4390:	88 23       	and	r24, r24
    4392:	59 f3       	breq	.-42     	; 0x436a <vTaskSwitchContext+0x28>
    4394:	8b 81       	ldd	r24, Y+3	; 0x03
    4396:	28 2f       	mov	r18, r24
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	c9 01       	movw	r24, r18
    439c:	88 0f       	add	r24, r24
    439e:	99 1f       	adc	r25, r25
    43a0:	88 0f       	add	r24, r24
    43a2:	99 1f       	adc	r25, r25
    43a4:	88 0f       	add	r24, r24
    43a6:	99 1f       	adc	r25, r25
    43a8:	82 0f       	add	r24, r18
    43aa:	93 1f       	adc	r25, r19
    43ac:	80 55       	subi	r24, 0x50	; 80
    43ae:	9c 4f       	sbci	r25, 0xFC	; 252
    43b0:	9a 83       	std	Y+2, r25	; 0x02
    43b2:	89 83       	std	Y+1, r24	; 0x01
    43b4:	e9 81       	ldd	r30, Y+1	; 0x01
    43b6:	fa 81       	ldd	r31, Y+2	; 0x02
    43b8:	01 80       	ldd	r0, Z+1	; 0x01
    43ba:	f2 81       	ldd	r31, Z+2	; 0x02
    43bc:	e0 2d       	mov	r30, r0
    43be:	82 81       	ldd	r24, Z+2	; 0x02
    43c0:	93 81       	ldd	r25, Z+3	; 0x03
    43c2:	e9 81       	ldd	r30, Y+1	; 0x01
    43c4:	fa 81       	ldd	r31, Y+2	; 0x02
    43c6:	92 83       	std	Z+2, r25	; 0x02
    43c8:	81 83       	std	Z+1, r24	; 0x01
    43ca:	e9 81       	ldd	r30, Y+1	; 0x01
    43cc:	fa 81       	ldd	r31, Y+2	; 0x02
    43ce:	21 81       	ldd	r18, Z+1	; 0x01
    43d0:	32 81       	ldd	r19, Z+2	; 0x02
    43d2:	89 81       	ldd	r24, Y+1	; 0x01
    43d4:	9a 81       	ldd	r25, Y+2	; 0x02
    43d6:	03 96       	adiw	r24, 0x03	; 3
    43d8:	28 17       	cp	r18, r24
    43da:	39 07       	cpc	r19, r25
    43dc:	59 f4       	brne	.+22     	; 0x43f4 <vTaskSwitchContext+0xb2>
    43de:	e9 81       	ldd	r30, Y+1	; 0x01
    43e0:	fa 81       	ldd	r31, Y+2	; 0x02
    43e2:	01 80       	ldd	r0, Z+1	; 0x01
    43e4:	f2 81       	ldd	r31, Z+2	; 0x02
    43e6:	e0 2d       	mov	r30, r0
    43e8:	82 81       	ldd	r24, Z+2	; 0x02
    43ea:	93 81       	ldd	r25, Z+3	; 0x03
    43ec:	e9 81       	ldd	r30, Y+1	; 0x01
    43ee:	fa 81       	ldd	r31, Y+2	; 0x02
    43f0:	92 83       	std	Z+2, r25	; 0x02
    43f2:	81 83       	std	Z+1, r24	; 0x01
    43f4:	e9 81       	ldd	r30, Y+1	; 0x01
    43f6:	fa 81       	ldd	r31, Y+2	; 0x02
    43f8:	01 80       	ldd	r0, Z+1	; 0x01
    43fa:	f2 81       	ldd	r31, Z+2	; 0x02
    43fc:	e0 2d       	mov	r30, r0
    43fe:	86 81       	ldd	r24, Z+6	; 0x06
    4400:	97 81       	ldd	r25, Z+7	; 0x07
    4402:	90 93 a0 03 	sts	0x03A0, r25
    4406:	80 93 9f 03 	sts	0x039F, r24
    440a:	8b 81       	ldd	r24, Y+3	; 0x03
    440c:	80 93 a5 03 	sts	0x03A5, r24
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    4410:	0f 90       	pop	r0
    4412:	0f 90       	pop	r0
    4414:	0f 90       	pop	r0
    4416:	cf 91       	pop	r28
    4418:	df 91       	pop	r29
    441a:	08 95       	ret

0000441c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    441c:	df 93       	push	r29
    441e:	cf 93       	push	r28
    4420:	00 d0       	rcall	.+0      	; 0x4422 <vTaskPlaceOnEventList+0x6>
    4422:	00 d0       	rcall	.+0      	; 0x4424 <vTaskPlaceOnEventList+0x8>
    4424:	cd b7       	in	r28, 0x3d	; 61
    4426:	de b7       	in	r29, 0x3e	; 62
    4428:	9a 83       	std	Y+2, r25	; 0x02
    442a:	89 83       	std	Y+1, r24	; 0x01
    442c:	7c 83       	std	Y+4, r23	; 0x04
    442e:	6b 83       	std	Y+3, r22	; 0x03

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    4430:	80 91 9f 03 	lds	r24, 0x039F
    4434:	90 91 a0 03 	lds	r25, 0x03A0
    4438:	9c 01       	movw	r18, r24
    443a:	24 5f       	subi	r18, 0xF4	; 244
    443c:	3f 4f       	sbci	r19, 0xFF	; 255
    443e:	89 81       	ldd	r24, Y+1	; 0x01
    4440:	9a 81       	ldd	r25, Y+2	; 0x02
    4442:	b9 01       	movw	r22, r18
    4444:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    4448:	8b 81       	ldd	r24, Y+3	; 0x03
    444a:	9c 81       	ldd	r25, Y+4	; 0x04
    444c:	61 e0       	ldi	r22, 0x01	; 1
    444e:	0e 94 89 29 	call	0x5312	; 0x5312 <prvAddCurrentTaskToDelayedList>
}
    4452:	0f 90       	pop	r0
    4454:	0f 90       	pop	r0
    4456:	0f 90       	pop	r0
    4458:	0f 90       	pop	r0
    445a:	cf 91       	pop	r28
    445c:	df 91       	pop	r29
    445e:	08 95       	ret

00004460 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    4460:	df 93       	push	r29
    4462:	cf 93       	push	r28
    4464:	00 d0       	rcall	.+0      	; 0x4466 <vTaskPlaceOnUnorderedEventList+0x6>
    4466:	00 d0       	rcall	.+0      	; 0x4468 <vTaskPlaceOnUnorderedEventList+0x8>
    4468:	00 d0       	rcall	.+0      	; 0x446a <vTaskPlaceOnUnorderedEventList+0xa>
    446a:	cd b7       	in	r28, 0x3d	; 61
    446c:	de b7       	in	r29, 0x3e	; 62
    446e:	9a 83       	std	Y+2, r25	; 0x02
    4470:	89 83       	std	Y+1, r24	; 0x01
    4472:	7c 83       	std	Y+4, r23	; 0x04
    4474:	6b 83       	std	Y+3, r22	; 0x03
    4476:	5e 83       	std	Y+6, r21	; 0x06
    4478:	4d 83       	std	Y+5, r20	; 0x05
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    447a:	e0 91 9f 03 	lds	r30, 0x039F
    447e:	f0 91 a0 03 	lds	r31, 0x03A0
    4482:	8b 81       	ldd	r24, Y+3	; 0x03
    4484:	9c 81       	ldd	r25, Y+4	; 0x04
    4486:	90 68       	ori	r25, 0x80	; 128
    4488:	95 87       	std	Z+13, r25	; 0x0d
    448a:	84 87       	std	Z+12, r24	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    448c:	80 91 9f 03 	lds	r24, 0x039F
    4490:	90 91 a0 03 	lds	r25, 0x03A0
    4494:	9c 01       	movw	r18, r24
    4496:	24 5f       	subi	r18, 0xF4	; 244
    4498:	3f 4f       	sbci	r19, 0xFF	; 255
    449a:	89 81       	ldd	r24, Y+1	; 0x01
    449c:	9a 81       	ldd	r25, Y+2	; 0x02
    449e:	b9 01       	movw	r22, r18
    44a0:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    44a4:	8d 81       	ldd	r24, Y+5	; 0x05
    44a6:	9e 81       	ldd	r25, Y+6	; 0x06
    44a8:	61 e0       	ldi	r22, 0x01	; 1
    44aa:	0e 94 89 29 	call	0x5312	; 0x5312 <prvAddCurrentTaskToDelayedList>
}
    44ae:	26 96       	adiw	r28, 0x06	; 6
    44b0:	0f b6       	in	r0, 0x3f	; 63
    44b2:	f8 94       	cli
    44b4:	de bf       	out	0x3e, r29	; 62
    44b6:	0f be       	out	0x3f, r0	; 63
    44b8:	cd bf       	out	0x3d, r28	; 61
    44ba:	cf 91       	pop	r28
    44bc:	df 91       	pop	r29
    44be:	08 95       	ret

000044c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    44c0:	df 93       	push	r29
    44c2:	cf 93       	push	r28
    44c4:	00 d0       	rcall	.+0      	; 0x44c6 <xTaskRemoveFromEventList+0x6>
    44c6:	00 d0       	rcall	.+0      	; 0x44c8 <xTaskRemoveFromEventList+0x8>
    44c8:	0f 92       	push	r0
    44ca:	cd b7       	in	r28, 0x3d	; 61
    44cc:	de b7       	in	r29, 0x3e	; 62
    44ce:	9d 83       	std	Y+5, r25	; 0x05
    44d0:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    44d2:	ec 81       	ldd	r30, Y+4	; 0x04
    44d4:	fd 81       	ldd	r31, Y+5	; 0x05
    44d6:	05 80       	ldd	r0, Z+5	; 0x05
    44d8:	f6 81       	ldd	r31, Z+6	; 0x06
    44da:	e0 2d       	mov	r30, r0
    44dc:	86 81       	ldd	r24, Z+6	; 0x06
    44de:	97 81       	ldd	r25, Z+7	; 0x07
    44e0:	9b 83       	std	Y+3, r25	; 0x03
    44e2:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    44e4:	8a 81       	ldd	r24, Y+2	; 0x02
    44e6:	9b 81       	ldd	r25, Y+3	; 0x03
    44e8:	0c 96       	adiw	r24, 0x0c	; 12
    44ea:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    44ee:	80 91 af 03 	lds	r24, 0x03AF
    44f2:	88 23       	and	r24, r24
    44f4:	61 f5       	brne	.+88     	; 0x454e <xTaskRemoveFromEventList+0x8e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    44f6:	8a 81       	ldd	r24, Y+2	; 0x02
    44f8:	9b 81       	ldd	r25, Y+3	; 0x03
    44fa:	02 96       	adiw	r24, 0x02	; 2
    44fc:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    4500:	ea 81       	ldd	r30, Y+2	; 0x02
    4502:	fb 81       	ldd	r31, Y+3	; 0x03
    4504:	96 89       	ldd	r25, Z+22	; 0x16
    4506:	80 91 a5 03 	lds	r24, 0x03A5
    450a:	89 17       	cp	r24, r25
    450c:	28 f4       	brcc	.+10     	; 0x4518 <xTaskRemoveFromEventList+0x58>
    450e:	ea 81       	ldd	r30, Y+2	; 0x02
    4510:	fb 81       	ldd	r31, Y+3	; 0x03
    4512:	86 89       	ldd	r24, Z+22	; 0x16
    4514:	80 93 a5 03 	sts	0x03A5, r24
    4518:	ea 81       	ldd	r30, Y+2	; 0x02
    451a:	fb 81       	ldd	r31, Y+3	; 0x03
    451c:	86 89       	ldd	r24, Z+22	; 0x16
    451e:	28 2f       	mov	r18, r24
    4520:	30 e0       	ldi	r19, 0x00	; 0
    4522:	c9 01       	movw	r24, r18
    4524:	88 0f       	add	r24, r24
    4526:	99 1f       	adc	r25, r25
    4528:	88 0f       	add	r24, r24
    452a:	99 1f       	adc	r25, r25
    452c:	88 0f       	add	r24, r24
    452e:	99 1f       	adc	r25, r25
    4530:	82 0f       	add	r24, r18
    4532:	93 1f       	adc	r25, r19
    4534:	ac 01       	movw	r20, r24
    4536:	40 55       	subi	r20, 0x50	; 80
    4538:	5c 4f       	sbci	r21, 0xFC	; 252
    453a:	8a 81       	ldd	r24, Y+2	; 0x02
    453c:	9b 81       	ldd	r25, Y+3	; 0x03
    453e:	9c 01       	movw	r18, r24
    4540:	2e 5f       	subi	r18, 0xFE	; 254
    4542:	3f 4f       	sbci	r19, 0xFF	; 255
    4544:	ca 01       	movw	r24, r20
    4546:	b9 01       	movw	r22, r18
    4548:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <vListInsertEnd>
    454c:	0a c0       	rjmp	.+20     	; 0x4562 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    454e:	8a 81       	ldd	r24, Y+2	; 0x02
    4550:	9b 81       	ldd	r25, Y+3	; 0x03
    4552:	9c 01       	movw	r18, r24
    4554:	24 5f       	subi	r18, 0xF4	; 244
    4556:	3f 4f       	sbci	r19, 0xFF	; 255
    4558:	83 ef       	ldi	r24, 0xF3	; 243
    455a:	93 e0       	ldi	r25, 0x03	; 3
    455c:	b9 01       	movw	r22, r18
    455e:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    4562:	ea 81       	ldd	r30, Y+2	; 0x02
    4564:	fb 81       	ldd	r31, Y+3	; 0x03
    4566:	96 89       	ldd	r25, Z+22	; 0x16
    4568:	e0 91 9f 03 	lds	r30, 0x039F
    456c:	f0 91 a0 03 	lds	r31, 0x03A0
    4570:	86 89       	ldd	r24, Z+22	; 0x16
    4572:	89 17       	cp	r24, r25
    4574:	30 f4       	brcc	.+12     	; 0x4582 <xTaskRemoveFromEventList+0xc2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    4576:	81 e0       	ldi	r24, 0x01	; 1
    4578:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    457a:	81 e0       	ldi	r24, 0x01	; 1
    457c:	80 93 a8 03 	sts	0x03A8, r24
    4580:	01 c0       	rjmp	.+2      	; 0x4584 <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		xReturn = pdFALSE;
    4582:	19 82       	std	Y+1, r1	; 0x01
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    4584:	89 81       	ldd	r24, Y+1	; 0x01
}
    4586:	0f 90       	pop	r0
    4588:	0f 90       	pop	r0
    458a:	0f 90       	pop	r0
    458c:	0f 90       	pop	r0
    458e:	0f 90       	pop	r0
    4590:	cf 91       	pop	r28
    4592:	df 91       	pop	r29
    4594:	08 95       	ret

00004596 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    4596:	df 93       	push	r29
    4598:	cf 93       	push	r28
    459a:	cd b7       	in	r28, 0x3d	; 61
    459c:	de b7       	in	r29, 0x3e	; 62
    459e:	27 97       	sbiw	r28, 0x07	; 7
    45a0:	0f b6       	in	r0, 0x3f	; 63
    45a2:	f8 94       	cli
    45a4:	de bf       	out	0x3e, r29	; 62
    45a6:	0f be       	out	0x3f, r0	; 63
    45a8:	cd bf       	out	0x3d, r28	; 61
    45aa:	9d 83       	std	Y+5, r25	; 0x05
    45ac:	8c 83       	std	Y+4, r24	; 0x04
    45ae:	7f 83       	std	Y+7, r23	; 0x07
    45b0:	6e 83       	std	Y+6, r22	; 0x06
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    45b2:	8e 81       	ldd	r24, Y+6	; 0x06
    45b4:	9f 81       	ldd	r25, Y+7	; 0x07
    45b6:	90 68       	ori	r25, 0x80	; 128
    45b8:	ec 81       	ldd	r30, Y+4	; 0x04
    45ba:	fd 81       	ldd	r31, Y+5	; 0x05
    45bc:	91 83       	std	Z+1, r25	; 0x01
    45be:	80 83       	st	Z, r24

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    45c0:	ec 81       	ldd	r30, Y+4	; 0x04
    45c2:	fd 81       	ldd	r31, Y+5	; 0x05
    45c4:	86 81       	ldd	r24, Z+6	; 0x06
    45c6:	97 81       	ldd	r25, Z+7	; 0x07
    45c8:	9b 83       	std	Y+3, r25	; 0x03
    45ca:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    45cc:	8c 81       	ldd	r24, Y+4	; 0x04
    45ce:	9d 81       	ldd	r25, Y+5	; 0x05
    45d0:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    45d4:	8a 81       	ldd	r24, Y+2	; 0x02
    45d6:	9b 81       	ldd	r25, Y+3	; 0x03
    45d8:	02 96       	adiw	r24, 0x02	; 2
    45da:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    45de:	ea 81       	ldd	r30, Y+2	; 0x02
    45e0:	fb 81       	ldd	r31, Y+3	; 0x03
    45e2:	96 89       	ldd	r25, Z+22	; 0x16
    45e4:	80 91 a5 03 	lds	r24, 0x03A5
    45e8:	89 17       	cp	r24, r25
    45ea:	28 f4       	brcc	.+10     	; 0x45f6 <xTaskRemoveFromUnorderedEventList+0x60>
    45ec:	ea 81       	ldd	r30, Y+2	; 0x02
    45ee:	fb 81       	ldd	r31, Y+3	; 0x03
    45f0:	86 89       	ldd	r24, Z+22	; 0x16
    45f2:	80 93 a5 03 	sts	0x03A5, r24
    45f6:	ea 81       	ldd	r30, Y+2	; 0x02
    45f8:	fb 81       	ldd	r31, Y+3	; 0x03
    45fa:	86 89       	ldd	r24, Z+22	; 0x16
    45fc:	28 2f       	mov	r18, r24
    45fe:	30 e0       	ldi	r19, 0x00	; 0
    4600:	c9 01       	movw	r24, r18
    4602:	88 0f       	add	r24, r24
    4604:	99 1f       	adc	r25, r25
    4606:	88 0f       	add	r24, r24
    4608:	99 1f       	adc	r25, r25
    460a:	88 0f       	add	r24, r24
    460c:	99 1f       	adc	r25, r25
    460e:	82 0f       	add	r24, r18
    4610:	93 1f       	adc	r25, r19
    4612:	ac 01       	movw	r20, r24
    4614:	40 55       	subi	r20, 0x50	; 80
    4616:	5c 4f       	sbci	r21, 0xFC	; 252
    4618:	8a 81       	ldd	r24, Y+2	; 0x02
    461a:	9b 81       	ldd	r25, Y+3	; 0x03
    461c:	9c 01       	movw	r18, r24
    461e:	2e 5f       	subi	r18, 0xFE	; 254
    4620:	3f 4f       	sbci	r19, 0xFF	; 255
    4622:	ca 01       	movw	r24, r20
    4624:	b9 01       	movw	r22, r18
    4626:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    462a:	ea 81       	ldd	r30, Y+2	; 0x02
    462c:	fb 81       	ldd	r31, Y+3	; 0x03
    462e:	96 89       	ldd	r25, Z+22	; 0x16
    4630:	e0 91 9f 03 	lds	r30, 0x039F
    4634:	f0 91 a0 03 	lds	r31, 0x03A0
    4638:	86 89       	ldd	r24, Z+22	; 0x16
    463a:	89 17       	cp	r24, r25
    463c:	30 f4       	brcc	.+12     	; 0x464a <xTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    463e:	81 e0       	ldi	r24, 0x01	; 1
    4640:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    4642:	81 e0       	ldi	r24, 0x01	; 1
    4644:	80 93 a8 03 	sts	0x03A8, r24
    4648:	01 c0       	rjmp	.+2      	; 0x464c <xTaskRemoveFromUnorderedEventList+0xb6>
	}
	else
	{
		xReturn = pdFALSE;
    464a:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    464c:	89 81       	ldd	r24, Y+1	; 0x01
}
    464e:	27 96       	adiw	r28, 0x07	; 7
    4650:	0f b6       	in	r0, 0x3f	; 63
    4652:	f8 94       	cli
    4654:	de bf       	out	0x3e, r29	; 62
    4656:	0f be       	out	0x3f, r0	; 63
    4658:	cd bf       	out	0x3d, r28	; 61
    465a:	cf 91       	pop	r28
    465c:	df 91       	pop	r29
    465e:	08 95       	ret

00004660 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    4660:	df 93       	push	r29
    4662:	cf 93       	push	r28
    4664:	00 d0       	rcall	.+0      	; 0x4666 <vTaskSetTimeOutState+0x6>
    4666:	cd b7       	in	r28, 0x3d	; 61
    4668:	de b7       	in	r29, 0x3e	; 62
    466a:	9a 83       	std	Y+2, r25	; 0x02
    466c:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    466e:	80 91 a9 03 	lds	r24, 0x03A9
    4672:	e9 81       	ldd	r30, Y+1	; 0x01
    4674:	fa 81       	ldd	r31, Y+2	; 0x02
    4676:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    4678:	80 91 a3 03 	lds	r24, 0x03A3
    467c:	90 91 a4 03 	lds	r25, 0x03A4
    4680:	e9 81       	ldd	r30, Y+1	; 0x01
    4682:	fa 81       	ldd	r31, Y+2	; 0x02
    4684:	92 83       	std	Z+2, r25	; 0x02
    4686:	81 83       	std	Z+1, r24	; 0x01
}
    4688:	0f 90       	pop	r0
    468a:	0f 90       	pop	r0
    468c:	cf 91       	pop	r28
    468e:	df 91       	pop	r29
    4690:	08 95       	ret

00004692 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    4692:	df 93       	push	r29
    4694:	cf 93       	push	r28
    4696:	cd b7       	in	r28, 0x3d	; 61
    4698:	de b7       	in	r29, 0x3e	; 62
    469a:	27 97       	sbiw	r28, 0x07	; 7
    469c:	0f b6       	in	r0, 0x3f	; 63
    469e:	f8 94       	cli
    46a0:	de bf       	out	0x3e, r29	; 62
    46a2:	0f be       	out	0x3f, r0	; 63
    46a4:	cd bf       	out	0x3d, r28	; 61
    46a6:	9d 83       	std	Y+5, r25	; 0x05
    46a8:	8c 83       	std	Y+4, r24	; 0x04
    46aa:	7f 83       	std	Y+7, r23	; 0x07
    46ac:	6e 83       	std	Y+6, r22	; 0x06
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    46ae:	0f b6       	in	r0, 0x3f	; 63
    46b0:	f8 94       	cli
    46b2:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    46b4:	80 91 a3 03 	lds	r24, 0x03A3
    46b8:	90 91 a4 03 	lds	r25, 0x03A4
    46bc:	9a 83       	std	Y+2, r25	; 0x02
    46be:	89 83       	std	Y+1, r24	; 0x01
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    46c0:	ee 81       	ldd	r30, Y+6	; 0x06
    46c2:	ff 81       	ldd	r31, Y+7	; 0x07
    46c4:	80 81       	ld	r24, Z
    46c6:	91 81       	ldd	r25, Z+1	; 0x01
    46c8:	2f ef       	ldi	r18, 0xFF	; 255
    46ca:	8f 3f       	cpi	r24, 0xFF	; 255
    46cc:	92 07       	cpc	r25, r18
    46ce:	11 f4       	brne	.+4      	; 0x46d4 <xTaskCheckForTimeOut+0x42>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    46d0:	1b 82       	std	Y+3, r1	; 0x03
    46d2:	40 c0       	rjmp	.+128    	; 0x4754 <xTaskCheckForTimeOut+0xc2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    46d4:	ec 81       	ldd	r30, Y+4	; 0x04
    46d6:	fd 81       	ldd	r31, Y+5	; 0x05
    46d8:	90 81       	ld	r25, Z
    46da:	80 91 a9 03 	lds	r24, 0x03A9
    46de:	98 17       	cp	r25, r24
    46e0:	61 f0       	breq	.+24     	; 0x46fa <xTaskCheckForTimeOut+0x68>
    46e2:	ec 81       	ldd	r30, Y+4	; 0x04
    46e4:	fd 81       	ldd	r31, Y+5	; 0x05
    46e6:	21 81       	ldd	r18, Z+1	; 0x01
    46e8:	32 81       	ldd	r19, Z+2	; 0x02
    46ea:	89 81       	ldd	r24, Y+1	; 0x01
    46ec:	9a 81       	ldd	r25, Y+2	; 0x02
    46ee:	82 17       	cp	r24, r18
    46f0:	93 07       	cpc	r25, r19
    46f2:	18 f0       	brcs	.+6      	; 0x46fa <xTaskCheckForTimeOut+0x68>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    46f4:	81 e0       	ldi	r24, 0x01	; 1
    46f6:	8b 83       	std	Y+3, r24	; 0x03
    46f8:	2d c0       	rjmp	.+90     	; 0x4754 <xTaskCheckForTimeOut+0xc2>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    46fa:	ec 81       	ldd	r30, Y+4	; 0x04
    46fc:	fd 81       	ldd	r31, Y+5	; 0x05
    46fe:	21 81       	ldd	r18, Z+1	; 0x01
    4700:	32 81       	ldd	r19, Z+2	; 0x02
    4702:	89 81       	ldd	r24, Y+1	; 0x01
    4704:	9a 81       	ldd	r25, Y+2	; 0x02
    4706:	ac 01       	movw	r20, r24
    4708:	42 1b       	sub	r20, r18
    470a:	53 0b       	sbc	r21, r19
    470c:	9a 01       	movw	r18, r20
    470e:	ee 81       	ldd	r30, Y+6	; 0x06
    4710:	ff 81       	ldd	r31, Y+7	; 0x07
    4712:	80 81       	ld	r24, Z
    4714:	91 81       	ldd	r25, Z+1	; 0x01
    4716:	28 17       	cp	r18, r24
    4718:	39 07       	cpc	r19, r25
    471a:	d0 f4       	brcc	.+52     	; 0x4750 <xTaskCheckForTimeOut+0xbe>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    471c:	ee 81       	ldd	r30, Y+6	; 0x06
    471e:	ff 81       	ldd	r31, Y+7	; 0x07
    4720:	40 81       	ld	r20, Z
    4722:	51 81       	ldd	r21, Z+1	; 0x01
    4724:	ec 81       	ldd	r30, Y+4	; 0x04
    4726:	fd 81       	ldd	r31, Y+5	; 0x05
    4728:	21 81       	ldd	r18, Z+1	; 0x01
    472a:	32 81       	ldd	r19, Z+2	; 0x02
    472c:	89 81       	ldd	r24, Y+1	; 0x01
    472e:	9a 81       	ldd	r25, Y+2	; 0x02
    4730:	b9 01       	movw	r22, r18
    4732:	68 1b       	sub	r22, r24
    4734:	79 0b       	sbc	r23, r25
    4736:	cb 01       	movw	r24, r22
    4738:	84 0f       	add	r24, r20
    473a:	95 1f       	adc	r25, r21
    473c:	ee 81       	ldd	r30, Y+6	; 0x06
    473e:	ff 81       	ldd	r31, Y+7	; 0x07
    4740:	91 83       	std	Z+1, r25	; 0x01
    4742:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    4744:	8c 81       	ldd	r24, Y+4	; 0x04
    4746:	9d 81       	ldd	r25, Y+5	; 0x05
    4748:	0e 94 30 23 	call	0x4660	; 0x4660 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    474c:	1b 82       	std	Y+3, r1	; 0x03
    474e:	02 c0       	rjmp	.+4      	; 0x4754 <xTaskCheckForTimeOut+0xc2>
		}
		else
		{
			xReturn = pdTRUE;
    4750:	81 e0       	ldi	r24, 0x01	; 1
    4752:	8b 83       	std	Y+3, r24	; 0x03
		}
	}
	taskEXIT_CRITICAL();
    4754:	0f 90       	pop	r0
    4756:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    4758:	8b 81       	ldd	r24, Y+3	; 0x03
}
    475a:	27 96       	adiw	r28, 0x07	; 7
    475c:	0f b6       	in	r0, 0x3f	; 63
    475e:	f8 94       	cli
    4760:	de bf       	out	0x3e, r29	; 62
    4762:	0f be       	out	0x3f, r0	; 63
    4764:	cd bf       	out	0x3d, r28	; 61
    4766:	cf 91       	pop	r28
    4768:	df 91       	pop	r29
    476a:	08 95       	ret

0000476c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    476c:	df 93       	push	r29
    476e:	cf 93       	push	r28
    4770:	cd b7       	in	r28, 0x3d	; 61
    4772:	de b7       	in	r29, 0x3e	; 62
	xYieldPending = pdTRUE;
    4774:	81 e0       	ldi	r24, 0x01	; 1
    4776:	80 93 a8 03 	sts	0x03A8, r24
}
    477a:	cf 91       	pop	r28
    477c:	df 91       	pop	r29
    477e:	08 95       	ret

00004780 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    4780:	df 93       	push	r29
    4782:	cf 93       	push	r28
    4784:	00 d0       	rcall	.+0      	; 0x4786 <prvIdleTask+0x6>
    4786:	cd b7       	in	r28, 0x3d	; 61
    4788:	de b7       	in	r29, 0x3e	; 62
    478a:	9a 83       	std	Y+2, r25	; 0x02
    478c:	89 83       	std	Y+1, r24	; 0x01

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    478e:	0e 94 11 24 	call	0x4822	; 0x4822 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    4792:	80 91 b0 03 	lds	r24, 0x03B0
    4796:	82 30       	cpi	r24, 0x02	; 2
    4798:	d0 f3       	brcs	.-12     	; 0x478e <prvIdleTask+0xe>
			{
				taskYIELD();
    479a:	0e 94 33 12 	call	0x2466	; 0x2466 <vPortYield>
    479e:	f7 cf       	rjmp	.-18     	; 0x478e <prvIdleTask+0xe>

000047a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    47a0:	df 93       	push	r29
    47a2:	cf 93       	push	r28
    47a4:	0f 92       	push	r0
    47a6:	cd b7       	in	r28, 0x3d	; 61
    47a8:	de b7       	in	r29, 0x3e	; 62
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    47aa:	19 82       	std	Y+1, r1	; 0x01
    47ac:	13 c0       	rjmp	.+38     	; 0x47d4 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    47ae:	89 81       	ldd	r24, Y+1	; 0x01
    47b0:	28 2f       	mov	r18, r24
    47b2:	30 e0       	ldi	r19, 0x00	; 0
    47b4:	c9 01       	movw	r24, r18
    47b6:	88 0f       	add	r24, r24
    47b8:	99 1f       	adc	r25, r25
    47ba:	88 0f       	add	r24, r24
    47bc:	99 1f       	adc	r25, r25
    47be:	88 0f       	add	r24, r24
    47c0:	99 1f       	adc	r25, r25
    47c2:	82 0f       	add	r24, r18
    47c4:	93 1f       	adc	r25, r19
    47c6:	80 55       	subi	r24, 0x50	; 80
    47c8:	9c 4f       	sbci	r25, 0xFC	; 252
    47ca:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    47ce:	89 81       	ldd	r24, Y+1	; 0x01
    47d0:	8f 5f       	subi	r24, 0xFF	; 255
    47d2:	89 83       	std	Y+1, r24	; 0x01
    47d4:	89 81       	ldd	r24, Y+1	; 0x01
    47d6:	85 30       	cpi	r24, 0x05	; 5
    47d8:	50 f3       	brcs	.-44     	; 0x47ae <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    47da:	8d ed       	ldi	r24, 0xDD	; 221
    47dc:	93 e0       	ldi	r25, 0x03	; 3
    47de:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    47e2:	86 ee       	ldi	r24, 0xE6	; 230
    47e4:	93 e0       	ldi	r25, 0x03	; 3
    47e6:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
    47ea:	83 ef       	ldi	r24, 0xF3	; 243
    47ec:	93 e0       	ldi	r25, 0x03	; 3
    47ee:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    47f2:	8c ef       	ldi	r24, 0xFC	; 252
    47f4:	93 e0       	ldi	r25, 0x03	; 3
    47f6:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    47fa:	85 e0       	ldi	r24, 0x05	; 5
    47fc:	94 e0       	ldi	r25, 0x04	; 4
    47fe:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    4802:	8d ed       	ldi	r24, 0xDD	; 221
    4804:	93 e0       	ldi	r25, 0x03	; 3
    4806:	90 93 f0 03 	sts	0x03F0, r25
    480a:	80 93 ef 03 	sts	0x03EF, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    480e:	86 ee       	ldi	r24, 0xE6	; 230
    4810:	93 e0       	ldi	r25, 0x03	; 3
    4812:	90 93 f2 03 	sts	0x03F2, r25
    4816:	80 93 f1 03 	sts	0x03F1, r24
}
    481a:	0f 90       	pop	r0
    481c:	cf 91       	pop	r28
    481e:	df 91       	pop	r29
    4820:	08 95       	ret

00004822 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    4822:	df 93       	push	r29
    4824:	cf 93       	push	r28
    4826:	00 d0       	rcall	.+0      	; 0x4828 <prvCheckTasksWaitingTermination+0x6>
    4828:	0f 92       	push	r0
    482a:	cd b7       	in	r28, 0x3d	; 61
    482c:	de b7       	in	r29, 0x3e	; 62
    482e:	2e c0       	rjmp	.+92     	; 0x488c <prvCheckTasksWaitingTermination+0x6a>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    4830:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    4834:	80 91 fc 03 	lds	r24, 0x03FC
    4838:	1b 82       	std	Y+3, r1	; 0x03
    483a:	88 23       	and	r24, r24
    483c:	11 f4       	brne	.+4      	; 0x4842 <prvCheckTasksWaitingTermination+0x20>
    483e:	81 e0       	ldi	r24, 0x01	; 1
    4840:	8b 83       	std	Y+3, r24	; 0x03
			}
			( void ) xTaskResumeAll();
    4842:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    4846:	8b 81       	ldd	r24, Y+3	; 0x03
    4848:	88 23       	and	r24, r24
    484a:	01 f5       	brne	.+64     	; 0x488c <prvCheckTasksWaitingTermination+0x6a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    484c:	0f b6       	in	r0, 0x3f	; 63
    484e:	f8 94       	cli
    4850:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    4852:	e0 91 01 04 	lds	r30, 0x0401
    4856:	f0 91 02 04 	lds	r31, 0x0402
    485a:	86 81       	ldd	r24, Z+6	; 0x06
    485c:	97 81       	ldd	r25, Z+7	; 0x07
    485e:	9a 83       	std	Y+2, r25	; 0x02
    4860:	89 83       	std	Y+1, r24	; 0x01
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4862:	89 81       	ldd	r24, Y+1	; 0x01
    4864:	9a 81       	ldd	r25, Y+2	; 0x02
    4866:	02 96       	adiw	r24, 0x02	; 2
    4868:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>
					--uxCurrentNumberOfTasks;
    486c:	80 91 a2 03 	lds	r24, 0x03A2
    4870:	81 50       	subi	r24, 0x01	; 1
    4872:	80 93 a2 03 	sts	0x03A2, r24
					--uxDeletedTasksWaitingCleanUp;
    4876:	80 91 a1 03 	lds	r24, 0x03A1
    487a:	81 50       	subi	r24, 0x01	; 1
    487c:	80 93 a1 03 	sts	0x03A1, r24
				}
				taskEXIT_CRITICAL();
    4880:	0f 90       	pop	r0
    4882:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    4884:	89 81       	ldd	r24, Y+1	; 0x01
    4886:	9a 81       	ldd	r25, Y+2	; 0x02
    4888:	0e 94 50 24 	call	0x48a0	; 0x48a0 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    488c:	80 91 a1 03 	lds	r24, 0x03A1
    4890:	88 23       	and	r24, r24
    4892:	71 f6       	brne	.-100    	; 0x4830 <prvCheckTasksWaitingTermination+0xe>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    4894:	0f 90       	pop	r0
    4896:	0f 90       	pop	r0
    4898:	0f 90       	pop	r0
    489a:	cf 91       	pop	r28
    489c:	df 91       	pop	r29
    489e:	08 95       	ret

000048a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    48a0:	df 93       	push	r29
    48a2:	cf 93       	push	r28
    48a4:	00 d0       	rcall	.+0      	; 0x48a6 <prvDeleteTCB+0x6>
    48a6:	cd b7       	in	r28, 0x3d	; 61
    48a8:	de b7       	in	r29, 0x3e	; 62
    48aa:	9a 83       	std	Y+2, r25	; 0x02
    48ac:	89 83       	std	Y+1, r24	; 0x01

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    48ae:	e9 81       	ldd	r30, Y+1	; 0x01
    48b0:	fa 81       	ldd	r31, Y+2	; 0x02
    48b2:	87 89       	ldd	r24, Z+23	; 0x17
    48b4:	90 8d       	ldd	r25, Z+24	; 0x18
    48b6:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <vPortFree>
			vPortFree( pxTCB );
    48ba:	89 81       	ldd	r24, Y+1	; 0x01
    48bc:	9a 81       	ldd	r25, Y+2	; 0x02
    48be:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    48c2:	0f 90       	pop	r0
    48c4:	0f 90       	pop	r0
    48c6:	cf 91       	pop	r28
    48c8:	df 91       	pop	r29
    48ca:	08 95       	ret

000048cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    48cc:	df 93       	push	r29
    48ce:	cf 93       	push	r28
    48d0:	00 d0       	rcall	.+0      	; 0x48d2 <prvResetNextTaskUnblockTime+0x6>
    48d2:	cd b7       	in	r28, 0x3d	; 61
    48d4:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    48d6:	e0 91 ef 03 	lds	r30, 0x03EF
    48da:	f0 91 f0 03 	lds	r31, 0x03F0
    48de:	80 81       	ld	r24, Z
    48e0:	88 23       	and	r24, r24
    48e2:	39 f4       	brne	.+14     	; 0x48f2 <prvResetNextTaskUnblockTime+0x26>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    48e4:	8f ef       	ldi	r24, 0xFF	; 255
    48e6:	9f ef       	ldi	r25, 0xFF	; 255
    48e8:	90 93 ac 03 	sts	0x03AC, r25
    48ec:	80 93 ab 03 	sts	0x03AB, r24
    48f0:	13 c0       	rjmp	.+38     	; 0x4918 <prvResetNextTaskUnblockTime+0x4c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    48f2:	e0 91 ef 03 	lds	r30, 0x03EF
    48f6:	f0 91 f0 03 	lds	r31, 0x03F0
    48fa:	05 80       	ldd	r0, Z+5	; 0x05
    48fc:	f6 81       	ldd	r31, Z+6	; 0x06
    48fe:	e0 2d       	mov	r30, r0
    4900:	86 81       	ldd	r24, Z+6	; 0x06
    4902:	97 81       	ldd	r25, Z+7	; 0x07
    4904:	9a 83       	std	Y+2, r25	; 0x02
    4906:	89 83       	std	Y+1, r24	; 0x01
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    4908:	e9 81       	ldd	r30, Y+1	; 0x01
    490a:	fa 81       	ldd	r31, Y+2	; 0x02
    490c:	82 81       	ldd	r24, Z+2	; 0x02
    490e:	93 81       	ldd	r25, Z+3	; 0x03
    4910:	90 93 ac 03 	sts	0x03AC, r25
    4914:	80 93 ab 03 	sts	0x03AB, r24
	}
}
    4918:	0f 90       	pop	r0
    491a:	0f 90       	pop	r0
    491c:	cf 91       	pop	r28
    491e:	df 91       	pop	r29
    4920:	08 95       	ret

00004922 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    4922:	df 93       	push	r29
    4924:	cf 93       	push	r28
    4926:	00 d0       	rcall	.+0      	; 0x4928 <xTaskGetCurrentTaskHandle+0x6>
    4928:	cd b7       	in	r28, 0x3d	; 61
    492a:	de b7       	in	r29, 0x3e	; 62
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    492c:	80 91 9f 03 	lds	r24, 0x039F
    4930:	90 91 a0 03 	lds	r25, 0x03A0
    4934:	9a 83       	std	Y+2, r25	; 0x02
    4936:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
    4938:	89 81       	ldd	r24, Y+1	; 0x01
    493a:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    493c:	0f 90       	pop	r0
    493e:	0f 90       	pop	r0
    4940:	cf 91       	pop	r28
    4942:	df 91       	pop	r29
    4944:	08 95       	ret

00004946 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    4946:	df 93       	push	r29
    4948:	cf 93       	push	r28
    494a:	00 d0       	rcall	.+0      	; 0x494c <vTaskPriorityInherit+0x6>
    494c:	00 d0       	rcall	.+0      	; 0x494e <vTaskPriorityInherit+0x8>
    494e:	cd b7       	in	r28, 0x3d	; 61
    4950:	de b7       	in	r29, 0x3e	; 62
    4952:	9c 83       	std	Y+4, r25	; 0x04
    4954:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    4956:	8b 81       	ldd	r24, Y+3	; 0x03
    4958:	9c 81       	ldd	r25, Y+4	; 0x04
    495a:	9a 83       	std	Y+2, r25	; 0x02
    495c:	89 83       	std	Y+1, r24	; 0x01

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    495e:	8b 81       	ldd	r24, Y+3	; 0x03
    4960:	9c 81       	ldd	r25, Y+4	; 0x04
    4962:	00 97       	sbiw	r24, 0x00	; 0
    4964:	09 f4       	brne	.+2      	; 0x4968 <vTaskPriorityInherit+0x22>
    4966:	73 c0       	rjmp	.+230    	; 0x4a4e <vTaskPriorityInherit+0x108>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    4968:	e9 81       	ldd	r30, Y+1	; 0x01
    496a:	fa 81       	ldd	r31, Y+2	; 0x02
    496c:	96 89       	ldd	r25, Z+22	; 0x16
    496e:	e0 91 9f 03 	lds	r30, 0x039F
    4972:	f0 91 a0 03 	lds	r31, 0x03A0
    4976:	86 89       	ldd	r24, Z+22	; 0x16
    4978:	98 17       	cp	r25, r24
    497a:	08 f0       	brcs	.+2      	; 0x497e <vTaskPriorityInherit+0x38>
    497c:	68 c0       	rjmp	.+208    	; 0x4a4e <vTaskPriorityInherit+0x108>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    497e:	e9 81       	ldd	r30, Y+1	; 0x01
    4980:	fa 81       	ldd	r31, Y+2	; 0x02
    4982:	84 85       	ldd	r24, Z+12	; 0x0c
    4984:	95 85       	ldd	r25, Z+13	; 0x0d
    4986:	99 23       	and	r25, r25
    4988:	7c f0       	brlt	.+30     	; 0x49a8 <vTaskPriorityInherit+0x62>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    498a:	e0 91 9f 03 	lds	r30, 0x039F
    498e:	f0 91 a0 03 	lds	r31, 0x03A0
    4992:	86 89       	ldd	r24, Z+22	; 0x16
    4994:	28 2f       	mov	r18, r24
    4996:	30 e0       	ldi	r19, 0x00	; 0
    4998:	85 e0       	ldi	r24, 0x05	; 5
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	82 1b       	sub	r24, r18
    499e:	93 0b       	sbc	r25, r19
    49a0:	e9 81       	ldd	r30, Y+1	; 0x01
    49a2:	fa 81       	ldd	r31, Y+2	; 0x02
    49a4:	95 87       	std	Z+13, r25	; 0x0d
    49a6:	84 87       	std	Z+12, r24	; 0x0c
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    49a8:	e9 81       	ldd	r30, Y+1	; 0x01
    49aa:	fa 81       	ldd	r31, Y+2	; 0x02
    49ac:	42 85       	ldd	r20, Z+10	; 0x0a
    49ae:	53 85       	ldd	r21, Z+11	; 0x0b
    49b0:	e9 81       	ldd	r30, Y+1	; 0x01
    49b2:	fa 81       	ldd	r31, Y+2	; 0x02
    49b4:	86 89       	ldd	r24, Z+22	; 0x16
    49b6:	28 2f       	mov	r18, r24
    49b8:	30 e0       	ldi	r19, 0x00	; 0
    49ba:	c9 01       	movw	r24, r18
    49bc:	88 0f       	add	r24, r24
    49be:	99 1f       	adc	r25, r25
    49c0:	88 0f       	add	r24, r24
    49c2:	99 1f       	adc	r25, r25
    49c4:	88 0f       	add	r24, r24
    49c6:	99 1f       	adc	r25, r25
    49c8:	82 0f       	add	r24, r18
    49ca:	93 1f       	adc	r25, r19
    49cc:	80 55       	subi	r24, 0x50	; 80
    49ce:	9c 4f       	sbci	r25, 0xFC	; 252
    49d0:	48 17       	cp	r20, r24
    49d2:	59 07       	cpc	r21, r25
    49d4:	a1 f5       	brne	.+104    	; 0x4a3e <vTaskPriorityInherit+0xf8>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    49d6:	89 81       	ldd	r24, Y+1	; 0x01
    49d8:	9a 81       	ldd	r25, Y+2	; 0x02
    49da:	02 96       	adiw	r24, 0x02	; 2
    49dc:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    49e0:	e0 91 9f 03 	lds	r30, 0x039F
    49e4:	f0 91 a0 03 	lds	r31, 0x03A0
    49e8:	86 89       	ldd	r24, Z+22	; 0x16
    49ea:	e9 81       	ldd	r30, Y+1	; 0x01
    49ec:	fa 81       	ldd	r31, Y+2	; 0x02
    49ee:	86 8b       	std	Z+22, r24	; 0x16
					prvAddTaskToReadyList( pxTCB );
    49f0:	e9 81       	ldd	r30, Y+1	; 0x01
    49f2:	fa 81       	ldd	r31, Y+2	; 0x02
    49f4:	96 89       	ldd	r25, Z+22	; 0x16
    49f6:	80 91 a5 03 	lds	r24, 0x03A5
    49fa:	89 17       	cp	r24, r25
    49fc:	28 f4       	brcc	.+10     	; 0x4a08 <vTaskPriorityInherit+0xc2>
    49fe:	e9 81       	ldd	r30, Y+1	; 0x01
    4a00:	fa 81       	ldd	r31, Y+2	; 0x02
    4a02:	86 89       	ldd	r24, Z+22	; 0x16
    4a04:	80 93 a5 03 	sts	0x03A5, r24
    4a08:	e9 81       	ldd	r30, Y+1	; 0x01
    4a0a:	fa 81       	ldd	r31, Y+2	; 0x02
    4a0c:	86 89       	ldd	r24, Z+22	; 0x16
    4a0e:	28 2f       	mov	r18, r24
    4a10:	30 e0       	ldi	r19, 0x00	; 0
    4a12:	c9 01       	movw	r24, r18
    4a14:	88 0f       	add	r24, r24
    4a16:	99 1f       	adc	r25, r25
    4a18:	88 0f       	add	r24, r24
    4a1a:	99 1f       	adc	r25, r25
    4a1c:	88 0f       	add	r24, r24
    4a1e:	99 1f       	adc	r25, r25
    4a20:	82 0f       	add	r24, r18
    4a22:	93 1f       	adc	r25, r19
    4a24:	ac 01       	movw	r20, r24
    4a26:	40 55       	subi	r20, 0x50	; 80
    4a28:	5c 4f       	sbci	r21, 0xFC	; 252
    4a2a:	89 81       	ldd	r24, Y+1	; 0x01
    4a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a2e:	9c 01       	movw	r18, r24
    4a30:	2e 5f       	subi	r18, 0xFE	; 254
    4a32:	3f 4f       	sbci	r19, 0xFF	; 255
    4a34:	ca 01       	movw	r24, r20
    4a36:	b9 01       	movw	r22, r18
    4a38:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <vListInsertEnd>
    4a3c:	08 c0       	rjmp	.+16     	; 0x4a4e <vTaskPriorityInherit+0x108>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4a3e:	e0 91 9f 03 	lds	r30, 0x039F
    4a42:	f0 91 a0 03 	lds	r31, 0x03A0
    4a46:	86 89       	ldd	r24, Z+22	; 0x16
    4a48:	e9 81       	ldd	r30, Y+1	; 0x01
    4a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    4a4c:	86 8b       	std	Z+22, r24	; 0x16
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4a4e:	0f 90       	pop	r0
    4a50:	0f 90       	pop	r0
    4a52:	0f 90       	pop	r0
    4a54:	0f 90       	pop	r0
    4a56:	cf 91       	pop	r28
    4a58:	df 91       	pop	r29
    4a5a:	08 95       	ret

00004a5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    4a5c:	df 93       	push	r29
    4a5e:	cf 93       	push	r28
    4a60:	00 d0       	rcall	.+0      	; 0x4a62 <xTaskPriorityDisinherit+0x6>
    4a62:	00 d0       	rcall	.+0      	; 0x4a64 <xTaskPriorityDisinherit+0x8>
    4a64:	0f 92       	push	r0
    4a66:	cd b7       	in	r28, 0x3d	; 61
    4a68:	de b7       	in	r29, 0x3e	; 62
    4a6a:	9d 83       	std	Y+5, r25	; 0x05
    4a6c:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    4a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    4a70:	9d 81       	ldd	r25, Y+5	; 0x05
    4a72:	9b 83       	std	Y+3, r25	; 0x03
    4a74:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xReturn = pdFALSE;
    4a76:	19 82       	std	Y+1, r1	; 0x01

		if( pxMutexHolder != NULL )
    4a78:	8c 81       	ldd	r24, Y+4	; 0x04
    4a7a:	9d 81       	ldd	r25, Y+5	; 0x05
    4a7c:	00 97       	sbiw	r24, 0x00	; 0
    4a7e:	09 f4       	brne	.+2      	; 0x4a82 <xTaskPriorityDisinherit+0x26>
    4a80:	56 c0       	rjmp	.+172    	; 0x4b2e <xTaskPriorityDisinherit+0xd2>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    4a82:	ea 81       	ldd	r30, Y+2	; 0x02
    4a84:	fb 81       	ldd	r31, Y+3	; 0x03
    4a86:	84 a1       	ldd	r24, Z+36	; 0x24
    4a88:	81 50       	subi	r24, 0x01	; 1
    4a8a:	ea 81       	ldd	r30, Y+2	; 0x02
    4a8c:	fb 81       	ldd	r31, Y+3	; 0x03
    4a8e:	84 a3       	std	Z+36, r24	; 0x24

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    4a90:	ea 81       	ldd	r30, Y+2	; 0x02
    4a92:	fb 81       	ldd	r31, Y+3	; 0x03
    4a94:	96 89       	ldd	r25, Z+22	; 0x16
    4a96:	ea 81       	ldd	r30, Y+2	; 0x02
    4a98:	fb 81       	ldd	r31, Y+3	; 0x03
    4a9a:	83 a1       	ldd	r24, Z+35	; 0x23
    4a9c:	98 17       	cp	r25, r24
    4a9e:	09 f4       	brne	.+2      	; 0x4aa2 <xTaskPriorityDisinherit+0x46>
    4aa0:	46 c0       	rjmp	.+140    	; 0x4b2e <xTaskPriorityDisinherit+0xd2>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    4aa2:	ea 81       	ldd	r30, Y+2	; 0x02
    4aa4:	fb 81       	ldd	r31, Y+3	; 0x03
    4aa6:	84 a1       	ldd	r24, Z+36	; 0x24
    4aa8:	88 23       	and	r24, r24
    4aaa:	09 f0       	breq	.+2      	; 0x4aae <xTaskPriorityDisinherit+0x52>
    4aac:	40 c0       	rjmp	.+128    	; 0x4b2e <xTaskPriorityDisinherit+0xd2>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4aae:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab0:	9b 81       	ldd	r25, Y+3	; 0x03
    4ab2:	02 96       	adiw	r24, 0x02	; 2
    4ab4:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    4ab8:	ea 81       	ldd	r30, Y+2	; 0x02
    4aba:	fb 81       	ldd	r31, Y+3	; 0x03
    4abc:	83 a1       	ldd	r24, Z+35	; 0x23
    4abe:	ea 81       	ldd	r30, Y+2	; 0x02
    4ac0:	fb 81       	ldd	r31, Y+3	; 0x03
    4ac2:	86 8b       	std	Z+22, r24	; 0x16

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4ac4:	ea 81       	ldd	r30, Y+2	; 0x02
    4ac6:	fb 81       	ldd	r31, Y+3	; 0x03
    4ac8:	86 89       	ldd	r24, Z+22	; 0x16
    4aca:	28 2f       	mov	r18, r24
    4acc:	30 e0       	ldi	r19, 0x00	; 0
    4ace:	85 e0       	ldi	r24, 0x05	; 5
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	82 1b       	sub	r24, r18
    4ad4:	93 0b       	sbc	r25, r19
    4ad6:	ea 81       	ldd	r30, Y+2	; 0x02
    4ad8:	fb 81       	ldd	r31, Y+3	; 0x03
    4ada:	95 87       	std	Z+13, r25	; 0x0d
    4adc:	84 87       	std	Z+12, r24	; 0x0c
					prvAddTaskToReadyList( pxTCB );
    4ade:	ea 81       	ldd	r30, Y+2	; 0x02
    4ae0:	fb 81       	ldd	r31, Y+3	; 0x03
    4ae2:	96 89       	ldd	r25, Z+22	; 0x16
    4ae4:	80 91 a5 03 	lds	r24, 0x03A5
    4ae8:	89 17       	cp	r24, r25
    4aea:	28 f4       	brcc	.+10     	; 0x4af6 <xTaskPriorityDisinherit+0x9a>
    4aec:	ea 81       	ldd	r30, Y+2	; 0x02
    4aee:	fb 81       	ldd	r31, Y+3	; 0x03
    4af0:	86 89       	ldd	r24, Z+22	; 0x16
    4af2:	80 93 a5 03 	sts	0x03A5, r24
    4af6:	ea 81       	ldd	r30, Y+2	; 0x02
    4af8:	fb 81       	ldd	r31, Y+3	; 0x03
    4afa:	86 89       	ldd	r24, Z+22	; 0x16
    4afc:	28 2f       	mov	r18, r24
    4afe:	30 e0       	ldi	r19, 0x00	; 0
    4b00:	c9 01       	movw	r24, r18
    4b02:	88 0f       	add	r24, r24
    4b04:	99 1f       	adc	r25, r25
    4b06:	88 0f       	add	r24, r24
    4b08:	99 1f       	adc	r25, r25
    4b0a:	88 0f       	add	r24, r24
    4b0c:	99 1f       	adc	r25, r25
    4b0e:	82 0f       	add	r24, r18
    4b10:	93 1f       	adc	r25, r19
    4b12:	ac 01       	movw	r20, r24
    4b14:	40 55       	subi	r20, 0x50	; 80
    4b16:	5c 4f       	sbci	r21, 0xFC	; 252
    4b18:	8a 81       	ldd	r24, Y+2	; 0x02
    4b1a:	9b 81       	ldd	r25, Y+3	; 0x03
    4b1c:	9c 01       	movw	r18, r24
    4b1e:	2e 5f       	subi	r18, 0xFE	; 254
    4b20:	3f 4f       	sbci	r19, 0xFF	; 255
    4b22:	ca 01       	movw	r24, r20
    4b24:	b9 01       	movw	r22, r18
    4b26:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    4b2a:	81 e0       	ldi	r24, 0x01	; 1
    4b2c:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    4b2e:	89 81       	ldd	r24, Y+1	; 0x01
	}
    4b30:	0f 90       	pop	r0
    4b32:	0f 90       	pop	r0
    4b34:	0f 90       	pop	r0
    4b36:	0f 90       	pop	r0
    4b38:	0f 90       	pop	r0
    4b3a:	cf 91       	pop	r28
    4b3c:	df 91       	pop	r29
    4b3e:	08 95       	ret

00004b40 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    4b40:	df 93       	push	r29
    4b42:	cf 93       	push	r28
    4b44:	00 d0       	rcall	.+0      	; 0x4b46 <uxTaskResetEventItemValue+0x6>
    4b46:	cd b7       	in	r28, 0x3d	; 61
    4b48:	de b7       	in	r29, 0x3e	; 62
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    4b4a:	e0 91 9f 03 	lds	r30, 0x039F
    4b4e:	f0 91 a0 03 	lds	r31, 0x03A0
    4b52:	84 85       	ldd	r24, Z+12	; 0x0c
    4b54:	95 85       	ldd	r25, Z+13	; 0x0d
    4b56:	9a 83       	std	Y+2, r25	; 0x02
    4b58:	89 83       	std	Y+1, r24	; 0x01

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4b5a:	a0 91 9f 03 	lds	r26, 0x039F
    4b5e:	b0 91 a0 03 	lds	r27, 0x03A0
    4b62:	e0 91 9f 03 	lds	r30, 0x039F
    4b66:	f0 91 a0 03 	lds	r31, 0x03A0
    4b6a:	86 89       	ldd	r24, Z+22	; 0x16
    4b6c:	28 2f       	mov	r18, r24
    4b6e:	30 e0       	ldi	r19, 0x00	; 0
    4b70:	85 e0       	ldi	r24, 0x05	; 5
    4b72:	90 e0       	ldi	r25, 0x00	; 0
    4b74:	82 1b       	sub	r24, r18
    4b76:	93 0b       	sbc	r25, r19
    4b78:	1d 96       	adiw	r26, 0x0d	; 13
    4b7a:	9c 93       	st	X, r25
    4b7c:	8e 93       	st	-X, r24
    4b7e:	1c 97       	sbiw	r26, 0x0c	; 12

	return uxReturn;
    4b80:	89 81       	ldd	r24, Y+1	; 0x01
    4b82:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4b84:	0f 90       	pop	r0
    4b86:	0f 90       	pop	r0
    4b88:	cf 91       	pop	r28
    4b8a:	df 91       	pop	r29
    4b8c:	08 95       	ret

00004b8e <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    4b8e:	df 93       	push	r29
    4b90:	cf 93       	push	r28
    4b92:	cd b7       	in	r28, 0x3d	; 61
    4b94:	de b7       	in	r29, 0x3e	; 62
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    4b96:	80 91 9f 03 	lds	r24, 0x039F
    4b9a:	90 91 a0 03 	lds	r25, 0x03A0
    4b9e:	00 97       	sbiw	r24, 0x00	; 0
    4ba0:	39 f0       	breq	.+14     	; 0x4bb0 <pvTaskIncrementMutexHeldCount+0x22>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    4ba2:	e0 91 9f 03 	lds	r30, 0x039F
    4ba6:	f0 91 a0 03 	lds	r31, 0x03A0
    4baa:	84 a1       	ldd	r24, Z+36	; 0x24
    4bac:	8f 5f       	subi	r24, 0xFF	; 255
    4bae:	84 a3       	std	Z+36, r24	; 0x24
		}

		return pxCurrentTCB;
    4bb0:	80 91 9f 03 	lds	r24, 0x039F
    4bb4:	90 91 a0 03 	lds	r25, 0x03A0
	}
    4bb8:	cf 91       	pop	r28
    4bba:	df 91       	pop	r29
    4bbc:	08 95       	ret

00004bbe <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    4bbe:	df 93       	push	r29
    4bc0:	cf 93       	push	r28
    4bc2:	cd b7       	in	r28, 0x3d	; 61
    4bc4:	de b7       	in	r29, 0x3e	; 62
    4bc6:	27 97       	sbiw	r28, 0x07	; 7
    4bc8:	0f b6       	in	r0, 0x3f	; 63
    4bca:	f8 94       	cli
    4bcc:	de bf       	out	0x3e, r29	; 62
    4bce:	0f be       	out	0x3f, r0	; 63
    4bd0:	cd bf       	out	0x3d, r28	; 61
    4bd2:	8d 83       	std	Y+5, r24	; 0x05
    4bd4:	7f 83       	std	Y+7, r23	; 0x07
    4bd6:	6e 83       	std	Y+6, r22	; 0x06
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    4bd8:	0f b6       	in	r0, 0x3f	; 63
    4bda:	f8 94       	cli
    4bdc:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    4bde:	e0 91 9f 03 	lds	r30, 0x039F
    4be2:	f0 91 a0 03 	lds	r31, 0x03A0
    4be6:	85 a1       	ldd	r24, Z+37	; 0x25
    4be8:	96 a1       	ldd	r25, Z+38	; 0x26
    4bea:	a7 a1       	ldd	r26, Z+39	; 0x27
    4bec:	b0 a5       	ldd	r27, Z+40	; 0x28
    4bee:	00 97       	sbiw	r24, 0x00	; 0
    4bf0:	a1 05       	cpc	r26, r1
    4bf2:	b1 05       	cpc	r27, r1
    4bf4:	89 f4       	brne	.+34     	; 0x4c18 <ulTaskNotifyTake+0x5a>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    4bf6:	e0 91 9f 03 	lds	r30, 0x039F
    4bfa:	f0 91 a0 03 	lds	r31, 0x03A0
    4bfe:	81 e0       	ldi	r24, 0x01	; 1
    4c00:	81 a7       	std	Z+41, r24	; 0x29

				if( xTicksToWait > ( TickType_t ) 0 )
    4c02:	8e 81       	ldd	r24, Y+6	; 0x06
    4c04:	9f 81       	ldd	r25, Y+7	; 0x07
    4c06:	00 97       	sbiw	r24, 0x00	; 0
    4c08:	39 f0       	breq	.+14     	; 0x4c18 <ulTaskNotifyTake+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    4c0a:	8e 81       	ldd	r24, Y+6	; 0x06
    4c0c:	9f 81       	ldd	r25, Y+7	; 0x07
    4c0e:	61 e0       	ldi	r22, 0x01	; 1
    4c10:	0e 94 89 29 	call	0x5312	; 0x5312 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    4c14:	0e 94 33 12 	call	0x2466	; 0x2466 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4c18:	0f 90       	pop	r0
    4c1a:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    4c1c:	0f b6       	in	r0, 0x3f	; 63
    4c1e:	f8 94       	cli
    4c20:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    4c22:	e0 91 9f 03 	lds	r30, 0x039F
    4c26:	f0 91 a0 03 	lds	r31, 0x03A0
    4c2a:	85 a1       	ldd	r24, Z+37	; 0x25
    4c2c:	96 a1       	ldd	r25, Z+38	; 0x26
    4c2e:	a7 a1       	ldd	r26, Z+39	; 0x27
    4c30:	b0 a5       	ldd	r27, Z+40	; 0x28
    4c32:	89 83       	std	Y+1, r24	; 0x01
    4c34:	9a 83       	std	Y+2, r25	; 0x02
    4c36:	ab 83       	std	Y+3, r26	; 0x03
    4c38:	bc 83       	std	Y+4, r27	; 0x04

			if( ulReturn != 0UL )
    4c3a:	89 81       	ldd	r24, Y+1	; 0x01
    4c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c3e:	ab 81       	ldd	r26, Y+3	; 0x03
    4c40:	bc 81       	ldd	r27, Y+4	; 0x04
    4c42:	00 97       	sbiw	r24, 0x00	; 0
    4c44:	a1 05       	cpc	r26, r1
    4c46:	b1 05       	cpc	r27, r1
    4c48:	d9 f0       	breq	.+54     	; 0x4c80 <ulTaskNotifyTake+0xc2>
			{
				if( xClearCountOnExit != pdFALSE )
    4c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c4c:	88 23       	and	r24, r24
    4c4e:	49 f0       	breq	.+18     	; 0x4c62 <ulTaskNotifyTake+0xa4>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    4c50:	e0 91 9f 03 	lds	r30, 0x039F
    4c54:	f0 91 a0 03 	lds	r31, 0x03A0
    4c58:	15 a2       	std	Z+37, r1	; 0x25
    4c5a:	16 a2       	std	Z+38, r1	; 0x26
    4c5c:	17 a2       	std	Z+39, r1	; 0x27
    4c5e:	10 a6       	std	Z+40, r1	; 0x28
    4c60:	0f c0       	rjmp	.+30     	; 0x4c80 <ulTaskNotifyTake+0xc2>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
    4c62:	e0 91 9f 03 	lds	r30, 0x039F
    4c66:	f0 91 a0 03 	lds	r31, 0x03A0
    4c6a:	89 81       	ldd	r24, Y+1	; 0x01
    4c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c6e:	ab 81       	ldd	r26, Y+3	; 0x03
    4c70:	bc 81       	ldd	r27, Y+4	; 0x04
    4c72:	01 97       	sbiw	r24, 0x01	; 1
    4c74:	a1 09       	sbc	r26, r1
    4c76:	b1 09       	sbc	r27, r1
    4c78:	85 a3       	std	Z+37, r24	; 0x25
    4c7a:	96 a3       	std	Z+38, r25	; 0x26
    4c7c:	a7 a3       	std	Z+39, r26	; 0x27
    4c7e:	b0 a7       	std	Z+40, r27	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4c80:	e0 91 9f 03 	lds	r30, 0x039F
    4c84:	f0 91 a0 03 	lds	r31, 0x03A0
    4c88:	11 a6       	std	Z+41, r1	; 0x29
		}
		taskEXIT_CRITICAL();
    4c8a:	0f 90       	pop	r0
    4c8c:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
    4c8e:	89 81       	ldd	r24, Y+1	; 0x01
    4c90:	9a 81       	ldd	r25, Y+2	; 0x02
    4c92:	ab 81       	ldd	r26, Y+3	; 0x03
    4c94:	bc 81       	ldd	r27, Y+4	; 0x04
	}
    4c96:	bc 01       	movw	r22, r24
    4c98:	cd 01       	movw	r24, r26
    4c9a:	27 96       	adiw	r28, 0x07	; 7
    4c9c:	0f b6       	in	r0, 0x3f	; 63
    4c9e:	f8 94       	cli
    4ca0:	de bf       	out	0x3e, r29	; 62
    4ca2:	0f be       	out	0x3f, r0	; 63
    4ca4:	cd bf       	out	0x3d, r28	; 61
    4ca6:	cf 91       	pop	r28
    4ca8:	df 91       	pop	r29
    4caa:	08 95       	ret

00004cac <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    4cac:	ef 92       	push	r14
    4cae:	ff 92       	push	r15
    4cb0:	0f 93       	push	r16
    4cb2:	1f 93       	push	r17
    4cb4:	df 93       	push	r29
    4cb6:	cf 93       	push	r28
    4cb8:	cd b7       	in	r28, 0x3d	; 61
    4cba:	de b7       	in	r29, 0x3e	; 62
    4cbc:	2d 97       	sbiw	r28, 0x0d	; 13
    4cbe:	0f b6       	in	r0, 0x3f	; 63
    4cc0:	f8 94       	cli
    4cc2:	de bf       	out	0x3e, r29	; 62
    4cc4:	0f be       	out	0x3f, r0	; 63
    4cc6:	cd bf       	out	0x3d, r28	; 61
    4cc8:	6a 83       	std	Y+2, r22	; 0x02
    4cca:	7b 83       	std	Y+3, r23	; 0x03
    4ccc:	8c 83       	std	Y+4, r24	; 0x04
    4cce:	9d 83       	std	Y+5, r25	; 0x05
    4cd0:	2e 83       	std	Y+6, r18	; 0x06
    4cd2:	3f 83       	std	Y+7, r19	; 0x07
    4cd4:	48 87       	std	Y+8, r20	; 0x08
    4cd6:	59 87       	std	Y+9, r21	; 0x09
    4cd8:	1b 87       	std	Y+11, r17	; 0x0b
    4cda:	0a 87       	std	Y+10, r16	; 0x0a
    4cdc:	fd 86       	std	Y+13, r15	; 0x0d
    4cde:	ec 86       	std	Y+12, r14	; 0x0c
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    4ce0:	0f b6       	in	r0, 0x3f	; 63
    4ce2:	f8 94       	cli
    4ce4:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    4ce6:	e0 91 9f 03 	lds	r30, 0x039F
    4cea:	f0 91 a0 03 	lds	r31, 0x03A0
    4cee:	81 a5       	ldd	r24, Z+41	; 0x29
    4cf0:	82 30       	cpi	r24, 0x02	; 2
    4cf2:	49 f1       	breq	.+82     	; 0x4d46 <xTaskNotifyWait+0x9a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    4cf4:	e0 91 9f 03 	lds	r30, 0x039F
    4cf8:	f0 91 a0 03 	lds	r31, 0x03A0
    4cfc:	25 a1       	ldd	r18, Z+37	; 0x25
    4cfe:	36 a1       	ldd	r19, Z+38	; 0x26
    4d00:	47 a1       	ldd	r20, Z+39	; 0x27
    4d02:	50 a5       	ldd	r21, Z+40	; 0x28
    4d04:	8a 81       	ldd	r24, Y+2	; 0x02
    4d06:	9b 81       	ldd	r25, Y+3	; 0x03
    4d08:	ac 81       	ldd	r26, Y+4	; 0x04
    4d0a:	bd 81       	ldd	r27, Y+5	; 0x05
    4d0c:	80 95       	com	r24
    4d0e:	90 95       	com	r25
    4d10:	a0 95       	com	r26
    4d12:	b0 95       	com	r27
    4d14:	82 23       	and	r24, r18
    4d16:	93 23       	and	r25, r19
    4d18:	a4 23       	and	r26, r20
    4d1a:	b5 23       	and	r27, r21
    4d1c:	85 a3       	std	Z+37, r24	; 0x25
    4d1e:	96 a3       	std	Z+38, r25	; 0x26
    4d20:	a7 a3       	std	Z+39, r26	; 0x27
    4d22:	b0 a7       	std	Z+40, r27	; 0x28

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    4d24:	e0 91 9f 03 	lds	r30, 0x039F
    4d28:	f0 91 a0 03 	lds	r31, 0x03A0
    4d2c:	81 e0       	ldi	r24, 0x01	; 1
    4d2e:	81 a7       	std	Z+41, r24	; 0x29

				if( xTicksToWait > ( TickType_t ) 0 )
    4d30:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d32:	9d 85       	ldd	r25, Y+13	; 0x0d
    4d34:	00 97       	sbiw	r24, 0x00	; 0
    4d36:	39 f0       	breq	.+14     	; 0x4d46 <xTaskNotifyWait+0x9a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    4d38:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d3a:	9d 85       	ldd	r25, Y+13	; 0x0d
    4d3c:	61 e0       	ldi	r22, 0x01	; 1
    4d3e:	0e 94 89 29 	call	0x5312	; 0x5312 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    4d42:	0e 94 33 12 	call	0x2466	; 0x2466 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4d46:	0f 90       	pop	r0
    4d48:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    4d4a:	0f b6       	in	r0, 0x3f	; 63
    4d4c:	f8 94       	cli
    4d4e:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    4d50:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d52:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d54:	00 97       	sbiw	r24, 0x00	; 0
    4d56:	71 f0       	breq	.+28     	; 0x4d74 <xTaskNotifyWait+0xc8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    4d58:	e0 91 9f 03 	lds	r30, 0x039F
    4d5c:	f0 91 a0 03 	lds	r31, 0x03A0
    4d60:	85 a1       	ldd	r24, Z+37	; 0x25
    4d62:	96 a1       	ldd	r25, Z+38	; 0x26
    4d64:	a7 a1       	ldd	r26, Z+39	; 0x27
    4d66:	b0 a5       	ldd	r27, Z+40	; 0x28
    4d68:	ea 85       	ldd	r30, Y+10	; 0x0a
    4d6a:	fb 85       	ldd	r31, Y+11	; 0x0b
    4d6c:	80 83       	st	Z, r24
    4d6e:	91 83       	std	Z+1, r25	; 0x01
    4d70:	a2 83       	std	Z+2, r26	; 0x02
    4d72:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    4d74:	e0 91 9f 03 	lds	r30, 0x039F
    4d78:	f0 91 a0 03 	lds	r31, 0x03A0
    4d7c:	81 a5       	ldd	r24, Z+41	; 0x29
    4d7e:	81 30       	cpi	r24, 0x01	; 1
    4d80:	11 f4       	brne	.+4      	; 0x4d86 <xTaskNotifyWait+0xda>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    4d82:	19 82       	std	Y+1, r1	; 0x01
    4d84:	1a c0       	rjmp	.+52     	; 0x4dba <xTaskNotifyWait+0x10e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    4d86:	e0 91 9f 03 	lds	r30, 0x039F
    4d8a:	f0 91 a0 03 	lds	r31, 0x03A0
    4d8e:	25 a1       	ldd	r18, Z+37	; 0x25
    4d90:	36 a1       	ldd	r19, Z+38	; 0x26
    4d92:	47 a1       	ldd	r20, Z+39	; 0x27
    4d94:	50 a5       	ldd	r21, Z+40	; 0x28
    4d96:	8e 81       	ldd	r24, Y+6	; 0x06
    4d98:	9f 81       	ldd	r25, Y+7	; 0x07
    4d9a:	a8 85       	ldd	r26, Y+8	; 0x08
    4d9c:	b9 85       	ldd	r27, Y+9	; 0x09
    4d9e:	80 95       	com	r24
    4da0:	90 95       	com	r25
    4da2:	a0 95       	com	r26
    4da4:	b0 95       	com	r27
    4da6:	82 23       	and	r24, r18
    4da8:	93 23       	and	r25, r19
    4daa:	a4 23       	and	r26, r20
    4dac:	b5 23       	and	r27, r21
    4dae:	85 a3       	std	Z+37, r24	; 0x25
    4db0:	96 a3       	std	Z+38, r25	; 0x26
    4db2:	a7 a3       	std	Z+39, r26	; 0x27
    4db4:	b0 a7       	std	Z+40, r27	; 0x28
				xReturn = pdTRUE;
    4db6:	81 e0       	ldi	r24, 0x01	; 1
    4db8:	89 83       	std	Y+1, r24	; 0x01
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4dba:	e0 91 9f 03 	lds	r30, 0x039F
    4dbe:	f0 91 a0 03 	lds	r31, 0x03A0
    4dc2:	11 a6       	std	Z+41, r1	; 0x29
		}
		taskEXIT_CRITICAL();
    4dc4:	0f 90       	pop	r0
    4dc6:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    4dc8:	89 81       	ldd	r24, Y+1	; 0x01
	}
    4dca:	2d 96       	adiw	r28, 0x0d	; 13
    4dcc:	0f b6       	in	r0, 0x3f	; 63
    4dce:	f8 94       	cli
    4dd0:	de bf       	out	0x3e, r29	; 62
    4dd2:	0f be       	out	0x3f, r0	; 63
    4dd4:	cd bf       	out	0x3d, r28	; 61
    4dd6:	cf 91       	pop	r28
    4dd8:	df 91       	pop	r29
    4dda:	1f 91       	pop	r17
    4ddc:	0f 91       	pop	r16
    4dde:	ff 90       	pop	r15
    4de0:	ef 90       	pop	r14
    4de2:	08 95       	ret

00004de4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    4de4:	0f 93       	push	r16
    4de6:	1f 93       	push	r17
    4de8:	df 93       	push	r29
    4dea:	cf 93       	push	r28
    4dec:	cd b7       	in	r28, 0x3d	; 61
    4dee:	de b7       	in	r29, 0x3e	; 62
    4df0:	2f 97       	sbiw	r28, 0x0f	; 15
    4df2:	0f b6       	in	r0, 0x3f	; 63
    4df4:	f8 94       	cli
    4df6:	de bf       	out	0x3e, r29	; 62
    4df8:	0f be       	out	0x3f, r0	; 63
    4dfa:	cd bf       	out	0x3d, r28	; 61
    4dfc:	9e 83       	std	Y+6, r25	; 0x06
    4dfe:	8d 83       	std	Y+5, r24	; 0x05
    4e00:	4f 83       	std	Y+7, r20	; 0x07
    4e02:	58 87       	std	Y+8, r21	; 0x08
    4e04:	69 87       	std	Y+9, r22	; 0x09
    4e06:	7a 87       	std	Y+10, r23	; 0x0a
    4e08:	2b 87       	std	Y+11, r18	; 0x0b
    4e0a:	1d 87       	std	Y+13, r17	; 0x0d
    4e0c:	0c 87       	std	Y+12, r16	; 0x0c
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    4e0e:	81 e0       	ldi	r24, 0x01	; 1
    4e10:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
    4e12:	8d 81       	ldd	r24, Y+5	; 0x05
    4e14:	9e 81       	ldd	r25, Y+6	; 0x06
    4e16:	9c 83       	std	Y+4, r25	; 0x04
    4e18:	8b 83       	std	Y+3, r24	; 0x03

		taskENTER_CRITICAL();
    4e1a:	0f b6       	in	r0, 0x3f	; 63
    4e1c:	f8 94       	cli
    4e1e:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    4e20:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e22:	9d 85       	ldd	r25, Y+13	; 0x0d
    4e24:	00 97       	sbiw	r24, 0x00	; 0
    4e26:	61 f0       	breq	.+24     	; 0x4e40 <xTaskGenericNotify+0x5c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    4e28:	eb 81       	ldd	r30, Y+3	; 0x03
    4e2a:	fc 81       	ldd	r31, Y+4	; 0x04
    4e2c:	85 a1       	ldd	r24, Z+37	; 0x25
    4e2e:	96 a1       	ldd	r25, Z+38	; 0x26
    4e30:	a7 a1       	ldd	r26, Z+39	; 0x27
    4e32:	b0 a5       	ldd	r27, Z+40	; 0x28
    4e34:	ec 85       	ldd	r30, Y+12	; 0x0c
    4e36:	fd 85       	ldd	r31, Y+13	; 0x0d
    4e38:	80 83       	st	Z, r24
    4e3a:	91 83       	std	Z+1, r25	; 0x01
    4e3c:	a2 83       	std	Z+2, r26	; 0x02
    4e3e:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    4e40:	eb 81       	ldd	r30, Y+3	; 0x03
    4e42:	fc 81       	ldd	r31, Y+4	; 0x04
    4e44:	81 a5       	ldd	r24, Z+41	; 0x29
    4e46:	89 83       	std	Y+1, r24	; 0x01

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    4e48:	eb 81       	ldd	r30, Y+3	; 0x03
    4e4a:	fc 81       	ldd	r31, Y+4	; 0x04
    4e4c:	82 e0       	ldi	r24, 0x02	; 2
    4e4e:	81 a7       	std	Z+41, r24	; 0x29

			switch( eAction )
    4e50:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e52:	28 2f       	mov	r18, r24
    4e54:	30 e0       	ldi	r19, 0x00	; 0
    4e56:	3f 87       	std	Y+15, r19	; 0x0f
    4e58:	2e 87       	std	Y+14, r18	; 0x0e
    4e5a:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e5c:	9f 85       	ldd	r25, Y+15	; 0x0f
    4e5e:	82 30       	cpi	r24, 0x02	; 2
    4e60:	91 05       	cpc	r25, r1
    4e62:	59 f1       	breq	.+86     	; 0x4eba <xTaskGenericNotify+0xd6>
    4e64:	2e 85       	ldd	r18, Y+14	; 0x0e
    4e66:	3f 85       	ldd	r19, Y+15	; 0x0f
    4e68:	23 30       	cpi	r18, 0x03	; 3
    4e6a:	31 05       	cpc	r19, r1
    4e6c:	34 f4       	brge	.+12     	; 0x4e7a <xTaskGenericNotify+0x96>
    4e6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e70:	9f 85       	ldd	r25, Y+15	; 0x0f
    4e72:	81 30       	cpi	r24, 0x01	; 1
    4e74:	91 05       	cpc	r25, r1
    4e76:	61 f0       	breq	.+24     	; 0x4e90 <xTaskGenericNotify+0xac>
    4e78:	4a c0       	rjmp	.+148    	; 0x4f0e <xTaskGenericNotify+0x12a>
    4e7a:	2e 85       	ldd	r18, Y+14	; 0x0e
    4e7c:	3f 85       	ldd	r19, Y+15	; 0x0f
    4e7e:	23 30       	cpi	r18, 0x03	; 3
    4e80:	31 05       	cpc	r19, r1
    4e82:	59 f1       	breq	.+86     	; 0x4eda <xTaskGenericNotify+0xf6>
    4e84:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e86:	9f 85       	ldd	r25, Y+15	; 0x0f
    4e88:	84 30       	cpi	r24, 0x04	; 4
    4e8a:	91 05       	cpc	r25, r1
    4e8c:	89 f1       	breq	.+98     	; 0x4ef0 <xTaskGenericNotify+0x10c>
    4e8e:	3f c0       	rjmp	.+126    	; 0x4f0e <xTaskGenericNotify+0x12a>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    4e90:	eb 81       	ldd	r30, Y+3	; 0x03
    4e92:	fc 81       	ldd	r31, Y+4	; 0x04
    4e94:	25 a1       	ldd	r18, Z+37	; 0x25
    4e96:	36 a1       	ldd	r19, Z+38	; 0x26
    4e98:	47 a1       	ldd	r20, Z+39	; 0x27
    4e9a:	50 a5       	ldd	r21, Z+40	; 0x28
    4e9c:	8f 81       	ldd	r24, Y+7	; 0x07
    4e9e:	98 85       	ldd	r25, Y+8	; 0x08
    4ea0:	a9 85       	ldd	r26, Y+9	; 0x09
    4ea2:	ba 85       	ldd	r27, Y+10	; 0x0a
    4ea4:	82 2b       	or	r24, r18
    4ea6:	93 2b       	or	r25, r19
    4ea8:	a4 2b       	or	r26, r20
    4eaa:	b5 2b       	or	r27, r21
    4eac:	eb 81       	ldd	r30, Y+3	; 0x03
    4eae:	fc 81       	ldd	r31, Y+4	; 0x04
    4eb0:	85 a3       	std	Z+37, r24	; 0x25
    4eb2:	96 a3       	std	Z+38, r25	; 0x26
    4eb4:	a7 a3       	std	Z+39, r26	; 0x27
    4eb6:	b0 a7       	std	Z+40, r27	; 0x28
    4eb8:	2a c0       	rjmp	.+84     	; 0x4f0e <xTaskGenericNotify+0x12a>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    4eba:	eb 81       	ldd	r30, Y+3	; 0x03
    4ebc:	fc 81       	ldd	r31, Y+4	; 0x04
    4ebe:	85 a1       	ldd	r24, Z+37	; 0x25
    4ec0:	96 a1       	ldd	r25, Z+38	; 0x26
    4ec2:	a7 a1       	ldd	r26, Z+39	; 0x27
    4ec4:	b0 a5       	ldd	r27, Z+40	; 0x28
    4ec6:	01 96       	adiw	r24, 0x01	; 1
    4ec8:	a1 1d       	adc	r26, r1
    4eca:	b1 1d       	adc	r27, r1
    4ecc:	eb 81       	ldd	r30, Y+3	; 0x03
    4ece:	fc 81       	ldd	r31, Y+4	; 0x04
    4ed0:	85 a3       	std	Z+37, r24	; 0x25
    4ed2:	96 a3       	std	Z+38, r25	; 0x26
    4ed4:	a7 a3       	std	Z+39, r26	; 0x27
    4ed6:	b0 a7       	std	Z+40, r27	; 0x28
    4ed8:	1a c0       	rjmp	.+52     	; 0x4f0e <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    4eda:	eb 81       	ldd	r30, Y+3	; 0x03
    4edc:	fc 81       	ldd	r31, Y+4	; 0x04
    4ede:	8f 81       	ldd	r24, Y+7	; 0x07
    4ee0:	98 85       	ldd	r25, Y+8	; 0x08
    4ee2:	a9 85       	ldd	r26, Y+9	; 0x09
    4ee4:	ba 85       	ldd	r27, Y+10	; 0x0a
    4ee6:	85 a3       	std	Z+37, r24	; 0x25
    4ee8:	96 a3       	std	Z+38, r25	; 0x26
    4eea:	a7 a3       	std	Z+39, r26	; 0x27
    4eec:	b0 a7       	std	Z+40, r27	; 0x28
    4eee:	0f c0       	rjmp	.+30     	; 0x4f0e <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    4ef0:	89 81       	ldd	r24, Y+1	; 0x01
    4ef2:	82 30       	cpi	r24, 0x02	; 2
    4ef4:	59 f0       	breq	.+22     	; 0x4f0c <xTaskGenericNotify+0x128>
					{
						pxTCB->ulNotifiedValue = ulValue;
    4ef6:	eb 81       	ldd	r30, Y+3	; 0x03
    4ef8:	fc 81       	ldd	r31, Y+4	; 0x04
    4efa:	8f 81       	ldd	r24, Y+7	; 0x07
    4efc:	98 85       	ldd	r25, Y+8	; 0x08
    4efe:	a9 85       	ldd	r26, Y+9	; 0x09
    4f00:	ba 85       	ldd	r27, Y+10	; 0x0a
    4f02:	85 a3       	std	Z+37, r24	; 0x25
    4f04:	96 a3       	std	Z+38, r25	; 0x26
    4f06:	a7 a3       	std	Z+39, r26	; 0x27
    4f08:	b0 a7       	std	Z+40, r27	; 0x28
    4f0a:	01 c0       	rjmp	.+2      	; 0x4f0e <xTaskGenericNotify+0x12a>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    4f0c:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    4f0e:	89 81       	ldd	r24, Y+1	; 0x01
    4f10:	81 30       	cpi	r24, 0x01	; 1
    4f12:	b9 f5       	brne	.+110    	; 0x4f82 <xTaskGenericNotify+0x19e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4f14:	8b 81       	ldd	r24, Y+3	; 0x03
    4f16:	9c 81       	ldd	r25, Y+4	; 0x04
    4f18:	02 96       	adiw	r24, 0x02	; 2
    4f1a:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    4f1e:	eb 81       	ldd	r30, Y+3	; 0x03
    4f20:	fc 81       	ldd	r31, Y+4	; 0x04
    4f22:	96 89       	ldd	r25, Z+22	; 0x16
    4f24:	80 91 a5 03 	lds	r24, 0x03A5
    4f28:	89 17       	cp	r24, r25
    4f2a:	28 f4       	brcc	.+10     	; 0x4f36 <xTaskGenericNotify+0x152>
    4f2c:	eb 81       	ldd	r30, Y+3	; 0x03
    4f2e:	fc 81       	ldd	r31, Y+4	; 0x04
    4f30:	86 89       	ldd	r24, Z+22	; 0x16
    4f32:	80 93 a5 03 	sts	0x03A5, r24
    4f36:	eb 81       	ldd	r30, Y+3	; 0x03
    4f38:	fc 81       	ldd	r31, Y+4	; 0x04
    4f3a:	86 89       	ldd	r24, Z+22	; 0x16
    4f3c:	28 2f       	mov	r18, r24
    4f3e:	30 e0       	ldi	r19, 0x00	; 0
    4f40:	c9 01       	movw	r24, r18
    4f42:	88 0f       	add	r24, r24
    4f44:	99 1f       	adc	r25, r25
    4f46:	88 0f       	add	r24, r24
    4f48:	99 1f       	adc	r25, r25
    4f4a:	88 0f       	add	r24, r24
    4f4c:	99 1f       	adc	r25, r25
    4f4e:	82 0f       	add	r24, r18
    4f50:	93 1f       	adc	r25, r19
    4f52:	ac 01       	movw	r20, r24
    4f54:	40 55       	subi	r20, 0x50	; 80
    4f56:	5c 4f       	sbci	r21, 0xFC	; 252
    4f58:	8b 81       	ldd	r24, Y+3	; 0x03
    4f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f5c:	9c 01       	movw	r18, r24
    4f5e:	2e 5f       	subi	r18, 0xFE	; 254
    4f60:	3f 4f       	sbci	r19, 0xFF	; 255
    4f62:	ca 01       	movw	r24, r20
    4f64:	b9 01       	movw	r22, r18
    4f66:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4f6a:	eb 81       	ldd	r30, Y+3	; 0x03
    4f6c:	fc 81       	ldd	r31, Y+4	; 0x04
    4f6e:	96 89       	ldd	r25, Z+22	; 0x16
    4f70:	e0 91 9f 03 	lds	r30, 0x039F
    4f74:	f0 91 a0 03 	lds	r31, 0x03A0
    4f78:	86 89       	ldd	r24, Z+22	; 0x16
    4f7a:	89 17       	cp	r24, r25
    4f7c:	10 f4       	brcc	.+4      	; 0x4f82 <xTaskGenericNotify+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    4f7e:	0e 94 33 12 	call	0x2466	; 0x2466 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4f82:	0f 90       	pop	r0
    4f84:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    4f86:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    4f88:	2f 96       	adiw	r28, 0x0f	; 15
    4f8a:	0f b6       	in	r0, 0x3f	; 63
    4f8c:	f8 94       	cli
    4f8e:	de bf       	out	0x3e, r29	; 62
    4f90:	0f be       	out	0x3f, r0	; 63
    4f92:	cd bf       	out	0x3d, r28	; 61
    4f94:	cf 91       	pop	r28
    4f96:	df 91       	pop	r29
    4f98:	1f 91       	pop	r17
    4f9a:	0f 91       	pop	r16
    4f9c:	08 95       	ret

00004f9e <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    4f9e:	ef 92       	push	r14
    4fa0:	ff 92       	push	r15
    4fa2:	0f 93       	push	r16
    4fa4:	1f 93       	push	r17
    4fa6:	df 93       	push	r29
    4fa8:	cf 93       	push	r28
    4faa:	cd b7       	in	r28, 0x3d	; 61
    4fac:	de b7       	in	r29, 0x3e	; 62
    4fae:	62 97       	sbiw	r28, 0x12	; 18
    4fb0:	0f b6       	in	r0, 0x3f	; 63
    4fb2:	f8 94       	cli
    4fb4:	de bf       	out	0x3e, r29	; 62
    4fb6:	0f be       	out	0x3f, r0	; 63
    4fb8:	cd bf       	out	0x3d, r28	; 61
    4fba:	9f 83       	std	Y+7, r25	; 0x07
    4fbc:	8e 83       	std	Y+6, r24	; 0x06
    4fbe:	48 87       	std	Y+8, r20	; 0x08
    4fc0:	59 87       	std	Y+9, r21	; 0x09
    4fc2:	6a 87       	std	Y+10, r22	; 0x0a
    4fc4:	7b 87       	std	Y+11, r23	; 0x0b
    4fc6:	2c 87       	std	Y+12, r18	; 0x0c
    4fc8:	1e 87       	std	Y+14, r17	; 0x0e
    4fca:	0d 87       	std	Y+13, r16	; 0x0d
    4fcc:	f8 8a       	std	Y+16, r15	; 0x10
    4fce:	ef 86       	std	Y+15, r14	; 0x0f
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    4fd0:	81 e0       	ldi	r24, 0x01	; 1
    4fd2:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    4fd4:	8e 81       	ldd	r24, Y+6	; 0x06
    4fd6:	9f 81       	ldd	r25, Y+7	; 0x07
    4fd8:	9d 83       	std	Y+5, r25	; 0x05
    4fda:	8c 83       	std	Y+4, r24	; 0x04

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4fdc:	19 82       	std	Y+1, r1	; 0x01
		{
			if( pulPreviousNotificationValue != NULL )
    4fde:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fe0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fe2:	00 97       	sbiw	r24, 0x00	; 0
    4fe4:	61 f0       	breq	.+24     	; 0x4ffe <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    4fe6:	ec 81       	ldd	r30, Y+4	; 0x04
    4fe8:	fd 81       	ldd	r31, Y+5	; 0x05
    4fea:	85 a1       	ldd	r24, Z+37	; 0x25
    4fec:	96 a1       	ldd	r25, Z+38	; 0x26
    4fee:	a7 a1       	ldd	r26, Z+39	; 0x27
    4ff0:	b0 a5       	ldd	r27, Z+40	; 0x28
    4ff2:	ed 85       	ldd	r30, Y+13	; 0x0d
    4ff4:	fe 85       	ldd	r31, Y+14	; 0x0e
    4ff6:	80 83       	st	Z, r24
    4ff8:	91 83       	std	Z+1, r25	; 0x01
    4ffa:	a2 83       	std	Z+2, r26	; 0x02
    4ffc:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    4ffe:	ec 81       	ldd	r30, Y+4	; 0x04
    5000:	fd 81       	ldd	r31, Y+5	; 0x05
    5002:	81 a5       	ldd	r24, Z+41	; 0x29
    5004:	8b 83       	std	Y+3, r24	; 0x03
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    5006:	ec 81       	ldd	r30, Y+4	; 0x04
    5008:	fd 81       	ldd	r31, Y+5	; 0x05
    500a:	82 e0       	ldi	r24, 0x02	; 2
    500c:	81 a7       	std	Z+41, r24	; 0x29

			switch( eAction )
    500e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5010:	28 2f       	mov	r18, r24
    5012:	30 e0       	ldi	r19, 0x00	; 0
    5014:	3a 8b       	std	Y+18, r19	; 0x12
    5016:	29 8b       	std	Y+17, r18	; 0x11
    5018:	89 89       	ldd	r24, Y+17	; 0x11
    501a:	9a 89       	ldd	r25, Y+18	; 0x12
    501c:	82 30       	cpi	r24, 0x02	; 2
    501e:	91 05       	cpc	r25, r1
    5020:	59 f1       	breq	.+86     	; 0x5078 <xTaskGenericNotifyFromISR+0xda>
    5022:	29 89       	ldd	r18, Y+17	; 0x11
    5024:	3a 89       	ldd	r19, Y+18	; 0x12
    5026:	23 30       	cpi	r18, 0x03	; 3
    5028:	31 05       	cpc	r19, r1
    502a:	34 f4       	brge	.+12     	; 0x5038 <xTaskGenericNotifyFromISR+0x9a>
    502c:	89 89       	ldd	r24, Y+17	; 0x11
    502e:	9a 89       	ldd	r25, Y+18	; 0x12
    5030:	81 30       	cpi	r24, 0x01	; 1
    5032:	91 05       	cpc	r25, r1
    5034:	61 f0       	breq	.+24     	; 0x504e <xTaskGenericNotifyFromISR+0xb0>
    5036:	4a c0       	rjmp	.+148    	; 0x50cc <xTaskGenericNotifyFromISR+0x12e>
    5038:	29 89       	ldd	r18, Y+17	; 0x11
    503a:	3a 89       	ldd	r19, Y+18	; 0x12
    503c:	23 30       	cpi	r18, 0x03	; 3
    503e:	31 05       	cpc	r19, r1
    5040:	59 f1       	breq	.+86     	; 0x5098 <xTaskGenericNotifyFromISR+0xfa>
    5042:	89 89       	ldd	r24, Y+17	; 0x11
    5044:	9a 89       	ldd	r25, Y+18	; 0x12
    5046:	84 30       	cpi	r24, 0x04	; 4
    5048:	91 05       	cpc	r25, r1
    504a:	89 f1       	breq	.+98     	; 0x50ae <xTaskGenericNotifyFromISR+0x110>
    504c:	3f c0       	rjmp	.+126    	; 0x50cc <xTaskGenericNotifyFromISR+0x12e>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    504e:	ec 81       	ldd	r30, Y+4	; 0x04
    5050:	fd 81       	ldd	r31, Y+5	; 0x05
    5052:	25 a1       	ldd	r18, Z+37	; 0x25
    5054:	36 a1       	ldd	r19, Z+38	; 0x26
    5056:	47 a1       	ldd	r20, Z+39	; 0x27
    5058:	50 a5       	ldd	r21, Z+40	; 0x28
    505a:	88 85       	ldd	r24, Y+8	; 0x08
    505c:	99 85       	ldd	r25, Y+9	; 0x09
    505e:	aa 85       	ldd	r26, Y+10	; 0x0a
    5060:	bb 85       	ldd	r27, Y+11	; 0x0b
    5062:	82 2b       	or	r24, r18
    5064:	93 2b       	or	r25, r19
    5066:	a4 2b       	or	r26, r20
    5068:	b5 2b       	or	r27, r21
    506a:	ec 81       	ldd	r30, Y+4	; 0x04
    506c:	fd 81       	ldd	r31, Y+5	; 0x05
    506e:	85 a3       	std	Z+37, r24	; 0x25
    5070:	96 a3       	std	Z+38, r25	; 0x26
    5072:	a7 a3       	std	Z+39, r26	; 0x27
    5074:	b0 a7       	std	Z+40, r27	; 0x28
    5076:	2a c0       	rjmp	.+84     	; 0x50cc <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    5078:	ec 81       	ldd	r30, Y+4	; 0x04
    507a:	fd 81       	ldd	r31, Y+5	; 0x05
    507c:	85 a1       	ldd	r24, Z+37	; 0x25
    507e:	96 a1       	ldd	r25, Z+38	; 0x26
    5080:	a7 a1       	ldd	r26, Z+39	; 0x27
    5082:	b0 a5       	ldd	r27, Z+40	; 0x28
    5084:	01 96       	adiw	r24, 0x01	; 1
    5086:	a1 1d       	adc	r26, r1
    5088:	b1 1d       	adc	r27, r1
    508a:	ec 81       	ldd	r30, Y+4	; 0x04
    508c:	fd 81       	ldd	r31, Y+5	; 0x05
    508e:	85 a3       	std	Z+37, r24	; 0x25
    5090:	96 a3       	std	Z+38, r25	; 0x26
    5092:	a7 a3       	std	Z+39, r26	; 0x27
    5094:	b0 a7       	std	Z+40, r27	; 0x28
    5096:	1a c0       	rjmp	.+52     	; 0x50cc <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    5098:	ec 81       	ldd	r30, Y+4	; 0x04
    509a:	fd 81       	ldd	r31, Y+5	; 0x05
    509c:	88 85       	ldd	r24, Y+8	; 0x08
    509e:	99 85       	ldd	r25, Y+9	; 0x09
    50a0:	aa 85       	ldd	r26, Y+10	; 0x0a
    50a2:	bb 85       	ldd	r27, Y+11	; 0x0b
    50a4:	85 a3       	std	Z+37, r24	; 0x25
    50a6:	96 a3       	std	Z+38, r25	; 0x26
    50a8:	a7 a3       	std	Z+39, r26	; 0x27
    50aa:	b0 a7       	std	Z+40, r27	; 0x28
    50ac:	0f c0       	rjmp	.+30     	; 0x50cc <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    50ae:	8b 81       	ldd	r24, Y+3	; 0x03
    50b0:	82 30       	cpi	r24, 0x02	; 2
    50b2:	59 f0       	breq	.+22     	; 0x50ca <xTaskGenericNotifyFromISR+0x12c>
					{
						pxTCB->ulNotifiedValue = ulValue;
    50b4:	ec 81       	ldd	r30, Y+4	; 0x04
    50b6:	fd 81       	ldd	r31, Y+5	; 0x05
    50b8:	88 85       	ldd	r24, Y+8	; 0x08
    50ba:	99 85       	ldd	r25, Y+9	; 0x09
    50bc:	aa 85       	ldd	r26, Y+10	; 0x0a
    50be:	bb 85       	ldd	r27, Y+11	; 0x0b
    50c0:	85 a3       	std	Z+37, r24	; 0x25
    50c2:	96 a3       	std	Z+38, r25	; 0x26
    50c4:	a7 a3       	std	Z+39, r26	; 0x27
    50c6:	b0 a7       	std	Z+40, r27	; 0x28
    50c8:	01 c0       	rjmp	.+2      	; 0x50cc <xTaskGenericNotifyFromISR+0x12e>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    50ca:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    50cc:	8b 81       	ldd	r24, Y+3	; 0x03
    50ce:	81 30       	cpi	r24, 0x01	; 1
    50d0:	09 f0       	breq	.+2      	; 0x50d4 <xTaskGenericNotifyFromISR+0x136>
    50d2:	50 c0       	rjmp	.+160    	; 0x5174 <xTaskGenericNotifyFromISR+0x1d6>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    50d4:	80 91 af 03 	lds	r24, 0x03AF
    50d8:	88 23       	and	r24, r24
    50da:	61 f5       	brne	.+88     	; 0x5134 <xTaskGenericNotifyFromISR+0x196>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    50dc:	8c 81       	ldd	r24, Y+4	; 0x04
    50de:	9d 81       	ldd	r25, Y+5	; 0x05
    50e0:	02 96       	adiw	r24, 0x02	; 2
    50e2:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    50e6:	ec 81       	ldd	r30, Y+4	; 0x04
    50e8:	fd 81       	ldd	r31, Y+5	; 0x05
    50ea:	96 89       	ldd	r25, Z+22	; 0x16
    50ec:	80 91 a5 03 	lds	r24, 0x03A5
    50f0:	89 17       	cp	r24, r25
    50f2:	28 f4       	brcc	.+10     	; 0x50fe <xTaskGenericNotifyFromISR+0x160>
    50f4:	ec 81       	ldd	r30, Y+4	; 0x04
    50f6:	fd 81       	ldd	r31, Y+5	; 0x05
    50f8:	86 89       	ldd	r24, Z+22	; 0x16
    50fa:	80 93 a5 03 	sts	0x03A5, r24
    50fe:	ec 81       	ldd	r30, Y+4	; 0x04
    5100:	fd 81       	ldd	r31, Y+5	; 0x05
    5102:	86 89       	ldd	r24, Z+22	; 0x16
    5104:	28 2f       	mov	r18, r24
    5106:	30 e0       	ldi	r19, 0x00	; 0
    5108:	c9 01       	movw	r24, r18
    510a:	88 0f       	add	r24, r24
    510c:	99 1f       	adc	r25, r25
    510e:	88 0f       	add	r24, r24
    5110:	99 1f       	adc	r25, r25
    5112:	88 0f       	add	r24, r24
    5114:	99 1f       	adc	r25, r25
    5116:	82 0f       	add	r24, r18
    5118:	93 1f       	adc	r25, r19
    511a:	ac 01       	movw	r20, r24
    511c:	40 55       	subi	r20, 0x50	; 80
    511e:	5c 4f       	sbci	r21, 0xFC	; 252
    5120:	8c 81       	ldd	r24, Y+4	; 0x04
    5122:	9d 81       	ldd	r25, Y+5	; 0x05
    5124:	9c 01       	movw	r18, r24
    5126:	2e 5f       	subi	r18, 0xFE	; 254
    5128:	3f 4f       	sbci	r19, 0xFF	; 255
    512a:	ca 01       	movw	r24, r20
    512c:	b9 01       	movw	r22, r18
    512e:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <vListInsertEnd>
    5132:	0a c0       	rjmp	.+20     	; 0x5148 <xTaskGenericNotifyFromISR+0x1aa>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    5134:	8c 81       	ldd	r24, Y+4	; 0x04
    5136:	9d 81       	ldd	r25, Y+5	; 0x05
    5138:	9c 01       	movw	r18, r24
    513a:	24 5f       	subi	r18, 0xF4	; 244
    513c:	3f 4f       	sbci	r19, 0xFF	; 255
    513e:	83 ef       	ldi	r24, 0xF3	; 243
    5140:	93 e0       	ldi	r25, 0x03	; 3
    5142:	b9 01       	movw	r22, r18
    5144:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    5148:	ec 81       	ldd	r30, Y+4	; 0x04
    514a:	fd 81       	ldd	r31, Y+5	; 0x05
    514c:	96 89       	ldd	r25, Z+22	; 0x16
    514e:	e0 91 9f 03 	lds	r30, 0x039F
    5152:	f0 91 a0 03 	lds	r31, 0x03A0
    5156:	86 89       	ldd	r24, Z+22	; 0x16
    5158:	89 17       	cp	r24, r25
    515a:	60 f4       	brcc	.+24     	; 0x5174 <xTaskGenericNotifyFromISR+0x1d6>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    515c:	8f 85       	ldd	r24, Y+15	; 0x0f
    515e:	98 89       	ldd	r25, Y+16	; 0x10
    5160:	00 97       	sbiw	r24, 0x00	; 0
    5162:	29 f0       	breq	.+10     	; 0x516e <xTaskGenericNotifyFromISR+0x1d0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    5164:	ef 85       	ldd	r30, Y+15	; 0x0f
    5166:	f8 89       	ldd	r31, Y+16	; 0x10
    5168:	81 e0       	ldi	r24, 0x01	; 1
    516a:	80 83       	st	Z, r24
    516c:	03 c0       	rjmp	.+6      	; 0x5174 <xTaskGenericNotifyFromISR+0x1d6>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    516e:	81 e0       	ldi	r24, 0x01	; 1
    5170:	80 93 a8 03 	sts	0x03A8, r24
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    5174:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    5176:	62 96       	adiw	r28, 0x12	; 18
    5178:	0f b6       	in	r0, 0x3f	; 63
    517a:	f8 94       	cli
    517c:	de bf       	out	0x3e, r29	; 62
    517e:	0f be       	out	0x3f, r0	; 63
    5180:	cd bf       	out	0x3d, r28	; 61
    5182:	cf 91       	pop	r28
    5184:	df 91       	pop	r29
    5186:	1f 91       	pop	r17
    5188:	0f 91       	pop	r16
    518a:	ff 90       	pop	r15
    518c:	ef 90       	pop	r14
    518e:	08 95       	ret

00005190 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    5190:	df 93       	push	r29
    5192:	cf 93       	push	r28
    5194:	cd b7       	in	r28, 0x3d	; 61
    5196:	de b7       	in	r29, 0x3e	; 62
    5198:	28 97       	sbiw	r28, 0x08	; 8
    519a:	0f b6       	in	r0, 0x3f	; 63
    519c:	f8 94       	cli
    519e:	de bf       	out	0x3e, r29	; 62
    51a0:	0f be       	out	0x3f, r0	; 63
    51a2:	cd bf       	out	0x3d, r28	; 61
    51a4:	9e 83       	std	Y+6, r25	; 0x06
    51a6:	8d 83       	std	Y+5, r24	; 0x05
    51a8:	78 87       	std	Y+8, r23	; 0x08
    51aa:	6f 83       	std	Y+7, r22	; 0x07
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    51ac:	8d 81       	ldd	r24, Y+5	; 0x05
    51ae:	9e 81       	ldd	r25, Y+6	; 0x06
    51b0:	9c 83       	std	Y+4, r25	; 0x04
    51b2:	8b 83       	std	Y+3, r24	; 0x03

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    51b4:	19 82       	std	Y+1, r1	; 0x01
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    51b6:	eb 81       	ldd	r30, Y+3	; 0x03
    51b8:	fc 81       	ldd	r31, Y+4	; 0x04
    51ba:	81 a5       	ldd	r24, Z+41	; 0x29
    51bc:	8a 83       	std	Y+2, r24	; 0x02
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    51be:	eb 81       	ldd	r30, Y+3	; 0x03
    51c0:	fc 81       	ldd	r31, Y+4	; 0x04
    51c2:	82 e0       	ldi	r24, 0x02	; 2
    51c4:	81 a7       	std	Z+41, r24	; 0x29

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    51c6:	eb 81       	ldd	r30, Y+3	; 0x03
    51c8:	fc 81       	ldd	r31, Y+4	; 0x04
    51ca:	85 a1       	ldd	r24, Z+37	; 0x25
    51cc:	96 a1       	ldd	r25, Z+38	; 0x26
    51ce:	a7 a1       	ldd	r26, Z+39	; 0x27
    51d0:	b0 a5       	ldd	r27, Z+40	; 0x28
    51d2:	01 96       	adiw	r24, 0x01	; 1
    51d4:	a1 1d       	adc	r26, r1
    51d6:	b1 1d       	adc	r27, r1
    51d8:	eb 81       	ldd	r30, Y+3	; 0x03
    51da:	fc 81       	ldd	r31, Y+4	; 0x04
    51dc:	85 a3       	std	Z+37, r24	; 0x25
    51de:	96 a3       	std	Z+38, r25	; 0x26
    51e0:	a7 a3       	std	Z+39, r26	; 0x27
    51e2:	b0 a7       	std	Z+40, r27	; 0x28

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    51e4:	8a 81       	ldd	r24, Y+2	; 0x02
    51e6:	81 30       	cpi	r24, 0x01	; 1
    51e8:	09 f0       	breq	.+2      	; 0x51ec <vTaskNotifyGiveFromISR+0x5c>
    51ea:	50 c0       	rjmp	.+160    	; 0x528c <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    51ec:	80 91 af 03 	lds	r24, 0x03AF
    51f0:	88 23       	and	r24, r24
    51f2:	61 f5       	brne	.+88     	; 0x524c <vTaskNotifyGiveFromISR+0xbc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    51f4:	8b 81       	ldd	r24, Y+3	; 0x03
    51f6:	9c 81       	ldd	r25, Y+4	; 0x04
    51f8:	02 96       	adiw	r24, 0x02	; 2
    51fa:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    51fe:	eb 81       	ldd	r30, Y+3	; 0x03
    5200:	fc 81       	ldd	r31, Y+4	; 0x04
    5202:	96 89       	ldd	r25, Z+22	; 0x16
    5204:	80 91 a5 03 	lds	r24, 0x03A5
    5208:	89 17       	cp	r24, r25
    520a:	28 f4       	brcc	.+10     	; 0x5216 <vTaskNotifyGiveFromISR+0x86>
    520c:	eb 81       	ldd	r30, Y+3	; 0x03
    520e:	fc 81       	ldd	r31, Y+4	; 0x04
    5210:	86 89       	ldd	r24, Z+22	; 0x16
    5212:	80 93 a5 03 	sts	0x03A5, r24
    5216:	eb 81       	ldd	r30, Y+3	; 0x03
    5218:	fc 81       	ldd	r31, Y+4	; 0x04
    521a:	86 89       	ldd	r24, Z+22	; 0x16
    521c:	28 2f       	mov	r18, r24
    521e:	30 e0       	ldi	r19, 0x00	; 0
    5220:	c9 01       	movw	r24, r18
    5222:	88 0f       	add	r24, r24
    5224:	99 1f       	adc	r25, r25
    5226:	88 0f       	add	r24, r24
    5228:	99 1f       	adc	r25, r25
    522a:	88 0f       	add	r24, r24
    522c:	99 1f       	adc	r25, r25
    522e:	82 0f       	add	r24, r18
    5230:	93 1f       	adc	r25, r19
    5232:	ac 01       	movw	r20, r24
    5234:	40 55       	subi	r20, 0x50	; 80
    5236:	5c 4f       	sbci	r21, 0xFC	; 252
    5238:	8b 81       	ldd	r24, Y+3	; 0x03
    523a:	9c 81       	ldd	r25, Y+4	; 0x04
    523c:	9c 01       	movw	r18, r24
    523e:	2e 5f       	subi	r18, 0xFE	; 254
    5240:	3f 4f       	sbci	r19, 0xFF	; 255
    5242:	ca 01       	movw	r24, r20
    5244:	b9 01       	movw	r22, r18
    5246:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <vListInsertEnd>
    524a:	0a c0       	rjmp	.+20     	; 0x5260 <vTaskNotifyGiveFromISR+0xd0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    524c:	8b 81       	ldd	r24, Y+3	; 0x03
    524e:	9c 81       	ldd	r25, Y+4	; 0x04
    5250:	9c 01       	movw	r18, r24
    5252:	24 5f       	subi	r18, 0xF4	; 244
    5254:	3f 4f       	sbci	r19, 0xFF	; 255
    5256:	83 ef       	ldi	r24, 0xF3	; 243
    5258:	93 e0       	ldi	r25, 0x03	; 3
    525a:	b9 01       	movw	r22, r18
    525c:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    5260:	eb 81       	ldd	r30, Y+3	; 0x03
    5262:	fc 81       	ldd	r31, Y+4	; 0x04
    5264:	96 89       	ldd	r25, Z+22	; 0x16
    5266:	e0 91 9f 03 	lds	r30, 0x039F
    526a:	f0 91 a0 03 	lds	r31, 0x03A0
    526e:	86 89       	ldd	r24, Z+22	; 0x16
    5270:	89 17       	cp	r24, r25
    5272:	60 f4       	brcc	.+24     	; 0x528c <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    5274:	8f 81       	ldd	r24, Y+7	; 0x07
    5276:	98 85       	ldd	r25, Y+8	; 0x08
    5278:	00 97       	sbiw	r24, 0x00	; 0
    527a:	29 f0       	breq	.+10     	; 0x5286 <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    527c:	ef 81       	ldd	r30, Y+7	; 0x07
    527e:	f8 85       	ldd	r31, Y+8	; 0x08
    5280:	81 e0       	ldi	r24, 0x01	; 1
    5282:	80 83       	st	Z, r24
    5284:	03 c0       	rjmp	.+6      	; 0x528c <vTaskNotifyGiveFromISR+0xfc>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    5286:	81 e0       	ldi	r24, 0x01	; 1
    5288:	80 93 a8 03 	sts	0x03A8, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    528c:	28 96       	adiw	r28, 0x08	; 8
    528e:	0f b6       	in	r0, 0x3f	; 63
    5290:	f8 94       	cli
    5292:	de bf       	out	0x3e, r29	; 62
    5294:	0f be       	out	0x3f, r0	; 63
    5296:	cd bf       	out	0x3d, r28	; 61
    5298:	cf 91       	pop	r28
    529a:	df 91       	pop	r29
    529c:	08 95       	ret

0000529e <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
    529e:	df 93       	push	r29
    52a0:	cf 93       	push	r28
    52a2:	cd b7       	in	r28, 0x3d	; 61
    52a4:	de b7       	in	r29, 0x3e	; 62
    52a6:	27 97       	sbiw	r28, 0x07	; 7
    52a8:	0f b6       	in	r0, 0x3f	; 63
    52aa:	f8 94       	cli
    52ac:	de bf       	out	0x3e, r29	; 62
    52ae:	0f be       	out	0x3f, r0	; 63
    52b0:	cd bf       	out	0x3d, r28	; 61
    52b2:	9d 83       	std	Y+5, r25	; 0x05
    52b4:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    52b6:	8c 81       	ldd	r24, Y+4	; 0x04
    52b8:	9d 81       	ldd	r25, Y+5	; 0x05
    52ba:	00 97       	sbiw	r24, 0x00	; 0
    52bc:	39 f4       	brne	.+14     	; 0x52cc <xTaskNotifyStateClear+0x2e>
    52be:	80 91 9f 03 	lds	r24, 0x039F
    52c2:	90 91 a0 03 	lds	r25, 0x03A0
    52c6:	9f 83       	std	Y+7, r25	; 0x07
    52c8:	8e 83       	std	Y+6, r24	; 0x06
    52ca:	04 c0       	rjmp	.+8      	; 0x52d4 <xTaskNotifyStateClear+0x36>
    52cc:	8c 81       	ldd	r24, Y+4	; 0x04
    52ce:	9d 81       	ldd	r25, Y+5	; 0x05
    52d0:	9f 83       	std	Y+7, r25	; 0x07
    52d2:	8e 83       	std	Y+6, r24	; 0x06
    52d4:	8e 81       	ldd	r24, Y+6	; 0x06
    52d6:	9f 81       	ldd	r25, Y+7	; 0x07
    52d8:	9b 83       	std	Y+3, r25	; 0x03
    52da:	8a 83       	std	Y+2, r24	; 0x02

		taskENTER_CRITICAL();
    52dc:	0f b6       	in	r0, 0x3f	; 63
    52de:	f8 94       	cli
    52e0:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    52e2:	ea 81       	ldd	r30, Y+2	; 0x02
    52e4:	fb 81       	ldd	r31, Y+3	; 0x03
    52e6:	81 a5       	ldd	r24, Z+41	; 0x29
    52e8:	82 30       	cpi	r24, 0x02	; 2
    52ea:	31 f4       	brne	.+12     	; 0x52f8 <xTaskNotifyStateClear+0x5a>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    52ec:	ea 81       	ldd	r30, Y+2	; 0x02
    52ee:	fb 81       	ldd	r31, Y+3	; 0x03
    52f0:	11 a6       	std	Z+41, r1	; 0x29
				xReturn = pdPASS;
    52f2:	81 e0       	ldi	r24, 0x01	; 1
    52f4:	89 83       	std	Y+1, r24	; 0x01
    52f6:	01 c0       	rjmp	.+2      	; 0x52fa <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
    52f8:	19 82       	std	Y+1, r1	; 0x01
			}
		}
		taskEXIT_CRITICAL();
    52fa:	0f 90       	pop	r0
    52fc:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    52fe:	89 81       	ldd	r24, Y+1	; 0x01
	}
    5300:	27 96       	adiw	r28, 0x07	; 7
    5302:	0f b6       	in	r0, 0x3f	; 63
    5304:	f8 94       	cli
    5306:	de bf       	out	0x3e, r29	; 62
    5308:	0f be       	out	0x3f, r0	; 63
    530a:	cd bf       	out	0x3d, r28	; 61
    530c:	cf 91       	pop	r28
    530e:	df 91       	pop	r29
    5310:	08 95       	ret

00005312 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    5312:	df 93       	push	r29
    5314:	cf 93       	push	r28
    5316:	cd b7       	in	r28, 0x3d	; 61
    5318:	de b7       	in	r29, 0x3e	; 62
    531a:	27 97       	sbiw	r28, 0x07	; 7
    531c:	0f b6       	in	r0, 0x3f	; 63
    531e:	f8 94       	cli
    5320:	de bf       	out	0x3e, r29	; 62
    5322:	0f be       	out	0x3f, r0	; 63
    5324:	cd bf       	out	0x3d, r28	; 61
    5326:	9e 83       	std	Y+6, r25	; 0x06
    5328:	8d 83       	std	Y+5, r24	; 0x05
    532a:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    532c:	80 91 a3 03 	lds	r24, 0x03A3
    5330:	90 91 a4 03 	lds	r25, 0x03A4
    5334:	9a 83       	std	Y+2, r25	; 0x02
    5336:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    5338:	80 91 9f 03 	lds	r24, 0x039F
    533c:	90 91 a0 03 	lds	r25, 0x03A0
    5340:	02 96       	adiw	r24, 0x02	; 2
    5342:	0e 94 28 10 	call	0x2050	; 0x2050 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    5346:	8d 81       	ldd	r24, Y+5	; 0x05
    5348:	9e 81       	ldd	r25, Y+6	; 0x06
    534a:	2f ef       	ldi	r18, 0xFF	; 255
    534c:	8f 3f       	cpi	r24, 0xFF	; 255
    534e:	92 07       	cpc	r25, r18
    5350:	81 f4       	brne	.+32     	; 0x5372 <prvAddCurrentTaskToDelayedList+0x60>
    5352:	8f 81       	ldd	r24, Y+7	; 0x07
    5354:	88 23       	and	r24, r24
    5356:	69 f0       	breq	.+26     	; 0x5372 <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    5358:	80 91 9f 03 	lds	r24, 0x039F
    535c:	90 91 a0 03 	lds	r25, 0x03A0
    5360:	9c 01       	movw	r18, r24
    5362:	2e 5f       	subi	r18, 0xFE	; 254
    5364:	3f 4f       	sbci	r19, 0xFF	; 255
    5366:	85 e0       	ldi	r24, 0x05	; 5
    5368:	94 e0       	ldi	r25, 0x04	; 4
    536a:	b9 01       	movw	r22, r18
    536c:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <vListInsertEnd>
    5370:	43 c0       	rjmp	.+134    	; 0x53f8 <prvAddCurrentTaskToDelayedList+0xe6>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    5372:	29 81       	ldd	r18, Y+1	; 0x01
    5374:	3a 81       	ldd	r19, Y+2	; 0x02
    5376:	8d 81       	ldd	r24, Y+5	; 0x05
    5378:	9e 81       	ldd	r25, Y+6	; 0x06
    537a:	82 0f       	add	r24, r18
    537c:	93 1f       	adc	r25, r19
    537e:	9c 83       	std	Y+4, r25	; 0x04
    5380:	8b 83       	std	Y+3, r24	; 0x03

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    5382:	e0 91 9f 03 	lds	r30, 0x039F
    5386:	f0 91 a0 03 	lds	r31, 0x03A0
    538a:	8b 81       	ldd	r24, Y+3	; 0x03
    538c:	9c 81       	ldd	r25, Y+4	; 0x04
    538e:	93 83       	std	Z+3, r25	; 0x03
    5390:	82 83       	std	Z+2, r24	; 0x02

			if( xTimeToWake < xConstTickCount )
    5392:	2b 81       	ldd	r18, Y+3	; 0x03
    5394:	3c 81       	ldd	r19, Y+4	; 0x04
    5396:	89 81       	ldd	r24, Y+1	; 0x01
    5398:	9a 81       	ldd	r25, Y+2	; 0x02
    539a:	28 17       	cp	r18, r24
    539c:	39 07       	cpc	r19, r25
    539e:	70 f4       	brcc	.+28     	; 0x53bc <prvAddCurrentTaskToDelayedList+0xaa>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    53a0:	80 91 f1 03 	lds	r24, 0x03F1
    53a4:	90 91 f2 03 	lds	r25, 0x03F2
    53a8:	20 91 9f 03 	lds	r18, 0x039F
    53ac:	30 91 a0 03 	lds	r19, 0x03A0
    53b0:	2e 5f       	subi	r18, 0xFE	; 254
    53b2:	3f 4f       	sbci	r19, 0xFF	; 255
    53b4:	b9 01       	movw	r22, r18
    53b6:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <vListInsert>
    53ba:	1e c0       	rjmp	.+60     	; 0x53f8 <prvAddCurrentTaskToDelayedList+0xe6>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    53bc:	40 91 ef 03 	lds	r20, 0x03EF
    53c0:	50 91 f0 03 	lds	r21, 0x03F0
    53c4:	80 91 9f 03 	lds	r24, 0x039F
    53c8:	90 91 a0 03 	lds	r25, 0x03A0
    53cc:	9c 01       	movw	r18, r24
    53ce:	2e 5f       	subi	r18, 0xFE	; 254
    53d0:	3f 4f       	sbci	r19, 0xFF	; 255
    53d2:	ca 01       	movw	r24, r20
    53d4:	b9 01       	movw	r22, r18
    53d6:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    53da:	20 91 ab 03 	lds	r18, 0x03AB
    53de:	30 91 ac 03 	lds	r19, 0x03AC
    53e2:	8b 81       	ldd	r24, Y+3	; 0x03
    53e4:	9c 81       	ldd	r25, Y+4	; 0x04
    53e6:	82 17       	cp	r24, r18
    53e8:	93 07       	cpc	r25, r19
    53ea:	30 f4       	brcc	.+12     	; 0x53f8 <prvAddCurrentTaskToDelayedList+0xe6>
				{
					xNextTaskUnblockTime = xTimeToWake;
    53ec:	8b 81       	ldd	r24, Y+3	; 0x03
    53ee:	9c 81       	ldd	r25, Y+4	; 0x04
    53f0:	90 93 ac 03 	sts	0x03AC, r25
    53f4:	80 93 ab 03 	sts	0x03AB, r24

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    53f8:	27 96       	adiw	r28, 0x07	; 7
    53fa:	0f b6       	in	r0, 0x3f	; 63
    53fc:	f8 94       	cli
    53fe:	de bf       	out	0x3e, r29	; 62
    5400:	0f be       	out	0x3f, r0	; 63
    5402:	cd bf       	out	0x3d, r28	; 61
    5404:	cf 91       	pop	r28
    5406:	df 91       	pop	r29
    5408:	08 95       	ret

0000540a <__prologue_saves__>:
    540a:	2f 92       	push	r2
    540c:	3f 92       	push	r3
    540e:	4f 92       	push	r4
    5410:	5f 92       	push	r5
    5412:	6f 92       	push	r6
    5414:	7f 92       	push	r7
    5416:	8f 92       	push	r8
    5418:	9f 92       	push	r9
    541a:	af 92       	push	r10
    541c:	bf 92       	push	r11
    541e:	cf 92       	push	r12
    5420:	df 92       	push	r13
    5422:	ef 92       	push	r14
    5424:	ff 92       	push	r15
    5426:	0f 93       	push	r16
    5428:	1f 93       	push	r17
    542a:	cf 93       	push	r28
    542c:	df 93       	push	r29
    542e:	cd b7       	in	r28, 0x3d	; 61
    5430:	de b7       	in	r29, 0x3e	; 62
    5432:	ca 1b       	sub	r28, r26
    5434:	db 0b       	sbc	r29, r27
    5436:	0f b6       	in	r0, 0x3f	; 63
    5438:	f8 94       	cli
    543a:	de bf       	out	0x3e, r29	; 62
    543c:	0f be       	out	0x3f, r0	; 63
    543e:	cd bf       	out	0x3d, r28	; 61
    5440:	09 94       	ijmp

00005442 <__epilogue_restores__>:
    5442:	2a 88       	ldd	r2, Y+18	; 0x12
    5444:	39 88       	ldd	r3, Y+17	; 0x11
    5446:	48 88       	ldd	r4, Y+16	; 0x10
    5448:	5f 84       	ldd	r5, Y+15	; 0x0f
    544a:	6e 84       	ldd	r6, Y+14	; 0x0e
    544c:	7d 84       	ldd	r7, Y+13	; 0x0d
    544e:	8c 84       	ldd	r8, Y+12	; 0x0c
    5450:	9b 84       	ldd	r9, Y+11	; 0x0b
    5452:	aa 84       	ldd	r10, Y+10	; 0x0a
    5454:	b9 84       	ldd	r11, Y+9	; 0x09
    5456:	c8 84       	ldd	r12, Y+8	; 0x08
    5458:	df 80       	ldd	r13, Y+7	; 0x07
    545a:	ee 80       	ldd	r14, Y+6	; 0x06
    545c:	fd 80       	ldd	r15, Y+5	; 0x05
    545e:	0c 81       	ldd	r16, Y+4	; 0x04
    5460:	1b 81       	ldd	r17, Y+3	; 0x03
    5462:	aa 81       	ldd	r26, Y+2	; 0x02
    5464:	b9 81       	ldd	r27, Y+1	; 0x01
    5466:	ce 0f       	add	r28, r30
    5468:	d1 1d       	adc	r29, r1
    546a:	0f b6       	in	r0, 0x3f	; 63
    546c:	f8 94       	cli
    546e:	de bf       	out	0x3e, r29	; 62
    5470:	0f be       	out	0x3f, r0	; 63
    5472:	cd bf       	out	0x3d, r28	; 61
    5474:	ed 01       	movw	r28, r26
    5476:	08 95       	ret

00005478 <memcpy>:
    5478:	fb 01       	movw	r30, r22
    547a:	dc 01       	movw	r26, r24
    547c:	02 c0       	rjmp	.+4      	; 0x5482 <memcpy+0xa>
    547e:	01 90       	ld	r0, Z+
    5480:	0d 92       	st	X+, r0
    5482:	41 50       	subi	r20, 0x01	; 1
    5484:	50 40       	sbci	r21, 0x00	; 0
    5486:	d8 f7       	brcc	.-10     	; 0x547e <memcpy+0x6>
    5488:	08 95       	ret

0000548a <_exit>:
    548a:	f8 94       	cli

0000548c <__stop_program>:
    548c:	ff cf       	rjmp	.-2      	; 0x548c <__stop_program>
