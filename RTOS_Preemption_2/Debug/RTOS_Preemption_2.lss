
RTOS_Preemption_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000037b8  0000384c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000487  00800074  00800074  00003860  2**0
                  ALLOC
  3 .stab         000048fc  00000000  00000000  00003860  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002acc  00000000  00000000  0000815c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000ac28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000ad68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000aed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000cb21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000da0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e7bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e91c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000eba9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f377  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3f       	cpi	r26, 0xFB	; 251
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <main>
      8a:	0c 94 da 1b 	jmp	0x37b4	; 0x37b4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e6       	ldi	r26, 0x69	; 105
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a0 1b 	jmp	0x3740	; 0x3740 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 90 1b 	jmp	0x3720	; 0x3720 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 90 1b 	jmp	0x3720	; 0x3720 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e6       	ldi	r24, 0x69	; 105
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a0 1b 	jmp	0x3740	; 0x3740 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 90 1b 	jmp	0x3720	; 0x3720 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 90 1b 	jmp	0x3720	; 0x3720 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 90 1b 	jmp	0x3720	; 0x3720 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 94 1b 	jmp	0x3728	; 0x3728 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b0 1b 	jmp	0x3760	; 0x3760 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9d 83       	std	Y+5, r25	; 0x05
     b5c:	8c 83       	std	Y+4, r24	; 0x04
     b5e:	6e 83       	std	Y+6, r22	; 0x06
     b60:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
     b62:	8a e1       	ldi	r24, 0x1A	; 26
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <pvPortMalloc>
     b6a:	9a 83       	std	Y+2, r25	; 0x02
     b6c:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	00 97       	sbiw	r24, 0x00	; 0
     b74:	09 f4       	brne	.+2      	; 0xb78 <xCoRoutineCreate+0x32>
     b76:	6f c0       	rjmp	.+222    	; 0xc56 <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     b78:	80 91 74 00 	lds	r24, 0x0074
     b7c:	90 91 75 00 	lds	r25, 0x0075
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	41 f4       	brne	.+16     	; 0xb94 <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	9a 81       	ldd	r25, Y+2	; 0x02
     b88:	90 93 75 00 	sts	0x0075, r25
     b8c:	80 93 74 00 	sts	0x0074, r24
			prvInitialiseCoRoutineLists();
     b90:	0e 94 0a 08 	call	0x1014	; 0x1014 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     b94:	8e 81       	ldd	r24, Y+6	; 0x06
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	10 f0       	brcs	.+4      	; 0xb9e <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     b9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ba0:	fa 81       	ldd	r31, Y+2	; 0x02
     ba2:	11 8e       	std	Z+25, r1	; 0x19
     ba4:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
     ba6:	e9 81       	ldd	r30, Y+1	; 0x01
     ba8:	fa 81       	ldd	r31, Y+2	; 0x02
     baa:	8e 81       	ldd	r24, Y+6	; 0x06
     bac:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
     bae:	e9 81       	ldd	r30, Y+1	; 0x01
     bb0:	fa 81       	ldd	r31, Y+2	; 0x02
     bb2:	8f 81       	ldd	r24, Y+7	; 0x07
     bb4:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     bb6:	e9 81       	ldd	r30, Y+1	; 0x01
     bb8:	fa 81       	ldd	r31, Y+2	; 0x02
     bba:	8c 81       	ldd	r24, Y+4	; 0x04
     bbc:	9d 81       	ldd	r25, Y+5	; 0x05
     bbe:	91 83       	std	Z+1, r25	; 0x01
     bc0:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	9a 81       	ldd	r25, Y+2	; 0x02
     bc6:	02 96       	adiw	r24, 0x02	; 2
     bc8:	0e 94 11 09 	call	0x1222	; 0x1222 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	9a 81       	ldd	r25, Y+2	; 0x02
     bd0:	0c 96       	adiw	r24, 0x0c	; 12
     bd2:	0e 94 11 09 	call	0x1222	; 0x1222 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     bd6:	e9 81       	ldd	r30, Y+1	; 0x01
     bd8:	fa 81       	ldd	r31, Y+2	; 0x02
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	9a 81       	ldd	r25, Y+2	; 0x02
     bde:	91 87       	std	Z+9, r25	; 0x09
     be0:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     be2:	e9 81       	ldd	r30, Y+1	; 0x01
     be4:	fa 81       	ldd	r31, Y+2	; 0x02
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	9a 81       	ldd	r25, Y+2	; 0x02
     bea:	93 8b       	std	Z+19, r25	; 0x13
     bec:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     bee:	8e 81       	ldd	r24, Y+6	; 0x06
     bf0:	28 2f       	mov	r18, r24
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	84 e0       	ldi	r24, 0x04	; 4
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	82 1b       	sub	r24, r18
     bfa:	93 0b       	sbc	r25, r19
     bfc:	e9 81       	ldd	r30, Y+1	; 0x01
     bfe:	fa 81       	ldd	r31, Y+2	; 0x02
     c00:	95 87       	std	Z+13, r25	; 0x0d
     c02:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     c04:	e9 81       	ldd	r30, Y+1	; 0x01
     c06:	fa 81       	ldd	r31, Y+2	; 0x02
     c08:	96 89       	ldd	r25, Z+22	; 0x16
     c0a:	80 91 76 00 	lds	r24, 0x0076
     c0e:	89 17       	cp	r24, r25
     c10:	28 f4       	brcc	.+10     	; 0xc1c <xCoRoutineCreate+0xd6>
     c12:	e9 81       	ldd	r30, Y+1	; 0x01
     c14:	fa 81       	ldd	r31, Y+2	; 0x02
     c16:	86 89       	ldd	r24, Z+22	; 0x16
     c18:	80 93 76 00 	sts	0x0076, r24
     c1c:	e9 81       	ldd	r30, Y+1	; 0x01
     c1e:	fa 81       	ldd	r31, Y+2	; 0x02
     c20:	86 89       	ldd	r24, Z+22	; 0x16
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	c9 01       	movw	r24, r18
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	82 0f       	add	r24, r18
     c36:	93 1f       	adc	r25, r19
     c38:	ac 01       	movw	r20, r24
     c3a:	43 58       	subi	r20, 0x83	; 131
     c3c:	5f 4f       	sbci	r21, 0xFF	; 255
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	9a 81       	ldd	r25, Y+2	; 0x02
     c42:	9c 01       	movw	r18, r24
     c44:	2e 5f       	subi	r18, 0xFE	; 254
     c46:	3f 4f       	sbci	r19, 0xFF	; 255
     c48:	ca 01       	movw	r24, r20
     c4a:	b9 01       	movw	r22, r18
     c4c:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>

		xReturn = pdPASS;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	8b 83       	std	Y+3, r24	; 0x03
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     c56:	8f ef       	ldi	r24, 0xFF	; 255
     c58:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
}
     c5c:	27 96       	adiw	r28, 0x07	; 7
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	cf 91       	pop	r28
     c6a:	df 91       	pop	r29
     c6c:	08 95       	ret

00000c6e <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	00 d0       	rcall	.+0      	; 0xc74 <vCoRoutineAddToDelayedList+0x6>
     c74:	00 d0       	rcall	.+0      	; 0xc76 <vCoRoutineAddToDelayedList+0x8>
     c76:	00 d0       	rcall	.+0      	; 0xc78 <vCoRoutineAddToDelayedList+0xa>
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	9c 83       	std	Y+4, r25	; 0x04
     c7e:	8b 83       	std	Y+3, r24	; 0x03
     c80:	7e 83       	std	Y+6, r23	; 0x06
     c82:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     c84:	20 91 77 00 	lds	r18, 0x0077
     c88:	30 91 78 00 	lds	r19, 0x0078
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	9c 81       	ldd	r25, Y+4	; 0x04
     c90:	82 0f       	add	r24, r18
     c92:	93 1f       	adc	r25, r19
     c94:	9a 83       	std	Y+2, r25	; 0x02
     c96:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     c98:	80 91 74 00 	lds	r24, 0x0074
     c9c:	90 91 75 00 	lds	r25, 0x0075
     ca0:	02 96       	adiw	r24, 0x02	; 2
     ca2:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     ca6:	e0 91 74 00 	lds	r30, 0x0074
     caa:	f0 91 75 00 	lds	r31, 0x0075
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	9a 81       	ldd	r25, Y+2	; 0x02
     cb2:	93 83       	std	Z+3, r25	; 0x03
     cb4:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
     cb6:	20 91 77 00 	lds	r18, 0x0077
     cba:	30 91 78 00 	lds	r19, 0x0078
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	82 17       	cp	r24, r18
     cc4:	93 07       	cpc	r25, r19
     cc6:	70 f4       	brcc	.+28     	; 0xce4 <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     cc8:	80 91 a3 00 	lds	r24, 0x00A3
     ccc:	90 91 a4 00 	lds	r25, 0x00A4
     cd0:	20 91 74 00 	lds	r18, 0x0074
     cd4:	30 91 75 00 	lds	r19, 0x0075
     cd8:	2e 5f       	subi	r18, 0xFE	; 254
     cda:	3f 4f       	sbci	r19, 0xFF	; 255
     cdc:	b9 01       	movw	r22, r18
     cde:	0e 94 6d 09 	call	0x12da	; 0x12da <vListInsert>
     ce2:	0d c0       	rjmp	.+26     	; 0xcfe <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     ce4:	80 91 a1 00 	lds	r24, 0x00A1
     ce8:	90 91 a2 00 	lds	r25, 0x00A2
     cec:	20 91 74 00 	lds	r18, 0x0074
     cf0:	30 91 75 00 	lds	r19, 0x0075
     cf4:	2e 5f       	subi	r18, 0xFE	; 254
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	b9 01       	movw	r22, r18
     cfa:	0e 94 6d 09 	call	0x12da	; 0x12da <vListInsert>
	}

	if( pxEventList )
     cfe:	8d 81       	ldd	r24, Y+5	; 0x05
     d00:	9e 81       	ldd	r25, Y+6	; 0x06
     d02:	00 97       	sbiw	r24, 0x00	; 0
     d04:	61 f0       	breq	.+24     	; 0xd1e <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     d06:	80 91 74 00 	lds	r24, 0x0074
     d0a:	90 91 75 00 	lds	r25, 0x0075
     d0e:	9c 01       	movw	r18, r24
     d10:	24 5f       	subi	r18, 0xF4	; 244
     d12:	3f 4f       	sbci	r19, 0xFF	; 255
     d14:	8d 81       	ldd	r24, Y+5	; 0x05
     d16:	9e 81       	ldd	r25, Y+6	; 0x06
     d18:	b9 01       	movw	r22, r18
     d1a:	0e 94 6d 09 	call	0x12da	; 0x12da <vListInsert>
	}
}
     d1e:	26 96       	adiw	r28, 0x06	; 6
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	00 d0       	rcall	.+0      	; 0xd36 <prvCheckPendingReadyList+0x6>
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	3a c0       	rjmp	.+116    	; 0xdb0 <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
     d3c:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
     d3e:	e0 91 aa 00 	lds	r30, 0x00AA
     d42:	f0 91 ab 00 	lds	r31, 0x00AB
     d46:	86 81       	ldd	r24, Z+6	; 0x06
     d48:	97 81       	ldd	r25, Z+7	; 0x07
     d4a:	9a 83       	std	Y+2, r25	; 0x02
     d4c:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
     d52:	0c 96       	adiw	r24, 0x0c	; 12
     d54:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
		}
		portENABLE_INTERRUPTS();
     d58:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	9a 81       	ldd	r25, Y+2	; 0x02
     d5e:	02 96       	adiw	r24, 0x02	; 2
     d60:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
     d64:	e9 81       	ldd	r30, Y+1	; 0x01
     d66:	fa 81       	ldd	r31, Y+2	; 0x02
     d68:	96 89       	ldd	r25, Z+22	; 0x16
     d6a:	80 91 76 00 	lds	r24, 0x0076
     d6e:	89 17       	cp	r24, r25
     d70:	28 f4       	brcc	.+10     	; 0xd7c <prvCheckPendingReadyList+0x4c>
     d72:	e9 81       	ldd	r30, Y+1	; 0x01
     d74:	fa 81       	ldd	r31, Y+2	; 0x02
     d76:	86 89       	ldd	r24, Z+22	; 0x16
     d78:	80 93 76 00 	sts	0x0076, r24
     d7c:	e9 81       	ldd	r30, Y+1	; 0x01
     d7e:	fa 81       	ldd	r31, Y+2	; 0x02
     d80:	86 89       	ldd	r24, Z+22	; 0x16
     d82:	28 2f       	mov	r18, r24
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	c9 01       	movw	r24, r18
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	82 0f       	add	r24, r18
     d96:	93 1f       	adc	r25, r19
     d98:	ac 01       	movw	r20, r24
     d9a:	43 58       	subi	r20, 0x83	; 131
     d9c:	5f 4f       	sbci	r21, 0xFF	; 255
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	9a 81       	ldd	r25, Y+2	; 0x02
     da2:	9c 01       	movw	r18, r24
     da4:	2e 5f       	subi	r18, 0xFE	; 254
     da6:	3f 4f       	sbci	r19, 0xFF	; 255
     da8:	ca 01       	movw	r24, r20
     daa:	b9 01       	movw	r22, r18
     dac:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     db0:	80 91 a5 00 	lds	r24, 0x00A5
     db4:	88 23       	and	r24, r24
     db6:	09 f0       	breq	.+2      	; 0xdba <prvCheckPendingReadyList+0x8a>
     db8:	c1 cf       	rjmp	.-126    	; 0xd3c <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	00 d0       	rcall	.+0      	; 0xdca <prvCheckDelayedList+0x6>
     dca:	00 d0       	rcall	.+0      	; 0xdcc <prvCheckDelayedList+0x8>
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     dd0:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <xTaskGetTickCount>
     dd4:	20 91 79 00 	lds	r18, 0x0079
     dd8:	30 91 7a 00 	lds	r19, 0x007A
     ddc:	82 1b       	sub	r24, r18
     dde:	93 0b       	sbc	r25, r19
     de0:	90 93 7c 00 	sts	0x007C, r25
     de4:	80 93 7b 00 	sts	0x007B, r24
     de8:	85 c0       	rjmp	.+266    	; 0xef4 <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
     dea:	80 91 77 00 	lds	r24, 0x0077
     dee:	90 91 78 00 	lds	r25, 0x0078
     df2:	01 96       	adiw	r24, 0x01	; 1
     df4:	90 93 78 00 	sts	0x0078, r25
     df8:	80 93 77 00 	sts	0x0077, r24
		xPassedTicks--;
     dfc:	80 91 7b 00 	lds	r24, 0x007B
     e00:	90 91 7c 00 	lds	r25, 0x007C
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	90 93 7c 00 	sts	0x007C, r25
     e0a:	80 93 7b 00 	sts	0x007B, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     e0e:	80 91 77 00 	lds	r24, 0x0077
     e12:	90 91 78 00 	lds	r25, 0x0078
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	09 f0       	breq	.+2      	; 0xe1c <prvCheckDelayedList+0x58>
     e1a:	64 c0       	rjmp	.+200    	; 0xee4 <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     e1c:	80 91 a1 00 	lds	r24, 0x00A1
     e20:	90 91 a2 00 	lds	r25, 0x00A2
     e24:	9a 83       	std	Y+2, r25	; 0x02
     e26:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     e28:	80 91 a3 00 	lds	r24, 0x00A3
     e2c:	90 91 a4 00 	lds	r25, 0x00A4
     e30:	90 93 a2 00 	sts	0x00A2, r25
     e34:	80 93 a1 00 	sts	0x00A1, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	9a 81       	ldd	r25, Y+2	; 0x02
     e3c:	90 93 a4 00 	sts	0x00A4, r25
     e40:	80 93 a3 00 	sts	0x00A3, r24
     e44:	4f c0       	rjmp	.+158    	; 0xee4 <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     e46:	e0 91 a1 00 	lds	r30, 0x00A1
     e4a:	f0 91 a2 00 	lds	r31, 0x00A2
     e4e:	05 80       	ldd	r0, Z+5	; 0x05
     e50:	f6 81       	ldd	r31, Z+6	; 0x06
     e52:	e0 2d       	mov	r30, r0
     e54:	86 81       	ldd	r24, Z+6	; 0x06
     e56:	97 81       	ldd	r25, Z+7	; 0x07
     e58:	9c 83       	std	Y+4, r25	; 0x04
     e5a:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
     e5c:	eb 81       	ldd	r30, Y+3	; 0x03
     e5e:	fc 81       	ldd	r31, Y+4	; 0x04
     e60:	22 81       	ldd	r18, Z+2	; 0x02
     e62:	33 81       	ldd	r19, Z+3	; 0x03
     e64:	80 91 77 00 	lds	r24, 0x0077
     e68:	90 91 78 00 	lds	r25, 0x0078
     e6c:	82 17       	cp	r24, r18
     e6e:	93 07       	cpc	r25, r19
     e70:	08 f4       	brcc	.+2      	; 0xe74 <prvCheckDelayedList+0xb0>
     e72:	40 c0       	rjmp	.+128    	; 0xef4 <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
     e74:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	9c 81       	ldd	r25, Y+4	; 0x04
     e7a:	02 96       	adiw	r24, 0x02	; 2
     e7c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
     e80:	eb 81       	ldd	r30, Y+3	; 0x03
     e82:	fc 81       	ldd	r31, Y+4	; 0x04
     e84:	84 89       	ldd	r24, Z+20	; 0x14
     e86:	95 89       	ldd	r25, Z+21	; 0x15
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	29 f0       	breq	.+10     	; 0xe96 <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	9c 81       	ldd	r25, Y+4	; 0x04
     e90:	0c 96       	adiw	r24, 0x0c	; 12
     e92:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
     e96:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
     e98:	eb 81       	ldd	r30, Y+3	; 0x03
     e9a:	fc 81       	ldd	r31, Y+4	; 0x04
     e9c:	96 89       	ldd	r25, Z+22	; 0x16
     e9e:	80 91 76 00 	lds	r24, 0x0076
     ea2:	89 17       	cp	r24, r25
     ea4:	28 f4       	brcc	.+10     	; 0xeb0 <prvCheckDelayedList+0xec>
     ea6:	eb 81       	ldd	r30, Y+3	; 0x03
     ea8:	fc 81       	ldd	r31, Y+4	; 0x04
     eaa:	86 89       	ldd	r24, Z+22	; 0x16
     eac:	80 93 76 00 	sts	0x0076, r24
     eb0:	eb 81       	ldd	r30, Y+3	; 0x03
     eb2:	fc 81       	ldd	r31, Y+4	; 0x04
     eb4:	86 89       	ldd	r24, Z+22	; 0x16
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	c9 01       	movw	r24, r18
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	82 0f       	add	r24, r18
     eca:	93 1f       	adc	r25, r19
     ecc:	ac 01       	movw	r20, r24
     ece:	43 58       	subi	r20, 0x83	; 131
     ed0:	5f 4f       	sbci	r21, 0xFF	; 255
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	9c 81       	ldd	r25, Y+4	; 0x04
     ed6:	9c 01       	movw	r18, r24
     ed8:	2e 5f       	subi	r18, 0xFE	; 254
     eda:	3f 4f       	sbci	r19, 0xFF	; 255
     edc:	ca 01       	movw	r24, r20
     ede:	b9 01       	movw	r22, r18
     ee0:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     ee4:	e0 91 a1 00 	lds	r30, 0x00A1
     ee8:	f0 91 a2 00 	lds	r31, 0x00A2
     eec:	80 81       	ld	r24, Z
     eee:	88 23       	and	r24, r24
     ef0:	09 f0       	breq	.+2      	; 0xef4 <prvCheckDelayedList+0x130>
     ef2:	a9 cf       	rjmp	.-174    	; 0xe46 <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     ef4:	80 91 7b 00 	lds	r24, 0x007B
     ef8:	90 91 7c 00 	lds	r25, 0x007C
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	09 f0       	breq	.+2      	; 0xf02 <prvCheckDelayedList+0x13e>
     f00:	74 cf       	rjmp	.-280    	; 0xdea <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
     f02:	80 91 77 00 	lds	r24, 0x0077
     f06:	90 91 78 00 	lds	r25, 0x0078
     f0a:	90 93 7a 00 	sts	0x007A, r25
     f0e:	80 93 79 00 	sts	0x0079, r24
}
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	00 d0       	rcall	.+0      	; 0xf26 <vCoRoutineSchedule+0x6>
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
     f2a:	0e 94 98 06 	call	0xd30	; 0xd30 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
     f2e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <prvCheckDelayedList>
     f32:	0a c0       	rjmp	.+20     	; 0xf48 <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     f34:	80 91 76 00 	lds	r24, 0x0076
     f38:	88 23       	and	r24, r24
     f3a:	09 f4       	brne	.+2      	; 0xf3e <vCoRoutineSchedule+0x1e>
     f3c:	66 c0       	rjmp	.+204    	; 0x100a <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
     f3e:	80 91 76 00 	lds	r24, 0x0076
     f42:	81 50       	subi	r24, 0x01	; 1
     f44:	80 93 76 00 	sts	0x0076, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     f48:	80 91 76 00 	lds	r24, 0x0076
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	c9 01       	movw	r24, r18
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	82 0f       	add	r24, r18
     f60:	93 1f       	adc	r25, r19
     f62:	fc 01       	movw	r30, r24
     f64:	e3 58       	subi	r30, 0x83	; 131
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	80 81       	ld	r24, Z
     f6a:	88 23       	and	r24, r24
     f6c:	19 f3       	breq	.-58     	; 0xf34 <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     f6e:	80 91 76 00 	lds	r24, 0x0076
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	c9 01       	movw	r24, r18
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	82 0f       	add	r24, r18
     f86:	93 1f       	adc	r25, r19
     f88:	83 58       	subi	r24, 0x83	; 131
     f8a:	9f 4f       	sbci	r25, 0xFF	; 255
     f8c:	9a 83       	std	Y+2, r25	; 0x02
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	e9 81       	ldd	r30, Y+1	; 0x01
     f92:	fa 81       	ldd	r31, Y+2	; 0x02
     f94:	01 80       	ldd	r0, Z+1	; 0x01
     f96:	f2 81       	ldd	r31, Z+2	; 0x02
     f98:	e0 2d       	mov	r30, r0
     f9a:	82 81       	ldd	r24, Z+2	; 0x02
     f9c:	93 81       	ldd	r25, Z+3	; 0x03
     f9e:	e9 81       	ldd	r30, Y+1	; 0x01
     fa0:	fa 81       	ldd	r31, Y+2	; 0x02
     fa2:	92 83       	std	Z+2, r25	; 0x02
     fa4:	81 83       	std	Z+1, r24	; 0x01
     fa6:	e9 81       	ldd	r30, Y+1	; 0x01
     fa8:	fa 81       	ldd	r31, Y+2	; 0x02
     faa:	21 81       	ldd	r18, Z+1	; 0x01
     fac:	32 81       	ldd	r19, Z+2	; 0x02
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	9a 81       	ldd	r25, Y+2	; 0x02
     fb2:	03 96       	adiw	r24, 0x03	; 3
     fb4:	28 17       	cp	r18, r24
     fb6:	39 07       	cpc	r19, r25
     fb8:	59 f4       	brne	.+22     	; 0xfd0 <vCoRoutineSchedule+0xb0>
     fba:	e9 81       	ldd	r30, Y+1	; 0x01
     fbc:	fa 81       	ldd	r31, Y+2	; 0x02
     fbe:	01 80       	ldd	r0, Z+1	; 0x01
     fc0:	f2 81       	ldd	r31, Z+2	; 0x02
     fc2:	e0 2d       	mov	r30, r0
     fc4:	82 81       	ldd	r24, Z+2	; 0x02
     fc6:	93 81       	ldd	r25, Z+3	; 0x03
     fc8:	e9 81       	ldd	r30, Y+1	; 0x01
     fca:	fa 81       	ldd	r31, Y+2	; 0x02
     fcc:	92 83       	std	Z+2, r25	; 0x02
     fce:	81 83       	std	Z+1, r24	; 0x01
     fd0:	e9 81       	ldd	r30, Y+1	; 0x01
     fd2:	fa 81       	ldd	r31, Y+2	; 0x02
     fd4:	01 80       	ldd	r0, Z+1	; 0x01
     fd6:	f2 81       	ldd	r31, Z+2	; 0x02
     fd8:	e0 2d       	mov	r30, r0
     fda:	86 81       	ldd	r24, Z+6	; 0x06
     fdc:	97 81       	ldd	r25, Z+7	; 0x07
     fde:	90 93 75 00 	sts	0x0075, r25
     fe2:	80 93 74 00 	sts	0x0074, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     fe6:	e0 91 74 00 	lds	r30, 0x0074
     fea:	f0 91 75 00 	lds	r31, 0x0075
     fee:	40 81       	ld	r20, Z
     ff0:	51 81       	ldd	r21, Z+1	; 0x01
     ff2:	80 91 74 00 	lds	r24, 0x0074
     ff6:	90 91 75 00 	lds	r25, 0x0075
     ffa:	e0 91 74 00 	lds	r30, 0x0074
     ffe:	f0 91 75 00 	lds	r31, 0x0075
    1002:	27 89       	ldd	r18, Z+23	; 0x17
    1004:	62 2f       	mov	r22, r18
    1006:	fa 01       	movw	r30, r20
    1008:	09 95       	icall

	return;
}
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	0f 92       	push	r0
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    101e:	19 82       	std	Y+1, r1	; 0x01
    1020:	13 c0       	rjmp	.+38     	; 0x1048 <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	c9 01       	movw	r24, r18
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	82 0f       	add	r24, r18
    1038:	93 1f       	adc	r25, r19
    103a:	83 58       	subi	r24, 0x83	; 131
    103c:	9f 4f       	sbci	r25, 0xFF	; 255
    103e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	8f 5f       	subi	r24, 0xFF	; 255
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	82 30       	cpi	r24, 0x02	; 2
    104c:	50 f3       	brcs	.-44     	; 0x1022 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    104e:	8f e8       	ldi	r24, 0x8F	; 143
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    1056:	88 e9       	ldi	r24, 0x98	; 152
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    105e:	85 ea       	ldi	r24, 0xA5	; 165
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    1066:	8f e8       	ldi	r24, 0x8F	; 143
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	90 93 a2 00 	sts	0x00A2, r25
    106e:	80 93 a1 00 	sts	0x00A1, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    1072:	88 e9       	ldi	r24, 0x98	; 152
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	90 93 a4 00 	sts	0x00A4, r25
    107a:	80 93 a3 00 	sts	0x00A3, r24
}
    107e:	0f 90       	pop	r0
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	00 d0       	rcall	.+0      	; 0x108c <xCoRoutineRemoveFromEventList+0x6>
    108c:	00 d0       	rcall	.+0      	; 0x108e <xCoRoutineRemoveFromEventList+0x8>
    108e:	0f 92       	push	r0
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	9d 83       	std	Y+5, r25	; 0x05
    1096:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1098:	ec 81       	ldd	r30, Y+4	; 0x04
    109a:	fd 81       	ldd	r31, Y+5	; 0x05
    109c:	05 80       	ldd	r0, Z+5	; 0x05
    109e:	f6 81       	ldd	r31, Z+6	; 0x06
    10a0:	e0 2d       	mov	r30, r0
    10a2:	86 81       	ldd	r24, Z+6	; 0x06
    10a4:	97 81       	ldd	r25, Z+7	; 0x07
    10a6:	9b 83       	std	Y+3, r25	; 0x03
    10a8:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	9b 81       	ldd	r25, Y+3	; 0x03
    10ae:	0c 96       	adiw	r24, 0x0c	; 12
    10b0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	9b 81       	ldd	r25, Y+3	; 0x03
    10b8:	9c 01       	movw	r18, r24
    10ba:	24 5f       	subi	r18, 0xF4	; 244
    10bc:	3f 4f       	sbci	r19, 0xFF	; 255
    10be:	85 ea       	ldi	r24, 0xA5	; 165
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	b9 01       	movw	r22, r18
    10c4:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    10c8:	ea 81       	ldd	r30, Y+2	; 0x02
    10ca:	fb 81       	ldd	r31, Y+3	; 0x03
    10cc:	96 89       	ldd	r25, Z+22	; 0x16
    10ce:	e0 91 74 00 	lds	r30, 0x0074
    10d2:	f0 91 75 00 	lds	r31, 0x0075
    10d6:	86 89       	ldd	r24, Z+22	; 0x16
    10d8:	98 17       	cp	r25, r24
    10da:	18 f0       	brcs	.+6      	; 0x10e2 <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	01 c0       	rjmp	.+2      	; 0x10e4 <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
    10e2:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <pvPortMalloc+0x6>
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <pvPortMalloc+0x8>
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	9c 83       	std	Y+4, r25	; 0x04
    1104:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
    1106:	1a 82       	std	Y+2, r1	; 0x02
    1108:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    110a:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    110e:	80 91 ae 00 	lds	r24, 0x00AE
    1112:	90 91 af 00 	lds	r25, 0x00AF
    1116:	2b 81       	ldd	r18, Y+3	; 0x03
    1118:	3c 81       	ldd	r19, Y+4	; 0x04
    111a:	82 0f       	add	r24, r18
    111c:	93 1f       	adc	r25, r19
    111e:	23 e0       	ldi	r18, 0x03	; 3
    1120:	88 3e       	cpi	r24, 0xE8	; 232
    1122:	92 07       	cpc	r25, r18
    1124:	18 f5       	brcc	.+70     	; 0x116c <pvPortMalloc+0x76>
    1126:	20 91 ae 00 	lds	r18, 0x00AE
    112a:	30 91 af 00 	lds	r19, 0x00AF
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	28 0f       	add	r18, r24
    1134:	39 1f       	adc	r19, r25
    1136:	80 91 ae 00 	lds	r24, 0x00AE
    113a:	90 91 af 00 	lds	r25, 0x00AF
    113e:	82 17       	cp	r24, r18
    1140:	93 07       	cpc	r25, r19
    1142:	a0 f4       	brcc	.+40     	; 0x116c <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    1144:	80 91 ae 00 	lds	r24, 0x00AE
    1148:	90 91 af 00 	lds	r25, 0x00AF
    114c:	80 55       	subi	r24, 0x50	; 80
    114e:	9f 4f       	sbci	r25, 0xFF	; 255
    1150:	9a 83       	std	Y+2, r25	; 0x02
    1152:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
    1154:	20 91 ae 00 	lds	r18, 0x00AE
    1158:	30 91 af 00 	lds	r19, 0x00AF
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	82 0f       	add	r24, r18
    1162:	93 1f       	adc	r25, r19
    1164:	90 93 af 00 	sts	0x00AF, r25
    1168:	80 93 ae 00 	sts	0x00AE, r24
		}	
	}
	xTaskResumeAll();
    116c:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	00 d0       	rcall	.+0      	; 0x1188 <vPortFree+0x6>
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	9a 83       	std	Y+2, r25	; 0x02
    118e:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    11a2:	10 92 af 00 	sts	0x00AF, r1
    11a6:	10 92 ae 00 	sts	0x00AE, r1
}
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    11b8:	20 91 ae 00 	lds	r18, 0x00AE
    11bc:	30 91 af 00 	lds	r19, 0x00AF
    11c0:	88 ee       	ldi	r24, 0xE8	; 232
    11c2:	93 e0       	ldi	r25, 0x03	; 3
    11c4:	82 1b       	sub	r24, r18
    11c6:	93 0b       	sbc	r25, r19
}
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <vListInitialise+0x6>
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	9a 81       	ldd	r25, Y+2	; 0x02
    11e0:	03 96       	adiw	r24, 0x03	; 3
    11e2:	e9 81       	ldd	r30, Y+1	; 0x01
    11e4:	fa 81       	ldd	r31, Y+2	; 0x02
    11e6:	92 83       	std	Z+2, r25	; 0x02
    11e8:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    11ea:	e9 81       	ldd	r30, Y+1	; 0x01
    11ec:	fa 81       	ldd	r31, Y+2	; 0x02
    11ee:	8f ef       	ldi	r24, 0xFF	; 255
    11f0:	9f ef       	ldi	r25, 0xFF	; 255
    11f2:	94 83       	std	Z+4, r25	; 0x04
    11f4:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	9a 81       	ldd	r25, Y+2	; 0x02
    11fa:	03 96       	adiw	r24, 0x03	; 3
    11fc:	e9 81       	ldd	r30, Y+1	; 0x01
    11fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1200:	96 83       	std	Z+6, r25	; 0x06
    1202:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	03 96       	adiw	r24, 0x03	; 3
    120a:	e9 81       	ldd	r30, Y+1	; 0x01
    120c:	fa 81       	ldd	r31, Y+2	; 0x02
    120e:	90 87       	std	Z+8, r25	; 0x08
    1210:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    1212:	e9 81       	ldd	r30, Y+1	; 0x01
    1214:	fa 81       	ldd	r31, Y+2	; 0x02
    1216:	10 82       	st	Z, r1
}
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	00 d0       	rcall	.+0      	; 0x1228 <vListInitialiseItem+0x6>
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	9a 83       	std	Y+2, r25	; 0x02
    122e:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1230:	e9 81       	ldd	r30, Y+1	; 0x01
    1232:	fa 81       	ldd	r31, Y+2	; 0x02
    1234:	11 86       	std	Z+9, r1	; 0x09
    1236:	10 86       	std	Z+8, r1	; 0x08
}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <vListInsertEnd+0x6>
    1248:	00 d0       	rcall	.+0      	; 0x124a <vListInsertEnd+0x8>
    124a:	00 d0       	rcall	.+0      	; 0x124c <vListInsertEnd+0xa>
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	9c 83       	std	Y+4, r25	; 0x04
    1252:	8b 83       	std	Y+3, r24	; 0x03
    1254:	7e 83       	std	Y+6, r23	; 0x06
    1256:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    1258:	eb 81       	ldd	r30, Y+3	; 0x03
    125a:	fc 81       	ldd	r31, Y+4	; 0x04
    125c:	81 81       	ldd	r24, Z+1	; 0x01
    125e:	92 81       	ldd	r25, Z+2	; 0x02
    1260:	9a 83       	std	Y+2, r25	; 0x02
    1262:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
    1264:	e9 81       	ldd	r30, Y+1	; 0x01
    1266:	fa 81       	ldd	r31, Y+2	; 0x02
    1268:	82 81       	ldd	r24, Z+2	; 0x02
    126a:	93 81       	ldd	r25, Z+3	; 0x03
    126c:	ed 81       	ldd	r30, Y+5	; 0x05
    126e:	fe 81       	ldd	r31, Y+6	; 0x06
    1270:	93 83       	std	Z+3, r25	; 0x03
    1272:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
    1274:	eb 81       	ldd	r30, Y+3	; 0x03
    1276:	fc 81       	ldd	r31, Y+4	; 0x04
    1278:	81 81       	ldd	r24, Z+1	; 0x01
    127a:	92 81       	ldd	r25, Z+2	; 0x02
    127c:	ed 81       	ldd	r30, Y+5	; 0x05
    127e:	fe 81       	ldd	r31, Y+6	; 0x06
    1280:	95 83       	std	Z+5, r25	; 0x05
    1282:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1284:	e9 81       	ldd	r30, Y+1	; 0x01
    1286:	fa 81       	ldd	r31, Y+2	; 0x02
    1288:	02 80       	ldd	r0, Z+2	; 0x02
    128a:	f3 81       	ldd	r31, Z+3	; 0x03
    128c:	e0 2d       	mov	r30, r0
    128e:	8d 81       	ldd	r24, Y+5	; 0x05
    1290:	9e 81       	ldd	r25, Y+6	; 0x06
    1292:	95 83       	std	Z+5, r25	; 0x05
    1294:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    1296:	8d 81       	ldd	r24, Y+5	; 0x05
    1298:	9e 81       	ldd	r25, Y+6	; 0x06
    129a:	e9 81       	ldd	r30, Y+1	; 0x01
    129c:	fa 81       	ldd	r31, Y+2	; 0x02
    129e:	93 83       	std	Z+3, r25	; 0x03
    12a0:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    12a2:	8d 81       	ldd	r24, Y+5	; 0x05
    12a4:	9e 81       	ldd	r25, Y+6	; 0x06
    12a6:	eb 81       	ldd	r30, Y+3	; 0x03
    12a8:	fc 81       	ldd	r31, Y+4	; 0x04
    12aa:	92 83       	std	Z+2, r25	; 0x02
    12ac:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    12ae:	ed 81       	ldd	r30, Y+5	; 0x05
    12b0:	fe 81       	ldd	r31, Y+6	; 0x06
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	91 87       	std	Z+9, r25	; 0x09
    12b8:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    12ba:	eb 81       	ldd	r30, Y+3	; 0x03
    12bc:	fc 81       	ldd	r31, Y+4	; 0x04
    12be:	80 81       	ld	r24, Z
    12c0:	8f 5f       	subi	r24, 0xFF	; 255
    12c2:	eb 81       	ldd	r30, Y+3	; 0x03
    12c4:	fc 81       	ldd	r31, Y+4	; 0x04
    12c6:	80 83       	st	Z, r24
}
    12c8:	26 96       	adiw	r28, 0x06	; 6
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	28 97       	sbiw	r28, 0x08	; 8
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	9e 83       	std	Y+6, r25	; 0x06
    12f0:	8d 83       	std	Y+5, r24	; 0x05
    12f2:	78 87       	std	Y+8, r23	; 0x08
    12f4:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    12f6:	ef 81       	ldd	r30, Y+7	; 0x07
    12f8:	f8 85       	ldd	r31, Y+8	; 0x08
    12fa:	80 81       	ld	r24, Z
    12fc:	91 81       	ldd	r25, Z+1	; 0x01
    12fe:	9a 83       	std	Y+2, r25	; 0x02
    1300:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	2f ef       	ldi	r18, 0xFF	; 255
    1308:	8f 3f       	cpi	r24, 0xFF	; 255
    130a:	92 07       	cpc	r25, r18
    130c:	39 f4       	brne	.+14     	; 0x131c <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    130e:	ed 81       	ldd	r30, Y+5	; 0x05
    1310:	fe 81       	ldd	r31, Y+6	; 0x06
    1312:	87 81       	ldd	r24, Z+7	; 0x07
    1314:	90 85       	ldd	r25, Z+8	; 0x08
    1316:	9c 83       	std	Y+4, r25	; 0x04
    1318:	8b 83       	std	Y+3, r24	; 0x03
    131a:	18 c0       	rjmp	.+48     	; 0x134c <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	03 96       	adiw	r24, 0x03	; 3
    1322:	9c 83       	std	Y+4, r25	; 0x04
    1324:	8b 83       	std	Y+3, r24	; 0x03
    1326:	06 c0       	rjmp	.+12     	; 0x1334 <vListInsert+0x5a>
    1328:	eb 81       	ldd	r30, Y+3	; 0x03
    132a:	fc 81       	ldd	r31, Y+4	; 0x04
    132c:	82 81       	ldd	r24, Z+2	; 0x02
    132e:	93 81       	ldd	r25, Z+3	; 0x03
    1330:	9c 83       	std	Y+4, r25	; 0x04
    1332:	8b 83       	std	Y+3, r24	; 0x03
    1334:	eb 81       	ldd	r30, Y+3	; 0x03
    1336:	fc 81       	ldd	r31, Y+4	; 0x04
    1338:	02 80       	ldd	r0, Z+2	; 0x02
    133a:	f3 81       	ldd	r31, Z+3	; 0x03
    133c:	e0 2d       	mov	r30, r0
    133e:	20 81       	ld	r18, Z
    1340:	31 81       	ldd	r19, Z+1	; 0x01
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	9a 81       	ldd	r25, Y+2	; 0x02
    1346:	82 17       	cp	r24, r18
    1348:	93 07       	cpc	r25, r19
    134a:	70 f7       	brcc	.-36     	; 0x1328 <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    134c:	eb 81       	ldd	r30, Y+3	; 0x03
    134e:	fc 81       	ldd	r31, Y+4	; 0x04
    1350:	82 81       	ldd	r24, Z+2	; 0x02
    1352:	93 81       	ldd	r25, Z+3	; 0x03
    1354:	ef 81       	ldd	r30, Y+7	; 0x07
    1356:	f8 85       	ldd	r31, Y+8	; 0x08
    1358:	93 83       	std	Z+3, r25	; 0x03
    135a:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    135c:	ef 81       	ldd	r30, Y+7	; 0x07
    135e:	f8 85       	ldd	r31, Y+8	; 0x08
    1360:	02 80       	ldd	r0, Z+2	; 0x02
    1362:	f3 81       	ldd	r31, Z+3	; 0x03
    1364:	e0 2d       	mov	r30, r0
    1366:	8f 81       	ldd	r24, Y+7	; 0x07
    1368:	98 85       	ldd	r25, Y+8	; 0x08
    136a:	95 83       	std	Z+5, r25	; 0x05
    136c:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    136e:	ef 81       	ldd	r30, Y+7	; 0x07
    1370:	f8 85       	ldd	r31, Y+8	; 0x08
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	95 83       	std	Z+5, r25	; 0x05
    1378:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    137a:	8f 81       	ldd	r24, Y+7	; 0x07
    137c:	98 85       	ldd	r25, Y+8	; 0x08
    137e:	eb 81       	ldd	r30, Y+3	; 0x03
    1380:	fc 81       	ldd	r31, Y+4	; 0x04
    1382:	93 83       	std	Z+3, r25	; 0x03
    1384:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1386:	ef 81       	ldd	r30, Y+7	; 0x07
    1388:	f8 85       	ldd	r31, Y+8	; 0x08
    138a:	8d 81       	ldd	r24, Y+5	; 0x05
    138c:	9e 81       	ldd	r25, Y+6	; 0x06
    138e:	91 87       	std	Z+9, r25	; 0x09
    1390:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1392:	ed 81       	ldd	r30, Y+5	; 0x05
    1394:	fe 81       	ldd	r31, Y+6	; 0x06
    1396:	80 81       	ld	r24, Z
    1398:	8f 5f       	subi	r24, 0xFF	; 255
    139a:	ed 81       	ldd	r30, Y+5	; 0x05
    139c:	fe 81       	ldd	r31, Y+6	; 0x06
    139e:	80 83       	st	Z, r24
}
    13a0:	28 96       	adiw	r28, 0x08	; 8
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <vListRemove+0x6>
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <vListRemove+0x8>
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	9c 83       	std	Y+4, r25	; 0x04
    13c0:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    13c2:	eb 81       	ldd	r30, Y+3	; 0x03
    13c4:	fc 81       	ldd	r31, Y+4	; 0x04
    13c6:	a2 81       	ldd	r26, Z+2	; 0x02
    13c8:	b3 81       	ldd	r27, Z+3	; 0x03
    13ca:	eb 81       	ldd	r30, Y+3	; 0x03
    13cc:	fc 81       	ldd	r31, Y+4	; 0x04
    13ce:	84 81       	ldd	r24, Z+4	; 0x04
    13d0:	95 81       	ldd	r25, Z+5	; 0x05
    13d2:	15 96       	adiw	r26, 0x05	; 5
    13d4:	9c 93       	st	X, r25
    13d6:	8e 93       	st	-X, r24
    13d8:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    13da:	eb 81       	ldd	r30, Y+3	; 0x03
    13dc:	fc 81       	ldd	r31, Y+4	; 0x04
    13de:	a4 81       	ldd	r26, Z+4	; 0x04
    13e0:	b5 81       	ldd	r27, Z+5	; 0x05
    13e2:	eb 81       	ldd	r30, Y+3	; 0x03
    13e4:	fc 81       	ldd	r31, Y+4	; 0x04
    13e6:	82 81       	ldd	r24, Z+2	; 0x02
    13e8:	93 81       	ldd	r25, Z+3	; 0x03
    13ea:	13 96       	adiw	r26, 0x03	; 3
    13ec:	9c 93       	st	X, r25
    13ee:	8e 93       	st	-X, r24
    13f0:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    13f2:	eb 81       	ldd	r30, Y+3	; 0x03
    13f4:	fc 81       	ldd	r31, Y+4	; 0x04
    13f6:	80 85       	ldd	r24, Z+8	; 0x08
    13f8:	91 85       	ldd	r25, Z+9	; 0x09
    13fa:	9a 83       	std	Y+2, r25	; 0x02
    13fc:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    13fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1400:	fa 81       	ldd	r31, Y+2	; 0x02
    1402:	21 81       	ldd	r18, Z+1	; 0x01
    1404:	32 81       	ldd	r19, Z+2	; 0x02
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	28 17       	cp	r18, r24
    140c:	39 07       	cpc	r19, r25
    140e:	41 f4       	brne	.+16     	; 0x1420 <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1410:	eb 81       	ldd	r30, Y+3	; 0x03
    1412:	fc 81       	ldd	r31, Y+4	; 0x04
    1414:	84 81       	ldd	r24, Z+4	; 0x04
    1416:	95 81       	ldd	r25, Z+5	; 0x05
    1418:	e9 81       	ldd	r30, Y+1	; 0x01
    141a:	fa 81       	ldd	r31, Y+2	; 0x02
    141c:	92 83       	std	Z+2, r25	; 0x02
    141e:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    1420:	eb 81       	ldd	r30, Y+3	; 0x03
    1422:	fc 81       	ldd	r31, Y+4	; 0x04
    1424:	11 86       	std	Z+9, r1	; 0x09
    1426:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1428:	e9 81       	ldd	r30, Y+1	; 0x01
    142a:	fa 81       	ldd	r31, Y+2	; 0x02
    142c:	80 81       	ld	r24, Z
    142e:	81 50       	subi	r24, 0x01	; 1
    1430:	e9 81       	ldd	r30, Y+1	; 0x01
    1432:	fa 81       	ldd	r31, Y+2	; 0x02
    1434:	80 83       	st	Z, r24
}
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	28 97       	sbiw	r28, 0x08	; 8
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
    1458:	9c 83       	std	Y+4, r25	; 0x04
    145a:	8b 83       	std	Y+3, r24	; 0x03
    145c:	7e 83       	std	Y+6, r23	; 0x06
    145e:	6d 83       	std	Y+5, r22	; 0x05
    1460:	58 87       	std	Y+8, r21	; 0x08
    1462:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    1464:	eb 81       	ldd	r30, Y+3	; 0x03
    1466:	fc 81       	ldd	r31, Y+4	; 0x04
    1468:	81 e1       	ldi	r24, 0x11	; 17
    146a:	80 83       	st	Z, r24
	pxTopOfStack--;
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	9c 83       	std	Y+4, r25	; 0x04
    1474:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    1476:	eb 81       	ldd	r30, Y+3	; 0x03
    1478:	fc 81       	ldd	r31, Y+4	; 0x04
    147a:	82 e2       	ldi	r24, 0x22	; 34
    147c:	80 83       	st	Z, r24
	pxTopOfStack--;
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	9c 81       	ldd	r25, Y+4	; 0x04
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	9c 83       	std	Y+4, r25	; 0x04
    1486:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    1488:	eb 81       	ldd	r30, Y+3	; 0x03
    148a:	fc 81       	ldd	r31, Y+4	; 0x04
    148c:	83 e3       	ldi	r24, 0x33	; 51
    148e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	9c 81       	ldd	r25, Y+4	; 0x04
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	9c 83       	std	Y+4, r25	; 0x04
    1498:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
    149a:	8d 81       	ldd	r24, Y+5	; 0x05
    149c:	9e 81       	ldd	r25, Y+6	; 0x06
    149e:	9a 83       	std	Y+2, r25	; 0x02
    14a0:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	eb 81       	ldd	r30, Y+3	; 0x03
    14a6:	fc 81       	ldd	r31, Y+4	; 0x04
    14a8:	80 83       	st	Z, r24
	pxTopOfStack--;
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	9c 81       	ldd	r25, Y+4	; 0x04
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	9c 83       	std	Y+4, r25	; 0x04
    14b2:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	89 2f       	mov	r24, r25
    14ba:	99 27       	eor	r25, r25
    14bc:	9a 83       	std	Y+2, r25	; 0x02
    14be:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	eb 81       	ldd	r30, Y+3	; 0x03
    14c4:	fc 81       	ldd	r31, Y+4	; 0x04
    14c6:	80 83       	st	Z, r24
	pxTopOfStack--;
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	9c 83       	std	Y+4, r25	; 0x04
    14d0:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    14d2:	eb 81       	ldd	r30, Y+3	; 0x03
    14d4:	fc 81       	ldd	r31, Y+4	; 0x04
    14d6:	10 82       	st	Z, r1
	pxTopOfStack--;
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	9c 81       	ldd	r25, Y+4	; 0x04
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	9c 83       	std	Y+4, r25	; 0x04
    14e0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    14e2:	eb 81       	ldd	r30, Y+3	; 0x03
    14e4:	fc 81       	ldd	r31, Y+4	; 0x04
    14e6:	80 e8       	ldi	r24, 0x80	; 128
    14e8:	80 83       	st	Z, r24
	pxTopOfStack--;
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	9c 83       	std	Y+4, r25	; 0x04
    14f2:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    14f4:	eb 81       	ldd	r30, Y+3	; 0x03
    14f6:	fc 81       	ldd	r31, Y+4	; 0x04
    14f8:	10 82       	st	Z, r1
	pxTopOfStack--;
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	9c 81       	ldd	r25, Y+4	; 0x04
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	9c 83       	std	Y+4, r25	; 0x04
    1502:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    1504:	eb 81       	ldd	r30, Y+3	; 0x03
    1506:	fc 81       	ldd	r31, Y+4	; 0x04
    1508:	82 e0       	ldi	r24, 0x02	; 2
    150a:	80 83       	st	Z, r24
	pxTopOfStack--;
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	9c 83       	std	Y+4, r25	; 0x04
    1514:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    1516:	eb 81       	ldd	r30, Y+3	; 0x03
    1518:	fc 81       	ldd	r31, Y+4	; 0x04
    151a:	83 e0       	ldi	r24, 0x03	; 3
    151c:	80 83       	st	Z, r24
	pxTopOfStack--;
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	9c 83       	std	Y+4, r25	; 0x04
    1526:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    1528:	eb 81       	ldd	r30, Y+3	; 0x03
    152a:	fc 81       	ldd	r31, Y+4	; 0x04
    152c:	84 e0       	ldi	r24, 0x04	; 4
    152e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	9c 81       	ldd	r25, Y+4	; 0x04
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	9c 83       	std	Y+4, r25	; 0x04
    1538:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    153a:	eb 81       	ldd	r30, Y+3	; 0x03
    153c:	fc 81       	ldd	r31, Y+4	; 0x04
    153e:	85 e0       	ldi	r24, 0x05	; 5
    1540:	80 83       	st	Z, r24
	pxTopOfStack--;
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	9c 81       	ldd	r25, Y+4	; 0x04
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	9c 83       	std	Y+4, r25	; 0x04
    154a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    154c:	eb 81       	ldd	r30, Y+3	; 0x03
    154e:	fc 81       	ldd	r31, Y+4	; 0x04
    1550:	86 e0       	ldi	r24, 0x06	; 6
    1552:	80 83       	st	Z, r24
	pxTopOfStack--;
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	9c 83       	std	Y+4, r25	; 0x04
    155c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    155e:	eb 81       	ldd	r30, Y+3	; 0x03
    1560:	fc 81       	ldd	r31, Y+4	; 0x04
    1562:	87 e0       	ldi	r24, 0x07	; 7
    1564:	80 83       	st	Z, r24
	pxTopOfStack--;
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	9c 81       	ldd	r25, Y+4	; 0x04
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	9c 83       	std	Y+4, r25	; 0x04
    156e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    1570:	eb 81       	ldd	r30, Y+3	; 0x03
    1572:	fc 81       	ldd	r31, Y+4	; 0x04
    1574:	88 e0       	ldi	r24, 0x08	; 8
    1576:	80 83       	st	Z, r24
	pxTopOfStack--;
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	9c 83       	std	Y+4, r25	; 0x04
    1580:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    1582:	eb 81       	ldd	r30, Y+3	; 0x03
    1584:	fc 81       	ldd	r31, Y+4	; 0x04
    1586:	89 e0       	ldi	r24, 0x09	; 9
    1588:	80 83       	st	Z, r24
	pxTopOfStack--;
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	9c 83       	std	Y+4, r25	; 0x04
    1592:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    1594:	eb 81       	ldd	r30, Y+3	; 0x03
    1596:	fc 81       	ldd	r31, Y+4	; 0x04
    1598:	80 e1       	ldi	r24, 0x10	; 16
    159a:	80 83       	st	Z, r24
	pxTopOfStack--;
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	9c 83       	std	Y+4, r25	; 0x04
    15a4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    15a6:	eb 81       	ldd	r30, Y+3	; 0x03
    15a8:	fc 81       	ldd	r31, Y+4	; 0x04
    15aa:	81 e1       	ldi	r24, 0x11	; 17
    15ac:	80 83       	st	Z, r24
	pxTopOfStack--;
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	9c 83       	std	Y+4, r25	; 0x04
    15b6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    15b8:	eb 81       	ldd	r30, Y+3	; 0x03
    15ba:	fc 81       	ldd	r31, Y+4	; 0x04
    15bc:	82 e1       	ldi	r24, 0x12	; 18
    15be:	80 83       	st	Z, r24
	pxTopOfStack--;
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	9c 83       	std	Y+4, r25	; 0x04
    15c8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    15ca:	eb 81       	ldd	r30, Y+3	; 0x03
    15cc:	fc 81       	ldd	r31, Y+4	; 0x04
    15ce:	83 e1       	ldi	r24, 0x13	; 19
    15d0:	80 83       	st	Z, r24
	pxTopOfStack--;
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	9c 83       	std	Y+4, r25	; 0x04
    15da:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    15dc:	eb 81       	ldd	r30, Y+3	; 0x03
    15de:	fc 81       	ldd	r31, Y+4	; 0x04
    15e0:	84 e1       	ldi	r24, 0x14	; 20
    15e2:	80 83       	st	Z, r24
	pxTopOfStack--;
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	9c 83       	std	Y+4, r25	; 0x04
    15ec:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    15ee:	eb 81       	ldd	r30, Y+3	; 0x03
    15f0:	fc 81       	ldd	r31, Y+4	; 0x04
    15f2:	85 e1       	ldi	r24, 0x15	; 21
    15f4:	80 83       	st	Z, r24
	pxTopOfStack--;
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	9c 83       	std	Y+4, r25	; 0x04
    15fe:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    1600:	eb 81       	ldd	r30, Y+3	; 0x03
    1602:	fc 81       	ldd	r31, Y+4	; 0x04
    1604:	86 e1       	ldi	r24, 0x16	; 22
    1606:	80 83       	st	Z, r24
	pxTopOfStack--;
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	9c 81       	ldd	r25, Y+4	; 0x04
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	9c 83       	std	Y+4, r25	; 0x04
    1610:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    1612:	eb 81       	ldd	r30, Y+3	; 0x03
    1614:	fc 81       	ldd	r31, Y+4	; 0x04
    1616:	87 e1       	ldi	r24, 0x17	; 23
    1618:	80 83       	st	Z, r24
	pxTopOfStack--;
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	9c 81       	ldd	r25, Y+4	; 0x04
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	9c 83       	std	Y+4, r25	; 0x04
    1622:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    1624:	eb 81       	ldd	r30, Y+3	; 0x03
    1626:	fc 81       	ldd	r31, Y+4	; 0x04
    1628:	88 e1       	ldi	r24, 0x18	; 24
    162a:	80 83       	st	Z, r24
	pxTopOfStack--;
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	9c 81       	ldd	r25, Y+4	; 0x04
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	9c 83       	std	Y+4, r25	; 0x04
    1634:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    1636:	eb 81       	ldd	r30, Y+3	; 0x03
    1638:	fc 81       	ldd	r31, Y+4	; 0x04
    163a:	89 e1       	ldi	r24, 0x19	; 25
    163c:	80 83       	st	Z, r24
	pxTopOfStack--;
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9c 81       	ldd	r25, Y+4	; 0x04
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	9c 83       	std	Y+4, r25	; 0x04
    1646:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    1648:	eb 81       	ldd	r30, Y+3	; 0x03
    164a:	fc 81       	ldd	r31, Y+4	; 0x04
    164c:	80 e2       	ldi	r24, 0x20	; 32
    164e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	9c 81       	ldd	r25, Y+4	; 0x04
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	9c 83       	std	Y+4, r25	; 0x04
    1658:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    165a:	eb 81       	ldd	r30, Y+3	; 0x03
    165c:	fc 81       	ldd	r31, Y+4	; 0x04
    165e:	81 e2       	ldi	r24, 0x21	; 33
    1660:	80 83       	st	Z, r24
	pxTopOfStack--;
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	9c 81       	ldd	r25, Y+4	; 0x04
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	9c 83       	std	Y+4, r25	; 0x04
    166a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    166c:	eb 81       	ldd	r30, Y+3	; 0x03
    166e:	fc 81       	ldd	r31, Y+4	; 0x04
    1670:	82 e2       	ldi	r24, 0x22	; 34
    1672:	80 83       	st	Z, r24
	pxTopOfStack--;
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	9c 83       	std	Y+4, r25	; 0x04
    167c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    167e:	eb 81       	ldd	r30, Y+3	; 0x03
    1680:	fc 81       	ldd	r31, Y+4	; 0x04
    1682:	83 e2       	ldi	r24, 0x23	; 35
    1684:	80 83       	st	Z, r24
	pxTopOfStack--;
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	9c 83       	std	Y+4, r25	; 0x04
    168e:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    1690:	8f 81       	ldd	r24, Y+7	; 0x07
    1692:	98 85       	ldd	r25, Y+8	; 0x08
    1694:	9a 83       	std	Y+2, r25	; 0x02
    1696:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	eb 81       	ldd	r30, Y+3	; 0x03
    169c:	fc 81       	ldd	r31, Y+4	; 0x04
    169e:	80 83       	st	Z, r24
	pxTopOfStack--;
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	9c 81       	ldd	r25, Y+4	; 0x04
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	9c 83       	std	Y+4, r25	; 0x04
    16a8:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	9a 81       	ldd	r25, Y+2	; 0x02
    16ae:	89 2f       	mov	r24, r25
    16b0:	99 27       	eor	r25, r25
    16b2:	9a 83       	std	Y+2, r25	; 0x02
    16b4:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	eb 81       	ldd	r30, Y+3	; 0x03
    16ba:	fc 81       	ldd	r31, Y+4	; 0x04
    16bc:	80 83       	st	Z, r24
	pxTopOfStack--;
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	9c 83       	std	Y+4, r25	; 0x04
    16c6:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    16c8:	eb 81       	ldd	r30, Y+3	; 0x03
    16ca:	fc 81       	ldd	r31, Y+4	; 0x04
    16cc:	86 e2       	ldi	r24, 0x26	; 38
    16ce:	80 83       	st	Z, r24
	pxTopOfStack--;
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	9c 81       	ldd	r25, Y+4	; 0x04
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	9c 83       	std	Y+4, r25	; 0x04
    16d8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    16da:	eb 81       	ldd	r30, Y+3	; 0x03
    16dc:	fc 81       	ldd	r31, Y+4	; 0x04
    16de:	87 e2       	ldi	r24, 0x27	; 39
    16e0:	80 83       	st	Z, r24
	pxTopOfStack--;
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	9c 83       	std	Y+4, r25	; 0x04
    16ea:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    16ec:	eb 81       	ldd	r30, Y+3	; 0x03
    16ee:	fc 81       	ldd	r31, Y+4	; 0x04
    16f0:	88 e2       	ldi	r24, 0x28	; 40
    16f2:	80 83       	st	Z, r24
	pxTopOfStack--;
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	9c 81       	ldd	r25, Y+4	; 0x04
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	9c 83       	std	Y+4, r25	; 0x04
    16fc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    16fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1700:	fc 81       	ldd	r31, Y+4	; 0x04
    1702:	89 e2       	ldi	r24, 0x29	; 41
    1704:	80 83       	st	Z, r24
	pxTopOfStack--;
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	9c 83       	std	Y+4, r25	; 0x04
    170e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    1710:	eb 81       	ldd	r30, Y+3	; 0x03
    1712:	fc 81       	ldd	r31, Y+4	; 0x04
    1714:	80 e3       	ldi	r24, 0x30	; 48
    1716:	80 83       	st	Z, r24
	pxTopOfStack--;
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	9c 81       	ldd	r25, Y+4	; 0x04
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	9c 83       	std	Y+4, r25	; 0x04
    1720:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    1722:	eb 81       	ldd	r30, Y+3	; 0x03
    1724:	fc 81       	ldd	r31, Y+4	; 0x04
    1726:	81 e3       	ldi	r24, 0x31	; 49
    1728:	80 83       	st	Z, r24
	pxTopOfStack--;
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	9c 81       	ldd	r25, Y+4	; 0x04
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	9c 83       	std	Y+4, r25	; 0x04
    1732:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1738:	28 96       	adiw	r28, 0x08	; 8
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    1752:	0e 94 95 0c 	call	0x192a	; 0x192a <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    1756:	a0 91 98 04 	lds	r26, 0x0498
    175a:	b0 91 99 04 	lds	r27, 0x0499
    175e:	cd 91       	ld	r28, X+
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	dd 91       	ld	r29, X+
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	ff 91       	pop	r31
    1768:	ef 91       	pop	r30
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	bf 91       	pop	r27
    1770:	af 91       	pop	r26
    1772:	9f 91       	pop	r25
    1774:	8f 91       	pop	r24
    1776:	7f 91       	pop	r23
    1778:	6f 91       	pop	r22
    177a:	5f 91       	pop	r21
    177c:	4f 91       	pop	r20
    177e:	3f 91       	pop	r19
    1780:	2f 91       	pop	r18
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	ff 90       	pop	r15
    1788:	ef 90       	pop	r14
    178a:	df 90       	pop	r13
    178c:	cf 90       	pop	r12
    178e:	bf 90       	pop	r11
    1790:	af 90       	pop	r10
    1792:	9f 90       	pop	r9
    1794:	8f 90       	pop	r8
    1796:	7f 90       	pop	r7
    1798:	6f 90       	pop	r6
    179a:	5f 90       	pop	r5
    179c:	4f 90       	pop	r4
    179e:	3f 90       	pop	r3
    17a0:	2f 90       	pop	r2
    17a2:	1f 90       	pop	r1
    17a4:	0f 90       	pop	r0
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    17aa:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
}
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    17c2:	0f 92       	push	r0
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	0f 92       	push	r0
    17ca:	1f 92       	push	r1
    17cc:	11 24       	eor	r1, r1
    17ce:	2f 92       	push	r2
    17d0:	3f 92       	push	r3
    17d2:	4f 92       	push	r4
    17d4:	5f 92       	push	r5
    17d6:	6f 92       	push	r6
    17d8:	7f 92       	push	r7
    17da:	8f 92       	push	r8
    17dc:	9f 92       	push	r9
    17de:	af 92       	push	r10
    17e0:	bf 92       	push	r11
    17e2:	cf 92       	push	r12
    17e4:	df 92       	push	r13
    17e6:	ef 92       	push	r14
    17e8:	ff 92       	push	r15
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	2f 93       	push	r18
    17f0:	3f 93       	push	r19
    17f2:	4f 93       	push	r20
    17f4:	5f 93       	push	r21
    17f6:	6f 93       	push	r22
    17f8:	7f 93       	push	r23
    17fa:	8f 93       	push	r24
    17fc:	9f 93       	push	r25
    17fe:	af 93       	push	r26
    1800:	bf 93       	push	r27
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	ef 93       	push	r30
    1808:	ff 93       	push	r31
    180a:	a0 91 98 04 	lds	r26, 0x0498
    180e:	b0 91 99 04 	lds	r27, 0x0499
    1812:	0d b6       	in	r0, 0x3d	; 61
    1814:	0d 92       	st	X+, r0
    1816:	0e b6       	in	r0, 0x3e	; 62
    1818:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    181a:	0e 94 54 18 	call	0x30a8	; 0x30a8 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    181e:	a0 91 98 04 	lds	r26, 0x0498
    1822:	b0 91 99 04 	lds	r27, 0x0499
    1826:	cd 91       	ld	r28, X+
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	dd 91       	ld	r29, X+
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	ff 91       	pop	r31
    1830:	ef 91       	pop	r30
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	bf 91       	pop	r27
    1838:	af 91       	pop	r26
    183a:	9f 91       	pop	r25
    183c:	8f 91       	pop	r24
    183e:	7f 91       	pop	r23
    1840:	6f 91       	pop	r22
    1842:	5f 91       	pop	r21
    1844:	4f 91       	pop	r20
    1846:	3f 91       	pop	r19
    1848:	2f 91       	pop	r18
    184a:	1f 91       	pop	r17
    184c:	0f 91       	pop	r16
    184e:	ff 90       	pop	r15
    1850:	ef 90       	pop	r14
    1852:	df 90       	pop	r13
    1854:	cf 90       	pop	r12
    1856:	bf 90       	pop	r11
    1858:	af 90       	pop	r10
    185a:	9f 90       	pop	r9
    185c:	8f 90       	pop	r8
    185e:	7f 90       	pop	r7
    1860:	6f 90       	pop	r6
    1862:	5f 90       	pop	r5
    1864:	4f 90       	pop	r4
    1866:	3f 90       	pop	r3
    1868:	2f 90       	pop	r2
    186a:	1f 90       	pop	r1
    186c:	0f 90       	pop	r0
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1872:	08 95       	ret

00001874 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1874:	0f 92       	push	r0
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	0f 92       	push	r0
    187c:	1f 92       	push	r1
    187e:	11 24       	eor	r1, r1
    1880:	2f 92       	push	r2
    1882:	3f 92       	push	r3
    1884:	4f 92       	push	r4
    1886:	5f 92       	push	r5
    1888:	6f 92       	push	r6
    188a:	7f 92       	push	r7
    188c:	8f 92       	push	r8
    188e:	9f 92       	push	r9
    1890:	af 92       	push	r10
    1892:	bf 92       	push	r11
    1894:	cf 92       	push	r12
    1896:	df 92       	push	r13
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	2f 93       	push	r18
    18a2:	3f 93       	push	r19
    18a4:	4f 93       	push	r20
    18a6:	5f 93       	push	r21
    18a8:	6f 93       	push	r22
    18aa:	7f 93       	push	r23
    18ac:	8f 93       	push	r24
    18ae:	9f 93       	push	r25
    18b0:	af 93       	push	r26
    18b2:	bf 93       	push	r27
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
    18b8:	ef 93       	push	r30
    18ba:	ff 93       	push	r31
    18bc:	a0 91 98 04 	lds	r26, 0x0498
    18c0:	b0 91 99 04 	lds	r27, 0x0499
    18c4:	0d b6       	in	r0, 0x3d	; 61
    18c6:	0d 92       	st	X+, r0
    18c8:	0e b6       	in	r0, 0x3e	; 62
    18ca:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    18cc:	0e 94 7f 17 	call	0x2efe	; 0x2efe <vTaskIncrementTick>
	vTaskSwitchContext();
    18d0:	0e 94 54 18 	call	0x30a8	; 0x30a8 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    18d4:	a0 91 98 04 	lds	r26, 0x0498
    18d8:	b0 91 99 04 	lds	r27, 0x0499
    18dc:	cd 91       	ld	r28, X+
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	dd 91       	ld	r29, X+
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	ff 91       	pop	r31
    18e6:	ef 91       	pop	r30
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	bf 91       	pop	r27
    18ee:	af 91       	pop	r26
    18f0:	9f 91       	pop	r25
    18f2:	8f 91       	pop	r24
    18f4:	7f 91       	pop	r23
    18f6:	6f 91       	pop	r22
    18f8:	5f 91       	pop	r21
    18fa:	4f 91       	pop	r20
    18fc:	3f 91       	pop	r19
    18fe:	2f 91       	pop	r18
    1900:	1f 91       	pop	r17
    1902:	0f 91       	pop	r16
    1904:	ff 90       	pop	r15
    1906:	ef 90       	pop	r14
    1908:	df 90       	pop	r13
    190a:	cf 90       	pop	r12
    190c:	bf 90       	pop	r11
    190e:	af 90       	pop	r10
    1910:	9f 90       	pop	r9
    1912:	8f 90       	pop	r8
    1914:	7f 90       	pop	r7
    1916:	6f 90       	pop	r6
    1918:	5f 90       	pop	r5
    191a:	4f 90       	pop	r4
    191c:	3f 90       	pop	r3
    191e:	2f 90       	pop	r2
    1920:	1f 90       	pop	r1
    1922:	0f 90       	pop	r0
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1928:	08 95       	ret

0000192a <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	00 d0       	rcall	.+0      	; 0x1930 <prvSetupTimerInterrupt+0x6>
    1930:	00 d0       	rcall	.+0      	; 0x1932 <prvSetupTimerInterrupt+0x8>
    1932:	00 d0       	rcall	.+0      	; 0x1934 <prvSetupTimerInterrupt+0xa>
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1938:	80 e4       	ldi	r24, 0x40	; 64
    193a:	9f e1       	ldi	r25, 0x1F	; 31
    193c:	a0 e0       	ldi	r26, 0x00	; 0
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	8b 83       	std	Y+3, r24	; 0x03
    1942:	9c 83       	std	Y+4, r25	; 0x04
    1944:	ad 83       	std	Y+5, r26	; 0x05
    1946:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	9c 81       	ldd	r25, Y+4	; 0x04
    194c:	ad 81       	ldd	r26, Y+5	; 0x05
    194e:	be 81       	ldd	r27, Y+6	; 0x06
    1950:	68 94       	set
    1952:	15 f8       	bld	r1, 5
    1954:	b6 95       	lsr	r27
    1956:	a7 95       	ror	r26
    1958:	97 95       	ror	r25
    195a:	87 95       	ror	r24
    195c:	16 94       	lsr	r1
    195e:	d1 f7       	brne	.-12     	; 0x1954 <prvSetupTimerInterrupt+0x2a>
    1960:	8b 83       	std	Y+3, r24	; 0x03
    1962:	9c 83       	std	Y+4, r25	; 0x04
    1964:	ad 83       	std	Y+5, r26	; 0x05
    1966:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	9c 81       	ldd	r25, Y+4	; 0x04
    196c:	ad 81       	ldd	r26, Y+5	; 0x05
    196e:	be 81       	ldd	r27, Y+6	; 0x06
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	a1 09       	sbc	r26, r1
    1974:	b1 09       	sbc	r27, r1
    1976:	8b 83       	std	Y+3, r24	; 0x03
    1978:	9c 83       	std	Y+4, r25	; 0x04
    197a:	ad 83       	std	Y+5, r26	; 0x05
    197c:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	9c 81       	ldd	r25, Y+4	; 0x04
    1986:	ad 81       	ldd	r26, Y+5	; 0x05
    1988:	be 81       	ldd	r27, Y+6	; 0x06
    198a:	89 2f       	mov	r24, r25
    198c:	9a 2f       	mov	r25, r26
    198e:	ab 2f       	mov	r26, r27
    1990:	bb 27       	eor	r27, r27
    1992:	8b 83       	std	Y+3, r24	; 0x03
    1994:	9c 83       	std	Y+4, r25	; 0x04
    1996:	ad 83       	std	Y+5, r26	; 0x05
    1998:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    199e:	eb e4       	ldi	r30, 0x4B	; 75
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    19a6:	ea e4       	ldi	r30, 0x4A	; 74
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    19ae:	8b e0       	ldi	r24, 0x0B	; 11
    19b0:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    19b2:	ee e4       	ldi	r30, 0x4E	; 78
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    19ba:	e9 e5       	ldi	r30, 0x59	; 89
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	80 61       	ori	r24, 0x10	; 16
    19c6:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    19c8:	e9 e5       	ldi	r30, 0x59	; 89
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	80 83       	st	Z, r24
}
    19d0:	26 96       	adiw	r28, 0x06	; 6
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    19e2:	0e 94 3a 0c 	call	0x1874	; 0x1874 <vPortYieldFromTick>
		asm volatile ( "reti" );
    19e6:	18 95       	reti

000019e8 <main>:
#include "task.h"
void task1(void *pv);
void task2(void *pv);

int main(void)
{
    19e8:	af 92       	push	r10
    19ea:	bf 92       	push	r11
    19ec:	cf 92       	push	r12
    19ee:	df 92       	push	r13
    19f0:	ef 92       	push	r14
    19f2:	ff 92       	push	r15
    19f4:	0f 93       	push	r16
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	00 d0       	rcall	.+0      	; 0x19fc <main+0x14>
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
	char x = 6;
    1a00:	86 e0       	ldi	r24, 0x06	; 6
    1a02:	8a 83       	std	Y+2, r24	; 0x02
	char y = 7;
    1a04:	87 e0       	ldi	r24, 0x07	; 7
    1a06:	89 83       	std	Y+1, r24	; 0x01
	/*create the tasks */
	xTaskCreate(task2, "B", 100, 7, 1, NULL);
    1a08:	20 e6       	ldi	r18, 0x60	; 96
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	82 ed       	ldi	r24, 0xD2	; 210
    1a0e:	9d e0       	ldi	r25, 0x0D	; 13
    1a10:	b9 01       	movw	r22, r18
    1a12:	44 e6       	ldi	r20, 0x64	; 100
    1a14:	50 e0       	ldi	r21, 0x00	; 0
    1a16:	27 e0       	ldi	r18, 0x07	; 7
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	01 e0       	ldi	r16, 0x01	; 1
    1a1c:	ee 24       	eor	r14, r14
    1a1e:	ff 24       	eor	r15, r15
    1a20:	cc 24       	eor	r12, r12
    1a22:	dd 24       	eor	r13, r13
    1a24:	aa 24       	eor	r10, r10
    1a26:	bb 24       	eor	r11, r11
    1a28:	0e 94 19 13 	call	0x2632	; 0x2632 <xTaskGenericCreate>
	xTaskCreate(task1, "A", 100, 6, 1,NULL);
    1a2c:	22 e6       	ldi	r18, 0x62	; 98
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	8b e2       	ldi	r24, 0x2B	; 43
    1a32:	9d e0       	ldi	r25, 0x0D	; 13
    1a34:	b9 01       	movw	r22, r18
    1a36:	44 e6       	ldi	r20, 0x64	; 100
    1a38:	50 e0       	ldi	r21, 0x00	; 0
    1a3a:	26 e0       	ldi	r18, 0x06	; 6
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	01 e0       	ldi	r16, 0x01	; 1
    1a40:	ee 24       	eor	r14, r14
    1a42:	ff 24       	eor	r15, r15
    1a44:	cc 24       	eor	r12, r12
    1a46:	dd 24       	eor	r13, r13
    1a48:	aa 24       	eor	r10, r10
    1a4a:	bb 24       	eor	r11, r11
    1a4c:	0e 94 19 13 	call	0x2632	; 0x2632 <xTaskGenericCreate>
	/*start os*/
	vTaskStartScheduler();
    1a50:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <vTaskStartScheduler>
    1a54:	ff cf       	rjmp	.-2      	; 0x1a54 <main+0x6c>

00001a56 <task1>:
		
	}
}

void task1(void *pv)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	60 97       	sbiw	r28, 0x10	; 16
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	98 8b       	std	Y+16, r25	; 0x10
    1a6c:	8f 87       	std	Y+15, r24	; 0x0f
	/*some initializations*/
	DDRD|=(1<<*((char*)pv));
    1a6e:	a1 e3       	ldi	r26, 0x31	; 49
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e1 e3       	ldi	r30, 0x31	; 49
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	48 2f       	mov	r20, r24
    1a7a:	ef 85       	ldd	r30, Y+15	; 0x0f
    1a7c:	f8 89       	ldd	r31, Y+16	; 0x10
    1a7e:	80 81       	ld	r24, Z
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <task1+0x38>
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	2a 95       	dec	r18
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <task1+0x34>
    1a92:	84 2b       	or	r24, r20
    1a94:	8c 93       	st	X, r24
	while(1)
	{
		PORTD ^= (1<<*((char*)pv));
    1a96:	a2 e3       	ldi	r26, 0x32	; 50
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	e2 e3       	ldi	r30, 0x32	; 50
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	48 2f       	mov	r20, r24
    1aa2:	ef 85       	ldd	r30, Y+15	; 0x0f
    1aa4:	f8 89       	ldd	r31, Y+16	; 0x10
    1aa6:	80 81       	ld	r24, Z
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <task1+0x60>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	2a 95       	dec	r18
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <task1+0x5c>
    1aba:	84 27       	eor	r24, r20
    1abc:	8c 93       	st	X, r24
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	aa ef       	ldi	r26, 0xFA	; 250
    1ac4:	b3 e4       	ldi	r27, 0x43	; 67
    1ac6:	8b 87       	std	Y+11, r24	; 0x0b
    1ac8:	9c 87       	std	Y+12, r25	; 0x0c
    1aca:	ad 87       	std	Y+13, r26	; 0x0d
    1acc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ace:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	4a ef       	ldi	r20, 0xFA	; 250
    1adc:	54 e4       	ldi	r21, 0x44	; 68
    1ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	8f 83       	std	Y+7, r24	; 0x07
    1ae8:	98 87       	std	Y+8, r25	; 0x08
    1aea:	a9 87       	std	Y+9, r26	; 0x09
    1aec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aee:	6f 81       	ldd	r22, Y+7	; 0x07
    1af0:	78 85       	ldd	r23, Y+8	; 0x08
    1af2:	89 85       	ldd	r24, Y+9	; 0x09
    1af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	40 e8       	ldi	r20, 0x80	; 128
    1afc:	5f e3       	ldi	r21, 0x3F	; 63
    1afe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b02:	88 23       	and	r24, r24
    1b04:	2c f4       	brge	.+10     	; 0x1b10 <task1+0xba>
		__ticks = 1;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	9e 83       	std	Y+6, r25	; 0x06
    1b0c:	8d 83       	std	Y+5, r24	; 0x05
    1b0e:	3f c0       	rjmp	.+126    	; 0x1b8e <task1+0x138>
	else if (__tmp > 65535)
    1b10:	6f 81       	ldd	r22, Y+7	; 0x07
    1b12:	78 85       	ldd	r23, Y+8	; 0x08
    1b14:	89 85       	ldd	r24, Y+9	; 0x09
    1b16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	3f ef       	ldi	r19, 0xFF	; 255
    1b1c:	4f e7       	ldi	r20, 0x7F	; 127
    1b1e:	57 e4       	ldi	r21, 0x47	; 71
    1b20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b24:	18 16       	cp	r1, r24
    1b26:	4c f5       	brge	.+82     	; 0x1b7a <task1+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e2       	ldi	r20, 0x20	; 32
    1b36:	51 e4       	ldi	r21, 0x41	; 65
    1b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	bc 01       	movw	r22, r24
    1b42:	cd 01       	movw	r24, r26
    1b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	9e 83       	std	Y+6, r25	; 0x06
    1b4e:	8d 83       	std	Y+5, r24	; 0x05
    1b50:	0f c0       	rjmp	.+30     	; 0x1b70 <task1+0x11a>
    1b52:	88 ec       	ldi	r24, 0xC8	; 200
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	9c 83       	std	Y+4, r25	; 0x04
    1b58:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	f1 f7       	brne	.-4      	; 0x1b5e <task1+0x108>
    1b62:	9c 83       	std	Y+4, r25	; 0x04
    1b64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	9e 83       	std	Y+6, r25	; 0x06
    1b6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b70:	8d 81       	ldd	r24, Y+5	; 0x05
    1b72:	9e 81       	ldd	r25, Y+6	; 0x06
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	69 f7       	brne	.-38     	; 0x1b52 <task1+0xfc>
    1b78:	8e cf       	rjmp	.-228    	; 0x1a96 <task1+0x40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7c:	78 85       	ldd	r23, Y+8	; 0x08
    1b7e:	89 85       	ldd	r24, Y+9	; 0x09
    1b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	9e 83       	std	Y+6, r25	; 0x06
    1b8c:	8d 83       	std	Y+5, r24	; 0x05
    1b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b90:	9e 81       	ldd	r25, Y+6	; 0x06
    1b92:	9a 83       	std	Y+2, r25	; 0x02
    1b94:	89 83       	std	Y+1, r24	; 0x01
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	f1 f7       	brne	.-4      	; 0x1b9a <task1+0x144>
    1b9e:	9a 83       	std	Y+2, r25	; 0x02
    1ba0:	89 83       	std	Y+1, r24	; 0x01
    1ba2:	79 cf       	rjmp	.-270    	; 0x1a96 <task1+0x40>

00001ba4 <task2>:
		_delay_ms(500);
	}
}

void task2(void *pv)
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	60 97       	sbiw	r28, 0x10	; 16
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	de bf       	out	0x3e, r29	; 62
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	cd bf       	out	0x3d, r28	; 61
    1bb8:	98 8b       	std	Y+16, r25	; 0x10
    1bba:	8f 87       	std	Y+15, r24	; 0x0f
	//vTaskDelay(4000);
	/*some initializations*/
	DDRD|=(1<<*((char*)pv));
    1bbc:	a1 e3       	ldi	r26, 0x31	; 49
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e1 e3       	ldi	r30, 0x31	; 49
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	48 2f       	mov	r20, r24
    1bc8:	ef 85       	ldd	r30, Y+15	; 0x0f
    1bca:	f8 89       	ldd	r31, Y+16	; 0x10
    1bcc:	80 81       	ld	r24, Z
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <task2+0x38>
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	2a 95       	dec	r18
    1bde:	e2 f7       	brpl	.-8      	; 0x1bd8 <task2+0x34>
    1be0:	84 2b       	or	r24, r20
    1be2:	8c 93       	st	X, r24
	while(1)
	{
		PORTD^=(1<<*((char*)pv));
    1be4:	a2 e3       	ldi	r26, 0x32	; 50
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e2 e3       	ldi	r30, 0x32	; 50
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	48 2f       	mov	r20, r24
    1bf0:	ef 85       	ldd	r30, Y+15	; 0x0f
    1bf2:	f8 89       	ldd	r31, Y+16	; 0x10
    1bf4:	80 81       	ld	r24, Z
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <task2+0x60>
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	2a 95       	dec	r18
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <task2+0x5c>
    1c08:	84 27       	eor	r24, r20
    1c0a:	8c 93       	st	X, r24
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	aa ef       	ldi	r26, 0xFA	; 250
    1c12:	b3 e4       	ldi	r27, 0x43	; 67
    1c14:	8b 87       	std	Y+11, r24	; 0x0b
    1c16:	9c 87       	std	Y+12, r25	; 0x0c
    1c18:	ad 87       	std	Y+13, r26	; 0x0d
    1c1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	4a ef       	ldi	r20, 0xFA	; 250
    1c2a:	54 e4       	ldi	r21, 0x44	; 68
    1c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	8f 83       	std	Y+7, r24	; 0x07
    1c36:	98 87       	std	Y+8, r25	; 0x08
    1c38:	a9 87       	std	Y+9, r26	; 0x09
    1c3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3e:	78 85       	ldd	r23, Y+8	; 0x08
    1c40:	89 85       	ldd	r24, Y+9	; 0x09
    1c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e8       	ldi	r20, 0x80	; 128
    1c4a:	5f e3       	ldi	r21, 0x3F	; 63
    1c4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c50:	88 23       	and	r24, r24
    1c52:	2c f4       	brge	.+10     	; 0x1c5e <task2+0xba>
		__ticks = 1;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	9e 83       	std	Y+6, r25	; 0x06
    1c5a:	8d 83       	std	Y+5, r24	; 0x05
    1c5c:	3f c0       	rjmp	.+126    	; 0x1cdc <task2+0x138>
	else if (__tmp > 65535)
    1c5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c60:	78 85       	ldd	r23, Y+8	; 0x08
    1c62:	89 85       	ldd	r24, Y+9	; 0x09
    1c64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	3f ef       	ldi	r19, 0xFF	; 255
    1c6a:	4f e7       	ldi	r20, 0x7F	; 127
    1c6c:	57 e4       	ldi	r21, 0x47	; 71
    1c6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c72:	18 16       	cp	r1, r24
    1c74:	4c f5       	brge	.+82     	; 0x1cc8 <task2+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e2       	ldi	r20, 0x20	; 32
    1c84:	51 e4       	ldi	r21, 0x41	; 65
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	9e 83       	std	Y+6, r25	; 0x06
    1c9c:	8d 83       	std	Y+5, r24	; 0x05
    1c9e:	0f c0       	rjmp	.+30     	; 0x1cbe <task2+0x11a>
    1ca0:	88 ec       	ldi	r24, 0xC8	; 200
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	9c 83       	std	Y+4, r25	; 0x04
    1ca6:	8b 83       	std	Y+3, r24	; 0x03
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <task2+0x108>
    1cb0:	9c 83       	std	Y+4, r25	; 0x04
    1cb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	9e 83       	std	Y+6, r25	; 0x06
    1cbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	69 f7       	brne	.-38     	; 0x1ca0 <task2+0xfc>
    1cc6:	8e cf       	rjmp	.-228    	; 0x1be4 <task2+0x40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cca:	78 85       	ldd	r23, Y+8	; 0x08
    1ccc:	89 85       	ldd	r24, Y+9	; 0x09
    1cce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	9e 83       	std	Y+6, r25	; 0x06
    1cda:	8d 83       	std	Y+5, r24	; 0x05
    1cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cde:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce0:	9a 83       	std	Y+2, r25	; 0x02
    1ce2:	89 83       	std	Y+1, r24	; 0x01
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <task2+0x144>
    1cec:	9a 83       	std	Y+2, r25	; 0x02
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	79 cf       	rjmp	.-270    	; 0x1be4 <task2+0x40>

00001cf2 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	28 97       	sbiw	r28, 0x08	; 8
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	8f 83       	std	Y+7, r24	; 0x07
    1d08:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    1d0a:	1a 82       	std	Y+2, r1	; 0x02
    1d0c:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    1d0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d10:	88 23       	and	r24, r24
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <xQueueCreate+0x24>
    1d14:	8c c0       	rjmp	.+280    	; 0x1e2e <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    1d16:	8f e1       	ldi	r24, 0x1F	; 31
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <pvPortMalloc>
    1d1e:	9e 83       	std	Y+6, r25	; 0x06
    1d20:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    1d22:	8d 81       	ldd	r24, Y+5	; 0x05
    1d24:	9e 81       	ldd	r25, Y+6	; 0x06
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	09 f4       	brne	.+2      	; 0x1d2c <xQueueCreate+0x3a>
    1d2a:	81 c0       	rjmp	.+258    	; 0x1e2e <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    1d2c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d2e:	28 2f       	mov	r18, r24
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	88 85       	ldd	r24, Y+8	; 0x08
    1d34:	88 2f       	mov	r24, r24
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	ac 01       	movw	r20, r24
    1d3a:	24 9f       	mul	r18, r20
    1d3c:	c0 01       	movw	r24, r0
    1d3e:	25 9f       	mul	r18, r21
    1d40:	90 0d       	add	r25, r0
    1d42:	34 9f       	mul	r19, r20
    1d44:	90 0d       	add	r25, r0
    1d46:	11 24       	eor	r1, r1
    1d48:	01 96       	adiw	r24, 0x01	; 1
    1d4a:	9c 83       	std	Y+4, r25	; 0x04
    1d4c:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	9c 81       	ldd	r25, Y+4	; 0x04
    1d52:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <pvPortMalloc>
    1d56:	ed 81       	ldd	r30, Y+5	; 0x05
    1d58:	fe 81       	ldd	r31, Y+6	; 0x06
    1d5a:	91 83       	std	Z+1, r25	; 0x01
    1d5c:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    1d5e:	ed 81       	ldd	r30, Y+5	; 0x05
    1d60:	fe 81       	ldd	r31, Y+6	; 0x06
    1d62:	80 81       	ld	r24, Z
    1d64:	91 81       	ldd	r25, Z+1	; 0x01
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <xQueueCreate+0x7a>
    1d6a:	5d c0       	rjmp	.+186    	; 0x1e26 <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    1d6c:	ed 81       	ldd	r30, Y+5	; 0x05
    1d6e:	fe 81       	ldd	r31, Y+6	; 0x06
    1d70:	40 81       	ld	r20, Z
    1d72:	51 81       	ldd	r21, Z+1	; 0x01
    1d74:	8f 81       	ldd	r24, Y+7	; 0x07
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	88 85       	ldd	r24, Y+8	; 0x08
    1d7c:	88 2f       	mov	r24, r24
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	bc 01       	movw	r22, r24
    1d82:	26 9f       	mul	r18, r22
    1d84:	c0 01       	movw	r24, r0
    1d86:	27 9f       	mul	r18, r23
    1d88:	90 0d       	add	r25, r0
    1d8a:	36 9f       	mul	r19, r22
    1d8c:	90 0d       	add	r25, r0
    1d8e:	11 24       	eor	r1, r1
    1d90:	84 0f       	add	r24, r20
    1d92:	95 1f       	adc	r25, r21
    1d94:	ed 81       	ldd	r30, Y+5	; 0x05
    1d96:	fe 81       	ldd	r31, Y+6	; 0x06
    1d98:	93 83       	std	Z+3, r25	; 0x03
    1d9a:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    1d9c:	ed 81       	ldd	r30, Y+5	; 0x05
    1d9e:	fe 81       	ldd	r31, Y+6	; 0x06
    1da0:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    1da2:	ed 81       	ldd	r30, Y+5	; 0x05
    1da4:	fe 81       	ldd	r31, Y+6	; 0x06
    1da6:	80 81       	ld	r24, Z
    1da8:	91 81       	ldd	r25, Z+1	; 0x01
    1daa:	ed 81       	ldd	r30, Y+5	; 0x05
    1dac:	fe 81       	ldd	r31, Y+6	; 0x06
    1dae:	95 83       	std	Z+5, r25	; 0x05
    1db0:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    1db2:	ed 81       	ldd	r30, Y+5	; 0x05
    1db4:	fe 81       	ldd	r31, Y+6	; 0x06
    1db6:	40 81       	ld	r20, Z
    1db8:	51 81       	ldd	r21, Z+1	; 0x01
    1dba:	8f 81       	ldd	r24, Y+7	; 0x07
    1dbc:	88 2f       	mov	r24, r24
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	9c 01       	movw	r18, r24
    1dc2:	21 50       	subi	r18, 0x01	; 1
    1dc4:	30 40       	sbci	r19, 0x00	; 0
    1dc6:	88 85       	ldd	r24, Y+8	; 0x08
    1dc8:	88 2f       	mov	r24, r24
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	bc 01       	movw	r22, r24
    1dce:	26 9f       	mul	r18, r22
    1dd0:	c0 01       	movw	r24, r0
    1dd2:	27 9f       	mul	r18, r23
    1dd4:	90 0d       	add	r25, r0
    1dd6:	36 9f       	mul	r19, r22
    1dd8:	90 0d       	add	r25, r0
    1dda:	11 24       	eor	r1, r1
    1ddc:	84 0f       	add	r24, r20
    1dde:	95 1f       	adc	r25, r21
    1de0:	ed 81       	ldd	r30, Y+5	; 0x05
    1de2:	fe 81       	ldd	r31, Y+6	; 0x06
    1de4:	97 83       	std	Z+7, r25	; 0x07
    1de6:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    1de8:	ed 81       	ldd	r30, Y+5	; 0x05
    1dea:	fe 81       	ldd	r31, Y+6	; 0x06
    1dec:	8f 81       	ldd	r24, Y+7	; 0x07
    1dee:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    1df0:	ed 81       	ldd	r30, Y+5	; 0x05
    1df2:	fe 81       	ldd	r31, Y+6	; 0x06
    1df4:	88 85       	ldd	r24, Y+8	; 0x08
    1df6:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    1df8:	ed 81       	ldd	r30, Y+5	; 0x05
    1dfa:	fe 81       	ldd	r31, Y+6	; 0x06
    1dfc:	8f ef       	ldi	r24, 0xFF	; 255
    1dfe:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    1e00:	ed 81       	ldd	r30, Y+5	; 0x05
    1e02:	fe 81       	ldd	r31, Y+6	; 0x06
    1e04:	8f ef       	ldi	r24, 0xFF	; 255
    1e06:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    1e08:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0c:	08 96       	adiw	r24, 0x08	; 8
    1e0e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1e12:	8d 81       	ldd	r24, Y+5	; 0x05
    1e14:	9e 81       	ldd	r25, Y+6	; 0x06
    1e16:	41 96       	adiw	r24, 0x11	; 17
    1e18:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    1e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e20:	9a 83       	std	Y+2, r25	; 0x02
    1e22:	89 83       	std	Y+1, r24	; 0x01
    1e24:	04 c0       	rjmp	.+8      	; 0x1e2e <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    1e26:	8d 81       	ldd	r24, Y+5	; 0x05
    1e28:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2a:	0e 94 c1 08 	call	0x1182	; 0x1182 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1e32:	28 96       	adiw	r28, 0x08	; 8
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if configUSE_COUNTING_SEMAPHORES == 1

	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_TYPE uxInitialCount )
	{
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <xQueueCreateCountingSemaphore+0x6>
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <xQueueCreateCountingSemaphore+0x8>
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	8b 83       	std	Y+3, r24	; 0x03
    1e52:	6c 83       	std	Y+4, r22	; 0x04
	xQueueHandle pxHandle;

		pxHandle = xQueueCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGTH );
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	60 e0       	ldi	r22, 0x00	; 0
    1e58:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <xQueueCreate>
    1e5c:	9a 83       	std	Y+2, r25	; 0x02
    1e5e:	89 83       	std	Y+1, r24	; 0x01

		if( pxHandle != NULL )
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	9a 81       	ldd	r25, Y+2	; 0x02
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	21 f0       	breq	.+8      	; 0x1e70 <xQueueCreateCountingSemaphore+0x2c>
		{
			pxHandle->uxMessagesWaiting = uxInitialCount;
    1e68:	e9 81       	ldd	r30, Y+1	; 0x01
    1e6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6e:	82 8f       	std	Z+26, r24	; 0x1a
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( pxHandle );
		return pxHandle;
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	2c 97       	sbiw	r28, 0x0c	; 12
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	f8 94       	cli
    1e90:	de bf       	out	0x3e, r29	; 62
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	cd bf       	out	0x3d, r28	; 61
    1e96:	9e 83       	std	Y+6, r25	; 0x06
    1e98:	8d 83       	std	Y+5, r24	; 0x05
    1e9a:	78 87       	std	Y+8, r23	; 0x08
    1e9c:	6f 83       	std	Y+7, r22	; 0x07
    1e9e:	5a 87       	std	Y+10, r21	; 0x0a
    1ea0:	49 87       	std	Y+9, r20	; 0x09
    1ea2:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1ea4:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1eac:	ed 81       	ldd	r30, Y+5	; 0x05
    1eae:	fe 81       	ldd	r31, Y+6	; 0x06
    1eb0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1eb2:	ed 81       	ldd	r30, Y+5	; 0x05
    1eb4:	fe 81       	ldd	r31, Y+6	; 0x06
    1eb6:	83 8d       	ldd	r24, Z+27	; 0x1b
    1eb8:	98 17       	cp	r25, r24
    1eba:	d8 f4       	brcc	.+54     	; 0x1ef2 <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec0:	2f 81       	ldd	r18, Y+7	; 0x07
    1ec2:	38 85       	ldd	r19, Y+8	; 0x08
    1ec4:	b9 01       	movw	r22, r18
    1ec6:	4b 85       	ldd	r20, Y+11	; 0x0b
    1ec8:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1ecc:	ed 81       	ldd	r30, Y+5	; 0x05
    1ece:	fe 81       	ldd	r31, Y+6	; 0x06
    1ed0:	81 89       	ldd	r24, Z+17	; 0x11
    1ed2:	88 23       	and	r24, r24
    1ed4:	49 f0       	breq	.+18     	; 0x1ee8 <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eda:	41 96       	adiw	r24, 0x11	; 17
    1edc:	0e 94 03 19 	call	0x3206	; 0x3206 <xTaskRemoveFromEventList>
    1ee0:	81 30       	cpi	r24, 0x01	; 1
    1ee2:	11 f4       	brne	.+4      	; 0x1ee8 <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    1ee4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    1ee8:	0f 90       	pop	r0
    1eea:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	8c 87       	std	Y+12, r24	; 0x0c
    1ef0:	5c c0       	rjmp	.+184    	; 0x1faa <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1ef2:	89 85       	ldd	r24, Y+9	; 0x09
    1ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef6:	00 97       	sbiw	r24, 0x00	; 0
    1ef8:	21 f4       	brne	.+8      	; 0x1f02 <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1efa:	0f 90       	pop	r0
    1efc:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1efe:	1c 86       	std	Y+12, r1	; 0x0c
    1f00:	54 c0       	rjmp	.+168    	; 0x1faa <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	88 23       	and	r24, r24
    1f06:	31 f4       	brne	.+12     	; 0x1f14 <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1f08:	ce 01       	movw	r24, r28
    1f0a:	02 96       	adiw	r24, 0x02	; 2
    1f0c:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    1f14:	0f 90       	pop	r0
    1f16:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1f18:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	0f 92       	push	r0
    1f22:	ed 81       	ldd	r30, Y+5	; 0x05
    1f24:	fe 81       	ldd	r31, Y+6	; 0x06
    1f26:	85 8d       	ldd	r24, Z+29	; 0x1d
    1f28:	8f 3f       	cpi	r24, 0xFF	; 255
    1f2a:	19 f4       	brne	.+6      	; 0x1f32 <xQueueGenericSend+0xb0>
    1f2c:	ed 81       	ldd	r30, Y+5	; 0x05
    1f2e:	fe 81       	ldd	r31, Y+6	; 0x06
    1f30:	15 8e       	std	Z+29, r1	; 0x1d
    1f32:	ed 81       	ldd	r30, Y+5	; 0x05
    1f34:	fe 81       	ldd	r31, Y+6	; 0x06
    1f36:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f38:	8f 3f       	cpi	r24, 0xFF	; 255
    1f3a:	19 f4       	brne	.+6      	; 0x1f42 <xQueueGenericSend+0xc0>
    1f3c:	ed 81       	ldd	r30, Y+5	; 0x05
    1f3e:	fe 81       	ldd	r31, Y+6	; 0x06
    1f40:	16 8e       	std	Z+30, r1	; 0x1e
    1f42:	0f 90       	pop	r0
    1f44:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1f46:	ce 01       	movw	r24, r28
    1f48:	02 96       	adiw	r24, 0x02	; 2
    1f4a:	9e 01       	movw	r18, r28
    1f4c:	27 5f       	subi	r18, 0xF7	; 247
    1f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f50:	b9 01       	movw	r22, r18
    1f52:	0e 94 84 19 	call	0x3308	; 0x3308 <xTaskCheckForTimeOut>
    1f56:	88 23       	and	r24, r24
    1f58:	09 f5       	brne	.+66     	; 0x1f9c <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5e:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <prvIsQueueFull>
    1f62:	88 23       	and	r24, r24
    1f64:	a1 f0       	breq	.+40     	; 0x1f8e <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1f66:	8d 81       	ldd	r24, Y+5	; 0x05
    1f68:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6a:	08 96       	adiw	r24, 0x08	; 8
    1f6c:	29 85       	ldd	r18, Y+9	; 0x09
    1f6e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f70:	b9 01       	movw	r22, r18
    1f72:	0e 94 ba 18 	call	0x3174	; 0x3174 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1f76:	8d 81       	ldd	r24, Y+5	; 0x05
    1f78:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7a:	0e 94 59 12 	call	0x24b2	; 0x24b2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1f7e:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <xTaskResumeAll>
    1f82:	88 23       	and	r24, r24
    1f84:	09 f0       	breq	.+2      	; 0x1f88 <xQueueGenericSend+0x106>
    1f86:	8f cf       	rjmp	.-226    	; 0x1ea6 <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    1f88:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
    1f8c:	8c cf       	rjmp	.-232    	; 0x1ea6 <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f90:	9e 81       	ldd	r25, Y+6	; 0x06
    1f92:	0e 94 59 12 	call	0x24b2	; 0x24b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1f96:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <xTaskResumeAll>
    1f9a:	85 cf       	rjmp	.-246    	; 0x1ea6 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa0:	0e 94 59 12 	call	0x24b2	; 0x24b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1fa4:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    1fa8:	1c 86       	std	Y+12, r1	; 0x0c
    1faa:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    1fac:	2c 96       	adiw	r28, 0x0c	; 12
    1fae:	0f b6       	in	r0, 0x3f	; 63
    1fb0:	f8 94       	cli
    1fb2:	de bf       	out	0x3e, r29	; 62
    1fb4:	0f be       	out	0x3f, r0	; 63
    1fb6:	cd bf       	out	0x3d, r28	; 61
    1fb8:	cf 91       	pop	r28
    1fba:	df 91       	pop	r29
    1fbc:	08 95       	ret

00001fbe <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    1fbe:	df 93       	push	r29
    1fc0:	cf 93       	push	r28
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	29 97       	sbiw	r28, 0x09	; 9
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	f8 94       	cli
    1fcc:	de bf       	out	0x3e, r29	; 62
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	cd bf       	out	0x3d, r28	; 61
    1fd2:	9c 83       	std	Y+4, r25	; 0x04
    1fd4:	8b 83       	std	Y+3, r24	; 0x03
    1fd6:	7e 83       	std	Y+6, r23	; 0x06
    1fd8:	6d 83       	std	Y+5, r22	; 0x05
    1fda:	58 87       	std	Y+8, r21	; 0x08
    1fdc:	4f 83       	std	Y+7, r20	; 0x07
    1fde:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1fe0:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1fe2:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe4:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe6:	92 8d       	ldd	r25, Z+26	; 0x1a
    1fe8:	eb 81       	ldd	r30, Y+3	; 0x03
    1fea:	fc 81       	ldd	r31, Y+4	; 0x04
    1fec:	83 8d       	ldd	r24, Z+27	; 0x1b
    1fee:	98 17       	cp	r25, r24
    1ff0:	40 f5       	brcc	.+80     	; 0x2042 <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ff8:	3e 81       	ldd	r19, Y+6	; 0x06
    1ffa:	b9 01       	movw	r22, r18
    1ffc:	49 85       	ldd	r20, Y+9	; 0x09
    1ffe:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    2002:	eb 81       	ldd	r30, Y+3	; 0x03
    2004:	fc 81       	ldd	r31, Y+4	; 0x04
    2006:	86 8d       	ldd	r24, Z+30	; 0x1e
    2008:	8f 3f       	cpi	r24, 0xFF	; 255
    200a:	89 f4       	brne	.+34     	; 0x202e <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    200c:	eb 81       	ldd	r30, Y+3	; 0x03
    200e:	fc 81       	ldd	r31, Y+4	; 0x04
    2010:	81 89       	ldd	r24, Z+17	; 0x11
    2012:	88 23       	and	r24, r24
    2014:	99 f0       	breq	.+38     	; 0x203c <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	9c 81       	ldd	r25, Y+4	; 0x04
    201a:	41 96       	adiw	r24, 0x11	; 17
    201c:	0e 94 03 19 	call	0x3206	; 0x3206 <xTaskRemoveFromEventList>
    2020:	88 23       	and	r24, r24
    2022:	61 f0       	breq	.+24     	; 0x203c <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    2024:	ef 81       	ldd	r30, Y+7	; 0x07
    2026:	f8 85       	ldd	r31, Y+8	; 0x08
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	80 83       	st	Z, r24
    202c:	07 c0       	rjmp	.+14     	; 0x203c <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    202e:	eb 81       	ldd	r30, Y+3	; 0x03
    2030:	fc 81       	ldd	r31, Y+4	; 0x04
    2032:	86 8d       	ldd	r24, Z+30	; 0x1e
    2034:	8f 5f       	subi	r24, 0xFF	; 255
    2036:	eb 81       	ldd	r30, Y+3	; 0x03
    2038:	fc 81       	ldd	r31, Y+4	; 0x04
    203a:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	8a 83       	std	Y+2, r24	; 0x02
    2040:	01 c0       	rjmp	.+2      	; 0x2044 <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2042:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2044:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2046:	29 96       	adiw	r28, 0x09	; 9
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	f8 94       	cli
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	cd bf       	out	0x3d, r28	; 61
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	08 95       	ret

00002058 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	2e 97       	sbiw	r28, 0x0e	; 14
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	f8 94       	cli
    2066:	de bf       	out	0x3e, r29	; 62
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	cd bf       	out	0x3d, r28	; 61
    206c:	98 87       	std	Y+8, r25	; 0x08
    206e:	8f 83       	std	Y+7, r24	; 0x07
    2070:	7a 87       	std	Y+10, r23	; 0x0a
    2072:	69 87       	std	Y+9, r22	; 0x09
    2074:	5c 87       	std	Y+12, r21	; 0x0c
    2076:	4b 87       	std	Y+11, r20	; 0x0b
    2078:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    207a:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	f8 94       	cli
    2080:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2082:	ef 81       	ldd	r30, Y+7	; 0x07
    2084:	f8 85       	ldd	r31, Y+8	; 0x08
    2086:	82 8d       	ldd	r24, Z+26	; 0x1a
    2088:	88 23       	and	r24, r24
    208a:	09 f4       	brne	.+2      	; 0x208e <xQueueGenericReceive+0x36>
    208c:	3f c0       	rjmp	.+126    	; 0x210c <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    208e:	ef 81       	ldd	r30, Y+7	; 0x07
    2090:	f8 85       	ldd	r31, Y+8	; 0x08
    2092:	86 81       	ldd	r24, Z+6	; 0x06
    2094:	97 81       	ldd	r25, Z+7	; 0x07
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    209a:	8f 81       	ldd	r24, Y+7	; 0x07
    209c:	98 85       	ldd	r25, Y+8	; 0x08
    209e:	29 85       	ldd	r18, Y+9	; 0x09
    20a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    20a2:	b9 01       	movw	r22, r18
    20a4:	0e 94 11 12 	call	0x2422	; 0x2422 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    20a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20aa:	88 23       	and	r24, r24
    20ac:	b1 f4       	brne	.+44     	; 0x20da <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    20ae:	ef 81       	ldd	r30, Y+7	; 0x07
    20b0:	f8 85       	ldd	r31, Y+8	; 0x08
    20b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    20b4:	81 50       	subi	r24, 0x01	; 1
    20b6:	ef 81       	ldd	r30, Y+7	; 0x07
    20b8:	f8 85       	ldd	r31, Y+8	; 0x08
    20ba:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    20bc:	ef 81       	ldd	r30, Y+7	; 0x07
    20be:	f8 85       	ldd	r31, Y+8	; 0x08
    20c0:	80 85       	ldd	r24, Z+8	; 0x08
    20c2:	88 23       	and	r24, r24
    20c4:	f1 f0       	breq	.+60     	; 0x2102 <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    20c6:	8f 81       	ldd	r24, Y+7	; 0x07
    20c8:	98 85       	ldd	r25, Y+8	; 0x08
    20ca:	08 96       	adiw	r24, 0x08	; 8
    20cc:	0e 94 03 19 	call	0x3206	; 0x3206 <xTaskRemoveFromEventList>
    20d0:	81 30       	cpi	r24, 0x01	; 1
    20d2:	b9 f4       	brne	.+46     	; 0x2102 <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    20d4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
    20d8:	14 c0       	rjmp	.+40     	; 0x2102 <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    20da:	ef 81       	ldd	r30, Y+7	; 0x07
    20dc:	f8 85       	ldd	r31, Y+8	; 0x08
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	9a 81       	ldd	r25, Y+2	; 0x02
    20e2:	97 83       	std	Z+7, r25	; 0x07
    20e4:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    20e6:	ef 81       	ldd	r30, Y+7	; 0x07
    20e8:	f8 85       	ldd	r31, Y+8	; 0x08
    20ea:	81 89       	ldd	r24, Z+17	; 0x11
    20ec:	88 23       	and	r24, r24
    20ee:	49 f0       	breq	.+18     	; 0x2102 <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    20f0:	8f 81       	ldd	r24, Y+7	; 0x07
    20f2:	98 85       	ldd	r25, Y+8	; 0x08
    20f4:	41 96       	adiw	r24, 0x11	; 17
    20f6:	0e 94 03 19 	call	0x3206	; 0x3206 <xTaskRemoveFromEventList>
    20fa:	88 23       	and	r24, r24
    20fc:	11 f0       	breq	.+4      	; 0x2102 <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    20fe:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    2102:	0f 90       	pop	r0
    2104:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	8e 87       	std	Y+14, r24	; 0x0e
    210a:	5c c0       	rjmp	.+184    	; 0x21c4 <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    210c:	8b 85       	ldd	r24, Y+11	; 0x0b
    210e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	21 f4       	brne	.+8      	; 0x211c <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2114:	0f 90       	pop	r0
    2116:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2118:	1e 86       	std	Y+14, r1	; 0x0e
    211a:	54 c0       	rjmp	.+168    	; 0x21c4 <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	88 23       	and	r24, r24
    2120:	31 f4       	brne	.+12     	; 0x212e <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2122:	ce 01       	movw	r24, r28
    2124:	04 96       	adiw	r24, 0x04	; 4
    2126:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    212e:	0f 90       	pop	r0
    2130:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2132:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	0f 92       	push	r0
    213c:	ef 81       	ldd	r30, Y+7	; 0x07
    213e:	f8 85       	ldd	r31, Y+8	; 0x08
    2140:	85 8d       	ldd	r24, Z+29	; 0x1d
    2142:	8f 3f       	cpi	r24, 0xFF	; 255
    2144:	19 f4       	brne	.+6      	; 0x214c <xQueueGenericReceive+0xf4>
    2146:	ef 81       	ldd	r30, Y+7	; 0x07
    2148:	f8 85       	ldd	r31, Y+8	; 0x08
    214a:	15 8e       	std	Z+29, r1	; 0x1d
    214c:	ef 81       	ldd	r30, Y+7	; 0x07
    214e:	f8 85       	ldd	r31, Y+8	; 0x08
    2150:	86 8d       	ldd	r24, Z+30	; 0x1e
    2152:	8f 3f       	cpi	r24, 0xFF	; 255
    2154:	19 f4       	brne	.+6      	; 0x215c <xQueueGenericReceive+0x104>
    2156:	ef 81       	ldd	r30, Y+7	; 0x07
    2158:	f8 85       	ldd	r31, Y+8	; 0x08
    215a:	16 8e       	std	Z+30, r1	; 0x1e
    215c:	0f 90       	pop	r0
    215e:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2160:	ce 01       	movw	r24, r28
    2162:	04 96       	adiw	r24, 0x04	; 4
    2164:	9e 01       	movw	r18, r28
    2166:	25 5f       	subi	r18, 0xF5	; 245
    2168:	3f 4f       	sbci	r19, 0xFF	; 255
    216a:	b9 01       	movw	r22, r18
    216c:	0e 94 84 19 	call	0x3308	; 0x3308 <xTaskCheckForTimeOut>
    2170:	88 23       	and	r24, r24
    2172:	09 f5       	brne	.+66     	; 0x21b6 <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2174:	8f 81       	ldd	r24, Y+7	; 0x07
    2176:	98 85       	ldd	r25, Y+8	; 0x08
    2178:	0e 94 ad 12 	call	0x255a	; 0x255a <prvIsQueueEmpty>
    217c:	88 23       	and	r24, r24
    217e:	a1 f0       	breq	.+40     	; 0x21a8 <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2180:	8f 81       	ldd	r24, Y+7	; 0x07
    2182:	98 85       	ldd	r25, Y+8	; 0x08
    2184:	41 96       	adiw	r24, 0x11	; 17
    2186:	2b 85       	ldd	r18, Y+11	; 0x0b
    2188:	3c 85       	ldd	r19, Y+12	; 0x0c
    218a:	b9 01       	movw	r22, r18
    218c:	0e 94 ba 18 	call	0x3174	; 0x3174 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2190:	8f 81       	ldd	r24, Y+7	; 0x07
    2192:	98 85       	ldd	r25, Y+8	; 0x08
    2194:	0e 94 59 12 	call	0x24b2	; 0x24b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2198:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <xTaskResumeAll>
    219c:	88 23       	and	r24, r24
    219e:	09 f0       	breq	.+2      	; 0x21a2 <xQueueGenericReceive+0x14a>
    21a0:	6d cf       	rjmp	.-294    	; 0x207c <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    21a2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
    21a6:	6a cf       	rjmp	.-300    	; 0x207c <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    21a8:	8f 81       	ldd	r24, Y+7	; 0x07
    21aa:	98 85       	ldd	r25, Y+8	; 0x08
    21ac:	0e 94 59 12 	call	0x24b2	; 0x24b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    21b0:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <xTaskResumeAll>
    21b4:	63 cf       	rjmp	.-314    	; 0x207c <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    21b6:	8f 81       	ldd	r24, Y+7	; 0x07
    21b8:	98 85       	ldd	r25, Y+8	; 0x08
    21ba:	0e 94 59 12 	call	0x24b2	; 0x24b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    21be:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    21c2:	1e 86       	std	Y+14, r1	; 0x0e
    21c4:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    21c6:	2e 96       	adiw	r28, 0x0e	; 14
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	f8 94       	cli
    21cc:	de bf       	out	0x3e, r29	; 62
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	cd bf       	out	0x3d, r28	; 61
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	08 95       	ret

000021d8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	28 97       	sbiw	r28, 0x08	; 8
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	de bf       	out	0x3e, r29	; 62
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	cd bf       	out	0x3d, r28	; 61
    21ec:	9c 83       	std	Y+4, r25	; 0x04
    21ee:	8b 83       	std	Y+3, r24	; 0x03
    21f0:	7e 83       	std	Y+6, r23	; 0x06
    21f2:	6d 83       	std	Y+5, r22	; 0x05
    21f4:	58 87       	std	Y+8, r21	; 0x08
    21f6:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    21f8:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    21fa:	eb 81       	ldd	r30, Y+3	; 0x03
    21fc:	fc 81       	ldd	r31, Y+4	; 0x04
    21fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    2200:	88 23       	and	r24, r24
    2202:	71 f1       	breq	.+92     	; 0x2260 <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	9c 81       	ldd	r25, Y+4	; 0x04
    2208:	2d 81       	ldd	r18, Y+5	; 0x05
    220a:	3e 81       	ldd	r19, Y+6	; 0x06
    220c:	b9 01       	movw	r22, r18
    220e:	0e 94 11 12 	call	0x2422	; 0x2422 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    2212:	eb 81       	ldd	r30, Y+3	; 0x03
    2214:	fc 81       	ldd	r31, Y+4	; 0x04
    2216:	82 8d       	ldd	r24, Z+26	; 0x1a
    2218:	81 50       	subi	r24, 0x01	; 1
    221a:	eb 81       	ldd	r30, Y+3	; 0x03
    221c:	fc 81       	ldd	r31, Y+4	; 0x04
    221e:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    2220:	eb 81       	ldd	r30, Y+3	; 0x03
    2222:	fc 81       	ldd	r31, Y+4	; 0x04
    2224:	85 8d       	ldd	r24, Z+29	; 0x1d
    2226:	8f 3f       	cpi	r24, 0xFF	; 255
    2228:	89 f4       	brne	.+34     	; 0x224c <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    222a:	eb 81       	ldd	r30, Y+3	; 0x03
    222c:	fc 81       	ldd	r31, Y+4	; 0x04
    222e:	80 85       	ldd	r24, Z+8	; 0x08
    2230:	88 23       	and	r24, r24
    2232:	99 f0       	breq	.+38     	; 0x225a <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	9c 81       	ldd	r25, Y+4	; 0x04
    2238:	08 96       	adiw	r24, 0x08	; 8
    223a:	0e 94 03 19 	call	0x3206	; 0x3206 <xTaskRemoveFromEventList>
    223e:	88 23       	and	r24, r24
    2240:	61 f0       	breq	.+24     	; 0x225a <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    2242:	ef 81       	ldd	r30, Y+7	; 0x07
    2244:	f8 85       	ldd	r31, Y+8	; 0x08
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	80 83       	st	Z, r24
    224a:	07 c0       	rjmp	.+14     	; 0x225a <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    224c:	eb 81       	ldd	r30, Y+3	; 0x03
    224e:	fc 81       	ldd	r31, Y+4	; 0x04
    2250:	85 8d       	ldd	r24, Z+29	; 0x1d
    2252:	8f 5f       	subi	r24, 0xFF	; 255
    2254:	eb 81       	ldd	r30, Y+3	; 0x03
    2256:	fc 81       	ldd	r31, Y+4	; 0x04
    2258:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	8a 83       	std	Y+2, r24	; 0x02
    225e:	01 c0       	rjmp	.+2      	; 0x2262 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    2260:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2264:	28 96       	adiw	r28, 0x08	; 8
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	00 d0       	rcall	.+0      	; 0x227c <uxQueueMessagesWaiting+0x6>
    227c:	0f 92       	push	r0
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	9b 83       	std	Y+3, r25	; 0x03
    2284:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2286:	0f b6       	in	r0, 0x3f	; 63
    2288:	f8 94       	cli
    228a:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    228c:	ea 81       	ldd	r30, Y+2	; 0x02
    228e:	fb 81       	ldd	r31, Y+3	; 0x03
    2290:	82 8d       	ldd	r24, Z+26	; 0x1a
    2292:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    2294:	0f 90       	pop	r0
    2296:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    2298:	89 81       	ldd	r24, Y+1	; 0x01
}
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	cf 91       	pop	r28
    22a2:	df 91       	pop	r29
    22a4:	08 95       	ret

000022a6 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    22a6:	df 93       	push	r29
    22a8:	cf 93       	push	r28
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <uxQueueMessagesWaitingFromISR+0x6>
    22ac:	0f 92       	push	r0
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	9b 83       	std	Y+3, r25	; 0x03
    22b4:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    22b6:	ea 81       	ldd	r30, Y+2	; 0x02
    22b8:	fb 81       	ldd	r31, Y+3	; 0x03
    22ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    22bc:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    22be:	89 81       	ldd	r24, Y+1	; 0x01
}
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	cf 91       	pop	r28
    22c8:	df 91       	pop	r29
    22ca:	08 95       	ret

000022cc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	00 d0       	rcall	.+0      	; 0x22d2 <vQueueDelete+0x6>
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	9a 83       	std	Y+2, r25	; 0x02
    22d8:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    22da:	e9 81       	ldd	r30, Y+1	; 0x01
    22dc:	fa 81       	ldd	r31, Y+2	; 0x02
    22de:	80 81       	ld	r24, Z
    22e0:	91 81       	ldd	r25, Z+1	; 0x01
    22e2:	0e 94 c1 08 	call	0x1182	; 0x1182 <vPortFree>
	vPortFree( pxQueue );
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ea:	0e 94 c1 08 	call	0x1182	; 0x1182 <vPortFree>
}
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	cf 91       	pop	r28
    22f4:	df 91       	pop	r29
    22f6:	08 95       	ret

000022f8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	00 d0       	rcall	.+0      	; 0x22fe <prvCopyDataToQueue+0x6>
    22fe:	00 d0       	rcall	.+0      	; 0x2300 <prvCopyDataToQueue+0x8>
    2300:	0f 92       	push	r0
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	9a 83       	std	Y+2, r25	; 0x02
    2308:	89 83       	std	Y+1, r24	; 0x01
    230a:	7c 83       	std	Y+4, r23	; 0x04
    230c:	6b 83       	std	Y+3, r22	; 0x03
    230e:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    2310:	e9 81       	ldd	r30, Y+1	; 0x01
    2312:	fa 81       	ldd	r31, Y+2	; 0x02
    2314:	84 8d       	ldd	r24, Z+28	; 0x1c
    2316:	88 23       	and	r24, r24
    2318:	09 f4       	brne	.+2      	; 0x231c <prvCopyDataToQueue+0x24>
    231a:	74 c0       	rjmp	.+232    	; 0x2404 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    231c:	8d 81       	ldd	r24, Y+5	; 0x05
    231e:	88 23       	and	r24, r24
    2320:	99 f5       	brne	.+102    	; 0x2388 <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    2322:	e9 81       	ldd	r30, Y+1	; 0x01
    2324:	fa 81       	ldd	r31, Y+2	; 0x02
    2326:	64 81       	ldd	r22, Z+4	; 0x04
    2328:	75 81       	ldd	r23, Z+5	; 0x05
    232a:	e9 81       	ldd	r30, Y+1	; 0x01
    232c:	fa 81       	ldd	r31, Y+2	; 0x02
    232e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2330:	48 2f       	mov	r20, r24
    2332:	50 e0       	ldi	r21, 0x00	; 0
    2334:	2b 81       	ldd	r18, Y+3	; 0x03
    2336:	3c 81       	ldd	r19, Y+4	; 0x04
    2338:	cb 01       	movw	r24, r22
    233a:	b9 01       	movw	r22, r18
    233c:	0e 94 bb 1b 	call	0x3776	; 0x3776 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2340:	e9 81       	ldd	r30, Y+1	; 0x01
    2342:	fa 81       	ldd	r31, Y+2	; 0x02
    2344:	24 81       	ldd	r18, Z+4	; 0x04
    2346:	35 81       	ldd	r19, Z+5	; 0x05
    2348:	e9 81       	ldd	r30, Y+1	; 0x01
    234a:	fa 81       	ldd	r31, Y+2	; 0x02
    234c:	84 8d       	ldd	r24, Z+28	; 0x1c
    234e:	88 2f       	mov	r24, r24
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	82 0f       	add	r24, r18
    2354:	93 1f       	adc	r25, r19
    2356:	e9 81       	ldd	r30, Y+1	; 0x01
    2358:	fa 81       	ldd	r31, Y+2	; 0x02
    235a:	95 83       	std	Z+5, r25	; 0x05
    235c:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    235e:	e9 81       	ldd	r30, Y+1	; 0x01
    2360:	fa 81       	ldd	r31, Y+2	; 0x02
    2362:	24 81       	ldd	r18, Z+4	; 0x04
    2364:	35 81       	ldd	r19, Z+5	; 0x05
    2366:	e9 81       	ldd	r30, Y+1	; 0x01
    2368:	fa 81       	ldd	r31, Y+2	; 0x02
    236a:	82 81       	ldd	r24, Z+2	; 0x02
    236c:	93 81       	ldd	r25, Z+3	; 0x03
    236e:	28 17       	cp	r18, r24
    2370:	39 07       	cpc	r19, r25
    2372:	08 f4       	brcc	.+2      	; 0x2376 <prvCopyDataToQueue+0x7e>
    2374:	47 c0       	rjmp	.+142    	; 0x2404 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    2376:	e9 81       	ldd	r30, Y+1	; 0x01
    2378:	fa 81       	ldd	r31, Y+2	; 0x02
    237a:	80 81       	ld	r24, Z
    237c:	91 81       	ldd	r25, Z+1	; 0x01
    237e:	e9 81       	ldd	r30, Y+1	; 0x01
    2380:	fa 81       	ldd	r31, Y+2	; 0x02
    2382:	95 83       	std	Z+5, r25	; 0x05
    2384:	84 83       	std	Z+4, r24	; 0x04
    2386:	3e c0       	rjmp	.+124    	; 0x2404 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    2388:	e9 81       	ldd	r30, Y+1	; 0x01
    238a:	fa 81       	ldd	r31, Y+2	; 0x02
    238c:	66 81       	ldd	r22, Z+6	; 0x06
    238e:	77 81       	ldd	r23, Z+7	; 0x07
    2390:	e9 81       	ldd	r30, Y+1	; 0x01
    2392:	fa 81       	ldd	r31, Y+2	; 0x02
    2394:	84 8d       	ldd	r24, Z+28	; 0x1c
    2396:	48 2f       	mov	r20, r24
    2398:	50 e0       	ldi	r21, 0x00	; 0
    239a:	2b 81       	ldd	r18, Y+3	; 0x03
    239c:	3c 81       	ldd	r19, Y+4	; 0x04
    239e:	cb 01       	movw	r24, r22
    23a0:	b9 01       	movw	r22, r18
    23a2:	0e 94 bb 1b 	call	0x3776	; 0x3776 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    23a6:	e9 81       	ldd	r30, Y+1	; 0x01
    23a8:	fa 81       	ldd	r31, Y+2	; 0x02
    23aa:	26 81       	ldd	r18, Z+6	; 0x06
    23ac:	37 81       	ldd	r19, Z+7	; 0x07
    23ae:	e9 81       	ldd	r30, Y+1	; 0x01
    23b0:	fa 81       	ldd	r31, Y+2	; 0x02
    23b2:	84 8d       	ldd	r24, Z+28	; 0x1c
    23b4:	88 2f       	mov	r24, r24
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	90 95       	com	r25
    23ba:	81 95       	neg	r24
    23bc:	9f 4f       	sbci	r25, 0xFF	; 255
    23be:	82 0f       	add	r24, r18
    23c0:	93 1f       	adc	r25, r19
    23c2:	e9 81       	ldd	r30, Y+1	; 0x01
    23c4:	fa 81       	ldd	r31, Y+2	; 0x02
    23c6:	97 83       	std	Z+7, r25	; 0x07
    23c8:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    23ca:	e9 81       	ldd	r30, Y+1	; 0x01
    23cc:	fa 81       	ldd	r31, Y+2	; 0x02
    23ce:	26 81       	ldd	r18, Z+6	; 0x06
    23d0:	37 81       	ldd	r19, Z+7	; 0x07
    23d2:	e9 81       	ldd	r30, Y+1	; 0x01
    23d4:	fa 81       	ldd	r31, Y+2	; 0x02
    23d6:	80 81       	ld	r24, Z
    23d8:	91 81       	ldd	r25, Z+1	; 0x01
    23da:	28 17       	cp	r18, r24
    23dc:	39 07       	cpc	r19, r25
    23de:	90 f4       	brcc	.+36     	; 0x2404 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    23e0:	e9 81       	ldd	r30, Y+1	; 0x01
    23e2:	fa 81       	ldd	r31, Y+2	; 0x02
    23e4:	22 81       	ldd	r18, Z+2	; 0x02
    23e6:	33 81       	ldd	r19, Z+3	; 0x03
    23e8:	e9 81       	ldd	r30, Y+1	; 0x01
    23ea:	fa 81       	ldd	r31, Y+2	; 0x02
    23ec:	84 8d       	ldd	r24, Z+28	; 0x1c
    23ee:	88 2f       	mov	r24, r24
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	90 95       	com	r25
    23f4:	81 95       	neg	r24
    23f6:	9f 4f       	sbci	r25, 0xFF	; 255
    23f8:	82 0f       	add	r24, r18
    23fa:	93 1f       	adc	r25, r19
    23fc:	e9 81       	ldd	r30, Y+1	; 0x01
    23fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2400:	97 83       	std	Z+7, r25	; 0x07
    2402:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    2404:	e9 81       	ldd	r30, Y+1	; 0x01
    2406:	fa 81       	ldd	r31, Y+2	; 0x02
    2408:	82 8d       	ldd	r24, Z+26	; 0x1a
    240a:	8f 5f       	subi	r24, 0xFF	; 255
    240c:	e9 81       	ldd	r30, Y+1	; 0x01
    240e:	fa 81       	ldd	r31, Y+2	; 0x02
    2410:	82 8f       	std	Z+26, r24	; 0x1a
}
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	00 d0       	rcall	.+0      	; 0x2428 <prvCopyDataFromQueue+0x6>
    2428:	00 d0       	rcall	.+0      	; 0x242a <prvCopyDataFromQueue+0x8>
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	9a 83       	std	Y+2, r25	; 0x02
    2430:	89 83       	std	Y+1, r24	; 0x01
    2432:	7c 83       	std	Y+4, r23	; 0x04
    2434:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    2436:	e9 81       	ldd	r30, Y+1	; 0x01
    2438:	fa 81       	ldd	r31, Y+2	; 0x02
    243a:	80 81       	ld	r24, Z
    243c:	91 81       	ldd	r25, Z+1	; 0x01
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	89 f1       	breq	.+98     	; 0x24a4 <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    2442:	e9 81       	ldd	r30, Y+1	; 0x01
    2444:	fa 81       	ldd	r31, Y+2	; 0x02
    2446:	26 81       	ldd	r18, Z+6	; 0x06
    2448:	37 81       	ldd	r19, Z+7	; 0x07
    244a:	e9 81       	ldd	r30, Y+1	; 0x01
    244c:	fa 81       	ldd	r31, Y+2	; 0x02
    244e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2450:	88 2f       	mov	r24, r24
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	82 0f       	add	r24, r18
    2456:	93 1f       	adc	r25, r19
    2458:	e9 81       	ldd	r30, Y+1	; 0x01
    245a:	fa 81       	ldd	r31, Y+2	; 0x02
    245c:	97 83       	std	Z+7, r25	; 0x07
    245e:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    2460:	e9 81       	ldd	r30, Y+1	; 0x01
    2462:	fa 81       	ldd	r31, Y+2	; 0x02
    2464:	26 81       	ldd	r18, Z+6	; 0x06
    2466:	37 81       	ldd	r19, Z+7	; 0x07
    2468:	e9 81       	ldd	r30, Y+1	; 0x01
    246a:	fa 81       	ldd	r31, Y+2	; 0x02
    246c:	82 81       	ldd	r24, Z+2	; 0x02
    246e:	93 81       	ldd	r25, Z+3	; 0x03
    2470:	28 17       	cp	r18, r24
    2472:	39 07       	cpc	r19, r25
    2474:	40 f0       	brcs	.+16     	; 0x2486 <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    2476:	e9 81       	ldd	r30, Y+1	; 0x01
    2478:	fa 81       	ldd	r31, Y+2	; 0x02
    247a:	80 81       	ld	r24, Z
    247c:	91 81       	ldd	r25, Z+1	; 0x01
    247e:	e9 81       	ldd	r30, Y+1	; 0x01
    2480:	fa 81       	ldd	r31, Y+2	; 0x02
    2482:	97 83       	std	Z+7, r25	; 0x07
    2484:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    2486:	e9 81       	ldd	r30, Y+1	; 0x01
    2488:	fa 81       	ldd	r31, Y+2	; 0x02
    248a:	46 81       	ldd	r20, Z+6	; 0x06
    248c:	57 81       	ldd	r21, Z+7	; 0x07
    248e:	e9 81       	ldd	r30, Y+1	; 0x01
    2490:	fa 81       	ldd	r31, Y+2	; 0x02
    2492:	84 8d       	ldd	r24, Z+28	; 0x1c
    2494:	28 2f       	mov	r18, r24
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	8b 81       	ldd	r24, Y+3	; 0x03
    249a:	9c 81       	ldd	r25, Y+4	; 0x04
    249c:	ba 01       	movw	r22, r20
    249e:	a9 01       	movw	r20, r18
    24a0:	0e 94 bb 1b 	call	0x3776	; 0x3776 <memcpy>
	}
}
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	0f 90       	pop	r0
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	00 d0       	rcall	.+0      	; 0x24b8 <prvUnlockQueue+0x6>
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
    24bc:	9a 83       	std	Y+2, r25	; 0x02
    24be:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    24c0:	0f b6       	in	r0, 0x3f	; 63
    24c2:	f8 94       	cli
    24c4:	0f 92       	push	r0
    24c6:	15 c0       	rjmp	.+42     	; 0x24f2 <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    24c8:	e9 81       	ldd	r30, Y+1	; 0x01
    24ca:	fa 81       	ldd	r31, Y+2	; 0x02
    24cc:	81 89       	ldd	r24, Z+17	; 0x11
    24ce:	88 23       	and	r24, r24
    24d0:	a9 f0       	breq	.+42     	; 0x24fc <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	9a 81       	ldd	r25, Y+2	; 0x02
    24d6:	41 96       	adiw	r24, 0x11	; 17
    24d8:	0e 94 03 19 	call	0x3206	; 0x3206 <xTaskRemoveFromEventList>
    24dc:	88 23       	and	r24, r24
    24de:	11 f0       	breq	.+4      	; 0x24e4 <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    24e0:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    24e4:	e9 81       	ldd	r30, Y+1	; 0x01
    24e6:	fa 81       	ldd	r31, Y+2	; 0x02
    24e8:	86 8d       	ldd	r24, Z+30	; 0x1e
    24ea:	81 50       	subi	r24, 0x01	; 1
    24ec:	e9 81       	ldd	r30, Y+1	; 0x01
    24ee:	fa 81       	ldd	r31, Y+2	; 0x02
    24f0:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    24f2:	e9 81       	ldd	r30, Y+1	; 0x01
    24f4:	fa 81       	ldd	r31, Y+2	; 0x02
    24f6:	86 8d       	ldd	r24, Z+30	; 0x1e
    24f8:	18 16       	cp	r1, r24
    24fa:	34 f3       	brlt	.-52     	; 0x24c8 <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    24fc:	e9 81       	ldd	r30, Y+1	; 0x01
    24fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2500:	8f ef       	ldi	r24, 0xFF	; 255
    2502:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    2504:	0f 90       	pop	r0
    2506:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    2508:	0f b6       	in	r0, 0x3f	; 63
    250a:	f8 94       	cli
    250c:	0f 92       	push	r0
    250e:	15 c0       	rjmp	.+42     	; 0x253a <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2510:	e9 81       	ldd	r30, Y+1	; 0x01
    2512:	fa 81       	ldd	r31, Y+2	; 0x02
    2514:	80 85       	ldd	r24, Z+8	; 0x08
    2516:	88 23       	and	r24, r24
    2518:	a9 f0       	breq	.+42     	; 0x2544 <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	9a 81       	ldd	r25, Y+2	; 0x02
    251e:	08 96       	adiw	r24, 0x08	; 8
    2520:	0e 94 03 19 	call	0x3206	; 0x3206 <xTaskRemoveFromEventList>
    2524:	88 23       	and	r24, r24
    2526:	11 f0       	breq	.+4      	; 0x252c <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    2528:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    252c:	e9 81       	ldd	r30, Y+1	; 0x01
    252e:	fa 81       	ldd	r31, Y+2	; 0x02
    2530:	85 8d       	ldd	r24, Z+29	; 0x1d
    2532:	81 50       	subi	r24, 0x01	; 1
    2534:	e9 81       	ldd	r30, Y+1	; 0x01
    2536:	fa 81       	ldd	r31, Y+2	; 0x02
    2538:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    253a:	e9 81       	ldd	r30, Y+1	; 0x01
    253c:	fa 81       	ldd	r31, Y+2	; 0x02
    253e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2540:	18 16       	cp	r1, r24
    2542:	34 f3       	brlt	.-52     	; 0x2510 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    2544:	e9 81       	ldd	r30, Y+1	; 0x01
    2546:	fa 81       	ldd	r31, Y+2	; 0x02
    2548:	8f ef       	ldi	r24, 0xFF	; 255
    254a:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    254c:	0f 90       	pop	r0
    254e:	0f be       	out	0x3f, r0	; 63
}
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	08 95       	ret

0000255a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	00 d0       	rcall	.+0      	; 0x2560 <prvIsQueueEmpty+0x6>
    2560:	0f 92       	push	r0
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    2566:	9b 83       	std	Y+3, r25	; 0x03
    2568:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    2570:	ea 81       	ldd	r30, Y+2	; 0x02
    2572:	fb 81       	ldd	r31, Y+3	; 0x03
    2574:	82 8d       	ldd	r24, Z+26	; 0x1a
    2576:	19 82       	std	Y+1, r1	; 0x01
    2578:	88 23       	and	r24, r24
    257a:	11 f4       	brne	.+4      	; 0x2580 <prvIsQueueEmpty+0x26>
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    2580:	0f 90       	pop	r0
    2582:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2584:	89 81       	ldd	r24, Y+1	; 0x01
}
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	cf 91       	pop	r28
    258e:	df 91       	pop	r29
    2590:	08 95       	ret

00002592 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    2592:	df 93       	push	r29
    2594:	cf 93       	push	r28
    2596:	00 d0       	rcall	.+0      	; 0x2598 <xQueueIsQueueEmptyFromISR+0x6>
    2598:	0f 92       	push	r0
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	9b 83       	std	Y+3, r25	; 0x03
    25a0:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    25a2:	ea 81       	ldd	r30, Y+2	; 0x02
    25a4:	fb 81       	ldd	r31, Y+3	; 0x03
    25a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    25a8:	19 82       	std	Y+1, r1	; 0x01
    25aa:	88 23       	and	r24, r24
    25ac:	11 f4       	brne	.+4      	; 0x25b2 <xQueueIsQueueEmptyFromISR+0x20>
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    25b4:	0f 90       	pop	r0
    25b6:	0f 90       	pop	r0
    25b8:	0f 90       	pop	r0
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	08 95       	ret

000025c0 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	00 d0       	rcall	.+0      	; 0x25c6 <prvIsQueueFull+0x6>
    25c6:	0f 92       	push	r0
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	9b 83       	std	Y+3, r25	; 0x03
    25ce:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    25d6:	ea 81       	ldd	r30, Y+2	; 0x02
    25d8:	fb 81       	ldd	r31, Y+3	; 0x03
    25da:	92 8d       	ldd	r25, Z+26	; 0x1a
    25dc:	ea 81       	ldd	r30, Y+2	; 0x02
    25de:	fb 81       	ldd	r31, Y+3	; 0x03
    25e0:	83 8d       	ldd	r24, Z+27	; 0x1b
    25e2:	19 82       	std	Y+1, r1	; 0x01
    25e4:	98 17       	cp	r25, r24
    25e6:	11 f4       	brne	.+4      	; 0x25ec <prvIsQueueFull+0x2c>
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    25ec:	0f 90       	pop	r0
    25ee:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	cf 91       	pop	r28
    25fa:	df 91       	pop	r29
    25fc:	08 95       	ret

000025fe <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    25fe:	df 93       	push	r29
    2600:	cf 93       	push	r28
    2602:	00 d0       	rcall	.+0      	; 0x2604 <xQueueIsQueueFullFromISR+0x6>
    2604:	0f 92       	push	r0
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
    260a:	9b 83       	std	Y+3, r25	; 0x03
    260c:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    260e:	ea 81       	ldd	r30, Y+2	; 0x02
    2610:	fb 81       	ldd	r31, Y+3	; 0x03
    2612:	92 8d       	ldd	r25, Z+26	; 0x1a
    2614:	ea 81       	ldd	r30, Y+2	; 0x02
    2616:	fb 81       	ldd	r31, Y+3	; 0x03
    2618:	83 8d       	ldd	r24, Z+27	; 0x1b
    261a:	19 82       	std	Y+1, r1	; 0x01
    261c:	98 17       	cp	r25, r24
    261e:	11 f4       	brne	.+4      	; 0x2624 <xQueueIsQueueFullFromISR+0x26>
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    2624:	89 81       	ldd	r24, Y+1	; 0x01
}
    2626:	0f 90       	pop	r0
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	08 95       	ret

00002632 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    2632:	af 92       	push	r10
    2634:	bf 92       	push	r11
    2636:	cf 92       	push	r12
    2638:	df 92       	push	r13
    263a:	ef 92       	push	r14
    263c:	ff 92       	push	r15
    263e:	0f 93       	push	r16
    2640:	1f 93       	push	r17
    2642:	df 93       	push	r29
    2644:	cf 93       	push	r28
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
    264a:	64 97       	sbiw	r28, 0x14	; 20
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	f8 94       	cli
    2650:	de bf       	out	0x3e, r29	; 62
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	cd bf       	out	0x3d, r28	; 61
    2656:	9f 83       	std	Y+7, r25	; 0x07
    2658:	8e 83       	std	Y+6, r24	; 0x06
    265a:	79 87       	std	Y+9, r23	; 0x09
    265c:	68 87       	std	Y+8, r22	; 0x08
    265e:	5b 87       	std	Y+11, r21	; 0x0b
    2660:	4a 87       	std	Y+10, r20	; 0x0a
    2662:	3d 87       	std	Y+13, r19	; 0x0d
    2664:	2c 87       	std	Y+12, r18	; 0x0c
    2666:	0e 87       	std	Y+14, r16	; 0x0e
    2668:	f8 8a       	std	Y+16, r15	; 0x10
    266a:	ef 86       	std	Y+15, r14	; 0x0f
    266c:	da 8a       	std	Y+18, r13	; 0x12
    266e:	c9 8a       	std	Y+17, r12	; 0x11
    2670:	bc 8a       	std	Y+20, r11	; 0x14
    2672:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    2674:	8a 85       	ldd	r24, Y+10	; 0x0a
    2676:	9b 85       	ldd	r25, Y+11	; 0x0b
    2678:	29 89       	ldd	r18, Y+17	; 0x11
    267a:	3a 89       	ldd	r19, Y+18	; 0x12
    267c:	b9 01       	movw	r22, r18
    267e:	0e 94 1e 1b 	call	0x363c	; 0x363c <prvAllocateTCBAndStack>
    2682:	9c 83       	std	Y+4, r25	; 0x04
    2684:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    2686:	8b 81       	ldd	r24, Y+3	; 0x03
    2688:	9c 81       	ldd	r25, Y+4	; 0x04
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	09 f4       	brne	.+2      	; 0x2690 <xTaskGenericCreate+0x5e>
    268e:	99 c0       	rjmp	.+306    	; 0x27c2 <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    2690:	eb 81       	ldd	r30, Y+3	; 0x03
    2692:	fc 81       	ldd	r31, Y+4	; 0x04
    2694:	27 89       	ldd	r18, Z+23	; 0x17
    2696:	30 8d       	ldd	r19, Z+24	; 0x18
    2698:	8a 85       	ldd	r24, Y+10	; 0x0a
    269a:	9b 85       	ldd	r25, Y+11	; 0x0b
    269c:	01 97       	sbiw	r24, 0x01	; 1
    269e:	82 0f       	add	r24, r18
    26a0:	93 1f       	adc	r25, r19
    26a2:	9a 83       	std	Y+2, r25	; 0x02
    26a4:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	9c 81       	ldd	r25, Y+4	; 0x04
    26aa:	28 85       	ldd	r18, Y+8	; 0x08
    26ac:	39 85       	ldd	r19, Y+9	; 0x09
    26ae:	eb 89       	ldd	r30, Y+19	; 0x13
    26b0:	fc 89       	ldd	r31, Y+20	; 0x14
    26b2:	aa 85       	ldd	r26, Y+10	; 0x0a
    26b4:	bb 85       	ldd	r27, Y+11	; 0x0b
    26b6:	b9 01       	movw	r22, r18
    26b8:	4e 85       	ldd	r20, Y+14	; 0x0e
    26ba:	9f 01       	movw	r18, r30
    26bc:	8d 01       	movw	r16, r26
    26be:	0e 94 ff 19 	call	0x33fe	; 0x33fe <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	9a 81       	ldd	r25, Y+2	; 0x02
    26c6:	2e 81       	ldd	r18, Y+6	; 0x06
    26c8:	3f 81       	ldd	r19, Y+7	; 0x07
    26ca:	4c 85       	ldd	r20, Y+12	; 0x0c
    26cc:	5d 85       	ldd	r21, Y+13	; 0x0d
    26ce:	b9 01       	movw	r22, r18
    26d0:	0e 94 22 0a 	call	0x1444	; 0x1444 <pxPortInitialiseStack>
    26d4:	eb 81       	ldd	r30, Y+3	; 0x03
    26d6:	fc 81       	ldd	r31, Y+4	; 0x04
    26d8:	91 83       	std	Z+1, r25	; 0x01
    26da:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    26dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    26de:	98 89       	ldd	r25, Y+16	; 0x10
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	31 f0       	breq	.+12     	; 0x26f0 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    26e4:	ef 85       	ldd	r30, Y+15	; 0x0f
    26e6:	f8 89       	ldd	r31, Y+16	; 0x10
    26e8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ea:	9c 81       	ldd	r25, Y+4	; 0x04
    26ec:	91 83       	std	Z+1, r25	; 0x01
    26ee:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    26f6:	80 91 9b 04 	lds	r24, 0x049B
    26fa:	8f 5f       	subi	r24, 0xFF	; 255
    26fc:	80 93 9b 04 	sts	0x049B, r24
			if( pxCurrentTCB == NULL )
    2700:	80 91 98 04 	lds	r24, 0x0498
    2704:	90 91 99 04 	lds	r25, 0x0499
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	69 f4       	brne	.+26     	; 0x2726 <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	9c 81       	ldd	r25, Y+4	; 0x04
    2710:	90 93 99 04 	sts	0x0499, r25
    2714:	80 93 98 04 	sts	0x0498, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    2718:	80 91 9b 04 	lds	r24, 0x049B
    271c:	81 30       	cpi	r24, 0x01	; 1
    271e:	a9 f4       	brne	.+42     	; 0x274a <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    2720:	0e 94 56 1a 	call	0x34ac	; 0x34ac <prvInitialiseTaskLists>
    2724:	12 c0       	rjmp	.+36     	; 0x274a <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    2726:	80 91 a0 04 	lds	r24, 0x04A0
    272a:	88 23       	and	r24, r24
    272c:	71 f4       	brne	.+28     	; 0x274a <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    272e:	e0 91 98 04 	lds	r30, 0x0498
    2732:	f0 91 99 04 	lds	r31, 0x0499
    2736:	96 89       	ldd	r25, Z+22	; 0x16
    2738:	8e 85       	ldd	r24, Y+14	; 0x0e
    273a:	89 17       	cp	r24, r25
    273c:	30 f0       	brcs	.+12     	; 0x274a <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    273e:	8b 81       	ldd	r24, Y+3	; 0x03
    2740:	9c 81       	ldd	r25, Y+4	; 0x04
    2742:	90 93 99 04 	sts	0x0499, r25
    2746:	80 93 98 04 	sts	0x0498, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    274a:	eb 81       	ldd	r30, Y+3	; 0x03
    274c:	fc 81       	ldd	r31, Y+4	; 0x04
    274e:	96 89       	ldd	r25, Z+22	; 0x16
    2750:	80 91 9e 04 	lds	r24, 0x049E
    2754:	89 17       	cp	r24, r25
    2756:	28 f4       	brcc	.+10     	; 0x2762 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    2758:	eb 81       	ldd	r30, Y+3	; 0x03
    275a:	fc 81       	ldd	r31, Y+4	; 0x04
    275c:	86 89       	ldd	r24, Z+22	; 0x16
    275e:	80 93 9e 04 	sts	0x049E, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    2762:	80 91 a5 04 	lds	r24, 0x04A5
    2766:	8f 5f       	subi	r24, 0xFF	; 255
    2768:	80 93 a5 04 	sts	0x04A5, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    276c:	eb 81       	ldd	r30, Y+3	; 0x03
    276e:	fc 81       	ldd	r31, Y+4	; 0x04
    2770:	96 89       	ldd	r25, Z+22	; 0x16
    2772:	80 91 9f 04 	lds	r24, 0x049F
    2776:	89 17       	cp	r24, r25
    2778:	28 f4       	brcc	.+10     	; 0x2784 <xTaskGenericCreate+0x152>
    277a:	eb 81       	ldd	r30, Y+3	; 0x03
    277c:	fc 81       	ldd	r31, Y+4	; 0x04
    277e:	86 89       	ldd	r24, Z+22	; 0x16
    2780:	80 93 9f 04 	sts	0x049F, r24
    2784:	eb 81       	ldd	r30, Y+3	; 0x03
    2786:	fc 81       	ldd	r31, Y+4	; 0x04
    2788:	86 89       	ldd	r24, Z+22	; 0x16
    278a:	28 2f       	mov	r18, r24
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	c9 01       	movw	r24, r18
    2790:	88 0f       	add	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	88 0f       	add	r24, r24
    2796:	99 1f       	adc	r25, r25
    2798:	88 0f       	add	r24, r24
    279a:	99 1f       	adc	r25, r25
    279c:	82 0f       	add	r24, r18
    279e:	93 1f       	adc	r25, r19
    27a0:	ac 01       	movw	r20, r24
    27a2:	4a 55       	subi	r20, 0x5A	; 90
    27a4:	5b 4f       	sbci	r21, 0xFB	; 251
    27a6:	8b 81       	ldd	r24, Y+3	; 0x03
    27a8:	9c 81       	ldd	r25, Y+4	; 0x04
    27aa:	9c 01       	movw	r18, r24
    27ac:	2e 5f       	subi	r18, 0xFE	; 254
    27ae:	3f 4f       	sbci	r19, 0xFF	; 255
    27b0:	ca 01       	movw	r24, r20
    27b2:	b9 01       	movw	r22, r18
    27b4:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>

			xReturn = pdPASS;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    27bc:	0f 90       	pop	r0
    27be:	0f be       	out	0x3f, r0	; 63
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    27c2:	8f ef       	ldi	r24, 0xFF	; 255
    27c4:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    27c6:	8d 81       	ldd	r24, Y+5	; 0x05
    27c8:	81 30       	cpi	r24, 0x01	; 1
    27ca:	71 f4       	brne	.+28     	; 0x27e8 <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    27cc:	80 91 a0 04 	lds	r24, 0x04A0
    27d0:	88 23       	and	r24, r24
    27d2:	51 f0       	breq	.+20     	; 0x27e8 <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    27d4:	e0 91 98 04 	lds	r30, 0x0498
    27d8:	f0 91 99 04 	lds	r31, 0x0499
    27dc:	96 89       	ldd	r25, Z+22	; 0x16
    27de:	8e 85       	ldd	r24, Y+14	; 0x0e
    27e0:	98 17       	cp	r25, r24
    27e2:	10 f4       	brcc	.+4      	; 0x27e8 <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    27e4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
			}
		}
	}

	return xReturn;
    27e8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    27ea:	64 96       	adiw	r28, 0x14	; 20
    27ec:	0f b6       	in	r0, 0x3f	; 63
    27ee:	f8 94       	cli
    27f0:	de bf       	out	0x3e, r29	; 62
    27f2:	0f be       	out	0x3f, r0	; 63
    27f4:	cd bf       	out	0x3d, r28	; 61
    27f6:	cf 91       	pop	r28
    27f8:	df 91       	pop	r29
    27fa:	1f 91       	pop	r17
    27fc:	0f 91       	pop	r16
    27fe:	ff 90       	pop	r15
    2800:	ef 90       	pop	r14
    2802:	df 90       	pop	r13
    2804:	cf 90       	pop	r12
    2806:	bf 90       	pop	r11
    2808:	af 90       	pop	r10
    280a:	08 95       	ret

0000280c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    280c:	df 93       	push	r29
    280e:	cf 93       	push	r28
    2810:	00 d0       	rcall	.+0      	; 0x2812 <vTaskDelete+0x6>
    2812:	00 d0       	rcall	.+0      	; 0x2814 <vTaskDelete+0x8>
    2814:	00 d0       	rcall	.+0      	; 0x2816 <vTaskDelete+0xa>
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
    281a:	9c 83       	std	Y+4, r25	; 0x04
    281c:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    2824:	20 91 98 04 	lds	r18, 0x0498
    2828:	30 91 99 04 	lds	r19, 0x0499
    282c:	8b 81       	ldd	r24, Y+3	; 0x03
    282e:	9c 81       	ldd	r25, Y+4	; 0x04
    2830:	82 17       	cp	r24, r18
    2832:	93 07       	cpc	r25, r19
    2834:	11 f4       	brne	.+4      	; 0x283a <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    2836:	1c 82       	std	Y+4, r1	; 0x04
    2838:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    283a:	8b 81       	ldd	r24, Y+3	; 0x03
    283c:	9c 81       	ldd	r25, Y+4	; 0x04
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	39 f4       	brne	.+14     	; 0x2850 <vTaskDelete+0x44>
    2842:	80 91 98 04 	lds	r24, 0x0498
    2846:	90 91 99 04 	lds	r25, 0x0499
    284a:	9e 83       	std	Y+6, r25	; 0x06
    284c:	8d 83       	std	Y+5, r24	; 0x05
    284e:	04 c0       	rjmp	.+8      	; 0x2858 <vTaskDelete+0x4c>
    2850:	8b 81       	ldd	r24, Y+3	; 0x03
    2852:	9c 81       	ldd	r25, Y+4	; 0x04
    2854:	9e 83       	std	Y+6, r25	; 0x06
    2856:	8d 83       	std	Y+5, r24	; 0x05
    2858:	8d 81       	ldd	r24, Y+5	; 0x05
    285a:	9e 81       	ldd	r25, Y+6	; 0x06
    285c:	9a 83       	std	Y+2, r25	; 0x02
    285e:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	9a 81       	ldd	r25, Y+2	; 0x02
    2864:	02 96       	adiw	r24, 0x02	; 2
    2866:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    286a:	e9 81       	ldd	r30, Y+1	; 0x01
    286c:	fa 81       	ldd	r31, Y+2	; 0x02
    286e:	84 89       	ldd	r24, Z+20	; 0x14
    2870:	95 89       	ldd	r25, Z+21	; 0x15
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	29 f0       	breq	.+10     	; 0x2880 <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	9a 81       	ldd	r25, Y+2	; 0x02
    287a:	0c 96       	adiw	r24, 0x0c	; 12
    287c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	9a 81       	ldd	r25, Y+2	; 0x02
    2884:	9c 01       	movw	r18, r24
    2886:	2e 5f       	subi	r18, 0xFE	; 254
    2888:	3f 4f       	sbci	r19, 0xFF	; 255
    288a:	89 ee       	ldi	r24, 0xE9	; 233
    288c:	94 e0       	ldi	r25, 0x04	; 4
    288e:	b9 01       	movw	r22, r18
    2890:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    2894:	80 91 9a 04 	lds	r24, 0x049A
    2898:	8f 5f       	subi	r24, 0xFF	; 255
    289a:	80 93 9a 04 	sts	0x049A, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    289e:	80 91 a5 04 	lds	r24, 0x04A5
    28a2:	8f 5f       	subi	r24, 0xFF	; 255
    28a4:	80 93 a5 04 	sts	0x04A5, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    28a8:	0f 90       	pop	r0
    28aa:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    28ac:	80 91 a0 04 	lds	r24, 0x04A0
    28b0:	88 23       	and	r24, r24
    28b2:	31 f0       	breq	.+12     	; 0x28c0 <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    28b4:	8b 81       	ldd	r24, Y+3	; 0x03
    28b6:	9c 81       	ldd	r25, Y+4	; 0x04
    28b8:	00 97       	sbiw	r24, 0x00	; 0
    28ba:	11 f4       	brne	.+4      	; 0x28c0 <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    28bc:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
			}
		}
	}
    28c0:	26 96       	adiw	r28, 0x06	; 6
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	cd bf       	out	0x3d, r28	; 61
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	08 95       	ret

000028d2 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    28d2:	df 93       	push	r29
    28d4:	cf 93       	push	r28
    28d6:	cd b7       	in	r28, 0x3d	; 61
    28d8:	de b7       	in	r29, 0x3e	; 62
    28da:	28 97       	sbiw	r28, 0x08	; 8
    28dc:	0f b6       	in	r0, 0x3f	; 63
    28de:	f8 94       	cli
    28e0:	de bf       	out	0x3e, r29	; 62
    28e2:	0f be       	out	0x3f, r0	; 63
    28e4:	cd bf       	out	0x3d, r28	; 61
    28e6:	9e 83       	std	Y+6, r25	; 0x06
    28e8:	8d 83       	std	Y+5, r24	; 0x05
    28ea:	78 87       	std	Y+8, r23	; 0x08
    28ec:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    28ee:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    28f0:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    28f4:	ed 81       	ldd	r30, Y+5	; 0x05
    28f6:	fe 81       	ldd	r31, Y+6	; 0x06
    28f8:	20 81       	ld	r18, Z
    28fa:	31 81       	ldd	r19, Z+1	; 0x01
    28fc:	8f 81       	ldd	r24, Y+7	; 0x07
    28fe:	98 85       	ldd	r25, Y+8	; 0x08
    2900:	82 0f       	add	r24, r18
    2902:	93 1f       	adc	r25, r19
    2904:	9c 83       	std	Y+4, r25	; 0x04
    2906:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    2908:	ed 81       	ldd	r30, Y+5	; 0x05
    290a:	fe 81       	ldd	r31, Y+6	; 0x06
    290c:	20 81       	ld	r18, Z
    290e:	31 81       	ldd	r19, Z+1	; 0x01
    2910:	80 91 9c 04 	lds	r24, 0x049C
    2914:	90 91 9d 04 	lds	r25, 0x049D
    2918:	82 17       	cp	r24, r18
    291a:	93 07       	cpc	r25, r19
    291c:	a8 f4       	brcc	.+42     	; 0x2948 <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    291e:	ed 81       	ldd	r30, Y+5	; 0x05
    2920:	fe 81       	ldd	r31, Y+6	; 0x06
    2922:	20 81       	ld	r18, Z
    2924:	31 81       	ldd	r19, Z+1	; 0x01
    2926:	8b 81       	ldd	r24, Y+3	; 0x03
    2928:	9c 81       	ldd	r25, Y+4	; 0x04
    292a:	82 17       	cp	r24, r18
    292c:	93 07       	cpc	r25, r19
    292e:	00 f5       	brcc	.+64     	; 0x2970 <vTaskDelayUntil+0x9e>
    2930:	20 91 9c 04 	lds	r18, 0x049C
    2934:	30 91 9d 04 	lds	r19, 0x049D
    2938:	8b 81       	ldd	r24, Y+3	; 0x03
    293a:	9c 81       	ldd	r25, Y+4	; 0x04
    293c:	28 17       	cp	r18, r24
    293e:	39 07       	cpc	r19, r25
    2940:	b8 f4       	brcc	.+46     	; 0x2970 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	89 83       	std	Y+1, r24	; 0x01
    2946:	14 c0       	rjmp	.+40     	; 0x2970 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    2948:	ed 81       	ldd	r30, Y+5	; 0x05
    294a:	fe 81       	ldd	r31, Y+6	; 0x06
    294c:	20 81       	ld	r18, Z
    294e:	31 81       	ldd	r19, Z+1	; 0x01
    2950:	8b 81       	ldd	r24, Y+3	; 0x03
    2952:	9c 81       	ldd	r25, Y+4	; 0x04
    2954:	82 17       	cp	r24, r18
    2956:	93 07       	cpc	r25, r19
    2958:	48 f0       	brcs	.+18     	; 0x296c <vTaskDelayUntil+0x9a>
    295a:	20 91 9c 04 	lds	r18, 0x049C
    295e:	30 91 9d 04 	lds	r19, 0x049D
    2962:	8b 81       	ldd	r24, Y+3	; 0x03
    2964:	9c 81       	ldd	r25, Y+4	; 0x04
    2966:	28 17       	cp	r18, r24
    2968:	39 07       	cpc	r19, r25
    296a:	10 f4       	brcc	.+4      	; 0x2970 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    2970:	ed 81       	ldd	r30, Y+5	; 0x05
    2972:	fe 81       	ldd	r31, Y+6	; 0x06
    2974:	8b 81       	ldd	r24, Y+3	; 0x03
    2976:	9c 81       	ldd	r25, Y+4	; 0x04
    2978:	91 83       	std	Z+1, r25	; 0x01
    297a:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	88 23       	and	r24, r24
    2980:	59 f0       	breq	.+22     	; 0x2998 <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2982:	80 91 98 04 	lds	r24, 0x0498
    2986:	90 91 99 04 	lds	r25, 0x0499
    298a:	02 96       	adiw	r24, 0x02	; 2
    298c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2990:	8b 81       	ldd	r24, Y+3	; 0x03
    2992:	9c 81       	ldd	r25, Y+4	; 0x04
    2994:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    2998:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <xTaskResumeAll>
    299c:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    299e:	8a 81       	ldd	r24, Y+2	; 0x02
    29a0:	88 23       	and	r24, r24
    29a2:	11 f4       	brne	.+4      	; 0x29a8 <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    29a4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
		}
	}
    29a8:	28 96       	adiw	r28, 0x08	; 8
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	08 95       	ret

000029ba <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	00 d0       	rcall	.+0      	; 0x29c0 <vTaskDelay+0x6>
    29c0:	00 d0       	rcall	.+0      	; 0x29c2 <vTaskDelay+0x8>
    29c2:	0f 92       	push	r0
    29c4:	cd b7       	in	r28, 0x3d	; 61
    29c6:	de b7       	in	r29, 0x3e	; 62
    29c8:	9d 83       	std	Y+5, r25	; 0x05
    29ca:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    29cc:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    29ce:	8c 81       	ldd	r24, Y+4	; 0x04
    29d0:	9d 81       	ldd	r25, Y+5	; 0x05
    29d2:	00 97       	sbiw	r24, 0x00	; 0
    29d4:	d1 f0       	breq	.+52     	; 0x2a0a <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    29d6:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    29da:	20 91 9c 04 	lds	r18, 0x049C
    29de:	30 91 9d 04 	lds	r19, 0x049D
    29e2:	8c 81       	ldd	r24, Y+4	; 0x04
    29e4:	9d 81       	ldd	r25, Y+5	; 0x05
    29e6:	82 0f       	add	r24, r18
    29e8:	93 1f       	adc	r25, r19
    29ea:	9b 83       	std	Y+3, r25	; 0x03
    29ec:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    29ee:	80 91 98 04 	lds	r24, 0x0498
    29f2:	90 91 99 04 	lds	r25, 0x0499
    29f6:	02 96       	adiw	r24, 0x02	; 2
    29f8:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    29fc:	8a 81       	ldd	r24, Y+2	; 0x02
    29fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2a00:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    2a04:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <xTaskResumeAll>
    2a08:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
    2a0c:	88 23       	and	r24, r24
    2a0e:	11 f4       	brne	.+4      	; 0x2a14 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    2a10:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
		}
	}
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	0f 90       	pop	r0
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	00 d0       	rcall	.+0      	; 0x2a2a <vTaskSuspend+0x6>
    2a2a:	00 d0       	rcall	.+0      	; 0x2a2c <vTaskSuspend+0x8>
    2a2c:	00 d0       	rcall	.+0      	; 0x2a2e <vTaskSuspend+0xa>
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
    2a32:	9c 83       	std	Y+4, r25	; 0x04
    2a34:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    2a36:	0f b6       	in	r0, 0x3f	; 63
    2a38:	f8 94       	cli
    2a3a:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    2a3c:	20 91 98 04 	lds	r18, 0x0498
    2a40:	30 91 99 04 	lds	r19, 0x0499
    2a44:	8b 81       	ldd	r24, Y+3	; 0x03
    2a46:	9c 81       	ldd	r25, Y+4	; 0x04
    2a48:	82 17       	cp	r24, r18
    2a4a:	93 07       	cpc	r25, r19
    2a4c:	11 f4       	brne	.+4      	; 0x2a52 <vTaskSuspend+0x2e>
			{
				pxTaskToSuspend = NULL;
    2a4e:	1c 82       	std	Y+4, r1	; 0x04
    2a50:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    2a52:	8b 81       	ldd	r24, Y+3	; 0x03
    2a54:	9c 81       	ldd	r25, Y+4	; 0x04
    2a56:	00 97       	sbiw	r24, 0x00	; 0
    2a58:	39 f4       	brne	.+14     	; 0x2a68 <vTaskSuspend+0x44>
    2a5a:	80 91 98 04 	lds	r24, 0x0498
    2a5e:	90 91 99 04 	lds	r25, 0x0499
    2a62:	9e 83       	std	Y+6, r25	; 0x06
    2a64:	8d 83       	std	Y+5, r24	; 0x05
    2a66:	04 c0       	rjmp	.+8      	; 0x2a70 <vTaskSuspend+0x4c>
    2a68:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6c:	9e 83       	std	Y+6, r25	; 0x06
    2a6e:	8d 83       	std	Y+5, r24	; 0x05
    2a70:	8d 81       	ldd	r24, Y+5	; 0x05
    2a72:	9e 81       	ldd	r25, Y+6	; 0x06
    2a74:	9a 83       	std	Y+2, r25	; 0x02
    2a76:	89 83       	std	Y+1, r24	; 0x01

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7c:	02 96       	adiw	r24, 0x02	; 2
    2a7e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    2a82:	e9 81       	ldd	r30, Y+1	; 0x01
    2a84:	fa 81       	ldd	r31, Y+2	; 0x02
    2a86:	84 89       	ldd	r24, Z+20	; 0x14
    2a88:	95 89       	ldd	r25, Z+21	; 0x15
    2a8a:	00 97       	sbiw	r24, 0x00	; 0
    2a8c:	29 f0       	breq	.+10     	; 0x2a98 <vTaskSuspend+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	9a 81       	ldd	r25, Y+2	; 0x02
    2a92:	0c 96       	adiw	r24, 0x0c	; 12
    2a94:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9c:	9c 01       	movw	r18, r24
    2a9e:	2e 5f       	subi	r18, 0xFE	; 254
    2aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa2:	82 ef       	ldi	r24, 0xF2	; 242
    2aa4:	94 e0       	ldi	r25, 0x04	; 4
    2aa6:	b9 01       	movw	r22, r18
    2aa8:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    2aac:	0f 90       	pop	r0
    2aae:	0f be       	out	0x3f, r0	; 63

		if( ( void * ) pxTaskToSuspend == NULL )
    2ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab4:	00 97       	sbiw	r24, 0x00	; 0
    2ab6:	a1 f4       	brne	.+40     	; 0x2ae0 <vTaskSuspend+0xbc>
		{
			if( xSchedulerRunning != pdFALSE )
    2ab8:	80 91 a0 04 	lds	r24, 0x04A0
    2abc:	88 23       	and	r24, r24
    2abe:	19 f0       	breq	.+6      	; 0x2ac6 <vTaskSuspend+0xa2>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    2ac0:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
    2ac4:	0d c0       	rjmp	.+26     	; 0x2ae0 <vTaskSuspend+0xbc>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    2ac6:	90 91 f2 04 	lds	r25, 0x04F2
    2aca:	80 91 9b 04 	lds	r24, 0x049B
    2ace:	98 17       	cp	r25, r24
    2ad0:	29 f4       	brne	.+10     	; 0x2adc <vTaskSuspend+0xb8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    2ad2:	10 92 99 04 	sts	0x0499, r1
    2ad6:	10 92 98 04 	sts	0x0498, r1
    2ada:	02 c0       	rjmp	.+4      	; 0x2ae0 <vTaskSuspend+0xbc>
				}
				else
				{
					vTaskSwitchContext();
    2adc:	0e 94 54 18 	call	0x30a8	; 0x30a8 <vTaskSwitchContext>
				}
			}
		}
	}
    2ae0:	26 96       	adiw	r28, 0x06	; 6
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	f8 94       	cli
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	cd bf       	out	0x3d, r28	; 61
    2aec:	cf 91       	pop	r28
    2aee:	df 91       	pop	r29
    2af0:	08 95       	ret

00002af2 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    2af2:	df 93       	push	r29
    2af4:	cf 93       	push	r28
    2af6:	00 d0       	rcall	.+0      	; 0x2af8 <xTaskIsTaskSuspended+0x6>
    2af8:	00 d0       	rcall	.+0      	; 0x2afa <xTaskIsTaskSuspended+0x8>
    2afa:	0f 92       	push	r0
    2afc:	cd b7       	in	r28, 0x3d	; 61
    2afe:	de b7       	in	r29, 0x3e	; 62
    2b00:	9d 83       	std	Y+5, r25	; 0x05
    2b02:	8c 83       	std	Y+4, r24	; 0x04
	portBASE_TYPE xReturn = pdFALSE;
    2b04:	1b 82       	std	Y+3, r1	; 0x03
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    2b06:	8c 81       	ldd	r24, Y+4	; 0x04
    2b08:	9d 81       	ldd	r25, Y+5	; 0x05
    2b0a:	9a 83       	std	Y+2, r25	; 0x02
    2b0c:	89 83       	std	Y+1, r24	; 0x01
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    2b0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b10:	fa 81       	ldd	r31, Y+2	; 0x02
    2b12:	82 85       	ldd	r24, Z+10	; 0x0a
    2b14:	93 85       	ldd	r25, Z+11	; 0x0b
    2b16:	24 e0       	ldi	r18, 0x04	; 4
    2b18:	82 3f       	cpi	r24, 0xF2	; 242
    2b1a:	92 07       	cpc	r25, r18
    2b1c:	81 f4       	brne	.+32     	; 0x2b3e <xTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    2b1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b20:	fa 81       	ldd	r31, Y+2	; 0x02
    2b22:	84 89       	ldd	r24, Z+20	; 0x14
    2b24:	95 89       	ldd	r25, Z+21	; 0x15
    2b26:	24 e0       	ldi	r18, 0x04	; 4
    2b28:	80 3e       	cpi	r24, 0xE0	; 224
    2b2a:	92 07       	cpc	r25, r18
    2b2c:	41 f0       	breq	.+16     	; 0x2b3e <xTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    2b2e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b30:	fa 81       	ldd	r31, Y+2	; 0x02
    2b32:	84 89       	ldd	r24, Z+20	; 0x14
    2b34:	95 89       	ldd	r25, Z+21	; 0x15
    2b36:	00 97       	sbiw	r24, 0x00	; 0
    2b38:	11 f4       	brne	.+4      	; 0x2b3e <xTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}

		return xReturn;
    2b3e:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    2b40:	0f 90       	pop	r0
    2b42:	0f 90       	pop	r0
    2b44:	0f 90       	pop	r0
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	cf 91       	pop	r28
    2b4c:	df 91       	pop	r29
    2b4e:	08 95       	ret

00002b50 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    2b50:	df 93       	push	r29
    2b52:	cf 93       	push	r28
    2b54:	00 d0       	rcall	.+0      	; 0x2b56 <vTaskResume+0x6>
    2b56:	00 d0       	rcall	.+0      	; 0x2b58 <vTaskResume+0x8>
    2b58:	cd b7       	in	r28, 0x3d	; 61
    2b5a:	de b7       	in	r29, 0x3e	; 62
    2b5c:	9c 83       	std	Y+4, r25	; 0x04
    2b5e:	8b 83       	std	Y+3, r24	; 0x03
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    2b60:	8b 81       	ldd	r24, Y+3	; 0x03
    2b62:	9c 81       	ldd	r25, Y+4	; 0x04
    2b64:	9a 83       	std	Y+2, r25	; 0x02
    2b66:	89 83       	std	Y+1, r24	; 0x01

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6c:	00 97       	sbiw	r24, 0x00	; 0
    2b6e:	09 f4       	brne	.+2      	; 0x2b72 <vTaskResume+0x22>
    2b70:	4c c0       	rjmp	.+152    	; 0x2c0a <vTaskResume+0xba>
    2b72:	20 91 98 04 	lds	r18, 0x0498
    2b76:	30 91 99 04 	lds	r19, 0x0499
    2b7a:	89 81       	ldd	r24, Y+1	; 0x01
    2b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7e:	82 17       	cp	r24, r18
    2b80:	93 07       	cpc	r25, r19
    2b82:	09 f4       	brne	.+2      	; 0x2b86 <vTaskResume+0x36>
    2b84:	42 c0       	rjmp	.+132    	; 0x2c0a <vTaskResume+0xba>
		{
			taskENTER_CRITICAL();
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	f8 94       	cli
    2b8a:	0f 92       	push	r0
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    2b8c:	89 81       	ldd	r24, Y+1	; 0x01
    2b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b90:	0e 94 79 15 	call	0x2af2	; 0x2af2 <xTaskIsTaskSuspended>
    2b94:	81 30       	cpi	r24, 0x01	; 1
    2b96:	b9 f5       	brne	.+110    	; 0x2c06 <vTaskResume+0xb6>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9c:	02 96       	adiw	r24, 0x02	; 2
    2b9e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    2ba2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ba4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ba6:	96 89       	ldd	r25, Z+22	; 0x16
    2ba8:	80 91 9f 04 	lds	r24, 0x049F
    2bac:	89 17       	cp	r24, r25
    2bae:	28 f4       	brcc	.+10     	; 0x2bba <vTaskResume+0x6a>
    2bb0:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb2:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb4:	86 89       	ldd	r24, Z+22	; 0x16
    2bb6:	80 93 9f 04 	sts	0x049F, r24
    2bba:	e9 81       	ldd	r30, Y+1	; 0x01
    2bbc:	fa 81       	ldd	r31, Y+2	; 0x02
    2bbe:	86 89       	ldd	r24, Z+22	; 0x16
    2bc0:	28 2f       	mov	r18, r24
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	c9 01       	movw	r24, r18
    2bc6:	88 0f       	add	r24, r24
    2bc8:	99 1f       	adc	r25, r25
    2bca:	88 0f       	add	r24, r24
    2bcc:	99 1f       	adc	r25, r25
    2bce:	88 0f       	add	r24, r24
    2bd0:	99 1f       	adc	r25, r25
    2bd2:	82 0f       	add	r24, r18
    2bd4:	93 1f       	adc	r25, r19
    2bd6:	ac 01       	movw	r20, r24
    2bd8:	4a 55       	subi	r20, 0x5A	; 90
    2bda:	5b 4f       	sbci	r21, 0xFB	; 251
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	9a 81       	ldd	r25, Y+2	; 0x02
    2be0:	9c 01       	movw	r18, r24
    2be2:	2e 5f       	subi	r18, 0xFE	; 254
    2be4:	3f 4f       	sbci	r19, 0xFF	; 255
    2be6:	ca 01       	movw	r24, r20
    2be8:	b9 01       	movw	r22, r18
    2bea:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2bee:	e9 81       	ldd	r30, Y+1	; 0x01
    2bf0:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf2:	96 89       	ldd	r25, Z+22	; 0x16
    2bf4:	e0 91 98 04 	lds	r30, 0x0498
    2bf8:	f0 91 99 04 	lds	r31, 0x0499
    2bfc:	86 89       	ldd	r24, Z+22	; 0x16
    2bfe:	98 17       	cp	r25, r24
    2c00:	10 f0       	brcs	.+4      	; 0x2c06 <vTaskResume+0xb6>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    2c02:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
    2c06:	0f 90       	pop	r0
    2c08:	0f be       	out	0x3f, r0	; 63
		}
	}
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	0f 90       	pop	r0
    2c12:	cf 91       	pop	r28
    2c14:	df 91       	pop	r29
    2c16:	08 95       	ret

00002c18 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    2c18:	df 93       	push	r29
    2c1a:	cf 93       	push	r28
    2c1c:	00 d0       	rcall	.+0      	; 0x2c1e <xTaskResumeFromISR+0x6>
    2c1e:	00 d0       	rcall	.+0      	; 0x2c20 <xTaskResumeFromISR+0x8>
    2c20:	0f 92       	push	r0
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	9d 83       	std	Y+5, r25	; 0x05
    2c28:	8c 83       	std	Y+4, r24	; 0x04
	portBASE_TYPE xYieldRequired = pdFALSE;
    2c2a:	1b 82       	std	Y+3, r1	; 0x03
	tskTCB *pxTCB;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    2c2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c2e:	9d 81       	ldd	r25, Y+5	; 0x05
    2c30:	9a 83       	std	Y+2, r25	; 0x02
    2c32:	89 83       	std	Y+1, r24	; 0x01

		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	9a 81       	ldd	r25, Y+2	; 0x02
    2c38:	0e 94 79 15 	call	0x2af2	; 0x2af2 <xTaskIsTaskSuspended>
    2c3c:	81 30       	cpi	r24, 0x01	; 1
    2c3e:	09 f0       	breq	.+2      	; 0x2c42 <xTaskResumeFromISR+0x2a>
    2c40:	47 c0       	rjmp	.+142    	; 0x2cd0 <xTaskResumeFromISR+0xb8>
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2c42:	80 91 a1 04 	lds	r24, 0x04A1
    2c46:	88 23       	and	r24, r24
    2c48:	c9 f5       	brne	.+114    	; 0x2cbc <xTaskResumeFromISR+0xa4>
			{
				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    2c4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c4e:	96 89       	ldd	r25, Z+22	; 0x16
    2c50:	e0 91 98 04 	lds	r30, 0x0498
    2c54:	f0 91 99 04 	lds	r31, 0x0499
    2c58:	86 89       	ldd	r24, Z+22	; 0x16
    2c5a:	1b 82       	std	Y+3, r1	; 0x03
    2c5c:	98 17       	cp	r25, r24
    2c5e:	10 f0       	brcs	.+4      	; 0x2c64 <xTaskResumeFromISR+0x4c>
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	8b 83       	std	Y+3, r24	; 0x03
				vListRemove(  &( pxTCB->xGenericListItem ) );
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
    2c66:	9a 81       	ldd	r25, Y+2	; 0x02
    2c68:	02 96       	adiw	r24, 0x02	; 2
    2c6a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
				prvAddTaskToReadyQueue( pxTCB );
    2c6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c70:	fa 81       	ldd	r31, Y+2	; 0x02
    2c72:	96 89       	ldd	r25, Z+22	; 0x16
    2c74:	80 91 9f 04 	lds	r24, 0x049F
    2c78:	89 17       	cp	r24, r25
    2c7a:	28 f4       	brcc	.+10     	; 0x2c86 <xTaskResumeFromISR+0x6e>
    2c7c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c7e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c80:	86 89       	ldd	r24, Z+22	; 0x16
    2c82:	80 93 9f 04 	sts	0x049F, r24
    2c86:	e9 81       	ldd	r30, Y+1	; 0x01
    2c88:	fa 81       	ldd	r31, Y+2	; 0x02
    2c8a:	86 89       	ldd	r24, Z+22	; 0x16
    2c8c:	28 2f       	mov	r18, r24
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	c9 01       	movw	r24, r18
    2c92:	88 0f       	add	r24, r24
    2c94:	99 1f       	adc	r25, r25
    2c96:	88 0f       	add	r24, r24
    2c98:	99 1f       	adc	r25, r25
    2c9a:	88 0f       	add	r24, r24
    2c9c:	99 1f       	adc	r25, r25
    2c9e:	82 0f       	add	r24, r18
    2ca0:	93 1f       	adc	r25, r19
    2ca2:	ac 01       	movw	r20, r24
    2ca4:	4a 55       	subi	r20, 0x5A	; 90
    2ca6:	5b 4f       	sbci	r21, 0xFB	; 251
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	9a 81       	ldd	r25, Y+2	; 0x02
    2cac:	9c 01       	movw	r18, r24
    2cae:	2e 5f       	subi	r18, 0xFE	; 254
    2cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb2:	ca 01       	movw	r24, r20
    2cb4:	b9 01       	movw	r22, r18
    2cb6:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
    2cba:	0a c0       	rjmp	.+20     	; 0x2cd0 <xTaskResumeFromISR+0xb8>
			else
			{
				/* We cannot access the delayed or ready lists, so will hold this
				task pending until the scheduler is resumed, at which point a
				yield will be performed if necessary. */
				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    2cbc:	89 81       	ldd	r24, Y+1	; 0x01
    2cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc0:	9c 01       	movw	r18, r24
    2cc2:	24 5f       	subi	r18, 0xF4	; 244
    2cc4:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc6:	80 ee       	ldi	r24, 0xE0	; 224
    2cc8:	94 e0       	ldi	r25, 0x04	; 4
    2cca:	b9 01       	movw	r22, r18
    2ccc:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
			}
		}

		return xYieldRequired;
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	cf 91       	pop	r28
    2cde:	df 91       	pop	r29
    2ce0:	08 95       	ret

00002ce2 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    2ce2:	af 92       	push	r10
    2ce4:	bf 92       	push	r11
    2ce6:	cf 92       	push	r12
    2ce8:	df 92       	push	r13
    2cea:	ef 92       	push	r14
    2cec:	ff 92       	push	r15
    2cee:	0f 93       	push	r16
    2cf0:	df 93       	push	r29
    2cf2:	cf 93       	push	r28
    2cf4:	0f 92       	push	r0
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    2cfa:	24 e6       	ldi	r18, 0x64	; 100
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	85 ef       	ldi	r24, 0xF5	; 245
    2d00:	99 e1       	ldi	r25, 0x19	; 25
    2d02:	b9 01       	movw	r22, r18
    2d04:	4a ef       	ldi	r20, 0xFA	; 250
    2d06:	50 e0       	ldi	r21, 0x00	; 0
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	00 e0       	ldi	r16, 0x00	; 0
    2d0e:	ee 24       	eor	r14, r14
    2d10:	ff 24       	eor	r15, r15
    2d12:	cc 24       	eor	r12, r12
    2d14:	dd 24       	eor	r13, r13
    2d16:	aa 24       	eor	r10, r10
    2d18:	bb 24       	eor	r11, r11
    2d1a:	0e 94 19 13 	call	0x2632	; 0x2632 <xTaskGenericCreate>
    2d1e:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	81 30       	cpi	r24, 0x01	; 1
    2d24:	51 f4       	brne	.+20     	; 0x2d3a <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    2d26:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	80 93 a0 04 	sts	0x04A0, r24
		xTickCount = ( portTickType ) 0U;
    2d2e:	10 92 9d 04 	sts	0x049D, r1
    2d32:	10 92 9c 04 	sts	0x049C, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2d36:	0e 94 a5 0b 	call	0x174a	; 0x174a <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    2d3a:	0f 90       	pop	r0
    2d3c:	cf 91       	pop	r28
    2d3e:	df 91       	pop	r29
    2d40:	0f 91       	pop	r16
    2d42:	ff 90       	pop	r15
    2d44:	ef 90       	pop	r14
    2d46:	df 90       	pop	r13
    2d48:	cf 90       	pop	r12
    2d4a:	bf 90       	pop	r11
    2d4c:	af 90       	pop	r10
    2d4e:	08 95       	ret

00002d50 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    2d50:	df 93       	push	r29
    2d52:	cf 93       	push	r28
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    2d58:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    2d5a:	10 92 a0 04 	sts	0x04A0, r1
	vPortEndScheduler();
    2d5e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <vPortEndScheduler>
}
    2d62:	cf 91       	pop	r28
    2d64:	df 91       	pop	r29
    2d66:	08 95       	ret

00002d68 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    2d68:	df 93       	push	r29
    2d6a:	cf 93       	push	r28
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    2d70:	80 91 a1 04 	lds	r24, 0x04A1
    2d74:	8f 5f       	subi	r24, 0xFF	; 255
    2d76:	80 93 a1 04 	sts	0x04A1, r24
}
    2d7a:	cf 91       	pop	r28
    2d7c:	df 91       	pop	r29
    2d7e:	08 95       	ret

00002d80 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    2d80:	df 93       	push	r29
    2d82:	cf 93       	push	r28
    2d84:	00 d0       	rcall	.+0      	; 0x2d86 <xTaskResumeAll+0x6>
    2d86:	00 d0       	rcall	.+0      	; 0x2d88 <xTaskResumeAll+0x8>
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    2d8c:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    2d94:	80 91 a1 04 	lds	r24, 0x04A1
    2d98:	81 50       	subi	r24, 0x01	; 1
    2d9a:	80 93 a1 04 	sts	0x04A1, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2d9e:	80 91 a1 04 	lds	r24, 0x04A1
    2da2:	88 23       	and	r24, r24
    2da4:	09 f0       	breq	.+2      	; 0x2da8 <xTaskResumeAll+0x28>
    2da6:	6c c0       	rjmp	.+216    	; 0x2e80 <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    2da8:	80 91 9b 04 	lds	r24, 0x049B
    2dac:	88 23       	and	r24, r24
    2dae:	09 f4       	brne	.+2      	; 0x2db2 <xTaskResumeAll+0x32>
    2db0:	67 c0       	rjmp	.+206    	; 0x2e80 <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    2db2:	19 82       	std	Y+1, r1	; 0x01
    2db4:	41 c0       	rjmp	.+130    	; 0x2e38 <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    2db6:	e0 91 e5 04 	lds	r30, 0x04E5
    2dba:	f0 91 e6 04 	lds	r31, 0x04E6
    2dbe:	86 81       	ldd	r24, Z+6	; 0x06
    2dc0:	97 81       	ldd	r25, Z+7	; 0x07
    2dc2:	9c 83       	std	Y+4, r25	; 0x04
    2dc4:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    2dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dca:	0c 96       	adiw	r24, 0x0c	; 12
    2dcc:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    2dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd4:	02 96       	adiw	r24, 0x02	; 2
    2dd6:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    2dda:	eb 81       	ldd	r30, Y+3	; 0x03
    2ddc:	fc 81       	ldd	r31, Y+4	; 0x04
    2dde:	96 89       	ldd	r25, Z+22	; 0x16
    2de0:	80 91 9f 04 	lds	r24, 0x049F
    2de4:	89 17       	cp	r24, r25
    2de6:	28 f4       	brcc	.+10     	; 0x2df2 <xTaskResumeAll+0x72>
    2de8:	eb 81       	ldd	r30, Y+3	; 0x03
    2dea:	fc 81       	ldd	r31, Y+4	; 0x04
    2dec:	86 89       	ldd	r24, Z+22	; 0x16
    2dee:	80 93 9f 04 	sts	0x049F, r24
    2df2:	eb 81       	ldd	r30, Y+3	; 0x03
    2df4:	fc 81       	ldd	r31, Y+4	; 0x04
    2df6:	86 89       	ldd	r24, Z+22	; 0x16
    2df8:	28 2f       	mov	r18, r24
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	c9 01       	movw	r24, r18
    2dfe:	88 0f       	add	r24, r24
    2e00:	99 1f       	adc	r25, r25
    2e02:	88 0f       	add	r24, r24
    2e04:	99 1f       	adc	r25, r25
    2e06:	88 0f       	add	r24, r24
    2e08:	99 1f       	adc	r25, r25
    2e0a:	82 0f       	add	r24, r18
    2e0c:	93 1f       	adc	r25, r19
    2e0e:	8a 55       	subi	r24, 0x5A	; 90
    2e10:	9b 4f       	sbci	r25, 0xFB	; 251
    2e12:	2b 81       	ldd	r18, Y+3	; 0x03
    2e14:	3c 81       	ldd	r19, Y+4	; 0x04
    2e16:	2e 5f       	subi	r18, 0xFE	; 254
    2e18:	3f 4f       	sbci	r19, 0xFF	; 255
    2e1a:	b9 01       	movw	r22, r18
    2e1c:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2e20:	eb 81       	ldd	r30, Y+3	; 0x03
    2e22:	fc 81       	ldd	r31, Y+4	; 0x04
    2e24:	96 89       	ldd	r25, Z+22	; 0x16
    2e26:	e0 91 98 04 	lds	r30, 0x0498
    2e2a:	f0 91 99 04 	lds	r31, 0x0499
    2e2e:	86 89       	ldd	r24, Z+22	; 0x16
    2e30:	98 17       	cp	r25, r24
    2e32:	10 f0       	brcs	.+4      	; 0x2e38 <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    2e38:	80 91 e0 04 	lds	r24, 0x04E0
    2e3c:	88 23       	and	r24, r24
    2e3e:	09 f0       	breq	.+2      	; 0x2e42 <xTaskResumeAll+0xc2>
    2e40:	ba cf       	rjmp	.-140    	; 0x2db6 <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    2e42:	80 91 a2 04 	lds	r24, 0x04A2
    2e46:	88 23       	and	r24, r24
    2e48:	71 f0       	breq	.+28     	; 0x2e66 <xTaskResumeAll+0xe6>
    2e4a:	07 c0       	rjmp	.+14     	; 0x2e5a <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    2e4c:	0e 94 7f 17 	call	0x2efe	; 0x2efe <vTaskIncrementTick>
						--uxMissedTicks;
    2e50:	80 91 a2 04 	lds	r24, 0x04A2
    2e54:	81 50       	subi	r24, 0x01	; 1
    2e56:	80 93 a2 04 	sts	0x04A2, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    2e5a:	80 91 a2 04 	lds	r24, 0x04A2
    2e5e:	88 23       	and	r24, r24
    2e60:	a9 f7       	brne	.-22     	; 0x2e4c <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    2e66:	89 81       	ldd	r24, Y+1	; 0x01
    2e68:	81 30       	cpi	r24, 0x01	; 1
    2e6a:	21 f0       	breq	.+8      	; 0x2e74 <xTaskResumeAll+0xf4>
    2e6c:	80 91 a3 04 	lds	r24, 0x04A3
    2e70:	81 30       	cpi	r24, 0x01	; 1
    2e72:	31 f4       	brne	.+12     	; 0x2e80 <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    2e78:	10 92 a3 04 	sts	0x04A3, r1
					portYIELD_WITHIN_API();
    2e7c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    2e80:	0f 90       	pop	r0
    2e82:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    2e84:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2e86:	0f 90       	pop	r0
    2e88:	0f 90       	pop	r0
    2e8a:	0f 90       	pop	r0
    2e8c:	0f 90       	pop	r0
    2e8e:	cf 91       	pop	r28
    2e90:	df 91       	pop	r29
    2e92:	08 95       	ret

00002e94 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    2e94:	df 93       	push	r29
    2e96:	cf 93       	push	r28
    2e98:	00 d0       	rcall	.+0      	; 0x2e9a <xTaskGetTickCount+0x6>
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    2e9e:	0f b6       	in	r0, 0x3f	; 63
    2ea0:	f8 94       	cli
    2ea2:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    2ea4:	80 91 9c 04 	lds	r24, 0x049C
    2ea8:	90 91 9d 04 	lds	r25, 0x049D
    2eac:	9a 83       	std	Y+2, r25	; 0x02
    2eae:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    2eb0:	0f 90       	pop	r0
    2eb2:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
    2eb6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2eb8:	0f 90       	pop	r0
    2eba:	0f 90       	pop	r0
    2ebc:	cf 91       	pop	r28
    2ebe:	df 91       	pop	r29
    2ec0:	08 95       	ret

00002ec2 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    2ec2:	df 93       	push	r29
    2ec4:	cf 93       	push	r28
    2ec6:	00 d0       	rcall	.+0      	; 0x2ec8 <xTaskGetTickCountFromISR+0x6>
    2ec8:	0f 92       	push	r0
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2ece:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    2ed0:	80 91 9c 04 	lds	r24, 0x049C
    2ed4:	90 91 9d 04 	lds	r25, 0x049D
    2ed8:	9b 83       	std	Y+3, r25	; 0x03
    2eda:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2edc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ede:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2ee0:	0f 90       	pop	r0
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	cf 91       	pop	r28
    2ee8:	df 91       	pop	r29
    2eea:	08 95       	ret

00002eec <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    2eec:	df 93       	push	r29
    2eee:	cf 93       	push	r28
    2ef0:	cd b7       	in	r28, 0x3d	; 61
    2ef2:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    2ef4:	80 91 9b 04 	lds	r24, 0x049B
}
    2ef8:	cf 91       	pop	r28
    2efa:	df 91       	pop	r29
    2efc:	08 95       	ret

00002efe <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    2efe:	df 93       	push	r29
    2f00:	cf 93       	push	r28
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <vTaskIncrementTick+0x6>
    2f04:	00 d0       	rcall	.+0      	; 0x2f06 <vTaskIncrementTick+0x8>
    2f06:	00 d0       	rcall	.+0      	; 0x2f08 <vTaskIncrementTick+0xa>
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2f0c:	80 91 a1 04 	lds	r24, 0x04A1
    2f10:	88 23       	and	r24, r24
    2f12:	09 f0       	breq	.+2      	; 0x2f16 <vTaskIncrementTick+0x18>
    2f14:	bb c0       	rjmp	.+374    	; 0x308c <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    2f16:	80 91 9c 04 	lds	r24, 0x049C
    2f1a:	90 91 9d 04 	lds	r25, 0x049D
    2f1e:	01 96       	adiw	r24, 0x01	; 1
    2f20:	90 93 9d 04 	sts	0x049D, r25
    2f24:	80 93 9c 04 	sts	0x049C, r24
		if( xTickCount == ( portTickType ) 0U )
    2f28:	80 91 9c 04 	lds	r24, 0x049C
    2f2c:	90 91 9d 04 	lds	r25, 0x049D
    2f30:	00 97       	sbiw	r24, 0x00	; 0
    2f32:	d1 f5       	brne	.+116    	; 0x2fa8 <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    2f34:	80 91 dc 04 	lds	r24, 0x04DC
    2f38:	90 91 dd 04 	lds	r25, 0x04DD
    2f3c:	9c 83       	std	Y+4, r25	; 0x04
    2f3e:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    2f40:	80 91 de 04 	lds	r24, 0x04DE
    2f44:	90 91 df 04 	lds	r25, 0x04DF
    2f48:	90 93 dd 04 	sts	0x04DD, r25
    2f4c:	80 93 dc 04 	sts	0x04DC, r24
			pxOverflowDelayedTaskList = pxTemp;
    2f50:	8b 81       	ldd	r24, Y+3	; 0x03
    2f52:	9c 81       	ldd	r25, Y+4	; 0x04
    2f54:	90 93 df 04 	sts	0x04DF, r25
    2f58:	80 93 de 04 	sts	0x04DE, r24
			xNumOfOverflows++;
    2f5c:	80 91 a4 04 	lds	r24, 0x04A4
    2f60:	8f 5f       	subi	r24, 0xFF	; 255
    2f62:	80 93 a4 04 	sts	0x04A4, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2f66:	e0 91 dc 04 	lds	r30, 0x04DC
    2f6a:	f0 91 dd 04 	lds	r31, 0x04DD
    2f6e:	80 81       	ld	r24, Z
    2f70:	88 23       	and	r24, r24
    2f72:	39 f4       	brne	.+14     	; 0x2f82 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    2f74:	8f ef       	ldi	r24, 0xFF	; 255
    2f76:	9f ef       	ldi	r25, 0xFF	; 255
    2f78:	90 93 72 00 	sts	0x0072, r25
    2f7c:	80 93 71 00 	sts	0x0071, r24
    2f80:	13 c0       	rjmp	.+38     	; 0x2fa8 <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2f82:	e0 91 dc 04 	lds	r30, 0x04DC
    2f86:	f0 91 dd 04 	lds	r31, 0x04DD
    2f8a:	05 80       	ldd	r0, Z+5	; 0x05
    2f8c:	f6 81       	ldd	r31, Z+6	; 0x06
    2f8e:	e0 2d       	mov	r30, r0
    2f90:	86 81       	ldd	r24, Z+6	; 0x06
    2f92:	97 81       	ldd	r25, Z+7	; 0x07
    2f94:	9e 83       	std	Y+6, r25	; 0x06
    2f96:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    2f98:	ed 81       	ldd	r30, Y+5	; 0x05
    2f9a:	fe 81       	ldd	r31, Y+6	; 0x06
    2f9c:	82 81       	ldd	r24, Z+2	; 0x02
    2f9e:	93 81       	ldd	r25, Z+3	; 0x03
    2fa0:	90 93 72 00 	sts	0x0072, r25
    2fa4:	80 93 71 00 	sts	0x0071, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    2fa8:	20 91 9c 04 	lds	r18, 0x049C
    2fac:	30 91 9d 04 	lds	r19, 0x049D
    2fb0:	80 91 71 00 	lds	r24, 0x0071
    2fb4:	90 91 72 00 	lds	r25, 0x0072
    2fb8:	28 17       	cp	r18, r24
    2fba:	39 07       	cpc	r19, r25
    2fbc:	08 f4       	brcc	.+2      	; 0x2fc0 <vTaskIncrementTick+0xc2>
    2fbe:	6b c0       	rjmp	.+214    	; 0x3096 <vTaskIncrementTick+0x198>
    2fc0:	e0 91 dc 04 	lds	r30, 0x04DC
    2fc4:	f0 91 dd 04 	lds	r31, 0x04DD
    2fc8:	80 81       	ld	r24, Z
    2fca:	88 23       	and	r24, r24
    2fcc:	39 f4       	brne	.+14     	; 0x2fdc <vTaskIncrementTick+0xde>
    2fce:	8f ef       	ldi	r24, 0xFF	; 255
    2fd0:	9f ef       	ldi	r25, 0xFF	; 255
    2fd2:	90 93 72 00 	sts	0x0072, r25
    2fd6:	80 93 71 00 	sts	0x0071, r24
    2fda:	5d c0       	rjmp	.+186    	; 0x3096 <vTaskIncrementTick+0x198>
    2fdc:	e0 91 dc 04 	lds	r30, 0x04DC
    2fe0:	f0 91 dd 04 	lds	r31, 0x04DD
    2fe4:	05 80       	ldd	r0, Z+5	; 0x05
    2fe6:	f6 81       	ldd	r31, Z+6	; 0x06
    2fe8:	e0 2d       	mov	r30, r0
    2fea:	86 81       	ldd	r24, Z+6	; 0x06
    2fec:	97 81       	ldd	r25, Z+7	; 0x07
    2fee:	9e 83       	std	Y+6, r25	; 0x06
    2ff0:	8d 83       	std	Y+5, r24	; 0x05
    2ff2:	ed 81       	ldd	r30, Y+5	; 0x05
    2ff4:	fe 81       	ldd	r31, Y+6	; 0x06
    2ff6:	82 81       	ldd	r24, Z+2	; 0x02
    2ff8:	93 81       	ldd	r25, Z+3	; 0x03
    2ffa:	9a 83       	std	Y+2, r25	; 0x02
    2ffc:	89 83       	std	Y+1, r24	; 0x01
    2ffe:	20 91 9c 04 	lds	r18, 0x049C
    3002:	30 91 9d 04 	lds	r19, 0x049D
    3006:	89 81       	ldd	r24, Y+1	; 0x01
    3008:	9a 81       	ldd	r25, Y+2	; 0x02
    300a:	28 17       	cp	r18, r24
    300c:	39 07       	cpc	r19, r25
    300e:	38 f4       	brcc	.+14     	; 0x301e <vTaskIncrementTick+0x120>
    3010:	89 81       	ldd	r24, Y+1	; 0x01
    3012:	9a 81       	ldd	r25, Y+2	; 0x02
    3014:	90 93 72 00 	sts	0x0072, r25
    3018:	80 93 71 00 	sts	0x0071, r24
    301c:	3c c0       	rjmp	.+120    	; 0x3096 <vTaskIncrementTick+0x198>
    301e:	8d 81       	ldd	r24, Y+5	; 0x05
    3020:	9e 81       	ldd	r25, Y+6	; 0x06
    3022:	02 96       	adiw	r24, 0x02	; 2
    3024:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
    3028:	ed 81       	ldd	r30, Y+5	; 0x05
    302a:	fe 81       	ldd	r31, Y+6	; 0x06
    302c:	84 89       	ldd	r24, Z+20	; 0x14
    302e:	95 89       	ldd	r25, Z+21	; 0x15
    3030:	00 97       	sbiw	r24, 0x00	; 0
    3032:	29 f0       	breq	.+10     	; 0x303e <vTaskIncrementTick+0x140>
    3034:	8d 81       	ldd	r24, Y+5	; 0x05
    3036:	9e 81       	ldd	r25, Y+6	; 0x06
    3038:	0c 96       	adiw	r24, 0x0c	; 12
    303a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
    303e:	ed 81       	ldd	r30, Y+5	; 0x05
    3040:	fe 81       	ldd	r31, Y+6	; 0x06
    3042:	96 89       	ldd	r25, Z+22	; 0x16
    3044:	80 91 9f 04 	lds	r24, 0x049F
    3048:	89 17       	cp	r24, r25
    304a:	28 f4       	brcc	.+10     	; 0x3056 <vTaskIncrementTick+0x158>
    304c:	ed 81       	ldd	r30, Y+5	; 0x05
    304e:	fe 81       	ldd	r31, Y+6	; 0x06
    3050:	86 89       	ldd	r24, Z+22	; 0x16
    3052:	80 93 9f 04 	sts	0x049F, r24
    3056:	ed 81       	ldd	r30, Y+5	; 0x05
    3058:	fe 81       	ldd	r31, Y+6	; 0x06
    305a:	86 89       	ldd	r24, Z+22	; 0x16
    305c:	28 2f       	mov	r18, r24
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	c9 01       	movw	r24, r18
    3062:	88 0f       	add	r24, r24
    3064:	99 1f       	adc	r25, r25
    3066:	88 0f       	add	r24, r24
    3068:	99 1f       	adc	r25, r25
    306a:	88 0f       	add	r24, r24
    306c:	99 1f       	adc	r25, r25
    306e:	82 0f       	add	r24, r18
    3070:	93 1f       	adc	r25, r19
    3072:	ac 01       	movw	r20, r24
    3074:	4a 55       	subi	r20, 0x5A	; 90
    3076:	5b 4f       	sbci	r21, 0xFB	; 251
    3078:	8d 81       	ldd	r24, Y+5	; 0x05
    307a:	9e 81       	ldd	r25, Y+6	; 0x06
    307c:	9c 01       	movw	r18, r24
    307e:	2e 5f       	subi	r18, 0xFE	; 254
    3080:	3f 4f       	sbci	r19, 0xFF	; 255
    3082:	ca 01       	movw	r24, r20
    3084:	b9 01       	movw	r22, r18
    3086:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
    308a:	9a cf       	rjmp	.-204    	; 0x2fc0 <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    308c:	80 91 a2 04 	lds	r24, 0x04A2
    3090:	8f 5f       	subi	r24, 0xFF	; 255
    3092:	80 93 a2 04 	sts	0x04A2, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    3096:	26 96       	adiw	r28, 0x06	; 6
    3098:	0f b6       	in	r0, 0x3f	; 63
    309a:	f8 94       	cli
    309c:	de bf       	out	0x3e, r29	; 62
    309e:	0f be       	out	0x3f, r0	; 63
    30a0:	cd bf       	out	0x3d, r28	; 61
    30a2:	cf 91       	pop	r28
    30a4:	df 91       	pop	r29
    30a6:	08 95       	ret

000030a8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    30a8:	df 93       	push	r29
    30aa:	cf 93       	push	r28
    30ac:	00 d0       	rcall	.+0      	; 0x30ae <vTaskSwitchContext+0x6>
    30ae:	cd b7       	in	r28, 0x3d	; 61
    30b0:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    30b2:	80 91 a1 04 	lds	r24, 0x04A1
    30b6:	88 23       	and	r24, r24
    30b8:	49 f0       	breq	.+18     	; 0x30cc <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	80 93 a3 04 	sts	0x04A3, r24
    30c0:	54 c0       	rjmp	.+168    	; 0x316a <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    30c2:	80 91 9f 04 	lds	r24, 0x049F
    30c6:	81 50       	subi	r24, 0x01	; 1
    30c8:	80 93 9f 04 	sts	0x049F, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    30cc:	80 91 9f 04 	lds	r24, 0x049F
    30d0:	28 2f       	mov	r18, r24
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	c9 01       	movw	r24, r18
    30d6:	88 0f       	add	r24, r24
    30d8:	99 1f       	adc	r25, r25
    30da:	88 0f       	add	r24, r24
    30dc:	99 1f       	adc	r25, r25
    30de:	88 0f       	add	r24, r24
    30e0:	99 1f       	adc	r25, r25
    30e2:	82 0f       	add	r24, r18
    30e4:	93 1f       	adc	r25, r19
    30e6:	fc 01       	movw	r30, r24
    30e8:	ea 55       	subi	r30, 0x5A	; 90
    30ea:	fb 4f       	sbci	r31, 0xFB	; 251
    30ec:	80 81       	ld	r24, Z
    30ee:	88 23       	and	r24, r24
    30f0:	41 f3       	breq	.-48     	; 0x30c2 <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    30f2:	80 91 9f 04 	lds	r24, 0x049F
    30f6:	28 2f       	mov	r18, r24
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	c9 01       	movw	r24, r18
    30fc:	88 0f       	add	r24, r24
    30fe:	99 1f       	adc	r25, r25
    3100:	88 0f       	add	r24, r24
    3102:	99 1f       	adc	r25, r25
    3104:	88 0f       	add	r24, r24
    3106:	99 1f       	adc	r25, r25
    3108:	82 0f       	add	r24, r18
    310a:	93 1f       	adc	r25, r19
    310c:	8a 55       	subi	r24, 0x5A	; 90
    310e:	9b 4f       	sbci	r25, 0xFB	; 251
    3110:	9a 83       	std	Y+2, r25	; 0x02
    3112:	89 83       	std	Y+1, r24	; 0x01
    3114:	e9 81       	ldd	r30, Y+1	; 0x01
    3116:	fa 81       	ldd	r31, Y+2	; 0x02
    3118:	01 80       	ldd	r0, Z+1	; 0x01
    311a:	f2 81       	ldd	r31, Z+2	; 0x02
    311c:	e0 2d       	mov	r30, r0
    311e:	82 81       	ldd	r24, Z+2	; 0x02
    3120:	93 81       	ldd	r25, Z+3	; 0x03
    3122:	e9 81       	ldd	r30, Y+1	; 0x01
    3124:	fa 81       	ldd	r31, Y+2	; 0x02
    3126:	92 83       	std	Z+2, r25	; 0x02
    3128:	81 83       	std	Z+1, r24	; 0x01
    312a:	e9 81       	ldd	r30, Y+1	; 0x01
    312c:	fa 81       	ldd	r31, Y+2	; 0x02
    312e:	21 81       	ldd	r18, Z+1	; 0x01
    3130:	32 81       	ldd	r19, Z+2	; 0x02
    3132:	89 81       	ldd	r24, Y+1	; 0x01
    3134:	9a 81       	ldd	r25, Y+2	; 0x02
    3136:	03 96       	adiw	r24, 0x03	; 3
    3138:	28 17       	cp	r18, r24
    313a:	39 07       	cpc	r19, r25
    313c:	59 f4       	brne	.+22     	; 0x3154 <vTaskSwitchContext+0xac>
    313e:	e9 81       	ldd	r30, Y+1	; 0x01
    3140:	fa 81       	ldd	r31, Y+2	; 0x02
    3142:	01 80       	ldd	r0, Z+1	; 0x01
    3144:	f2 81       	ldd	r31, Z+2	; 0x02
    3146:	e0 2d       	mov	r30, r0
    3148:	82 81       	ldd	r24, Z+2	; 0x02
    314a:	93 81       	ldd	r25, Z+3	; 0x03
    314c:	e9 81       	ldd	r30, Y+1	; 0x01
    314e:	fa 81       	ldd	r31, Y+2	; 0x02
    3150:	92 83       	std	Z+2, r25	; 0x02
    3152:	81 83       	std	Z+1, r24	; 0x01
    3154:	e9 81       	ldd	r30, Y+1	; 0x01
    3156:	fa 81       	ldd	r31, Y+2	; 0x02
    3158:	01 80       	ldd	r0, Z+1	; 0x01
    315a:	f2 81       	ldd	r31, Z+2	; 0x02
    315c:	e0 2d       	mov	r30, r0
    315e:	86 81       	ldd	r24, Z+6	; 0x06
    3160:	97 81       	ldd	r25, Z+7	; 0x07
    3162:	90 93 99 04 	sts	0x0499, r25
    3166:	80 93 98 04 	sts	0x0498, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    316a:	0f 90       	pop	r0
    316c:	0f 90       	pop	r0
    316e:	cf 91       	pop	r28
    3170:	df 91       	pop	r29
    3172:	08 95       	ret

00003174 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3174:	df 93       	push	r29
    3176:	cf 93       	push	r28
    3178:	00 d0       	rcall	.+0      	; 0x317a <vTaskPlaceOnEventList+0x6>
    317a:	00 d0       	rcall	.+0      	; 0x317c <vTaskPlaceOnEventList+0x8>
    317c:	00 d0       	rcall	.+0      	; 0x317e <vTaskPlaceOnEventList+0xa>
    317e:	cd b7       	in	r28, 0x3d	; 61
    3180:	de b7       	in	r29, 0x3e	; 62
    3182:	9c 83       	std	Y+4, r25	; 0x04
    3184:	8b 83       	std	Y+3, r24	; 0x03
    3186:	7e 83       	std	Y+6, r23	; 0x06
    3188:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    318a:	4b 81       	ldd	r20, Y+3	; 0x03
    318c:	5c 81       	ldd	r21, Y+4	; 0x04
    318e:	80 91 98 04 	lds	r24, 0x0498
    3192:	90 91 99 04 	lds	r25, 0x0499
    3196:	9c 01       	movw	r18, r24
    3198:	24 5f       	subi	r18, 0xF4	; 244
    319a:	3f 4f       	sbci	r19, 0xFF	; 255
    319c:	ca 01       	movw	r24, r20
    319e:	b9 01       	movw	r22, r18
    31a0:	0e 94 6d 09 	call	0x12da	; 0x12da <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    31a4:	80 91 98 04 	lds	r24, 0x0498
    31a8:	90 91 99 04 	lds	r25, 0x0499
    31ac:	02 96       	adiw	r24, 0x02	; 2
    31ae:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    31b2:	8d 81       	ldd	r24, Y+5	; 0x05
    31b4:	9e 81       	ldd	r25, Y+6	; 0x06
    31b6:	2f ef       	ldi	r18, 0xFF	; 255
    31b8:	8f 3f       	cpi	r24, 0xFF	; 255
    31ba:	92 07       	cpc	r25, r18
    31bc:	69 f4       	brne	.+26     	; 0x31d8 <vTaskPlaceOnEventList+0x64>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    31be:	80 91 98 04 	lds	r24, 0x0498
    31c2:	90 91 99 04 	lds	r25, 0x0499
    31c6:	9c 01       	movw	r18, r24
    31c8:	2e 5f       	subi	r18, 0xFE	; 254
    31ca:	3f 4f       	sbci	r19, 0xFF	; 255
    31cc:	82 ef       	ldi	r24, 0xF2	; 242
    31ce:	94 e0       	ldi	r25, 0x04	; 4
    31d0:	b9 01       	movw	r22, r18
    31d2:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
    31d6:	0e c0       	rjmp	.+28     	; 0x31f4 <vTaskPlaceOnEventList+0x80>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    31d8:	20 91 9c 04 	lds	r18, 0x049C
    31dc:	30 91 9d 04 	lds	r19, 0x049D
    31e0:	8d 81       	ldd	r24, Y+5	; 0x05
    31e2:	9e 81       	ldd	r25, Y+6	; 0x06
    31e4:	82 0f       	add	r24, r18
    31e6:	93 1f       	adc	r25, r19
    31e8:	9a 83       	std	Y+2, r25	; 0x02
    31ea:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	9a 81       	ldd	r25, Y+2	; 0x02
    31f0:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    31f4:	26 96       	adiw	r28, 0x06	; 6
    31f6:	0f b6       	in	r0, 0x3f	; 63
    31f8:	f8 94       	cli
    31fa:	de bf       	out	0x3e, r29	; 62
    31fc:	0f be       	out	0x3f, r0	; 63
    31fe:	cd bf       	out	0x3d, r28	; 61
    3200:	cf 91       	pop	r28
    3202:	df 91       	pop	r29
    3204:	08 95       	ret

00003206 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3206:	df 93       	push	r29
    3208:	cf 93       	push	r28
    320a:	00 d0       	rcall	.+0      	; 0x320c <xTaskRemoveFromEventList+0x6>
    320c:	00 d0       	rcall	.+0      	; 0x320e <xTaskRemoveFromEventList+0x8>
    320e:	0f 92       	push	r0
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62
    3214:	9d 83       	std	Y+5, r25	; 0x05
    3216:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3218:	ec 81       	ldd	r30, Y+4	; 0x04
    321a:	fd 81       	ldd	r31, Y+5	; 0x05
    321c:	05 80       	ldd	r0, Z+5	; 0x05
    321e:	f6 81       	ldd	r31, Z+6	; 0x06
    3220:	e0 2d       	mov	r30, r0
    3222:	86 81       	ldd	r24, Z+6	; 0x06
    3224:	97 81       	ldd	r25, Z+7	; 0x07
    3226:	9b 83       	std	Y+3, r25	; 0x03
    3228:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    322a:	8a 81       	ldd	r24, Y+2	; 0x02
    322c:	9b 81       	ldd	r25, Y+3	; 0x03
    322e:	0c 96       	adiw	r24, 0x0c	; 12
    3230:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3234:	80 91 a1 04 	lds	r24, 0x04A1
    3238:	88 23       	and	r24, r24
    323a:	61 f5       	brne	.+88     	; 0x3294 <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    323c:	8a 81       	ldd	r24, Y+2	; 0x02
    323e:	9b 81       	ldd	r25, Y+3	; 0x03
    3240:	02 96       	adiw	r24, 0x02	; 2
    3242:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    3246:	ea 81       	ldd	r30, Y+2	; 0x02
    3248:	fb 81       	ldd	r31, Y+3	; 0x03
    324a:	96 89       	ldd	r25, Z+22	; 0x16
    324c:	80 91 9f 04 	lds	r24, 0x049F
    3250:	89 17       	cp	r24, r25
    3252:	28 f4       	brcc	.+10     	; 0x325e <xTaskRemoveFromEventList+0x58>
    3254:	ea 81       	ldd	r30, Y+2	; 0x02
    3256:	fb 81       	ldd	r31, Y+3	; 0x03
    3258:	86 89       	ldd	r24, Z+22	; 0x16
    325a:	80 93 9f 04 	sts	0x049F, r24
    325e:	ea 81       	ldd	r30, Y+2	; 0x02
    3260:	fb 81       	ldd	r31, Y+3	; 0x03
    3262:	86 89       	ldd	r24, Z+22	; 0x16
    3264:	28 2f       	mov	r18, r24
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	c9 01       	movw	r24, r18
    326a:	88 0f       	add	r24, r24
    326c:	99 1f       	adc	r25, r25
    326e:	88 0f       	add	r24, r24
    3270:	99 1f       	adc	r25, r25
    3272:	88 0f       	add	r24, r24
    3274:	99 1f       	adc	r25, r25
    3276:	82 0f       	add	r24, r18
    3278:	93 1f       	adc	r25, r19
    327a:	ac 01       	movw	r20, r24
    327c:	4a 55       	subi	r20, 0x5A	; 90
    327e:	5b 4f       	sbci	r21, 0xFB	; 251
    3280:	8a 81       	ldd	r24, Y+2	; 0x02
    3282:	9b 81       	ldd	r25, Y+3	; 0x03
    3284:	9c 01       	movw	r18, r24
    3286:	2e 5f       	subi	r18, 0xFE	; 254
    3288:	3f 4f       	sbci	r19, 0xFF	; 255
    328a:	ca 01       	movw	r24, r20
    328c:	b9 01       	movw	r22, r18
    328e:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
    3292:	0a c0       	rjmp	.+20     	; 0x32a8 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3294:	8a 81       	ldd	r24, Y+2	; 0x02
    3296:	9b 81       	ldd	r25, Y+3	; 0x03
    3298:	9c 01       	movw	r18, r24
    329a:	24 5f       	subi	r18, 0xF4	; 244
    329c:	3f 4f       	sbci	r19, 0xFF	; 255
    329e:	80 ee       	ldi	r24, 0xE0	; 224
    32a0:	94 e0       	ldi	r25, 0x04	; 4
    32a2:	b9 01       	movw	r22, r18
    32a4:	0e 94 21 09 	call	0x1242	; 0x1242 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    32a8:	ea 81       	ldd	r30, Y+2	; 0x02
    32aa:	fb 81       	ldd	r31, Y+3	; 0x03
    32ac:	96 89       	ldd	r25, Z+22	; 0x16
    32ae:	e0 91 98 04 	lds	r30, 0x0498
    32b2:	f0 91 99 04 	lds	r31, 0x0499
    32b6:	86 89       	ldd	r24, Z+22	; 0x16
    32b8:	98 17       	cp	r25, r24
    32ba:	18 f0       	brcs	.+6      	; 0x32c2 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	89 83       	std	Y+1, r24	; 0x01
    32c0:	01 c0       	rjmp	.+2      	; 0x32c4 <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    32c2:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    32c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	0f 90       	pop	r0
    32d0:	cf 91       	pop	r28
    32d2:	df 91       	pop	r29
    32d4:	08 95       	ret

000032d6 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    32d6:	df 93       	push	r29
    32d8:	cf 93       	push	r28
    32da:	00 d0       	rcall	.+0      	; 0x32dc <vTaskSetTimeOutState+0x6>
    32dc:	cd b7       	in	r28, 0x3d	; 61
    32de:	de b7       	in	r29, 0x3e	; 62
    32e0:	9a 83       	std	Y+2, r25	; 0x02
    32e2:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    32e4:	80 91 a4 04 	lds	r24, 0x04A4
    32e8:	e9 81       	ldd	r30, Y+1	; 0x01
    32ea:	fa 81       	ldd	r31, Y+2	; 0x02
    32ec:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    32ee:	80 91 9c 04 	lds	r24, 0x049C
    32f2:	90 91 9d 04 	lds	r25, 0x049D
    32f6:	e9 81       	ldd	r30, Y+1	; 0x01
    32f8:	fa 81       	ldd	r31, Y+2	; 0x02
    32fa:	92 83       	std	Z+2, r25	; 0x02
    32fc:	81 83       	std	Z+1, r24	; 0x01
}
    32fe:	0f 90       	pop	r0
    3300:	0f 90       	pop	r0
    3302:	cf 91       	pop	r28
    3304:	df 91       	pop	r29
    3306:	08 95       	ret

00003308 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    3308:	df 93       	push	r29
    330a:	cf 93       	push	r28
    330c:	00 d0       	rcall	.+0      	; 0x330e <xTaskCheckForTimeOut+0x6>
    330e:	00 d0       	rcall	.+0      	; 0x3310 <xTaskCheckForTimeOut+0x8>
    3310:	0f 92       	push	r0
    3312:	cd b7       	in	r28, 0x3d	; 61
    3314:	de b7       	in	r29, 0x3e	; 62
    3316:	9b 83       	std	Y+3, r25	; 0x03
    3318:	8a 83       	std	Y+2, r24	; 0x02
    331a:	7d 83       	std	Y+5, r23	; 0x05
    331c:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    331e:	0f b6       	in	r0, 0x3f	; 63
    3320:	f8 94       	cli
    3322:	0f 92       	push	r0
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    3324:	ec 81       	ldd	r30, Y+4	; 0x04
    3326:	fd 81       	ldd	r31, Y+5	; 0x05
    3328:	80 81       	ld	r24, Z
    332a:	91 81       	ldd	r25, Z+1	; 0x01
    332c:	2f ef       	ldi	r18, 0xFF	; 255
    332e:	8f 3f       	cpi	r24, 0xFF	; 255
    3330:	92 07       	cpc	r25, r18
    3332:	11 f4       	brne	.+4      	; 0x3338 <xTaskCheckForTimeOut+0x30>
			{
				xReturn = pdFALSE;
    3334:	19 82       	std	Y+1, r1	; 0x01
    3336:	44 c0       	rjmp	.+136    	; 0x33c0 <xTaskCheckForTimeOut+0xb8>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    3338:	ea 81       	ldd	r30, Y+2	; 0x02
    333a:	fb 81       	ldd	r31, Y+3	; 0x03
    333c:	90 81       	ld	r25, Z
    333e:	80 91 a4 04 	lds	r24, 0x04A4
    3342:	98 17       	cp	r25, r24
    3344:	71 f0       	breq	.+28     	; 0x3362 <xTaskCheckForTimeOut+0x5a>
    3346:	ea 81       	ldd	r30, Y+2	; 0x02
    3348:	fb 81       	ldd	r31, Y+3	; 0x03
    334a:	21 81       	ldd	r18, Z+1	; 0x01
    334c:	32 81       	ldd	r19, Z+2	; 0x02
    334e:	80 91 9c 04 	lds	r24, 0x049C
    3352:	90 91 9d 04 	lds	r25, 0x049D
    3356:	82 17       	cp	r24, r18
    3358:	93 07       	cpc	r25, r19
    335a:	18 f0       	brcs	.+6      	; 0x3362 <xTaskCheckForTimeOut+0x5a>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	89 83       	std	Y+1, r24	; 0x01
    3360:	2f c0       	rjmp	.+94     	; 0x33c0 <xTaskCheckForTimeOut+0xb8>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    3362:	20 91 9c 04 	lds	r18, 0x049C
    3366:	30 91 9d 04 	lds	r19, 0x049D
    336a:	ea 81       	ldd	r30, Y+2	; 0x02
    336c:	fb 81       	ldd	r31, Y+3	; 0x03
    336e:	81 81       	ldd	r24, Z+1	; 0x01
    3370:	92 81       	ldd	r25, Z+2	; 0x02
    3372:	28 1b       	sub	r18, r24
    3374:	39 0b       	sbc	r19, r25
    3376:	ec 81       	ldd	r30, Y+4	; 0x04
    3378:	fd 81       	ldd	r31, Y+5	; 0x05
    337a:	80 81       	ld	r24, Z
    337c:	91 81       	ldd	r25, Z+1	; 0x01
    337e:	28 17       	cp	r18, r24
    3380:	39 07       	cpc	r19, r25
    3382:	e0 f4       	brcc	.+56     	; 0x33bc <xTaskCheckForTimeOut+0xb4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    3384:	ec 81       	ldd	r30, Y+4	; 0x04
    3386:	fd 81       	ldd	r31, Y+5	; 0x05
    3388:	40 81       	ld	r20, Z
    338a:	51 81       	ldd	r21, Z+1	; 0x01
    338c:	ea 81       	ldd	r30, Y+2	; 0x02
    338e:	fb 81       	ldd	r31, Y+3	; 0x03
    3390:	21 81       	ldd	r18, Z+1	; 0x01
    3392:	32 81       	ldd	r19, Z+2	; 0x02
    3394:	80 91 9c 04 	lds	r24, 0x049C
    3398:	90 91 9d 04 	lds	r25, 0x049D
    339c:	b9 01       	movw	r22, r18
    339e:	68 1b       	sub	r22, r24
    33a0:	79 0b       	sbc	r23, r25
    33a2:	cb 01       	movw	r24, r22
    33a4:	84 0f       	add	r24, r20
    33a6:	95 1f       	adc	r25, r21
    33a8:	ec 81       	ldd	r30, Y+4	; 0x04
    33aa:	fd 81       	ldd	r31, Y+5	; 0x05
    33ac:	91 83       	std	Z+1, r25	; 0x01
    33ae:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    33b0:	8a 81       	ldd	r24, Y+2	; 0x02
    33b2:	9b 81       	ldd	r25, Y+3	; 0x03
    33b4:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    33b8:	19 82       	std	Y+1, r1	; 0x01
    33ba:	02 c0       	rjmp	.+4      	; 0x33c0 <xTaskCheckForTimeOut+0xb8>
		}
		else
		{
			xReturn = pdTRUE;
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    33c0:	0f 90       	pop	r0
    33c2:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    33c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    33c6:	0f 90       	pop	r0
    33c8:	0f 90       	pop	r0
    33ca:	0f 90       	pop	r0
    33cc:	0f 90       	pop	r0
    33ce:	0f 90       	pop	r0
    33d0:	cf 91       	pop	r28
    33d2:	df 91       	pop	r29
    33d4:	08 95       	ret

000033d6 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    33d6:	df 93       	push	r29
    33d8:	cf 93       	push	r28
    33da:	cd b7       	in	r28, 0x3d	; 61
    33dc:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	80 93 a3 04 	sts	0x04A3, r24
}
    33e4:	cf 91       	pop	r28
    33e6:	df 91       	pop	r29
    33e8:	08 95       	ret

000033ea <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    33ea:	df 93       	push	r29
    33ec:	cf 93       	push	r28
    33ee:	00 d0       	rcall	.+0      	; 0x33f0 <prvIdleTask+0x6>
    33f0:	cd b7       	in	r28, 0x3d	; 61
    33f2:	de b7       	in	r29, 0x3e	; 62
    33f4:	9a 83       	std	Y+2, r25	; 0x02
    33f6:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    33f8:	0e 94 97 1a 	call	0x352e	; 0x352e <prvCheckTasksWaitingTermination>
    33fc:	fd cf       	rjmp	.-6      	; 0x33f8 <prvIdleTask+0xe>

000033fe <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    33fe:	0f 93       	push	r16
    3400:	1f 93       	push	r17
    3402:	df 93       	push	r29
    3404:	cf 93       	push	r28
    3406:	cd b7       	in	r28, 0x3d	; 61
    3408:	de b7       	in	r29, 0x3e	; 62
    340a:	29 97       	sbiw	r28, 0x09	; 9
    340c:	0f b6       	in	r0, 0x3f	; 63
    340e:	f8 94       	cli
    3410:	de bf       	out	0x3e, r29	; 62
    3412:	0f be       	out	0x3f, r0	; 63
    3414:	cd bf       	out	0x3d, r28	; 61
    3416:	9a 83       	std	Y+2, r25	; 0x02
    3418:	89 83       	std	Y+1, r24	; 0x01
    341a:	7c 83       	std	Y+4, r23	; 0x04
    341c:	6b 83       	std	Y+3, r22	; 0x03
    341e:	4d 83       	std	Y+5, r20	; 0x05
    3420:	3f 83       	std	Y+7, r19	; 0x07
    3422:	2e 83       	std	Y+6, r18	; 0x06
    3424:	19 87       	std	Y+9, r17	; 0x09
    3426:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    3428:	89 81       	ldd	r24, Y+1	; 0x01
    342a:	9a 81       	ldd	r25, Y+2	; 0x02
    342c:	49 96       	adiw	r24, 0x19	; 25
    342e:	2b 81       	ldd	r18, Y+3	; 0x03
    3430:	3c 81       	ldd	r19, Y+4	; 0x04
    3432:	b9 01       	movw	r22, r18
    3434:	48 e0       	ldi	r20, 0x08	; 8
    3436:	50 e0       	ldi	r21, 0x00	; 0
    3438:	0e 94 cb 1b 	call	0x3796	; 0x3796 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    343c:	e9 81       	ldd	r30, Y+1	; 0x01
    343e:	fa 81       	ldd	r31, Y+2	; 0x02
    3440:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    3442:	8d 81       	ldd	r24, Y+5	; 0x05
    3444:	84 30       	cpi	r24, 0x04	; 4
    3446:	10 f0       	brcs	.+4      	; 0x344c <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    3448:	83 e0       	ldi	r24, 0x03	; 3
    344a:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    344c:	e9 81       	ldd	r30, Y+1	; 0x01
    344e:	fa 81       	ldd	r31, Y+2	; 0x02
    3450:	8d 81       	ldd	r24, Y+5	; 0x05
    3452:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    3454:	89 81       	ldd	r24, Y+1	; 0x01
    3456:	9a 81       	ldd	r25, Y+2	; 0x02
    3458:	02 96       	adiw	r24, 0x02	; 2
    345a:	0e 94 11 09 	call	0x1222	; 0x1222 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    345e:	89 81       	ldd	r24, Y+1	; 0x01
    3460:	9a 81       	ldd	r25, Y+2	; 0x02
    3462:	0c 96       	adiw	r24, 0x0c	; 12
    3464:	0e 94 11 09 	call	0x1222	; 0x1222 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    3468:	e9 81       	ldd	r30, Y+1	; 0x01
    346a:	fa 81       	ldd	r31, Y+2	; 0x02
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	9a 81       	ldd	r25, Y+2	; 0x02
    3470:	91 87       	std	Z+9, r25	; 0x09
    3472:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    3474:	8d 81       	ldd	r24, Y+5	; 0x05
    3476:	28 2f       	mov	r18, r24
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	84 e0       	ldi	r24, 0x04	; 4
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	82 1b       	sub	r24, r18
    3480:	93 0b       	sbc	r25, r19
    3482:	e9 81       	ldd	r30, Y+1	; 0x01
    3484:	fa 81       	ldd	r31, Y+2	; 0x02
    3486:	95 87       	std	Z+13, r25	; 0x0d
    3488:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    348a:	e9 81       	ldd	r30, Y+1	; 0x01
    348c:	fa 81       	ldd	r31, Y+2	; 0x02
    348e:	89 81       	ldd	r24, Y+1	; 0x01
    3490:	9a 81       	ldd	r25, Y+2	; 0x02
    3492:	93 8b       	std	Z+19, r25	; 0x13
    3494:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    3496:	29 96       	adiw	r28, 0x09	; 9
    3498:	0f b6       	in	r0, 0x3f	; 63
    349a:	f8 94       	cli
    349c:	de bf       	out	0x3e, r29	; 62
    349e:	0f be       	out	0x3f, r0	; 63
    34a0:	cd bf       	out	0x3d, r28	; 61
    34a2:	cf 91       	pop	r28
    34a4:	df 91       	pop	r29
    34a6:	1f 91       	pop	r17
    34a8:	0f 91       	pop	r16
    34aa:	08 95       	ret

000034ac <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    34ac:	df 93       	push	r29
    34ae:	cf 93       	push	r28
    34b0:	0f 92       	push	r0
    34b2:	cd b7       	in	r28, 0x3d	; 61
    34b4:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    34b6:	19 82       	std	Y+1, r1	; 0x01
    34b8:	13 c0       	rjmp	.+38     	; 0x34e0 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    34ba:	89 81       	ldd	r24, Y+1	; 0x01
    34bc:	28 2f       	mov	r18, r24
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	c9 01       	movw	r24, r18
    34c2:	88 0f       	add	r24, r24
    34c4:	99 1f       	adc	r25, r25
    34c6:	88 0f       	add	r24, r24
    34c8:	99 1f       	adc	r25, r25
    34ca:	88 0f       	add	r24, r24
    34cc:	99 1f       	adc	r25, r25
    34ce:	82 0f       	add	r24, r18
    34d0:	93 1f       	adc	r25, r19
    34d2:	8a 55       	subi	r24, 0x5A	; 90
    34d4:	9b 4f       	sbci	r25, 0xFB	; 251
    34d6:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    34da:	89 81       	ldd	r24, Y+1	; 0x01
    34dc:	8f 5f       	subi	r24, 0xFF	; 255
    34de:	89 83       	std	Y+1, r24	; 0x01
    34e0:	89 81       	ldd	r24, Y+1	; 0x01
    34e2:	84 30       	cpi	r24, 0x04	; 4
    34e4:	50 f3       	brcs	.-44     	; 0x34ba <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    34e6:	8a ec       	ldi	r24, 0xCA	; 202
    34e8:	94 e0       	ldi	r25, 0x04	; 4
    34ea:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    34ee:	83 ed       	ldi	r24, 0xD3	; 211
    34f0:	94 e0       	ldi	r25, 0x04	; 4
    34f2:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    34f6:	80 ee       	ldi	r24, 0xE0	; 224
    34f8:	94 e0       	ldi	r25, 0x04	; 4
    34fa:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    34fe:	89 ee       	ldi	r24, 0xE9	; 233
    3500:	94 e0       	ldi	r25, 0x04	; 4
    3502:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    3506:	82 ef       	ldi	r24, 0xF2	; 242
    3508:	94 e0       	ldi	r25, 0x04	; 4
    350a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    350e:	8a ec       	ldi	r24, 0xCA	; 202
    3510:	94 e0       	ldi	r25, 0x04	; 4
    3512:	90 93 dd 04 	sts	0x04DD, r25
    3516:	80 93 dc 04 	sts	0x04DC, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    351a:	83 ed       	ldi	r24, 0xD3	; 211
    351c:	94 e0       	ldi	r25, 0x04	; 4
    351e:	90 93 df 04 	sts	0x04DF, r25
    3522:	80 93 de 04 	sts	0x04DE, r24
}
    3526:	0f 90       	pop	r0
    3528:	cf 91       	pop	r28
    352a:	df 91       	pop	r29
    352c:	08 95       	ret

0000352e <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    352e:	df 93       	push	r29
    3530:	cf 93       	push	r28
    3532:	00 d0       	rcall	.+0      	; 0x3534 <prvCheckTasksWaitingTermination+0x6>
    3534:	0f 92       	push	r0
    3536:	cd b7       	in	r28, 0x3d	; 61
    3538:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    353a:	80 91 9a 04 	lds	r24, 0x049A
    353e:	88 23       	and	r24, r24
    3540:	71 f1       	breq	.+92     	; 0x359e <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    3542:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    3546:	80 91 e9 04 	lds	r24, 0x04E9
    354a:	1b 82       	std	Y+3, r1	; 0x03
    354c:	88 23       	and	r24, r24
    354e:	11 f4       	brne	.+4      	; 0x3554 <prvCheckTasksWaitingTermination+0x26>
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    3554:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    3558:	8b 81       	ldd	r24, Y+3	; 0x03
    355a:	88 23       	and	r24, r24
    355c:	01 f5       	brne	.+64     	; 0x359e <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    355e:	0f b6       	in	r0, 0x3f	; 63
    3560:	f8 94       	cli
    3562:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    3564:	e0 91 ee 04 	lds	r30, 0x04EE
    3568:	f0 91 ef 04 	lds	r31, 0x04EF
    356c:	86 81       	ldd	r24, Z+6	; 0x06
    356e:	97 81       	ldd	r25, Z+7	; 0x07
    3570:	9a 83       	std	Y+2, r25	; 0x02
    3572:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    3574:	89 81       	ldd	r24, Y+1	; 0x01
    3576:	9a 81       	ldd	r25, Y+2	; 0x02
    3578:	02 96       	adiw	r24, 0x02	; 2
    357a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <vListRemove>
					--uxCurrentNumberOfTasks;
    357e:	80 91 9b 04 	lds	r24, 0x049B
    3582:	81 50       	subi	r24, 0x01	; 1
    3584:	80 93 9b 04 	sts	0x049B, r24
					--uxTasksDeleted;
    3588:	80 91 9a 04 	lds	r24, 0x049A
    358c:	81 50       	subi	r24, 0x01	; 1
    358e:	80 93 9a 04 	sts	0x049A, r24
				}
				taskEXIT_CRITICAL();
    3592:	0f 90       	pop	r0
    3594:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	9a 81       	ldd	r25, Y+2	; 0x02
    359a:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <prvDeleteTCB>
			}
		}
	}
	#endif
}
    359e:	0f 90       	pop	r0
    35a0:	0f 90       	pop	r0
    35a2:	0f 90       	pop	r0
    35a4:	cf 91       	pop	r28
    35a6:	df 91       	pop	r29
    35a8:	08 95       	ret

000035aa <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    35aa:	df 93       	push	r29
    35ac:	cf 93       	push	r28
    35ae:	00 d0       	rcall	.+0      	; 0x35b0 <prvAddCurrentTaskToDelayedList+0x6>
    35b0:	cd b7       	in	r28, 0x3d	; 61
    35b2:	de b7       	in	r29, 0x3e	; 62
    35b4:	9a 83       	std	Y+2, r25	; 0x02
    35b6:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    35b8:	e0 91 98 04 	lds	r30, 0x0498
    35bc:	f0 91 99 04 	lds	r31, 0x0499
    35c0:	89 81       	ldd	r24, Y+1	; 0x01
    35c2:	9a 81       	ldd	r25, Y+2	; 0x02
    35c4:	93 83       	std	Z+3, r25	; 0x03
    35c6:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    35c8:	20 91 9c 04 	lds	r18, 0x049C
    35cc:	30 91 9d 04 	lds	r19, 0x049D
    35d0:	89 81       	ldd	r24, Y+1	; 0x01
    35d2:	9a 81       	ldd	r25, Y+2	; 0x02
    35d4:	82 17       	cp	r24, r18
    35d6:	93 07       	cpc	r25, r19
    35d8:	70 f4       	brcc	.+28     	; 0x35f6 <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    35da:	80 91 de 04 	lds	r24, 0x04DE
    35de:	90 91 df 04 	lds	r25, 0x04DF
    35e2:	20 91 98 04 	lds	r18, 0x0498
    35e6:	30 91 99 04 	lds	r19, 0x0499
    35ea:	2e 5f       	subi	r18, 0xFE	; 254
    35ec:	3f 4f       	sbci	r19, 0xFF	; 255
    35ee:	b9 01       	movw	r22, r18
    35f0:	0e 94 6d 09 	call	0x12da	; 0x12da <vListInsert>
    35f4:	1e c0       	rjmp	.+60     	; 0x3632 <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    35f6:	40 91 dc 04 	lds	r20, 0x04DC
    35fa:	50 91 dd 04 	lds	r21, 0x04DD
    35fe:	80 91 98 04 	lds	r24, 0x0498
    3602:	90 91 99 04 	lds	r25, 0x0499
    3606:	9c 01       	movw	r18, r24
    3608:	2e 5f       	subi	r18, 0xFE	; 254
    360a:	3f 4f       	sbci	r19, 0xFF	; 255
    360c:	ca 01       	movw	r24, r20
    360e:	b9 01       	movw	r22, r18
    3610:	0e 94 6d 09 	call	0x12da	; 0x12da <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    3614:	20 91 71 00 	lds	r18, 0x0071
    3618:	30 91 72 00 	lds	r19, 0x0072
    361c:	89 81       	ldd	r24, Y+1	; 0x01
    361e:	9a 81       	ldd	r25, Y+2	; 0x02
    3620:	82 17       	cp	r24, r18
    3622:	93 07       	cpc	r25, r19
    3624:	30 f4       	brcc	.+12     	; 0x3632 <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    3626:	89 81       	ldd	r24, Y+1	; 0x01
    3628:	9a 81       	ldd	r25, Y+2	; 0x02
    362a:	90 93 72 00 	sts	0x0072, r25
    362e:	80 93 71 00 	sts	0x0071, r24
		}
	}
}
    3632:	0f 90       	pop	r0
    3634:	0f 90       	pop	r0
    3636:	cf 91       	pop	r28
    3638:	df 91       	pop	r29
    363a:	08 95       	ret

0000363c <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    363c:	df 93       	push	r29
    363e:	cf 93       	push	r28
    3640:	cd b7       	in	r28, 0x3d	; 61
    3642:	de b7       	in	r29, 0x3e	; 62
    3644:	28 97       	sbiw	r28, 0x08	; 8
    3646:	0f b6       	in	r0, 0x3f	; 63
    3648:	f8 94       	cli
    364a:	de bf       	out	0x3e, r29	; 62
    364c:	0f be       	out	0x3f, r0	; 63
    364e:	cd bf       	out	0x3d, r28	; 61
    3650:	9c 83       	std	Y+4, r25	; 0x04
    3652:	8b 83       	std	Y+3, r24	; 0x03
    3654:	7e 83       	std	Y+6, r23	; 0x06
    3656:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    3658:	81 e2       	ldi	r24, 0x21	; 33
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <pvPortMalloc>
    3660:	9a 83       	std	Y+2, r25	; 0x02
    3662:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    3664:	89 81       	ldd	r24, Y+1	; 0x01
    3666:	9a 81       	ldd	r25, Y+2	; 0x02
    3668:	00 97       	sbiw	r24, 0x00	; 0
    366a:	69 f1       	breq	.+90     	; 0x36c6 <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    366c:	8d 81       	ldd	r24, Y+5	; 0x05
    366e:	9e 81       	ldd	r25, Y+6	; 0x06
    3670:	00 97       	sbiw	r24, 0x00	; 0
    3672:	39 f4       	brne	.+14     	; 0x3682 <prvAllocateTCBAndStack+0x46>
    3674:	8b 81       	ldd	r24, Y+3	; 0x03
    3676:	9c 81       	ldd	r25, Y+4	; 0x04
    3678:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <pvPortMalloc>
    367c:	98 87       	std	Y+8, r25	; 0x08
    367e:	8f 83       	std	Y+7, r24	; 0x07
    3680:	04 c0       	rjmp	.+8      	; 0x368a <prvAllocateTCBAndStack+0x4e>
    3682:	8d 81       	ldd	r24, Y+5	; 0x05
    3684:	9e 81       	ldd	r25, Y+6	; 0x06
    3686:	98 87       	std	Y+8, r25	; 0x08
    3688:	8f 83       	std	Y+7, r24	; 0x07
    368a:	e9 81       	ldd	r30, Y+1	; 0x01
    368c:	fa 81       	ldd	r31, Y+2	; 0x02
    368e:	8f 81       	ldd	r24, Y+7	; 0x07
    3690:	98 85       	ldd	r25, Y+8	; 0x08
    3692:	90 8f       	std	Z+24, r25	; 0x18
    3694:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    3696:	e9 81       	ldd	r30, Y+1	; 0x01
    3698:	fa 81       	ldd	r31, Y+2	; 0x02
    369a:	87 89       	ldd	r24, Z+23	; 0x17
    369c:	90 8d       	ldd	r25, Z+24	; 0x18
    369e:	00 97       	sbiw	r24, 0x00	; 0
    36a0:	39 f4       	brne	.+14     	; 0x36b0 <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    36a2:	89 81       	ldd	r24, Y+1	; 0x01
    36a4:	9a 81       	ldd	r25, Y+2	; 0x02
    36a6:	0e 94 c1 08 	call	0x1182	; 0x1182 <vPortFree>
			pxNewTCB = NULL;
    36aa:	1a 82       	std	Y+2, r1	; 0x02
    36ac:	19 82       	std	Y+1, r1	; 0x01
    36ae:	0b c0       	rjmp	.+22     	; 0x36c6 <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    36b0:	e9 81       	ldd	r30, Y+1	; 0x01
    36b2:	fa 81       	ldd	r31, Y+2	; 0x02
    36b4:	87 89       	ldd	r24, Z+23	; 0x17
    36b6:	90 8d       	ldd	r25, Z+24	; 0x18
    36b8:	2b 81       	ldd	r18, Y+3	; 0x03
    36ba:	3c 81       	ldd	r19, Y+4	; 0x04
    36bc:	65 ea       	ldi	r22, 0xA5	; 165
    36be:	70 e0       	ldi	r23, 0x00	; 0
    36c0:	a9 01       	movw	r20, r18
    36c2:	0e 94 c4 1b 	call	0x3788	; 0x3788 <memset>
		}
	}

	return pxNewTCB;
    36c6:	89 81       	ldd	r24, Y+1	; 0x01
    36c8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    36ca:	28 96       	adiw	r28, 0x08	; 8
    36cc:	0f b6       	in	r0, 0x3f	; 63
    36ce:	f8 94       	cli
    36d0:	de bf       	out	0x3e, r29	; 62
    36d2:	0f be       	out	0x3f, r0	; 63
    36d4:	cd bf       	out	0x3d, r28	; 61
    36d6:	cf 91       	pop	r28
    36d8:	df 91       	pop	r29
    36da:	08 95       	ret

000036dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    36dc:	df 93       	push	r29
    36de:	cf 93       	push	r28
    36e0:	00 d0       	rcall	.+0      	; 0x36e2 <prvDeleteTCB+0x6>
    36e2:	cd b7       	in	r28, 0x3d	; 61
    36e4:	de b7       	in	r29, 0x3e	; 62
    36e6:	9a 83       	std	Y+2, r25	; 0x02
    36e8:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    36ea:	e9 81       	ldd	r30, Y+1	; 0x01
    36ec:	fa 81       	ldd	r31, Y+2	; 0x02
    36ee:	87 89       	ldd	r24, Z+23	; 0x17
    36f0:	90 8d       	ldd	r25, Z+24	; 0x18
    36f2:	0e 94 c1 08 	call	0x1182	; 0x1182 <vPortFree>
		vPortFree( pxTCB );
    36f6:	89 81       	ldd	r24, Y+1	; 0x01
    36f8:	9a 81       	ldd	r25, Y+2	; 0x02
    36fa:	0e 94 c1 08 	call	0x1182	; 0x1182 <vPortFree>
	}
    36fe:	0f 90       	pop	r0
    3700:	0f 90       	pop	r0
    3702:	cf 91       	pop	r28
    3704:	df 91       	pop	r29
    3706:	08 95       	ret

00003708 <__prologue_saves__>:
    3708:	2f 92       	push	r2
    370a:	3f 92       	push	r3
    370c:	4f 92       	push	r4
    370e:	5f 92       	push	r5
    3710:	6f 92       	push	r6
    3712:	7f 92       	push	r7
    3714:	8f 92       	push	r8
    3716:	9f 92       	push	r9
    3718:	af 92       	push	r10
    371a:	bf 92       	push	r11
    371c:	cf 92       	push	r12
    371e:	df 92       	push	r13
    3720:	ef 92       	push	r14
    3722:	ff 92       	push	r15
    3724:	0f 93       	push	r16
    3726:	1f 93       	push	r17
    3728:	cf 93       	push	r28
    372a:	df 93       	push	r29
    372c:	cd b7       	in	r28, 0x3d	; 61
    372e:	de b7       	in	r29, 0x3e	; 62
    3730:	ca 1b       	sub	r28, r26
    3732:	db 0b       	sbc	r29, r27
    3734:	0f b6       	in	r0, 0x3f	; 63
    3736:	f8 94       	cli
    3738:	de bf       	out	0x3e, r29	; 62
    373a:	0f be       	out	0x3f, r0	; 63
    373c:	cd bf       	out	0x3d, r28	; 61
    373e:	09 94       	ijmp

00003740 <__epilogue_restores__>:
    3740:	2a 88       	ldd	r2, Y+18	; 0x12
    3742:	39 88       	ldd	r3, Y+17	; 0x11
    3744:	48 88       	ldd	r4, Y+16	; 0x10
    3746:	5f 84       	ldd	r5, Y+15	; 0x0f
    3748:	6e 84       	ldd	r6, Y+14	; 0x0e
    374a:	7d 84       	ldd	r7, Y+13	; 0x0d
    374c:	8c 84       	ldd	r8, Y+12	; 0x0c
    374e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3750:	aa 84       	ldd	r10, Y+10	; 0x0a
    3752:	b9 84       	ldd	r11, Y+9	; 0x09
    3754:	c8 84       	ldd	r12, Y+8	; 0x08
    3756:	df 80       	ldd	r13, Y+7	; 0x07
    3758:	ee 80       	ldd	r14, Y+6	; 0x06
    375a:	fd 80       	ldd	r15, Y+5	; 0x05
    375c:	0c 81       	ldd	r16, Y+4	; 0x04
    375e:	1b 81       	ldd	r17, Y+3	; 0x03
    3760:	aa 81       	ldd	r26, Y+2	; 0x02
    3762:	b9 81       	ldd	r27, Y+1	; 0x01
    3764:	ce 0f       	add	r28, r30
    3766:	d1 1d       	adc	r29, r1
    3768:	0f b6       	in	r0, 0x3f	; 63
    376a:	f8 94       	cli
    376c:	de bf       	out	0x3e, r29	; 62
    376e:	0f be       	out	0x3f, r0	; 63
    3770:	cd bf       	out	0x3d, r28	; 61
    3772:	ed 01       	movw	r28, r26
    3774:	08 95       	ret

00003776 <memcpy>:
    3776:	fb 01       	movw	r30, r22
    3778:	dc 01       	movw	r26, r24
    377a:	02 c0       	rjmp	.+4      	; 0x3780 <memcpy+0xa>
    377c:	01 90       	ld	r0, Z+
    377e:	0d 92       	st	X+, r0
    3780:	41 50       	subi	r20, 0x01	; 1
    3782:	50 40       	sbci	r21, 0x00	; 0
    3784:	d8 f7       	brcc	.-10     	; 0x377c <memcpy+0x6>
    3786:	08 95       	ret

00003788 <memset>:
    3788:	dc 01       	movw	r26, r24
    378a:	01 c0       	rjmp	.+2      	; 0x378e <memset+0x6>
    378c:	6d 93       	st	X+, r22
    378e:	41 50       	subi	r20, 0x01	; 1
    3790:	50 40       	sbci	r21, 0x00	; 0
    3792:	e0 f7       	brcc	.-8      	; 0x378c <memset+0x4>
    3794:	08 95       	ret

00003796 <strncpy>:
    3796:	fb 01       	movw	r30, r22
    3798:	dc 01       	movw	r26, r24
    379a:	41 50       	subi	r20, 0x01	; 1
    379c:	50 40       	sbci	r21, 0x00	; 0
    379e:	48 f0       	brcs	.+18     	; 0x37b2 <strncpy+0x1c>
    37a0:	01 90       	ld	r0, Z+
    37a2:	0d 92       	st	X+, r0
    37a4:	00 20       	and	r0, r0
    37a6:	c9 f7       	brne	.-14     	; 0x379a <strncpy+0x4>
    37a8:	01 c0       	rjmp	.+2      	; 0x37ac <strncpy+0x16>
    37aa:	1d 92       	st	X+, r1
    37ac:	41 50       	subi	r20, 0x01	; 1
    37ae:	50 40       	sbci	r21, 0x00	; 0
    37b0:	e0 f7       	brcc	.-8      	; 0x37aa <strncpy+0x14>
    37b2:	08 95       	ret

000037b4 <_exit>:
    37b4:	f8 94       	cli

000037b6 <__stop_program>:
    37b6:	ff cf       	rjmp	.-2      	; 0x37b6 <__stop_program>
