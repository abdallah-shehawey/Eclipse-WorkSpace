
RTOS_Mutex.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000054b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000054b6  0000554a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003be  00800076  00800076  00005560  2**0
                  ALLOC
  3 .stab         00006da4  00000000  00000000  00005560  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000379a  00000000  00000000  0000c304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000fa9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000fbde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000fd4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00011997  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00012882  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00013630  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00013790  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00013a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000141eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	f4 e5       	ldi	r31, 0x54	; 84
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 33       	cpi	r26, 0x34	; 52
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <main>
      8a:	0c 94 59 2a 	jmp	0x54b2	; 0x54b2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 19 2a 	jmp	0x5432	; 0x5432 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e6       	ldi	r26, 0x69	; 105
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 35 2a 	jmp	0x546a	; 0x546a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 25 2a 	jmp	0x544a	; 0x544a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 41 2a 	jmp	0x5482	; 0x5482 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 25 2a 	jmp	0x544a	; 0x544a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 41 2a 	jmp	0x5482	; 0x5482 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 19 2a 	jmp	0x5432	; 0x5432 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e6       	ldi	r24, 0x69	; 105
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 35 2a 	jmp	0x546a	; 0x546a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 25 2a 	jmp	0x544a	; 0x544a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 41 2a 	jmp	0x5482	; 0x5482 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 25 2a 	jmp	0x544a	; 0x544a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 41 2a 	jmp	0x5482	; 0x5482 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 25 2a 	jmp	0x544a	; 0x544a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 41 2a 	jmp	0x5482	; 0x5482 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 29 2a 	jmp	0x5452	; 0x5452 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 45 2a 	jmp	0x548a	; 0x548a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_vsetPINDir>:




void DIO_vsetPINDir(char portname,char pinnumber,char direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_vsetPINDir+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_vsetPINDir+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	82 34       	cpi	r24, 0x42	; 66
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <DIO_vsetPINDir+0x2a>
     b6e:	44 c0       	rjmp	.+136    	; 0xbf8 <DIO_vsetPINDir+0xb2>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	23 34       	cpi	r18, 0x43	; 67
     b76:	31 05       	cpc	r19, r1
     b78:	34 f4       	brge	.+12     	; 0xb86 <DIO_vsetPINDir+0x40>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	81 34       	cpi	r24, 0x41	; 65
     b80:	91 05       	cpc	r25, r1
     b82:	71 f0       	breq	.+28     	; 0xba0 <DIO_vsetPINDir+0x5a>
     b84:	bc c0       	rjmp	.+376    	; 0xcfe <DIO_vsetPINDir+0x1b8>
     b86:	2c 81       	ldd	r18, Y+4	; 0x04
     b88:	3d 81       	ldd	r19, Y+5	; 0x05
     b8a:	23 34       	cpi	r18, 0x43	; 67
     b8c:	31 05       	cpc	r19, r1
     b8e:	09 f4       	brne	.+2      	; 0xb92 <DIO_vsetPINDir+0x4c>
     b90:	5f c0       	rjmp	.+190    	; 0xc50 <DIO_vsetPINDir+0x10a>
     b92:	8c 81       	ldd	r24, Y+4	; 0x04
     b94:	9d 81       	ldd	r25, Y+5	; 0x05
     b96:	84 34       	cpi	r24, 0x44	; 68
     b98:	91 05       	cpc	r25, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <DIO_vsetPINDir+0x58>
     b9c:	85 c0       	rjmp	.+266    	; 0xca8 <DIO_vsetPINDir+0x162>
     b9e:	af c0       	rjmp	.+350    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	{
		
	
	case 'A':
	if(direction==1)
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	a1 f4       	brne	.+40     	; 0xbce <DIO_vsetPINDir+0x88>
	{
		DDRA|=(1<<pinnumber);
     ba6:	aa e3       	ldi	r26, 0x3A	; 58
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e3       	ldi	r30, 0x3A	; 58
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_vsetPINDir+0x7e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_vsetPINDir+0x7a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	98 c0       	rjmp	.+304    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	else
	{
		DDRA&=(~(1<<pinnumber));
     bce:	aa e3       	ldi	r26, 0x3A	; 58
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	ea e3       	ldi	r30, 0x3A	; 58
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_vsetPINDir+0xa6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_vsetPINDir+0xa2>
     bf0:	80 95       	com	r24
     bf2:	84 23       	and	r24, r20
     bf4:	8c 93       	st	X, r24
     bf6:	83 c0       	rjmp	.+262    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	break;
	case 'B':
	if(direction==1)
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	a1 f4       	brne	.+40     	; 0xc26 <DIO_vsetPINDir+0xe0>
	{
		DDRB|=(1<<pinnumber);
     bfe:	a7 e3       	ldi	r26, 0x37	; 55
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e7 e3       	ldi	r30, 0x37	; 55
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	48 2f       	mov	r20, r24
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	02 2e       	mov	r0, r18
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <DIO_vsetPINDir+0xd6>
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	0a 94       	dec	r0
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <DIO_vsetPINDir+0xd2>
     c20:	84 2b       	or	r24, r20
     c22:	8c 93       	st	X, r24
     c24:	6c c0       	rjmp	.+216    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	else
	{
		DDRB&=(~(1<<pinnumber));
     c26:	a7 e3       	ldi	r26, 0x37	; 55
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e7 e3       	ldi	r30, 0x37	; 55
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	48 2f       	mov	r20, r24
     c32:	8a 81       	ldd	r24, Y+2	; 0x02
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	02 2e       	mov	r0, r18
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_vsetPINDir+0xfe>
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <DIO_vsetPINDir+0xfa>
     c48:	80 95       	com	r24
     c4a:	84 23       	and	r24, r20
     c4c:	8c 93       	st	X, r24
     c4e:	57 c0       	rjmp	.+174    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	break;
	case 'C':
	if(direction==1)
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	a1 f4       	brne	.+40     	; 0xc7e <DIO_vsetPINDir+0x138>
	{
		DDRC|=(1<<pinnumber);
     c56:	a4 e3       	ldi	r26, 0x34	; 52
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e4 e3       	ldi	r30, 0x34	; 52
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	48 2f       	mov	r20, r24
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 2e       	mov	r0, r18
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <DIO_vsetPINDir+0x12e>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	0a 94       	dec	r0
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <DIO_vsetPINDir+0x12a>
     c78:	84 2b       	or	r24, r20
     c7a:	8c 93       	st	X, r24
     c7c:	40 c0       	rjmp	.+128    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	else
	{
		DDRC&=(~(1<<pinnumber));
     c7e:	a4 e3       	ldi	r26, 0x34	; 52
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e4 e3       	ldi	r30, 0x34	; 52
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	48 2f       	mov	r20, r24
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	02 2e       	mov	r0, r18
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <DIO_vsetPINDir+0x156>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	0a 94       	dec	r0
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <DIO_vsetPINDir+0x152>
     ca0:	80 95       	com	r24
     ca2:	84 23       	and	r24, r20
     ca4:	8c 93       	st	X, r24
     ca6:	2b c0       	rjmp	.+86     	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	break;
	case 'D':
	if(direction==1)
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	a1 f4       	brne	.+40     	; 0xcd6 <DIO_vsetPINDir+0x190>
	{
		DDRD|=(1<<pinnumber);
     cae:	a1 e3       	ldi	r26, 0x31	; 49
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e1 e3       	ldi	r30, 0x31	; 49
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	48 2f       	mov	r20, r24
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 2e       	mov	r0, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <DIO_vsetPINDir+0x186>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	0a 94       	dec	r0
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <DIO_vsetPINDir+0x182>
     cd0:	84 2b       	or	r24, r20
     cd2:	8c 93       	st	X, r24
     cd4:	14 c0       	rjmp	.+40     	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	else
	{
		DDRD&=(~(1<<pinnumber));
     cd6:	a1 e3       	ldi	r26, 0x31	; 49
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e1 e3       	ldi	r30, 0x31	; 49
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 2e       	mov	r0, r18
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <DIO_vsetPINDir+0x1ae>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <DIO_vsetPINDir+0x1aa>
     cf8:	80 95       	com	r24
     cfa:	84 23       	and	r24, r20
     cfc:	8c 93       	st	X, r24
	}
	break;
	default: break;
	}	
}
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <DIO_write>:


void DIO_write(char portname,char pinnumber,char outputvalue)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <DIO_write+0x6>
     d14:	00 d0       	rcall	.+0      	; 0xd16 <DIO_write+0x8>
     d16:	0f 92       	push	r0
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	89 83       	std	Y+1, r24	; 0x01
     d1e:	6a 83       	std	Y+2, r22	; 0x02
     d20:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	3d 83       	std	Y+5, r19	; 0x05
     d2a:	2c 83       	std	Y+4, r18	; 0x04
     d2c:	8c 81       	ldd	r24, Y+4	; 0x04
     d2e:	9d 81       	ldd	r25, Y+5	; 0x05
     d30:	82 34       	cpi	r24, 0x42	; 66
     d32:	91 05       	cpc	r25, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <DIO_write+0x2a>
     d36:	44 c0       	rjmp	.+136    	; 0xdc0 <DIO_write+0xb2>
     d38:	2c 81       	ldd	r18, Y+4	; 0x04
     d3a:	3d 81       	ldd	r19, Y+5	; 0x05
     d3c:	23 34       	cpi	r18, 0x43	; 67
     d3e:	31 05       	cpc	r19, r1
     d40:	34 f4       	brge	.+12     	; 0xd4e <DIO_write+0x40>
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	9d 81       	ldd	r25, Y+5	; 0x05
     d46:	81 34       	cpi	r24, 0x41	; 65
     d48:	91 05       	cpc	r25, r1
     d4a:	71 f0       	breq	.+28     	; 0xd68 <DIO_write+0x5a>
     d4c:	bc c0       	rjmp	.+376    	; 0xec6 <DIO_write+0x1b8>
     d4e:	2c 81       	ldd	r18, Y+4	; 0x04
     d50:	3d 81       	ldd	r19, Y+5	; 0x05
     d52:	23 34       	cpi	r18, 0x43	; 67
     d54:	31 05       	cpc	r19, r1
     d56:	09 f4       	brne	.+2      	; 0xd5a <DIO_write+0x4c>
     d58:	5f c0       	rjmp	.+190    	; 0xe18 <DIO_write+0x10a>
     d5a:	8c 81       	ldd	r24, Y+4	; 0x04
     d5c:	9d 81       	ldd	r25, Y+5	; 0x05
     d5e:	84 34       	cpi	r24, 0x44	; 68
     d60:	91 05       	cpc	r25, r1
     d62:	09 f4       	brne	.+2      	; 0xd66 <DIO_write+0x58>
     d64:	85 c0       	rjmp	.+266    	; 0xe70 <DIO_write+0x162>
     d66:	af c0       	rjmp	.+350    	; 0xec6 <DIO_write+0x1b8>
	{
		case 'A' :
		
			if(outputvalue==1)
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	a1 f4       	brne	.+40     	; 0xd96 <DIO_write+0x88>
			{
				PORTA|=(1<<pinnumber);
     d6e:	ab e3       	ldi	r26, 0x3B	; 59
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	eb e3       	ldi	r30, 0x3B	; 59
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 2e       	mov	r0, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <DIO_write+0x7e>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <DIO_write+0x7a>
     d90:	84 2b       	or	r24, r20
     d92:	8c 93       	st	X, r24
     d94:	98 c0       	rjmp	.+304    	; 0xec6 <DIO_write+0x1b8>
			}
			else
			{
				PORTA&=(~(1<<pinnumber));
     d96:	ab e3       	ldi	r26, 0x3B	; 59
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	eb e3       	ldi	r30, 0x3B	; 59
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <DIO_write+0xa6>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <DIO_write+0xa2>
     db8:	80 95       	com	r24
     dba:	84 23       	and	r24, r20
     dbc:	8c 93       	st	X, r24
     dbe:	83 c0       	rjmp	.+262    	; 0xec6 <DIO_write+0x1b8>
			}
			break ;
			case 'B':
			
			if(outputvalue==1)
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	a1 f4       	brne	.+40     	; 0xdee <DIO_write+0xe0>
			{
				PORTB|=(1<<pinnumber);
     dc6:	a8 e3       	ldi	r26, 0x38	; 56
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e3       	ldi	r30, 0x38	; 56
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	48 2f       	mov	r20, r24
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 2e       	mov	r0, r18
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <DIO_write+0xd6>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	0a 94       	dec	r0
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <DIO_write+0xd2>
     de8:	84 2b       	or	r24, r20
     dea:	8c 93       	st	X, r24
     dec:	6c c0       	rjmp	.+216    	; 0xec6 <DIO_write+0x1b8>
			}
			else
			{
				PORTB&=(~(1<<pinnumber));
     dee:	a8 e3       	ldi	r26, 0x38	; 56
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e8 e3       	ldi	r30, 0x38	; 56
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	48 2f       	mov	r20, r24
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 2e       	mov	r0, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_write+0xfe>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_write+0xfa>
     e10:	80 95       	com	r24
     e12:	84 23       	and	r24, r20
     e14:	8c 93       	st	X, r24
     e16:	57 c0       	rjmp	.+174    	; 0xec6 <DIO_write+0x1b8>
			}
			break ;
			case 'C' :
			
			if(outputvalue==1)
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	a1 f4       	brne	.+40     	; 0xe46 <DIO_write+0x138>
			{
				PORTC|=(1<<pinnumber);
     e1e:	a5 e3       	ldi	r26, 0x35	; 53
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e5 e3       	ldi	r30, 0x35	; 53
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_write+0x12e>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_write+0x12a>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	40 c0       	rjmp	.+128    	; 0xec6 <DIO_write+0x1b8>
			}
			else
			{
				PORTC&=(~(1<<pinnumber));
     e46:	a5 e3       	ldi	r26, 0x35	; 53
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e5 e3       	ldi	r30, 0x35	; 53
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <DIO_write+0x156>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <DIO_write+0x152>
     e68:	80 95       	com	r24
     e6a:	84 23       	and	r24, r20
     e6c:	8c 93       	st	X, r24
     e6e:	2b c0       	rjmp	.+86     	; 0xec6 <DIO_write+0x1b8>
			}
			break ;
		case 'D':
		
		if(outputvalue==1)
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	a1 f4       	brne	.+40     	; 0xe9e <DIO_write+0x190>
		{
			PORTD|=(1<<pinnumber);
     e76:	a2 e3       	ldi	r26, 0x32	; 50
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e2 e3       	ldi	r30, 0x32	; 50
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_write+0x186>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_write+0x182>
     e98:	84 2b       	or	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	14 c0       	rjmp	.+40     	; 0xec6 <DIO_write+0x1b8>
		}
		else
	{
			PORTD&=(~(1<<pinnumber));
     e9e:	a2 e3       	ldi	r26, 0x32	; 50
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e2 e3       	ldi	r30, 0x32	; 50
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DIO_write+0x1ae>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <DIO_write+0x1aa>
     ec0:	80 95       	com	r24
     ec2:	84 23       	and	r24, r20
     ec4:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <DIO_u8read>:


char DIO_u8read(char portname,char pinnumber)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	00 d0       	rcall	.+0      	; 0xedc <DIO_u8read+0x6>
     edc:	00 d0       	rcall	.+0      	; 0xede <DIO_u8read+0x8>
     ede:	0f 92       	push	r0
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	8a 83       	std	Y+2, r24	; 0x02
     ee6:	6b 83       	std	Y+3, r22	; 0x03
	char x ;
	switch(portname)
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	3d 83       	std	Y+5, r19	; 0x05
     ef0:	2c 83       	std	Y+4, r18	; 0x04
     ef2:	4c 81       	ldd	r20, Y+4	; 0x04
     ef4:	5d 81       	ldd	r21, Y+5	; 0x05
     ef6:	42 34       	cpi	r20, 0x42	; 66
     ef8:	51 05       	cpc	r21, r1
     efa:	b1 f1       	breq	.+108    	; 0xf68 <DIO_u8read+0x92>
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	9d 81       	ldd	r25, Y+5	; 0x05
     f00:	83 34       	cpi	r24, 0x43	; 67
     f02:	91 05       	cpc	r25, r1
     f04:	34 f4       	brge	.+12     	; 0xf12 <DIO_u8read+0x3c>
     f06:	2c 81       	ldd	r18, Y+4	; 0x04
     f08:	3d 81       	ldd	r19, Y+5	; 0x05
     f0a:	21 34       	cpi	r18, 0x41	; 65
     f0c:	31 05       	cpc	r19, r1
     f0e:	71 f0       	breq	.+28     	; 0xf2c <DIO_u8read+0x56>
     f10:	84 c0       	rjmp	.+264    	; 0x101a <DIO_u8read+0x144>
     f12:	4c 81       	ldd	r20, Y+4	; 0x04
     f14:	5d 81       	ldd	r21, Y+5	; 0x05
     f16:	43 34       	cpi	r20, 0x43	; 67
     f18:	51 05       	cpc	r21, r1
     f1a:	09 f4       	brne	.+2      	; 0xf1e <DIO_u8read+0x48>
     f1c:	43 c0       	rjmp	.+134    	; 0xfa4 <DIO_u8read+0xce>
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	9d 81       	ldd	r25, Y+5	; 0x05
     f22:	84 34       	cpi	r24, 0x44	; 68
     f24:	91 05       	cpc	r25, r1
     f26:	09 f4       	brne	.+2      	; 0xf2a <DIO_u8read+0x54>
     f28:	5b c0       	rjmp	.+182    	; 0xfe0 <DIO_u8read+0x10a>
     f2a:	77 c0       	rjmp	.+238    	; 0x101a <DIO_u8read+0x144>
	{
		case 'A' :
		x=((PINA&(1<<pinnumber))>>pinnumber);
     f2c:	e9 e3       	ldi	r30, 0x39	; 57
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <DIO_u8read+0x70>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	2a 95       	dec	r18
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <DIO_u8read+0x6c>
     f4a:	9a 01       	movw	r18, r20
     f4c:	28 23       	and	r18, r24
     f4e:	39 23       	and	r19, r25
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	a9 01       	movw	r20, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_u8read+0x88>
     f5a:	55 95       	asr	r21
     f5c:	47 95       	ror	r20
     f5e:	8a 95       	dec	r24
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_u8read+0x84>
     f62:	ca 01       	movw	r24, r20
     f64:	89 83       	std	Y+1, r24	; 0x01
     f66:	59 c0       	rjmp	.+178    	; 0x101a <DIO_u8read+0x144>
		break;
		
	case 'B' :
	x=((PINB&(1<<pinnumber))>>pinnumber) ;
     f68:	e6 e3       	ldi	r30, 0x36	; 54
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <DIO_u8read+0xac>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	2a 95       	dec	r18
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <DIO_u8read+0xa8>
     f86:	9a 01       	movw	r18, r20
     f88:	28 23       	and	r18, r24
     f8a:	39 23       	and	r19, r25
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	a9 01       	movw	r20, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_u8read+0xc4>
     f96:	55 95       	asr	r21
     f98:	47 95       	ror	r20
     f9a:	8a 95       	dec	r24
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_u8read+0xc0>
     f9e:	ca 01       	movw	r24, r20
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	3b c0       	rjmp	.+118    	; 0x101a <DIO_u8read+0x144>
	break;
	
	case 'C' :
	x=((PINC&(1<<pinnumber))>>pinnumber) ;
     fa4:	e3 e3       	ldi	r30, 0x33	; 51
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_u8read+0xe8>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	2a 95       	dec	r18
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_u8read+0xe4>
     fc2:	9a 01       	movw	r18, r20
     fc4:	28 23       	and	r18, r24
     fc6:	39 23       	and	r19, r25
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a9 01       	movw	r20, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_u8read+0x100>
     fd2:	55 95       	asr	r21
     fd4:	47 95       	ror	r20
     fd6:	8a 95       	dec	r24
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_u8read+0xfc>
     fda:	ca 01       	movw	r24, r20
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	1d c0       	rjmp	.+58     	; 0x101a <DIO_u8read+0x144>
	break;
	
	case 'D' :
	x=((PIND&(1<<pinnumber))>>pinnumber) ;
     fe0:	e0 e3       	ldi	r30, 0x30	; 48
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_u8read+0x124>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	2a 95       	dec	r18
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_u8read+0x120>
     ffe:	9a 01       	movw	r18, r20
    1000:	28 23       	and	r18, r24
    1002:	39 23       	and	r19, r25
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	88 2f       	mov	r24, r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a9 01       	movw	r20, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_u8read+0x13c>
    100e:	55 95       	asr	r21
    1010:	47 95       	ror	r20
    1012:	8a 95       	dec	r24
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_u8read+0x138>
    1016:	ca 01       	movw	r24, r20
    1018:	89 83       	std	Y+1, r24	; 0x01
	break;
	default: break;
}
return x ;
    101a:	89 81       	ldd	r24, Y+1	; 0x01
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <DIO_toggle>:
void DIO_toggle(char portname,char pinnumber)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	00 d0       	rcall	.+0      	; 0x1032 <DIO_toggle+0x6>
    1032:	00 d0       	rcall	.+0      	; 0x1034 <DIO_toggle+0x8>
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	89 83       	std	Y+1, r24	; 0x01
    103a:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	3c 83       	std	Y+4, r19	; 0x04
    1044:	2b 83       	std	Y+3, r18	; 0x03
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	82 34       	cpi	r24, 0x42	; 66
    104c:	91 05       	cpc	r25, r1
    104e:	51 f1       	breq	.+84     	; 0x10a4 <DIO_toggle+0x78>
    1050:	2b 81       	ldd	r18, Y+3	; 0x03
    1052:	3c 81       	ldd	r19, Y+4	; 0x04
    1054:	23 34       	cpi	r18, 0x43	; 67
    1056:	31 05       	cpc	r19, r1
    1058:	34 f4       	brge	.+12     	; 0x1066 <DIO_toggle+0x3a>
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	9c 81       	ldd	r25, Y+4	; 0x04
    105e:	81 34       	cpi	r24, 0x41	; 65
    1060:	91 05       	cpc	r25, r1
    1062:	61 f0       	breq	.+24     	; 0x107c <DIO_toggle+0x50>
    1064:	5a c0       	rjmp	.+180    	; 0x111a <DIO_toggle+0xee>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	23 34       	cpi	r18, 0x43	; 67
    106c:	31 05       	cpc	r19, r1
    106e:	71 f1       	breq	.+92     	; 0x10cc <DIO_toggle+0xa0>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	84 34       	cpi	r24, 0x44	; 68
    1076:	91 05       	cpc	r25, r1
    1078:	e9 f1       	breq	.+122    	; 0x10f4 <DIO_toggle+0xc8>
    107a:	4f c0       	rjmp	.+158    	; 0x111a <DIO_toggle+0xee>
	{
		case 'A':
		PORTA^=(1<<pinnumber);
    107c:	ab e3       	ldi	r26, 0x3B	; 59
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	eb e3       	ldi	r30, 0x3B	; 59
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_toggle+0x6e>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_toggle+0x6a>
    109e:	84 27       	eor	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	3b c0       	rjmp	.+118    	; 0x111a <DIO_toggle+0xee>
		break;
		case 'B':
		PORTB^=(1<<pinnumber);
    10a4:	a8 e3       	ldi	r26, 0x38	; 56
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e8 e3       	ldi	r30, 0x38	; 56
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_toggle+0x96>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_toggle+0x92>
    10c6:	84 27       	eor	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	27 c0       	rjmp	.+78     	; 0x111a <DIO_toggle+0xee>
		break;
		case 'C':
		PORTC^=(1<<pinnumber);
    10cc:	a5 e3       	ldi	r26, 0x35	; 53
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e5 e3       	ldi	r30, 0x35	; 53
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_toggle+0xbe>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_toggle+0xba>
    10ee:	84 27       	eor	r24, r20
    10f0:	8c 93       	st	X, r24
    10f2:	13 c0       	rjmp	.+38     	; 0x111a <DIO_toggle+0xee>
		break;
		case 'D':
		PORTD^=(1<<pinnumber);
    10f4:	a2 e3       	ldi	r26, 0x32	; 50
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e2 e3       	ldi	r30, 0x32	; 50
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_toggle+0xe6>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_toggle+0xe2>
    1116:	84 27       	eor	r24, r20
    1118:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <DIO_write_port>:
void DIO_write_port(char portname,char portvalue)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	00 d0       	rcall	.+0      	; 0x112e <DIO_write_port+0x6>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <DIO_write_port+0x8>
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	89 83       	std	Y+1, r24	; 0x01
    1136:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	3c 83       	std	Y+4, r19	; 0x04
    1140:	2b 83       	std	Y+3, r18	; 0x03
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	9c 81       	ldd	r25, Y+4	; 0x04
    1146:	82 34       	cpi	r24, 0x42	; 66
    1148:	91 05       	cpc	r25, r1
    114a:	d9 f0       	breq	.+54     	; 0x1182 <DIO_write_port+0x5a>
    114c:	2b 81       	ldd	r18, Y+3	; 0x03
    114e:	3c 81       	ldd	r19, Y+4	; 0x04
    1150:	23 34       	cpi	r18, 0x43	; 67
    1152:	31 05       	cpc	r19, r1
    1154:	34 f4       	brge	.+12     	; 0x1162 <DIO_write_port+0x3a>
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	81 34       	cpi	r24, 0x41	; 65
    115c:	91 05       	cpc	r25, r1
    115e:	61 f0       	breq	.+24     	; 0x1178 <DIO_write_port+0x50>
    1160:	1e c0       	rjmp	.+60     	; 0x119e <DIO_write_port+0x76>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	23 34       	cpi	r18, 0x43	; 67
    1168:	31 05       	cpc	r19, r1
    116a:	81 f0       	breq	.+32     	; 0x118c <DIO_write_port+0x64>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	84 34       	cpi	r24, 0x44	; 68
    1172:	91 05       	cpc	r25, r1
    1174:	81 f0       	breq	.+32     	; 0x1196 <DIO_write_port+0x6e>
    1176:	13 c0       	rjmp	.+38     	; 0x119e <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue;
    1178:	eb e3       	ldi	r30, 0x3B	; 59
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	80 83       	st	Z, r24
    1180:	0e c0       	rjmp	.+28     	; 0x119e <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue;
    1182:	e8 e3       	ldi	r30, 0x38	; 56
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	80 83       	st	Z, r24
    118a:	09 c0       	rjmp	.+18     	; 0x119e <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue;
    118c:	e5 e3       	ldi	r30, 0x35	; 53
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	80 83       	st	Z, r24
    1194:	04 c0       	rjmp	.+8      	; 0x119e <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue;
    1196:	e2 e3       	ldi	r30, 0x32	; 50
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	80 83       	st	Z, r24
		break ;
		default: break ;
	}
}
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <dio_write_highnibble>:
void dio_write_highnibble(char portname,char value)
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <dio_write_highnibble+0x6>
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <dio_write_highnibble+0x8>
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	6a 83       	std	Y+2, r22	; 0x02
		switch(portname)
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	3c 83       	std	Y+4, r19	; 0x04
    11c4:	2b 83       	std	Y+3, r18	; 0x03
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	82 34       	cpi	r24, 0x42	; 66
    11cc:	91 05       	cpc	r25, r1
    11ce:	09 f1       	breq	.+66     	; 0x1212 <dio_write_highnibble+0x66>
    11d0:	2b 81       	ldd	r18, Y+3	; 0x03
    11d2:	3c 81       	ldd	r19, Y+4	; 0x04
    11d4:	23 34       	cpi	r18, 0x43	; 67
    11d6:	31 05       	cpc	r19, r1
    11d8:	34 f4       	brge	.+12     	; 0x11e6 <dio_write_highnibble+0x3a>
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	81 34       	cpi	r24, 0x41	; 65
    11e0:	91 05       	cpc	r25, r1
    11e2:	61 f0       	breq	.+24     	; 0x11fc <dio_write_highnibble+0x50>
    11e4:	36 c0       	rjmp	.+108    	; 0x1252 <dio_write_highnibble+0xa6>
    11e6:	2b 81       	ldd	r18, Y+3	; 0x03
    11e8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ea:	23 34       	cpi	r18, 0x43	; 67
    11ec:	31 05       	cpc	r19, r1
    11ee:	e1 f0       	breq	.+56     	; 0x1228 <dio_write_highnibble+0x7c>
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	84 34       	cpi	r24, 0x44	; 68
    11f6:	91 05       	cpc	r25, r1
    11f8:	11 f1       	breq	.+68     	; 0x123e <dio_write_highnibble+0x92>
    11fa:	2b c0       	rjmp	.+86     	; 0x1252 <dio_write_highnibble+0xa6>
		{
			case 'A' :
			PORTA|=(value&0xf0);
    11fc:	ab e3       	ldi	r26, 0x3B	; 59
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	eb e3       	ldi	r30, 0x3B	; 59
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	98 2f       	mov	r25, r24
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	80 7f       	andi	r24, 0xF0	; 240
    120c:	89 2b       	or	r24, r25
    120e:	8c 93       	st	X, r24
    1210:	20 c0       	rjmp	.+64     	; 0x1252 <dio_write_highnibble+0xa6>
			break ;
			case 'B':
			PORTB|=(value&0xf0);
    1212:	a8 e3       	ldi	r26, 0x38	; 56
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e8 e3       	ldi	r30, 0x38	; 56
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	98 2f       	mov	r25, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	80 7f       	andi	r24, 0xF0	; 240
    1222:	89 2b       	or	r24, r25
    1224:	8c 93       	st	X, r24
    1226:	15 c0       	rjmp	.+42     	; 0x1252 <dio_write_highnibble+0xa6>
			break ;
			case 'C' :
			PORTC|=(value&0xf0);
    1228:	a5 e3       	ldi	r26, 0x35	; 53
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e5 e3       	ldi	r30, 0x35	; 53
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	98 2f       	mov	r25, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	80 7f       	andi	r24, 0xF0	; 240
    1238:	89 2b       	or	r24, r25
    123a:	8c 93       	st	X, r24
    123c:	0a c0       	rjmp	.+20     	; 0x1252 <dio_write_highnibble+0xa6>
			break ;
			case 'D':
			PORTD|=(value&0xf0);
    123e:	a2 e3       	ldi	r26, 0x32	; 50
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e2 e3       	ldi	r30, 0x32	; 50
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	98 2f       	mov	r25, r24
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	80 7f       	andi	r24, 0xF0	; 240
    124e:	89 2b       	or	r24, r25
    1250:	8c 93       	st	X, r24
			break ;
			default: break ;
	
}
}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <clear_high_nibble>:
void clear_high_nibble(char portname)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <clear_high_nibble+0x6>
    1266:	0f 92       	push	r0
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	3b 83       	std	Y+3, r19	; 0x03
    1276:	2a 83       	std	Y+2, r18	; 0x02
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	9b 81       	ldd	r25, Y+3	; 0x03
    127c:	82 34       	cpi	r24, 0x42	; 66
    127e:	91 05       	cpc	r25, r1
    1280:	f1 f0       	breq	.+60     	; 0x12be <clear_high_nibble+0x5e>
    1282:	2a 81       	ldd	r18, Y+2	; 0x02
    1284:	3b 81       	ldd	r19, Y+3	; 0x03
    1286:	23 34       	cpi	r18, 0x43	; 67
    1288:	31 05       	cpc	r19, r1
    128a:	34 f4       	brge	.+12     	; 0x1298 <clear_high_nibble+0x38>
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	9b 81       	ldd	r25, Y+3	; 0x03
    1290:	81 34       	cpi	r24, 0x41	; 65
    1292:	91 05       	cpc	r25, r1
    1294:	61 f0       	breq	.+24     	; 0x12ae <clear_high_nibble+0x4e>
    1296:	2a c0       	rjmp	.+84     	; 0x12ec <clear_high_nibble+0x8c>
    1298:	2a 81       	ldd	r18, Y+2	; 0x02
    129a:	3b 81       	ldd	r19, Y+3	; 0x03
    129c:	23 34       	cpi	r18, 0x43	; 67
    129e:	31 05       	cpc	r19, r1
    12a0:	b1 f0       	breq	.+44     	; 0x12ce <clear_high_nibble+0x6e>
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	9b 81       	ldd	r25, Y+3	; 0x03
    12a6:	84 34       	cpi	r24, 0x44	; 68
    12a8:	91 05       	cpc	r25, r1
    12aa:	c9 f0       	breq	.+50     	; 0x12de <clear_high_nibble+0x7e>
    12ac:	1f c0       	rjmp	.+62     	; 0x12ec <clear_high_nibble+0x8c>
	{
		case 'A' :
		PORTA&=0x0f;
    12ae:	ab e3       	ldi	r26, 0x3B	; 59
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	eb e3       	ldi	r30, 0x3B	; 59
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	8f 70       	andi	r24, 0x0F	; 15
    12ba:	8c 93       	st	X, r24
    12bc:	17 c0       	rjmp	.+46     	; 0x12ec <clear_high_nibble+0x8c>
		break ;
		case 'B':
		PORTB&=0x0f;
    12be:	a8 e3       	ldi	r26, 0x38	; 56
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e8 e3       	ldi	r30, 0x38	; 56
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	8f 70       	andi	r24, 0x0F	; 15
    12ca:	8c 93       	st	X, r24
    12cc:	0f c0       	rjmp	.+30     	; 0x12ec <clear_high_nibble+0x8c>
		break ;
		case 'C' :
		PORTC&=0x0f;
    12ce:	a5 e3       	ldi	r26, 0x35	; 53
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e5 e3       	ldi	r30, 0x35	; 53
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	8f 70       	andi	r24, 0x0F	; 15
    12da:	8c 93       	st	X, r24
    12dc:	07 c0       	rjmp	.+14     	; 0x12ec <clear_high_nibble+0x8c>
		break ;
		case 'D':
		PORTD&=0x0f;
    12de:	a2 e3       	ldi	r26, 0x32	; 50
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e2 e3       	ldi	r30, 0x32	; 50
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	8f 70       	andi	r24, 0x0F	; 15
    12ea:	8c 93       	st	X, r24
		break ;
		default: break ;
		
	}
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <xEventGroupCreate+0x6>
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
    1302:	8b e0       	ldi	r24, 0x0B	; 11
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0e 94 bc 0c 	call	0x1978	; 0x1978 <pvPortMalloc>
    130a:	9a 83       	std	Y+2, r25	; 0x02
    130c:	89 83       	std	Y+1, r24	; 0x01

		if( pxEventBits != NULL )
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	9a 81       	ldd	r25, Y+2	; 0x02
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	49 f0       	breq	.+18     	; 0x1328 <xEventGroupCreate+0x30>
		{
			pxEventBits->uxEventBits = 0;
    1316:	e9 81       	ldd	r30, Y+1	; 0x01
    1318:	fa 81       	ldd	r31, Y+2	; 0x02
    131a:	11 82       	std	Z+1, r1	; 0x01
    131c:	10 82       	st	Z, r1
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	02 96       	adiw	r24, 0x02	; 2
    1324:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	60 97       	sbiw	r28, 0x10	; 16
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	9a 87       	std	Y+10, r25	; 0x0a
    134c:	89 87       	std	Y+9, r24	; 0x09
    134e:	7c 87       	std	Y+12, r23	; 0x0c
    1350:	6b 87       	std	Y+11, r22	; 0x0b
    1352:	5e 87       	std	Y+14, r21	; 0x0e
    1354:	4d 87       	std	Y+13, r20	; 0x0d
    1356:	38 8b       	std	Y+16, r19	; 0x10
    1358:	2f 87       	std	Y+15, r18	; 0x0f
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    135a:	89 85       	ldd	r24, Y+9	; 0x09
    135c:	9a 85       	ldd	r25, Y+10	; 0x0a
    135e:	9c 83       	std	Y+4, r25	; 0x04
    1360:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    1362:	19 82       	std	Y+1, r1	; 0x01
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    1364:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
    1368:	eb 81       	ldd	r30, Y+3	; 0x03
    136a:	fc 81       	ldd	r31, Y+4	; 0x04
    136c:	80 81       	ld	r24, Z
    136e:	91 81       	ldd	r25, Z+1	; 0x01
    1370:	98 87       	std	Y+8, r25	; 0x08
    1372:	8f 83       	std	Y+7, r24	; 0x07

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
    1374:	89 85       	ldd	r24, Y+9	; 0x09
    1376:	9a 85       	ldd	r25, Y+10	; 0x0a
    1378:	2b 85       	ldd	r18, Y+11	; 0x0b
    137a:	3c 85       	ldd	r19, Y+12	; 0x0c
    137c:	b9 01       	movw	r22, r18
    137e:	0e 94 6d 0b 	call	0x16da	; 0x16da <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1382:	2f 81       	ldd	r18, Y+7	; 0x07
    1384:	38 85       	ldd	r19, Y+8	; 0x08
    1386:	8b 85       	ldd	r24, Y+11	; 0x0b
    1388:	9c 85       	ldd	r25, Y+12	; 0x0c
    138a:	28 2b       	or	r18, r24
    138c:	39 2b       	or	r19, r25
    138e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1390:	9e 85       	ldd	r25, Y+14	; 0x0e
    1392:	28 23       	and	r18, r24
    1394:	39 23       	and	r19, r25
    1396:	8d 85       	ldd	r24, Y+13	; 0x0d
    1398:	9e 85       	ldd	r25, Y+14	; 0x0e
    139a:	28 17       	cp	r18, r24
    139c:	39 07       	cpc	r19, r25
    139e:	c9 f4       	brne	.+50     	; 0x13d2 <xEventGroupSync+0x9c>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
    13a0:	2f 81       	ldd	r18, Y+7	; 0x07
    13a2:	38 85       	ldd	r19, Y+8	; 0x08
    13a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    13a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    13a8:	82 2b       	or	r24, r18
    13aa:	93 2b       	or	r25, r19
    13ac:	9e 83       	std	Y+6, r25	; 0x06
    13ae:	8d 83       	std	Y+5, r24	; 0x05

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    13b0:	eb 81       	ldd	r30, Y+3	; 0x03
    13b2:	fc 81       	ldd	r31, Y+4	; 0x04
    13b4:	20 81       	ld	r18, Z
    13b6:	31 81       	ldd	r19, Z+1	; 0x01
    13b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    13bc:	80 95       	com	r24
    13be:	90 95       	com	r25
    13c0:	82 23       	and	r24, r18
    13c2:	93 23       	and	r25, r19
    13c4:	eb 81       	ldd	r30, Y+3	; 0x03
    13c6:	fc 81       	ldd	r31, Y+4	; 0x04
    13c8:	91 83       	std	Z+1, r25	; 0x01
    13ca:	80 83       	st	Z, r24

			xTicksToWait = 0;
    13cc:	18 8a       	std	Y+16, r1	; 0x10
    13ce:	1f 86       	std	Y+15, r1	; 0x0f
    13d0:	1c c0       	rjmp	.+56     	; 0x140a <xEventGroupSync+0xd4>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
    13d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d4:	98 89       	ldd	r25, Y+16	; 0x10
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	91 f0       	breq	.+36     	; 0x13fe <xEventGroupSync+0xc8>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	bc 01       	movw	r22, r24
    13e0:	6e 5f       	subi	r22, 0xFE	; 254
    13e2:	7f 4f       	sbci	r23, 0xFF	; 255
    13e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e8:	9c 01       	movw	r18, r24
    13ea:	35 60       	ori	r19, 0x05	; 5
    13ec:	4f 85       	ldd	r20, Y+15	; 0x0f
    13ee:	58 89       	ldd	r21, Y+16	; 0x10
    13f0:	cb 01       	movw	r24, r22
    13f2:	b9 01       	movw	r22, r18
    13f4:	0e 94 44 22 	call	0x4488	; 0x4488 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
    13f8:	1e 82       	std	Y+6, r1	; 0x06
    13fa:	1d 82       	std	Y+5, r1	; 0x05
    13fc:	06 c0       	rjmp	.+12     	; 0x140a <xEventGroupSync+0xd4>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    13fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1400:	fc 81       	ldd	r31, Y+4	; 0x04
    1402:	80 81       	ld	r24, Z
    1404:	91 81       	ldd	r25, Z+1	; 0x01
    1406:	9e 83       	std	Y+6, r25	; 0x06
    1408:	8d 83       	std	Y+5, r24	; 0x05
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    140a:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <xTaskResumeAll>
    140e:	8a 83       	std	Y+2, r24	; 0x02

	if( xTicksToWait != ( TickType_t ) 0 )
    1410:	8f 85       	ldd	r24, Y+15	; 0x0f
    1412:	98 89       	ldd	r25, Y+16	; 0x10
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	09 f4       	brne	.+2      	; 0x141a <xEventGroupSync+0xe4>
    1418:	3a c0       	rjmp	.+116    	; 0x148e <xEventGroupSync+0x158>
	{
		if( xAlreadyYielded == pdFALSE )
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	88 23       	and	r24, r24
    141e:	11 f4       	brne	.+4      	; 0x1424 <xEventGroupSync+0xee>
		{
			portYIELD_WITHIN_API();
    1420:	0e 94 47 12 	call	0x248e	; 0x248e <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    1424:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <uxTaskResetEventItemValue>
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 83       	std	Y+5, r24	; 0x05

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	9e 81       	ldd	r25, Y+6	; 0x06
    1430:	80 70       	andi	r24, 0x00	; 0
    1432:	92 70       	andi	r25, 0x02	; 2
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	31 f5       	brne	.+76     	; 0x1484 <xEventGroupSync+0x14e>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	0f 92       	push	r0
			{
				uxReturn = pxEventBits->uxEventBits;
    143e:	eb 81       	ldd	r30, Y+3	; 0x03
    1440:	fc 81       	ldd	r31, Y+4	; 0x04
    1442:	80 81       	ld	r24, Z
    1444:	91 81       	ldd	r25, Z+1	; 0x01
    1446:	9e 83       	std	Y+6, r25	; 0x06
    1448:	8d 83       	std	Y+5, r24	; 0x05

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
    144a:	2d 81       	ldd	r18, Y+5	; 0x05
    144c:	3e 81       	ldd	r19, Y+6	; 0x06
    144e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1450:	9e 85       	ldd	r25, Y+14	; 0x0e
    1452:	28 23       	and	r18, r24
    1454:	39 23       	and	r19, r25
    1456:	8d 85       	ldd	r24, Y+13	; 0x0d
    1458:	9e 85       	ldd	r25, Y+14	; 0x0e
    145a:	28 17       	cp	r18, r24
    145c:	39 07       	cpc	r19, r25
    145e:	71 f4       	brne	.+28     	; 0x147c <xEventGroupSync+0x146>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    1460:	eb 81       	ldd	r30, Y+3	; 0x03
    1462:	fc 81       	ldd	r31, Y+4	; 0x04
    1464:	20 81       	ld	r18, Z
    1466:	31 81       	ldd	r19, Z+1	; 0x01
    1468:	8d 85       	ldd	r24, Y+13	; 0x0d
    146a:	9e 85       	ldd	r25, Y+14	; 0x0e
    146c:	80 95       	com	r24
    146e:	90 95       	com	r25
    1470:	82 23       	and	r24, r18
    1472:	93 23       	and	r25, r19
    1474:	eb 81       	ldd	r30, Y+3	; 0x03
    1476:	fc 81       	ldd	r31, Y+4	; 0x04
    1478:	91 83       	std	Z+1, r25	; 0x01
    147a:	80 83       	st	Z, r24
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    147c:	0f 90       	pop	r0
    147e:	0f be       	out	0x3f, r0	; 63

			xTimeoutOccurred = pdTRUE;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	89 83       	std	Y+1, r24	; 0x01
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	90 70       	andi	r25, 0x00	; 0
    148a:	9e 83       	std	Y+6, r25	; 0x06
    148c:	8d 83       	std	Y+5, r24	; 0x05
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
}
    1492:	60 96       	adiw	r28, 0x10	; 16
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	63 97       	sbiw	r28, 0x13	; 19
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	9d 87       	std	Y+13, r25	; 0x0d
    14be:	8c 87       	std	Y+12, r24	; 0x0c
    14c0:	7f 87       	std	Y+15, r23	; 0x0f
    14c2:	6e 87       	std	Y+14, r22	; 0x0e
    14c4:	48 8b       	std	Y+16, r20	; 0x10
    14c6:	29 8b       	std	Y+17, r18	; 0x11
    14c8:	1b 8b       	std	Y+19, r17	; 0x13
    14ca:	0a 8b       	std	Y+18, r16	; 0x12
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    14cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    14ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    14d0:	9b 87       	std	Y+11, r25	; 0x0b
    14d2:	8a 87       	std	Y+10, r24	; 0x0a
EventBits_t uxReturn, uxControlBits = 0;
    14d4:	1f 82       	std	Y+7, r1	; 0x07
    14d6:	1e 82       	std	Y+6, r1	; 0x06
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    14d8:	1b 82       	std	Y+3, r1	; 0x03
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    14da:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    14de:	ea 85       	ldd	r30, Y+10	; 0x0a
    14e0:	fb 85       	ldd	r31, Y+11	; 0x0b
    14e2:	80 81       	ld	r24, Z
    14e4:	91 81       	ldd	r25, Z+1	; 0x01
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	89 83       	std	Y+1, r24	; 0x01

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	2e 85       	ldd	r18, Y+14	; 0x0e
    14f0:	3f 85       	ldd	r19, Y+15	; 0x0f
    14f2:	b9 01       	movw	r22, r18
    14f4:	49 89       	ldd	r20, Y+17	; 0x11
    14f6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <prvTestWaitCondition>
    14fa:	8d 83       	std	Y+5, r24	; 0x05

		if( xWaitConditionMet != pdFALSE )
    14fc:	8d 81       	ldd	r24, Y+5	; 0x05
    14fe:	88 23       	and	r24, r24
    1500:	c1 f0       	breq	.+48     	; 0x1532 <xEventGroupWaitBits+0x8e>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	9a 81       	ldd	r25, Y+2	; 0x02
    1506:	99 87       	std	Y+9, r25	; 0x09
    1508:	88 87       	std	Y+8, r24	; 0x08
			xTicksToWait = ( TickType_t ) 0;
    150a:	1b 8a       	std	Y+19, r1	; 0x13
    150c:	1a 8a       	std	Y+18, r1	; 0x12

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
    150e:	88 89       	ldd	r24, Y+16	; 0x10
    1510:	88 23       	and	r24, r24
    1512:	d9 f1       	breq	.+118    	; 0x158a <xEventGroupWaitBits+0xe6>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    1514:	ea 85       	ldd	r30, Y+10	; 0x0a
    1516:	fb 85       	ldd	r31, Y+11	; 0x0b
    1518:	20 81       	ld	r18, Z
    151a:	31 81       	ldd	r19, Z+1	; 0x01
    151c:	8e 85       	ldd	r24, Y+14	; 0x0e
    151e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1520:	80 95       	com	r24
    1522:	90 95       	com	r25
    1524:	82 23       	and	r24, r18
    1526:	93 23       	and	r25, r19
    1528:	ea 85       	ldd	r30, Y+10	; 0x0a
    152a:	fb 85       	ldd	r31, Y+11	; 0x0b
    152c:	91 83       	std	Z+1, r25	; 0x01
    152e:	80 83       	st	Z, r24
    1530:	2c c0       	rjmp	.+88     	; 0x158a <xEventGroupWaitBits+0xe6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
    1532:	8a 89       	ldd	r24, Y+18	; 0x12
    1534:	9b 89       	ldd	r25, Y+19	; 0x13
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	29 f4       	brne	.+10     	; 0x1544 <xEventGroupWaitBits+0xa0>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	99 87       	std	Y+9, r25	; 0x09
    1540:	88 87       	std	Y+8, r24	; 0x08
    1542:	23 c0       	rjmp	.+70     	; 0x158a <xEventGroupWaitBits+0xe6>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
    1544:	88 89       	ldd	r24, Y+16	; 0x10
    1546:	88 23       	and	r24, r24
    1548:	29 f0       	breq	.+10     	; 0x1554 <xEventGroupWaitBits+0xb0>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
    154a:	8e 81       	ldd	r24, Y+6	; 0x06
    154c:	9f 81       	ldd	r25, Y+7	; 0x07
    154e:	91 60       	ori	r25, 0x01	; 1
    1550:	9f 83       	std	Y+7, r25	; 0x07
    1552:	8e 83       	std	Y+6, r24	; 0x06
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
    1554:	89 89       	ldd	r24, Y+17	; 0x11
    1556:	88 23       	and	r24, r24
    1558:	29 f0       	breq	.+10     	; 0x1564 <xEventGroupWaitBits+0xc0>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
    155a:	8e 81       	ldd	r24, Y+6	; 0x06
    155c:	9f 81       	ldd	r25, Y+7	; 0x07
    155e:	94 60       	ori	r25, 0x04	; 4
    1560:	9f 83       	std	Y+7, r25	; 0x07
    1562:	8e 83       	std	Y+6, r24	; 0x06
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
    1564:	8a 85       	ldd	r24, Y+10	; 0x0a
    1566:	9b 85       	ldd	r25, Y+11	; 0x0b
    1568:	bc 01       	movw	r22, r24
    156a:	6e 5f       	subi	r22, 0xFE	; 254
    156c:	7f 4f       	sbci	r23, 0xFF	; 255
    156e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1570:	3f 85       	ldd	r19, Y+15	; 0x0f
    1572:	8e 81       	ldd	r24, Y+6	; 0x06
    1574:	9f 81       	ldd	r25, Y+7	; 0x07
    1576:	28 2b       	or	r18, r24
    1578:	39 2b       	or	r19, r25
    157a:	4a 89       	ldd	r20, Y+18	; 0x12
    157c:	5b 89       	ldd	r21, Y+19	; 0x13
    157e:	cb 01       	movw	r24, r22
    1580:	b9 01       	movw	r22, r18
    1582:	0e 94 44 22 	call	0x4488	; 0x4488 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
    1586:	19 86       	std	Y+9, r1	; 0x09
    1588:	18 86       	std	Y+8, r1	; 0x08

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    158a:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <xTaskResumeAll>
    158e:	8c 83       	std	Y+4, r24	; 0x04

	if( xTicksToWait != ( TickType_t ) 0 )
    1590:	8a 89       	ldd	r24, Y+18	; 0x12
    1592:	9b 89       	ldd	r25, Y+19	; 0x13
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	09 f4       	brne	.+2      	; 0x159a <xEventGroupWaitBits+0xf6>
    1598:	3b c0       	rjmp	.+118    	; 0x1610 <xEventGroupWaitBits+0x16c>
	{
		if( xAlreadyYielded == pdFALSE )
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	88 23       	and	r24, r24
    159e:	11 f4       	brne	.+4      	; 0x15a4 <xEventGroupWaitBits+0x100>
		{
			portYIELD_WITHIN_API();
    15a0:	0e 94 47 12 	call	0x248e	; 0x248e <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    15a4:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <uxTaskResetEventItemValue>
    15a8:	99 87       	std	Y+9, r25	; 0x09
    15aa:	88 87       	std	Y+8, r24	; 0x08

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    15ac:	88 85       	ldd	r24, Y+8	; 0x08
    15ae:	99 85       	ldd	r25, Y+9	; 0x09
    15b0:	80 70       	andi	r24, 0x00	; 0
    15b2:	92 70       	andi	r25, 0x02	; 2
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	39 f5       	brne	.+78     	; 0x1606 <xEventGroupWaitBits+0x162>
		{
			taskENTER_CRITICAL();
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	0f 92       	push	r0
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    15be:	ea 85       	ldd	r30, Y+10	; 0x0a
    15c0:	fb 85       	ldd	r31, Y+11	; 0x0b
    15c2:	80 81       	ld	r24, Z
    15c4:	91 81       	ldd	r25, Z+1	; 0x01
    15c6:	99 87       	std	Y+9, r25	; 0x09
    15c8:	88 87       	std	Y+8, r24	; 0x08

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
    15ca:	88 85       	ldd	r24, Y+8	; 0x08
    15cc:	99 85       	ldd	r25, Y+9	; 0x09
    15ce:	2e 85       	ldd	r18, Y+14	; 0x0e
    15d0:	3f 85       	ldd	r19, Y+15	; 0x0f
    15d2:	b9 01       	movw	r22, r18
    15d4:	49 89       	ldd	r20, Y+17	; 0x11
    15d6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <prvTestWaitCondition>
    15da:	88 23       	and	r24, r24
    15dc:	89 f0       	breq	.+34     	; 0x1600 <xEventGroupWaitBits+0x15c>
				{
					if( xClearOnExit != pdFALSE )
    15de:	88 89       	ldd	r24, Y+16	; 0x10
    15e0:	88 23       	and	r24, r24
    15e2:	71 f0       	breq	.+28     	; 0x1600 <xEventGroupWaitBits+0x15c>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    15e4:	ea 85       	ldd	r30, Y+10	; 0x0a
    15e6:	fb 85       	ldd	r31, Y+11	; 0x0b
    15e8:	20 81       	ld	r18, Z
    15ea:	31 81       	ldd	r19, Z+1	; 0x01
    15ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    15ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    15f0:	80 95       	com	r24
    15f2:	90 95       	com	r25
    15f4:	82 23       	and	r24, r18
    15f6:	93 23       	and	r25, r19
    15f8:	ea 85       	ldd	r30, Y+10	; 0x0a
    15fa:	fb 85       	ldd	r31, Y+11	; 0x0b
    15fc:	91 83       	std	Z+1, r25	; 0x01
    15fe:	80 83       	st	Z, r24
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    1600:	0f 90       	pop	r0
    1602:	0f be       	out	0x3f, r0	; 63

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
    1604:	1b 82       	std	Y+3, r1	; 0x03
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    1606:	88 85       	ldd	r24, Y+8	; 0x08
    1608:	99 85       	ldd	r25, Y+9	; 0x09
    160a:	90 70       	andi	r25, 0x00	; 0
    160c:	99 87       	std	Y+9, r25	; 0x09
    160e:	88 87       	std	Y+8, r24	; 0x08
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
    1610:	88 85       	ldd	r24, Y+8	; 0x08
    1612:	99 85       	ldd	r25, Y+9	; 0x09
}
    1614:	63 96       	adiw	r28, 0x13	; 19
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	08 95       	ret

0000162a <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	28 97       	sbiw	r28, 0x08	; 8
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	9e 83       	std	Y+6, r25	; 0x06
    1640:	8d 83       	std	Y+5, r24	; 0x05
    1642:	78 87       	std	Y+8, r23	; 0x08
    1644:	6f 83       	std	Y+7, r22	; 0x07
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    1646:	8d 81       	ldd	r24, Y+5	; 0x05
    1648:	9e 81       	ldd	r25, Y+6	; 0x06
    164a:	9c 83       	std	Y+4, r25	; 0x04
    164c:	8b 83       	std	Y+3, r24	; 0x03
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	0f 92       	push	r0
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
    1654:	eb 81       	ldd	r30, Y+3	; 0x03
    1656:	fc 81       	ldd	r31, Y+4	; 0x04
    1658:	80 81       	ld	r24, Z
    165a:	91 81       	ldd	r25, Z+1	; 0x01
    165c:	9a 83       	std	Y+2, r25	; 0x02
    165e:	89 83       	std	Y+1, r24	; 0x01

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    1660:	eb 81       	ldd	r30, Y+3	; 0x03
    1662:	fc 81       	ldd	r31, Y+4	; 0x04
    1664:	20 81       	ld	r18, Z
    1666:	31 81       	ldd	r19, Z+1	; 0x01
    1668:	8f 81       	ldd	r24, Y+7	; 0x07
    166a:	98 85       	ldd	r25, Y+8	; 0x08
    166c:	80 95       	com	r24
    166e:	90 95       	com	r25
    1670:	82 23       	and	r24, r18
    1672:	93 23       	and	r25, r19
    1674:	eb 81       	ldd	r30, Y+3	; 0x03
    1676:	fc 81       	ldd	r31, Y+4	; 0x04
    1678:	91 83       	std	Z+1, r25	; 0x01
    167a:	80 83       	st	Z, r24
	}
	taskEXIT_CRITICAL();
    167c:	0f 90       	pop	r0
    167e:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1684:	28 96       	adiw	r28, 0x08	; 8
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	27 97       	sbiw	r28, 0x07	; 7
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	9f 83       	std	Y+7, r25	; 0x07
    16ac:	8e 83       	std	Y+6, r24	; 0x06
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    16ae:	8e 81       	ldd	r24, Y+6	; 0x06
    16b0:	9f 81       	ldd	r25, Y+7	; 0x07
    16b2:	9c 83       	std	Y+4, r25	; 0x04
    16b4:	8b 83       	std	Y+3, r24	; 0x03
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    16b6:	1d 82       	std	Y+5, r1	; 0x05
	{
		uxReturn = pxEventBits->uxEventBits;
    16b8:	eb 81       	ldd	r30, Y+3	; 0x03
    16ba:	fc 81       	ldd	r31, Y+4	; 0x04
    16bc:	80 81       	ld	r24, Z
    16be:	91 81       	ldd	r25, Z+1	; 0x01
    16c0:	9a 83       	std	Y+2, r25	; 0x02
    16c2:	89 83       	std	Y+1, r24	; 0x01
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    16c8:	27 96       	adiw	r28, 0x07	; 7
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    16e2:	65 97       	sbiw	r28, 0x15	; 21
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	f8 94       	cli
    16e8:	de bf       	out	0x3e, r29	; 62
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	cd bf       	out	0x3d, r28	; 61
    16ee:	9b 8b       	std	Y+19, r25	; 0x13
    16f0:	8a 8b       	std	Y+18, r24	; 0x12
    16f2:	7d 8b       	std	Y+21, r23	; 0x15
    16f4:	6c 8b       	std	Y+20, r22	; 0x14
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    16f6:	19 86       	std	Y+9, r1	; 0x09
    16f8:	18 86       	std	Y+8, r1	; 0x08
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    16fa:	8a 89       	ldd	r24, Y+18	; 0x12
    16fc:	9b 89       	ldd	r25, Y+19	; 0x13
    16fe:	9b 83       	std	Y+3, r25	; 0x03
    1700:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xMatchFound = pdFALSE;
    1702:	19 82       	std	Y+1, r1	; 0x01
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	9b 81       	ldd	r25, Y+3	; 0x03
    1708:	02 96       	adiw	r24, 0x02	; 2
    170a:	9b 87       	std	Y+11, r25	; 0x0b
    170c:	8a 87       	std	Y+10, r24	; 0x0a
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    170e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1710:	9b 85       	ldd	r25, Y+11	; 0x0b
    1712:	03 96       	adiw	r24, 0x03	; 3
    1714:	9d 87       	std	Y+13, r25	; 0x0d
    1716:	8c 87       	std	Y+12, r24	; 0x0c
	vTaskSuspendAll();
    1718:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
    171c:	ea 85       	ldd	r30, Y+10	; 0x0a
    171e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1720:	85 81       	ldd	r24, Z+5	; 0x05
    1722:	96 81       	ldd	r25, Z+6	; 0x06
    1724:	99 8b       	std	Y+17, r25	; 0x11
    1726:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
    1728:	ea 81       	ldd	r30, Y+2	; 0x02
    172a:	fb 81       	ldd	r31, Y+3	; 0x03
    172c:	20 81       	ld	r18, Z
    172e:	31 81       	ldd	r19, Z+1	; 0x01
    1730:	8c 89       	ldd	r24, Y+20	; 0x14
    1732:	9d 89       	ldd	r25, Y+21	; 0x15
    1734:	82 2b       	or	r24, r18
    1736:	93 2b       	or	r25, r19
    1738:	ea 81       	ldd	r30, Y+2	; 0x02
    173a:	fb 81       	ldd	r31, Y+3	; 0x03
    173c:	91 83       	std	Z+1, r25	; 0x01
    173e:	80 83       	st	Z, r24
    1740:	59 c0       	rjmp	.+178    	; 0x17f4 <xEventGroupSetBits+0x11a>

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
		{
			pxNext = listGET_NEXT( pxListItem );
    1742:	e8 89       	ldd	r30, Y+16	; 0x10
    1744:	f9 89       	ldd	r31, Y+17	; 0x11
    1746:	82 81       	ldd	r24, Z+2	; 0x02
    1748:	93 81       	ldd	r25, Z+3	; 0x03
    174a:	9f 87       	std	Y+15, r25	; 0x0f
    174c:	8e 87       	std	Y+14, r24	; 0x0e
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    174e:	e8 89       	ldd	r30, Y+16	; 0x10
    1750:	f9 89       	ldd	r31, Y+17	; 0x11
    1752:	80 81       	ld	r24, Z
    1754:	91 81       	ldd	r25, Z+1	; 0x01
    1756:	9f 83       	std	Y+7, r25	; 0x07
    1758:	8e 83       	std	Y+6, r24	; 0x06
			xMatchFound = pdFALSE;
    175a:	19 82       	std	Y+1, r1	; 0x01

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
    175c:	8e 81       	ldd	r24, Y+6	; 0x06
    175e:	9f 81       	ldd	r25, Y+7	; 0x07
    1760:	80 70       	andi	r24, 0x00	; 0
    1762:	9d 83       	std	Y+5, r25	; 0x05
    1764:	8c 83       	std	Y+4, r24	; 0x04
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    1766:	8e 81       	ldd	r24, Y+6	; 0x06
    1768:	9f 81       	ldd	r25, Y+7	; 0x07
    176a:	90 70       	andi	r25, 0x00	; 0
    176c:	9f 83       	std	Y+7, r25	; 0x07
    176e:	8e 83       	std	Y+6, r24	; 0x06

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    1770:	8c 81       	ldd	r24, Y+4	; 0x04
    1772:	9d 81       	ldd	r25, Y+5	; 0x05
    1774:	80 70       	andi	r24, 0x00	; 0
    1776:	94 70       	andi	r25, 0x04	; 4
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	69 f4       	brne	.+26     	; 0x1796 <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    177c:	ea 81       	ldd	r30, Y+2	; 0x02
    177e:	fb 81       	ldd	r31, Y+3	; 0x03
    1780:	20 81       	ld	r18, Z
    1782:	31 81       	ldd	r19, Z+1	; 0x01
    1784:	8e 81       	ldd	r24, Y+6	; 0x06
    1786:	9f 81       	ldd	r25, Y+7	; 0x07
    1788:	82 23       	and	r24, r18
    178a:	93 23       	and	r25, r19
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	91 f0       	breq	.+36     	; 0x17b4 <xEventGroupSetBits+0xda>
				{
					xMatchFound = pdTRUE;
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	0f c0       	rjmp	.+30     	; 0x17b4 <xEventGroupSetBits+0xda>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    1796:	ea 81       	ldd	r30, Y+2	; 0x02
    1798:	fb 81       	ldd	r31, Y+3	; 0x03
    179a:	20 81       	ld	r18, Z
    179c:	31 81       	ldd	r19, Z+1	; 0x01
    179e:	8e 81       	ldd	r24, Y+6	; 0x06
    17a0:	9f 81       	ldd	r25, Y+7	; 0x07
    17a2:	28 23       	and	r18, r24
    17a4:	39 23       	and	r19, r25
    17a6:	8e 81       	ldd	r24, Y+6	; 0x06
    17a8:	9f 81       	ldd	r25, Y+7	; 0x07
    17aa:	28 17       	cp	r18, r24
    17ac:	39 07       	cpc	r19, r25
    17ae:	11 f4       	brne	.+4      	; 0x17b4 <xEventGroupSetBits+0xda>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	88 23       	and	r24, r24
    17b8:	c9 f0       	breq	.+50     	; 0x17ec <xEventGroupSetBits+0x112>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    17ba:	8c 81       	ldd	r24, Y+4	; 0x04
    17bc:	9d 81       	ldd	r25, Y+5	; 0x05
    17be:	80 70       	andi	r24, 0x00	; 0
    17c0:	91 70       	andi	r25, 0x01	; 1
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	41 f0       	breq	.+16     	; 0x17d6 <xEventGroupSetBits+0xfc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
    17c6:	88 85       	ldd	r24, Y+8	; 0x08
    17c8:	99 85       	ldd	r25, Y+9	; 0x09
    17ca:	2e 81       	ldd	r18, Y+6	; 0x06
    17cc:	3f 81       	ldd	r19, Y+7	; 0x07
    17ce:	82 2b       	or	r24, r18
    17d0:	93 2b       	or	r25, r19
    17d2:	99 87       	std	Y+9, r25	; 0x09
    17d4:	88 87       	std	Y+8, r24	; 0x08
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    17d6:	ea 81       	ldd	r30, Y+2	; 0x02
    17d8:	fb 81       	ldd	r31, Y+3	; 0x03
    17da:	80 81       	ld	r24, Z
    17dc:	91 81       	ldd	r25, Z+1	; 0x01
    17de:	9c 01       	movw	r18, r24
    17e0:	32 60       	ori	r19, 0x02	; 2
    17e2:	88 89       	ldd	r24, Y+16	; 0x10
    17e4:	99 89       	ldd	r25, Y+17	; 0x11
    17e6:	b9 01       	movw	r22, r18
    17e8:	0e 94 df 22 	call	0x45be	; 0x45be <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
    17ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    17ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    17f0:	99 8b       	std	Y+17, r25	; 0x11
    17f2:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
    17f4:	28 89       	ldd	r18, Y+16	; 0x10
    17f6:	39 89       	ldd	r19, Y+17	; 0x11
    17f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    17fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    17fc:	28 17       	cp	r18, r24
    17fe:	39 07       	cpc	r19, r25
    1800:	09 f0       	breq	.+2      	; 0x1804 <xEventGroupSetBits+0x12a>
    1802:	9f cf       	rjmp	.-194    	; 0x1742 <xEventGroupSetBits+0x68>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    1804:	ea 81       	ldd	r30, Y+2	; 0x02
    1806:	fb 81       	ldd	r31, Y+3	; 0x03
    1808:	20 81       	ld	r18, Z
    180a:	31 81       	ldd	r19, Z+1	; 0x01
    180c:	88 85       	ldd	r24, Y+8	; 0x08
    180e:	99 85       	ldd	r25, Y+9	; 0x09
    1810:	80 95       	com	r24
    1812:	90 95       	com	r25
    1814:	82 23       	and	r24, r18
    1816:	93 23       	and	r25, r19
    1818:	ea 81       	ldd	r30, Y+2	; 0x02
    181a:	fb 81       	ldd	r31, Y+3	; 0x03
    181c:	91 83       	std	Z+1, r25	; 0x01
    181e:	80 83       	st	Z, r24
	}
	( void ) xTaskResumeAll();
    1820:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
    1824:	ea 81       	ldd	r30, Y+2	; 0x02
    1826:	fb 81       	ldd	r31, Y+3	; 0x03
    1828:	80 81       	ld	r24, Z
    182a:	91 81       	ldd	r25, Z+1	; 0x01
}
    182c:	65 96       	adiw	r28, 0x15	; 21
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	08 95       	ret

0000183e <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	00 d0       	rcall	.+0      	; 0x1844 <vEventGroupDelete+0x6>
    1844:	00 d0       	rcall	.+0      	; 0x1846 <vEventGroupDelete+0x8>
    1846:	00 d0       	rcall	.+0      	; 0x1848 <vEventGroupDelete+0xa>
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	9e 83       	std	Y+6, r25	; 0x06
    184e:	8d 83       	std	Y+5, r24	; 0x05
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    1850:	8d 81       	ldd	r24, Y+5	; 0x05
    1852:	9e 81       	ldd	r25, Y+6	; 0x06
    1854:	9c 83       	std	Y+4, r25	; 0x04
    1856:	8b 83       	std	Y+3, r24	; 0x03
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	9c 81       	ldd	r25, Y+4	; 0x04
    185c:	02 96       	adiw	r24, 0x02	; 2
    185e:	9a 83       	std	Y+2, r25	; 0x02
    1860:	89 83       	std	Y+1, r24	; 0x01

	vTaskSuspendAll();
    1862:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <vTaskSuspendAll>
    1866:	08 c0       	rjmp	.+16     	; 0x1878 <vEventGroupDelete+0x3a>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
    1868:	e9 81       	ldd	r30, Y+1	; 0x01
    186a:	fa 81       	ldd	r31, Y+2	; 0x02
    186c:	85 81       	ldd	r24, Z+5	; 0x05
    186e:	96 81       	ldd	r25, Z+6	; 0x06
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	72 e0       	ldi	r23, 0x02	; 2
    1874:	0e 94 df 22 	call	0x45be	; 0x45be <xTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    1878:	e9 81       	ldd	r30, Y+1	; 0x01
    187a:	fa 81       	ldd	r31, Y+2	; 0x02
    187c:	80 81       	ld	r24, Z
    187e:	88 23       	and	r24, r24
    1880:	99 f7       	brne	.-26     	; 0x1868 <vEventGroupDelete+0x2a>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	9c 81       	ldd	r25, Y+4	; 0x04
    1886:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
    188a:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <xTaskResumeAll>
}
    188e:	26 96       	adiw	r28, 0x06	; 6
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <vEventGroupSetBitsCallback+0x6>
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <vEventGroupSetBitsCallback+0x8>
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <vEventGroupSetBitsCallback+0xa>
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	9a 83       	std	Y+2, r25	; 0x02
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	4b 83       	std	Y+3, r20	; 0x03
    18b4:	5c 83       	std	Y+4, r21	; 0x04
    18b6:	6d 83       	std	Y+5, r22	; 0x05
    18b8:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
    18ba:	2b 81       	ldd	r18, Y+3	; 0x03
    18bc:	3c 81       	ldd	r19, Y+4	; 0x04
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	9a 81       	ldd	r25, Y+2	; 0x02
    18c2:	b9 01       	movw	r22, r18
    18c4:	0e 94 6d 0b 	call	0x16da	; 0x16da <xEventGroupSetBits>
}
    18c8:	26 96       	adiw	r28, 0x06	; 6
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	f8 94       	cli
    18ce:	de bf       	out	0x3e, r29	; 62
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	cd bf       	out	0x3d, r28	; 61
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <vEventGroupClearBitsCallback+0x6>
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <vEventGroupClearBitsCallback+0x8>
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <vEventGroupClearBitsCallback+0xa>
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	9a 83       	std	Y+2, r25	; 0x02
    18ea:	89 83       	std	Y+1, r24	; 0x01
    18ec:	4b 83       	std	Y+3, r20	; 0x03
    18ee:	5c 83       	std	Y+4, r21	; 0x04
    18f0:	6d 83       	std	Y+5, r22	; 0x05
    18f2:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
    18f4:	2b 81       	ldd	r18, Y+3	; 0x03
    18f6:	3c 81       	ldd	r19, Y+4	; 0x04
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	b9 01       	movw	r22, r18
    18fe:	0e 94 15 0b 	call	0x162a	; 0x162a <xEventGroupClearBits>
}
    1902:	26 96       	adiw	r28, 0x06	; 6
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	00 d0       	rcall	.+0      	; 0x191a <prvTestWaitCondition+0x6>
    191a:	00 d0       	rcall	.+0      	; 0x191c <prvTestWaitCondition+0x8>
    191c:	00 d0       	rcall	.+0      	; 0x191e <prvTestWaitCondition+0xa>
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	9b 83       	std	Y+3, r25	; 0x03
    1924:	8a 83       	std	Y+2, r24	; 0x02
    1926:	7d 83       	std	Y+5, r23	; 0x05
    1928:	6c 83       	std	Y+4, r22	; 0x04
    192a:	4e 83       	std	Y+6, r20	; 0x06
BaseType_t xWaitConditionMet = pdFALSE;
    192c:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
    192e:	8e 81       	ldd	r24, Y+6	; 0x06
    1930:	88 23       	and	r24, r24
    1932:	59 f4       	brne	.+22     	; 0x194a <prvTestWaitCondition+0x36>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	9b 81       	ldd	r25, Y+3	; 0x03
    1938:	2c 81       	ldd	r18, Y+4	; 0x04
    193a:	3d 81       	ldd	r19, Y+5	; 0x05
    193c:	82 23       	and	r24, r18
    193e:	93 23       	and	r25, r19
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	81 f0       	breq	.+32     	; 0x1964 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	89 83       	std	Y+1, r24	; 0x01
    1948:	0d c0       	rjmp	.+26     	; 0x1964 <prvTestWaitCondition+0x50>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    194a:	2a 81       	ldd	r18, Y+2	; 0x02
    194c:	3b 81       	ldd	r19, Y+3	; 0x03
    194e:	8c 81       	ldd	r24, Y+4	; 0x04
    1950:	9d 81       	ldd	r25, Y+5	; 0x05
    1952:	28 23       	and	r18, r24
    1954:	39 23       	and	r19, r25
    1956:	8c 81       	ldd	r24, Y+4	; 0x04
    1958:	9d 81       	ldd	r25, Y+5	; 0x05
    195a:	28 17       	cp	r18, r24
    195c:	39 07       	cpc	r19, r25
    195e:	11 f4       	brne	.+4      	; 0x1964 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
    1964:	89 81       	ldd	r24, Y+1	; 0x01
}
    1966:	26 96       	adiw	r28, 0x06	; 6
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	2e 97       	sbiw	r28, 0x0e	; 14
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	9e 87       	std	Y+14, r25	; 0x0e
    198e:	8d 87       	std	Y+13, r24	; 0x0d
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    1990:	1e 82       	std	Y+6, r1	; 0x06
    1992:	1d 82       	std	Y+5, r1	; 0x05

	vTaskSuspendAll();
    1994:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    1998:	80 91 76 00 	lds	r24, 0x0076
    199c:	88 23       	and	r24, r24
    199e:	29 f4       	brne	.+10     	; 0x19aa <pvPortMalloc+0x32>
		{
			prvHeapInit();
    19a0:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	80 93 76 00 	sts	0x0076, r24
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    19aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	51 f0       	breq	.+20     	; 0x19c6 <pvPortMalloc+0x4e>
		{
			xWantedSize += heapSTRUCT_SIZE;
    19b2:	80 91 73 00 	lds	r24, 0x0073
    19b6:	90 91 74 00 	lds	r25, 0x0074
    19ba:	2d 85       	ldd	r18, Y+13	; 0x0d
    19bc:	3e 85       	ldd	r19, Y+14	; 0x0e
    19be:	82 0f       	add	r24, r18
    19c0:	93 1f       	adc	r25, r19
    19c2:	9e 87       	std	Y+14, r25	; 0x0e
    19c4:	8d 87       	std	Y+13, r24	; 0x0d
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    19c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	09 f4       	brne	.+2      	; 0x19d0 <pvPortMalloc+0x58>
    19ce:	af c0       	rjmp	.+350    	; 0x1b2e <pvPortMalloc+0x1b6>
    19d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d4:	23 e0       	ldi	r18, 0x03	; 3
    19d6:	8f 31       	cpi	r24, 0x1F	; 31
    19d8:	92 07       	cpc	r25, r18
    19da:	08 f0       	brcs	.+2      	; 0x19de <pvPortMalloc+0x66>
    19dc:	a8 c0       	rjmp	.+336    	; 0x1b2e <pvPortMalloc+0x1b6>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    19de:	87 e9       	ldi	r24, 0x97	; 151
    19e0:	93 e0       	ldi	r25, 0x03	; 3
    19e2:	9a 87       	std	Y+10, r25	; 0x0a
    19e4:	89 87       	std	Y+9, r24	; 0x09
			pxBlock = xStart.pxNextFreeBlock;
    19e6:	80 91 97 03 	lds	r24, 0x0397
    19ea:	90 91 98 03 	lds	r25, 0x0398
    19ee:	9c 87       	std	Y+12, r25	; 0x0c
    19f0:	8b 87       	std	Y+11, r24	; 0x0b
    19f2:	0a c0       	rjmp	.+20     	; 0x1a08 <pvPortMalloc+0x90>
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
			{
				pxPreviousBlock = pxBlock;
    19f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    19f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    19f8:	9a 87       	std	Y+10, r25	; 0x0a
    19fa:	89 87       	std	Y+9, r24	; 0x09
				pxBlock = pxBlock->pxNextFreeBlock;
    19fc:	eb 85       	ldd	r30, Y+11	; 0x0b
    19fe:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	9c 87       	std	Y+12, r25	; 0x0c
    1a06:	8b 87       	std	Y+11, r24	; 0x0b
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1a08:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a0a:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a0c:	22 81       	ldd	r18, Z+2	; 0x02
    1a0e:	33 81       	ldd	r19, Z+3	; 0x03
    1a10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a14:	28 17       	cp	r18, r24
    1a16:	39 07       	cpc	r19, r25
    1a18:	30 f4       	brcc	.+12     	; 0x1a26 <pvPortMalloc+0xae>
    1a1a:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a1c:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a1e:	80 81       	ld	r24, Z
    1a20:	91 81       	ldd	r25, Z+1	; 0x01
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	39 f7       	brne	.-50     	; 0x19f4 <pvPortMalloc+0x7c>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    1a26:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a28:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a2a:	43 e0       	ldi	r20, 0x03	; 3
    1a2c:	8b 39       	cpi	r24, 0x9B	; 155
    1a2e:	94 07       	cpc	r25, r20
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <pvPortMalloc+0xbc>
    1a32:	7d c0       	rjmp	.+250    	; 0x1b2e <pvPortMalloc+0x1b6>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    1a34:	e9 85       	ldd	r30, Y+9	; 0x09
    1a36:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a38:	20 81       	ld	r18, Z
    1a3a:	31 81       	ldd	r19, Z+1	; 0x01
    1a3c:	80 91 73 00 	lds	r24, 0x0073
    1a40:	90 91 74 00 	lds	r25, 0x0074
    1a44:	82 0f       	add	r24, r18
    1a46:	93 1f       	adc	r25, r19
    1a48:	9e 83       	std	Y+6, r25	; 0x06
    1a4a:	8d 83       	std	Y+5, r24	; 0x05

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1a4c:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a4e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a50:	80 81       	ld	r24, Z
    1a52:	91 81       	ldd	r25, Z+1	; 0x01
    1a54:	e9 85       	ldd	r30, Y+9	; 0x09
    1a56:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a58:	91 83       	std	Z+1, r25	; 0x01
    1a5a:	80 83       	st	Z, r24

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1a5c:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a5e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a60:	22 81       	ldd	r18, Z+2	; 0x02
    1a62:	33 81       	ldd	r19, Z+3	; 0x03
    1a64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a68:	28 1b       	sub	r18, r24
    1a6a:	39 0b       	sbc	r19, r25
    1a6c:	80 91 73 00 	lds	r24, 0x0073
    1a70:	90 91 74 00 	lds	r25, 0x0074
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	82 17       	cp	r24, r18
    1a7a:	93 07       	cpc	r25, r19
    1a7c:	08 f0       	brcs	.+2      	; 0x1a80 <pvPortMalloc+0x108>
    1a7e:	47 c0       	rjmp	.+142    	; 0x1b0e <pvPortMalloc+0x196>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1a80:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a82:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a88:	82 0f       	add	r24, r18
    1a8a:	93 1f       	adc	r25, r19
    1a8c:	98 87       	std	Y+8, r25	; 0x08
    1a8e:	8f 83       	std	Y+7, r24	; 0x07

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1a90:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a92:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a94:	22 81       	ldd	r18, Z+2	; 0x02
    1a96:	33 81       	ldd	r19, Z+3	; 0x03
    1a98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a9c:	a9 01       	movw	r20, r18
    1a9e:	48 1b       	sub	r20, r24
    1aa0:	59 0b       	sbc	r21, r25
    1aa2:	ca 01       	movw	r24, r20
    1aa4:	ef 81       	ldd	r30, Y+7	; 0x07
    1aa6:	f8 85       	ldd	r31, Y+8	; 0x08
    1aa8:	93 83       	std	Z+3, r25	; 0x03
    1aaa:	82 83       	std	Z+2, r24	; 0x02
					pxBlock->xBlockSize = xWantedSize;
    1aac:	eb 85       	ldd	r30, Y+11	; 0x0b
    1aae:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab4:	93 83       	std	Z+3, r25	; 0x03
    1ab6:	82 83       	std	Z+2, r24	; 0x02

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    1ab8:	ef 81       	ldd	r30, Y+7	; 0x07
    1aba:	f8 85       	ldd	r31, Y+8	; 0x08
    1abc:	82 81       	ldd	r24, Z+2	; 0x02
    1abe:	93 81       	ldd	r25, Z+3	; 0x03
    1ac0:	9a 83       	std	Y+2, r25	; 0x02
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	87 e9       	ldi	r24, 0x97	; 151
    1ac6:	93 e0       	ldi	r25, 0x03	; 3
    1ac8:	9c 83       	std	Y+4, r25	; 0x04
    1aca:	8b 83       	std	Y+3, r24	; 0x03
    1acc:	06 c0       	rjmp	.+12     	; 0x1ada <pvPortMalloc+0x162>
    1ace:	eb 81       	ldd	r30, Y+3	; 0x03
    1ad0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ad2:	80 81       	ld	r24, Z
    1ad4:	91 81       	ldd	r25, Z+1	; 0x01
    1ad6:	9c 83       	std	Y+4, r25	; 0x04
    1ad8:	8b 83       	std	Y+3, r24	; 0x03
    1ada:	eb 81       	ldd	r30, Y+3	; 0x03
    1adc:	fc 81       	ldd	r31, Y+4	; 0x04
    1ade:	01 90       	ld	r0, Z+
    1ae0:	f0 81       	ld	r31, Z
    1ae2:	e0 2d       	mov	r30, r0
    1ae4:	22 81       	ldd	r18, Z+2	; 0x02
    1ae6:	33 81       	ldd	r19, Z+3	; 0x03
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	9a 81       	ldd	r25, Y+2	; 0x02
    1aec:	28 17       	cp	r18, r24
    1aee:	39 07       	cpc	r19, r25
    1af0:	70 f3       	brcs	.-36     	; 0x1ace <pvPortMalloc+0x156>
    1af2:	eb 81       	ldd	r30, Y+3	; 0x03
    1af4:	fc 81       	ldd	r31, Y+4	; 0x04
    1af6:	80 81       	ld	r24, Z
    1af8:	91 81       	ldd	r25, Z+1	; 0x01
    1afa:	ef 81       	ldd	r30, Y+7	; 0x07
    1afc:	f8 85       	ldd	r31, Y+8	; 0x08
    1afe:	91 83       	std	Z+1, r25	; 0x01
    1b00:	80 83       	st	Z, r24
    1b02:	eb 81       	ldd	r30, Y+3	; 0x03
    1b04:	fc 81       	ldd	r31, Y+4	; 0x04
    1b06:	8f 81       	ldd	r24, Y+7	; 0x07
    1b08:	98 85       	ldd	r25, Y+8	; 0x08
    1b0a:	91 83       	std	Z+1, r25	; 0x01
    1b0c:	80 83       	st	Z, r24
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
    1b0e:	20 91 71 00 	lds	r18, 0x0071
    1b12:	30 91 72 00 	lds	r19, 0x0072
    1b16:	eb 85       	ldd	r30, Y+11	; 0x0b
    1b18:	fc 85       	ldd	r31, Y+12	; 0x0c
    1b1a:	82 81       	ldd	r24, Z+2	; 0x02
    1b1c:	93 81       	ldd	r25, Z+3	; 0x03
    1b1e:	a9 01       	movw	r20, r18
    1b20:	48 1b       	sub	r20, r24
    1b22:	59 0b       	sbc	r21, r25
    1b24:	ca 01       	movw	r24, r20
    1b26:	90 93 72 00 	sts	0x0072, r25
    1b2a:	80 93 71 00 	sts	0x0071, r24
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1b2e:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
    1b34:	9e 81       	ldd	r25, Y+6	; 0x06
}
    1b36:	2e 96       	adiw	r28, 0x0e	; 14
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	2a 97       	sbiw	r28, 0x0a	; 10
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	9a 87       	std	Y+10, r25	; 0x0a
    1b5e:	89 87       	std	Y+9, r24	; 0x09
uint8_t *puc = ( uint8_t * ) pv;
    1b60:	89 85       	ldd	r24, Y+9	; 0x09
    1b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b64:	98 87       	std	Y+8, r25	; 0x08
    1b66:	8f 83       	std	Y+7, r24	; 0x07
BlockLink_t *pxLink;

	if( pv != NULL )
    1b68:	89 85       	ldd	r24, Y+9	; 0x09
    1b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <vPortFree+0x2a>
    1b70:	4f c0       	rjmp	.+158    	; 0x1c10 <vPortFree+0xc8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    1b72:	80 91 73 00 	lds	r24, 0x0073
    1b76:	90 91 74 00 	lds	r25, 0x0074
    1b7a:	22 27       	eor	r18, r18
    1b7c:	33 27       	eor	r19, r19
    1b7e:	28 1b       	sub	r18, r24
    1b80:	39 0b       	sbc	r19, r25
    1b82:	8f 81       	ldd	r24, Y+7	; 0x07
    1b84:	98 85       	ldd	r25, Y+8	; 0x08
    1b86:	82 0f       	add	r24, r18
    1b88:	93 1f       	adc	r25, r19
    1b8a:	98 87       	std	Y+8, r25	; 0x08
    1b8c:	8f 83       	std	Y+7, r24	; 0x07

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
    1b8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b90:	98 85       	ldd	r25, Y+8	; 0x08
    1b92:	9e 83       	std	Y+6, r25	; 0x06
    1b94:	8d 83       	std	Y+5, r24	; 0x05

		vTaskSuspendAll();
    1b96:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1b9a:	ed 81       	ldd	r30, Y+5	; 0x05
    1b9c:	fe 81       	ldd	r31, Y+6	; 0x06
    1b9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ba0:	93 81       	ldd	r25, Z+3	; 0x03
    1ba2:	9a 83       	std	Y+2, r25	; 0x02
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	87 e9       	ldi	r24, 0x97	; 151
    1ba8:	93 e0       	ldi	r25, 0x03	; 3
    1baa:	9c 83       	std	Y+4, r25	; 0x04
    1bac:	8b 83       	std	Y+3, r24	; 0x03
    1bae:	06 c0       	rjmp	.+12     	; 0x1bbc <vPortFree+0x74>
    1bb0:	eb 81       	ldd	r30, Y+3	; 0x03
    1bb2:	fc 81       	ldd	r31, Y+4	; 0x04
    1bb4:	80 81       	ld	r24, Z
    1bb6:	91 81       	ldd	r25, Z+1	; 0x01
    1bb8:	9c 83       	std	Y+4, r25	; 0x04
    1bba:	8b 83       	std	Y+3, r24	; 0x03
    1bbc:	eb 81       	ldd	r30, Y+3	; 0x03
    1bbe:	fc 81       	ldd	r31, Y+4	; 0x04
    1bc0:	01 90       	ld	r0, Z+
    1bc2:	f0 81       	ld	r31, Z
    1bc4:	e0 2d       	mov	r30, r0
    1bc6:	22 81       	ldd	r18, Z+2	; 0x02
    1bc8:	33 81       	ldd	r19, Z+3	; 0x03
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bce:	28 17       	cp	r18, r24
    1bd0:	39 07       	cpc	r19, r25
    1bd2:	70 f3       	brcs	.-36     	; 0x1bb0 <vPortFree+0x68>
    1bd4:	eb 81       	ldd	r30, Y+3	; 0x03
    1bd6:	fc 81       	ldd	r31, Y+4	; 0x04
    1bd8:	80 81       	ld	r24, Z
    1bda:	91 81       	ldd	r25, Z+1	; 0x01
    1bdc:	ed 81       	ldd	r30, Y+5	; 0x05
    1bde:	fe 81       	ldd	r31, Y+6	; 0x06
    1be0:	91 83       	std	Z+1, r25	; 0x01
    1be2:	80 83       	st	Z, r24
    1be4:	eb 81       	ldd	r30, Y+3	; 0x03
    1be6:	fc 81       	ldd	r31, Y+4	; 0x04
    1be8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bea:	9e 81       	ldd	r25, Y+6	; 0x06
    1bec:	91 83       	std	Z+1, r25	; 0x01
    1bee:	80 83       	st	Z, r24
			xFreeBytesRemaining += pxLink->xBlockSize;
    1bf0:	ed 81       	ldd	r30, Y+5	; 0x05
    1bf2:	fe 81       	ldd	r31, Y+6	; 0x06
    1bf4:	22 81       	ldd	r18, Z+2	; 0x02
    1bf6:	33 81       	ldd	r19, Z+3	; 0x03
    1bf8:	80 91 71 00 	lds	r24, 0x0071
    1bfc:	90 91 72 00 	lds	r25, 0x0072
    1c00:	82 0f       	add	r24, r18
    1c02:	93 1f       	adc	r25, r19
    1c04:	90 93 72 00 	sts	0x0072, r25
    1c08:	80 93 71 00 	sts	0x0071, r24
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
    1c0c:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <xTaskResumeAll>
	}
}
    1c10:	2a 96       	adiw	r28, 0x0a	; 10
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	cd bf       	out	0x3d, r28	; 61
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
	return xFreeBytesRemaining;
    1c2a:	80 91 71 00 	lds	r24, 0x0071
    1c2e:	90 91 72 00 	lds	r25, 0x0072
}
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
	/* This just exists to keep the linker quiet. */
}
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <prvHeapInit+0x6>
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <prvHeapInit+0x8>
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1c52:	88 e7       	ldi	r24, 0x78	; 120
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	9a 83       	std	Y+2, r25	; 0x02
    1c58:	89 83       	std	Y+1, r24	; 0x01

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5e:	90 93 98 03 	sts	0x0398, r25
    1c62:	80 93 97 03 	sts	0x0397, r24
	xStart.xBlockSize = ( size_t ) 0;
    1c66:	10 92 9a 03 	sts	0x039A, r1
    1c6a:	10 92 99 03 	sts	0x0399, r1

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    1c6e:	8f e1       	ldi	r24, 0x1F	; 31
    1c70:	93 e0       	ldi	r25, 0x03	; 3
    1c72:	90 93 9e 03 	sts	0x039E, r25
    1c76:	80 93 9d 03 	sts	0x039D, r24
	xEnd.pxNextFreeBlock = NULL;
    1c7a:	10 92 9c 03 	sts	0x039C, r1
    1c7e:	10 92 9b 03 	sts	0x039B, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	9a 81       	ldd	r25, Y+2	; 0x02
    1c86:	9c 83       	std	Y+4, r25	; 0x04
    1c88:	8b 83       	std	Y+3, r24	; 0x03
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    1c8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c8e:	8f e1       	ldi	r24, 0x1F	; 31
    1c90:	93 e0       	ldi	r25, 0x03	; 3
    1c92:	93 83       	std	Z+3, r25	; 0x03
    1c94:	82 83       	std	Z+2, r24	; 0x02
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    1c96:	eb 81       	ldd	r30, Y+3	; 0x03
    1c98:	fc 81       	ldd	r31, Y+4	; 0x04
    1c9a:	8b e9       	ldi	r24, 0x9B	; 155
    1c9c:	93 e0       	ldi	r25, 0x03	; 3
    1c9e:	91 83       	std	Z+1, r25	; 0x01
    1ca0:	80 83       	st	Z, r24
}
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <vListInitialise+0x6>
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc2:	03 96       	adiw	r24, 0x03	; 3
    1cc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc8:	92 83       	std	Z+2, r25	; 0x02
    1cca:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1ccc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cce:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd0:	8f ef       	ldi	r24, 0xFF	; 255
    1cd2:	9f ef       	ldi	r25, 0xFF	; 255
    1cd4:	94 83       	std	Z+4, r25	; 0x04
    1cd6:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	9a 81       	ldd	r25, Y+2	; 0x02
    1cdc:	03 96       	adiw	r24, 0x03	; 3
    1cde:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce2:	96 83       	std	Z+6, r25	; 0x06
    1ce4:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cea:	03 96       	adiw	r24, 0x03	; 3
    1cec:	e9 81       	ldd	r30, Y+1	; 0x01
    1cee:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf0:	90 87       	std	Z+8, r25	; 0x08
    1cf2:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1cf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf8:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <vListInitialiseItem+0x6>
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	9a 83       	std	Y+2, r25	; 0x02
    1d10:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1d12:	e9 81       	ldd	r30, Y+1	; 0x01
    1d14:	fa 81       	ldd	r31, Y+2	; 0x02
    1d16:	11 86       	std	Z+9, r1	; 0x09
    1d18:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <vListInsertEnd+0x6>
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <vListInsertEnd+0x8>
    1d2c:	00 d0       	rcall	.+0      	; 0x1d2e <vListInsertEnd+0xa>
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	9c 83       	std	Y+4, r25	; 0x04
    1d34:	8b 83       	std	Y+3, r24	; 0x03
    1d36:	7e 83       	std	Y+6, r23	; 0x06
    1d38:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    1d3a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d3c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d3e:	81 81       	ldd	r24, Z+1	; 0x01
    1d40:	92 81       	ldd	r25, Z+2	; 0x02
    1d42:	9a 83       	std	Y+2, r25	; 0x02
    1d44:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1d46:	ed 81       	ldd	r30, Y+5	; 0x05
    1d48:	fe 81       	ldd	r31, Y+6	; 0x06
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4e:	93 83       	std	Z+3, r25	; 0x03
    1d50:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1d52:	e9 81       	ldd	r30, Y+1	; 0x01
    1d54:	fa 81       	ldd	r31, Y+2	; 0x02
    1d56:	84 81       	ldd	r24, Z+4	; 0x04
    1d58:	95 81       	ldd	r25, Z+5	; 0x05
    1d5a:	ed 81       	ldd	r30, Y+5	; 0x05
    1d5c:	fe 81       	ldd	r31, Y+6	; 0x06
    1d5e:	95 83       	std	Z+5, r25	; 0x05
    1d60:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1d62:	e9 81       	ldd	r30, Y+1	; 0x01
    1d64:	fa 81       	ldd	r31, Y+2	; 0x02
    1d66:	04 80       	ldd	r0, Z+4	; 0x04
    1d68:	f5 81       	ldd	r31, Z+5	; 0x05
    1d6a:	e0 2d       	mov	r30, r0
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d70:	93 83       	std	Z+3, r25	; 0x03
    1d72:	82 83       	std	Z+2, r24	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    1d74:	e9 81       	ldd	r30, Y+1	; 0x01
    1d76:	fa 81       	ldd	r31, Y+2	; 0x02
    1d78:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7c:	95 83       	std	Z+5, r25	; 0x05
    1d7e:	84 83       	std	Z+4, r24	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1d80:	ed 81       	ldd	r30, Y+5	; 0x05
    1d82:	fe 81       	ldd	r31, Y+6	; 0x06
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	9c 81       	ldd	r25, Y+4	; 0x04
    1d88:	91 87       	std	Z+9, r25	; 0x09
    1d8a:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1d8c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d8e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d90:	80 81       	ld	r24, Z
    1d92:	8f 5f       	subi	r24, 0xFF	; 255
    1d94:	eb 81       	ldd	r30, Y+3	; 0x03
    1d96:	fc 81       	ldd	r31, Y+4	; 0x04
    1d98:	80 83       	st	Z, r24
}
    1d9a:	26 96       	adiw	r28, 0x06	; 6
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	28 97       	sbiw	r28, 0x08	; 8
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	9e 83       	std	Y+6, r25	; 0x06
    1dc2:	8d 83       	std	Y+5, r24	; 0x05
    1dc4:	78 87       	std	Y+8, r23	; 0x08
    1dc6:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1dc8:	ef 81       	ldd	r30, Y+7	; 0x07
    1dca:	f8 85       	ldd	r31, Y+8	; 0x08
    1dcc:	80 81       	ld	r24, Z
    1dce:	91 81       	ldd	r25, Z+1	; 0x01
    1dd0:	9a 83       	std	Y+2, r25	; 0x02
    1dd2:	89 83       	std	Y+1, r24	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd8:	2f ef       	ldi	r18, 0xFF	; 255
    1dda:	8f 3f       	cpi	r24, 0xFF	; 255
    1ddc:	92 07       	cpc	r25, r18
    1dde:	39 f4       	brne	.+14     	; 0x1dee <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1de0:	ed 81       	ldd	r30, Y+5	; 0x05
    1de2:	fe 81       	ldd	r31, Y+6	; 0x06
    1de4:	87 81       	ldd	r24, Z+7	; 0x07
    1de6:	90 85       	ldd	r25, Z+8	; 0x08
    1de8:	9c 83       	std	Y+4, r25	; 0x04
    1dea:	8b 83       	std	Y+3, r24	; 0x03
    1dec:	18 c0       	rjmp	.+48     	; 0x1e1e <vListInsert+0x72>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1dee:	8d 81       	ldd	r24, Y+5	; 0x05
    1df0:	9e 81       	ldd	r25, Y+6	; 0x06
    1df2:	03 96       	adiw	r24, 0x03	; 3
    1df4:	9c 83       	std	Y+4, r25	; 0x04
    1df6:	8b 83       	std	Y+3, r24	; 0x03
    1df8:	06 c0       	rjmp	.+12     	; 0x1e06 <vListInsert+0x5a>
    1dfa:	eb 81       	ldd	r30, Y+3	; 0x03
    1dfc:	fc 81       	ldd	r31, Y+4	; 0x04
    1dfe:	82 81       	ldd	r24, Z+2	; 0x02
    1e00:	93 81       	ldd	r25, Z+3	; 0x03
    1e02:	9c 83       	std	Y+4, r25	; 0x04
    1e04:	8b 83       	std	Y+3, r24	; 0x03
    1e06:	eb 81       	ldd	r30, Y+3	; 0x03
    1e08:	fc 81       	ldd	r31, Y+4	; 0x04
    1e0a:	02 80       	ldd	r0, Z+2	; 0x02
    1e0c:	f3 81       	ldd	r31, Z+3	; 0x03
    1e0e:	e0 2d       	mov	r30, r0
    1e10:	20 81       	ld	r18, Z
    1e12:	31 81       	ldd	r19, Z+1	; 0x01
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	9a 81       	ldd	r25, Y+2	; 0x02
    1e18:	82 17       	cp	r24, r18
    1e1a:	93 07       	cpc	r25, r19
    1e1c:	70 f7       	brcc	.-36     	; 0x1dfa <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1e1e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e20:	fc 81       	ldd	r31, Y+4	; 0x04
    1e22:	82 81       	ldd	r24, Z+2	; 0x02
    1e24:	93 81       	ldd	r25, Z+3	; 0x03
    1e26:	ef 81       	ldd	r30, Y+7	; 0x07
    1e28:	f8 85       	ldd	r31, Y+8	; 0x08
    1e2a:	93 83       	std	Z+3, r25	; 0x03
    1e2c:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1e2e:	ef 81       	ldd	r30, Y+7	; 0x07
    1e30:	f8 85       	ldd	r31, Y+8	; 0x08
    1e32:	02 80       	ldd	r0, Z+2	; 0x02
    1e34:	f3 81       	ldd	r31, Z+3	; 0x03
    1e36:	e0 2d       	mov	r30, r0
    1e38:	8f 81       	ldd	r24, Y+7	; 0x07
    1e3a:	98 85       	ldd	r25, Y+8	; 0x08
    1e3c:	95 83       	std	Z+5, r25	; 0x05
    1e3e:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1e40:	ef 81       	ldd	r30, Y+7	; 0x07
    1e42:	f8 85       	ldd	r31, Y+8	; 0x08
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	9c 81       	ldd	r25, Y+4	; 0x04
    1e48:	95 83       	std	Z+5, r25	; 0x05
    1e4a:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = pxNewListItem;
    1e4c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e4e:	fc 81       	ldd	r31, Y+4	; 0x04
    1e50:	8f 81       	ldd	r24, Y+7	; 0x07
    1e52:	98 85       	ldd	r25, Y+8	; 0x08
    1e54:	93 83       	std	Z+3, r25	; 0x03
    1e56:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1e58:	ef 81       	ldd	r30, Y+7	; 0x07
    1e5a:	f8 85       	ldd	r31, Y+8	; 0x08
    1e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e60:	91 87       	std	Z+9, r25	; 0x09
    1e62:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1e64:	ed 81       	ldd	r30, Y+5	; 0x05
    1e66:	fe 81       	ldd	r31, Y+6	; 0x06
    1e68:	80 81       	ld	r24, Z
    1e6a:	8f 5f       	subi	r24, 0xFF	; 255
    1e6c:	ed 81       	ldd	r30, Y+5	; 0x05
    1e6e:	fe 81       	ldd	r31, Y+6	; 0x06
    1e70:	80 83       	st	Z, r24
}
    1e72:	28 96       	adiw	r28, 0x08	; 8
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <uxListRemove+0x6>
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <uxListRemove+0x8>
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	9c 83       	std	Y+4, r25	; 0x04
    1e92:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1e94:	eb 81       	ldd	r30, Y+3	; 0x03
    1e96:	fc 81       	ldd	r31, Y+4	; 0x04
    1e98:	80 85       	ldd	r24, Z+8	; 0x08
    1e9a:	91 85       	ldd	r25, Z+9	; 0x09
    1e9c:	9a 83       	std	Y+2, r25	; 0x02
    1e9e:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1ea0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ea2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ea4:	a2 81       	ldd	r26, Z+2	; 0x02
    1ea6:	b3 81       	ldd	r27, Z+3	; 0x03
    1ea8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eaa:	fc 81       	ldd	r31, Y+4	; 0x04
    1eac:	84 81       	ldd	r24, Z+4	; 0x04
    1eae:	95 81       	ldd	r25, Z+5	; 0x05
    1eb0:	15 96       	adiw	r26, 0x05	; 5
    1eb2:	9c 93       	st	X, r25
    1eb4:	8e 93       	st	-X, r24
    1eb6:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1eb8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eba:	fc 81       	ldd	r31, Y+4	; 0x04
    1ebc:	a4 81       	ldd	r26, Z+4	; 0x04
    1ebe:	b5 81       	ldd	r27, Z+5	; 0x05
    1ec0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ec2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ec4:	82 81       	ldd	r24, Z+2	; 0x02
    1ec6:	93 81       	ldd	r25, Z+3	; 0x03
    1ec8:	13 96       	adiw	r26, 0x03	; 3
    1eca:	9c 93       	st	X, r25
    1ecc:	8e 93       	st	-X, r24
    1ece:	12 97       	sbiw	r26, 0x02	; 2

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1ed0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed4:	21 81       	ldd	r18, Z+1	; 0x01
    1ed6:	32 81       	ldd	r19, Z+2	; 0x02
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	28 17       	cp	r18, r24
    1ede:	39 07       	cpc	r19, r25
    1ee0:	41 f4       	brne	.+16     	; 0x1ef2 <uxListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1ee2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ee4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ee6:	84 81       	ldd	r24, Z+4	; 0x04
    1ee8:	95 81       	ldd	r25, Z+5	; 0x05
    1eea:	e9 81       	ldd	r30, Y+1	; 0x01
    1eec:	fa 81       	ldd	r31, Y+2	; 0x02
    1eee:	92 83       	std	Z+2, r25	; 0x02
    1ef0:	81 83       	std	Z+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1ef2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ef4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ef6:	11 86       	std	Z+9, r1	; 0x09
    1ef8:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1efa:	e9 81       	ldd	r30, Y+1	; 0x01
    1efc:	fa 81       	ldd	r31, Y+2	; 0x02
    1efe:	80 81       	ld	r24, Z
    1f00:	81 50       	subi	r24, 0x01	; 1
    1f02:	e9 81       	ldd	r30, Y+1	; 0x01
    1f04:	fa 81       	ldd	r31, Y+2	; 0x02
    1f06:	80 83       	st	Z, r24

	return pxList->uxNumberOfItems;
    1f08:	e9 81       	ldd	r30, Y+1	; 0x01
    1f0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f0c:	80 81       	ld	r24, Z
}
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <main>:
int x,y;
void task1(void *pv);
void task2 (void *pv);
SemaphoreHandle_t my_mutex;
int main(void)
{
    1f1c:	ef 92       	push	r14
    1f1e:	ff 92       	push	r15
    1f20:	0f 93       	push	r16
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
	xTaskCreate(task1, "M", 100, NULL, 2, NULL);
    1f2a:	8b eb       	ldi	r24, 0xBB	; 187
    1f2c:	9f e0       	ldi	r25, 0x0F	; 15
    1f2e:	20 e6       	ldi	r18, 0x60	; 96
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	b9 01       	movw	r22, r18
    1f34:	44 e6       	ldi	r20, 0x64	; 100
    1f36:	50 e0       	ldi	r21, 0x00	; 0
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	02 e0       	ldi	r16, 0x02	; 2
    1f3e:	ee 24       	eor	r14, r14
    1f40:	ff 24       	eor	r15, r15
    1f42:	0e 94 6f 1a 	call	0x34de	; 0x34de <xTaskCreate>
	xTaskCreate(task2, "N", 100, NULL, 1, NULL);
    1f46:	87 ef       	ldi	r24, 0xF7	; 247
    1f48:	9f e0       	ldi	r25, 0x0F	; 15
    1f4a:	22 e6       	ldi	r18, 0x62	; 98
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	b9 01       	movw	r22, r18
    1f50:	44 e6       	ldi	r20, 0x64	; 100
    1f52:	50 e0       	ldi	r21, 0x00	; 0
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	01 e0       	ldi	r16, 0x01	; 1
    1f5a:	ee 24       	eor	r14, r14
    1f5c:	ff 24       	eor	r15, r15
    1f5e:	0e 94 6f 1a 	call	0x34de	; 0x34de <xTaskCreate>
	my_mutex=xSemaphoreCreateMutex();
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	0e 94 8e 14 	call	0x291c	; 0x291c <xQueueCreateMutex>
    1f68:	90 93 11 04 	sts	0x0411, r25
    1f6c:	80 93 10 04 	sts	0x0410, r24
	vTaskStartScheduler();
    1f70:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <vTaskStartScheduler>
    1f74:	ff cf       	rjmp	.-2      	; 0x1f74 <main+0x58>

00001f76 <task1>:
	{

	}
}
void task1(void *pv)
{
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	00 d0       	rcall	.+0      	; 0x1f7c <task1+0x6>
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	9a 83       	std	Y+2, r25	; 0x02
    1f82:	89 83       	std	Y+1, r24	; 0x01
	DDRD |= (1<<7);
    1f84:	a1 e3       	ldi	r26, 0x31	; 49
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e1 e3       	ldi	r30, 0x31	; 49
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	80 68       	ori	r24, 0x80	; 128
    1f90:	8c 93       	st	X, r24
	while( 1 )
	{
		xSemaphoreTake(my_mutex,1000);
    1f92:	80 91 10 04 	lds	r24, 0x0410
    1f96:	90 91 11 04 	lds	r25, 0x0411
    1f9a:	60 e0       	ldi	r22, 0x00	; 0
    1f9c:	70 e0       	ldi	r23, 0x00	; 0
    1f9e:	48 ee       	ldi	r20, 0xE8	; 232
    1fa0:	53 e0       	ldi	r21, 0x03	; 3
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	0e 94 03 16 	call	0x2c06	; 0x2c06 <xQueueGenericReceive>
		if (x != y)
    1fa8:	20 91 0e 04 	lds	r18, 0x040E
    1fac:	30 91 0f 04 	lds	r19, 0x040F
    1fb0:	80 91 12 04 	lds	r24, 0x0412
    1fb4:	90 91 13 04 	lds	r25, 0x0413
    1fb8:	28 17       	cp	r18, r24
    1fba:	39 07       	cpc	r19, r25
    1fbc:	41 f0       	breq	.+16     	; 0x1fce <task1+0x58>
		{
			PORTD ^= (1 << 7);
    1fbe:	a2 e3       	ldi	r26, 0x32	; 50
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e2 e3       	ldi	r30, 0x32	; 50
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	90 81       	ld	r25, Z
    1fc8:	80 e8       	ldi	r24, 0x80	; 128
    1fca:	89 27       	eor	r24, r25
    1fcc:	8c 93       	st	X, r24
		}
		xSemaphoreGive(my_mutex);
    1fce:	80 91 10 04 	lds	r24, 0x0410
    1fd2:	90 91 11 04 	lds	r25, 0x0411
    1fd6:	60 e0       	ldi	r22, 0x00	; 0
    1fd8:	70 e0       	ldi	r23, 0x00	; 0
    1fda:	40 e0       	ldi	r20, 0x00	; 0
    1fdc:	50 e0       	ldi	r21, 0x00	; 0
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	0e 94 ae 14 	call	0x295c	; 0x295c <xQueueGenericSend>
		vTaskDelay(100);
    1fe4:	84 e6       	ldi	r24, 0x64	; 100
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <vTaskDelay>
    1fec:	d2 cf       	rjmp	.-92     	; 0x1f92 <task1+0x1c>

00001fee <task2>:
	}

}	
void task2 (void *pv)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	60 97       	sbiw	r28, 0x10	; 16
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	98 8b       	std	Y+16, r25	; 0x10
    2004:	8f 87       	std	Y+15, r24	; 0x0f
	while( 1 )
	{
		//xSemaphoreTake(my_mutex,1000);
		++x;
    2006:	80 91 0e 04 	lds	r24, 0x040E
    200a:	90 91 0f 04 	lds	r25, 0x040F
    200e:	01 96       	adiw	r24, 0x01	; 1
    2010:	90 93 0f 04 	sts	0x040F, r25
    2014:	80 93 0e 04 	sts	0x040E, r24
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a8 e4       	ldi	r26, 0x48	; 72
    201e:	b3 e4       	ldi	r27, 0x43	; 67
    2020:	8b 87       	std	Y+11, r24	; 0x0b
    2022:	9c 87       	std	Y+12, r25	; 0x0c
    2024:	ad 87       	std	Y+13, r26	; 0x0d
    2026:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2028:	6b 85       	ldd	r22, Y+11	; 0x0b
    202a:	7c 85       	ldd	r23, Y+12	; 0x0c
    202c:	8d 85       	ldd	r24, Y+13	; 0x0d
    202e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	4a ef       	ldi	r20, 0xFA	; 250
    2036:	54 e4       	ldi	r21, 0x44	; 68
    2038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	8f 83       	std	Y+7, r24	; 0x07
    2042:	98 87       	std	Y+8, r25	; 0x08
    2044:	a9 87       	std	Y+9, r26	; 0x09
    2046:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2048:	6f 81       	ldd	r22, Y+7	; 0x07
    204a:	78 85       	ldd	r23, Y+8	; 0x08
    204c:	89 85       	ldd	r24, Y+9	; 0x09
    204e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e8       	ldi	r20, 0x80	; 128
    2056:	5f e3       	ldi	r21, 0x3F	; 63
    2058:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    205c:	88 23       	and	r24, r24
    205e:	2c f4       	brge	.+10     	; 0x206a <task2+0x7c>
		__ticks = 1;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9e 83       	std	Y+6, r25	; 0x06
    2066:	8d 83       	std	Y+5, r24	; 0x05
    2068:	3f c0       	rjmp	.+126    	; 0x20e8 <task2+0xfa>
	else if (__tmp > 65535)
    206a:	6f 81       	ldd	r22, Y+7	; 0x07
    206c:	78 85       	ldd	r23, Y+8	; 0x08
    206e:	89 85       	ldd	r24, Y+9	; 0x09
    2070:	9a 85       	ldd	r25, Y+10	; 0x0a
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	3f ef       	ldi	r19, 0xFF	; 255
    2076:	4f e7       	ldi	r20, 0x7F	; 127
    2078:	57 e4       	ldi	r21, 0x47	; 71
    207a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    207e:	18 16       	cp	r1, r24
    2080:	4c f5       	brge	.+82     	; 0x20d4 <task2+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2082:	6b 85       	ldd	r22, Y+11	; 0x0b
    2084:	7c 85       	ldd	r23, Y+12	; 0x0c
    2086:	8d 85       	ldd	r24, Y+13	; 0x0d
    2088:	9e 85       	ldd	r25, Y+14	; 0x0e
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e2       	ldi	r20, 0x20	; 32
    2090:	51 e4       	ldi	r21, 0x41	; 65
    2092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9e 83       	std	Y+6, r25	; 0x06
    20a8:	8d 83       	std	Y+5, r24	; 0x05
    20aa:	0f c0       	rjmp	.+30     	; 0x20ca <task2+0xdc>
    20ac:	88 ec       	ldi	r24, 0xC8	; 200
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	9c 83       	std	Y+4, r25	; 0x04
    20b2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	9c 81       	ldd	r25, Y+4	; 0x04
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <task2+0xca>
    20bc:	9c 83       	std	Y+4, r25	; 0x04
    20be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
    20c2:	9e 81       	ldd	r25, Y+6	; 0x06
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	9e 83       	std	Y+6, r25	; 0x06
    20c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	9e 81       	ldd	r25, Y+6	; 0x06
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	69 f7       	brne	.-38     	; 0x20ac <task2+0xbe>
    20d2:	14 c0       	rjmp	.+40     	; 0x20fc <task2+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d4:	6f 81       	ldd	r22, Y+7	; 0x07
    20d6:	78 85       	ldd	r23, Y+8	; 0x08
    20d8:	89 85       	ldd	r24, Y+9	; 0x09
    20da:	9a 85       	ldd	r25, Y+10	; 0x0a
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9e 83       	std	Y+6, r25	; 0x06
    20e6:	8d 83       	std	Y+5, r24	; 0x05
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	9e 81       	ldd	r25, Y+6	; 0x06
    20ec:	9a 83       	std	Y+2, r25	; 0x02
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	9a 81       	ldd	r25, Y+2	; 0x02
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <task2+0x106>
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		++y;
    20fc:	80 91 12 04 	lds	r24, 0x0412
    2100:	90 91 13 04 	lds	r25, 0x0413
    2104:	01 96       	adiw	r24, 0x01	; 1
    2106:	90 93 13 04 	sts	0x0413, r25
    210a:	80 93 12 04 	sts	0x0412, r24
    210e:	7b cf       	rjmp	.-266    	; 0x2006 <task2+0x18>

00002110 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	28 97       	sbiw	r28, 0x08	; 8
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	cd bf       	out	0x3d, r28	; 61
    2124:	9c 83       	std	Y+4, r25	; 0x04
    2126:	8b 83       	std	Y+3, r24	; 0x03
    2128:	7e 83       	std	Y+6, r23	; 0x06
    212a:	6d 83       	std	Y+5, r22	; 0x05
    212c:	58 87       	std	Y+8, r21	; 0x08
    212e:	4f 83       	std	Y+7, r20	; 0x07
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    2130:	eb 81       	ldd	r30, Y+3	; 0x03
    2132:	fc 81       	ldd	r31, Y+4	; 0x04
    2134:	81 e1       	ldi	r24, 0x11	; 17
    2136:	80 83       	st	Z, r24
	pxTopOfStack--;
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	9c 81       	ldd	r25, Y+4	; 0x04
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	9c 83       	std	Y+4, r25	; 0x04
    2140:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    2142:	eb 81       	ldd	r30, Y+3	; 0x03
    2144:	fc 81       	ldd	r31, Y+4	; 0x04
    2146:	82 e2       	ldi	r24, 0x22	; 34
    2148:	80 83       	st	Z, r24
	pxTopOfStack--;
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	9c 81       	ldd	r25, Y+4	; 0x04
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	9c 83       	std	Y+4, r25	; 0x04
    2152:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    2154:	eb 81       	ldd	r30, Y+3	; 0x03
    2156:	fc 81       	ldd	r31, Y+4	; 0x04
    2158:	83 e3       	ldi	r24, 0x33	; 51
    215a:	80 83       	st	Z, r24
	pxTopOfStack--;
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	9c 81       	ldd	r25, Y+4	; 0x04
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	9c 83       	std	Y+4, r25	; 0x04
    2164:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
    2166:	8d 81       	ldd	r24, Y+5	; 0x05
    2168:	9e 81       	ldd	r25, Y+6	; 0x06
    216a:	9a 83       	std	Y+2, r25	; 0x02
    216c:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	eb 81       	ldd	r30, Y+3	; 0x03
    2172:	fc 81       	ldd	r31, Y+4	; 0x04
    2174:	80 83       	st	Z, r24
	pxTopOfStack--;
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	9c 81       	ldd	r25, Y+4	; 0x04
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	9c 83       	std	Y+4, r25	; 0x04
    217e:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	9a 81       	ldd	r25, Y+2	; 0x02
    2184:	89 2f       	mov	r24, r25
    2186:	99 27       	eor	r25, r25
    2188:	9a 83       	std	Y+2, r25	; 0x02
    218a:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	eb 81       	ldd	r30, Y+3	; 0x03
    2190:	fc 81       	ldd	r31, Y+4	; 0x04
    2192:	80 83       	st	Z, r24
	pxTopOfStack--;
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	9c 81       	ldd	r25, Y+4	; 0x04
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	9c 83       	std	Y+4, r25	; 0x04
    219c:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    219e:	eb 81       	ldd	r30, Y+3	; 0x03
    21a0:	fc 81       	ldd	r31, Y+4	; 0x04
    21a2:	10 82       	st	Z, r1
	pxTopOfStack--;
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	9c 81       	ldd	r25, Y+4	; 0x04
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    21ae:	eb 81       	ldd	r30, Y+3	; 0x03
    21b0:	fc 81       	ldd	r31, Y+4	; 0x04
    21b2:	80 e8       	ldi	r24, 0x80	; 128
    21b4:	80 83       	st	Z, r24
	pxTopOfStack--;
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	9c 83       	std	Y+4, r25	; 0x04
    21be:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    21c0:	eb 81       	ldd	r30, Y+3	; 0x03
    21c2:	fc 81       	ldd	r31, Y+4	; 0x04
    21c4:	10 82       	st	Z, r1
	pxTopOfStack--;
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	9c 83       	std	Y+4, r25	; 0x04
    21ce:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    21d0:	eb 81       	ldd	r30, Y+3	; 0x03
    21d2:	fc 81       	ldd	r31, Y+4	; 0x04
    21d4:	82 e0       	ldi	r24, 0x02	; 2
    21d6:	80 83       	st	Z, r24
	pxTopOfStack--;
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	9c 81       	ldd	r25, Y+4	; 0x04
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	9c 83       	std	Y+4, r25	; 0x04
    21e0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    21e2:	eb 81       	ldd	r30, Y+3	; 0x03
    21e4:	fc 81       	ldd	r31, Y+4	; 0x04
    21e6:	83 e0       	ldi	r24, 0x03	; 3
    21e8:	80 83       	st	Z, r24
	pxTopOfStack--;
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	9c 81       	ldd	r25, Y+4	; 0x04
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	9c 83       	std	Y+4, r25	; 0x04
    21f2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    21f4:	eb 81       	ldd	r30, Y+3	; 0x03
    21f6:	fc 81       	ldd	r31, Y+4	; 0x04
    21f8:	84 e0       	ldi	r24, 0x04	; 4
    21fa:	80 83       	st	Z, r24
	pxTopOfStack--;
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	9c 83       	std	Y+4, r25	; 0x04
    2204:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    2206:	eb 81       	ldd	r30, Y+3	; 0x03
    2208:	fc 81       	ldd	r31, Y+4	; 0x04
    220a:	85 e0       	ldi	r24, 0x05	; 5
    220c:	80 83       	st	Z, r24
	pxTopOfStack--;
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	9c 81       	ldd	r25, Y+4	; 0x04
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	9c 83       	std	Y+4, r25	; 0x04
    2216:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    2218:	eb 81       	ldd	r30, Y+3	; 0x03
    221a:	fc 81       	ldd	r31, Y+4	; 0x04
    221c:	86 e0       	ldi	r24, 0x06	; 6
    221e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	9c 81       	ldd	r25, Y+4	; 0x04
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	9c 83       	std	Y+4, r25	; 0x04
    2228:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    222a:	eb 81       	ldd	r30, Y+3	; 0x03
    222c:	fc 81       	ldd	r31, Y+4	; 0x04
    222e:	87 e0       	ldi	r24, 0x07	; 7
    2230:	80 83       	st	Z, r24
	pxTopOfStack--;
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	9c 81       	ldd	r25, Y+4	; 0x04
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	9c 83       	std	Y+4, r25	; 0x04
    223a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    223c:	eb 81       	ldd	r30, Y+3	; 0x03
    223e:	fc 81       	ldd	r31, Y+4	; 0x04
    2240:	88 e0       	ldi	r24, 0x08	; 8
    2242:	80 83       	st	Z, r24
	pxTopOfStack--;
    2244:	8b 81       	ldd	r24, Y+3	; 0x03
    2246:	9c 81       	ldd	r25, Y+4	; 0x04
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	9c 83       	std	Y+4, r25	; 0x04
    224c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    224e:	eb 81       	ldd	r30, Y+3	; 0x03
    2250:	fc 81       	ldd	r31, Y+4	; 0x04
    2252:	89 e0       	ldi	r24, 0x09	; 9
    2254:	80 83       	st	Z, r24
	pxTopOfStack--;
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	9c 81       	ldd	r25, Y+4	; 0x04
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	9c 83       	std	Y+4, r25	; 0x04
    225e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    2260:	eb 81       	ldd	r30, Y+3	; 0x03
    2262:	fc 81       	ldd	r31, Y+4	; 0x04
    2264:	80 e1       	ldi	r24, 0x10	; 16
    2266:	80 83       	st	Z, r24
	pxTopOfStack--;
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	9c 81       	ldd	r25, Y+4	; 0x04
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	9c 83       	std	Y+4, r25	; 0x04
    2270:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    2272:	eb 81       	ldd	r30, Y+3	; 0x03
    2274:	fc 81       	ldd	r31, Y+4	; 0x04
    2276:	81 e1       	ldi	r24, 0x11	; 17
    2278:	80 83       	st	Z, r24
	pxTopOfStack--;
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	9c 81       	ldd	r25, Y+4	; 0x04
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	9c 83       	std	Y+4, r25	; 0x04
    2282:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    2284:	eb 81       	ldd	r30, Y+3	; 0x03
    2286:	fc 81       	ldd	r31, Y+4	; 0x04
    2288:	82 e1       	ldi	r24, 0x12	; 18
    228a:	80 83       	st	Z, r24
	pxTopOfStack--;
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	9c 83       	std	Y+4, r25	; 0x04
    2294:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    2296:	eb 81       	ldd	r30, Y+3	; 0x03
    2298:	fc 81       	ldd	r31, Y+4	; 0x04
    229a:	83 e1       	ldi	r24, 0x13	; 19
    229c:	80 83       	st	Z, r24
	pxTopOfStack--;
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	9c 81       	ldd	r25, Y+4	; 0x04
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	9c 83       	std	Y+4, r25	; 0x04
    22a6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    22a8:	eb 81       	ldd	r30, Y+3	; 0x03
    22aa:	fc 81       	ldd	r31, Y+4	; 0x04
    22ac:	84 e1       	ldi	r24, 0x14	; 20
    22ae:	80 83       	st	Z, r24
	pxTopOfStack--;
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	9c 81       	ldd	r25, Y+4	; 0x04
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	9c 83       	std	Y+4, r25	; 0x04
    22b8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    22ba:	eb 81       	ldd	r30, Y+3	; 0x03
    22bc:	fc 81       	ldd	r31, Y+4	; 0x04
    22be:	85 e1       	ldi	r24, 0x15	; 21
    22c0:	80 83       	st	Z, r24
	pxTopOfStack--;
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
    22c4:	9c 81       	ldd	r25, Y+4	; 0x04
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	9c 83       	std	Y+4, r25	; 0x04
    22ca:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    22cc:	eb 81       	ldd	r30, Y+3	; 0x03
    22ce:	fc 81       	ldd	r31, Y+4	; 0x04
    22d0:	86 e1       	ldi	r24, 0x16	; 22
    22d2:	80 83       	st	Z, r24
	pxTopOfStack--;
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	9c 81       	ldd	r25, Y+4	; 0x04
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	9c 83       	std	Y+4, r25	; 0x04
    22dc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    22de:	eb 81       	ldd	r30, Y+3	; 0x03
    22e0:	fc 81       	ldd	r31, Y+4	; 0x04
    22e2:	87 e1       	ldi	r24, 0x17	; 23
    22e4:	80 83       	st	Z, r24
	pxTopOfStack--;
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	9c 83       	std	Y+4, r25	; 0x04
    22ee:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    22f0:	eb 81       	ldd	r30, Y+3	; 0x03
    22f2:	fc 81       	ldd	r31, Y+4	; 0x04
    22f4:	88 e1       	ldi	r24, 0x18	; 24
    22f6:	80 83       	st	Z, r24
	pxTopOfStack--;
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	9c 81       	ldd	r25, Y+4	; 0x04
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	9c 83       	std	Y+4, r25	; 0x04
    2300:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    2302:	eb 81       	ldd	r30, Y+3	; 0x03
    2304:	fc 81       	ldd	r31, Y+4	; 0x04
    2306:	89 e1       	ldi	r24, 0x19	; 25
    2308:	80 83       	st	Z, r24
	pxTopOfStack--;
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	9c 81       	ldd	r25, Y+4	; 0x04
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	9c 83       	std	Y+4, r25	; 0x04
    2312:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    2314:	eb 81       	ldd	r30, Y+3	; 0x03
    2316:	fc 81       	ldd	r31, Y+4	; 0x04
    2318:	80 e2       	ldi	r24, 0x20	; 32
    231a:	80 83       	st	Z, r24
	pxTopOfStack--;
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	9c 81       	ldd	r25, Y+4	; 0x04
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	9c 83       	std	Y+4, r25	; 0x04
    2324:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    2326:	eb 81       	ldd	r30, Y+3	; 0x03
    2328:	fc 81       	ldd	r31, Y+4	; 0x04
    232a:	81 e2       	ldi	r24, 0x21	; 33
    232c:	80 83       	st	Z, r24
	pxTopOfStack--;
    232e:	8b 81       	ldd	r24, Y+3	; 0x03
    2330:	9c 81       	ldd	r25, Y+4	; 0x04
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	9c 83       	std	Y+4, r25	; 0x04
    2336:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    2338:	eb 81       	ldd	r30, Y+3	; 0x03
    233a:	fc 81       	ldd	r31, Y+4	; 0x04
    233c:	82 e2       	ldi	r24, 0x22	; 34
    233e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	9c 81       	ldd	r25, Y+4	; 0x04
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	9c 83       	std	Y+4, r25	; 0x04
    2348:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    234a:	eb 81       	ldd	r30, Y+3	; 0x03
    234c:	fc 81       	ldd	r31, Y+4	; 0x04
    234e:	83 e2       	ldi	r24, 0x23	; 35
    2350:	80 83       	st	Z, r24
	pxTopOfStack--;
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	9c 81       	ldd	r25, Y+4	; 0x04
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	9c 83       	std	Y+4, r25	; 0x04
    235a:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
    235c:	8f 81       	ldd	r24, Y+7	; 0x07
    235e:	98 85       	ldd	r25, Y+8	; 0x08
    2360:	9a 83       	std	Y+2, r25	; 0x02
    2362:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	eb 81       	ldd	r30, Y+3	; 0x03
    2368:	fc 81       	ldd	r31, Y+4	; 0x04
    236a:	80 83       	st	Z, r24
	pxTopOfStack--;
    236c:	8b 81       	ldd	r24, Y+3	; 0x03
    236e:	9c 81       	ldd	r25, Y+4	; 0x04
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	9c 83       	std	Y+4, r25	; 0x04
    2374:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	9a 81       	ldd	r25, Y+2	; 0x02
    237a:	89 2f       	mov	r24, r25
    237c:	99 27       	eor	r25, r25
    237e:	9a 83       	std	Y+2, r25	; 0x02
    2380:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	eb 81       	ldd	r30, Y+3	; 0x03
    2386:	fc 81       	ldd	r31, Y+4	; 0x04
    2388:	80 83       	st	Z, r24
	pxTopOfStack--;
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	9c 81       	ldd	r25, Y+4	; 0x04
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	9c 83       	std	Y+4, r25	; 0x04
    2392:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    2394:	eb 81       	ldd	r30, Y+3	; 0x03
    2396:	fc 81       	ldd	r31, Y+4	; 0x04
    2398:	86 e2       	ldi	r24, 0x26	; 38
    239a:	80 83       	st	Z, r24
	pxTopOfStack--;
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	9c 81       	ldd	r25, Y+4	; 0x04
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	9c 83       	std	Y+4, r25	; 0x04
    23a4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    23a6:	eb 81       	ldd	r30, Y+3	; 0x03
    23a8:	fc 81       	ldd	r31, Y+4	; 0x04
    23aa:	87 e2       	ldi	r24, 0x27	; 39
    23ac:	80 83       	st	Z, r24
	pxTopOfStack--;
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	9c 81       	ldd	r25, Y+4	; 0x04
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	9c 83       	std	Y+4, r25	; 0x04
    23b6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    23b8:	eb 81       	ldd	r30, Y+3	; 0x03
    23ba:	fc 81       	ldd	r31, Y+4	; 0x04
    23bc:	88 e2       	ldi	r24, 0x28	; 40
    23be:	80 83       	st	Z, r24
	pxTopOfStack--;
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
    23c2:	9c 81       	ldd	r25, Y+4	; 0x04
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	9c 83       	std	Y+4, r25	; 0x04
    23c8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    23ca:	eb 81       	ldd	r30, Y+3	; 0x03
    23cc:	fc 81       	ldd	r31, Y+4	; 0x04
    23ce:	89 e2       	ldi	r24, 0x29	; 41
    23d0:	80 83       	st	Z, r24
	pxTopOfStack--;
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	9c 81       	ldd	r25, Y+4	; 0x04
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	9c 83       	std	Y+4, r25	; 0x04
    23da:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    23dc:	eb 81       	ldd	r30, Y+3	; 0x03
    23de:	fc 81       	ldd	r31, Y+4	; 0x04
    23e0:	80 e3       	ldi	r24, 0x30	; 48
    23e2:	80 83       	st	Z, r24
	pxTopOfStack--;
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	9c 81       	ldd	r25, Y+4	; 0x04
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	9c 83       	std	Y+4, r25	; 0x04
    23ec:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    23ee:	eb 81       	ldd	r30, Y+3	; 0x03
    23f0:	fc 81       	ldd	r31, Y+4	; 0x04
    23f2:	81 e3       	ldi	r24, 0x31	; 49
    23f4:	80 83       	st	Z, r24
	pxTopOfStack--;
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	9c 81       	ldd	r25, Y+4	; 0x04
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	9c 83       	std	Y+4, r25	; 0x04
    23fe:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    2400:	8b 81       	ldd	r24, Y+3	; 0x03
    2402:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2404:	28 96       	adiw	r28, 0x08	; 8
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    241e:	0e 94 fd 12 	call	0x25fa	; 0x25fa <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    2422:	a0 91 9f 03 	lds	r26, 0x039F
    2426:	b0 91 a0 03 	lds	r27, 0x03A0
    242a:	cd 91       	ld	r28, X+
    242c:	cd bf       	out	0x3d, r28	; 61
    242e:	dd 91       	ld	r29, X+
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	ff 91       	pop	r31
    2434:	ef 91       	pop	r30
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	bf 91       	pop	r27
    243c:	af 91       	pop	r26
    243e:	9f 91       	pop	r25
    2440:	8f 91       	pop	r24
    2442:	7f 91       	pop	r23
    2444:	6f 91       	pop	r22
    2446:	5f 91       	pop	r21
    2448:	4f 91       	pop	r20
    244a:	3f 91       	pop	r19
    244c:	2f 91       	pop	r18
    244e:	1f 91       	pop	r17
    2450:	0f 91       	pop	r16
    2452:	ff 90       	pop	r15
    2454:	ef 90       	pop	r14
    2456:	df 90       	pop	r13
    2458:	cf 90       	pop	r12
    245a:	bf 90       	pop	r11
    245c:	af 90       	pop	r10
    245e:	9f 90       	pop	r9
    2460:	8f 90       	pop	r8
    2462:	7f 90       	pop	r7
    2464:	6f 90       	pop	r6
    2466:	5f 90       	pop	r5
    2468:	4f 90       	pop	r4
    246a:	3f 90       	pop	r3
    246c:	2f 90       	pop	r2
    246e:	1f 90       	pop	r1
    2470:	0f 90       	pop	r0
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    2476:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    2478:	81 e0       	ldi	r24, 0x01	; 1
}
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	08 95       	ret

00002480 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    2488:	cf 91       	pop	r28
    248a:	df 91       	pop	r29
    248c:	08 95       	ret

0000248e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    248e:	0f 92       	push	r0
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	f8 94       	cli
    2494:	0f 92       	push	r0
    2496:	1f 92       	push	r1
    2498:	11 24       	eor	r1, r1
    249a:	2f 92       	push	r2
    249c:	3f 92       	push	r3
    249e:	4f 92       	push	r4
    24a0:	5f 92       	push	r5
    24a2:	6f 92       	push	r6
    24a4:	7f 92       	push	r7
    24a6:	8f 92       	push	r8
    24a8:	9f 92       	push	r9
    24aa:	af 92       	push	r10
    24ac:	bf 92       	push	r11
    24ae:	cf 92       	push	r12
    24b0:	df 92       	push	r13
    24b2:	ef 92       	push	r14
    24b4:	ff 92       	push	r15
    24b6:	0f 93       	push	r16
    24b8:	1f 93       	push	r17
    24ba:	2f 93       	push	r18
    24bc:	3f 93       	push	r19
    24be:	4f 93       	push	r20
    24c0:	5f 93       	push	r21
    24c2:	6f 93       	push	r22
    24c4:	7f 93       	push	r23
    24c6:	8f 93       	push	r24
    24c8:	9f 93       	push	r25
    24ca:	af 93       	push	r26
    24cc:	bf 93       	push	r27
    24ce:	cf 93       	push	r28
    24d0:	df 93       	push	r29
    24d2:	ef 93       	push	r30
    24d4:	ff 93       	push	r31
    24d6:	a0 91 9f 03 	lds	r26, 0x039F
    24da:	b0 91 a0 03 	lds	r27, 0x03A0
    24de:	0d b6       	in	r0, 0x3d	; 61
    24e0:	0d 92       	st	X+, r0
    24e2:	0e b6       	in	r0, 0x3e	; 62
    24e4:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    24e6:	0e 94 b5 21 	call	0x436a	; 0x436a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    24ea:	a0 91 9f 03 	lds	r26, 0x039F
    24ee:	b0 91 a0 03 	lds	r27, 0x03A0
    24f2:	cd 91       	ld	r28, X+
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	dd 91       	ld	r29, X+
    24f8:	de bf       	out	0x3e, r29	; 62
    24fa:	ff 91       	pop	r31
    24fc:	ef 91       	pop	r30
    24fe:	df 91       	pop	r29
    2500:	cf 91       	pop	r28
    2502:	bf 91       	pop	r27
    2504:	af 91       	pop	r26
    2506:	9f 91       	pop	r25
    2508:	8f 91       	pop	r24
    250a:	7f 91       	pop	r23
    250c:	6f 91       	pop	r22
    250e:	5f 91       	pop	r21
    2510:	4f 91       	pop	r20
    2512:	3f 91       	pop	r19
    2514:	2f 91       	pop	r18
    2516:	1f 91       	pop	r17
    2518:	0f 91       	pop	r16
    251a:	ff 90       	pop	r15
    251c:	ef 90       	pop	r14
    251e:	df 90       	pop	r13
    2520:	cf 90       	pop	r12
    2522:	bf 90       	pop	r11
    2524:	af 90       	pop	r10
    2526:	9f 90       	pop	r9
    2528:	8f 90       	pop	r8
    252a:	7f 90       	pop	r7
    252c:	6f 90       	pop	r6
    252e:	5f 90       	pop	r5
    2530:	4f 90       	pop	r4
    2532:	3f 90       	pop	r3
    2534:	2f 90       	pop	r2
    2536:	1f 90       	pop	r1
    2538:	0f 90       	pop	r0
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	0f 90       	pop	r0

	asm volatile ( "ret" );
    253e:	08 95       	ret

00002540 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2540:	0f 92       	push	r0
    2542:	0f b6       	in	r0, 0x3f	; 63
    2544:	f8 94       	cli
    2546:	0f 92       	push	r0
    2548:	1f 92       	push	r1
    254a:	11 24       	eor	r1, r1
    254c:	2f 92       	push	r2
    254e:	3f 92       	push	r3
    2550:	4f 92       	push	r4
    2552:	5f 92       	push	r5
    2554:	6f 92       	push	r6
    2556:	7f 92       	push	r7
    2558:	8f 92       	push	r8
    255a:	9f 92       	push	r9
    255c:	af 92       	push	r10
    255e:	bf 92       	push	r11
    2560:	cf 92       	push	r12
    2562:	df 92       	push	r13
    2564:	ef 92       	push	r14
    2566:	ff 92       	push	r15
    2568:	0f 93       	push	r16
    256a:	1f 93       	push	r17
    256c:	2f 93       	push	r18
    256e:	3f 93       	push	r19
    2570:	4f 93       	push	r20
    2572:	5f 93       	push	r21
    2574:	6f 93       	push	r22
    2576:	7f 93       	push	r23
    2578:	8f 93       	push	r24
    257a:	9f 93       	push	r25
    257c:	af 93       	push	r26
    257e:	bf 93       	push	r27
    2580:	cf 93       	push	r28
    2582:	df 93       	push	r29
    2584:	ef 93       	push	r30
    2586:	ff 93       	push	r31
    2588:	a0 91 9f 03 	lds	r26, 0x039F
    258c:	b0 91 a0 03 	lds	r27, 0x03A0
    2590:	0d b6       	in	r0, 0x3d	; 61
    2592:	0d 92       	st	X+, r0
    2594:	0e b6       	in	r0, 0x3e	; 62
    2596:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    2598:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <xTaskIncrementTick>
    259c:	88 23       	and	r24, r24
    259e:	11 f0       	breq	.+4      	; 0x25a4 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    25a0:	0e 94 b5 21 	call	0x436a	; 0x436a <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    25a4:	a0 91 9f 03 	lds	r26, 0x039F
    25a8:	b0 91 a0 03 	lds	r27, 0x03A0
    25ac:	cd 91       	ld	r28, X+
    25ae:	cd bf       	out	0x3d, r28	; 61
    25b0:	dd 91       	ld	r29, X+
    25b2:	de bf       	out	0x3e, r29	; 62
    25b4:	ff 91       	pop	r31
    25b6:	ef 91       	pop	r30
    25b8:	df 91       	pop	r29
    25ba:	cf 91       	pop	r28
    25bc:	bf 91       	pop	r27
    25be:	af 91       	pop	r26
    25c0:	9f 91       	pop	r25
    25c2:	8f 91       	pop	r24
    25c4:	7f 91       	pop	r23
    25c6:	6f 91       	pop	r22
    25c8:	5f 91       	pop	r21
    25ca:	4f 91       	pop	r20
    25cc:	3f 91       	pop	r19
    25ce:	2f 91       	pop	r18
    25d0:	1f 91       	pop	r17
    25d2:	0f 91       	pop	r16
    25d4:	ff 90       	pop	r15
    25d6:	ef 90       	pop	r14
    25d8:	df 90       	pop	r13
    25da:	cf 90       	pop	r12
    25dc:	bf 90       	pop	r11
    25de:	af 90       	pop	r10
    25e0:	9f 90       	pop	r9
    25e2:	8f 90       	pop	r8
    25e4:	7f 90       	pop	r7
    25e6:	6f 90       	pop	r6
    25e8:	5f 90       	pop	r5
    25ea:	4f 90       	pop	r4
    25ec:	3f 90       	pop	r3
    25ee:	2f 90       	pop	r2
    25f0:	1f 90       	pop	r1
    25f2:	0f 90       	pop	r0
    25f4:	0f be       	out	0x3f, r0	; 63
    25f6:	0f 90       	pop	r0

	asm volatile ( "ret" );
    25f8:	08 95       	ret

000025fa <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    25fa:	df 93       	push	r29
    25fc:	cf 93       	push	r28
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <prvSetupTimerInterrupt+0x6>
    2600:	00 d0       	rcall	.+0      	; 0x2602 <prvSetupTimerInterrupt+0x8>
    2602:	00 d0       	rcall	.+0      	; 0x2604 <prvSetupTimerInterrupt+0xa>
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    2608:	80 e4       	ldi	r24, 0x40	; 64
    260a:	9f e1       	ldi	r25, 0x1F	; 31
    260c:	a0 e0       	ldi	r26, 0x00	; 0
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	8b 83       	std	Y+3, r24	; 0x03
    2612:	9c 83       	std	Y+4, r25	; 0x04
    2614:	ad 83       	std	Y+5, r26	; 0x05
    2616:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    2618:	8b 81       	ldd	r24, Y+3	; 0x03
    261a:	9c 81       	ldd	r25, Y+4	; 0x04
    261c:	ad 81       	ldd	r26, Y+5	; 0x05
    261e:	be 81       	ldd	r27, Y+6	; 0x06
    2620:	68 94       	set
    2622:	15 f8       	bld	r1, 5
    2624:	b6 95       	lsr	r27
    2626:	a7 95       	ror	r26
    2628:	97 95       	ror	r25
    262a:	87 95       	ror	r24
    262c:	16 94       	lsr	r1
    262e:	d1 f7       	brne	.-12     	; 0x2624 <prvSetupTimerInterrupt+0x2a>
    2630:	8b 83       	std	Y+3, r24	; 0x03
    2632:	9c 83       	std	Y+4, r25	; 0x04
    2634:	ad 83       	std	Y+5, r26	; 0x05
    2636:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    2638:	8b 81       	ldd	r24, Y+3	; 0x03
    263a:	9c 81       	ldd	r25, Y+4	; 0x04
    263c:	ad 81       	ldd	r26, Y+5	; 0x05
    263e:	be 81       	ldd	r27, Y+6	; 0x06
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	a1 09       	sbc	r26, r1
    2644:	b1 09       	sbc	r27, r1
    2646:	8b 83       	std	Y+3, r24	; 0x03
    2648:	9c 83       	std	Y+4, r25	; 0x04
    264a:	ad 83       	std	Y+5, r26	; 0x05
    264c:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    2652:	8b 81       	ldd	r24, Y+3	; 0x03
    2654:	9c 81       	ldd	r25, Y+4	; 0x04
    2656:	ad 81       	ldd	r26, Y+5	; 0x05
    2658:	be 81       	ldd	r27, Y+6	; 0x06
    265a:	89 2f       	mov	r24, r25
    265c:	9a 2f       	mov	r25, r26
    265e:	ab 2f       	mov	r26, r27
    2660:	bb 27       	eor	r27, r27
    2662:	8b 83       	std	Y+3, r24	; 0x03
    2664:	9c 83       	std	Y+4, r25	; 0x04
    2666:	ad 83       	std	Y+5, r26	; 0x05
    2668:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    266a:	8b 81       	ldd	r24, Y+3	; 0x03
    266c:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    266e:	eb e4       	ldi	r30, 0x4B	; 75
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    2676:	ea e4       	ldi	r30, 0x4A	; 74
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    267e:	8b e0       	ldi	r24, 0x0B	; 11
    2680:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    2682:	ee e4       	ldi	r30, 0x4E	; 78
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    268a:	e9 e5       	ldi	r30, 0x59	; 89
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	80 81       	ld	r24, Z
    2690:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	80 61       	ori	r24, 0x10	; 16
    2696:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    2698:	e9 e5       	ldi	r30, 0x59	; 89
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	80 83       	st	Z, r24
}
    26a0:	26 96       	adiw	r28, 0x06	; 6
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	f8 94       	cli
    26a6:	de bf       	out	0x3e, r29	; 62
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	cd bf       	out	0x3d, r28	; 61
    26ac:	cf 91       	pop	r28
    26ae:	df 91       	pop	r29
    26b0:	08 95       	ret

000026b2 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    26b2:	0e 94 a0 12 	call	0x2540	; 0x2540 <vPortYieldFromTick>
		asm volatile ( "reti" );
    26b6:	18 95       	reti

000026b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	00 d0       	rcall	.+0      	; 0x26be <xQueueGenericReset+0x6>
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <xQueueGenericReset+0x8>
    26c0:	0f 92       	push	r0
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    26c6:	9c 83       	std	Y+4, r25	; 0x04
    26c8:	8b 83       	std	Y+3, r24	; 0x03
    26ca:	6d 83       	std	Y+5, r22	; 0x05
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	9c 81       	ldd	r25, Y+4	; 0x04
    26d0:	9a 83       	std	Y+2, r25	; 0x02
    26d2:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	f8 94       	cli
    26d8:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    26da:	e9 81       	ldd	r30, Y+1	; 0x01
    26dc:	fa 81       	ldd	r31, Y+2	; 0x02
    26de:	40 81       	ld	r20, Z
    26e0:	51 81       	ldd	r21, Z+1	; 0x01
    26e2:	e9 81       	ldd	r30, Y+1	; 0x01
    26e4:	fa 81       	ldd	r31, Y+2	; 0x02
    26e6:	83 8d       	ldd	r24, Z+27	; 0x1b
    26e8:	28 2f       	mov	r18, r24
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	e9 81       	ldd	r30, Y+1	; 0x01
    26ee:	fa 81       	ldd	r31, Y+2	; 0x02
    26f0:	84 8d       	ldd	r24, Z+28	; 0x1c
    26f2:	88 2f       	mov	r24, r24
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	bc 01       	movw	r22, r24
    26f8:	26 9f       	mul	r18, r22
    26fa:	c0 01       	movw	r24, r0
    26fc:	27 9f       	mul	r18, r23
    26fe:	90 0d       	add	r25, r0
    2700:	36 9f       	mul	r19, r22
    2702:	90 0d       	add	r25, r0
    2704:	11 24       	eor	r1, r1
    2706:	84 0f       	add	r24, r20
    2708:	95 1f       	adc	r25, r21
    270a:	e9 81       	ldd	r30, Y+1	; 0x01
    270c:	fa 81       	ldd	r31, Y+2	; 0x02
    270e:	93 83       	std	Z+3, r25	; 0x03
    2710:	82 83       	std	Z+2, r24	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    2712:	e9 81       	ldd	r30, Y+1	; 0x01
    2714:	fa 81       	ldd	r31, Y+2	; 0x02
    2716:	12 8e       	std	Z+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2718:	e9 81       	ldd	r30, Y+1	; 0x01
    271a:	fa 81       	ldd	r31, Y+2	; 0x02
    271c:	80 81       	ld	r24, Z
    271e:	91 81       	ldd	r25, Z+1	; 0x01
    2720:	e9 81       	ldd	r30, Y+1	; 0x01
    2722:	fa 81       	ldd	r31, Y+2	; 0x02
    2724:	95 83       	std	Z+5, r25	; 0x05
    2726:	84 83       	std	Z+4, r24	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    2728:	e9 81       	ldd	r30, Y+1	; 0x01
    272a:	fa 81       	ldd	r31, Y+2	; 0x02
    272c:	40 81       	ld	r20, Z
    272e:	51 81       	ldd	r21, Z+1	; 0x01
    2730:	e9 81       	ldd	r30, Y+1	; 0x01
    2732:	fa 81       	ldd	r31, Y+2	; 0x02
    2734:	83 8d       	ldd	r24, Z+27	; 0x1b
    2736:	88 2f       	mov	r24, r24
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	9c 01       	movw	r18, r24
    273c:	21 50       	subi	r18, 0x01	; 1
    273e:	30 40       	sbci	r19, 0x00	; 0
    2740:	e9 81       	ldd	r30, Y+1	; 0x01
    2742:	fa 81       	ldd	r31, Y+2	; 0x02
    2744:	84 8d       	ldd	r24, Z+28	; 0x1c
    2746:	88 2f       	mov	r24, r24
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	bc 01       	movw	r22, r24
    274c:	26 9f       	mul	r18, r22
    274e:	c0 01       	movw	r24, r0
    2750:	27 9f       	mul	r18, r23
    2752:	90 0d       	add	r25, r0
    2754:	36 9f       	mul	r19, r22
    2756:	90 0d       	add	r25, r0
    2758:	11 24       	eor	r1, r1
    275a:	84 0f       	add	r24, r20
    275c:	95 1f       	adc	r25, r21
    275e:	e9 81       	ldd	r30, Y+1	; 0x01
    2760:	fa 81       	ldd	r31, Y+2	; 0x02
    2762:	97 83       	std	Z+7, r25	; 0x07
    2764:	86 83       	std	Z+6, r24	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
    2766:	e9 81       	ldd	r30, Y+1	; 0x01
    2768:	fa 81       	ldd	r31, Y+2	; 0x02
    276a:	8f ef       	ldi	r24, 0xFF	; 255
    276c:	85 8f       	std	Z+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
    276e:	e9 81       	ldd	r30, Y+1	; 0x01
    2770:	fa 81       	ldd	r31, Y+2	; 0x02
    2772:	8f ef       	ldi	r24, 0xFF	; 255
    2774:	86 8f       	std	Z+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    2776:	8d 81       	ldd	r24, Y+5	; 0x05
    2778:	88 23       	and	r24, r24
    277a:	79 f4       	brne	.+30     	; 0x279a <xQueueGenericReset+0xe2>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    277c:	e9 81       	ldd	r30, Y+1	; 0x01
    277e:	fa 81       	ldd	r31, Y+2	; 0x02
    2780:	80 85       	ldd	r24, Z+8	; 0x08
    2782:	88 23       	and	r24, r24
    2784:	a1 f0       	breq	.+40     	; 0x27ae <xQueueGenericReset+0xf6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	9a 81       	ldd	r25, Y+2	; 0x02
    278a:	08 96       	adiw	r24, 0x08	; 8
    278c:	0e 94 74 22 	call	0x44e8	; 0x44e8 <xTaskRemoveFromEventList>
    2790:	88 23       	and	r24, r24
    2792:	69 f0       	breq	.+26     	; 0x27ae <xQueueGenericReset+0xf6>
				{
					queueYIELD_IF_USING_PREEMPTION();
    2794:	0e 94 47 12 	call	0x248e	; 0x248e <vPortYield>
    2798:	0a c0       	rjmp	.+20     	; 0x27ae <xQueueGenericReset+0xf6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    279a:	89 81       	ldd	r24, Y+1	; 0x01
    279c:	9a 81       	ldd	r25, Y+2	; 0x02
    279e:	08 96       	adiw	r24, 0x08	; 8
    27a0:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	9a 81       	ldd	r25, Y+2	; 0x02
    27a8:	41 96       	adiw	r24, 0x11	; 17
    27aa:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    27ae:	0f 90       	pop	r0
    27b0:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    27b2:	81 e0       	ldi	r24, 0x01	; 1
}
    27b4:	0f 90       	pop	r0
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	08 95       	ret

000027c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    27c4:	0f 93       	push	r16
    27c6:	1f 93       	push	r17
    27c8:	df 93       	push	r29
    27ca:	cf 93       	push	r28
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
    27d0:	29 97       	sbiw	r28, 0x09	; 9
    27d2:	0f b6       	in	r0, 0x3f	; 63
    27d4:	f8 94       	cli
    27d6:	de bf       	out	0x3e, r29	; 62
    27d8:	0f be       	out	0x3f, r0	; 63
    27da:	cd bf       	out	0x3d, r28	; 61
    27dc:	8f 83       	std	Y+7, r24	; 0x07
    27de:	68 87       	std	Y+8, r22	; 0x08
    27e0:	49 87       	std	Y+9, r20	; 0x09
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    27e2:	88 85       	ldd	r24, Y+8	; 0x08
    27e4:	88 23       	and	r24, r24
    27e6:	19 f4       	brne	.+6      	; 0x27ee <xQueueGenericCreate+0x2a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    27e8:	1c 82       	std	Y+4, r1	; 0x04
    27ea:	1b 82       	std	Y+3, r1	; 0x03
    27ec:	10 c0       	rjmp	.+32     	; 0x280e <xQueueGenericCreate+0x4a>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    27ee:	8f 81       	ldd	r24, Y+7	; 0x07
    27f0:	28 2f       	mov	r18, r24
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	88 85       	ldd	r24, Y+8	; 0x08
    27f6:	88 2f       	mov	r24, r24
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	ac 01       	movw	r20, r24
    27fc:	24 9f       	mul	r18, r20
    27fe:	c0 01       	movw	r24, r0
    2800:	25 9f       	mul	r18, r21
    2802:	90 0d       	add	r25, r0
    2804:	34 9f       	mul	r19, r20
    2806:	90 0d       	add	r25, r0
    2808:	11 24       	eor	r1, r1
    280a:	9c 83       	std	Y+4, r25	; 0x04
    280c:	8b 83       	std	Y+3, r24	; 0x03
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    280e:	8b 81       	ldd	r24, Y+3	; 0x03
    2810:	9c 81       	ldd	r25, Y+4	; 0x04
    2812:	4f 96       	adiw	r24, 0x1f	; 31
    2814:	0e 94 bc 0c 	call	0x1978	; 0x1978 <pvPortMalloc>
    2818:	9e 83       	std	Y+6, r25	; 0x06
    281a:	8d 83       	std	Y+5, r24	; 0x05

		if( pxNewQueue != NULL )
    281c:	8d 81       	ldd	r24, Y+5	; 0x05
    281e:	9e 81       	ldd	r25, Y+6	; 0x06
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	81 f0       	breq	.+32     	; 0x2844 <xQueueGenericCreate+0x80>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    2824:	8d 81       	ldd	r24, Y+5	; 0x05
    2826:	9e 81       	ldd	r25, Y+6	; 0x06
    2828:	4f 96       	adiw	r24, 0x1f	; 31
    282a:	9a 83       	std	Y+2, r25	; 0x02
    282c:	89 83       	std	Y+1, r24	; 0x01
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    282e:	29 81       	ldd	r18, Y+1	; 0x01
    2830:	3a 81       	ldd	r19, Y+2	; 0x02
    2832:	ed 81       	ldd	r30, Y+5	; 0x05
    2834:	fe 81       	ldd	r31, Y+6	; 0x06
    2836:	8f 81       	ldd	r24, Y+7	; 0x07
    2838:	68 85       	ldd	r22, Y+8	; 0x08
    283a:	a9 01       	movw	r20, r18
    283c:	29 85       	ldd	r18, Y+9	; 0x09
    283e:	8f 01       	movw	r16, r30
    2840:	0e 94 2f 14 	call	0x285e	; 0x285e <prvInitialiseNewQueue>
		}

		return pxNewQueue;
    2844:	8d 81       	ldd	r24, Y+5	; 0x05
    2846:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    2848:	29 96       	adiw	r28, 0x09	; 9
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	f8 94       	cli
    284e:	de bf       	out	0x3e, r29	; 62
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	cd bf       	out	0x3d, r28	; 61
    2854:	cf 91       	pop	r28
    2856:	df 91       	pop	r29
    2858:	1f 91       	pop	r17
    285a:	0f 91       	pop	r16
    285c:	08 95       	ret

0000285e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    285e:	0f 93       	push	r16
    2860:	1f 93       	push	r17
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
    286a:	27 97       	sbiw	r28, 0x07	; 7
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	89 83       	std	Y+1, r24	; 0x01
    2878:	6a 83       	std	Y+2, r22	; 0x02
    287a:	5c 83       	std	Y+4, r21	; 0x04
    287c:	4b 83       	std	Y+3, r20	; 0x03
    287e:	2d 83       	std	Y+5, r18	; 0x05
    2880:	1f 83       	std	Y+7, r17	; 0x07
    2882:	0e 83       	std	Y+6, r16	; 0x06
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    2884:	8a 81       	ldd	r24, Y+2	; 0x02
    2886:	88 23       	and	r24, r24
    2888:	39 f4       	brne	.+14     	; 0x2898 <prvInitialiseNewQueue+0x3a>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    288a:	8e 81       	ldd	r24, Y+6	; 0x06
    288c:	9f 81       	ldd	r25, Y+7	; 0x07
    288e:	ee 81       	ldd	r30, Y+6	; 0x06
    2890:	ff 81       	ldd	r31, Y+7	; 0x07
    2892:	91 83       	std	Z+1, r25	; 0x01
    2894:	80 83       	st	Z, r24
    2896:	06 c0       	rjmp	.+12     	; 0x28a4 <prvInitialiseNewQueue+0x46>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	9c 81       	ldd	r25, Y+4	; 0x04
    289c:	ee 81       	ldd	r30, Y+6	; 0x06
    289e:	ff 81       	ldd	r31, Y+7	; 0x07
    28a0:	91 83       	std	Z+1, r25	; 0x01
    28a2:	80 83       	st	Z, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    28a4:	ee 81       	ldd	r30, Y+6	; 0x06
    28a6:	ff 81       	ldd	r31, Y+7	; 0x07
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	83 8f       	std	Z+27, r24	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
    28ac:	ee 81       	ldd	r30, Y+6	; 0x06
    28ae:	ff 81       	ldd	r31, Y+7	; 0x07
    28b0:	8a 81       	ldd	r24, Y+2	; 0x02
    28b2:	84 8f       	std	Z+28, r24	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    28b4:	8e 81       	ldd	r24, Y+6	; 0x06
    28b6:	9f 81       	ldd	r25, Y+7	; 0x07
    28b8:	61 e0       	ldi	r22, 0x01	; 1
    28ba:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    28be:	27 96       	adiw	r28, 0x07	; 7
    28c0:	0f b6       	in	r0, 0x3f	; 63
    28c2:	f8 94       	cli
    28c4:	de bf       	out	0x3e, r29	; 62
    28c6:	0f be       	out	0x3f, r0	; 63
    28c8:	cd bf       	out	0x3d, r28	; 61
    28ca:	cf 91       	pop	r28
    28cc:	df 91       	pop	r29
    28ce:	1f 91       	pop	r17
    28d0:	0f 91       	pop	r16
    28d2:	08 95       	ret

000028d4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	00 d0       	rcall	.+0      	; 0x28da <prvInitialiseMutex+0x6>
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    28de:	9a 83       	std	Y+2, r25	; 0x02
    28e0:	89 83       	std	Y+1, r24	; 0x01
		if( pxNewQueue != NULL )
    28e2:	89 81       	ldd	r24, Y+1	; 0x01
    28e4:	9a 81       	ldd	r25, Y+2	; 0x02
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	a1 f0       	breq	.+40     	; 0x2912 <prvInitialiseMutex+0x3e>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    28ea:	e9 81       	ldd	r30, Y+1	; 0x01
    28ec:	fa 81       	ldd	r31, Y+2	; 0x02
    28ee:	13 82       	std	Z+3, r1	; 0x03
    28f0:	12 82       	std	Z+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    28f2:	e9 81       	ldd	r30, Y+1	; 0x01
    28f4:	fa 81       	ldd	r31, Y+2	; 0x02
    28f6:	11 82       	std	Z+1, r1	; 0x01
    28f8:	10 82       	st	Z, r1

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    28fa:	e9 81       	ldd	r30, Y+1	; 0x01
    28fc:	fa 81       	ldd	r31, Y+2	; 0x02
    28fe:	16 82       	std	Z+6, r1	; 0x06

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	9a 81       	ldd	r25, Y+2	; 0x02
    2904:	60 e0       	ldi	r22, 0x00	; 0
    2906:	70 e0       	ldi	r23, 0x00	; 0
    2908:	40 e0       	ldi	r20, 0x00	; 0
    290a:	50 e0       	ldi	r21, 0x00	; 0
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	0e 94 ae 14 	call	0x295c	; 0x295c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	cf 91       	pop	r28
    2918:	df 91       	pop	r29
    291a:	08 95       	ret

0000291c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    291c:	df 93       	push	r29
    291e:	cf 93       	push	r28
    2920:	00 d0       	rcall	.+0      	; 0x2922 <xQueueCreateMutex+0x6>
    2922:	00 d0       	rcall	.+0      	; 0x2924 <xQueueCreateMutex+0x8>
    2924:	0f 92       	push	r0
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	8d 83       	std	Y+5, r24	; 0x05
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	8a 83       	std	Y+2, r24	; 0x02
    2930:	19 82       	std	Y+1, r1	; 0x01

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    2932:	8a 81       	ldd	r24, Y+2	; 0x02
    2934:	69 81       	ldd	r22, Y+1	; 0x01
    2936:	4d 81       	ldd	r20, Y+5	; 0x05
    2938:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <xQueueGenericCreate>
    293c:	9c 83       	std	Y+4, r25	; 0x04
    293e:	8b 83       	std	Y+3, r24	; 0x03
		prvInitialiseMutex( pxNewQueue );
    2940:	8b 81       	ldd	r24, Y+3	; 0x03
    2942:	9c 81       	ldd	r25, Y+4	; 0x04
    2944:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <prvInitialiseMutex>

		return pxNewQueue;
    2948:	8b 81       	ldd	r24, Y+3	; 0x03
    294a:	9c 81       	ldd	r25, Y+4	; 0x04
	}
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	0f 90       	pop	r0
    2954:	0f 90       	pop	r0
    2956:	cf 91       	pop	r28
    2958:	df 91       	pop	r29
    295a:	08 95       	ret

0000295c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    295c:	df 93       	push	r29
    295e:	cf 93       	push	r28
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
    2964:	2f 97       	sbiw	r28, 0x0f	; 15
    2966:	0f b6       	in	r0, 0x3f	; 63
    2968:	f8 94       	cli
    296a:	de bf       	out	0x3e, r29	; 62
    296c:	0f be       	out	0x3f, r0	; 63
    296e:	cd bf       	out	0x3d, r28	; 61
    2970:	99 87       	std	Y+9, r25	; 0x09
    2972:	88 87       	std	Y+8, r24	; 0x08
    2974:	7b 87       	std	Y+11, r23	; 0x0b
    2976:	6a 87       	std	Y+10, r22	; 0x0a
    2978:	5d 87       	std	Y+13, r21	; 0x0d
    297a:	4c 87       	std	Y+12, r20	; 0x0c
    297c:	2e 87       	std	Y+14, r18	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    297e:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2980:	88 85       	ldd	r24, Y+8	; 0x08
    2982:	99 85       	ldd	r25, Y+9	; 0x09
    2984:	9a 83       	std	Y+2, r25	; 0x02
    2986:	89 83       	std	Y+1, r24	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2988:	0f b6       	in	r0, 0x3f	; 63
    298a:	f8 94       	cli
    298c:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    298e:	e9 81       	ldd	r30, Y+1	; 0x01
    2990:	fa 81       	ldd	r31, Y+2	; 0x02
    2992:	92 8d       	ldd	r25, Z+26	; 0x1a
    2994:	e9 81       	ldd	r30, Y+1	; 0x01
    2996:	fa 81       	ldd	r31, Y+2	; 0x02
    2998:	83 8d       	ldd	r24, Z+27	; 0x1b
    299a:	98 17       	cp	r25, r24
    299c:	18 f0       	brcs	.+6      	; 0x29a4 <xQueueGenericSend+0x48>
    299e:	8e 85       	ldd	r24, Y+14	; 0x0e
    29a0:	82 30       	cpi	r24, 0x02	; 2
    29a2:	11 f5       	brne	.+68     	; 0x29e8 <xQueueGenericSend+0x8c>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
    29a6:	9a 81       	ldd	r25, Y+2	; 0x02
    29a8:	2a 85       	ldd	r18, Y+10	; 0x0a
    29aa:	3b 85       	ldd	r19, Y+11	; 0x0b
    29ac:	b9 01       	movw	r22, r18
    29ae:	4e 85       	ldd	r20, Y+14	; 0x0e
    29b0:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <prvCopyDataToQueue>
    29b4:	8b 83       	std	Y+3, r24	; 0x03
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    29b6:	e9 81       	ldd	r30, Y+1	; 0x01
    29b8:	fa 81       	ldd	r31, Y+2	; 0x02
    29ba:	81 89       	ldd	r24, Z+17	; 0x11
    29bc:	88 23       	and	r24, r24
    29be:	51 f0       	breq	.+20     	; 0x29d4 <xQueueGenericSend+0x78>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	9a 81       	ldd	r25, Y+2	; 0x02
    29c4:	41 96       	adiw	r24, 0x11	; 17
    29c6:	0e 94 74 22 	call	0x44e8	; 0x44e8 <xTaskRemoveFromEventList>
    29ca:	88 23       	and	r24, r24
    29cc:	41 f0       	breq	.+16     	; 0x29de <xQueueGenericSend+0x82>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    29ce:	0e 94 47 12 	call	0x248e	; 0x248e <vPortYield>
    29d2:	05 c0       	rjmp	.+10     	; 0x29de <xQueueGenericSend+0x82>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    29d4:	8b 81       	ldd	r24, Y+3	; 0x03
    29d6:	88 23       	and	r24, r24
    29d8:	11 f0       	breq	.+4      	; 0x29de <xQueueGenericSend+0x82>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    29da:	0e 94 47 12 	call	0x248e	; 0x248e <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    29de:	0f 90       	pop	r0
    29e0:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	8f 87       	std	Y+15, r24	; 0x0f
    29e6:	5c c0       	rjmp	.+184    	; 0x2aa0 <xQueueGenericSend+0x144>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    29e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    29ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    29ec:	00 97       	sbiw	r24, 0x00	; 0
    29ee:	21 f4       	brne	.+8      	; 0x29f8 <xQueueGenericSend+0x9c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    29f0:	0f 90       	pop	r0
    29f2:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    29f4:	1f 86       	std	Y+15, r1	; 0x0f
    29f6:	54 c0       	rjmp	.+168    	; 0x2aa0 <xQueueGenericSend+0x144>
				}
				else if( xEntryTimeSet == pdFALSE )
    29f8:	8c 81       	ldd	r24, Y+4	; 0x04
    29fa:	88 23       	and	r24, r24
    29fc:	31 f4       	brne	.+12     	; 0x2a0a <xQueueGenericSend+0xae>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    29fe:	ce 01       	movw	r24, r28
    2a00:	05 96       	adiw	r24, 0x05	; 5
    2a02:	0e 94 44 23 	call	0x4688	; 0x4688 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    2a0a:	0f 90       	pop	r0
    2a0c:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2a0e:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	f8 94       	cli
    2a16:	0f 92       	push	r0
    2a18:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a1c:	85 8d       	ldd	r24, Z+29	; 0x1d
    2a1e:	8f 3f       	cpi	r24, 0xFF	; 255
    2a20:	19 f4       	brne	.+6      	; 0x2a28 <xQueueGenericSend+0xcc>
    2a22:	e9 81       	ldd	r30, Y+1	; 0x01
    2a24:	fa 81       	ldd	r31, Y+2	; 0x02
    2a26:	15 8e       	std	Z+29, r1	; 0x1d
    2a28:	e9 81       	ldd	r30, Y+1	; 0x01
    2a2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a2c:	86 8d       	ldd	r24, Z+30	; 0x1e
    2a2e:	8f 3f       	cpi	r24, 0xFF	; 255
    2a30:	19 f4       	brne	.+6      	; 0x2a38 <xQueueGenericSend+0xdc>
    2a32:	e9 81       	ldd	r30, Y+1	; 0x01
    2a34:	fa 81       	ldd	r31, Y+2	; 0x02
    2a36:	16 8e       	std	Z+30, r1	; 0x1e
    2a38:	0f 90       	pop	r0
    2a3a:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2a3c:	ce 01       	movw	r24, r28
    2a3e:	05 96       	adiw	r24, 0x05	; 5
    2a40:	9e 01       	movw	r18, r28
    2a42:	24 5f       	subi	r18, 0xF4	; 244
    2a44:	3f 4f       	sbci	r19, 0xFF	; 255
    2a46:	b9 01       	movw	r22, r18
    2a48:	0e 94 5d 23 	call	0x46ba	; 0x46ba <xTaskCheckForTimeOut>
    2a4c:	88 23       	and	r24, r24
    2a4e:	09 f5       	brne	.+66     	; 0x2a92 <xQueueGenericSend+0x136>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	9a 81       	ldd	r25, Y+2	; 0x02
    2a54:	0e 94 6d 19 	call	0x32da	; 0x32da <prvIsQueueFull>
    2a58:	88 23       	and	r24, r24
    2a5a:	a1 f0       	breq	.+40     	; 0x2a84 <xQueueGenericSend+0x128>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2a5c:	89 81       	ldd	r24, Y+1	; 0x01
    2a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a60:	08 96       	adiw	r24, 0x08	; 8
    2a62:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a64:	3d 85       	ldd	r19, Y+13	; 0x0d
    2a66:	b9 01       	movw	r22, r18
    2a68:	0e 94 22 22 	call	0x4444	; 0x4444 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a70:	0e 94 e5 18 	call	0x31ca	; 0x31ca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2a74:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <xTaskResumeAll>
    2a78:	88 23       	and	r24, r24
    2a7a:	09 f0       	breq	.+2      	; 0x2a7e <xQueueGenericSend+0x122>
    2a7c:	85 cf       	rjmp	.-246    	; 0x2988 <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
    2a7e:	0e 94 47 12 	call	0x248e	; 0x248e <vPortYield>
    2a82:	82 cf       	rjmp	.-252    	; 0x2988 <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	9a 81       	ldd	r25, Y+2	; 0x02
    2a88:	0e 94 e5 18 	call	0x31ca	; 0x31ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2a8c:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <xTaskResumeAll>
    2a90:	7b cf       	rjmp	.-266    	; 0x2988 <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	9a 81       	ldd	r25, Y+2	; 0x02
    2a96:	0e 94 e5 18 	call	0x31ca	; 0x31ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2a9a:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2a9e:	1f 86       	std	Y+15, r1	; 0x0f
    2aa0:	8f 85       	ldd	r24, Y+15	; 0x0f
		}
	}
}
    2aa2:	2f 96       	adiw	r28, 0x0f	; 15
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	f8 94       	cli
    2aa8:	de bf       	out	0x3e, r29	; 62
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	cd bf       	out	0x3d, r28	; 61
    2aae:	cf 91       	pop	r28
    2ab0:	df 91       	pop	r29
    2ab2:	08 95       	ret

00002ab4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    2ab4:	df 93       	push	r29
    2ab6:	cf 93       	push	r28
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
    2abc:	2c 97       	sbiw	r28, 0x0c	; 12
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	f8 94       	cli
    2ac2:	de bf       	out	0x3e, r29	; 62
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	cd bf       	out	0x3d, r28	; 61
    2ac8:	9f 83       	std	Y+7, r25	; 0x07
    2aca:	8e 83       	std	Y+6, r24	; 0x06
    2acc:	79 87       	std	Y+9, r23	; 0x09
    2ace:	68 87       	std	Y+8, r22	; 0x08
    2ad0:	5b 87       	std	Y+11, r21	; 0x0b
    2ad2:	4a 87       	std	Y+10, r20	; 0x0a
    2ad4:	2c 87       	std	Y+12, r18	; 0x0c
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2ad6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad8:	9f 81       	ldd	r25, Y+7	; 0x07
    2ada:	9b 83       	std	Y+3, r25	; 0x03
    2adc:	8a 83       	std	Y+2, r24	; 0x02
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2ade:	1c 82       	std	Y+4, r1	; 0x04
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2ae0:	ea 81       	ldd	r30, Y+2	; 0x02
    2ae2:	fb 81       	ldd	r31, Y+3	; 0x03
    2ae4:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ae6:	ea 81       	ldd	r30, Y+2	; 0x02
    2ae8:	fb 81       	ldd	r31, Y+3	; 0x03
    2aea:	83 8d       	ldd	r24, Z+27	; 0x1b
    2aec:	98 17       	cp	r25, r24
    2aee:	18 f0       	brcs	.+6      	; 0x2af6 <xQueueGenericSendFromISR+0x42>
    2af0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2af2:	82 30       	cpi	r24, 0x02	; 2
    2af4:	61 f5       	brne	.+88     	; 0x2b4e <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    2af6:	ea 81       	ldd	r30, Y+2	; 0x02
    2af8:	fb 81       	ldd	r31, Y+3	; 0x03
    2afa:	86 8d       	ldd	r24, Z+30	; 0x1e
    2afc:	89 83       	std	Y+1, r24	; 0x01
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2afe:	8a 81       	ldd	r24, Y+2	; 0x02
    2b00:	9b 81       	ldd	r25, Y+3	; 0x03
    2b02:	28 85       	ldd	r18, Y+8	; 0x08
    2b04:	39 85       	ldd	r19, Y+9	; 0x09
    2b06:	b9 01       	movw	r22, r18
    2b08:	4c 85       	ldd	r20, Y+12	; 0x0c
    2b0a:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	8f 3f       	cpi	r24, 0xFF	; 255
    2b12:	a9 f4       	brne	.+42     	; 0x2b3e <xQueueGenericSendFromISR+0x8a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2b14:	ea 81       	ldd	r30, Y+2	; 0x02
    2b16:	fb 81       	ldd	r31, Y+3	; 0x03
    2b18:	81 89       	ldd	r24, Z+17	; 0x11
    2b1a:	88 23       	and	r24, r24
    2b1c:	a9 f0       	breq	.+42     	; 0x2b48 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b20:	9b 81       	ldd	r25, Y+3	; 0x03
    2b22:	41 96       	adiw	r24, 0x11	; 17
    2b24:	0e 94 74 22 	call	0x44e8	; 0x44e8 <xTaskRemoveFromEventList>
    2b28:	88 23       	and	r24, r24
    2b2a:	71 f0       	breq	.+28     	; 0x2b48 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2b2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b30:	00 97       	sbiw	r24, 0x00	; 0
    2b32:	51 f0       	breq	.+20     	; 0x2b48 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2b34:	ea 85       	ldd	r30, Y+10	; 0x0a
    2b36:	fb 85       	ldd	r31, Y+11	; 0x0b
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	80 83       	st	Z, r24
    2b3c:	05 c0       	rjmp	.+10     	; 0x2b48 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
    2b40:	8f 5f       	subi	r24, 0xFF	; 255
    2b42:	ea 81       	ldd	r30, Y+2	; 0x02
    2b44:	fb 81       	ldd	r31, Y+3	; 0x03
    2b46:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	8d 83       	std	Y+5, r24	; 0x05
    2b4c:	01 c0       	rjmp	.+2      	; 0x2b50 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2b4e:	1d 82       	std	Y+5, r1	; 0x05
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2b50:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2b52:	2c 96       	adiw	r28, 0x0c	; 12
    2b54:	0f b6       	in	r0, 0x3f	; 63
    2b56:	f8 94       	cli
    2b58:	de bf       	out	0x3e, r29	; 62
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	cd bf       	out	0x3d, r28	; 61
    2b5e:	cf 91       	pop	r28
    2b60:	df 91       	pop	r29
    2b62:	08 95       	ret

00002b64 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    2b64:	df 93       	push	r29
    2b66:	cf 93       	push	r28
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
    2b6c:	2a 97       	sbiw	r28, 0x0a	; 10
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	f8 94       	cli
    2b72:	de bf       	out	0x3e, r29	; 62
    2b74:	0f be       	out	0x3f, r0	; 63
    2b76:	cd bf       	out	0x3d, r28	; 61
    2b78:	98 87       	std	Y+8, r25	; 0x08
    2b7a:	8f 83       	std	Y+7, r24	; 0x07
    2b7c:	7a 87       	std	Y+10, r23	; 0x0a
    2b7e:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2b80:	8f 81       	ldd	r24, Y+7	; 0x07
    2b82:	98 85       	ldd	r25, Y+8	; 0x08
    2b84:	9c 83       	std	Y+4, r25	; 0x04
    2b86:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2b88:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2b8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b8e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b90:	8a 83       	std	Y+2, r24	; 0x02

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    2b92:	eb 81       	ldd	r30, Y+3	; 0x03
    2b94:	fc 81       	ldd	r31, Y+4	; 0x04
    2b96:	93 8d       	ldd	r25, Z+27	; 0x1b
    2b98:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9a:	89 17       	cp	r24, r25
    2b9c:	48 f5       	brcc	.+82     	; 0x2bf0 <xQueueGiveFromISR+0x8c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    2b9e:	eb 81       	ldd	r30, Y+3	; 0x03
    2ba0:	fc 81       	ldd	r31, Y+4	; 0x04
    2ba2:	86 8d       	ldd	r24, Z+30	; 0x1e
    2ba4:	89 83       	std	Y+1, r24	; 0x01
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    2ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba8:	8f 5f       	subi	r24, 0xFF	; 255
    2baa:	eb 81       	ldd	r30, Y+3	; 0x03
    2bac:	fc 81       	ldd	r31, Y+4	; 0x04
    2bae:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	8f 3f       	cpi	r24, 0xFF	; 255
    2bb4:	a9 f4       	brne	.+42     	; 0x2be0 <xQueueGiveFromISR+0x7c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2bb6:	eb 81       	ldd	r30, Y+3	; 0x03
    2bb8:	fc 81       	ldd	r31, Y+4	; 0x04
    2bba:	81 89       	ldd	r24, Z+17	; 0x11
    2bbc:	88 23       	and	r24, r24
    2bbe:	a9 f0       	breq	.+42     	; 0x2bea <xQueueGiveFromISR+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc4:	41 96       	adiw	r24, 0x11	; 17
    2bc6:	0e 94 74 22 	call	0x44e8	; 0x44e8 <xTaskRemoveFromEventList>
    2bca:	88 23       	and	r24, r24
    2bcc:	71 f0       	breq	.+28     	; 0x2bea <xQueueGiveFromISR+0x86>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2bce:	89 85       	ldd	r24, Y+9	; 0x09
    2bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd2:	00 97       	sbiw	r24, 0x00	; 0
    2bd4:	51 f0       	breq	.+20     	; 0x2bea <xQueueGiveFromISR+0x86>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2bd6:	e9 85       	ldd	r30, Y+9	; 0x09
    2bd8:	fa 85       	ldd	r31, Y+10	; 0x0a
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	80 83       	st	Z, r24
    2bde:	05 c0       	rjmp	.+10     	; 0x2bea <xQueueGiveFromISR+0x86>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	8f 5f       	subi	r24, 0xFF	; 255
    2be4:	eb 81       	ldd	r30, Y+3	; 0x03
    2be6:	fc 81       	ldd	r31, Y+4	; 0x04
    2be8:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	8e 83       	std	Y+6, r24	; 0x06
    2bee:	01 c0       	rjmp	.+2      	; 0x2bf2 <xQueueGiveFromISR+0x8e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2bf0:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2bf2:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2bf4:	2a 96       	adiw	r28, 0x0a	; 10
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	de bf       	out	0x3e, r29	; 62
    2bfc:	0f be       	out	0x3f, r0	; 63
    2bfe:	cd bf       	out	0x3d, r28	; 61
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	08 95       	ret

00002c06 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    2c06:	df 93       	push	r29
    2c08:	cf 93       	push	r28
    2c0a:	cd b7       	in	r28, 0x3d	; 61
    2c0c:	de b7       	in	r29, 0x3e	; 62
    2c0e:	61 97       	sbiw	r28, 0x11	; 17
    2c10:	0f b6       	in	r0, 0x3f	; 63
    2c12:	f8 94       	cli
    2c14:	de bf       	out	0x3e, r29	; 62
    2c16:	0f be       	out	0x3f, r0	; 63
    2c18:	cd bf       	out	0x3d, r28	; 61
    2c1a:	9b 87       	std	Y+11, r25	; 0x0b
    2c1c:	8a 87       	std	Y+10, r24	; 0x0a
    2c1e:	7d 87       	std	Y+13, r23	; 0x0d
    2c20:	6c 87       	std	Y+12, r22	; 0x0c
    2c22:	5f 87       	std	Y+15, r21	; 0x0f
    2c24:	4e 87       	std	Y+14, r20	; 0x0e
    2c26:	28 8b       	std	Y+16, r18	; 0x10
BaseType_t xEntryTimeSet = pdFALSE;
    2c28:	1e 82       	std	Y+6, r1	; 0x06
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2c2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c2e:	9b 83       	std	Y+3, r25	; 0x03
    2c30:	8a 83       	std	Y+2, r24	; 0x02
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	f8 94       	cli
    2c36:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2c38:	ea 81       	ldd	r30, Y+2	; 0x02
    2c3a:	fb 81       	ldd	r31, Y+3	; 0x03
    2c3c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c3e:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	88 23       	and	r24, r24
    2c44:	09 f4       	brne	.+2      	; 0x2c48 <xQueueGenericReceive+0x42>
    2c46:	49 c0       	rjmp	.+146    	; 0x2cda <xQueueGenericReceive+0xd4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    2c48:	ea 81       	ldd	r30, Y+2	; 0x02
    2c4a:	fb 81       	ldd	r31, Y+3	; 0x03
    2c4c:	86 81       	ldd	r24, Z+6	; 0x06
    2c4e:	97 81       	ldd	r25, Z+7	; 0x07
    2c50:	9d 83       	std	Y+5, r25	; 0x05
    2c52:	8c 83       	std	Y+4, r24	; 0x04

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2c54:	8a 81       	ldd	r24, Y+2	; 0x02
    2c56:	9b 81       	ldd	r25, Y+3	; 0x03
    2c58:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c5a:	3d 85       	ldd	r19, Y+13	; 0x0d
    2c5c:	b9 01       	movw	r22, r18
    2c5e:	0e 94 9e 18 	call	0x313c	; 0x313c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2c62:	88 89       	ldd	r24, Y+16	; 0x10
    2c64:	88 23       	and	r24, r24
    2c66:	01 f5       	brne	.+64     	; 0x2ca8 <xQueueGenericReceive+0xa2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
    2c6a:	81 50       	subi	r24, 0x01	; 1
    2c6c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c6e:	fb 81       	ldd	r31, Y+3	; 0x03
    2c70:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2c72:	ea 81       	ldd	r30, Y+2	; 0x02
    2c74:	fb 81       	ldd	r31, Y+3	; 0x03
    2c76:	80 81       	ld	r24, Z
    2c78:	91 81       	ldd	r25, Z+1	; 0x01
    2c7a:	00 97       	sbiw	r24, 0x00	; 0
    2c7c:	31 f4       	brne	.+12     	; 0x2c8a <xQueueGenericReceive+0x84>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    2c7e:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <pvTaskIncrementMutexHeldCount>
    2c82:	ea 81       	ldd	r30, Y+2	; 0x02
    2c84:	fb 81       	ldd	r31, Y+3	; 0x03
    2c86:	93 83       	std	Z+3, r25	; 0x03
    2c88:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2c8a:	ea 81       	ldd	r30, Y+2	; 0x02
    2c8c:	fb 81       	ldd	r31, Y+3	; 0x03
    2c8e:	80 85       	ldd	r24, Z+8	; 0x08
    2c90:	88 23       	and	r24, r24
    2c92:	f1 f0       	breq	.+60     	; 0x2cd0 <xQueueGenericReceive+0xca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2c94:	8a 81       	ldd	r24, Y+2	; 0x02
    2c96:	9b 81       	ldd	r25, Y+3	; 0x03
    2c98:	08 96       	adiw	r24, 0x08	; 8
    2c9a:	0e 94 74 22 	call	0x44e8	; 0x44e8 <xTaskRemoveFromEventList>
    2c9e:	88 23       	and	r24, r24
    2ca0:	b9 f0       	breq	.+46     	; 0x2cd0 <xQueueGenericReceive+0xca>
						{
							queueYIELD_IF_USING_PREEMPTION();
    2ca2:	0e 94 47 12 	call	0x248e	; 0x248e <vPortYield>
    2ca6:	14 c0       	rjmp	.+40     	; 0x2cd0 <xQueueGenericReceive+0xca>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    2ca8:	ea 81       	ldd	r30, Y+2	; 0x02
    2caa:	fb 81       	ldd	r31, Y+3	; 0x03
    2cac:	8c 81       	ldd	r24, Y+4	; 0x04
    2cae:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb0:	97 83       	std	Z+7, r25	; 0x07
    2cb2:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2cb4:	ea 81       	ldd	r30, Y+2	; 0x02
    2cb6:	fb 81       	ldd	r31, Y+3	; 0x03
    2cb8:	81 89       	ldd	r24, Z+17	; 0x11
    2cba:	88 23       	and	r24, r24
    2cbc:	49 f0       	breq	.+18     	; 0x2cd0 <xQueueGenericReceive+0xca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc2:	41 96       	adiw	r24, 0x11	; 17
    2cc4:	0e 94 74 22 	call	0x44e8	; 0x44e8 <xTaskRemoveFromEventList>
    2cc8:	88 23       	and	r24, r24
    2cca:	11 f0       	breq	.+4      	; 0x2cd0 <xQueueGenericReceive+0xca>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    2ccc:	0e 94 47 12 	call	0x248e	; 0x248e <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    2cd0:	0f 90       	pop	r0
    2cd2:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	89 8b       	std	Y+17, r24	; 0x11
    2cd8:	74 c0       	rjmp	.+232    	; 0x2dc2 <xQueueGenericReceive+0x1bc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    2cda:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cdc:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cde:	00 97       	sbiw	r24, 0x00	; 0
    2ce0:	21 f4       	brne	.+8      	; 0x2cea <xQueueGenericReceive+0xe4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2ce2:	0f 90       	pop	r0
    2ce4:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2ce6:	19 8a       	std	Y+17, r1	; 0x11
    2ce8:	6c c0       	rjmp	.+216    	; 0x2dc2 <xQueueGenericReceive+0x1bc>
				}
				else if( xEntryTimeSet == pdFALSE )
    2cea:	8e 81       	ldd	r24, Y+6	; 0x06
    2cec:	88 23       	and	r24, r24
    2cee:	31 f4       	brne	.+12     	; 0x2cfc <xQueueGenericReceive+0xf6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2cf0:	ce 01       	movw	r24, r28
    2cf2:	07 96       	adiw	r24, 0x07	; 7
    2cf4:	0e 94 44 23 	call	0x4688	; 0x4688 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	8e 83       	std	Y+6, r24	; 0x06
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    2cfc:	0f 90       	pop	r0
    2cfe:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2d00:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2d04:	0f b6       	in	r0, 0x3f	; 63
    2d06:	f8 94       	cli
    2d08:	0f 92       	push	r0
    2d0a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d0c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d0e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2d10:	8f 3f       	cpi	r24, 0xFF	; 255
    2d12:	19 f4       	brne	.+6      	; 0x2d1a <xQueueGenericReceive+0x114>
    2d14:	ea 81       	ldd	r30, Y+2	; 0x02
    2d16:	fb 81       	ldd	r31, Y+3	; 0x03
    2d18:	15 8e       	std	Z+29, r1	; 0x1d
    2d1a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d1c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d1e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2d20:	8f 3f       	cpi	r24, 0xFF	; 255
    2d22:	19 f4       	brne	.+6      	; 0x2d2a <xQueueGenericReceive+0x124>
    2d24:	ea 81       	ldd	r30, Y+2	; 0x02
    2d26:	fb 81       	ldd	r31, Y+3	; 0x03
    2d28:	16 8e       	std	Z+30, r1	; 0x1e
    2d2a:	0f 90       	pop	r0
    2d2c:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2d2e:	ce 01       	movw	r24, r28
    2d30:	07 96       	adiw	r24, 0x07	; 7
    2d32:	9e 01       	movw	r18, r28
    2d34:	22 5f       	subi	r18, 0xF2	; 242
    2d36:	3f 4f       	sbci	r19, 0xFF	; 255
    2d38:	b9 01       	movw	r22, r18
    2d3a:	0e 94 5d 23 	call	0x46ba	; 0x46ba <xTaskCheckForTimeOut>
    2d3e:	88 23       	and	r24, r24
    2d40:	91 f5       	brne	.+100    	; 0x2da6 <xQueueGenericReceive+0x1a0>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2d42:	8a 81       	ldd	r24, Y+2	; 0x02
    2d44:	9b 81       	ldd	r25, Y+3	; 0x03
    2d46:	0e 94 38 19 	call	0x3270	; 0x3270 <prvIsQueueEmpty>
    2d4a:	88 23       	and	r24, r24
    2d4c:	29 f1       	breq	.+74     	; 0x2d98 <xQueueGenericReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2d4e:	ea 81       	ldd	r30, Y+2	; 0x02
    2d50:	fb 81       	ldd	r31, Y+3	; 0x03
    2d52:	80 81       	ld	r24, Z
    2d54:	91 81       	ldd	r25, Z+1	; 0x01
    2d56:	00 97       	sbiw	r24, 0x00	; 0
    2d58:	59 f4       	brne	.+22     	; 0x2d70 <xQueueGenericReceive+0x16a>
					{
						taskENTER_CRITICAL();
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	f8 94       	cli
    2d5e:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2d60:	ea 81       	ldd	r30, Y+2	; 0x02
    2d62:	fb 81       	ldd	r31, Y+3	; 0x03
    2d64:	82 81       	ldd	r24, Z+2	; 0x02
    2d66:	93 81       	ldd	r25, Z+3	; 0x03
    2d68:	0e 94 b7 24 	call	0x496e	; 0x496e <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    2d6c:	0f 90       	pop	r0
    2d6e:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2d70:	8a 81       	ldd	r24, Y+2	; 0x02
    2d72:	9b 81       	ldd	r25, Y+3	; 0x03
    2d74:	41 96       	adiw	r24, 0x11	; 17
    2d76:	2e 85       	ldd	r18, Y+14	; 0x0e
    2d78:	3f 85       	ldd	r19, Y+15	; 0x0f
    2d7a:	b9 01       	movw	r22, r18
    2d7c:	0e 94 22 22 	call	0x4444	; 0x4444 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2d80:	8a 81       	ldd	r24, Y+2	; 0x02
    2d82:	9b 81       	ldd	r25, Y+3	; 0x03
    2d84:	0e 94 e5 18 	call	0x31ca	; 0x31ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2d88:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <xTaskResumeAll>
    2d8c:	88 23       	and	r24, r24
    2d8e:	09 f0       	breq	.+2      	; 0x2d92 <xQueueGenericReceive+0x18c>
    2d90:	50 cf       	rjmp	.-352    	; 0x2c32 <xQueueGenericReceive+0x2c>
				{
					portYIELD_WITHIN_API();
    2d92:	0e 94 47 12 	call	0x248e	; 0x248e <vPortYield>
    2d96:	4d cf       	rjmp	.-358    	; 0x2c32 <xQueueGenericReceive+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2d98:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9c:	0e 94 e5 18 	call	0x31ca	; 0x31ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2da0:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <xTaskResumeAll>
    2da4:	46 cf       	rjmp	.-372    	; 0x2c32 <xQueueGenericReceive+0x2c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2da6:	8a 81       	ldd	r24, Y+2	; 0x02
    2da8:	9b 81       	ldd	r25, Y+3	; 0x03
    2daa:	0e 94 e5 18 	call	0x31ca	; 0x31ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2dae:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2db2:	8a 81       	ldd	r24, Y+2	; 0x02
    2db4:	9b 81       	ldd	r25, Y+3	; 0x03
    2db6:	0e 94 38 19 	call	0x3270	; 0x3270 <prvIsQueueEmpty>
    2dba:	88 23       	and	r24, r24
    2dbc:	09 f4       	brne	.+2      	; 0x2dc0 <xQueueGenericReceive+0x1ba>
    2dbe:	39 cf       	rjmp	.-398    	; 0x2c32 <xQueueGenericReceive+0x2c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    2dc0:	19 8a       	std	Y+17, r1	; 0x11
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    2dc2:	89 89       	ldd	r24, Y+17	; 0x11
}
    2dc4:	61 96       	adiw	r28, 0x11	; 17
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	f8 94       	cli
    2dca:	de bf       	out	0x3e, r29	; 62
    2dcc:	0f be       	out	0x3f, r0	; 63
    2dce:	cd bf       	out	0x3d, r28	; 61
    2dd0:	cf 91       	pop	r28
    2dd2:	df 91       	pop	r29
    2dd4:	08 95       	ret

00002dd6 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    2dd6:	df 93       	push	r29
    2dd8:	cf 93       	push	r28
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
    2dde:	2c 97       	sbiw	r28, 0x0c	; 12
    2de0:	0f b6       	in	r0, 0x3f	; 63
    2de2:	f8 94       	cli
    2de4:	de bf       	out	0x3e, r29	; 62
    2de6:	0f be       	out	0x3f, r0	; 63
    2de8:	cd bf       	out	0x3d, r28	; 61
    2dea:	98 87       	std	Y+8, r25	; 0x08
    2dec:	8f 83       	std	Y+7, r24	; 0x07
    2dee:	7a 87       	std	Y+10, r23	; 0x0a
    2df0:	69 87       	std	Y+9, r22	; 0x09
    2df2:	5c 87       	std	Y+12, r21	; 0x0c
    2df4:	4b 87       	std	Y+11, r20	; 0x0b
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2df6:	8f 81       	ldd	r24, Y+7	; 0x07
    2df8:	98 85       	ldd	r25, Y+8	; 0x08
    2dfa:	9c 83       	std	Y+4, r25	; 0x04
    2dfc:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2dfe:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2e00:	eb 81       	ldd	r30, Y+3	; 0x03
    2e02:	fc 81       	ldd	r31, Y+4	; 0x04
    2e04:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e06:	8a 83       	std	Y+2, r24	; 0x02

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    2e08:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0a:	88 23       	and	r24, r24
    2e0c:	81 f1       	breq	.+96     	; 0x2e6e <xQueueReceiveFromISR+0x98>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    2e0e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e10:	fc 81       	ldd	r31, Y+4	; 0x04
    2e12:	85 8d       	ldd	r24, Z+29	; 0x1d
    2e14:	89 83       	std	Y+1, r24	; 0x01

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2e16:	8b 81       	ldd	r24, Y+3	; 0x03
    2e18:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1a:	29 85       	ldd	r18, Y+9	; 0x09
    2e1c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e1e:	b9 01       	movw	r22, r18
    2e20:	0e 94 9e 18 	call	0x313c	; 0x313c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    2e24:	8a 81       	ldd	r24, Y+2	; 0x02
    2e26:	81 50       	subi	r24, 0x01	; 1
    2e28:	eb 81       	ldd	r30, Y+3	; 0x03
    2e2a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e2c:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
    2e30:	8f 3f       	cpi	r24, 0xFF	; 255
    2e32:	a9 f4       	brne	.+42     	; 0x2e5e <xQueueReceiveFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2e34:	eb 81       	ldd	r30, Y+3	; 0x03
    2e36:	fc 81       	ldd	r31, Y+4	; 0x04
    2e38:	80 85       	ldd	r24, Z+8	; 0x08
    2e3a:	88 23       	and	r24, r24
    2e3c:	a9 f0       	breq	.+42     	; 0x2e68 <xQueueReceiveFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e40:	9c 81       	ldd	r25, Y+4	; 0x04
    2e42:	08 96       	adiw	r24, 0x08	; 8
    2e44:	0e 94 74 22 	call	0x44e8	; 0x44e8 <xTaskRemoveFromEventList>
    2e48:	88 23       	and	r24, r24
    2e4a:	71 f0       	breq	.+28     	; 0x2e68 <xQueueReceiveFromISR+0x92>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    2e4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e50:	00 97       	sbiw	r24, 0x00	; 0
    2e52:	51 f0       	breq	.+20     	; 0x2e68 <xQueueReceiveFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    2e54:	eb 85       	ldd	r30, Y+11	; 0x0b
    2e56:	fc 85       	ldd	r31, Y+12	; 0x0c
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	80 83       	st	Z, r24
    2e5c:	05 c0       	rjmp	.+10     	; 0x2e68 <xQueueReceiveFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    2e5e:	89 81       	ldd	r24, Y+1	; 0x01
    2e60:	8f 5f       	subi	r24, 0xFF	; 255
    2e62:	eb 81       	ldd	r30, Y+3	; 0x03
    2e64:	fc 81       	ldd	r31, Y+4	; 0x04
    2e66:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	8e 83       	std	Y+6, r24	; 0x06
    2e6c:	01 c0       	rjmp	.+2      	; 0x2e70 <xQueueReceiveFromISR+0x9a>
		}
		else
		{
			xReturn = pdFAIL;
    2e6e:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2e70:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2e72:	2c 96       	adiw	r28, 0x0c	; 12
    2e74:	0f b6       	in	r0, 0x3f	; 63
    2e76:	f8 94       	cli
    2e78:	de bf       	out	0x3e, r29	; 62
    2e7a:	0f be       	out	0x3f, r0	; 63
    2e7c:	cd bf       	out	0x3d, r28	; 61
    2e7e:	cf 91       	pop	r28
    2e80:	df 91       	pop	r29
    2e82:	08 95       	ret

00002e84 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    2e84:	df 93       	push	r29
    2e86:	cf 93       	push	r28
    2e88:	cd b7       	in	r28, 0x3d	; 61
    2e8a:	de b7       	in	r29, 0x3e	; 62
    2e8c:	2a 97       	sbiw	r28, 0x0a	; 10
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	de bf       	out	0x3e, r29	; 62
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	cd bf       	out	0x3d, r28	; 61
    2e98:	98 87       	std	Y+8, r25	; 0x08
    2e9a:	8f 83       	std	Y+7, r24	; 0x07
    2e9c:	7a 87       	std	Y+10, r23	; 0x0a
    2e9e:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2ea0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ea2:	98 85       	ldd	r25, Y+8	; 0x08
    2ea4:	9a 83       	std	Y+2, r25	; 0x02
    2ea6:	89 83       	std	Y+1, r24	; 0x01
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2ea8:	1d 82       	std	Y+5, r1	; 0x05
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2eaa:	e9 81       	ldd	r30, Y+1	; 0x01
    2eac:	fa 81       	ldd	r31, Y+2	; 0x02
    2eae:	82 8d       	ldd	r24, Z+26	; 0x1a
    2eb0:	88 23       	and	r24, r24
    2eb2:	b1 f0       	breq	.+44     	; 0x2ee0 <xQueuePeekFromISR+0x5c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    2eb4:	e9 81       	ldd	r30, Y+1	; 0x01
    2eb6:	fa 81       	ldd	r31, Y+2	; 0x02
    2eb8:	86 81       	ldd	r24, Z+6	; 0x06
    2eba:	97 81       	ldd	r25, Z+7	; 0x07
    2ebc:	9c 83       	std	Y+4, r25	; 0x04
    2ebe:	8b 83       	std	Y+3, r24	; 0x03
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2ec0:	89 81       	ldd	r24, Y+1	; 0x01
    2ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec4:	29 85       	ldd	r18, Y+9	; 0x09
    2ec6:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ec8:	b9 01       	movw	r22, r18
    2eca:	0e 94 9e 18 	call	0x313c	; 0x313c <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    2ece:	e9 81       	ldd	r30, Y+1	; 0x01
    2ed0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed6:	97 83       	std	Z+7, r25	; 0x07
    2ed8:	86 83       	std	Z+6, r24	; 0x06

			xReturn = pdPASS;
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	8e 83       	std	Y+6, r24	; 0x06
    2ede:	01 c0       	rjmp	.+2      	; 0x2ee2 <xQueuePeekFromISR+0x5e>
		}
		else
		{
			xReturn = pdFAIL;
    2ee0:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2ee2:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2ee4:	2a 96       	adiw	r28, 0x0a	; 10
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	f8 94       	cli
    2eea:	de bf       	out	0x3e, r29	; 62
    2eec:	0f be       	out	0x3f, r0	; 63
    2eee:	cd bf       	out	0x3d, r28	; 61
    2ef0:	cf 91       	pop	r28
    2ef2:	df 91       	pop	r29
    2ef4:	08 95       	ret

00002ef6 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    2ef6:	df 93       	push	r29
    2ef8:	cf 93       	push	r28
    2efa:	00 d0       	rcall	.+0      	; 0x2efc <uxQueueMessagesWaiting+0x6>
    2efc:	0f 92       	push	r0
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	9b 83       	std	Y+3, r25	; 0x03
    2f04:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    2f06:	0f b6       	in	r0, 0x3f	; 63
    2f08:	f8 94       	cli
    2f0a:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    2f0c:	ea 81       	ldd	r30, Y+2	; 0x02
    2f0e:	fb 81       	ldd	r31, Y+3	; 0x03
    2f10:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f12:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    2f14:	0f 90       	pop	r0
    2f16:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    2f18:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2f1a:	0f 90       	pop	r0
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	cf 91       	pop	r28
    2f22:	df 91       	pop	r29
    2f24:	08 95       	ret

00002f26 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    2f26:	df 93       	push	r29
    2f28:	cf 93       	push	r28
    2f2a:	00 d0       	rcall	.+0      	; 0x2f2c <uxQueueSpacesAvailable+0x6>
    2f2c:	00 d0       	rcall	.+0      	; 0x2f2e <uxQueueSpacesAvailable+0x8>
    2f2e:	0f 92       	push	r0
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
    2f34:	9d 83       	std	Y+5, r25	; 0x05
    2f36:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    2f38:	8c 81       	ldd	r24, Y+4	; 0x04
    2f3a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f3c:	9a 83       	std	Y+2, r25	; 0x02
    2f3e:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    2f46:	e9 81       	ldd	r30, Y+1	; 0x01
    2f48:	fa 81       	ldd	r31, Y+2	; 0x02
    2f4a:	93 8d       	ldd	r25, Z+27	; 0x1b
    2f4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f50:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f52:	29 2f       	mov	r18, r25
    2f54:	28 1b       	sub	r18, r24
    2f56:	82 2f       	mov	r24, r18
    2f58:	8b 83       	std	Y+3, r24	; 0x03
	}
	taskEXIT_CRITICAL();
    2f5a:	0f 90       	pop	r0
    2f5c:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    2f5e:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2f60:	0f 90       	pop	r0
    2f62:	0f 90       	pop	r0
    2f64:	0f 90       	pop	r0
    2f66:	0f 90       	pop	r0
    2f68:	0f 90       	pop	r0
    2f6a:	cf 91       	pop	r28
    2f6c:	df 91       	pop	r29
    2f6e:	08 95       	ret

00002f70 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    2f70:	df 93       	push	r29
    2f72:	cf 93       	push	r28
    2f74:	00 d0       	rcall	.+0      	; 0x2f76 <uxQueueMessagesWaitingFromISR+0x6>
    2f76:	0f 92       	push	r0
    2f78:	cd b7       	in	r28, 0x3d	; 61
    2f7a:	de b7       	in	r29, 0x3e	; 62
    2f7c:	9b 83       	std	Y+3, r25	; 0x03
    2f7e:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    2f80:	ea 81       	ldd	r30, Y+2	; 0x02
    2f82:	fb 81       	ldd	r31, Y+3	; 0x03
    2f84:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f86:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2f8a:	0f 90       	pop	r0
    2f8c:	0f 90       	pop	r0
    2f8e:	0f 90       	pop	r0
    2f90:	cf 91       	pop	r28
    2f92:	df 91       	pop	r29
    2f94:	08 95       	ret

00002f96 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    2f96:	df 93       	push	r29
    2f98:	cf 93       	push	r28
    2f9a:	00 d0       	rcall	.+0      	; 0x2f9c <vQueueDelete+0x6>
    2f9c:	00 d0       	rcall	.+0      	; 0x2f9e <vQueueDelete+0x8>
    2f9e:	cd b7       	in	r28, 0x3d	; 61
    2fa0:	de b7       	in	r29, 0x3e	; 62
    2fa2:	9c 83       	std	Y+4, r25	; 0x04
    2fa4:	8b 83       	std	Y+3, r24	; 0x03
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    2faa:	9a 83       	std	Y+2, r25	; 0x02
    2fac:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
    2fae:	89 81       	ldd	r24, Y+1	; 0x01
    2fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb2:	0e 94 2d 1a 	call	0x345a	; 0x345a <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    2fb6:	89 81       	ldd	r24, Y+1	; 0x01
    2fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fba:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    2fbe:	0f 90       	pop	r0
    2fc0:	0f 90       	pop	r0
    2fc2:	0f 90       	pop	r0
    2fc4:	0f 90       	pop	r0
    2fc6:	cf 91       	pop	r28
    2fc8:	df 91       	pop	r29
    2fca:	08 95       	ret

00002fcc <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    2fcc:	df 93       	push	r29
    2fce:	cf 93       	push	r28
    2fd0:	cd b7       	in	r28, 0x3d	; 61
    2fd2:	de b7       	in	r29, 0x3e	; 62
    2fd4:	27 97       	sbiw	r28, 0x07	; 7
    2fd6:	0f b6       	in	r0, 0x3f	; 63
    2fd8:	f8 94       	cli
    2fda:	de bf       	out	0x3e, r29	; 62
    2fdc:	0f be       	out	0x3f, r0	; 63
    2fde:	cd bf       	out	0x3d, r28	; 61
    2fe0:	9c 83       	std	Y+4, r25	; 0x04
    2fe2:	8b 83       	std	Y+3, r24	; 0x03
    2fe4:	7e 83       	std	Y+6, r23	; 0x06
    2fe6:	6d 83       	std	Y+5, r22	; 0x05
    2fe8:	4f 83       	std	Y+7, r20	; 0x07
BaseType_t xReturn = pdFALSE;
    2fea:	1a 82       	std	Y+2, r1	; 0x02
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2fec:	eb 81       	ldd	r30, Y+3	; 0x03
    2fee:	fc 81       	ldd	r31, Y+4	; 0x04
    2ff0:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ff2:	89 83       	std	Y+1, r24	; 0x01

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    2ff4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ff6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ff8:	84 8d       	ldd	r24, Z+28	; 0x1c
    2ffa:	88 23       	and	r24, r24
    2ffc:	99 f4       	brne	.+38     	; 0x3024 <prvCopyDataToQueue+0x58>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2ffe:	eb 81       	ldd	r30, Y+3	; 0x03
    3000:	fc 81       	ldd	r31, Y+4	; 0x04
    3002:	80 81       	ld	r24, Z
    3004:	91 81       	ldd	r25, Z+1	; 0x01
    3006:	00 97       	sbiw	r24, 0x00	; 0
    3008:	09 f0       	breq	.+2      	; 0x300c <prvCopyDataToQueue+0x40>
    300a:	89 c0       	rjmp	.+274    	; 0x311e <prvCopyDataToQueue+0x152>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    300c:	eb 81       	ldd	r30, Y+3	; 0x03
    300e:	fc 81       	ldd	r31, Y+4	; 0x04
    3010:	82 81       	ldd	r24, Z+2	; 0x02
    3012:	93 81       	ldd	r25, Z+3	; 0x03
    3014:	0e 94 42 25 	call	0x4a84	; 0x4a84 <xTaskPriorityDisinherit>
    3018:	8a 83       	std	Y+2, r24	; 0x02
				pxQueue->pxMutexHolder = NULL;
    301a:	eb 81       	ldd	r30, Y+3	; 0x03
    301c:	fc 81       	ldd	r31, Y+4	; 0x04
    301e:	13 82       	std	Z+3, r1	; 0x03
    3020:	12 82       	std	Z+2, r1	; 0x02
    3022:	7d c0       	rjmp	.+250    	; 0x311e <prvCopyDataToQueue+0x152>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    3024:	8f 81       	ldd	r24, Y+7	; 0x07
    3026:	88 23       	and	r24, r24
    3028:	99 f5       	brne	.+102    	; 0x3090 <prvCopyDataToQueue+0xc4>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    302a:	eb 81       	ldd	r30, Y+3	; 0x03
    302c:	fc 81       	ldd	r31, Y+4	; 0x04
    302e:	64 81       	ldd	r22, Z+4	; 0x04
    3030:	75 81       	ldd	r23, Z+5	; 0x05
    3032:	eb 81       	ldd	r30, Y+3	; 0x03
    3034:	fc 81       	ldd	r31, Y+4	; 0x04
    3036:	84 8d       	ldd	r24, Z+28	; 0x1c
    3038:	48 2f       	mov	r20, r24
    303a:	50 e0       	ldi	r21, 0x00	; 0
    303c:	2d 81       	ldd	r18, Y+5	; 0x05
    303e:	3e 81       	ldd	r19, Y+6	; 0x06
    3040:	cb 01       	movw	r24, r22
    3042:	b9 01       	movw	r22, r18
    3044:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3048:	eb 81       	ldd	r30, Y+3	; 0x03
    304a:	fc 81       	ldd	r31, Y+4	; 0x04
    304c:	24 81       	ldd	r18, Z+4	; 0x04
    304e:	35 81       	ldd	r19, Z+5	; 0x05
    3050:	eb 81       	ldd	r30, Y+3	; 0x03
    3052:	fc 81       	ldd	r31, Y+4	; 0x04
    3054:	84 8d       	ldd	r24, Z+28	; 0x1c
    3056:	88 2f       	mov	r24, r24
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	82 0f       	add	r24, r18
    305c:	93 1f       	adc	r25, r19
    305e:	eb 81       	ldd	r30, Y+3	; 0x03
    3060:	fc 81       	ldd	r31, Y+4	; 0x04
    3062:	95 83       	std	Z+5, r25	; 0x05
    3064:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    3066:	eb 81       	ldd	r30, Y+3	; 0x03
    3068:	fc 81       	ldd	r31, Y+4	; 0x04
    306a:	24 81       	ldd	r18, Z+4	; 0x04
    306c:	35 81       	ldd	r19, Z+5	; 0x05
    306e:	eb 81       	ldd	r30, Y+3	; 0x03
    3070:	fc 81       	ldd	r31, Y+4	; 0x04
    3072:	82 81       	ldd	r24, Z+2	; 0x02
    3074:	93 81       	ldd	r25, Z+3	; 0x03
    3076:	28 17       	cp	r18, r24
    3078:	39 07       	cpc	r19, r25
    307a:	08 f4       	brcc	.+2      	; 0x307e <prvCopyDataToQueue+0xb2>
    307c:	50 c0       	rjmp	.+160    	; 0x311e <prvCopyDataToQueue+0x152>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    307e:	eb 81       	ldd	r30, Y+3	; 0x03
    3080:	fc 81       	ldd	r31, Y+4	; 0x04
    3082:	80 81       	ld	r24, Z
    3084:	91 81       	ldd	r25, Z+1	; 0x01
    3086:	eb 81       	ldd	r30, Y+3	; 0x03
    3088:	fc 81       	ldd	r31, Y+4	; 0x04
    308a:	95 83       	std	Z+5, r25	; 0x05
    308c:	84 83       	std	Z+4, r24	; 0x04
    308e:	47 c0       	rjmp	.+142    	; 0x311e <prvCopyDataToQueue+0x152>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3090:	eb 81       	ldd	r30, Y+3	; 0x03
    3092:	fc 81       	ldd	r31, Y+4	; 0x04
    3094:	66 81       	ldd	r22, Z+6	; 0x06
    3096:	77 81       	ldd	r23, Z+7	; 0x07
    3098:	eb 81       	ldd	r30, Y+3	; 0x03
    309a:	fc 81       	ldd	r31, Y+4	; 0x04
    309c:	84 8d       	ldd	r24, Z+28	; 0x1c
    309e:	48 2f       	mov	r20, r24
    30a0:	50 e0       	ldi	r21, 0x00	; 0
    30a2:	2d 81       	ldd	r18, Y+5	; 0x05
    30a4:	3e 81       	ldd	r19, Y+6	; 0x06
    30a6:	cb 01       	movw	r24, r22
    30a8:	b9 01       	movw	r22, r18
    30aa:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    30ae:	eb 81       	ldd	r30, Y+3	; 0x03
    30b0:	fc 81       	ldd	r31, Y+4	; 0x04
    30b2:	26 81       	ldd	r18, Z+6	; 0x06
    30b4:	37 81       	ldd	r19, Z+7	; 0x07
    30b6:	eb 81       	ldd	r30, Y+3	; 0x03
    30b8:	fc 81       	ldd	r31, Y+4	; 0x04
    30ba:	84 8d       	ldd	r24, Z+28	; 0x1c
    30bc:	88 2f       	mov	r24, r24
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	90 95       	com	r25
    30c2:	81 95       	neg	r24
    30c4:	9f 4f       	sbci	r25, 0xFF	; 255
    30c6:	82 0f       	add	r24, r18
    30c8:	93 1f       	adc	r25, r19
    30ca:	eb 81       	ldd	r30, Y+3	; 0x03
    30cc:	fc 81       	ldd	r31, Y+4	; 0x04
    30ce:	97 83       	std	Z+7, r25	; 0x07
    30d0:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    30d2:	eb 81       	ldd	r30, Y+3	; 0x03
    30d4:	fc 81       	ldd	r31, Y+4	; 0x04
    30d6:	26 81       	ldd	r18, Z+6	; 0x06
    30d8:	37 81       	ldd	r19, Z+7	; 0x07
    30da:	eb 81       	ldd	r30, Y+3	; 0x03
    30dc:	fc 81       	ldd	r31, Y+4	; 0x04
    30de:	80 81       	ld	r24, Z
    30e0:	91 81       	ldd	r25, Z+1	; 0x01
    30e2:	28 17       	cp	r18, r24
    30e4:	39 07       	cpc	r19, r25
    30e6:	90 f4       	brcc	.+36     	; 0x310c <prvCopyDataToQueue+0x140>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    30e8:	eb 81       	ldd	r30, Y+3	; 0x03
    30ea:	fc 81       	ldd	r31, Y+4	; 0x04
    30ec:	22 81       	ldd	r18, Z+2	; 0x02
    30ee:	33 81       	ldd	r19, Z+3	; 0x03
    30f0:	eb 81       	ldd	r30, Y+3	; 0x03
    30f2:	fc 81       	ldd	r31, Y+4	; 0x04
    30f4:	84 8d       	ldd	r24, Z+28	; 0x1c
    30f6:	88 2f       	mov	r24, r24
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	90 95       	com	r25
    30fc:	81 95       	neg	r24
    30fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3100:	82 0f       	add	r24, r18
    3102:	93 1f       	adc	r25, r19
    3104:	eb 81       	ldd	r30, Y+3	; 0x03
    3106:	fc 81       	ldd	r31, Y+4	; 0x04
    3108:	97 83       	std	Z+7, r25	; 0x07
    310a:	86 83       	std	Z+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    310c:	8f 81       	ldd	r24, Y+7	; 0x07
    310e:	82 30       	cpi	r24, 0x02	; 2
    3110:	31 f4       	brne	.+12     	; 0x311e <prvCopyDataToQueue+0x152>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    3112:	89 81       	ldd	r24, Y+1	; 0x01
    3114:	88 23       	and	r24, r24
    3116:	19 f0       	breq	.+6      	; 0x311e <prvCopyDataToQueue+0x152>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	81 50       	subi	r24, 0x01	; 1
    311c:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	8f 5f       	subi	r24, 0xFF	; 255
    3122:	eb 81       	ldd	r30, Y+3	; 0x03
    3124:	fc 81       	ldd	r31, Y+4	; 0x04
    3126:	82 8f       	std	Z+26, r24	; 0x1a

	return xReturn;
    3128:	8a 81       	ldd	r24, Y+2	; 0x02
}
    312a:	27 96       	adiw	r28, 0x07	; 7
    312c:	0f b6       	in	r0, 0x3f	; 63
    312e:	f8 94       	cli
    3130:	de bf       	out	0x3e, r29	; 62
    3132:	0f be       	out	0x3f, r0	; 63
    3134:	cd bf       	out	0x3d, r28	; 61
    3136:	cf 91       	pop	r28
    3138:	df 91       	pop	r29
    313a:	08 95       	ret

0000313c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    313c:	df 93       	push	r29
    313e:	cf 93       	push	r28
    3140:	00 d0       	rcall	.+0      	; 0x3142 <prvCopyDataFromQueue+0x6>
    3142:	00 d0       	rcall	.+0      	; 0x3144 <prvCopyDataFromQueue+0x8>
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62
    3148:	9a 83       	std	Y+2, r25	; 0x02
    314a:	89 83       	std	Y+1, r24	; 0x01
    314c:	7c 83       	std	Y+4, r23	; 0x04
    314e:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    3150:	e9 81       	ldd	r30, Y+1	; 0x01
    3152:	fa 81       	ldd	r31, Y+2	; 0x02
    3154:	84 8d       	ldd	r24, Z+28	; 0x1c
    3156:	88 23       	and	r24, r24
    3158:	89 f1       	breq	.+98     	; 0x31bc <prvCopyDataFromQueue+0x80>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    315a:	e9 81       	ldd	r30, Y+1	; 0x01
    315c:	fa 81       	ldd	r31, Y+2	; 0x02
    315e:	26 81       	ldd	r18, Z+6	; 0x06
    3160:	37 81       	ldd	r19, Z+7	; 0x07
    3162:	e9 81       	ldd	r30, Y+1	; 0x01
    3164:	fa 81       	ldd	r31, Y+2	; 0x02
    3166:	84 8d       	ldd	r24, Z+28	; 0x1c
    3168:	88 2f       	mov	r24, r24
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	82 0f       	add	r24, r18
    316e:	93 1f       	adc	r25, r19
    3170:	e9 81       	ldd	r30, Y+1	; 0x01
    3172:	fa 81       	ldd	r31, Y+2	; 0x02
    3174:	97 83       	std	Z+7, r25	; 0x07
    3176:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    3178:	e9 81       	ldd	r30, Y+1	; 0x01
    317a:	fa 81       	ldd	r31, Y+2	; 0x02
    317c:	26 81       	ldd	r18, Z+6	; 0x06
    317e:	37 81       	ldd	r19, Z+7	; 0x07
    3180:	e9 81       	ldd	r30, Y+1	; 0x01
    3182:	fa 81       	ldd	r31, Y+2	; 0x02
    3184:	82 81       	ldd	r24, Z+2	; 0x02
    3186:	93 81       	ldd	r25, Z+3	; 0x03
    3188:	28 17       	cp	r18, r24
    318a:	39 07       	cpc	r19, r25
    318c:	40 f0       	brcs	.+16     	; 0x319e <prvCopyDataFromQueue+0x62>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    318e:	e9 81       	ldd	r30, Y+1	; 0x01
    3190:	fa 81       	ldd	r31, Y+2	; 0x02
    3192:	80 81       	ld	r24, Z
    3194:	91 81       	ldd	r25, Z+1	; 0x01
    3196:	e9 81       	ldd	r30, Y+1	; 0x01
    3198:	fa 81       	ldd	r31, Y+2	; 0x02
    319a:	97 83       	std	Z+7, r25	; 0x07
    319c:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    319e:	e9 81       	ldd	r30, Y+1	; 0x01
    31a0:	fa 81       	ldd	r31, Y+2	; 0x02
    31a2:	46 81       	ldd	r20, Z+6	; 0x06
    31a4:	57 81       	ldd	r21, Z+7	; 0x07
    31a6:	e9 81       	ldd	r30, Y+1	; 0x01
    31a8:	fa 81       	ldd	r31, Y+2	; 0x02
    31aa:	84 8d       	ldd	r24, Z+28	; 0x1c
    31ac:	28 2f       	mov	r18, r24
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	8b 81       	ldd	r24, Y+3	; 0x03
    31b2:	9c 81       	ldd	r25, Y+4	; 0x04
    31b4:	ba 01       	movw	r22, r20
    31b6:	a9 01       	movw	r20, r18
    31b8:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <memcpy>
	}
}
    31bc:	0f 90       	pop	r0
    31be:	0f 90       	pop	r0
    31c0:	0f 90       	pop	r0
    31c2:	0f 90       	pop	r0
    31c4:	cf 91       	pop	r28
    31c6:	df 91       	pop	r29
    31c8:	08 95       	ret

000031ca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    31ca:	df 93       	push	r29
    31cc:	cf 93       	push	r28
    31ce:	00 d0       	rcall	.+0      	; 0x31d0 <prvUnlockQueue+0x6>
    31d0:	00 d0       	rcall	.+0      	; 0x31d2 <prvUnlockQueue+0x8>
    31d2:	cd b7       	in	r28, 0x3d	; 61
    31d4:	de b7       	in	r29, 0x3e	; 62
    31d6:	9c 83       	std	Y+4, r25	; 0x04
    31d8:	8b 83       	std	Y+3, r24	; 0x03

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    31da:	0f b6       	in	r0, 0x3f	; 63
    31dc:	f8 94       	cli
    31de:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
    31e0:	eb 81       	ldd	r30, Y+3	; 0x03
    31e2:	fc 81       	ldd	r31, Y+4	; 0x04
    31e4:	86 8d       	ldd	r24, Z+30	; 0x1e
    31e6:	8a 83       	std	Y+2, r24	; 0x02
    31e8:	11 c0       	rjmp	.+34     	; 0x320c <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    31ea:	eb 81       	ldd	r30, Y+3	; 0x03
    31ec:	fc 81       	ldd	r31, Y+4	; 0x04
    31ee:	81 89       	ldd	r24, Z+17	; 0x11
    31f0:	88 23       	and	r24, r24
    31f2:	79 f0       	breq	.+30     	; 0x3212 <prvUnlockQueue+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    31f4:	8b 81       	ldd	r24, Y+3	; 0x03
    31f6:	9c 81       	ldd	r25, Y+4	; 0x04
    31f8:	41 96       	adiw	r24, 0x11	; 17
    31fa:	0e 94 74 22 	call	0x44e8	; 0x44e8 <xTaskRemoveFromEventList>
    31fe:	88 23       	and	r24, r24
    3200:	11 f0       	breq	.+4      	; 0x3206 <prvUnlockQueue+0x3c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    3202:	0e 94 ca 23 	call	0x4794	; 0x4794 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    3206:	8a 81       	ldd	r24, Y+2	; 0x02
    3208:	81 50       	subi	r24, 0x01	; 1
    320a:	8a 83       	std	Y+2, r24	; 0x02
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    320c:	8a 81       	ldd	r24, Y+2	; 0x02
    320e:	18 16       	cp	r1, r24
    3210:	64 f3       	brlt	.-40     	; 0x31ea <prvUnlockQueue+0x20>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    3212:	eb 81       	ldd	r30, Y+3	; 0x03
    3214:	fc 81       	ldd	r31, Y+4	; 0x04
    3216:	8f ef       	ldi	r24, 0xFF	; 255
    3218:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    321a:	0f 90       	pop	r0
    321c:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    321e:	0f b6       	in	r0, 0x3f	; 63
    3220:	f8 94       	cli
    3222:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
    3224:	eb 81       	ldd	r30, Y+3	; 0x03
    3226:	fc 81       	ldd	r31, Y+4	; 0x04
    3228:	85 8d       	ldd	r24, Z+29	; 0x1d
    322a:	89 83       	std	Y+1, r24	; 0x01
    322c:	11 c0       	rjmp	.+34     	; 0x3250 <prvUnlockQueue+0x86>

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    322e:	eb 81       	ldd	r30, Y+3	; 0x03
    3230:	fc 81       	ldd	r31, Y+4	; 0x04
    3232:	80 85       	ldd	r24, Z+8	; 0x08
    3234:	88 23       	and	r24, r24
    3236:	79 f0       	breq	.+30     	; 0x3256 <prvUnlockQueue+0x8c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3238:	8b 81       	ldd	r24, Y+3	; 0x03
    323a:	9c 81       	ldd	r25, Y+4	; 0x04
    323c:	08 96       	adiw	r24, 0x08	; 8
    323e:	0e 94 74 22 	call	0x44e8	; 0x44e8 <xTaskRemoveFromEventList>
    3242:	88 23       	and	r24, r24
    3244:	11 f0       	breq	.+4      	; 0x324a <prvUnlockQueue+0x80>
				{
					vTaskMissedYield();
    3246:	0e 94 ca 23 	call	0x4794	; 0x4794 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    324a:	89 81       	ldd	r24, Y+1	; 0x01
    324c:	81 50       	subi	r24, 0x01	; 1
    324e:	89 83       	std	Y+1, r24	; 0x01
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    3250:	89 81       	ldd	r24, Y+1	; 0x01
    3252:	18 16       	cp	r1, r24
    3254:	64 f3       	brlt	.-40     	; 0x322e <prvUnlockQueue+0x64>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    3256:	eb 81       	ldd	r30, Y+3	; 0x03
    3258:	fc 81       	ldd	r31, Y+4	; 0x04
    325a:	8f ef       	ldi	r24, 0xFF	; 255
    325c:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    325e:	0f 90       	pop	r0
    3260:	0f be       	out	0x3f, r0	; 63
}
    3262:	0f 90       	pop	r0
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	0f 90       	pop	r0
    326a:	cf 91       	pop	r28
    326c:	df 91       	pop	r29
    326e:	08 95       	ret

00003270 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    3270:	df 93       	push	r29
    3272:	cf 93       	push	r28
    3274:	00 d0       	rcall	.+0      	; 0x3276 <prvIsQueueEmpty+0x6>
    3276:	0f 92       	push	r0
    3278:	cd b7       	in	r28, 0x3d	; 61
    327a:	de b7       	in	r29, 0x3e	; 62
    327c:	9b 83       	std	Y+3, r25	; 0x03
    327e:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3280:	0f b6       	in	r0, 0x3f	; 63
    3282:	f8 94       	cli
    3284:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    3286:	ea 81       	ldd	r30, Y+2	; 0x02
    3288:	fb 81       	ldd	r31, Y+3	; 0x03
    328a:	82 8d       	ldd	r24, Z+26	; 0x1a
    328c:	88 23       	and	r24, r24
    328e:	19 f4       	brne	.+6      	; 0x3296 <prvIsQueueEmpty+0x26>
		{
			xReturn = pdTRUE;
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	89 83       	std	Y+1, r24	; 0x01
    3294:	01 c0       	rjmp	.+2      	; 0x3298 <prvIsQueueEmpty+0x28>
		}
		else
		{
			xReturn = pdFALSE;
    3296:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    3298:	0f 90       	pop	r0
    329a:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    329c:	89 81       	ldd	r24, Y+1	; 0x01
}
    329e:	0f 90       	pop	r0
    32a0:	0f 90       	pop	r0
    32a2:	0f 90       	pop	r0
    32a4:	cf 91       	pop	r28
    32a6:	df 91       	pop	r29
    32a8:	08 95       	ret

000032aa <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    32aa:	df 93       	push	r29
    32ac:	cf 93       	push	r28
    32ae:	00 d0       	rcall	.+0      	; 0x32b0 <xQueueIsQueueEmptyFromISR+0x6>
    32b0:	0f 92       	push	r0
    32b2:	cd b7       	in	r28, 0x3d	; 61
    32b4:	de b7       	in	r29, 0x3e	; 62
    32b6:	9b 83       	std	Y+3, r25	; 0x03
    32b8:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    32ba:	ea 81       	ldd	r30, Y+2	; 0x02
    32bc:	fb 81       	ldd	r31, Y+3	; 0x03
    32be:	82 8d       	ldd	r24, Z+26	; 0x1a
    32c0:	88 23       	and	r24, r24
    32c2:	19 f4       	brne	.+6      	; 0x32ca <xQueueIsQueueEmptyFromISR+0x20>
	{
		xReturn = pdTRUE;
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	89 83       	std	Y+1, r24	; 0x01
    32c8:	01 c0       	rjmp	.+2      	; 0x32cc <xQueueIsQueueEmptyFromISR+0x22>
	}
	else
	{
		xReturn = pdFALSE;
    32ca:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    32ce:	0f 90       	pop	r0
    32d0:	0f 90       	pop	r0
    32d2:	0f 90       	pop	r0
    32d4:	cf 91       	pop	r28
    32d6:	df 91       	pop	r29
    32d8:	08 95       	ret

000032da <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    32da:	df 93       	push	r29
    32dc:	cf 93       	push	r28
    32de:	00 d0       	rcall	.+0      	; 0x32e0 <prvIsQueueFull+0x6>
    32e0:	0f 92       	push	r0
    32e2:	cd b7       	in	r28, 0x3d	; 61
    32e4:	de b7       	in	r29, 0x3e	; 62
    32e6:	9b 83       	std	Y+3, r25	; 0x03
    32e8:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    32ea:	0f b6       	in	r0, 0x3f	; 63
    32ec:	f8 94       	cli
    32ee:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    32f0:	ea 81       	ldd	r30, Y+2	; 0x02
    32f2:	fb 81       	ldd	r31, Y+3	; 0x03
    32f4:	92 8d       	ldd	r25, Z+26	; 0x1a
    32f6:	ea 81       	ldd	r30, Y+2	; 0x02
    32f8:	fb 81       	ldd	r31, Y+3	; 0x03
    32fa:	83 8d       	ldd	r24, Z+27	; 0x1b
    32fc:	98 17       	cp	r25, r24
    32fe:	19 f4       	brne	.+6      	; 0x3306 <prvIsQueueFull+0x2c>
		{
			xReturn = pdTRUE;
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	89 83       	std	Y+1, r24	; 0x01
    3304:	01 c0       	rjmp	.+2      	; 0x3308 <prvIsQueueFull+0x2e>
		}
		else
		{
			xReturn = pdFALSE;
    3306:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    3308:	0f 90       	pop	r0
    330a:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    330c:	89 81       	ldd	r24, Y+1	; 0x01
}
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	0f 90       	pop	r0
    3314:	cf 91       	pop	r28
    3316:	df 91       	pop	r29
    3318:	08 95       	ret

0000331a <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    331a:	df 93       	push	r29
    331c:	cf 93       	push	r28
    331e:	00 d0       	rcall	.+0      	; 0x3320 <xQueueIsQueueFullFromISR+0x6>
    3320:	0f 92       	push	r0
    3322:	cd b7       	in	r28, 0x3d	; 61
    3324:	de b7       	in	r29, 0x3e	; 62
    3326:	9b 83       	std	Y+3, r25	; 0x03
    3328:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    332a:	ea 81       	ldd	r30, Y+2	; 0x02
    332c:	fb 81       	ldd	r31, Y+3	; 0x03
    332e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3330:	ea 81       	ldd	r30, Y+2	; 0x02
    3332:	fb 81       	ldd	r31, Y+3	; 0x03
    3334:	83 8d       	ldd	r24, Z+27	; 0x1b
    3336:	98 17       	cp	r25, r24
    3338:	19 f4       	brne	.+6      	; 0x3340 <xQueueIsQueueFullFromISR+0x26>
	{
		xReturn = pdTRUE;
    333a:	81 e0       	ldi	r24, 0x01	; 1
    333c:	89 83       	std	Y+1, r24	; 0x01
    333e:	01 c0       	rjmp	.+2      	; 0x3342 <xQueueIsQueueFullFromISR+0x28>
	}
	else
	{
		xReturn = pdFALSE;
    3340:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    3342:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    3344:	0f 90       	pop	r0
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	cf 91       	pop	r28
    334c:	df 91       	pop	r29
    334e:	08 95       	ret

00003350 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    3350:	df 93       	push	r29
    3352:	cf 93       	push	r28
    3354:	00 d0       	rcall	.+0      	; 0x3356 <vQueueAddToRegistry+0x6>
    3356:	00 d0       	rcall	.+0      	; 0x3358 <vQueueAddToRegistry+0x8>
    3358:	0f 92       	push	r0
    335a:	cd b7       	in	r28, 0x3d	; 61
    335c:	de b7       	in	r29, 0x3e	; 62
    335e:	9b 83       	std	Y+3, r25	; 0x03
    3360:	8a 83       	std	Y+2, r24	; 0x02
    3362:	7d 83       	std	Y+5, r23	; 0x05
    3364:	6c 83       	std	Y+4, r22	; 0x04
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    3366:	19 82       	std	Y+1, r1	; 0x01
    3368:	2f c0       	rjmp	.+94     	; 0x33c8 <vQueueAddToRegistry+0x78>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    336a:	89 81       	ldd	r24, Y+1	; 0x01
    336c:	88 2f       	mov	r24, r24
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	88 0f       	add	r24, r24
    3372:	99 1f       	adc	r25, r25
    3374:	88 0f       	add	r24, r24
    3376:	99 1f       	adc	r25, r25
    3378:	fc 01       	movw	r30, r24
    337a:	ec 5e       	subi	r30, 0xEC	; 236
    337c:	fb 4f       	sbci	r31, 0xFB	; 251
    337e:	80 81       	ld	r24, Z
    3380:	91 81       	ldd	r25, Z+1	; 0x01
    3382:	00 97       	sbiw	r24, 0x00	; 0
    3384:	f1 f4       	brne	.+60     	; 0x33c2 <vQueueAddToRegistry+0x72>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    3386:	89 81       	ldd	r24, Y+1	; 0x01
    3388:	88 2f       	mov	r24, r24
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	88 0f       	add	r24, r24
    338e:	99 1f       	adc	r25, r25
    3390:	88 0f       	add	r24, r24
    3392:	99 1f       	adc	r25, r25
    3394:	fc 01       	movw	r30, r24
    3396:	ec 5e       	subi	r30, 0xEC	; 236
    3398:	fb 4f       	sbci	r31, 0xFB	; 251
    339a:	8c 81       	ldd	r24, Y+4	; 0x04
    339c:	9d 81       	ldd	r25, Y+5	; 0x05
    339e:	91 83       	std	Z+1, r25	; 0x01
    33a0:	80 83       	st	Z, r24
				xQueueRegistry[ ux ].xHandle = xQueue;
    33a2:	89 81       	ldd	r24, Y+1	; 0x01
    33a4:	88 2f       	mov	r24, r24
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	88 0f       	add	r24, r24
    33aa:	99 1f       	adc	r25, r25
    33ac:	01 96       	adiw	r24, 0x01	; 1
    33ae:	88 0f       	add	r24, r24
    33b0:	99 1f       	adc	r25, r25
    33b2:	fc 01       	movw	r30, r24
    33b4:	ec 5e       	subi	r30, 0xEC	; 236
    33b6:	fb 4f       	sbci	r31, 0xFB	; 251
    33b8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ba:	9b 81       	ldd	r25, Y+3	; 0x03
    33bc:	91 83       	std	Z+1, r25	; 0x01
    33be:	80 83       	st	Z, r24
    33c0:	06 c0       	rjmp	.+12     	; 0x33ce <vQueueAddToRegistry+0x7e>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    33c2:	89 81       	ldd	r24, Y+1	; 0x01
    33c4:	8f 5f       	subi	r24, 0xFF	; 255
    33c6:	89 83       	std	Y+1, r24	; 0x01
    33c8:	89 81       	ldd	r24, Y+1	; 0x01
    33ca:	88 30       	cpi	r24, 0x08	; 8
    33cc:	70 f2       	brcs	.-100    	; 0x336a <vQueueAddToRegistry+0x1a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    33ce:	0f 90       	pop	r0
    33d0:	0f 90       	pop	r0
    33d2:	0f 90       	pop	r0
    33d4:	0f 90       	pop	r0
    33d6:	0f 90       	pop	r0
    33d8:	cf 91       	pop	r28
    33da:	df 91       	pop	r29
    33dc:	08 95       	ret

000033de <pcQueueGetName>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    33de:	df 93       	push	r29
    33e0:	cf 93       	push	r28
    33e2:	00 d0       	rcall	.+0      	; 0x33e4 <pcQueueGetName+0x6>
    33e4:	00 d0       	rcall	.+0      	; 0x33e6 <pcQueueGetName+0x8>
    33e6:	0f 92       	push	r0
    33e8:	cd b7       	in	r28, 0x3d	; 61
    33ea:	de b7       	in	r29, 0x3e	; 62
    33ec:	9d 83       	std	Y+5, r25	; 0x05
    33ee:	8c 83       	std	Y+4, r24	; 0x04
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    33f0:	1a 82       	std	Y+2, r1	; 0x02
    33f2:	19 82       	std	Y+1, r1	; 0x01

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    33f4:	1b 82       	std	Y+3, r1	; 0x03
    33f6:	24 c0       	rjmp	.+72     	; 0x3440 <pcQueueGetName+0x62>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    33f8:	8b 81       	ldd	r24, Y+3	; 0x03
    33fa:	88 2f       	mov	r24, r24
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	88 0f       	add	r24, r24
    3400:	99 1f       	adc	r25, r25
    3402:	01 96       	adiw	r24, 0x01	; 1
    3404:	88 0f       	add	r24, r24
    3406:	99 1f       	adc	r25, r25
    3408:	fc 01       	movw	r30, r24
    340a:	ec 5e       	subi	r30, 0xEC	; 236
    340c:	fb 4f       	sbci	r31, 0xFB	; 251
    340e:	20 81       	ld	r18, Z
    3410:	31 81       	ldd	r19, Z+1	; 0x01
    3412:	8c 81       	ldd	r24, Y+4	; 0x04
    3414:	9d 81       	ldd	r25, Y+5	; 0x05
    3416:	28 17       	cp	r18, r24
    3418:	39 07       	cpc	r19, r25
    341a:	79 f4       	brne	.+30     	; 0x343a <pcQueueGetName+0x5c>
			{
				pcReturn = xQueueRegistry[ ux ].pcQueueName;
    341c:	8b 81       	ldd	r24, Y+3	; 0x03
    341e:	88 2f       	mov	r24, r24
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	88 0f       	add	r24, r24
    3424:	99 1f       	adc	r25, r25
    3426:	88 0f       	add	r24, r24
    3428:	99 1f       	adc	r25, r25
    342a:	fc 01       	movw	r30, r24
    342c:	ec 5e       	subi	r30, 0xEC	; 236
    342e:	fb 4f       	sbci	r31, 0xFB	; 251
    3430:	80 81       	ld	r24, Z
    3432:	91 81       	ldd	r25, Z+1	; 0x01
    3434:	9a 83       	std	Y+2, r25	; 0x02
    3436:	89 83       	std	Y+1, r24	; 0x01
    3438:	06 c0       	rjmp	.+12     	; 0x3446 <pcQueueGetName+0x68>
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    343a:	8b 81       	ldd	r24, Y+3	; 0x03
    343c:	8f 5f       	subi	r24, 0xFF	; 255
    343e:	8b 83       	std	Y+3, r24	; 0x03
    3440:	8b 81       	ldd	r24, Y+3	; 0x03
    3442:	88 30       	cpi	r24, 0x08	; 8
    3444:	c8 f2       	brcs	.-78     	; 0x33f8 <pcQueueGetName+0x1a>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return pcReturn;
    3446:	89 81       	ldd	r24, Y+1	; 0x01
    3448:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	cf 91       	pop	r28
    3456:	df 91       	pop	r29
    3458:	08 95       	ret

0000345a <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
    345a:	df 93       	push	r29
    345c:	cf 93       	push	r28
    345e:	00 d0       	rcall	.+0      	; 0x3460 <vQueueUnregisterQueue+0x6>
    3460:	0f 92       	push	r0
    3462:	cd b7       	in	r28, 0x3d	; 61
    3464:	de b7       	in	r29, 0x3e	; 62
    3466:	9b 83       	std	Y+3, r25	; 0x03
    3468:	8a 83       	std	Y+2, r24	; 0x02
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    346a:	19 82       	std	Y+1, r1	; 0x01
    346c:	2f c0       	rjmp	.+94     	; 0x34cc <vQueueUnregisterQueue+0x72>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    346e:	89 81       	ldd	r24, Y+1	; 0x01
    3470:	88 2f       	mov	r24, r24
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	88 0f       	add	r24, r24
    3476:	99 1f       	adc	r25, r25
    3478:	01 96       	adiw	r24, 0x01	; 1
    347a:	88 0f       	add	r24, r24
    347c:	99 1f       	adc	r25, r25
    347e:	fc 01       	movw	r30, r24
    3480:	ec 5e       	subi	r30, 0xEC	; 236
    3482:	fb 4f       	sbci	r31, 0xFB	; 251
    3484:	20 81       	ld	r18, Z
    3486:	31 81       	ldd	r19, Z+1	; 0x01
    3488:	8a 81       	ldd	r24, Y+2	; 0x02
    348a:	9b 81       	ldd	r25, Y+3	; 0x03
    348c:	28 17       	cp	r18, r24
    348e:	39 07       	cpc	r19, r25
    3490:	d1 f4       	brne	.+52     	; 0x34c6 <vQueueUnregisterQueue+0x6c>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
    3492:	89 81       	ldd	r24, Y+1	; 0x01
    3494:	88 2f       	mov	r24, r24
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	88 0f       	add	r24, r24
    349a:	99 1f       	adc	r25, r25
    349c:	88 0f       	add	r24, r24
    349e:	99 1f       	adc	r25, r25
    34a0:	fc 01       	movw	r30, r24
    34a2:	ec 5e       	subi	r30, 0xEC	; 236
    34a4:	fb 4f       	sbci	r31, 0xFB	; 251
    34a6:	11 82       	std	Z+1, r1	; 0x01
    34a8:	10 82       	st	Z, r1

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
    34aa:	89 81       	ldd	r24, Y+1	; 0x01
    34ac:	88 2f       	mov	r24, r24
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	88 0f       	add	r24, r24
    34b2:	99 1f       	adc	r25, r25
    34b4:	01 96       	adiw	r24, 0x01	; 1
    34b6:	88 0f       	add	r24, r24
    34b8:	99 1f       	adc	r25, r25
    34ba:	fc 01       	movw	r30, r24
    34bc:	ec 5e       	subi	r30, 0xEC	; 236
    34be:	fb 4f       	sbci	r31, 0xFB	; 251
    34c0:	11 82       	std	Z+1, r1	; 0x01
    34c2:	10 82       	st	Z, r1
    34c4:	06 c0       	rjmp	.+12     	; 0x34d2 <vQueueUnregisterQueue+0x78>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    34c6:	89 81       	ldd	r24, Y+1	; 0x01
    34c8:	8f 5f       	subi	r24, 0xFF	; 255
    34ca:	89 83       	std	Y+1, r24	; 0x01
    34cc:	89 81       	ldd	r24, Y+1	; 0x01
    34ce:	88 30       	cpi	r24, 0x08	; 8
    34d0:	70 f2       	brcs	.-100    	; 0x346e <vQueueUnregisterQueue+0x14>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    34d2:	0f 90       	pop	r0
    34d4:	0f 90       	pop	r0
    34d6:	0f 90       	pop	r0
    34d8:	cf 91       	pop	r28
    34da:	df 91       	pop	r29
    34dc:	08 95       	ret

000034de <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    34de:	8f 92       	push	r8
    34e0:	9f 92       	push	r9
    34e2:	af 92       	push	r10
    34e4:	bf 92       	push	r11
    34e6:	cf 92       	push	r12
    34e8:	df 92       	push	r13
    34ea:	ef 92       	push	r14
    34ec:	ff 92       	push	r15
    34ee:	0f 93       	push	r16
    34f0:	1f 93       	push	r17
    34f2:	df 93       	push	r29
    34f4:	cf 93       	push	r28
    34f6:	cd b7       	in	r28, 0x3d	; 61
    34f8:	de b7       	in	r29, 0x3e	; 62
    34fa:	60 97       	sbiw	r28, 0x10	; 16
    34fc:	0f b6       	in	r0, 0x3f	; 63
    34fe:	f8 94       	cli
    3500:	de bf       	out	0x3e, r29	; 62
    3502:	0f be       	out	0x3f, r0	; 63
    3504:	cd bf       	out	0x3d, r28	; 61
    3506:	9f 83       	std	Y+7, r25	; 0x07
    3508:	8e 83       	std	Y+6, r24	; 0x06
    350a:	79 87       	std	Y+9, r23	; 0x09
    350c:	68 87       	std	Y+8, r22	; 0x08
    350e:	5b 87       	std	Y+11, r21	; 0x0b
    3510:	4a 87       	std	Y+10, r20	; 0x0a
    3512:	3d 87       	std	Y+13, r19	; 0x0d
    3514:	2c 87       	std	Y+12, r18	; 0x0c
    3516:	0e 87       	std	Y+14, r16	; 0x0e
    3518:	f8 8a       	std	Y+16, r15	; 0x10
    351a:	ef 86       	std	Y+15, r14	; 0x0f
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    351c:	8a 85       	ldd	r24, Y+10	; 0x0a
    351e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3520:	0e 94 bc 0c 	call	0x1978	; 0x1978 <pvPortMalloc>
    3524:	9a 83       	std	Y+2, r25	; 0x02
    3526:	89 83       	std	Y+1, r24	; 0x01

			if( pxStack != NULL )
    3528:	89 81       	ldd	r24, Y+1	; 0x01
    352a:	9a 81       	ldd	r25, Y+2	; 0x02
    352c:	00 97       	sbiw	r24, 0x00	; 0
    352e:	b1 f0       	breq	.+44     	; 0x355c <xTaskCreate+0x7e>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    3530:	8a e2       	ldi	r24, 0x2A	; 42
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	0e 94 bc 0c 	call	0x1978	; 0x1978 <pvPortMalloc>
    3538:	9d 83       	std	Y+5, r25	; 0x05
    353a:	8c 83       	std	Y+4, r24	; 0x04

				if( pxNewTCB != NULL )
    353c:	8c 81       	ldd	r24, Y+4	; 0x04
    353e:	9d 81       	ldd	r25, Y+5	; 0x05
    3540:	00 97       	sbiw	r24, 0x00	; 0
    3542:	39 f0       	breq	.+14     	; 0x3552 <xTaskCreate+0x74>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    3544:	ec 81       	ldd	r30, Y+4	; 0x04
    3546:	fd 81       	ldd	r31, Y+5	; 0x05
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	9a 81       	ldd	r25, Y+2	; 0x02
    354c:	90 8f       	std	Z+24, r25	; 0x18
    354e:	87 8b       	std	Z+23, r24	; 0x17
    3550:	07 c0       	rjmp	.+14     	; 0x3560 <xTaskCreate+0x82>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    3552:	89 81       	ldd	r24, Y+1	; 0x01
    3554:	9a 81       	ldd	r25, Y+2	; 0x02
    3556:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <vPortFree>
    355a:	02 c0       	rjmp	.+4      	; 0x3560 <xTaskCreate+0x82>
				}
			}
			else
			{
				pxNewTCB = NULL;
    355c:	1d 82       	std	Y+5, r1	; 0x05
    355e:	1c 82       	std	Y+4, r1	; 0x04
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    3560:	8c 81       	ldd	r24, Y+4	; 0x04
    3562:	9d 81       	ldd	r25, Y+5	; 0x05
    3564:	00 97       	sbiw	r24, 0x00	; 0
    3566:	e9 f0       	breq	.+58     	; 0x35a2 <xTaskCreate+0xc4>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    3568:	8a 85       	ldd	r24, Y+10	; 0x0a
    356a:	9b 85       	ldd	r25, Y+11	; 0x0b
    356c:	9c 01       	movw	r18, r24
    356e:	40 e0       	ldi	r20, 0x00	; 0
    3570:	50 e0       	ldi	r21, 0x00	; 0
    3572:	8e 81       	ldd	r24, Y+6	; 0x06
    3574:	9f 81       	ldd	r25, Y+7	; 0x07
    3576:	68 85       	ldd	r22, Y+8	; 0x08
    3578:	79 85       	ldd	r23, Y+9	; 0x09
    357a:	ec 85       	ldd	r30, Y+12	; 0x0c
    357c:	fd 85       	ldd	r31, Y+13	; 0x0d
    357e:	af 85       	ldd	r26, Y+15	; 0x0f
    3580:	b8 89       	ldd	r27, Y+16	; 0x10
    3582:	ac 80       	ldd	r10, Y+4	; 0x04
    3584:	bd 80       	ldd	r11, Y+5	; 0x05
    3586:	8f 01       	movw	r16, r30
    3588:	ee 84       	ldd	r14, Y+14	; 0x0e
    358a:	6d 01       	movw	r12, r26
    358c:	88 24       	eor	r8, r8
    358e:	99 24       	eor	r9, r9
    3590:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    3594:	8c 81       	ldd	r24, Y+4	; 0x04
    3596:	9d 81       	ldd	r25, Y+5	; 0x05
    3598:	0e 94 a2 1b 	call	0x3744	; 0x3744 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    359c:	81 e0       	ldi	r24, 0x01	; 1
    359e:	8b 83       	std	Y+3, r24	; 0x03
    35a0:	02 c0       	rjmp	.+4      	; 0x35a6 <xTaskCreate+0xc8>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    35a2:	8f ef       	ldi	r24, 0xFF	; 255
    35a4:	8b 83       	std	Y+3, r24	; 0x03
		}

		return xReturn;
    35a6:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    35a8:	60 96       	adiw	r28, 0x10	; 16
    35aa:	0f b6       	in	r0, 0x3f	; 63
    35ac:	f8 94       	cli
    35ae:	de bf       	out	0x3e, r29	; 62
    35b0:	0f be       	out	0x3f, r0	; 63
    35b2:	cd bf       	out	0x3d, r28	; 61
    35b4:	cf 91       	pop	r28
    35b6:	df 91       	pop	r29
    35b8:	1f 91       	pop	r17
    35ba:	0f 91       	pop	r16
    35bc:	ff 90       	pop	r15
    35be:	ef 90       	pop	r14
    35c0:	df 90       	pop	r13
    35c2:	cf 90       	pop	r12
    35c4:	bf 90       	pop	r11
    35c6:	af 90       	pop	r10
    35c8:	9f 90       	pop	r9
    35ca:	8f 90       	pop	r8
    35cc:	08 95       	ret

000035ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    35ce:	8f 92       	push	r8
    35d0:	9f 92       	push	r9
    35d2:	af 92       	push	r10
    35d4:	bf 92       	push	r11
    35d6:	cf 92       	push	r12
    35d8:	df 92       	push	r13
    35da:	ef 92       	push	r14
    35dc:	0f 93       	push	r16
    35de:	1f 93       	push	r17
    35e0:	df 93       	push	r29
    35e2:	cf 93       	push	r28
    35e4:	cd b7       	in	r28, 0x3d	; 61
    35e6:	de b7       	in	r29, 0x3e	; 62
    35e8:	64 97       	sbiw	r28, 0x14	; 20
    35ea:	0f b6       	in	r0, 0x3f	; 63
    35ec:	f8 94       	cli
    35ee:	de bf       	out	0x3e, r29	; 62
    35f0:	0f be       	out	0x3f, r0	; 63
    35f2:	cd bf       	out	0x3d, r28	; 61
    35f4:	9d 83       	std	Y+5, r25	; 0x05
    35f6:	8c 83       	std	Y+4, r24	; 0x04
    35f8:	7f 83       	std	Y+7, r23	; 0x07
    35fa:	6e 83       	std	Y+6, r22	; 0x06
    35fc:	28 87       	std	Y+8, r18	; 0x08
    35fe:	39 87       	std	Y+9, r19	; 0x09
    3600:	4a 87       	std	Y+10, r20	; 0x0a
    3602:	5b 87       	std	Y+11, r21	; 0x0b
    3604:	1d 87       	std	Y+13, r17	; 0x0d
    3606:	0c 87       	std	Y+12, r16	; 0x0c
    3608:	ee 86       	std	Y+14, r14	; 0x0e
    360a:	d8 8a       	std	Y+16, r13	; 0x10
    360c:	cf 86       	std	Y+15, r12	; 0x0f
    360e:	ba 8a       	std	Y+18, r11	; 0x12
    3610:	a9 8a       	std	Y+17, r10	; 0x11
    3612:	9c 8a       	std	Y+20, r9	; 0x14
    3614:	8b 8a       	std	Y+19, r8	; 0x13
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    3616:	e9 89       	ldd	r30, Y+17	; 0x11
    3618:	fa 89       	ldd	r31, Y+18	; 0x12
    361a:	27 89       	ldd	r18, Z+23	; 0x17
    361c:	30 8d       	ldd	r19, Z+24	; 0x18
    361e:	88 85       	ldd	r24, Y+8	; 0x08
    3620:	99 85       	ldd	r25, Y+9	; 0x09
    3622:	01 97       	sbiw	r24, 0x01	; 1
    3624:	82 0f       	add	r24, r18
    3626:	93 1f       	adc	r25, r19
    3628:	9b 83       	std	Y+3, r25	; 0x03
    362a:	8a 83       	std	Y+2, r24	; 0x02
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    362c:	19 82       	std	Y+1, r1	; 0x01
    362e:	21 c0       	rjmp	.+66     	; 0x3672 <prvInitialiseNewTask+0xa4>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    3630:	89 81       	ldd	r24, Y+1	; 0x01
    3632:	48 2f       	mov	r20, r24
    3634:	50 e0       	ldi	r21, 0x00	; 0
    3636:	89 81       	ldd	r24, Y+1	; 0x01
    3638:	28 2f       	mov	r18, r24
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	8e 81       	ldd	r24, Y+6	; 0x06
    363e:	9f 81       	ldd	r25, Y+7	; 0x07
    3640:	fc 01       	movw	r30, r24
    3642:	e2 0f       	add	r30, r18
    3644:	f3 1f       	adc	r31, r19
    3646:	20 81       	ld	r18, Z
    3648:	89 89       	ldd	r24, Y+17	; 0x11
    364a:	9a 89       	ldd	r25, Y+18	; 0x12
    364c:	84 0f       	add	r24, r20
    364e:	95 1f       	adc	r25, r21
    3650:	fc 01       	movw	r30, r24
    3652:	79 96       	adiw	r30, 0x19	; 25
    3654:	20 83       	st	Z, r18

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    3656:	89 81       	ldd	r24, Y+1	; 0x01
    3658:	28 2f       	mov	r18, r24
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	8e 81       	ldd	r24, Y+6	; 0x06
    365e:	9f 81       	ldd	r25, Y+7	; 0x07
    3660:	fc 01       	movw	r30, r24
    3662:	e2 0f       	add	r30, r18
    3664:	f3 1f       	adc	r31, r19
    3666:	80 81       	ld	r24, Z
    3668:	88 23       	and	r24, r24
    366a:	31 f0       	breq	.+12     	; 0x3678 <prvInitialiseNewTask+0xaa>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    366c:	89 81       	ldd	r24, Y+1	; 0x01
    366e:	8f 5f       	subi	r24, 0xFF	; 255
    3670:	89 83       	std	Y+1, r24	; 0x01
    3672:	89 81       	ldd	r24, Y+1	; 0x01
    3674:	8a 30       	cpi	r24, 0x0A	; 10
    3676:	e0 f2       	brcs	.-72     	; 0x3630 <prvInitialiseNewTask+0x62>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    3678:	e9 89       	ldd	r30, Y+17	; 0x11
    367a:	fa 89       	ldd	r31, Y+18	; 0x12
    367c:	12 a2       	std	Z+34, r1	; 0x22

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    367e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3680:	85 30       	cpi	r24, 0x05	; 5
    3682:	10 f0       	brcs	.+4      	; 0x3688 <prvInitialiseNewTask+0xba>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    3684:	84 e0       	ldi	r24, 0x04	; 4
    3686:	8e 87       	std	Y+14, r24	; 0x0e
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    3688:	e9 89       	ldd	r30, Y+17	; 0x11
    368a:	fa 89       	ldd	r31, Y+18	; 0x12
    368c:	8e 85       	ldd	r24, Y+14	; 0x0e
    368e:	86 8b       	std	Z+22, r24	; 0x16
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    3690:	e9 89       	ldd	r30, Y+17	; 0x11
    3692:	fa 89       	ldd	r31, Y+18	; 0x12
    3694:	8e 85       	ldd	r24, Y+14	; 0x0e
    3696:	83 a3       	std	Z+35, r24	; 0x23
		pxNewTCB->uxMutexesHeld = 0;
    3698:	e9 89       	ldd	r30, Y+17	; 0x11
    369a:	fa 89       	ldd	r31, Y+18	; 0x12
    369c:	14 a2       	std	Z+36, r1	; 0x24
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    369e:	89 89       	ldd	r24, Y+17	; 0x11
    36a0:	9a 89       	ldd	r25, Y+18	; 0x12
    36a2:	02 96       	adiw	r24, 0x02	; 2
    36a4:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    36a8:	89 89       	ldd	r24, Y+17	; 0x11
    36aa:	9a 89       	ldd	r25, Y+18	; 0x12
    36ac:	0c 96       	adiw	r24, 0x0c	; 12
    36ae:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    36b2:	e9 89       	ldd	r30, Y+17	; 0x11
    36b4:	fa 89       	ldd	r31, Y+18	; 0x12
    36b6:	89 89       	ldd	r24, Y+17	; 0x11
    36b8:	9a 89       	ldd	r25, Y+18	; 0x12
    36ba:	91 87       	std	Z+9, r25	; 0x09
    36bc:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    36be:	8e 85       	ldd	r24, Y+14	; 0x0e
    36c0:	28 2f       	mov	r18, r24
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	85 e0       	ldi	r24, 0x05	; 5
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	82 1b       	sub	r24, r18
    36ca:	93 0b       	sbc	r25, r19
    36cc:	e9 89       	ldd	r30, Y+17	; 0x11
    36ce:	fa 89       	ldd	r31, Y+18	; 0x12
    36d0:	95 87       	std	Z+13, r25	; 0x0d
    36d2:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    36d4:	e9 89       	ldd	r30, Y+17	; 0x11
    36d6:	fa 89       	ldd	r31, Y+18	; 0x12
    36d8:	89 89       	ldd	r24, Y+17	; 0x11
    36da:	9a 89       	ldd	r25, Y+18	; 0x12
    36dc:	93 8b       	std	Z+19, r25	; 0x13
    36de:	82 8b       	std	Z+18, r24	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    36e0:	e9 89       	ldd	r30, Y+17	; 0x11
    36e2:	fa 89       	ldd	r31, Y+18	; 0x12
    36e4:	15 a2       	std	Z+37, r1	; 0x25
    36e6:	16 a2       	std	Z+38, r1	; 0x26
    36e8:	17 a2       	std	Z+39, r1	; 0x27
    36ea:	10 a6       	std	Z+40, r1	; 0x28
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    36ec:	e9 89       	ldd	r30, Y+17	; 0x11
    36ee:	fa 89       	ldd	r31, Y+18	; 0x12
    36f0:	11 a6       	std	Z+41, r1	; 0x29
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    36f2:	8a 81       	ldd	r24, Y+2	; 0x02
    36f4:	9b 81       	ldd	r25, Y+3	; 0x03
    36f6:	2c 81       	ldd	r18, Y+4	; 0x04
    36f8:	3d 81       	ldd	r19, Y+5	; 0x05
    36fa:	4c 85       	ldd	r20, Y+12	; 0x0c
    36fc:	5d 85       	ldd	r21, Y+13	; 0x0d
    36fe:	b9 01       	movw	r22, r18
    3700:	0e 94 88 10 	call	0x2110	; 0x2110 <pxPortInitialiseStack>
    3704:	e9 89       	ldd	r30, Y+17	; 0x11
    3706:	fa 89       	ldd	r31, Y+18	; 0x12
    3708:	91 83       	std	Z+1, r25	; 0x01
    370a:	80 83       	st	Z, r24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    370c:	8f 85       	ldd	r24, Y+15	; 0x0f
    370e:	98 89       	ldd	r25, Y+16	; 0x10
    3710:	00 97       	sbiw	r24, 0x00	; 0
    3712:	31 f0       	breq	.+12     	; 0x3720 <prvInitialiseNewTask+0x152>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    3714:	ef 85       	ldd	r30, Y+15	; 0x0f
    3716:	f8 89       	ldd	r31, Y+16	; 0x10
    3718:	89 89       	ldd	r24, Y+17	; 0x11
    371a:	9a 89       	ldd	r25, Y+18	; 0x12
    371c:	91 83       	std	Z+1, r25	; 0x01
    371e:	80 83       	st	Z, r24
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    3720:	64 96       	adiw	r28, 0x14	; 20
    3722:	0f b6       	in	r0, 0x3f	; 63
    3724:	f8 94       	cli
    3726:	de bf       	out	0x3e, r29	; 62
    3728:	0f be       	out	0x3f, r0	; 63
    372a:	cd bf       	out	0x3d, r28	; 61
    372c:	cf 91       	pop	r28
    372e:	df 91       	pop	r29
    3730:	1f 91       	pop	r17
    3732:	0f 91       	pop	r16
    3734:	ef 90       	pop	r14
    3736:	df 90       	pop	r13
    3738:	cf 90       	pop	r12
    373a:	bf 90       	pop	r11
    373c:	af 90       	pop	r10
    373e:	9f 90       	pop	r9
    3740:	8f 90       	pop	r8
    3742:	08 95       	ret

00003744 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    3744:	df 93       	push	r29
    3746:	cf 93       	push	r28
    3748:	00 d0       	rcall	.+0      	; 0x374a <prvAddNewTaskToReadyList+0x6>
    374a:	cd b7       	in	r28, 0x3d	; 61
    374c:	de b7       	in	r29, 0x3e	; 62
    374e:	9a 83       	std	Y+2, r25	; 0x02
    3750:	89 83       	std	Y+1, r24	; 0x01
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    3752:	0f b6       	in	r0, 0x3f	; 63
    3754:	f8 94       	cli
    3756:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    3758:	80 91 a2 03 	lds	r24, 0x03A2
    375c:	8f 5f       	subi	r24, 0xFF	; 255
    375e:	80 93 a2 03 	sts	0x03A2, r24
		if( pxCurrentTCB == NULL )
    3762:	80 91 9f 03 	lds	r24, 0x039F
    3766:	90 91 a0 03 	lds	r25, 0x03A0
    376a:	00 97       	sbiw	r24, 0x00	; 0
    376c:	69 f4       	brne	.+26     	; 0x3788 <prvAddNewTaskToReadyList+0x44>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    376e:	89 81       	ldd	r24, Y+1	; 0x01
    3770:	9a 81       	ldd	r25, Y+2	; 0x02
    3772:	90 93 a0 03 	sts	0x03A0, r25
    3776:	80 93 9f 03 	sts	0x039F, r24

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    377a:	80 91 a2 03 	lds	r24, 0x03A2
    377e:	81 30       	cpi	r24, 0x01	; 1
    3780:	b9 f4       	brne	.+46     	; 0x37b0 <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    3782:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <prvInitialiseTaskLists>
    3786:	14 c0       	rjmp	.+40     	; 0x37b0 <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    3788:	80 91 a6 03 	lds	r24, 0x03A6
    378c:	88 23       	and	r24, r24
    378e:	81 f4       	brne	.+32     	; 0x37b0 <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    3790:	e0 91 9f 03 	lds	r30, 0x039F
    3794:	f0 91 a0 03 	lds	r31, 0x03A0
    3798:	96 89       	ldd	r25, Z+22	; 0x16
    379a:	e9 81       	ldd	r30, Y+1	; 0x01
    379c:	fa 81       	ldd	r31, Y+2	; 0x02
    379e:	86 89       	ldd	r24, Z+22	; 0x16
    37a0:	89 17       	cp	r24, r25
    37a2:	30 f0       	brcs	.+12     	; 0x37b0 <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
    37a4:	89 81       	ldd	r24, Y+1	; 0x01
    37a6:	9a 81       	ldd	r25, Y+2	; 0x02
    37a8:	90 93 a0 03 	sts	0x03A0, r25
    37ac:	80 93 9f 03 	sts	0x039F, r24
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    37b0:	80 91 aa 03 	lds	r24, 0x03AA
    37b4:	8f 5f       	subi	r24, 0xFF	; 255
    37b6:	80 93 aa 03 	sts	0x03AA, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    37ba:	e9 81       	ldd	r30, Y+1	; 0x01
    37bc:	fa 81       	ldd	r31, Y+2	; 0x02
    37be:	96 89       	ldd	r25, Z+22	; 0x16
    37c0:	80 91 a5 03 	lds	r24, 0x03A5
    37c4:	89 17       	cp	r24, r25
    37c6:	28 f4       	brcc	.+10     	; 0x37d2 <prvAddNewTaskToReadyList+0x8e>
    37c8:	e9 81       	ldd	r30, Y+1	; 0x01
    37ca:	fa 81       	ldd	r31, Y+2	; 0x02
    37cc:	86 89       	ldd	r24, Z+22	; 0x16
    37ce:	80 93 a5 03 	sts	0x03A5, r24
    37d2:	e9 81       	ldd	r30, Y+1	; 0x01
    37d4:	fa 81       	ldd	r31, Y+2	; 0x02
    37d6:	86 89       	ldd	r24, Z+22	; 0x16
    37d8:	28 2f       	mov	r18, r24
    37da:	30 e0       	ldi	r19, 0x00	; 0
    37dc:	c9 01       	movw	r24, r18
    37de:	88 0f       	add	r24, r24
    37e0:	99 1f       	adc	r25, r25
    37e2:	88 0f       	add	r24, r24
    37e4:	99 1f       	adc	r25, r25
    37e6:	88 0f       	add	r24, r24
    37e8:	99 1f       	adc	r25, r25
    37ea:	82 0f       	add	r24, r18
    37ec:	93 1f       	adc	r25, r19
    37ee:	ac 01       	movw	r20, r24
    37f0:	40 55       	subi	r20, 0x50	; 80
    37f2:	5c 4f       	sbci	r21, 0xFC	; 252
    37f4:	89 81       	ldd	r24, Y+1	; 0x01
    37f6:	9a 81       	ldd	r25, Y+2	; 0x02
    37f8:	9c 01       	movw	r18, r24
    37fa:	2e 5f       	subi	r18, 0xFE	; 254
    37fc:	3f 4f       	sbci	r19, 0xFF	; 255
    37fe:	ca 01       	movw	r24, r20
    3800:	b9 01       	movw	r22, r18
    3802:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    3806:	0f 90       	pop	r0
    3808:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    380a:	80 91 a6 03 	lds	r24, 0x03A6
    380e:	88 23       	and	r24, r24
    3810:	61 f0       	breq	.+24     	; 0x382a <prvAddNewTaskToReadyList+0xe6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    3812:	e0 91 9f 03 	lds	r30, 0x039F
    3816:	f0 91 a0 03 	lds	r31, 0x03A0
    381a:	96 89       	ldd	r25, Z+22	; 0x16
    381c:	e9 81       	ldd	r30, Y+1	; 0x01
    381e:	fa 81       	ldd	r31, Y+2	; 0x02
    3820:	86 89       	ldd	r24, Z+22	; 0x16
    3822:	98 17       	cp	r25, r24
    3824:	10 f4       	brcc	.+4      	; 0x382a <prvAddNewTaskToReadyList+0xe6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    3826:	0e 94 47 12 	call	0x248e	; 0x248e <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    382a:	0f 90       	pop	r0
    382c:	0f 90       	pop	r0
    382e:	cf 91       	pop	r28
    3830:	df 91       	pop	r29
    3832:	08 95       	ret

00003834 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    3834:	df 93       	push	r29
    3836:	cf 93       	push	r28
    3838:	00 d0       	rcall	.+0      	; 0x383a <vTaskDelete+0x6>
    383a:	00 d0       	rcall	.+0      	; 0x383c <vTaskDelete+0x8>
    383c:	00 d0       	rcall	.+0      	; 0x383e <vTaskDelete+0xa>
    383e:	cd b7       	in	r28, 0x3d	; 61
    3840:	de b7       	in	r29, 0x3e	; 62
    3842:	9c 83       	std	Y+4, r25	; 0x04
    3844:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    3846:	0f b6       	in	r0, 0x3f	; 63
    3848:	f8 94       	cli
    384a:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    384c:	8b 81       	ldd	r24, Y+3	; 0x03
    384e:	9c 81       	ldd	r25, Y+4	; 0x04
    3850:	00 97       	sbiw	r24, 0x00	; 0
    3852:	39 f4       	brne	.+14     	; 0x3862 <vTaskDelete+0x2e>
    3854:	80 91 9f 03 	lds	r24, 0x039F
    3858:	90 91 a0 03 	lds	r25, 0x03A0
    385c:	9e 83       	std	Y+6, r25	; 0x06
    385e:	8d 83       	std	Y+5, r24	; 0x05
    3860:	04 c0       	rjmp	.+8      	; 0x386a <vTaskDelete+0x36>
    3862:	8b 81       	ldd	r24, Y+3	; 0x03
    3864:	9c 81       	ldd	r25, Y+4	; 0x04
    3866:	9e 83       	std	Y+6, r25	; 0x06
    3868:	8d 83       	std	Y+5, r24	; 0x05
    386a:	8d 81       	ldd	r24, Y+5	; 0x05
    386c:	9e 81       	ldd	r25, Y+6	; 0x06
    386e:	9a 83       	std	Y+2, r25	; 0x02
    3870:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3872:	89 81       	ldd	r24, Y+1	; 0x01
    3874:	9a 81       	ldd	r25, Y+2	; 0x02
    3876:	02 96       	adiw	r24, 0x02	; 2
    3878:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    387c:	e9 81       	ldd	r30, Y+1	; 0x01
    387e:	fa 81       	ldd	r31, Y+2	; 0x02
    3880:	84 89       	ldd	r24, Z+20	; 0x14
    3882:	95 89       	ldd	r25, Z+21	; 0x15
    3884:	00 97       	sbiw	r24, 0x00	; 0
    3886:	29 f0       	breq	.+10     	; 0x3892 <vTaskDelete+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3888:	89 81       	ldd	r24, Y+1	; 0x01
    388a:	9a 81       	ldd	r25, Y+2	; 0x02
    388c:	0c 96       	adiw	r24, 0x0c	; 12
    388e:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    3892:	80 91 aa 03 	lds	r24, 0x03AA
    3896:	8f 5f       	subi	r24, 0xFF	; 255
    3898:	80 93 aa 03 	sts	0x03AA, r24

			if( pxTCB == pxCurrentTCB )
    389c:	20 91 9f 03 	lds	r18, 0x039F
    38a0:	30 91 a0 03 	lds	r19, 0x03A0
    38a4:	89 81       	ldd	r24, Y+1	; 0x01
    38a6:	9a 81       	ldd	r25, Y+2	; 0x02
    38a8:	82 17       	cp	r24, r18
    38aa:	93 07       	cpc	r25, r19
    38ac:	81 f4       	brne	.+32     	; 0x38ce <vTaskDelete+0x9a>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    38ae:	89 81       	ldd	r24, Y+1	; 0x01
    38b0:	9a 81       	ldd	r25, Y+2	; 0x02
    38b2:	9c 01       	movw	r18, r24
    38b4:	2e 5f       	subi	r18, 0xFE	; 254
    38b6:	3f 4f       	sbci	r19, 0xFF	; 255
    38b8:	8c ef       	ldi	r24, 0xFC	; 252
    38ba:	93 e0       	ldi	r25, 0x03	; 3
    38bc:	b9 01       	movw	r22, r18
    38be:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    38c2:	80 91 a1 03 	lds	r24, 0x03A1
    38c6:	8f 5f       	subi	r24, 0xFF	; 255
    38c8:	80 93 a1 03 	sts	0x03A1, r24
    38cc:	0b c0       	rjmp	.+22     	; 0x38e4 <vTaskDelete+0xb0>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    38ce:	80 91 a2 03 	lds	r24, 0x03A2
    38d2:	81 50       	subi	r24, 0x01	; 1
    38d4:	80 93 a2 03 	sts	0x03A2, r24
				prvDeleteTCB( pxTCB );
    38d8:	89 81       	ldd	r24, Y+1	; 0x01
    38da:	9a 81       	ldd	r25, Y+2	; 0x02
    38dc:	0e 94 64 24 	call	0x48c8	; 0x48c8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    38e0:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    38e4:	0f 90       	pop	r0
    38e6:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    38e8:	80 91 a6 03 	lds	r24, 0x03A6
    38ec:	88 23       	and	r24, r24
    38ee:	59 f0       	breq	.+22     	; 0x3906 <vTaskDelete+0xd2>
		{
			if( pxTCB == pxCurrentTCB )
    38f0:	20 91 9f 03 	lds	r18, 0x039F
    38f4:	30 91 a0 03 	lds	r19, 0x03A0
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	9a 81       	ldd	r25, Y+2	; 0x02
    38fc:	82 17       	cp	r24, r18
    38fe:	93 07       	cpc	r25, r19
    3900:	11 f4       	brne	.+4      	; 0x3906 <vTaskDelete+0xd2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    3902:	0e 94 47 12 	call	0x248e	; 0x248e <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    3906:	26 96       	adiw	r28, 0x06	; 6
    3908:	0f b6       	in	r0, 0x3f	; 63
    390a:	f8 94       	cli
    390c:	de bf       	out	0x3e, r29	; 62
    390e:	0f be       	out	0x3f, r0	; 63
    3910:	cd bf       	out	0x3d, r28	; 61
    3912:	cf 91       	pop	r28
    3914:	df 91       	pop	r29
    3916:	08 95       	ret

00003918 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    3918:	df 93       	push	r29
    391a:	cf 93       	push	r28
    391c:	cd b7       	in	r28, 0x3d	; 61
    391e:	de b7       	in	r29, 0x3e	; 62
    3920:	2a 97       	sbiw	r28, 0x0a	; 10
    3922:	0f b6       	in	r0, 0x3f	; 63
    3924:	f8 94       	cli
    3926:	de bf       	out	0x3e, r29	; 62
    3928:	0f be       	out	0x3f, r0	; 63
    392a:	cd bf       	out	0x3d, r28	; 61
    392c:	98 87       	std	Y+8, r25	; 0x08
    392e:	8f 83       	std	Y+7, r24	; 0x07
    3930:	7a 87       	std	Y+10, r23	; 0x0a
    3932:	69 87       	std	Y+9, r22	; 0x09
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    3934:	1b 82       	std	Y+3, r1	; 0x03

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    3936:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    393a:	80 91 a3 03 	lds	r24, 0x03A3
    393e:	90 91 a4 03 	lds	r25, 0x03A4
    3942:	9a 83       	std	Y+2, r25	; 0x02
    3944:	89 83       	std	Y+1, r24	; 0x01

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3946:	ef 81       	ldd	r30, Y+7	; 0x07
    3948:	f8 85       	ldd	r31, Y+8	; 0x08
    394a:	20 81       	ld	r18, Z
    394c:	31 81       	ldd	r19, Z+1	; 0x01
    394e:	89 85       	ldd	r24, Y+9	; 0x09
    3950:	9a 85       	ldd	r25, Y+10	; 0x0a
    3952:	82 0f       	add	r24, r18
    3954:	93 1f       	adc	r25, r19
    3956:	9e 83       	std	Y+6, r25	; 0x06
    3958:	8d 83       	std	Y+5, r24	; 0x05

			if( xConstTickCount < *pxPreviousWakeTime )
    395a:	ef 81       	ldd	r30, Y+7	; 0x07
    395c:	f8 85       	ldd	r31, Y+8	; 0x08
    395e:	20 81       	ld	r18, Z
    3960:	31 81       	ldd	r19, Z+1	; 0x01
    3962:	89 81       	ldd	r24, Y+1	; 0x01
    3964:	9a 81       	ldd	r25, Y+2	; 0x02
    3966:	82 17       	cp	r24, r18
    3968:	93 07       	cpc	r25, r19
    396a:	98 f4       	brcc	.+38     	; 0x3992 <vTaskDelayUntil+0x7a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    396c:	ef 81       	ldd	r30, Y+7	; 0x07
    396e:	f8 85       	ldd	r31, Y+8	; 0x08
    3970:	20 81       	ld	r18, Z
    3972:	31 81       	ldd	r19, Z+1	; 0x01
    3974:	8d 81       	ldd	r24, Y+5	; 0x05
    3976:	9e 81       	ldd	r25, Y+6	; 0x06
    3978:	82 17       	cp	r24, r18
    397a:	93 07       	cpc	r25, r19
    397c:	e0 f4       	brcc	.+56     	; 0x39b6 <vTaskDelayUntil+0x9e>
    397e:	2d 81       	ldd	r18, Y+5	; 0x05
    3980:	3e 81       	ldd	r19, Y+6	; 0x06
    3982:	89 81       	ldd	r24, Y+1	; 0x01
    3984:	9a 81       	ldd	r25, Y+2	; 0x02
    3986:	82 17       	cp	r24, r18
    3988:	93 07       	cpc	r25, r19
    398a:	a8 f4       	brcc	.+42     	; 0x39b6 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	8b 83       	std	Y+3, r24	; 0x03
    3990:	12 c0       	rjmp	.+36     	; 0x39b6 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    3992:	ef 81       	ldd	r30, Y+7	; 0x07
    3994:	f8 85       	ldd	r31, Y+8	; 0x08
    3996:	20 81       	ld	r18, Z
    3998:	31 81       	ldd	r19, Z+1	; 0x01
    399a:	8d 81       	ldd	r24, Y+5	; 0x05
    399c:	9e 81       	ldd	r25, Y+6	; 0x06
    399e:	82 17       	cp	r24, r18
    39a0:	93 07       	cpc	r25, r19
    39a2:	38 f0       	brcs	.+14     	; 0x39b2 <vTaskDelayUntil+0x9a>
    39a4:	2d 81       	ldd	r18, Y+5	; 0x05
    39a6:	3e 81       	ldd	r19, Y+6	; 0x06
    39a8:	89 81       	ldd	r24, Y+1	; 0x01
    39aa:	9a 81       	ldd	r25, Y+2	; 0x02
    39ac:	82 17       	cp	r24, r18
    39ae:	93 07       	cpc	r25, r19
    39b0:	10 f4       	brcc	.+4      	; 0x39b6 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    39b2:	81 e0       	ldi	r24, 0x01	; 1
    39b4:	8b 83       	std	Y+3, r24	; 0x03
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    39b6:	ef 81       	ldd	r30, Y+7	; 0x07
    39b8:	f8 85       	ldd	r31, Y+8	; 0x08
    39ba:	8d 81       	ldd	r24, Y+5	; 0x05
    39bc:	9e 81       	ldd	r25, Y+6	; 0x06
    39be:	91 83       	std	Z+1, r25	; 0x01
    39c0:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    39c2:	8b 81       	ldd	r24, Y+3	; 0x03
    39c4:	88 23       	and	r24, r24
    39c6:	49 f0       	breq	.+18     	; 0x39da <vTaskDelayUntil+0xc2>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    39c8:	8d 81       	ldd	r24, Y+5	; 0x05
    39ca:	9e 81       	ldd	r25, Y+6	; 0x06
    39cc:	29 81       	ldd	r18, Y+1	; 0x01
    39ce:	3a 81       	ldd	r19, Y+2	; 0x02
    39d0:	82 1b       	sub	r24, r18
    39d2:	93 0b       	sbc	r25, r19
    39d4:	60 e0       	ldi	r22, 0x00	; 0
    39d6:	0e 94 9d 29 	call	0x533a	; 0x533a <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    39da:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <xTaskResumeAll>
    39de:	8c 83       	std	Y+4, r24	; 0x04

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    39e0:	8c 81       	ldd	r24, Y+4	; 0x04
    39e2:	88 23       	and	r24, r24
    39e4:	11 f4       	brne	.+4      	; 0x39ea <vTaskDelayUntil+0xd2>
		{
			portYIELD_WITHIN_API();
    39e6:	0e 94 47 12 	call	0x248e	; 0x248e <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    39ea:	2a 96       	adiw	r28, 0x0a	; 10
    39ec:	0f b6       	in	r0, 0x3f	; 63
    39ee:	f8 94       	cli
    39f0:	de bf       	out	0x3e, r29	; 62
    39f2:	0f be       	out	0x3f, r0	; 63
    39f4:	cd bf       	out	0x3d, r28	; 61
    39f6:	cf 91       	pop	r28
    39f8:	df 91       	pop	r29
    39fa:	08 95       	ret

000039fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    39fc:	df 93       	push	r29
    39fe:	cf 93       	push	r28
    3a00:	00 d0       	rcall	.+0      	; 0x3a02 <vTaskDelay+0x6>
    3a02:	0f 92       	push	r0
    3a04:	cd b7       	in	r28, 0x3d	; 61
    3a06:	de b7       	in	r29, 0x3e	; 62
    3a08:	9b 83       	std	Y+3, r25	; 0x03
    3a0a:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xAlreadyYielded = pdFALSE;
    3a0c:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    3a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a10:	9b 81       	ldd	r25, Y+3	; 0x03
    3a12:	00 97       	sbiw	r24, 0x00	; 0
    3a14:	51 f0       	breq	.+20     	; 0x3a2a <vTaskDelay+0x2e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    3a16:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    3a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a1c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a1e:	60 e0       	ldi	r22, 0x00	; 0
    3a20:	0e 94 9d 29 	call	0x533a	; 0x533a <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3a24:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <xTaskResumeAll>
    3a28:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3a2a:	89 81       	ldd	r24, Y+1	; 0x01
    3a2c:	88 23       	and	r24, r24
    3a2e:	11 f4       	brne	.+4      	; 0x3a34 <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    3a30:	0e 94 47 12 	call	0x248e	; 0x248e <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3a34:	0f 90       	pop	r0
    3a36:	0f 90       	pop	r0
    3a38:	0f 90       	pop	r0
    3a3a:	cf 91       	pop	r28
    3a3c:	df 91       	pop	r29
    3a3e:	08 95       	ret

00003a40 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
    3a40:	df 93       	push	r29
    3a42:	cf 93       	push	r28
    3a44:	cd b7       	in	r28, 0x3d	; 61
    3a46:	de b7       	in	r29, 0x3e	; 62
    3a48:	27 97       	sbiw	r28, 0x07	; 7
    3a4a:	0f b6       	in	r0, 0x3f	; 63
    3a4c:	f8 94       	cli
    3a4e:	de bf       	out	0x3e, r29	; 62
    3a50:	0f be       	out	0x3f, r0	; 63
    3a52:	cd bf       	out	0x3d, r28	; 61
    3a54:	9d 83       	std	Y+5, r25	; 0x05
    3a56:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
    3a58:	0f b6       	in	r0, 0x3f	; 63
    3a5a:	f8 94       	cli
    3a5c:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    3a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    3a60:	9d 81       	ldd	r25, Y+5	; 0x05
    3a62:	00 97       	sbiw	r24, 0x00	; 0
    3a64:	39 f4       	brne	.+14     	; 0x3a74 <uxTaskPriorityGet+0x34>
    3a66:	80 91 9f 03 	lds	r24, 0x039F
    3a6a:	90 91 a0 03 	lds	r25, 0x03A0
    3a6e:	9f 83       	std	Y+7, r25	; 0x07
    3a70:	8e 83       	std	Y+6, r24	; 0x06
    3a72:	04 c0       	rjmp	.+8      	; 0x3a7c <uxTaskPriorityGet+0x3c>
    3a74:	8c 81       	ldd	r24, Y+4	; 0x04
    3a76:	9d 81       	ldd	r25, Y+5	; 0x05
    3a78:	9f 83       	std	Y+7, r25	; 0x07
    3a7a:	8e 83       	std	Y+6, r24	; 0x06
    3a7c:	8e 81       	ldd	r24, Y+6	; 0x06
    3a7e:	9f 81       	ldd	r25, Y+7	; 0x07
    3a80:	9b 83       	std	Y+3, r25	; 0x03
    3a82:	8a 83       	std	Y+2, r24	; 0x02
			uxReturn = pxTCB->uxPriority;
    3a84:	ea 81       	ldd	r30, Y+2	; 0x02
    3a86:	fb 81       	ldd	r31, Y+3	; 0x03
    3a88:	86 89       	ldd	r24, Z+22	; 0x16
    3a8a:	89 83       	std	Y+1, r24	; 0x01
		}
		taskEXIT_CRITICAL();
    3a8c:	0f 90       	pop	r0
    3a8e:	0f be       	out	0x3f, r0	; 63

		return uxReturn;
    3a90:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3a92:	27 96       	adiw	r28, 0x07	; 7
    3a94:	0f b6       	in	r0, 0x3f	; 63
    3a96:	f8 94       	cli
    3a98:	de bf       	out	0x3e, r29	; 62
    3a9a:	0f be       	out	0x3f, r0	; 63
    3a9c:	cd bf       	out	0x3d, r28	; 61
    3a9e:	cf 91       	pop	r28
    3aa0:	df 91       	pop	r29
    3aa2:	08 95       	ret

00003aa4 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
    3aa4:	df 93       	push	r29
    3aa6:	cf 93       	push	r28
    3aa8:	cd b7       	in	r28, 0x3d	; 61
    3aaa:	de b7       	in	r29, 0x3e	; 62
    3aac:	28 97       	sbiw	r28, 0x08	; 8
    3aae:	0f b6       	in	r0, 0x3f	; 63
    3ab0:	f8 94       	cli
    3ab2:	de bf       	out	0x3e, r29	; 62
    3ab4:	0f be       	out	0x3f, r0	; 63
    3ab6:	cd bf       	out	0x3d, r28	; 61
    3ab8:	9e 83       	std	Y+6, r25	; 0x06
    3aba:	8d 83       	std	Y+5, r24	; 0x05
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
    3abc:	19 82       	std	Y+1, r1	; 0x01
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    3abe:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac2:	00 97       	sbiw	r24, 0x00	; 0
    3ac4:	39 f4       	brne	.+14     	; 0x3ad4 <uxTaskPriorityGetFromISR+0x30>
    3ac6:	80 91 9f 03 	lds	r24, 0x039F
    3aca:	90 91 a0 03 	lds	r25, 0x03A0
    3ace:	98 87       	std	Y+8, r25	; 0x08
    3ad0:	8f 83       	std	Y+7, r24	; 0x07
    3ad2:	04 c0       	rjmp	.+8      	; 0x3adc <uxTaskPriorityGetFromISR+0x38>
    3ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ad8:	98 87       	std	Y+8, r25	; 0x08
    3ada:	8f 83       	std	Y+7, r24	; 0x07
    3adc:	8f 81       	ldd	r24, Y+7	; 0x07
    3ade:	98 85       	ldd	r25, Y+8	; 0x08
    3ae0:	9c 83       	std	Y+4, r25	; 0x04
    3ae2:	8b 83       	std	Y+3, r24	; 0x03
			uxReturn = pxTCB->uxPriority;
    3ae4:	eb 81       	ldd	r30, Y+3	; 0x03
    3ae6:	fc 81       	ldd	r31, Y+4	; 0x04
    3ae8:	86 89       	ldd	r24, Z+22	; 0x16
    3aea:	8a 83       	std	Y+2, r24	; 0x02
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
    3aec:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    3aee:	28 96       	adiw	r28, 0x08	; 8
    3af0:	0f b6       	in	r0, 0x3f	; 63
    3af2:	f8 94       	cli
    3af4:	de bf       	out	0x3e, r29	; 62
    3af6:	0f be       	out	0x3f, r0	; 63
    3af8:	cd bf       	out	0x3d, r28	; 61
    3afa:	cf 91       	pop	r28
    3afc:	df 91       	pop	r29
    3afe:	08 95       	ret

00003b00 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    3b00:	df 93       	push	r29
    3b02:	cf 93       	push	r28
    3b04:	cd b7       	in	r28, 0x3d	; 61
    3b06:	de b7       	in	r29, 0x3e	; 62
    3b08:	2a 97       	sbiw	r28, 0x0a	; 10
    3b0a:	0f b6       	in	r0, 0x3f	; 63
    3b0c:	f8 94       	cli
    3b0e:	de bf       	out	0x3e, r29	; 62
    3b10:	0f be       	out	0x3f, r0	; 63
    3b12:	cd bf       	out	0x3d, r28	; 61
    3b14:	9f 83       	std	Y+7, r25	; 0x07
    3b16:	8e 83       	std	Y+6, r24	; 0x06
    3b18:	68 87       	std	Y+8, r22	; 0x08
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    3b1a:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    3b1c:	88 85       	ldd	r24, Y+8	; 0x08
    3b1e:	85 30       	cpi	r24, 0x05	; 5
    3b20:	10 f0       	brcs	.+4      	; 0x3b26 <vTaskPrioritySet+0x26>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    3b22:	84 e0       	ldi	r24, 0x04	; 4
    3b24:	88 87       	std	Y+8, r24	; 0x08
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    3b26:	0f b6       	in	r0, 0x3f	; 63
    3b28:	f8 94       	cli
    3b2a:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    3b2c:	8e 81       	ldd	r24, Y+6	; 0x06
    3b2e:	9f 81       	ldd	r25, Y+7	; 0x07
    3b30:	00 97       	sbiw	r24, 0x00	; 0
    3b32:	39 f4       	brne	.+14     	; 0x3b42 <vTaskPrioritySet+0x42>
    3b34:	80 91 9f 03 	lds	r24, 0x039F
    3b38:	90 91 a0 03 	lds	r25, 0x03A0
    3b3c:	9a 87       	std	Y+10, r25	; 0x0a
    3b3e:	89 87       	std	Y+9, r24	; 0x09
    3b40:	04 c0       	rjmp	.+8      	; 0x3b4a <vTaskPrioritySet+0x4a>
    3b42:	8e 81       	ldd	r24, Y+6	; 0x06
    3b44:	9f 81       	ldd	r25, Y+7	; 0x07
    3b46:	9a 87       	std	Y+10, r25	; 0x0a
    3b48:	89 87       	std	Y+9, r24	; 0x09
    3b4a:	89 85       	ldd	r24, Y+9	; 0x09
    3b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b4e:	9d 83       	std	Y+5, r25	; 0x05
    3b50:	8c 83       	std	Y+4, r24	; 0x04

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    3b52:	ec 81       	ldd	r30, Y+4	; 0x04
    3b54:	fd 81       	ldd	r31, Y+5	; 0x05
    3b56:	83 a1       	ldd	r24, Z+35	; 0x23
    3b58:	8b 83       	std	Y+3, r24	; 0x03
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    3b5a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b5c:	88 85       	ldd	r24, Y+8	; 0x08
    3b5e:	98 17       	cp	r25, r24
    3b60:	09 f4       	brne	.+2      	; 0x3b64 <vTaskPrioritySet+0x64>
    3b62:	8d c0       	rjmp	.+282    	; 0x3c7e <vTaskPrioritySet+0x17e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    3b64:	98 85       	ldd	r25, Y+8	; 0x08
    3b66:	8b 81       	ldd	r24, Y+3	; 0x03
    3b68:	89 17       	cp	r24, r25
    3b6a:	a0 f4       	brcc	.+40     	; 0x3b94 <vTaskPrioritySet+0x94>
				{
					if( pxTCB != pxCurrentTCB )
    3b6c:	20 91 9f 03 	lds	r18, 0x039F
    3b70:	30 91 a0 03 	lds	r19, 0x03A0
    3b74:	8c 81       	ldd	r24, Y+4	; 0x04
    3b76:	9d 81       	ldd	r25, Y+5	; 0x05
    3b78:	82 17       	cp	r24, r18
    3b7a:	93 07       	cpc	r25, r19
    3b7c:	b1 f0       	breq	.+44     	; 0x3baa <vTaskPrioritySet+0xaa>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    3b7e:	e0 91 9f 03 	lds	r30, 0x039F
    3b82:	f0 91 a0 03 	lds	r31, 0x03A0
    3b86:	96 89       	ldd	r25, Z+22	; 0x16
    3b88:	88 85       	ldd	r24, Y+8	; 0x08
    3b8a:	89 17       	cp	r24, r25
    3b8c:	70 f0       	brcs	.+28     	; 0x3baa <vTaskPrioritySet+0xaa>
						{
							xYieldRequired = pdTRUE;
    3b8e:	81 e0       	ldi	r24, 0x01	; 1
    3b90:	89 83       	std	Y+1, r24	; 0x01
    3b92:	0b c0       	rjmp	.+22     	; 0x3baa <vTaskPrioritySet+0xaa>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    3b94:	20 91 9f 03 	lds	r18, 0x039F
    3b98:	30 91 a0 03 	lds	r19, 0x03A0
    3b9c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b9e:	9d 81       	ldd	r25, Y+5	; 0x05
    3ba0:	82 17       	cp	r24, r18
    3ba2:	93 07       	cpc	r25, r19
    3ba4:	11 f4       	brne	.+4      	; 0x3baa <vTaskPrioritySet+0xaa>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	89 83       	std	Y+1, r24	; 0x01
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    3baa:	ec 81       	ldd	r30, Y+4	; 0x04
    3bac:	fd 81       	ldd	r31, Y+5	; 0x05
    3bae:	86 89       	ldd	r24, Z+22	; 0x16
    3bb0:	8a 83       	std	Y+2, r24	; 0x02

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    3bb2:	ec 81       	ldd	r30, Y+4	; 0x04
    3bb4:	fd 81       	ldd	r31, Y+5	; 0x05
    3bb6:	93 a1       	ldd	r25, Z+35	; 0x23
    3bb8:	ec 81       	ldd	r30, Y+4	; 0x04
    3bba:	fd 81       	ldd	r31, Y+5	; 0x05
    3bbc:	86 89       	ldd	r24, Z+22	; 0x16
    3bbe:	98 17       	cp	r25, r24
    3bc0:	21 f4       	brne	.+8      	; 0x3bca <vTaskPrioritySet+0xca>
					{
						pxTCB->uxPriority = uxNewPriority;
    3bc2:	ec 81       	ldd	r30, Y+4	; 0x04
    3bc4:	fd 81       	ldd	r31, Y+5	; 0x05
    3bc6:	88 85       	ldd	r24, Y+8	; 0x08
    3bc8:	86 8b       	std	Z+22, r24	; 0x16
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    3bca:	ec 81       	ldd	r30, Y+4	; 0x04
    3bcc:	fd 81       	ldd	r31, Y+5	; 0x05
    3bce:	88 85       	ldd	r24, Y+8	; 0x08
    3bd0:	83 a3       	std	Z+35, r24	; 0x23
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3bd2:	ec 81       	ldd	r30, Y+4	; 0x04
    3bd4:	fd 81       	ldd	r31, Y+5	; 0x05
    3bd6:	84 85       	ldd	r24, Z+12	; 0x0c
    3bd8:	95 85       	ldd	r25, Z+13	; 0x0d
    3bda:	99 23       	and	r25, r25
    3bdc:	5c f0       	brlt	.+22     	; 0x3bf4 <vTaskPrioritySet+0xf4>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3bde:	88 85       	ldd	r24, Y+8	; 0x08
    3be0:	28 2f       	mov	r18, r24
    3be2:	30 e0       	ldi	r19, 0x00	; 0
    3be4:	85 e0       	ldi	r24, 0x05	; 5
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	82 1b       	sub	r24, r18
    3bea:	93 0b       	sbc	r25, r19
    3bec:	ec 81       	ldd	r30, Y+4	; 0x04
    3bee:	fd 81       	ldd	r31, Y+5	; 0x05
    3bf0:	95 87       	std	Z+13, r25	; 0x0d
    3bf2:	84 87       	std	Z+12, r24	; 0x0c

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    3bf4:	ec 81       	ldd	r30, Y+4	; 0x04
    3bf6:	fd 81       	ldd	r31, Y+5	; 0x05
    3bf8:	42 85       	ldd	r20, Z+10	; 0x0a
    3bfa:	53 85       	ldd	r21, Z+11	; 0x0b
    3bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bfe:	28 2f       	mov	r18, r24
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	c9 01       	movw	r24, r18
    3c04:	88 0f       	add	r24, r24
    3c06:	99 1f       	adc	r25, r25
    3c08:	88 0f       	add	r24, r24
    3c0a:	99 1f       	adc	r25, r25
    3c0c:	88 0f       	add	r24, r24
    3c0e:	99 1f       	adc	r25, r25
    3c10:	82 0f       	add	r24, r18
    3c12:	93 1f       	adc	r25, r19
    3c14:	80 55       	subi	r24, 0x50	; 80
    3c16:	9c 4f       	sbci	r25, 0xFC	; 252
    3c18:	48 17       	cp	r20, r24
    3c1a:	59 07       	cpc	r21, r25
    3c1c:	59 f5       	brne	.+86     	; 0x3c74 <vTaskPrioritySet+0x174>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c20:	9d 81       	ldd	r25, Y+5	; 0x05
    3c22:	02 96       	adiw	r24, 0x02	; 2
    3c24:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    3c28:	ec 81       	ldd	r30, Y+4	; 0x04
    3c2a:	fd 81       	ldd	r31, Y+5	; 0x05
    3c2c:	96 89       	ldd	r25, Z+22	; 0x16
    3c2e:	80 91 a5 03 	lds	r24, 0x03A5
    3c32:	89 17       	cp	r24, r25
    3c34:	28 f4       	brcc	.+10     	; 0x3c40 <vTaskPrioritySet+0x140>
    3c36:	ec 81       	ldd	r30, Y+4	; 0x04
    3c38:	fd 81       	ldd	r31, Y+5	; 0x05
    3c3a:	86 89       	ldd	r24, Z+22	; 0x16
    3c3c:	80 93 a5 03 	sts	0x03A5, r24
    3c40:	ec 81       	ldd	r30, Y+4	; 0x04
    3c42:	fd 81       	ldd	r31, Y+5	; 0x05
    3c44:	86 89       	ldd	r24, Z+22	; 0x16
    3c46:	28 2f       	mov	r18, r24
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	c9 01       	movw	r24, r18
    3c4c:	88 0f       	add	r24, r24
    3c4e:	99 1f       	adc	r25, r25
    3c50:	88 0f       	add	r24, r24
    3c52:	99 1f       	adc	r25, r25
    3c54:	88 0f       	add	r24, r24
    3c56:	99 1f       	adc	r25, r25
    3c58:	82 0f       	add	r24, r18
    3c5a:	93 1f       	adc	r25, r19
    3c5c:	ac 01       	movw	r20, r24
    3c5e:	40 55       	subi	r20, 0x50	; 80
    3c60:	5c 4f       	sbci	r21, 0xFC	; 252
    3c62:	8c 81       	ldd	r24, Y+4	; 0x04
    3c64:	9d 81       	ldd	r25, Y+5	; 0x05
    3c66:	9c 01       	movw	r18, r24
    3c68:	2e 5f       	subi	r18, 0xFE	; 254
    3c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c6c:	ca 01       	movw	r24, r20
    3c6e:	b9 01       	movw	r22, r18
    3c70:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
    3c74:	89 81       	ldd	r24, Y+1	; 0x01
    3c76:	88 23       	and	r24, r24
    3c78:	11 f0       	breq	.+4      	; 0x3c7e <vTaskPrioritySet+0x17e>
				{
					taskYIELD_IF_USING_PREEMPTION();
    3c7a:	0e 94 47 12 	call	0x248e	; 0x248e <vPortYield>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    3c7e:	0f 90       	pop	r0
    3c80:	0f be       	out	0x3f, r0	; 63
	}
    3c82:	2a 96       	adiw	r28, 0x0a	; 10
    3c84:	0f b6       	in	r0, 0x3f	; 63
    3c86:	f8 94       	cli
    3c88:	de bf       	out	0x3e, r29	; 62
    3c8a:	0f be       	out	0x3f, r0	; 63
    3c8c:	cd bf       	out	0x3d, r28	; 61
    3c8e:	cf 91       	pop	r28
    3c90:	df 91       	pop	r29
    3c92:	08 95       	ret

00003c94 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    3c94:	df 93       	push	r29
    3c96:	cf 93       	push	r28
    3c98:	00 d0       	rcall	.+0      	; 0x3c9a <vTaskSuspend+0x6>
    3c9a:	00 d0       	rcall	.+0      	; 0x3c9c <vTaskSuspend+0x8>
    3c9c:	00 d0       	rcall	.+0      	; 0x3c9e <vTaskSuspend+0xa>
    3c9e:	cd b7       	in	r28, 0x3d	; 61
    3ca0:	de b7       	in	r29, 0x3e	; 62
    3ca2:	9c 83       	std	Y+4, r25	; 0x04
    3ca4:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    3ca6:	0f b6       	in	r0, 0x3f	; 63
    3ca8:	f8 94       	cli
    3caa:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    3cac:	8b 81       	ldd	r24, Y+3	; 0x03
    3cae:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb0:	00 97       	sbiw	r24, 0x00	; 0
    3cb2:	39 f4       	brne	.+14     	; 0x3cc2 <vTaskSuspend+0x2e>
    3cb4:	80 91 9f 03 	lds	r24, 0x039F
    3cb8:	90 91 a0 03 	lds	r25, 0x03A0
    3cbc:	9e 83       	std	Y+6, r25	; 0x06
    3cbe:	8d 83       	std	Y+5, r24	; 0x05
    3cc0:	04 c0       	rjmp	.+8      	; 0x3cca <vTaskSuspend+0x36>
    3cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    3cc6:	9e 83       	std	Y+6, r25	; 0x06
    3cc8:	8d 83       	std	Y+5, r24	; 0x05
    3cca:	8d 81       	ldd	r24, Y+5	; 0x05
    3ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    3cce:	9a 83       	std	Y+2, r25	; 0x02
    3cd0:	89 83       	std	Y+1, r24	; 0x01

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3cd2:	89 81       	ldd	r24, Y+1	; 0x01
    3cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd6:	02 96       	adiw	r24, 0x02	; 2
    3cd8:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3cdc:	e9 81       	ldd	r30, Y+1	; 0x01
    3cde:	fa 81       	ldd	r31, Y+2	; 0x02
    3ce0:	84 89       	ldd	r24, Z+20	; 0x14
    3ce2:	95 89       	ldd	r25, Z+21	; 0x15
    3ce4:	00 97       	sbiw	r24, 0x00	; 0
    3ce6:	29 f0       	breq	.+10     	; 0x3cf2 <vTaskSuspend+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3ce8:	89 81       	ldd	r24, Y+1	; 0x01
    3cea:	9a 81       	ldd	r25, Y+2	; 0x02
    3cec:	0c 96       	adiw	r24, 0x0c	; 12
    3cee:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    3cf2:	89 81       	ldd	r24, Y+1	; 0x01
    3cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf6:	9c 01       	movw	r18, r24
    3cf8:	2e 5f       	subi	r18, 0xFE	; 254
    3cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    3cfc:	85 e0       	ldi	r24, 0x05	; 5
    3cfe:	94 e0       	ldi	r25, 0x04	; 4
    3d00:	b9 01       	movw	r22, r18
    3d02:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    3d06:	0f 90       	pop	r0
    3d08:	0f be       	out	0x3f, r0	; 63

		if( xSchedulerRunning != pdFALSE )
    3d0a:	80 91 a6 03 	lds	r24, 0x03A6
    3d0e:	88 23       	and	r24, r24
    3d10:	39 f0       	breq	.+14     	; 0x3d20 <vTaskSuspend+0x8c>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    3d12:	0f b6       	in	r0, 0x3f	; 63
    3d14:	f8 94       	cli
    3d16:	0f 92       	push	r0
			{
				prvResetNextTaskUnblockTime();
    3d18:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    3d1c:	0f 90       	pop	r0
    3d1e:	0f be       	out	0x3f, r0	; 63
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    3d20:	20 91 9f 03 	lds	r18, 0x039F
    3d24:	30 91 a0 03 	lds	r19, 0x03A0
    3d28:	89 81       	ldd	r24, Y+1	; 0x01
    3d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d2c:	82 17       	cp	r24, r18
    3d2e:	93 07       	cpc	r25, r19
    3d30:	a1 f4       	brne	.+40     	; 0x3d5a <vTaskSuspend+0xc6>
		{
			if( xSchedulerRunning != pdFALSE )
    3d32:	80 91 a6 03 	lds	r24, 0x03A6
    3d36:	88 23       	and	r24, r24
    3d38:	19 f0       	breq	.+6      	; 0x3d40 <vTaskSuspend+0xac>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    3d3a:	0e 94 47 12 	call	0x248e	; 0x248e <vPortYield>
    3d3e:	0d c0       	rjmp	.+26     	; 0x3d5a <vTaskSuspend+0xc6>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    3d40:	90 91 05 04 	lds	r25, 0x0405
    3d44:	80 91 a2 03 	lds	r24, 0x03A2
    3d48:	98 17       	cp	r25, r24
    3d4a:	29 f4       	brne	.+10     	; 0x3d56 <vTaskSuspend+0xc2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    3d4c:	10 92 a0 03 	sts	0x03A0, r1
    3d50:	10 92 9f 03 	sts	0x039F, r1
    3d54:	02 c0       	rjmp	.+4      	; 0x3d5a <vTaskSuspend+0xc6>
				}
				else
				{
					vTaskSwitchContext();
    3d56:	0e 94 b5 21 	call	0x436a	; 0x436a <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3d5a:	26 96       	adiw	r28, 0x06	; 6
    3d5c:	0f b6       	in	r0, 0x3f	; 63
    3d5e:	f8 94       	cli
    3d60:	de bf       	out	0x3e, r29	; 62
    3d62:	0f be       	out	0x3f, r0	; 63
    3d64:	cd bf       	out	0x3d, r28	; 61
    3d66:	cf 91       	pop	r28
    3d68:	df 91       	pop	r29
    3d6a:	08 95       	ret

00003d6c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    3d6c:	df 93       	push	r29
    3d6e:	cf 93       	push	r28
    3d70:	00 d0       	rcall	.+0      	; 0x3d72 <prvTaskIsTaskSuspended+0x6>
    3d72:	00 d0       	rcall	.+0      	; 0x3d74 <prvTaskIsTaskSuspended+0x8>
    3d74:	0f 92       	push	r0
    3d76:	cd b7       	in	r28, 0x3d	; 61
    3d78:	de b7       	in	r29, 0x3e	; 62
    3d7a:	9d 83       	std	Y+5, r25	; 0x05
    3d7c:	8c 83       	std	Y+4, r24	; 0x04
	BaseType_t xReturn = pdFALSE;
    3d7e:	1b 82       	std	Y+3, r1	; 0x03
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
    3d80:	8c 81       	ldd	r24, Y+4	; 0x04
    3d82:	9d 81       	ldd	r25, Y+5	; 0x05
    3d84:	9a 83       	std	Y+2, r25	; 0x02
    3d86:	89 83       	std	Y+1, r24	; 0x01

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    3d88:	e9 81       	ldd	r30, Y+1	; 0x01
    3d8a:	fa 81       	ldd	r31, Y+2	; 0x02
    3d8c:	82 85       	ldd	r24, Z+10	; 0x0a
    3d8e:	93 85       	ldd	r25, Z+11	; 0x0b
    3d90:	24 e0       	ldi	r18, 0x04	; 4
    3d92:	85 30       	cpi	r24, 0x05	; 5
    3d94:	92 07       	cpc	r25, r18
    3d96:	81 f4       	brne	.+32     	; 0x3db8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    3d98:	e9 81       	ldd	r30, Y+1	; 0x01
    3d9a:	fa 81       	ldd	r31, Y+2	; 0x02
    3d9c:	84 89       	ldd	r24, Z+20	; 0x14
    3d9e:	95 89       	ldd	r25, Z+21	; 0x15
    3da0:	23 e0       	ldi	r18, 0x03	; 3
    3da2:	83 3f       	cpi	r24, 0xF3	; 243
    3da4:	92 07       	cpc	r25, r18
    3da6:	41 f0       	breq	.+16     	; 0x3db8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
    3da8:	e9 81       	ldd	r30, Y+1	; 0x01
    3daa:	fa 81       	ldd	r31, Y+2	; 0x02
    3dac:	84 89       	ldd	r24, Z+20	; 0x14
    3dae:	95 89       	ldd	r25, Z+21	; 0x15
    3db0:	00 97       	sbiw	r24, 0x00	; 0
    3db2:	11 f4       	brne	.+4      	; 0x3db8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
    3db4:	81 e0       	ldi	r24, 0x01	; 1
    3db6:	8b 83       	std	Y+3, r24	; 0x03
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    3db8:	8b 81       	ldd	r24, Y+3	; 0x03
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    3dba:	0f 90       	pop	r0
    3dbc:	0f 90       	pop	r0
    3dbe:	0f 90       	pop	r0
    3dc0:	0f 90       	pop	r0
    3dc2:	0f 90       	pop	r0
    3dc4:	cf 91       	pop	r28
    3dc6:	df 91       	pop	r29
    3dc8:	08 95       	ret

00003dca <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    3dca:	df 93       	push	r29
    3dcc:	cf 93       	push	r28
    3dce:	00 d0       	rcall	.+0      	; 0x3dd0 <vTaskResume+0x6>
    3dd0:	00 d0       	rcall	.+0      	; 0x3dd2 <vTaskResume+0x8>
    3dd2:	cd b7       	in	r28, 0x3d	; 61
    3dd4:	de b7       	in	r29, 0x3e	; 62
    3dd6:	9c 83       	std	Y+4, r25	; 0x04
    3dd8:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    3dda:	8b 81       	ldd	r24, Y+3	; 0x03
    3ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    3dde:	9a 83       	std	Y+2, r25	; 0x02
    3de0:	89 83       	std	Y+1, r24	; 0x01
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    3de2:	89 81       	ldd	r24, Y+1	; 0x01
    3de4:	9a 81       	ldd	r25, Y+2	; 0x02
    3de6:	00 97       	sbiw	r24, 0x00	; 0
    3de8:	09 f4       	brne	.+2      	; 0x3dec <vTaskResume+0x22>
    3dea:	4c c0       	rjmp	.+152    	; 0x3e84 <vTaskResume+0xba>
    3dec:	20 91 9f 03 	lds	r18, 0x039F
    3df0:	30 91 a0 03 	lds	r19, 0x03A0
    3df4:	89 81       	ldd	r24, Y+1	; 0x01
    3df6:	9a 81       	ldd	r25, Y+2	; 0x02
    3df8:	82 17       	cp	r24, r18
    3dfa:	93 07       	cpc	r25, r19
    3dfc:	09 f4       	brne	.+2      	; 0x3e00 <vTaskResume+0x36>
    3dfe:	42 c0       	rjmp	.+132    	; 0x3e84 <vTaskResume+0xba>
		{
			taskENTER_CRITICAL();
    3e00:	0f b6       	in	r0, 0x3f	; 63
    3e02:	f8 94       	cli
    3e04:	0f 92       	push	r0
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    3e06:	89 81       	ldd	r24, Y+1	; 0x01
    3e08:	9a 81       	ldd	r25, Y+2	; 0x02
    3e0a:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <prvTaskIsTaskSuspended>
    3e0e:	88 23       	and	r24, r24
    3e10:	b9 f1       	breq	.+110    	; 0x3e80 <vTaskResume+0xb6>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    3e12:	89 81       	ldd	r24, Y+1	; 0x01
    3e14:	9a 81       	ldd	r25, Y+2	; 0x02
    3e16:	02 96       	adiw	r24, 0x02	; 2
    3e18:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3e1c:	e9 81       	ldd	r30, Y+1	; 0x01
    3e1e:	fa 81       	ldd	r31, Y+2	; 0x02
    3e20:	96 89       	ldd	r25, Z+22	; 0x16
    3e22:	80 91 a5 03 	lds	r24, 0x03A5
    3e26:	89 17       	cp	r24, r25
    3e28:	28 f4       	brcc	.+10     	; 0x3e34 <vTaskResume+0x6a>
    3e2a:	e9 81       	ldd	r30, Y+1	; 0x01
    3e2c:	fa 81       	ldd	r31, Y+2	; 0x02
    3e2e:	86 89       	ldd	r24, Z+22	; 0x16
    3e30:	80 93 a5 03 	sts	0x03A5, r24
    3e34:	e9 81       	ldd	r30, Y+1	; 0x01
    3e36:	fa 81       	ldd	r31, Y+2	; 0x02
    3e38:	86 89       	ldd	r24, Z+22	; 0x16
    3e3a:	28 2f       	mov	r18, r24
    3e3c:	30 e0       	ldi	r19, 0x00	; 0
    3e3e:	c9 01       	movw	r24, r18
    3e40:	88 0f       	add	r24, r24
    3e42:	99 1f       	adc	r25, r25
    3e44:	88 0f       	add	r24, r24
    3e46:	99 1f       	adc	r25, r25
    3e48:	88 0f       	add	r24, r24
    3e4a:	99 1f       	adc	r25, r25
    3e4c:	82 0f       	add	r24, r18
    3e4e:	93 1f       	adc	r25, r19
    3e50:	ac 01       	movw	r20, r24
    3e52:	40 55       	subi	r20, 0x50	; 80
    3e54:	5c 4f       	sbci	r21, 0xFC	; 252
    3e56:	89 81       	ldd	r24, Y+1	; 0x01
    3e58:	9a 81       	ldd	r25, Y+2	; 0x02
    3e5a:	9c 01       	movw	r18, r24
    3e5c:	2e 5f       	subi	r18, 0xFE	; 254
    3e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e60:	ca 01       	movw	r24, r20
    3e62:	b9 01       	movw	r22, r18
    3e64:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3e68:	e9 81       	ldd	r30, Y+1	; 0x01
    3e6a:	fa 81       	ldd	r31, Y+2	; 0x02
    3e6c:	96 89       	ldd	r25, Z+22	; 0x16
    3e6e:	e0 91 9f 03 	lds	r30, 0x039F
    3e72:	f0 91 a0 03 	lds	r31, 0x03A0
    3e76:	86 89       	ldd	r24, Z+22	; 0x16
    3e78:	98 17       	cp	r25, r24
    3e7a:	10 f0       	brcs	.+4      	; 0x3e80 <vTaskResume+0xb6>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    3e7c:	0e 94 47 12 	call	0x248e	; 0x248e <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    3e80:	0f 90       	pop	r0
    3e82:	0f be       	out	0x3f, r0	; 63
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3e84:	0f 90       	pop	r0
    3e86:	0f 90       	pop	r0
    3e88:	0f 90       	pop	r0
    3e8a:	0f 90       	pop	r0
    3e8c:	cf 91       	pop	r28
    3e8e:	df 91       	pop	r29
    3e90:	08 95       	ret

00003e92 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    3e92:	df 93       	push	r29
    3e94:	cf 93       	push	r28
    3e96:	00 d0       	rcall	.+0      	; 0x3e98 <xTaskResumeFromISR+0x6>
    3e98:	00 d0       	rcall	.+0      	; 0x3e9a <xTaskResumeFromISR+0x8>
    3e9a:	00 d0       	rcall	.+0      	; 0x3e9c <xTaskResumeFromISR+0xa>
    3e9c:	cd b7       	in	r28, 0x3d	; 61
    3e9e:	de b7       	in	r29, 0x3e	; 62
    3ea0:	9e 83       	std	Y+6, r25	; 0x06
    3ea2:	8d 83       	std	Y+5, r24	; 0x05
	BaseType_t xYieldRequired = pdFALSE;
    3ea4:	1c 82       	std	Y+4, r1	; 0x04
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    3ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    3eaa:	9b 83       	std	Y+3, r25	; 0x03
    3eac:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3eae:	19 82       	std	Y+1, r1	; 0x01
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    3eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    3eb4:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <prvTaskIsTaskSuspended>
    3eb8:	88 23       	and	r24, r24
    3eba:	09 f4       	brne	.+2      	; 0x3ebe <xTaskResumeFromISR+0x2c>
    3ebc:	46 c0       	rjmp	.+140    	; 0x3f4a <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3ebe:	80 91 af 03 	lds	r24, 0x03AF
    3ec2:	88 23       	and	r24, r24
    3ec4:	c1 f5       	brne	.+112    	; 0x3f36 <xTaskResumeFromISR+0xa4>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3ec6:	ea 81       	ldd	r30, Y+2	; 0x02
    3ec8:	fb 81       	ldd	r31, Y+3	; 0x03
    3eca:	96 89       	ldd	r25, Z+22	; 0x16
    3ecc:	e0 91 9f 03 	lds	r30, 0x039F
    3ed0:	f0 91 a0 03 	lds	r31, 0x03A0
    3ed4:	86 89       	ldd	r24, Z+22	; 0x16
    3ed6:	98 17       	cp	r25, r24
    3ed8:	10 f0       	brcs	.+4      	; 0x3ede <xTaskResumeFromISR+0x4c>
					{
						xYieldRequired = pdTRUE;
    3eda:	81 e0       	ldi	r24, 0x01	; 1
    3edc:	8c 83       	std	Y+4, r24	; 0x04
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3ede:	8a 81       	ldd	r24, Y+2	; 0x02
    3ee0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ee2:	02 96       	adiw	r24, 0x02	; 2
    3ee4:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3ee8:	ea 81       	ldd	r30, Y+2	; 0x02
    3eea:	fb 81       	ldd	r31, Y+3	; 0x03
    3eec:	96 89       	ldd	r25, Z+22	; 0x16
    3eee:	80 91 a5 03 	lds	r24, 0x03A5
    3ef2:	89 17       	cp	r24, r25
    3ef4:	28 f4       	brcc	.+10     	; 0x3f00 <xTaskResumeFromISR+0x6e>
    3ef6:	ea 81       	ldd	r30, Y+2	; 0x02
    3ef8:	fb 81       	ldd	r31, Y+3	; 0x03
    3efa:	86 89       	ldd	r24, Z+22	; 0x16
    3efc:	80 93 a5 03 	sts	0x03A5, r24
    3f00:	ea 81       	ldd	r30, Y+2	; 0x02
    3f02:	fb 81       	ldd	r31, Y+3	; 0x03
    3f04:	86 89       	ldd	r24, Z+22	; 0x16
    3f06:	28 2f       	mov	r18, r24
    3f08:	30 e0       	ldi	r19, 0x00	; 0
    3f0a:	c9 01       	movw	r24, r18
    3f0c:	88 0f       	add	r24, r24
    3f0e:	99 1f       	adc	r25, r25
    3f10:	88 0f       	add	r24, r24
    3f12:	99 1f       	adc	r25, r25
    3f14:	88 0f       	add	r24, r24
    3f16:	99 1f       	adc	r25, r25
    3f18:	82 0f       	add	r24, r18
    3f1a:	93 1f       	adc	r25, r19
    3f1c:	ac 01       	movw	r20, r24
    3f1e:	40 55       	subi	r20, 0x50	; 80
    3f20:	5c 4f       	sbci	r21, 0xFC	; 252
    3f22:	8a 81       	ldd	r24, Y+2	; 0x02
    3f24:	9b 81       	ldd	r25, Y+3	; 0x03
    3f26:	9c 01       	movw	r18, r24
    3f28:	2e 5f       	subi	r18, 0xFE	; 254
    3f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f2c:	ca 01       	movw	r24, r20
    3f2e:	b9 01       	movw	r22, r18
    3f30:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
    3f34:	0a c0       	rjmp	.+20     	; 0x3f4a <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3f36:	8a 81       	ldd	r24, Y+2	; 0x02
    3f38:	9b 81       	ldd	r25, Y+3	; 0x03
    3f3a:	9c 01       	movw	r18, r24
    3f3c:	24 5f       	subi	r18, 0xF4	; 244
    3f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f40:	83 ef       	ldi	r24, 0xF3	; 243
    3f42:	93 e0       	ldi	r25, 0x03	; 3
    3f44:	b9 01       	movw	r22, r18
    3f46:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
    3f4a:	8c 81       	ldd	r24, Y+4	; 0x04
	}
    3f4c:	26 96       	adiw	r28, 0x06	; 6
    3f4e:	0f b6       	in	r0, 0x3f	; 63
    3f50:	f8 94       	cli
    3f52:	de bf       	out	0x3e, r29	; 62
    3f54:	0f be       	out	0x3f, r0	; 63
    3f56:	cd bf       	out	0x3d, r28	; 61
    3f58:	cf 91       	pop	r28
    3f5a:	df 91       	pop	r29
    3f5c:	08 95       	ret

00003f5e <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    3f5e:	ef 92       	push	r14
    3f60:	ff 92       	push	r15
    3f62:	0f 93       	push	r16
    3f64:	df 93       	push	r29
    3f66:	cf 93       	push	r28
    3f68:	0f 92       	push	r0
    3f6a:	cd b7       	in	r28, 0x3d	; 61
    3f6c:	de b7       	in	r29, 0x3e	; 62
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    3f6e:	84 ed       	ldi	r24, 0xD4	; 212
    3f70:	93 e2       	ldi	r25, 0x23	; 35
    3f72:	24 e6       	ldi	r18, 0x64	; 100
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	ed ea       	ldi	r30, 0xAD	; 173
    3f78:	f3 e0       	ldi	r31, 0x03	; 3
    3f7a:	b9 01       	movw	r22, r18
    3f7c:	48 ec       	ldi	r20, 0xC8	; 200
    3f7e:	50 e0       	ldi	r21, 0x00	; 0
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	30 e0       	ldi	r19, 0x00	; 0
    3f84:	00 e0       	ldi	r16, 0x00	; 0
    3f86:	7f 01       	movw	r14, r30
    3f88:	0e 94 6f 1a 	call	0x34de	; 0x34de <xTaskCreate>
    3f8c:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    3f8e:	89 81       	ldd	r24, Y+1	; 0x01
    3f90:	81 30       	cpi	r24, 0x01	; 1
    3f92:	81 f4       	brne	.+32     	; 0x3fb4 <vTaskStartScheduler+0x56>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    3f94:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    3f96:	8f ef       	ldi	r24, 0xFF	; 255
    3f98:	9f ef       	ldi	r25, 0xFF	; 255
    3f9a:	90 93 ac 03 	sts	0x03AC, r25
    3f9e:	80 93 ab 03 	sts	0x03AB, r24
		xSchedulerRunning = pdTRUE;
    3fa2:	81 e0       	ldi	r24, 0x01	; 1
    3fa4:	80 93 a6 03 	sts	0x03A6, r24
		xTickCount = ( TickType_t ) 0U;
    3fa8:	10 92 a4 03 	sts	0x03A4, r1
    3fac:	10 92 a3 03 	sts	0x03A3, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    3fb0:	0e 94 0b 12 	call	0x2416	; 0x2416 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    3fb4:	0f 90       	pop	r0
    3fb6:	cf 91       	pop	r28
    3fb8:	df 91       	pop	r29
    3fba:	0f 91       	pop	r16
    3fbc:	ff 90       	pop	r15
    3fbe:	ef 90       	pop	r14
    3fc0:	08 95       	ret

00003fc2 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3fc2:	df 93       	push	r29
    3fc4:	cf 93       	push	r28
    3fc6:	cd b7       	in	r28, 0x3d	; 61
    3fc8:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3fca:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    3fcc:	10 92 a6 03 	sts	0x03A6, r1
	vPortEndScheduler();
    3fd0:	0e 94 40 12 	call	0x2480	; 0x2480 <vPortEndScheduler>
}
    3fd4:	cf 91       	pop	r28
    3fd6:	df 91       	pop	r29
    3fd8:	08 95       	ret

00003fda <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3fda:	df 93       	push	r29
    3fdc:	cf 93       	push	r28
    3fde:	cd b7       	in	r28, 0x3d	; 61
    3fe0:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    3fe2:	80 91 af 03 	lds	r24, 0x03AF
    3fe6:	8f 5f       	subi	r24, 0xFF	; 255
    3fe8:	80 93 af 03 	sts	0x03AF, r24
}
    3fec:	cf 91       	pop	r28
    3fee:	df 91       	pop	r29
    3ff0:	08 95       	ret

00003ff2 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    3ff2:	df 93       	push	r29
    3ff4:	cf 93       	push	r28
    3ff6:	00 d0       	rcall	.+0      	; 0x3ff8 <xTaskResumeAll+0x6>
    3ff8:	00 d0       	rcall	.+0      	; 0x3ffa <xTaskResumeAll+0x8>
    3ffa:	cd b7       	in	r28, 0x3d	; 61
    3ffc:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB = NULL;
    3ffe:	1c 82       	std	Y+4, r1	; 0x04
    4000:	1b 82       	std	Y+3, r1	; 0x03
BaseType_t xAlreadyYielded = pdFALSE;
    4002:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    4004:	0f b6       	in	r0, 0x3f	; 63
    4006:	f8 94       	cli
    4008:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    400a:	80 91 af 03 	lds	r24, 0x03AF
    400e:	81 50       	subi	r24, 0x01	; 1
    4010:	80 93 af 03 	sts	0x03AF, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4014:	80 91 af 03 	lds	r24, 0x03AF
    4018:	88 23       	and	r24, r24
    401a:	09 f0       	breq	.+2      	; 0x401e <xTaskResumeAll+0x2c>
    401c:	73 c0       	rjmp	.+230    	; 0x4104 <xTaskResumeAll+0x112>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    401e:	80 91 a2 03 	lds	r24, 0x03A2
    4022:	88 23       	and	r24, r24
    4024:	09 f4       	brne	.+2      	; 0x4028 <xTaskResumeAll+0x36>
    4026:	6e c0       	rjmp	.+220    	; 0x4104 <xTaskResumeAll+0x112>
    4028:	45 c0       	rjmp	.+138    	; 0x40b4 <xTaskResumeAll+0xc2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    402a:	e0 91 f8 03 	lds	r30, 0x03F8
    402e:	f0 91 f9 03 	lds	r31, 0x03F9
    4032:	86 81       	ldd	r24, Z+6	; 0x06
    4034:	97 81       	ldd	r25, Z+7	; 0x07
    4036:	9c 83       	std	Y+4, r25	; 0x04
    4038:	8b 83       	std	Y+3, r24	; 0x03
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    403a:	8b 81       	ldd	r24, Y+3	; 0x03
    403c:	9c 81       	ldd	r25, Y+4	; 0x04
    403e:	0c 96       	adiw	r24, 0x0c	; 12
    4040:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4044:	8b 81       	ldd	r24, Y+3	; 0x03
    4046:	9c 81       	ldd	r25, Y+4	; 0x04
    4048:	02 96       	adiw	r24, 0x02	; 2
    404a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    404e:	eb 81       	ldd	r30, Y+3	; 0x03
    4050:	fc 81       	ldd	r31, Y+4	; 0x04
    4052:	96 89       	ldd	r25, Z+22	; 0x16
    4054:	80 91 a5 03 	lds	r24, 0x03A5
    4058:	89 17       	cp	r24, r25
    405a:	28 f4       	brcc	.+10     	; 0x4066 <xTaskResumeAll+0x74>
    405c:	eb 81       	ldd	r30, Y+3	; 0x03
    405e:	fc 81       	ldd	r31, Y+4	; 0x04
    4060:	86 89       	ldd	r24, Z+22	; 0x16
    4062:	80 93 a5 03 	sts	0x03A5, r24
    4066:	eb 81       	ldd	r30, Y+3	; 0x03
    4068:	fc 81       	ldd	r31, Y+4	; 0x04
    406a:	86 89       	ldd	r24, Z+22	; 0x16
    406c:	28 2f       	mov	r18, r24
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	c9 01       	movw	r24, r18
    4072:	88 0f       	add	r24, r24
    4074:	99 1f       	adc	r25, r25
    4076:	88 0f       	add	r24, r24
    4078:	99 1f       	adc	r25, r25
    407a:	88 0f       	add	r24, r24
    407c:	99 1f       	adc	r25, r25
    407e:	82 0f       	add	r24, r18
    4080:	93 1f       	adc	r25, r19
    4082:	ac 01       	movw	r20, r24
    4084:	40 55       	subi	r20, 0x50	; 80
    4086:	5c 4f       	sbci	r21, 0xFC	; 252
    4088:	8b 81       	ldd	r24, Y+3	; 0x03
    408a:	9c 81       	ldd	r25, Y+4	; 0x04
    408c:	9c 01       	movw	r18, r24
    408e:	2e 5f       	subi	r18, 0xFE	; 254
    4090:	3f 4f       	sbci	r19, 0xFF	; 255
    4092:	ca 01       	movw	r24, r20
    4094:	b9 01       	movw	r22, r18
    4096:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    409a:	eb 81       	ldd	r30, Y+3	; 0x03
    409c:	fc 81       	ldd	r31, Y+4	; 0x04
    409e:	96 89       	ldd	r25, Z+22	; 0x16
    40a0:	e0 91 9f 03 	lds	r30, 0x039F
    40a4:	f0 91 a0 03 	lds	r31, 0x03A0
    40a8:	86 89       	ldd	r24, Z+22	; 0x16
    40aa:	98 17       	cp	r25, r24
    40ac:	18 f0       	brcs	.+6      	; 0x40b4 <xTaskResumeAll+0xc2>
					{
						xYieldPending = pdTRUE;
    40ae:	81 e0       	ldi	r24, 0x01	; 1
    40b0:	80 93 a8 03 	sts	0x03A8, r24
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    40b4:	80 91 f3 03 	lds	r24, 0x03F3
    40b8:	88 23       	and	r24, r24
    40ba:	09 f0       	breq	.+2      	; 0x40be <xTaskResumeAll+0xcc>
    40bc:	b6 cf       	rjmp	.-148    	; 0x402a <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    40be:	8b 81       	ldd	r24, Y+3	; 0x03
    40c0:	9c 81       	ldd	r25, Y+4	; 0x04
    40c2:	00 97       	sbiw	r24, 0x00	; 0
    40c4:	11 f0       	breq	.+4      	; 0x40ca <xTaskResumeAll+0xd8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    40c6:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    40ca:	80 91 a7 03 	lds	r24, 0x03A7
    40ce:	89 83       	std	Y+1, r24	; 0x01

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    40d0:	89 81       	ldd	r24, Y+1	; 0x01
    40d2:	88 23       	and	r24, r24
    40d4:	79 f0       	breq	.+30     	; 0x40f4 <xTaskResumeAll+0x102>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    40d6:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <xTaskIncrementTick>
    40da:	88 23       	and	r24, r24
    40dc:	19 f0       	breq	.+6      	; 0x40e4 <xTaskResumeAll+0xf2>
							{
								xYieldPending = pdTRUE;
    40de:	81 e0       	ldi	r24, 0x01	; 1
    40e0:	80 93 a8 03 	sts	0x03A8, r24
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    40e4:	89 81       	ldd	r24, Y+1	; 0x01
    40e6:	81 50       	subi	r24, 0x01	; 1
    40e8:	89 83       	std	Y+1, r24	; 0x01
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    40ea:	89 81       	ldd	r24, Y+1	; 0x01
    40ec:	88 23       	and	r24, r24
    40ee:	99 f7       	brne	.-26     	; 0x40d6 <xTaskResumeAll+0xe4>

						uxPendedTicks = 0;
    40f0:	10 92 a7 03 	sts	0x03A7, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    40f4:	80 91 a8 03 	lds	r24, 0x03A8
    40f8:	88 23       	and	r24, r24
    40fa:	21 f0       	breq	.+8      	; 0x4104 <xTaskResumeAll+0x112>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    40fc:	81 e0       	ldi	r24, 0x01	; 1
    40fe:	8a 83       	std	Y+2, r24	; 0x02
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    4100:	0e 94 47 12 	call	0x248e	; 0x248e <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    4104:	0f 90       	pop	r0
    4106:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    4108:	8a 81       	ldd	r24, Y+2	; 0x02
}
    410a:	0f 90       	pop	r0
    410c:	0f 90       	pop	r0
    410e:	0f 90       	pop	r0
    4110:	0f 90       	pop	r0
    4112:	cf 91       	pop	r28
    4114:	df 91       	pop	r29
    4116:	08 95       	ret

00004118 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    4118:	df 93       	push	r29
    411a:	cf 93       	push	r28
    411c:	00 d0       	rcall	.+0      	; 0x411e <xTaskGetTickCount+0x6>
    411e:	cd b7       	in	r28, 0x3d	; 61
    4120:	de b7       	in	r29, 0x3e	; 62
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    4122:	0f b6       	in	r0, 0x3f	; 63
    4124:	f8 94       	cli
    4126:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    4128:	80 91 a3 03 	lds	r24, 0x03A3
    412c:	90 91 a4 03 	lds	r25, 0x03A4
    4130:	9a 83       	std	Y+2, r25	; 0x02
    4132:	89 83       	std	Y+1, r24	; 0x01
	}
	portTICK_TYPE_EXIT_CRITICAL();
    4134:	0f 90       	pop	r0
    4136:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    4138:	89 81       	ldd	r24, Y+1	; 0x01
    413a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    413c:	0f 90       	pop	r0
    413e:	0f 90       	pop	r0
    4140:	cf 91       	pop	r28
    4142:	df 91       	pop	r29
    4144:	08 95       	ret

00004146 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    4146:	df 93       	push	r29
    4148:	cf 93       	push	r28
    414a:	00 d0       	rcall	.+0      	; 0x414c <xTaskGetTickCountFromISR+0x6>
    414c:	0f 92       	push	r0
    414e:	cd b7       	in	r28, 0x3d	; 61
    4150:	de b7       	in	r29, 0x3e	; 62
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    4152:	19 82       	std	Y+1, r1	; 0x01
	{
		xReturn = xTickCount;
    4154:	80 91 a3 03 	lds	r24, 0x03A3
    4158:	90 91 a4 03 	lds	r25, 0x03A4
    415c:	9b 83       	std	Y+3, r25	; 0x03
    415e:	8a 83       	std	Y+2, r24	; 0x02
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    4160:	8a 81       	ldd	r24, Y+2	; 0x02
    4162:	9b 81       	ldd	r25, Y+3	; 0x03
}
    4164:	0f 90       	pop	r0
    4166:	0f 90       	pop	r0
    4168:	0f 90       	pop	r0
    416a:	cf 91       	pop	r28
    416c:	df 91       	pop	r29
    416e:	08 95       	ret

00004170 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    4170:	df 93       	push	r29
    4172:	cf 93       	push	r28
    4174:	cd b7       	in	r28, 0x3d	; 61
    4176:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    4178:	80 91 a2 03 	lds	r24, 0x03A2
}
    417c:	cf 91       	pop	r28
    417e:	df 91       	pop	r29
    4180:	08 95       	ret

00004182 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    4182:	df 93       	push	r29
    4184:	cf 93       	push	r28
    4186:	00 d0       	rcall	.+0      	; 0x4188 <pcTaskGetName+0x6>
    4188:	00 d0       	rcall	.+0      	; 0x418a <pcTaskGetName+0x8>
    418a:	00 d0       	rcall	.+0      	; 0x418c <pcTaskGetName+0xa>
    418c:	cd b7       	in	r28, 0x3d	; 61
    418e:	de b7       	in	r29, 0x3e	; 62
    4190:	9c 83       	std	Y+4, r25	; 0x04
    4192:	8b 83       	std	Y+3, r24	; 0x03
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    4194:	8b 81       	ldd	r24, Y+3	; 0x03
    4196:	9c 81       	ldd	r25, Y+4	; 0x04
    4198:	00 97       	sbiw	r24, 0x00	; 0
    419a:	39 f4       	brne	.+14     	; 0x41aa <pcTaskGetName+0x28>
    419c:	80 91 9f 03 	lds	r24, 0x039F
    41a0:	90 91 a0 03 	lds	r25, 0x03A0
    41a4:	9e 83       	std	Y+6, r25	; 0x06
    41a6:	8d 83       	std	Y+5, r24	; 0x05
    41a8:	04 c0       	rjmp	.+8      	; 0x41b2 <pcTaskGetName+0x30>
    41aa:	8b 81       	ldd	r24, Y+3	; 0x03
    41ac:	9c 81       	ldd	r25, Y+4	; 0x04
    41ae:	9e 83       	std	Y+6, r25	; 0x06
    41b0:	8d 83       	std	Y+5, r24	; 0x05
    41b2:	8d 81       	ldd	r24, Y+5	; 0x05
    41b4:	9e 81       	ldd	r25, Y+6	; 0x06
    41b6:	9a 83       	std	Y+2, r25	; 0x02
    41b8:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    41ba:	89 81       	ldd	r24, Y+1	; 0x01
    41bc:	9a 81       	ldd	r25, Y+2	; 0x02
    41be:	49 96       	adiw	r24, 0x19	; 25
}
    41c0:	26 96       	adiw	r28, 0x06	; 6
    41c2:	0f b6       	in	r0, 0x3f	; 63
    41c4:	f8 94       	cli
    41c6:	de bf       	out	0x3e, r29	; 62
    41c8:	0f be       	out	0x3f, r0	; 63
    41ca:	cd bf       	out	0x3d, r28	; 61
    41cc:	cf 91       	pop	r28
    41ce:	df 91       	pop	r29
    41d0:	08 95       	ret

000041d2 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    41d2:	df 93       	push	r29
    41d4:	cf 93       	push	r28
    41d6:	cd b7       	in	r28, 0x3d	; 61
    41d8:	de b7       	in	r29, 0x3e	; 62
    41da:	29 97       	sbiw	r28, 0x09	; 9
    41dc:	0f b6       	in	r0, 0x3f	; 63
    41de:	f8 94       	cli
    41e0:	de bf       	out	0x3e, r29	; 62
    41e2:	0f be       	out	0x3f, r0	; 63
    41e4:	cd bf       	out	0x3d, r28	; 61
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    41e6:	1d 82       	std	Y+5, r1	; 0x05

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    41e8:	80 91 af 03 	lds	r24, 0x03AF
    41ec:	88 23       	and	r24, r24
    41ee:	09 f0       	breq	.+2      	; 0x41f2 <xTaskIncrementTick+0x20>
    41f0:	a7 c0       	rjmp	.+334    	; 0x4340 <xTaskIncrementTick+0x16e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    41f2:	80 91 a3 03 	lds	r24, 0x03A3
    41f6:	90 91 a4 03 	lds	r25, 0x03A4
    41fa:	01 96       	adiw	r24, 0x01	; 1
    41fc:	9c 83       	std	Y+4, r25	; 0x04
    41fe:	8b 83       	std	Y+3, r24	; 0x03

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    4200:	8b 81       	ldd	r24, Y+3	; 0x03
    4202:	9c 81       	ldd	r25, Y+4	; 0x04
    4204:	90 93 a4 03 	sts	0x03A4, r25
    4208:	80 93 a3 03 	sts	0x03A3, r24

		if( xConstTickCount == ( TickType_t ) 0U )
    420c:	8b 81       	ldd	r24, Y+3	; 0x03
    420e:	9c 81       	ldd	r25, Y+4	; 0x04
    4210:	00 97       	sbiw	r24, 0x00	; 0
    4212:	d9 f4       	brne	.+54     	; 0x424a <xTaskIncrementTick+0x78>
		{
			taskSWITCH_DELAYED_LISTS();
    4214:	80 91 ef 03 	lds	r24, 0x03EF
    4218:	90 91 f0 03 	lds	r25, 0x03F0
    421c:	9a 83       	std	Y+2, r25	; 0x02
    421e:	89 83       	std	Y+1, r24	; 0x01
    4220:	80 91 f1 03 	lds	r24, 0x03F1
    4224:	90 91 f2 03 	lds	r25, 0x03F2
    4228:	90 93 f0 03 	sts	0x03F0, r25
    422c:	80 93 ef 03 	sts	0x03EF, r24
    4230:	89 81       	ldd	r24, Y+1	; 0x01
    4232:	9a 81       	ldd	r25, Y+2	; 0x02
    4234:	90 93 f2 03 	sts	0x03F2, r25
    4238:	80 93 f1 03 	sts	0x03F1, r24
    423c:	80 91 a9 03 	lds	r24, 0x03A9
    4240:	8f 5f       	subi	r24, 0xFF	; 255
    4242:	80 93 a9 03 	sts	0x03A9, r24
    4246:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    424a:	20 91 ab 03 	lds	r18, 0x03AB
    424e:	30 91 ac 03 	lds	r19, 0x03AC
    4252:	8b 81       	ldd	r24, Y+3	; 0x03
    4254:	9c 81       	ldd	r25, Y+4	; 0x04
    4256:	82 17       	cp	r24, r18
    4258:	93 07       	cpc	r25, r19
    425a:	08 f4       	brcc	.+2      	; 0x425e <xTaskIncrementTick+0x8c>
    425c:	76 c0       	rjmp	.+236    	; 0x434a <xTaskIncrementTick+0x178>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    425e:	e0 91 ef 03 	lds	r30, 0x03EF
    4262:	f0 91 f0 03 	lds	r31, 0x03F0
    4266:	80 81       	ld	r24, Z
    4268:	88 23       	and	r24, r24
    426a:	39 f4       	brne	.+14     	; 0x427a <xTaskIncrementTick+0xa8>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    426c:	8f ef       	ldi	r24, 0xFF	; 255
    426e:	9f ef       	ldi	r25, 0xFF	; 255
    4270:	90 93 ac 03 	sts	0x03AC, r25
    4274:	80 93 ab 03 	sts	0x03AB, r24
    4278:	68 c0       	rjmp	.+208    	; 0x434a <xTaskIncrementTick+0x178>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    427a:	e0 91 ef 03 	lds	r30, 0x03EF
    427e:	f0 91 f0 03 	lds	r31, 0x03F0
    4282:	05 80       	ldd	r0, Z+5	; 0x05
    4284:	f6 81       	ldd	r31, Z+6	; 0x06
    4286:	e0 2d       	mov	r30, r0
    4288:	86 81       	ldd	r24, Z+6	; 0x06
    428a:	97 81       	ldd	r25, Z+7	; 0x07
    428c:	99 87       	std	Y+9, r25	; 0x09
    428e:	88 87       	std	Y+8, r24	; 0x08
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    4290:	e8 85       	ldd	r30, Y+8	; 0x08
    4292:	f9 85       	ldd	r31, Y+9	; 0x09
    4294:	82 81       	ldd	r24, Z+2	; 0x02
    4296:	93 81       	ldd	r25, Z+3	; 0x03
    4298:	9f 83       	std	Y+7, r25	; 0x07
    429a:	8e 83       	std	Y+6, r24	; 0x06

					if( xConstTickCount < xItemValue )
    429c:	2b 81       	ldd	r18, Y+3	; 0x03
    429e:	3c 81       	ldd	r19, Y+4	; 0x04
    42a0:	8e 81       	ldd	r24, Y+6	; 0x06
    42a2:	9f 81       	ldd	r25, Y+7	; 0x07
    42a4:	28 17       	cp	r18, r24
    42a6:	39 07       	cpc	r19, r25
    42a8:	38 f4       	brcc	.+14     	; 0x42b8 <xTaskIncrementTick+0xe6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    42aa:	8e 81       	ldd	r24, Y+6	; 0x06
    42ac:	9f 81       	ldd	r25, Y+7	; 0x07
    42ae:	90 93 ac 03 	sts	0x03AC, r25
    42b2:	80 93 ab 03 	sts	0x03AB, r24
    42b6:	49 c0       	rjmp	.+146    	; 0x434a <xTaskIncrementTick+0x178>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    42b8:	88 85       	ldd	r24, Y+8	; 0x08
    42ba:	99 85       	ldd	r25, Y+9	; 0x09
    42bc:	02 96       	adiw	r24, 0x02	; 2
    42be:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    42c2:	e8 85       	ldd	r30, Y+8	; 0x08
    42c4:	f9 85       	ldd	r31, Y+9	; 0x09
    42c6:	84 89       	ldd	r24, Z+20	; 0x14
    42c8:	95 89       	ldd	r25, Z+21	; 0x15
    42ca:	00 97       	sbiw	r24, 0x00	; 0
    42cc:	29 f0       	breq	.+10     	; 0x42d8 <xTaskIncrementTick+0x106>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    42ce:	88 85       	ldd	r24, Y+8	; 0x08
    42d0:	99 85       	ldd	r25, Y+9	; 0x09
    42d2:	0c 96       	adiw	r24, 0x0c	; 12
    42d4:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    42d8:	e8 85       	ldd	r30, Y+8	; 0x08
    42da:	f9 85       	ldd	r31, Y+9	; 0x09
    42dc:	96 89       	ldd	r25, Z+22	; 0x16
    42de:	80 91 a5 03 	lds	r24, 0x03A5
    42e2:	89 17       	cp	r24, r25
    42e4:	28 f4       	brcc	.+10     	; 0x42f0 <xTaskIncrementTick+0x11e>
    42e6:	e8 85       	ldd	r30, Y+8	; 0x08
    42e8:	f9 85       	ldd	r31, Y+9	; 0x09
    42ea:	86 89       	ldd	r24, Z+22	; 0x16
    42ec:	80 93 a5 03 	sts	0x03A5, r24
    42f0:	e8 85       	ldd	r30, Y+8	; 0x08
    42f2:	f9 85       	ldd	r31, Y+9	; 0x09
    42f4:	86 89       	ldd	r24, Z+22	; 0x16
    42f6:	28 2f       	mov	r18, r24
    42f8:	30 e0       	ldi	r19, 0x00	; 0
    42fa:	c9 01       	movw	r24, r18
    42fc:	88 0f       	add	r24, r24
    42fe:	99 1f       	adc	r25, r25
    4300:	88 0f       	add	r24, r24
    4302:	99 1f       	adc	r25, r25
    4304:	88 0f       	add	r24, r24
    4306:	99 1f       	adc	r25, r25
    4308:	82 0f       	add	r24, r18
    430a:	93 1f       	adc	r25, r19
    430c:	ac 01       	movw	r20, r24
    430e:	40 55       	subi	r20, 0x50	; 80
    4310:	5c 4f       	sbci	r21, 0xFC	; 252
    4312:	88 85       	ldd	r24, Y+8	; 0x08
    4314:	99 85       	ldd	r25, Y+9	; 0x09
    4316:	9c 01       	movw	r18, r24
    4318:	2e 5f       	subi	r18, 0xFE	; 254
    431a:	3f 4f       	sbci	r19, 0xFF	; 255
    431c:	ca 01       	movw	r24, r20
    431e:	b9 01       	movw	r22, r18
    4320:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4324:	e8 85       	ldd	r30, Y+8	; 0x08
    4326:	f9 85       	ldd	r31, Y+9	; 0x09
    4328:	96 89       	ldd	r25, Z+22	; 0x16
    432a:	e0 91 9f 03 	lds	r30, 0x039F
    432e:	f0 91 a0 03 	lds	r31, 0x03A0
    4332:	86 89       	ldd	r24, Z+22	; 0x16
    4334:	98 17       	cp	r25, r24
    4336:	08 f4       	brcc	.+2      	; 0x433a <xTaskIncrementTick+0x168>
    4338:	92 cf       	rjmp	.-220    	; 0x425e <xTaskIncrementTick+0x8c>
						{
							xSwitchRequired = pdTRUE;
    433a:	81 e0       	ldi	r24, 0x01	; 1
    433c:	8d 83       	std	Y+5, r24	; 0x05
    433e:	8f cf       	rjmp	.-226    	; 0x425e <xTaskIncrementTick+0x8c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    4340:	80 91 a7 03 	lds	r24, 0x03A7
    4344:	8f 5f       	subi	r24, 0xFF	; 255
    4346:	80 93 a7 03 	sts	0x03A7, r24
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    434a:	80 91 a8 03 	lds	r24, 0x03A8
    434e:	88 23       	and	r24, r24
    4350:	11 f0       	breq	.+4      	; 0x4356 <xTaskIncrementTick+0x184>
		{
			xSwitchRequired = pdTRUE;
    4352:	81 e0       	ldi	r24, 0x01	; 1
    4354:	8d 83       	std	Y+5, r24	; 0x05
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    4356:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4358:	29 96       	adiw	r28, 0x09	; 9
    435a:	0f b6       	in	r0, 0x3f	; 63
    435c:	f8 94       	cli
    435e:	de bf       	out	0x3e, r29	; 62
    4360:	0f be       	out	0x3f, r0	; 63
    4362:	cd bf       	out	0x3d, r28	; 61
    4364:	cf 91       	pop	r28
    4366:	df 91       	pop	r29
    4368:	08 95       	ret

0000436a <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    436a:	df 93       	push	r29
    436c:	cf 93       	push	r28
    436e:	00 d0       	rcall	.+0      	; 0x4370 <vTaskSwitchContext+0x6>
    4370:	0f 92       	push	r0
    4372:	cd b7       	in	r28, 0x3d	; 61
    4374:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    4376:	80 91 af 03 	lds	r24, 0x03AF
    437a:	88 23       	and	r24, r24
    437c:	21 f0       	breq	.+8      	; 0x4386 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    437e:	81 e0       	ldi	r24, 0x01	; 1
    4380:	80 93 a8 03 	sts	0x03A8, r24
    4384:	59 c0       	rjmp	.+178    	; 0x4438 <vTaskSwitchContext+0xce>
	}
	else
	{
		xYieldPending = pdFALSE;
    4386:	10 92 a8 03 	sts	0x03A8, r1
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    438a:	80 91 a5 03 	lds	r24, 0x03A5
    438e:	8b 83       	std	Y+3, r24	; 0x03
    4390:	03 c0       	rjmp	.+6      	; 0x4398 <vTaskSwitchContext+0x2e>
    4392:	8b 81       	ldd	r24, Y+3	; 0x03
    4394:	81 50       	subi	r24, 0x01	; 1
    4396:	8b 83       	std	Y+3, r24	; 0x03
    4398:	8b 81       	ldd	r24, Y+3	; 0x03
    439a:	28 2f       	mov	r18, r24
    439c:	30 e0       	ldi	r19, 0x00	; 0
    439e:	c9 01       	movw	r24, r18
    43a0:	88 0f       	add	r24, r24
    43a2:	99 1f       	adc	r25, r25
    43a4:	88 0f       	add	r24, r24
    43a6:	99 1f       	adc	r25, r25
    43a8:	88 0f       	add	r24, r24
    43aa:	99 1f       	adc	r25, r25
    43ac:	82 0f       	add	r24, r18
    43ae:	93 1f       	adc	r25, r19
    43b0:	fc 01       	movw	r30, r24
    43b2:	e0 55       	subi	r30, 0x50	; 80
    43b4:	fc 4f       	sbci	r31, 0xFC	; 252
    43b6:	80 81       	ld	r24, Z
    43b8:	88 23       	and	r24, r24
    43ba:	59 f3       	breq	.-42     	; 0x4392 <vTaskSwitchContext+0x28>
    43bc:	8b 81       	ldd	r24, Y+3	; 0x03
    43be:	28 2f       	mov	r18, r24
    43c0:	30 e0       	ldi	r19, 0x00	; 0
    43c2:	c9 01       	movw	r24, r18
    43c4:	88 0f       	add	r24, r24
    43c6:	99 1f       	adc	r25, r25
    43c8:	88 0f       	add	r24, r24
    43ca:	99 1f       	adc	r25, r25
    43cc:	88 0f       	add	r24, r24
    43ce:	99 1f       	adc	r25, r25
    43d0:	82 0f       	add	r24, r18
    43d2:	93 1f       	adc	r25, r19
    43d4:	80 55       	subi	r24, 0x50	; 80
    43d6:	9c 4f       	sbci	r25, 0xFC	; 252
    43d8:	9a 83       	std	Y+2, r25	; 0x02
    43da:	89 83       	std	Y+1, r24	; 0x01
    43dc:	e9 81       	ldd	r30, Y+1	; 0x01
    43de:	fa 81       	ldd	r31, Y+2	; 0x02
    43e0:	01 80       	ldd	r0, Z+1	; 0x01
    43e2:	f2 81       	ldd	r31, Z+2	; 0x02
    43e4:	e0 2d       	mov	r30, r0
    43e6:	82 81       	ldd	r24, Z+2	; 0x02
    43e8:	93 81       	ldd	r25, Z+3	; 0x03
    43ea:	e9 81       	ldd	r30, Y+1	; 0x01
    43ec:	fa 81       	ldd	r31, Y+2	; 0x02
    43ee:	92 83       	std	Z+2, r25	; 0x02
    43f0:	81 83       	std	Z+1, r24	; 0x01
    43f2:	e9 81       	ldd	r30, Y+1	; 0x01
    43f4:	fa 81       	ldd	r31, Y+2	; 0x02
    43f6:	21 81       	ldd	r18, Z+1	; 0x01
    43f8:	32 81       	ldd	r19, Z+2	; 0x02
    43fa:	89 81       	ldd	r24, Y+1	; 0x01
    43fc:	9a 81       	ldd	r25, Y+2	; 0x02
    43fe:	03 96       	adiw	r24, 0x03	; 3
    4400:	28 17       	cp	r18, r24
    4402:	39 07       	cpc	r19, r25
    4404:	59 f4       	brne	.+22     	; 0x441c <vTaskSwitchContext+0xb2>
    4406:	e9 81       	ldd	r30, Y+1	; 0x01
    4408:	fa 81       	ldd	r31, Y+2	; 0x02
    440a:	01 80       	ldd	r0, Z+1	; 0x01
    440c:	f2 81       	ldd	r31, Z+2	; 0x02
    440e:	e0 2d       	mov	r30, r0
    4410:	82 81       	ldd	r24, Z+2	; 0x02
    4412:	93 81       	ldd	r25, Z+3	; 0x03
    4414:	e9 81       	ldd	r30, Y+1	; 0x01
    4416:	fa 81       	ldd	r31, Y+2	; 0x02
    4418:	92 83       	std	Z+2, r25	; 0x02
    441a:	81 83       	std	Z+1, r24	; 0x01
    441c:	e9 81       	ldd	r30, Y+1	; 0x01
    441e:	fa 81       	ldd	r31, Y+2	; 0x02
    4420:	01 80       	ldd	r0, Z+1	; 0x01
    4422:	f2 81       	ldd	r31, Z+2	; 0x02
    4424:	e0 2d       	mov	r30, r0
    4426:	86 81       	ldd	r24, Z+6	; 0x06
    4428:	97 81       	ldd	r25, Z+7	; 0x07
    442a:	90 93 a0 03 	sts	0x03A0, r25
    442e:	80 93 9f 03 	sts	0x039F, r24
    4432:	8b 81       	ldd	r24, Y+3	; 0x03
    4434:	80 93 a5 03 	sts	0x03A5, r24
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    4438:	0f 90       	pop	r0
    443a:	0f 90       	pop	r0
    443c:	0f 90       	pop	r0
    443e:	cf 91       	pop	r28
    4440:	df 91       	pop	r29
    4442:	08 95       	ret

00004444 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    4444:	df 93       	push	r29
    4446:	cf 93       	push	r28
    4448:	00 d0       	rcall	.+0      	; 0x444a <vTaskPlaceOnEventList+0x6>
    444a:	00 d0       	rcall	.+0      	; 0x444c <vTaskPlaceOnEventList+0x8>
    444c:	cd b7       	in	r28, 0x3d	; 61
    444e:	de b7       	in	r29, 0x3e	; 62
    4450:	9a 83       	std	Y+2, r25	; 0x02
    4452:	89 83       	std	Y+1, r24	; 0x01
    4454:	7c 83       	std	Y+4, r23	; 0x04
    4456:	6b 83       	std	Y+3, r22	; 0x03

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    4458:	80 91 9f 03 	lds	r24, 0x039F
    445c:	90 91 a0 03 	lds	r25, 0x03A0
    4460:	9c 01       	movw	r18, r24
    4462:	24 5f       	subi	r18, 0xF4	; 244
    4464:	3f 4f       	sbci	r19, 0xFF	; 255
    4466:	89 81       	ldd	r24, Y+1	; 0x01
    4468:	9a 81       	ldd	r25, Y+2	; 0x02
    446a:	b9 01       	movw	r22, r18
    446c:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    4470:	8b 81       	ldd	r24, Y+3	; 0x03
    4472:	9c 81       	ldd	r25, Y+4	; 0x04
    4474:	61 e0       	ldi	r22, 0x01	; 1
    4476:	0e 94 9d 29 	call	0x533a	; 0x533a <prvAddCurrentTaskToDelayedList>
}
    447a:	0f 90       	pop	r0
    447c:	0f 90       	pop	r0
    447e:	0f 90       	pop	r0
    4480:	0f 90       	pop	r0
    4482:	cf 91       	pop	r28
    4484:	df 91       	pop	r29
    4486:	08 95       	ret

00004488 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    4488:	df 93       	push	r29
    448a:	cf 93       	push	r28
    448c:	00 d0       	rcall	.+0      	; 0x448e <vTaskPlaceOnUnorderedEventList+0x6>
    448e:	00 d0       	rcall	.+0      	; 0x4490 <vTaskPlaceOnUnorderedEventList+0x8>
    4490:	00 d0       	rcall	.+0      	; 0x4492 <vTaskPlaceOnUnorderedEventList+0xa>
    4492:	cd b7       	in	r28, 0x3d	; 61
    4494:	de b7       	in	r29, 0x3e	; 62
    4496:	9a 83       	std	Y+2, r25	; 0x02
    4498:	89 83       	std	Y+1, r24	; 0x01
    449a:	7c 83       	std	Y+4, r23	; 0x04
    449c:	6b 83       	std	Y+3, r22	; 0x03
    449e:	5e 83       	std	Y+6, r21	; 0x06
    44a0:	4d 83       	std	Y+5, r20	; 0x05
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    44a2:	e0 91 9f 03 	lds	r30, 0x039F
    44a6:	f0 91 a0 03 	lds	r31, 0x03A0
    44aa:	8b 81       	ldd	r24, Y+3	; 0x03
    44ac:	9c 81       	ldd	r25, Y+4	; 0x04
    44ae:	90 68       	ori	r25, 0x80	; 128
    44b0:	95 87       	std	Z+13, r25	; 0x0d
    44b2:	84 87       	std	Z+12, r24	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    44b4:	80 91 9f 03 	lds	r24, 0x039F
    44b8:	90 91 a0 03 	lds	r25, 0x03A0
    44bc:	9c 01       	movw	r18, r24
    44be:	24 5f       	subi	r18, 0xF4	; 244
    44c0:	3f 4f       	sbci	r19, 0xFF	; 255
    44c2:	89 81       	ldd	r24, Y+1	; 0x01
    44c4:	9a 81       	ldd	r25, Y+2	; 0x02
    44c6:	b9 01       	movw	r22, r18
    44c8:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    44cc:	8d 81       	ldd	r24, Y+5	; 0x05
    44ce:	9e 81       	ldd	r25, Y+6	; 0x06
    44d0:	61 e0       	ldi	r22, 0x01	; 1
    44d2:	0e 94 9d 29 	call	0x533a	; 0x533a <prvAddCurrentTaskToDelayedList>
}
    44d6:	26 96       	adiw	r28, 0x06	; 6
    44d8:	0f b6       	in	r0, 0x3f	; 63
    44da:	f8 94       	cli
    44dc:	de bf       	out	0x3e, r29	; 62
    44de:	0f be       	out	0x3f, r0	; 63
    44e0:	cd bf       	out	0x3d, r28	; 61
    44e2:	cf 91       	pop	r28
    44e4:	df 91       	pop	r29
    44e6:	08 95       	ret

000044e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    44e8:	df 93       	push	r29
    44ea:	cf 93       	push	r28
    44ec:	00 d0       	rcall	.+0      	; 0x44ee <xTaskRemoveFromEventList+0x6>
    44ee:	00 d0       	rcall	.+0      	; 0x44f0 <xTaskRemoveFromEventList+0x8>
    44f0:	0f 92       	push	r0
    44f2:	cd b7       	in	r28, 0x3d	; 61
    44f4:	de b7       	in	r29, 0x3e	; 62
    44f6:	9d 83       	std	Y+5, r25	; 0x05
    44f8:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    44fa:	ec 81       	ldd	r30, Y+4	; 0x04
    44fc:	fd 81       	ldd	r31, Y+5	; 0x05
    44fe:	05 80       	ldd	r0, Z+5	; 0x05
    4500:	f6 81       	ldd	r31, Z+6	; 0x06
    4502:	e0 2d       	mov	r30, r0
    4504:	86 81       	ldd	r24, Z+6	; 0x06
    4506:	97 81       	ldd	r25, Z+7	; 0x07
    4508:	9b 83       	std	Y+3, r25	; 0x03
    450a:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    450c:	8a 81       	ldd	r24, Y+2	; 0x02
    450e:	9b 81       	ldd	r25, Y+3	; 0x03
    4510:	0c 96       	adiw	r24, 0x0c	; 12
    4512:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4516:	80 91 af 03 	lds	r24, 0x03AF
    451a:	88 23       	and	r24, r24
    451c:	61 f5       	brne	.+88     	; 0x4576 <xTaskRemoveFromEventList+0x8e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    451e:	8a 81       	ldd	r24, Y+2	; 0x02
    4520:	9b 81       	ldd	r25, Y+3	; 0x03
    4522:	02 96       	adiw	r24, 0x02	; 2
    4524:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    4528:	ea 81       	ldd	r30, Y+2	; 0x02
    452a:	fb 81       	ldd	r31, Y+3	; 0x03
    452c:	96 89       	ldd	r25, Z+22	; 0x16
    452e:	80 91 a5 03 	lds	r24, 0x03A5
    4532:	89 17       	cp	r24, r25
    4534:	28 f4       	brcc	.+10     	; 0x4540 <xTaskRemoveFromEventList+0x58>
    4536:	ea 81       	ldd	r30, Y+2	; 0x02
    4538:	fb 81       	ldd	r31, Y+3	; 0x03
    453a:	86 89       	ldd	r24, Z+22	; 0x16
    453c:	80 93 a5 03 	sts	0x03A5, r24
    4540:	ea 81       	ldd	r30, Y+2	; 0x02
    4542:	fb 81       	ldd	r31, Y+3	; 0x03
    4544:	86 89       	ldd	r24, Z+22	; 0x16
    4546:	28 2f       	mov	r18, r24
    4548:	30 e0       	ldi	r19, 0x00	; 0
    454a:	c9 01       	movw	r24, r18
    454c:	88 0f       	add	r24, r24
    454e:	99 1f       	adc	r25, r25
    4550:	88 0f       	add	r24, r24
    4552:	99 1f       	adc	r25, r25
    4554:	88 0f       	add	r24, r24
    4556:	99 1f       	adc	r25, r25
    4558:	82 0f       	add	r24, r18
    455a:	93 1f       	adc	r25, r19
    455c:	ac 01       	movw	r20, r24
    455e:	40 55       	subi	r20, 0x50	; 80
    4560:	5c 4f       	sbci	r21, 0xFC	; 252
    4562:	8a 81       	ldd	r24, Y+2	; 0x02
    4564:	9b 81       	ldd	r25, Y+3	; 0x03
    4566:	9c 01       	movw	r18, r24
    4568:	2e 5f       	subi	r18, 0xFE	; 254
    456a:	3f 4f       	sbci	r19, 0xFF	; 255
    456c:	ca 01       	movw	r24, r20
    456e:	b9 01       	movw	r22, r18
    4570:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
    4574:	0a c0       	rjmp	.+20     	; 0x458a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    4576:	8a 81       	ldd	r24, Y+2	; 0x02
    4578:	9b 81       	ldd	r25, Y+3	; 0x03
    457a:	9c 01       	movw	r18, r24
    457c:	24 5f       	subi	r18, 0xF4	; 244
    457e:	3f 4f       	sbci	r19, 0xFF	; 255
    4580:	83 ef       	ldi	r24, 0xF3	; 243
    4582:	93 e0       	ldi	r25, 0x03	; 3
    4584:	b9 01       	movw	r22, r18
    4586:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    458a:	ea 81       	ldd	r30, Y+2	; 0x02
    458c:	fb 81       	ldd	r31, Y+3	; 0x03
    458e:	96 89       	ldd	r25, Z+22	; 0x16
    4590:	e0 91 9f 03 	lds	r30, 0x039F
    4594:	f0 91 a0 03 	lds	r31, 0x03A0
    4598:	86 89       	ldd	r24, Z+22	; 0x16
    459a:	89 17       	cp	r24, r25
    459c:	30 f4       	brcc	.+12     	; 0x45aa <xTaskRemoveFromEventList+0xc2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    459e:	81 e0       	ldi	r24, 0x01	; 1
    45a0:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    45a2:	81 e0       	ldi	r24, 0x01	; 1
    45a4:	80 93 a8 03 	sts	0x03A8, r24
    45a8:	01 c0       	rjmp	.+2      	; 0x45ac <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		xReturn = pdFALSE;
    45aa:	19 82       	std	Y+1, r1	; 0x01
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    45ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    45ae:	0f 90       	pop	r0
    45b0:	0f 90       	pop	r0
    45b2:	0f 90       	pop	r0
    45b4:	0f 90       	pop	r0
    45b6:	0f 90       	pop	r0
    45b8:	cf 91       	pop	r28
    45ba:	df 91       	pop	r29
    45bc:	08 95       	ret

000045be <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    45be:	df 93       	push	r29
    45c0:	cf 93       	push	r28
    45c2:	cd b7       	in	r28, 0x3d	; 61
    45c4:	de b7       	in	r29, 0x3e	; 62
    45c6:	27 97       	sbiw	r28, 0x07	; 7
    45c8:	0f b6       	in	r0, 0x3f	; 63
    45ca:	f8 94       	cli
    45cc:	de bf       	out	0x3e, r29	; 62
    45ce:	0f be       	out	0x3f, r0	; 63
    45d0:	cd bf       	out	0x3d, r28	; 61
    45d2:	9d 83       	std	Y+5, r25	; 0x05
    45d4:	8c 83       	std	Y+4, r24	; 0x04
    45d6:	7f 83       	std	Y+7, r23	; 0x07
    45d8:	6e 83       	std	Y+6, r22	; 0x06
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    45da:	8e 81       	ldd	r24, Y+6	; 0x06
    45dc:	9f 81       	ldd	r25, Y+7	; 0x07
    45de:	90 68       	ori	r25, 0x80	; 128
    45e0:	ec 81       	ldd	r30, Y+4	; 0x04
    45e2:	fd 81       	ldd	r31, Y+5	; 0x05
    45e4:	91 83       	std	Z+1, r25	; 0x01
    45e6:	80 83       	st	Z, r24

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    45e8:	ec 81       	ldd	r30, Y+4	; 0x04
    45ea:	fd 81       	ldd	r31, Y+5	; 0x05
    45ec:	86 81       	ldd	r24, Z+6	; 0x06
    45ee:	97 81       	ldd	r25, Z+7	; 0x07
    45f0:	9b 83       	std	Y+3, r25	; 0x03
    45f2:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    45f4:	8c 81       	ldd	r24, Y+4	; 0x04
    45f6:	9d 81       	ldd	r25, Y+5	; 0x05
    45f8:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    45fc:	8a 81       	ldd	r24, Y+2	; 0x02
    45fe:	9b 81       	ldd	r25, Y+3	; 0x03
    4600:	02 96       	adiw	r24, 0x02	; 2
    4602:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    4606:	ea 81       	ldd	r30, Y+2	; 0x02
    4608:	fb 81       	ldd	r31, Y+3	; 0x03
    460a:	96 89       	ldd	r25, Z+22	; 0x16
    460c:	80 91 a5 03 	lds	r24, 0x03A5
    4610:	89 17       	cp	r24, r25
    4612:	28 f4       	brcc	.+10     	; 0x461e <xTaskRemoveFromUnorderedEventList+0x60>
    4614:	ea 81       	ldd	r30, Y+2	; 0x02
    4616:	fb 81       	ldd	r31, Y+3	; 0x03
    4618:	86 89       	ldd	r24, Z+22	; 0x16
    461a:	80 93 a5 03 	sts	0x03A5, r24
    461e:	ea 81       	ldd	r30, Y+2	; 0x02
    4620:	fb 81       	ldd	r31, Y+3	; 0x03
    4622:	86 89       	ldd	r24, Z+22	; 0x16
    4624:	28 2f       	mov	r18, r24
    4626:	30 e0       	ldi	r19, 0x00	; 0
    4628:	c9 01       	movw	r24, r18
    462a:	88 0f       	add	r24, r24
    462c:	99 1f       	adc	r25, r25
    462e:	88 0f       	add	r24, r24
    4630:	99 1f       	adc	r25, r25
    4632:	88 0f       	add	r24, r24
    4634:	99 1f       	adc	r25, r25
    4636:	82 0f       	add	r24, r18
    4638:	93 1f       	adc	r25, r19
    463a:	ac 01       	movw	r20, r24
    463c:	40 55       	subi	r20, 0x50	; 80
    463e:	5c 4f       	sbci	r21, 0xFC	; 252
    4640:	8a 81       	ldd	r24, Y+2	; 0x02
    4642:	9b 81       	ldd	r25, Y+3	; 0x03
    4644:	9c 01       	movw	r18, r24
    4646:	2e 5f       	subi	r18, 0xFE	; 254
    4648:	3f 4f       	sbci	r19, 0xFF	; 255
    464a:	ca 01       	movw	r24, r20
    464c:	b9 01       	movw	r22, r18
    464e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    4652:	ea 81       	ldd	r30, Y+2	; 0x02
    4654:	fb 81       	ldd	r31, Y+3	; 0x03
    4656:	96 89       	ldd	r25, Z+22	; 0x16
    4658:	e0 91 9f 03 	lds	r30, 0x039F
    465c:	f0 91 a0 03 	lds	r31, 0x03A0
    4660:	86 89       	ldd	r24, Z+22	; 0x16
    4662:	89 17       	cp	r24, r25
    4664:	30 f4       	brcc	.+12     	; 0x4672 <xTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    4666:	81 e0       	ldi	r24, 0x01	; 1
    4668:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    466a:	81 e0       	ldi	r24, 0x01	; 1
    466c:	80 93 a8 03 	sts	0x03A8, r24
    4670:	01 c0       	rjmp	.+2      	; 0x4674 <xTaskRemoveFromUnorderedEventList+0xb6>
	}
	else
	{
		xReturn = pdFALSE;
    4672:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    4674:	89 81       	ldd	r24, Y+1	; 0x01
}
    4676:	27 96       	adiw	r28, 0x07	; 7
    4678:	0f b6       	in	r0, 0x3f	; 63
    467a:	f8 94       	cli
    467c:	de bf       	out	0x3e, r29	; 62
    467e:	0f be       	out	0x3f, r0	; 63
    4680:	cd bf       	out	0x3d, r28	; 61
    4682:	cf 91       	pop	r28
    4684:	df 91       	pop	r29
    4686:	08 95       	ret

00004688 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    4688:	df 93       	push	r29
    468a:	cf 93       	push	r28
    468c:	00 d0       	rcall	.+0      	; 0x468e <vTaskSetTimeOutState+0x6>
    468e:	cd b7       	in	r28, 0x3d	; 61
    4690:	de b7       	in	r29, 0x3e	; 62
    4692:	9a 83       	std	Y+2, r25	; 0x02
    4694:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4696:	80 91 a9 03 	lds	r24, 0x03A9
    469a:	e9 81       	ldd	r30, Y+1	; 0x01
    469c:	fa 81       	ldd	r31, Y+2	; 0x02
    469e:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    46a0:	80 91 a3 03 	lds	r24, 0x03A3
    46a4:	90 91 a4 03 	lds	r25, 0x03A4
    46a8:	e9 81       	ldd	r30, Y+1	; 0x01
    46aa:	fa 81       	ldd	r31, Y+2	; 0x02
    46ac:	92 83       	std	Z+2, r25	; 0x02
    46ae:	81 83       	std	Z+1, r24	; 0x01
}
    46b0:	0f 90       	pop	r0
    46b2:	0f 90       	pop	r0
    46b4:	cf 91       	pop	r28
    46b6:	df 91       	pop	r29
    46b8:	08 95       	ret

000046ba <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    46ba:	df 93       	push	r29
    46bc:	cf 93       	push	r28
    46be:	cd b7       	in	r28, 0x3d	; 61
    46c0:	de b7       	in	r29, 0x3e	; 62
    46c2:	27 97       	sbiw	r28, 0x07	; 7
    46c4:	0f b6       	in	r0, 0x3f	; 63
    46c6:	f8 94       	cli
    46c8:	de bf       	out	0x3e, r29	; 62
    46ca:	0f be       	out	0x3f, r0	; 63
    46cc:	cd bf       	out	0x3d, r28	; 61
    46ce:	9d 83       	std	Y+5, r25	; 0x05
    46d0:	8c 83       	std	Y+4, r24	; 0x04
    46d2:	7f 83       	std	Y+7, r23	; 0x07
    46d4:	6e 83       	std	Y+6, r22	; 0x06
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    46d6:	0f b6       	in	r0, 0x3f	; 63
    46d8:	f8 94       	cli
    46da:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    46dc:	80 91 a3 03 	lds	r24, 0x03A3
    46e0:	90 91 a4 03 	lds	r25, 0x03A4
    46e4:	9a 83       	std	Y+2, r25	; 0x02
    46e6:	89 83       	std	Y+1, r24	; 0x01
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    46e8:	ee 81       	ldd	r30, Y+6	; 0x06
    46ea:	ff 81       	ldd	r31, Y+7	; 0x07
    46ec:	80 81       	ld	r24, Z
    46ee:	91 81       	ldd	r25, Z+1	; 0x01
    46f0:	2f ef       	ldi	r18, 0xFF	; 255
    46f2:	8f 3f       	cpi	r24, 0xFF	; 255
    46f4:	92 07       	cpc	r25, r18
    46f6:	11 f4       	brne	.+4      	; 0x46fc <xTaskCheckForTimeOut+0x42>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    46f8:	1b 82       	std	Y+3, r1	; 0x03
    46fa:	40 c0       	rjmp	.+128    	; 0x477c <xTaskCheckForTimeOut+0xc2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    46fc:	ec 81       	ldd	r30, Y+4	; 0x04
    46fe:	fd 81       	ldd	r31, Y+5	; 0x05
    4700:	90 81       	ld	r25, Z
    4702:	80 91 a9 03 	lds	r24, 0x03A9
    4706:	98 17       	cp	r25, r24
    4708:	61 f0       	breq	.+24     	; 0x4722 <xTaskCheckForTimeOut+0x68>
    470a:	ec 81       	ldd	r30, Y+4	; 0x04
    470c:	fd 81       	ldd	r31, Y+5	; 0x05
    470e:	21 81       	ldd	r18, Z+1	; 0x01
    4710:	32 81       	ldd	r19, Z+2	; 0x02
    4712:	89 81       	ldd	r24, Y+1	; 0x01
    4714:	9a 81       	ldd	r25, Y+2	; 0x02
    4716:	82 17       	cp	r24, r18
    4718:	93 07       	cpc	r25, r19
    471a:	18 f0       	brcs	.+6      	; 0x4722 <xTaskCheckForTimeOut+0x68>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    471c:	81 e0       	ldi	r24, 0x01	; 1
    471e:	8b 83       	std	Y+3, r24	; 0x03
    4720:	2d c0       	rjmp	.+90     	; 0x477c <xTaskCheckForTimeOut+0xc2>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    4722:	ec 81       	ldd	r30, Y+4	; 0x04
    4724:	fd 81       	ldd	r31, Y+5	; 0x05
    4726:	21 81       	ldd	r18, Z+1	; 0x01
    4728:	32 81       	ldd	r19, Z+2	; 0x02
    472a:	89 81       	ldd	r24, Y+1	; 0x01
    472c:	9a 81       	ldd	r25, Y+2	; 0x02
    472e:	ac 01       	movw	r20, r24
    4730:	42 1b       	sub	r20, r18
    4732:	53 0b       	sbc	r21, r19
    4734:	9a 01       	movw	r18, r20
    4736:	ee 81       	ldd	r30, Y+6	; 0x06
    4738:	ff 81       	ldd	r31, Y+7	; 0x07
    473a:	80 81       	ld	r24, Z
    473c:	91 81       	ldd	r25, Z+1	; 0x01
    473e:	28 17       	cp	r18, r24
    4740:	39 07       	cpc	r19, r25
    4742:	d0 f4       	brcc	.+52     	; 0x4778 <xTaskCheckForTimeOut+0xbe>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    4744:	ee 81       	ldd	r30, Y+6	; 0x06
    4746:	ff 81       	ldd	r31, Y+7	; 0x07
    4748:	40 81       	ld	r20, Z
    474a:	51 81       	ldd	r21, Z+1	; 0x01
    474c:	ec 81       	ldd	r30, Y+4	; 0x04
    474e:	fd 81       	ldd	r31, Y+5	; 0x05
    4750:	21 81       	ldd	r18, Z+1	; 0x01
    4752:	32 81       	ldd	r19, Z+2	; 0x02
    4754:	89 81       	ldd	r24, Y+1	; 0x01
    4756:	9a 81       	ldd	r25, Y+2	; 0x02
    4758:	b9 01       	movw	r22, r18
    475a:	68 1b       	sub	r22, r24
    475c:	79 0b       	sbc	r23, r25
    475e:	cb 01       	movw	r24, r22
    4760:	84 0f       	add	r24, r20
    4762:	95 1f       	adc	r25, r21
    4764:	ee 81       	ldd	r30, Y+6	; 0x06
    4766:	ff 81       	ldd	r31, Y+7	; 0x07
    4768:	91 83       	std	Z+1, r25	; 0x01
    476a:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    476c:	8c 81       	ldd	r24, Y+4	; 0x04
    476e:	9d 81       	ldd	r25, Y+5	; 0x05
    4770:	0e 94 44 23 	call	0x4688	; 0x4688 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    4774:	1b 82       	std	Y+3, r1	; 0x03
    4776:	02 c0       	rjmp	.+4      	; 0x477c <xTaskCheckForTimeOut+0xc2>
		}
		else
		{
			xReturn = pdTRUE;
    4778:	81 e0       	ldi	r24, 0x01	; 1
    477a:	8b 83       	std	Y+3, r24	; 0x03
		}
	}
	taskEXIT_CRITICAL();
    477c:	0f 90       	pop	r0
    477e:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    4780:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4782:	27 96       	adiw	r28, 0x07	; 7
    4784:	0f b6       	in	r0, 0x3f	; 63
    4786:	f8 94       	cli
    4788:	de bf       	out	0x3e, r29	; 62
    478a:	0f be       	out	0x3f, r0	; 63
    478c:	cd bf       	out	0x3d, r28	; 61
    478e:	cf 91       	pop	r28
    4790:	df 91       	pop	r29
    4792:	08 95       	ret

00004794 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    4794:	df 93       	push	r29
    4796:	cf 93       	push	r28
    4798:	cd b7       	in	r28, 0x3d	; 61
    479a:	de b7       	in	r29, 0x3e	; 62
	xYieldPending = pdTRUE;
    479c:	81 e0       	ldi	r24, 0x01	; 1
    479e:	80 93 a8 03 	sts	0x03A8, r24
}
    47a2:	cf 91       	pop	r28
    47a4:	df 91       	pop	r29
    47a6:	08 95       	ret

000047a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    47a8:	df 93       	push	r29
    47aa:	cf 93       	push	r28
    47ac:	00 d0       	rcall	.+0      	; 0x47ae <prvIdleTask+0x6>
    47ae:	cd b7       	in	r28, 0x3d	; 61
    47b0:	de b7       	in	r29, 0x3e	; 62
    47b2:	9a 83       	std	Y+2, r25	; 0x02
    47b4:	89 83       	std	Y+1, r24	; 0x01

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    47b6:	0e 94 25 24 	call	0x484a	; 0x484a <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    47ba:	80 91 b0 03 	lds	r24, 0x03B0
    47be:	82 30       	cpi	r24, 0x02	; 2
    47c0:	d0 f3       	brcs	.-12     	; 0x47b6 <prvIdleTask+0xe>
			{
				taskYIELD();
    47c2:	0e 94 47 12 	call	0x248e	; 0x248e <vPortYield>
    47c6:	f7 cf       	rjmp	.-18     	; 0x47b6 <prvIdleTask+0xe>

000047c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    47c8:	df 93       	push	r29
    47ca:	cf 93       	push	r28
    47cc:	0f 92       	push	r0
    47ce:	cd b7       	in	r28, 0x3d	; 61
    47d0:	de b7       	in	r29, 0x3e	; 62
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    47d2:	19 82       	std	Y+1, r1	; 0x01
    47d4:	13 c0       	rjmp	.+38     	; 0x47fc <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    47d6:	89 81       	ldd	r24, Y+1	; 0x01
    47d8:	28 2f       	mov	r18, r24
    47da:	30 e0       	ldi	r19, 0x00	; 0
    47dc:	c9 01       	movw	r24, r18
    47de:	88 0f       	add	r24, r24
    47e0:	99 1f       	adc	r25, r25
    47e2:	88 0f       	add	r24, r24
    47e4:	99 1f       	adc	r25, r25
    47e6:	88 0f       	add	r24, r24
    47e8:	99 1f       	adc	r25, r25
    47ea:	82 0f       	add	r24, r18
    47ec:	93 1f       	adc	r25, r19
    47ee:	80 55       	subi	r24, 0x50	; 80
    47f0:	9c 4f       	sbci	r25, 0xFC	; 252
    47f2:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    47f6:	89 81       	ldd	r24, Y+1	; 0x01
    47f8:	8f 5f       	subi	r24, 0xFF	; 255
    47fa:	89 83       	std	Y+1, r24	; 0x01
    47fc:	89 81       	ldd	r24, Y+1	; 0x01
    47fe:	85 30       	cpi	r24, 0x05	; 5
    4800:	50 f3       	brcs	.-44     	; 0x47d6 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    4802:	8d ed       	ldi	r24, 0xDD	; 221
    4804:	93 e0       	ldi	r25, 0x03	; 3
    4806:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    480a:	86 ee       	ldi	r24, 0xE6	; 230
    480c:	93 e0       	ldi	r25, 0x03	; 3
    480e:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    4812:	83 ef       	ldi	r24, 0xF3	; 243
    4814:	93 e0       	ldi	r25, 0x03	; 3
    4816:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    481a:	8c ef       	ldi	r24, 0xFC	; 252
    481c:	93 e0       	ldi	r25, 0x03	; 3
    481e:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    4822:	85 e0       	ldi	r24, 0x05	; 5
    4824:	94 e0       	ldi	r25, 0x04	; 4
    4826:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    482a:	8d ed       	ldi	r24, 0xDD	; 221
    482c:	93 e0       	ldi	r25, 0x03	; 3
    482e:	90 93 f0 03 	sts	0x03F0, r25
    4832:	80 93 ef 03 	sts	0x03EF, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    4836:	86 ee       	ldi	r24, 0xE6	; 230
    4838:	93 e0       	ldi	r25, 0x03	; 3
    483a:	90 93 f2 03 	sts	0x03F2, r25
    483e:	80 93 f1 03 	sts	0x03F1, r24
}
    4842:	0f 90       	pop	r0
    4844:	cf 91       	pop	r28
    4846:	df 91       	pop	r29
    4848:	08 95       	ret

0000484a <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    484a:	df 93       	push	r29
    484c:	cf 93       	push	r28
    484e:	00 d0       	rcall	.+0      	; 0x4850 <prvCheckTasksWaitingTermination+0x6>
    4850:	0f 92       	push	r0
    4852:	cd b7       	in	r28, 0x3d	; 61
    4854:	de b7       	in	r29, 0x3e	; 62
    4856:	2e c0       	rjmp	.+92     	; 0x48b4 <prvCheckTasksWaitingTermination+0x6a>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    4858:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    485c:	80 91 fc 03 	lds	r24, 0x03FC
    4860:	1b 82       	std	Y+3, r1	; 0x03
    4862:	88 23       	and	r24, r24
    4864:	11 f4       	brne	.+4      	; 0x486a <prvCheckTasksWaitingTermination+0x20>
    4866:	81 e0       	ldi	r24, 0x01	; 1
    4868:	8b 83       	std	Y+3, r24	; 0x03
			}
			( void ) xTaskResumeAll();
    486a:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    486e:	8b 81       	ldd	r24, Y+3	; 0x03
    4870:	88 23       	and	r24, r24
    4872:	01 f5       	brne	.+64     	; 0x48b4 <prvCheckTasksWaitingTermination+0x6a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    4874:	0f b6       	in	r0, 0x3f	; 63
    4876:	f8 94       	cli
    4878:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    487a:	e0 91 01 04 	lds	r30, 0x0401
    487e:	f0 91 02 04 	lds	r31, 0x0402
    4882:	86 81       	ldd	r24, Z+6	; 0x06
    4884:	97 81       	ldd	r25, Z+7	; 0x07
    4886:	9a 83       	std	Y+2, r25	; 0x02
    4888:	89 83       	std	Y+1, r24	; 0x01
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    488a:	89 81       	ldd	r24, Y+1	; 0x01
    488c:	9a 81       	ldd	r25, Y+2	; 0x02
    488e:	02 96       	adiw	r24, 0x02	; 2
    4890:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
					--uxCurrentNumberOfTasks;
    4894:	80 91 a2 03 	lds	r24, 0x03A2
    4898:	81 50       	subi	r24, 0x01	; 1
    489a:	80 93 a2 03 	sts	0x03A2, r24
					--uxDeletedTasksWaitingCleanUp;
    489e:	80 91 a1 03 	lds	r24, 0x03A1
    48a2:	81 50       	subi	r24, 0x01	; 1
    48a4:	80 93 a1 03 	sts	0x03A1, r24
				}
				taskEXIT_CRITICAL();
    48a8:	0f 90       	pop	r0
    48aa:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    48ac:	89 81       	ldd	r24, Y+1	; 0x01
    48ae:	9a 81       	ldd	r25, Y+2	; 0x02
    48b0:	0e 94 64 24 	call	0x48c8	; 0x48c8 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    48b4:	80 91 a1 03 	lds	r24, 0x03A1
    48b8:	88 23       	and	r24, r24
    48ba:	71 f6       	brne	.-100    	; 0x4858 <prvCheckTasksWaitingTermination+0xe>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    48bc:	0f 90       	pop	r0
    48be:	0f 90       	pop	r0
    48c0:	0f 90       	pop	r0
    48c2:	cf 91       	pop	r28
    48c4:	df 91       	pop	r29
    48c6:	08 95       	ret

000048c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    48c8:	df 93       	push	r29
    48ca:	cf 93       	push	r28
    48cc:	00 d0       	rcall	.+0      	; 0x48ce <prvDeleteTCB+0x6>
    48ce:	cd b7       	in	r28, 0x3d	; 61
    48d0:	de b7       	in	r29, 0x3e	; 62
    48d2:	9a 83       	std	Y+2, r25	; 0x02
    48d4:	89 83       	std	Y+1, r24	; 0x01

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    48d6:	e9 81       	ldd	r30, Y+1	; 0x01
    48d8:	fa 81       	ldd	r31, Y+2	; 0x02
    48da:	87 89       	ldd	r24, Z+23	; 0x17
    48dc:	90 8d       	ldd	r25, Z+24	; 0x18
    48de:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <vPortFree>
			vPortFree( pxTCB );
    48e2:	89 81       	ldd	r24, Y+1	; 0x01
    48e4:	9a 81       	ldd	r25, Y+2	; 0x02
    48e6:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    48ea:	0f 90       	pop	r0
    48ec:	0f 90       	pop	r0
    48ee:	cf 91       	pop	r28
    48f0:	df 91       	pop	r29
    48f2:	08 95       	ret

000048f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    48f4:	df 93       	push	r29
    48f6:	cf 93       	push	r28
    48f8:	00 d0       	rcall	.+0      	; 0x48fa <prvResetNextTaskUnblockTime+0x6>
    48fa:	cd b7       	in	r28, 0x3d	; 61
    48fc:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    48fe:	e0 91 ef 03 	lds	r30, 0x03EF
    4902:	f0 91 f0 03 	lds	r31, 0x03F0
    4906:	80 81       	ld	r24, Z
    4908:	88 23       	and	r24, r24
    490a:	39 f4       	brne	.+14     	; 0x491a <prvResetNextTaskUnblockTime+0x26>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    490c:	8f ef       	ldi	r24, 0xFF	; 255
    490e:	9f ef       	ldi	r25, 0xFF	; 255
    4910:	90 93 ac 03 	sts	0x03AC, r25
    4914:	80 93 ab 03 	sts	0x03AB, r24
    4918:	13 c0       	rjmp	.+38     	; 0x4940 <prvResetNextTaskUnblockTime+0x4c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    491a:	e0 91 ef 03 	lds	r30, 0x03EF
    491e:	f0 91 f0 03 	lds	r31, 0x03F0
    4922:	05 80       	ldd	r0, Z+5	; 0x05
    4924:	f6 81       	ldd	r31, Z+6	; 0x06
    4926:	e0 2d       	mov	r30, r0
    4928:	86 81       	ldd	r24, Z+6	; 0x06
    492a:	97 81       	ldd	r25, Z+7	; 0x07
    492c:	9a 83       	std	Y+2, r25	; 0x02
    492e:	89 83       	std	Y+1, r24	; 0x01
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    4930:	e9 81       	ldd	r30, Y+1	; 0x01
    4932:	fa 81       	ldd	r31, Y+2	; 0x02
    4934:	82 81       	ldd	r24, Z+2	; 0x02
    4936:	93 81       	ldd	r25, Z+3	; 0x03
    4938:	90 93 ac 03 	sts	0x03AC, r25
    493c:	80 93 ab 03 	sts	0x03AB, r24
	}
}
    4940:	0f 90       	pop	r0
    4942:	0f 90       	pop	r0
    4944:	cf 91       	pop	r28
    4946:	df 91       	pop	r29
    4948:	08 95       	ret

0000494a <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    494a:	df 93       	push	r29
    494c:	cf 93       	push	r28
    494e:	00 d0       	rcall	.+0      	; 0x4950 <xTaskGetCurrentTaskHandle+0x6>
    4950:	cd b7       	in	r28, 0x3d	; 61
    4952:	de b7       	in	r29, 0x3e	; 62
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    4954:	80 91 9f 03 	lds	r24, 0x039F
    4958:	90 91 a0 03 	lds	r25, 0x03A0
    495c:	9a 83       	std	Y+2, r25	; 0x02
    495e:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
    4960:	89 81       	ldd	r24, Y+1	; 0x01
    4962:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    4964:	0f 90       	pop	r0
    4966:	0f 90       	pop	r0
    4968:	cf 91       	pop	r28
    496a:	df 91       	pop	r29
    496c:	08 95       	ret

0000496e <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    496e:	df 93       	push	r29
    4970:	cf 93       	push	r28
    4972:	00 d0       	rcall	.+0      	; 0x4974 <vTaskPriorityInherit+0x6>
    4974:	00 d0       	rcall	.+0      	; 0x4976 <vTaskPriorityInherit+0x8>
    4976:	cd b7       	in	r28, 0x3d	; 61
    4978:	de b7       	in	r29, 0x3e	; 62
    497a:	9c 83       	std	Y+4, r25	; 0x04
    497c:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    497e:	8b 81       	ldd	r24, Y+3	; 0x03
    4980:	9c 81       	ldd	r25, Y+4	; 0x04
    4982:	9a 83       	std	Y+2, r25	; 0x02
    4984:	89 83       	std	Y+1, r24	; 0x01

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    4986:	8b 81       	ldd	r24, Y+3	; 0x03
    4988:	9c 81       	ldd	r25, Y+4	; 0x04
    498a:	00 97       	sbiw	r24, 0x00	; 0
    498c:	09 f4       	brne	.+2      	; 0x4990 <vTaskPriorityInherit+0x22>
    498e:	73 c0       	rjmp	.+230    	; 0x4a76 <vTaskPriorityInherit+0x108>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    4990:	e9 81       	ldd	r30, Y+1	; 0x01
    4992:	fa 81       	ldd	r31, Y+2	; 0x02
    4994:	96 89       	ldd	r25, Z+22	; 0x16
    4996:	e0 91 9f 03 	lds	r30, 0x039F
    499a:	f0 91 a0 03 	lds	r31, 0x03A0
    499e:	86 89       	ldd	r24, Z+22	; 0x16
    49a0:	98 17       	cp	r25, r24
    49a2:	08 f0       	brcs	.+2      	; 0x49a6 <vTaskPriorityInherit+0x38>
    49a4:	68 c0       	rjmp	.+208    	; 0x4a76 <vTaskPriorityInherit+0x108>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    49a6:	e9 81       	ldd	r30, Y+1	; 0x01
    49a8:	fa 81       	ldd	r31, Y+2	; 0x02
    49aa:	84 85       	ldd	r24, Z+12	; 0x0c
    49ac:	95 85       	ldd	r25, Z+13	; 0x0d
    49ae:	99 23       	and	r25, r25
    49b0:	7c f0       	brlt	.+30     	; 0x49d0 <vTaskPriorityInherit+0x62>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    49b2:	e0 91 9f 03 	lds	r30, 0x039F
    49b6:	f0 91 a0 03 	lds	r31, 0x03A0
    49ba:	86 89       	ldd	r24, Z+22	; 0x16
    49bc:	28 2f       	mov	r18, r24
    49be:	30 e0       	ldi	r19, 0x00	; 0
    49c0:	85 e0       	ldi	r24, 0x05	; 5
    49c2:	90 e0       	ldi	r25, 0x00	; 0
    49c4:	82 1b       	sub	r24, r18
    49c6:	93 0b       	sbc	r25, r19
    49c8:	e9 81       	ldd	r30, Y+1	; 0x01
    49ca:	fa 81       	ldd	r31, Y+2	; 0x02
    49cc:	95 87       	std	Z+13, r25	; 0x0d
    49ce:	84 87       	std	Z+12, r24	; 0x0c
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    49d0:	e9 81       	ldd	r30, Y+1	; 0x01
    49d2:	fa 81       	ldd	r31, Y+2	; 0x02
    49d4:	42 85       	ldd	r20, Z+10	; 0x0a
    49d6:	53 85       	ldd	r21, Z+11	; 0x0b
    49d8:	e9 81       	ldd	r30, Y+1	; 0x01
    49da:	fa 81       	ldd	r31, Y+2	; 0x02
    49dc:	86 89       	ldd	r24, Z+22	; 0x16
    49de:	28 2f       	mov	r18, r24
    49e0:	30 e0       	ldi	r19, 0x00	; 0
    49e2:	c9 01       	movw	r24, r18
    49e4:	88 0f       	add	r24, r24
    49e6:	99 1f       	adc	r25, r25
    49e8:	88 0f       	add	r24, r24
    49ea:	99 1f       	adc	r25, r25
    49ec:	88 0f       	add	r24, r24
    49ee:	99 1f       	adc	r25, r25
    49f0:	82 0f       	add	r24, r18
    49f2:	93 1f       	adc	r25, r19
    49f4:	80 55       	subi	r24, 0x50	; 80
    49f6:	9c 4f       	sbci	r25, 0xFC	; 252
    49f8:	48 17       	cp	r20, r24
    49fa:	59 07       	cpc	r21, r25
    49fc:	a1 f5       	brne	.+104    	; 0x4a66 <vTaskPriorityInherit+0xf8>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    49fe:	89 81       	ldd	r24, Y+1	; 0x01
    4a00:	9a 81       	ldd	r25, Y+2	; 0x02
    4a02:	02 96       	adiw	r24, 0x02	; 2
    4a04:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4a08:	e0 91 9f 03 	lds	r30, 0x039F
    4a0c:	f0 91 a0 03 	lds	r31, 0x03A0
    4a10:	86 89       	ldd	r24, Z+22	; 0x16
    4a12:	e9 81       	ldd	r30, Y+1	; 0x01
    4a14:	fa 81       	ldd	r31, Y+2	; 0x02
    4a16:	86 8b       	std	Z+22, r24	; 0x16
					prvAddTaskToReadyList( pxTCB );
    4a18:	e9 81       	ldd	r30, Y+1	; 0x01
    4a1a:	fa 81       	ldd	r31, Y+2	; 0x02
    4a1c:	96 89       	ldd	r25, Z+22	; 0x16
    4a1e:	80 91 a5 03 	lds	r24, 0x03A5
    4a22:	89 17       	cp	r24, r25
    4a24:	28 f4       	brcc	.+10     	; 0x4a30 <vTaskPriorityInherit+0xc2>
    4a26:	e9 81       	ldd	r30, Y+1	; 0x01
    4a28:	fa 81       	ldd	r31, Y+2	; 0x02
    4a2a:	86 89       	ldd	r24, Z+22	; 0x16
    4a2c:	80 93 a5 03 	sts	0x03A5, r24
    4a30:	e9 81       	ldd	r30, Y+1	; 0x01
    4a32:	fa 81       	ldd	r31, Y+2	; 0x02
    4a34:	86 89       	ldd	r24, Z+22	; 0x16
    4a36:	28 2f       	mov	r18, r24
    4a38:	30 e0       	ldi	r19, 0x00	; 0
    4a3a:	c9 01       	movw	r24, r18
    4a3c:	88 0f       	add	r24, r24
    4a3e:	99 1f       	adc	r25, r25
    4a40:	88 0f       	add	r24, r24
    4a42:	99 1f       	adc	r25, r25
    4a44:	88 0f       	add	r24, r24
    4a46:	99 1f       	adc	r25, r25
    4a48:	82 0f       	add	r24, r18
    4a4a:	93 1f       	adc	r25, r19
    4a4c:	ac 01       	movw	r20, r24
    4a4e:	40 55       	subi	r20, 0x50	; 80
    4a50:	5c 4f       	sbci	r21, 0xFC	; 252
    4a52:	89 81       	ldd	r24, Y+1	; 0x01
    4a54:	9a 81       	ldd	r25, Y+2	; 0x02
    4a56:	9c 01       	movw	r18, r24
    4a58:	2e 5f       	subi	r18, 0xFE	; 254
    4a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a5c:	ca 01       	movw	r24, r20
    4a5e:	b9 01       	movw	r22, r18
    4a60:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
    4a64:	08 c0       	rjmp	.+16     	; 0x4a76 <vTaskPriorityInherit+0x108>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4a66:	e0 91 9f 03 	lds	r30, 0x039F
    4a6a:	f0 91 a0 03 	lds	r31, 0x03A0
    4a6e:	86 89       	ldd	r24, Z+22	; 0x16
    4a70:	e9 81       	ldd	r30, Y+1	; 0x01
    4a72:	fa 81       	ldd	r31, Y+2	; 0x02
    4a74:	86 8b       	std	Z+22, r24	; 0x16
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4a76:	0f 90       	pop	r0
    4a78:	0f 90       	pop	r0
    4a7a:	0f 90       	pop	r0
    4a7c:	0f 90       	pop	r0
    4a7e:	cf 91       	pop	r28
    4a80:	df 91       	pop	r29
    4a82:	08 95       	ret

00004a84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    4a84:	df 93       	push	r29
    4a86:	cf 93       	push	r28
    4a88:	00 d0       	rcall	.+0      	; 0x4a8a <xTaskPriorityDisinherit+0x6>
    4a8a:	00 d0       	rcall	.+0      	; 0x4a8c <xTaskPriorityDisinherit+0x8>
    4a8c:	0f 92       	push	r0
    4a8e:	cd b7       	in	r28, 0x3d	; 61
    4a90:	de b7       	in	r29, 0x3e	; 62
    4a92:	9d 83       	std	Y+5, r25	; 0x05
    4a94:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    4a96:	8c 81       	ldd	r24, Y+4	; 0x04
    4a98:	9d 81       	ldd	r25, Y+5	; 0x05
    4a9a:	9b 83       	std	Y+3, r25	; 0x03
    4a9c:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xReturn = pdFALSE;
    4a9e:	19 82       	std	Y+1, r1	; 0x01

		if( pxMutexHolder != NULL )
    4aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    4aa2:	9d 81       	ldd	r25, Y+5	; 0x05
    4aa4:	00 97       	sbiw	r24, 0x00	; 0
    4aa6:	09 f4       	brne	.+2      	; 0x4aaa <xTaskPriorityDisinherit+0x26>
    4aa8:	56 c0       	rjmp	.+172    	; 0x4b56 <xTaskPriorityDisinherit+0xd2>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    4aaa:	ea 81       	ldd	r30, Y+2	; 0x02
    4aac:	fb 81       	ldd	r31, Y+3	; 0x03
    4aae:	84 a1       	ldd	r24, Z+36	; 0x24
    4ab0:	81 50       	subi	r24, 0x01	; 1
    4ab2:	ea 81       	ldd	r30, Y+2	; 0x02
    4ab4:	fb 81       	ldd	r31, Y+3	; 0x03
    4ab6:	84 a3       	std	Z+36, r24	; 0x24

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    4ab8:	ea 81       	ldd	r30, Y+2	; 0x02
    4aba:	fb 81       	ldd	r31, Y+3	; 0x03
    4abc:	96 89       	ldd	r25, Z+22	; 0x16
    4abe:	ea 81       	ldd	r30, Y+2	; 0x02
    4ac0:	fb 81       	ldd	r31, Y+3	; 0x03
    4ac2:	83 a1       	ldd	r24, Z+35	; 0x23
    4ac4:	98 17       	cp	r25, r24
    4ac6:	09 f4       	brne	.+2      	; 0x4aca <xTaskPriorityDisinherit+0x46>
    4ac8:	46 c0       	rjmp	.+140    	; 0x4b56 <xTaskPriorityDisinherit+0xd2>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    4aca:	ea 81       	ldd	r30, Y+2	; 0x02
    4acc:	fb 81       	ldd	r31, Y+3	; 0x03
    4ace:	84 a1       	ldd	r24, Z+36	; 0x24
    4ad0:	88 23       	and	r24, r24
    4ad2:	09 f0       	breq	.+2      	; 0x4ad6 <xTaskPriorityDisinherit+0x52>
    4ad4:	40 c0       	rjmp	.+128    	; 0x4b56 <xTaskPriorityDisinherit+0xd2>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    4ada:	02 96       	adiw	r24, 0x02	; 2
    4adc:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    4ae0:	ea 81       	ldd	r30, Y+2	; 0x02
    4ae2:	fb 81       	ldd	r31, Y+3	; 0x03
    4ae4:	83 a1       	ldd	r24, Z+35	; 0x23
    4ae6:	ea 81       	ldd	r30, Y+2	; 0x02
    4ae8:	fb 81       	ldd	r31, Y+3	; 0x03
    4aea:	86 8b       	std	Z+22, r24	; 0x16

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4aec:	ea 81       	ldd	r30, Y+2	; 0x02
    4aee:	fb 81       	ldd	r31, Y+3	; 0x03
    4af0:	86 89       	ldd	r24, Z+22	; 0x16
    4af2:	28 2f       	mov	r18, r24
    4af4:	30 e0       	ldi	r19, 0x00	; 0
    4af6:	85 e0       	ldi	r24, 0x05	; 5
    4af8:	90 e0       	ldi	r25, 0x00	; 0
    4afa:	82 1b       	sub	r24, r18
    4afc:	93 0b       	sbc	r25, r19
    4afe:	ea 81       	ldd	r30, Y+2	; 0x02
    4b00:	fb 81       	ldd	r31, Y+3	; 0x03
    4b02:	95 87       	std	Z+13, r25	; 0x0d
    4b04:	84 87       	std	Z+12, r24	; 0x0c
					prvAddTaskToReadyList( pxTCB );
    4b06:	ea 81       	ldd	r30, Y+2	; 0x02
    4b08:	fb 81       	ldd	r31, Y+3	; 0x03
    4b0a:	96 89       	ldd	r25, Z+22	; 0x16
    4b0c:	80 91 a5 03 	lds	r24, 0x03A5
    4b10:	89 17       	cp	r24, r25
    4b12:	28 f4       	brcc	.+10     	; 0x4b1e <xTaskPriorityDisinherit+0x9a>
    4b14:	ea 81       	ldd	r30, Y+2	; 0x02
    4b16:	fb 81       	ldd	r31, Y+3	; 0x03
    4b18:	86 89       	ldd	r24, Z+22	; 0x16
    4b1a:	80 93 a5 03 	sts	0x03A5, r24
    4b1e:	ea 81       	ldd	r30, Y+2	; 0x02
    4b20:	fb 81       	ldd	r31, Y+3	; 0x03
    4b22:	86 89       	ldd	r24, Z+22	; 0x16
    4b24:	28 2f       	mov	r18, r24
    4b26:	30 e0       	ldi	r19, 0x00	; 0
    4b28:	c9 01       	movw	r24, r18
    4b2a:	88 0f       	add	r24, r24
    4b2c:	99 1f       	adc	r25, r25
    4b2e:	88 0f       	add	r24, r24
    4b30:	99 1f       	adc	r25, r25
    4b32:	88 0f       	add	r24, r24
    4b34:	99 1f       	adc	r25, r25
    4b36:	82 0f       	add	r24, r18
    4b38:	93 1f       	adc	r25, r19
    4b3a:	ac 01       	movw	r20, r24
    4b3c:	40 55       	subi	r20, 0x50	; 80
    4b3e:	5c 4f       	sbci	r21, 0xFC	; 252
    4b40:	8a 81       	ldd	r24, Y+2	; 0x02
    4b42:	9b 81       	ldd	r25, Y+3	; 0x03
    4b44:	9c 01       	movw	r18, r24
    4b46:	2e 5f       	subi	r18, 0xFE	; 254
    4b48:	3f 4f       	sbci	r19, 0xFF	; 255
    4b4a:	ca 01       	movw	r24, r20
    4b4c:	b9 01       	movw	r22, r18
    4b4e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    4b52:	81 e0       	ldi	r24, 0x01	; 1
    4b54:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    4b56:	89 81       	ldd	r24, Y+1	; 0x01
	}
    4b58:	0f 90       	pop	r0
    4b5a:	0f 90       	pop	r0
    4b5c:	0f 90       	pop	r0
    4b5e:	0f 90       	pop	r0
    4b60:	0f 90       	pop	r0
    4b62:	cf 91       	pop	r28
    4b64:	df 91       	pop	r29
    4b66:	08 95       	ret

00004b68 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    4b68:	df 93       	push	r29
    4b6a:	cf 93       	push	r28
    4b6c:	00 d0       	rcall	.+0      	; 0x4b6e <uxTaskResetEventItemValue+0x6>
    4b6e:	cd b7       	in	r28, 0x3d	; 61
    4b70:	de b7       	in	r29, 0x3e	; 62
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    4b72:	e0 91 9f 03 	lds	r30, 0x039F
    4b76:	f0 91 a0 03 	lds	r31, 0x03A0
    4b7a:	84 85       	ldd	r24, Z+12	; 0x0c
    4b7c:	95 85       	ldd	r25, Z+13	; 0x0d
    4b7e:	9a 83       	std	Y+2, r25	; 0x02
    4b80:	89 83       	std	Y+1, r24	; 0x01

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4b82:	a0 91 9f 03 	lds	r26, 0x039F
    4b86:	b0 91 a0 03 	lds	r27, 0x03A0
    4b8a:	e0 91 9f 03 	lds	r30, 0x039F
    4b8e:	f0 91 a0 03 	lds	r31, 0x03A0
    4b92:	86 89       	ldd	r24, Z+22	; 0x16
    4b94:	28 2f       	mov	r18, r24
    4b96:	30 e0       	ldi	r19, 0x00	; 0
    4b98:	85 e0       	ldi	r24, 0x05	; 5
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	82 1b       	sub	r24, r18
    4b9e:	93 0b       	sbc	r25, r19
    4ba0:	1d 96       	adiw	r26, 0x0d	; 13
    4ba2:	9c 93       	st	X, r25
    4ba4:	8e 93       	st	-X, r24
    4ba6:	1c 97       	sbiw	r26, 0x0c	; 12

	return uxReturn;
    4ba8:	89 81       	ldd	r24, Y+1	; 0x01
    4baa:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4bac:	0f 90       	pop	r0
    4bae:	0f 90       	pop	r0
    4bb0:	cf 91       	pop	r28
    4bb2:	df 91       	pop	r29
    4bb4:	08 95       	ret

00004bb6 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    4bb6:	df 93       	push	r29
    4bb8:	cf 93       	push	r28
    4bba:	cd b7       	in	r28, 0x3d	; 61
    4bbc:	de b7       	in	r29, 0x3e	; 62
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    4bbe:	80 91 9f 03 	lds	r24, 0x039F
    4bc2:	90 91 a0 03 	lds	r25, 0x03A0
    4bc6:	00 97       	sbiw	r24, 0x00	; 0
    4bc8:	39 f0       	breq	.+14     	; 0x4bd8 <pvTaskIncrementMutexHeldCount+0x22>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    4bca:	e0 91 9f 03 	lds	r30, 0x039F
    4bce:	f0 91 a0 03 	lds	r31, 0x03A0
    4bd2:	84 a1       	ldd	r24, Z+36	; 0x24
    4bd4:	8f 5f       	subi	r24, 0xFF	; 255
    4bd6:	84 a3       	std	Z+36, r24	; 0x24
		}

		return pxCurrentTCB;
    4bd8:	80 91 9f 03 	lds	r24, 0x039F
    4bdc:	90 91 a0 03 	lds	r25, 0x03A0
	}
    4be0:	cf 91       	pop	r28
    4be2:	df 91       	pop	r29
    4be4:	08 95       	ret

00004be6 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    4be6:	df 93       	push	r29
    4be8:	cf 93       	push	r28
    4bea:	cd b7       	in	r28, 0x3d	; 61
    4bec:	de b7       	in	r29, 0x3e	; 62
    4bee:	27 97       	sbiw	r28, 0x07	; 7
    4bf0:	0f b6       	in	r0, 0x3f	; 63
    4bf2:	f8 94       	cli
    4bf4:	de bf       	out	0x3e, r29	; 62
    4bf6:	0f be       	out	0x3f, r0	; 63
    4bf8:	cd bf       	out	0x3d, r28	; 61
    4bfa:	8d 83       	std	Y+5, r24	; 0x05
    4bfc:	7f 83       	std	Y+7, r23	; 0x07
    4bfe:	6e 83       	std	Y+6, r22	; 0x06
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    4c00:	0f b6       	in	r0, 0x3f	; 63
    4c02:	f8 94       	cli
    4c04:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    4c06:	e0 91 9f 03 	lds	r30, 0x039F
    4c0a:	f0 91 a0 03 	lds	r31, 0x03A0
    4c0e:	85 a1       	ldd	r24, Z+37	; 0x25
    4c10:	96 a1       	ldd	r25, Z+38	; 0x26
    4c12:	a7 a1       	ldd	r26, Z+39	; 0x27
    4c14:	b0 a5       	ldd	r27, Z+40	; 0x28
    4c16:	00 97       	sbiw	r24, 0x00	; 0
    4c18:	a1 05       	cpc	r26, r1
    4c1a:	b1 05       	cpc	r27, r1
    4c1c:	89 f4       	brne	.+34     	; 0x4c40 <ulTaskNotifyTake+0x5a>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    4c1e:	e0 91 9f 03 	lds	r30, 0x039F
    4c22:	f0 91 a0 03 	lds	r31, 0x03A0
    4c26:	81 e0       	ldi	r24, 0x01	; 1
    4c28:	81 a7       	std	Z+41, r24	; 0x29

				if( xTicksToWait > ( TickType_t ) 0 )
    4c2a:	8e 81       	ldd	r24, Y+6	; 0x06
    4c2c:	9f 81       	ldd	r25, Y+7	; 0x07
    4c2e:	00 97       	sbiw	r24, 0x00	; 0
    4c30:	39 f0       	breq	.+14     	; 0x4c40 <ulTaskNotifyTake+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    4c32:	8e 81       	ldd	r24, Y+6	; 0x06
    4c34:	9f 81       	ldd	r25, Y+7	; 0x07
    4c36:	61 e0       	ldi	r22, 0x01	; 1
    4c38:	0e 94 9d 29 	call	0x533a	; 0x533a <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    4c3c:	0e 94 47 12 	call	0x248e	; 0x248e <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4c40:	0f 90       	pop	r0
    4c42:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    4c44:	0f b6       	in	r0, 0x3f	; 63
    4c46:	f8 94       	cli
    4c48:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    4c4a:	e0 91 9f 03 	lds	r30, 0x039F
    4c4e:	f0 91 a0 03 	lds	r31, 0x03A0
    4c52:	85 a1       	ldd	r24, Z+37	; 0x25
    4c54:	96 a1       	ldd	r25, Z+38	; 0x26
    4c56:	a7 a1       	ldd	r26, Z+39	; 0x27
    4c58:	b0 a5       	ldd	r27, Z+40	; 0x28
    4c5a:	89 83       	std	Y+1, r24	; 0x01
    4c5c:	9a 83       	std	Y+2, r25	; 0x02
    4c5e:	ab 83       	std	Y+3, r26	; 0x03
    4c60:	bc 83       	std	Y+4, r27	; 0x04

			if( ulReturn != 0UL )
    4c62:	89 81       	ldd	r24, Y+1	; 0x01
    4c64:	9a 81       	ldd	r25, Y+2	; 0x02
    4c66:	ab 81       	ldd	r26, Y+3	; 0x03
    4c68:	bc 81       	ldd	r27, Y+4	; 0x04
    4c6a:	00 97       	sbiw	r24, 0x00	; 0
    4c6c:	a1 05       	cpc	r26, r1
    4c6e:	b1 05       	cpc	r27, r1
    4c70:	d9 f0       	breq	.+54     	; 0x4ca8 <ulTaskNotifyTake+0xc2>
			{
				if( xClearCountOnExit != pdFALSE )
    4c72:	8d 81       	ldd	r24, Y+5	; 0x05
    4c74:	88 23       	and	r24, r24
    4c76:	49 f0       	breq	.+18     	; 0x4c8a <ulTaskNotifyTake+0xa4>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    4c78:	e0 91 9f 03 	lds	r30, 0x039F
    4c7c:	f0 91 a0 03 	lds	r31, 0x03A0
    4c80:	15 a2       	std	Z+37, r1	; 0x25
    4c82:	16 a2       	std	Z+38, r1	; 0x26
    4c84:	17 a2       	std	Z+39, r1	; 0x27
    4c86:	10 a6       	std	Z+40, r1	; 0x28
    4c88:	0f c0       	rjmp	.+30     	; 0x4ca8 <ulTaskNotifyTake+0xc2>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
    4c8a:	e0 91 9f 03 	lds	r30, 0x039F
    4c8e:	f0 91 a0 03 	lds	r31, 0x03A0
    4c92:	89 81       	ldd	r24, Y+1	; 0x01
    4c94:	9a 81       	ldd	r25, Y+2	; 0x02
    4c96:	ab 81       	ldd	r26, Y+3	; 0x03
    4c98:	bc 81       	ldd	r27, Y+4	; 0x04
    4c9a:	01 97       	sbiw	r24, 0x01	; 1
    4c9c:	a1 09       	sbc	r26, r1
    4c9e:	b1 09       	sbc	r27, r1
    4ca0:	85 a3       	std	Z+37, r24	; 0x25
    4ca2:	96 a3       	std	Z+38, r25	; 0x26
    4ca4:	a7 a3       	std	Z+39, r26	; 0x27
    4ca6:	b0 a7       	std	Z+40, r27	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4ca8:	e0 91 9f 03 	lds	r30, 0x039F
    4cac:	f0 91 a0 03 	lds	r31, 0x03A0
    4cb0:	11 a6       	std	Z+41, r1	; 0x29
		}
		taskEXIT_CRITICAL();
    4cb2:	0f 90       	pop	r0
    4cb4:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
    4cb6:	89 81       	ldd	r24, Y+1	; 0x01
    4cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    4cba:	ab 81       	ldd	r26, Y+3	; 0x03
    4cbc:	bc 81       	ldd	r27, Y+4	; 0x04
	}
    4cbe:	bc 01       	movw	r22, r24
    4cc0:	cd 01       	movw	r24, r26
    4cc2:	27 96       	adiw	r28, 0x07	; 7
    4cc4:	0f b6       	in	r0, 0x3f	; 63
    4cc6:	f8 94       	cli
    4cc8:	de bf       	out	0x3e, r29	; 62
    4cca:	0f be       	out	0x3f, r0	; 63
    4ccc:	cd bf       	out	0x3d, r28	; 61
    4cce:	cf 91       	pop	r28
    4cd0:	df 91       	pop	r29
    4cd2:	08 95       	ret

00004cd4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    4cd4:	ef 92       	push	r14
    4cd6:	ff 92       	push	r15
    4cd8:	0f 93       	push	r16
    4cda:	1f 93       	push	r17
    4cdc:	df 93       	push	r29
    4cde:	cf 93       	push	r28
    4ce0:	cd b7       	in	r28, 0x3d	; 61
    4ce2:	de b7       	in	r29, 0x3e	; 62
    4ce4:	2d 97       	sbiw	r28, 0x0d	; 13
    4ce6:	0f b6       	in	r0, 0x3f	; 63
    4ce8:	f8 94       	cli
    4cea:	de bf       	out	0x3e, r29	; 62
    4cec:	0f be       	out	0x3f, r0	; 63
    4cee:	cd bf       	out	0x3d, r28	; 61
    4cf0:	6a 83       	std	Y+2, r22	; 0x02
    4cf2:	7b 83       	std	Y+3, r23	; 0x03
    4cf4:	8c 83       	std	Y+4, r24	; 0x04
    4cf6:	9d 83       	std	Y+5, r25	; 0x05
    4cf8:	2e 83       	std	Y+6, r18	; 0x06
    4cfa:	3f 83       	std	Y+7, r19	; 0x07
    4cfc:	48 87       	std	Y+8, r20	; 0x08
    4cfe:	59 87       	std	Y+9, r21	; 0x09
    4d00:	1b 87       	std	Y+11, r17	; 0x0b
    4d02:	0a 87       	std	Y+10, r16	; 0x0a
    4d04:	fd 86       	std	Y+13, r15	; 0x0d
    4d06:	ec 86       	std	Y+12, r14	; 0x0c
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    4d08:	0f b6       	in	r0, 0x3f	; 63
    4d0a:	f8 94       	cli
    4d0c:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    4d0e:	e0 91 9f 03 	lds	r30, 0x039F
    4d12:	f0 91 a0 03 	lds	r31, 0x03A0
    4d16:	81 a5       	ldd	r24, Z+41	; 0x29
    4d18:	82 30       	cpi	r24, 0x02	; 2
    4d1a:	49 f1       	breq	.+82     	; 0x4d6e <xTaskNotifyWait+0x9a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    4d1c:	e0 91 9f 03 	lds	r30, 0x039F
    4d20:	f0 91 a0 03 	lds	r31, 0x03A0
    4d24:	25 a1       	ldd	r18, Z+37	; 0x25
    4d26:	36 a1       	ldd	r19, Z+38	; 0x26
    4d28:	47 a1       	ldd	r20, Z+39	; 0x27
    4d2a:	50 a5       	ldd	r21, Z+40	; 0x28
    4d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d2e:	9b 81       	ldd	r25, Y+3	; 0x03
    4d30:	ac 81       	ldd	r26, Y+4	; 0x04
    4d32:	bd 81       	ldd	r27, Y+5	; 0x05
    4d34:	80 95       	com	r24
    4d36:	90 95       	com	r25
    4d38:	a0 95       	com	r26
    4d3a:	b0 95       	com	r27
    4d3c:	82 23       	and	r24, r18
    4d3e:	93 23       	and	r25, r19
    4d40:	a4 23       	and	r26, r20
    4d42:	b5 23       	and	r27, r21
    4d44:	85 a3       	std	Z+37, r24	; 0x25
    4d46:	96 a3       	std	Z+38, r25	; 0x26
    4d48:	a7 a3       	std	Z+39, r26	; 0x27
    4d4a:	b0 a7       	std	Z+40, r27	; 0x28

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    4d4c:	e0 91 9f 03 	lds	r30, 0x039F
    4d50:	f0 91 a0 03 	lds	r31, 0x03A0
    4d54:	81 e0       	ldi	r24, 0x01	; 1
    4d56:	81 a7       	std	Z+41, r24	; 0x29

				if( xTicksToWait > ( TickType_t ) 0 )
    4d58:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d5a:	9d 85       	ldd	r25, Y+13	; 0x0d
    4d5c:	00 97       	sbiw	r24, 0x00	; 0
    4d5e:	39 f0       	breq	.+14     	; 0x4d6e <xTaskNotifyWait+0x9a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    4d60:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d62:	9d 85       	ldd	r25, Y+13	; 0x0d
    4d64:	61 e0       	ldi	r22, 0x01	; 1
    4d66:	0e 94 9d 29 	call	0x533a	; 0x533a <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    4d6a:	0e 94 47 12 	call	0x248e	; 0x248e <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4d6e:	0f 90       	pop	r0
    4d70:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    4d72:	0f b6       	in	r0, 0x3f	; 63
    4d74:	f8 94       	cli
    4d76:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    4d78:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d7c:	00 97       	sbiw	r24, 0x00	; 0
    4d7e:	71 f0       	breq	.+28     	; 0x4d9c <xTaskNotifyWait+0xc8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    4d80:	e0 91 9f 03 	lds	r30, 0x039F
    4d84:	f0 91 a0 03 	lds	r31, 0x03A0
    4d88:	85 a1       	ldd	r24, Z+37	; 0x25
    4d8a:	96 a1       	ldd	r25, Z+38	; 0x26
    4d8c:	a7 a1       	ldd	r26, Z+39	; 0x27
    4d8e:	b0 a5       	ldd	r27, Z+40	; 0x28
    4d90:	ea 85       	ldd	r30, Y+10	; 0x0a
    4d92:	fb 85       	ldd	r31, Y+11	; 0x0b
    4d94:	80 83       	st	Z, r24
    4d96:	91 83       	std	Z+1, r25	; 0x01
    4d98:	a2 83       	std	Z+2, r26	; 0x02
    4d9a:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    4d9c:	e0 91 9f 03 	lds	r30, 0x039F
    4da0:	f0 91 a0 03 	lds	r31, 0x03A0
    4da4:	81 a5       	ldd	r24, Z+41	; 0x29
    4da6:	81 30       	cpi	r24, 0x01	; 1
    4da8:	11 f4       	brne	.+4      	; 0x4dae <xTaskNotifyWait+0xda>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    4daa:	19 82       	std	Y+1, r1	; 0x01
    4dac:	1a c0       	rjmp	.+52     	; 0x4de2 <xTaskNotifyWait+0x10e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    4dae:	e0 91 9f 03 	lds	r30, 0x039F
    4db2:	f0 91 a0 03 	lds	r31, 0x03A0
    4db6:	25 a1       	ldd	r18, Z+37	; 0x25
    4db8:	36 a1       	ldd	r19, Z+38	; 0x26
    4dba:	47 a1       	ldd	r20, Z+39	; 0x27
    4dbc:	50 a5       	ldd	r21, Z+40	; 0x28
    4dbe:	8e 81       	ldd	r24, Y+6	; 0x06
    4dc0:	9f 81       	ldd	r25, Y+7	; 0x07
    4dc2:	a8 85       	ldd	r26, Y+8	; 0x08
    4dc4:	b9 85       	ldd	r27, Y+9	; 0x09
    4dc6:	80 95       	com	r24
    4dc8:	90 95       	com	r25
    4dca:	a0 95       	com	r26
    4dcc:	b0 95       	com	r27
    4dce:	82 23       	and	r24, r18
    4dd0:	93 23       	and	r25, r19
    4dd2:	a4 23       	and	r26, r20
    4dd4:	b5 23       	and	r27, r21
    4dd6:	85 a3       	std	Z+37, r24	; 0x25
    4dd8:	96 a3       	std	Z+38, r25	; 0x26
    4dda:	a7 a3       	std	Z+39, r26	; 0x27
    4ddc:	b0 a7       	std	Z+40, r27	; 0x28
				xReturn = pdTRUE;
    4dde:	81 e0       	ldi	r24, 0x01	; 1
    4de0:	89 83       	std	Y+1, r24	; 0x01
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4de2:	e0 91 9f 03 	lds	r30, 0x039F
    4de6:	f0 91 a0 03 	lds	r31, 0x03A0
    4dea:	11 a6       	std	Z+41, r1	; 0x29
		}
		taskEXIT_CRITICAL();
    4dec:	0f 90       	pop	r0
    4dee:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    4df0:	89 81       	ldd	r24, Y+1	; 0x01
	}
    4df2:	2d 96       	adiw	r28, 0x0d	; 13
    4df4:	0f b6       	in	r0, 0x3f	; 63
    4df6:	f8 94       	cli
    4df8:	de bf       	out	0x3e, r29	; 62
    4dfa:	0f be       	out	0x3f, r0	; 63
    4dfc:	cd bf       	out	0x3d, r28	; 61
    4dfe:	cf 91       	pop	r28
    4e00:	df 91       	pop	r29
    4e02:	1f 91       	pop	r17
    4e04:	0f 91       	pop	r16
    4e06:	ff 90       	pop	r15
    4e08:	ef 90       	pop	r14
    4e0a:	08 95       	ret

00004e0c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    4e0c:	0f 93       	push	r16
    4e0e:	1f 93       	push	r17
    4e10:	df 93       	push	r29
    4e12:	cf 93       	push	r28
    4e14:	cd b7       	in	r28, 0x3d	; 61
    4e16:	de b7       	in	r29, 0x3e	; 62
    4e18:	2f 97       	sbiw	r28, 0x0f	; 15
    4e1a:	0f b6       	in	r0, 0x3f	; 63
    4e1c:	f8 94       	cli
    4e1e:	de bf       	out	0x3e, r29	; 62
    4e20:	0f be       	out	0x3f, r0	; 63
    4e22:	cd bf       	out	0x3d, r28	; 61
    4e24:	9e 83       	std	Y+6, r25	; 0x06
    4e26:	8d 83       	std	Y+5, r24	; 0x05
    4e28:	4f 83       	std	Y+7, r20	; 0x07
    4e2a:	58 87       	std	Y+8, r21	; 0x08
    4e2c:	69 87       	std	Y+9, r22	; 0x09
    4e2e:	7a 87       	std	Y+10, r23	; 0x0a
    4e30:	2b 87       	std	Y+11, r18	; 0x0b
    4e32:	1d 87       	std	Y+13, r17	; 0x0d
    4e34:	0c 87       	std	Y+12, r16	; 0x0c
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    4e36:	81 e0       	ldi	r24, 0x01	; 1
    4e38:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
    4e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e3e:	9c 83       	std	Y+4, r25	; 0x04
    4e40:	8b 83       	std	Y+3, r24	; 0x03

		taskENTER_CRITICAL();
    4e42:	0f b6       	in	r0, 0x3f	; 63
    4e44:	f8 94       	cli
    4e46:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    4e48:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e4a:	9d 85       	ldd	r25, Y+13	; 0x0d
    4e4c:	00 97       	sbiw	r24, 0x00	; 0
    4e4e:	61 f0       	breq	.+24     	; 0x4e68 <xTaskGenericNotify+0x5c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    4e50:	eb 81       	ldd	r30, Y+3	; 0x03
    4e52:	fc 81       	ldd	r31, Y+4	; 0x04
    4e54:	85 a1       	ldd	r24, Z+37	; 0x25
    4e56:	96 a1       	ldd	r25, Z+38	; 0x26
    4e58:	a7 a1       	ldd	r26, Z+39	; 0x27
    4e5a:	b0 a5       	ldd	r27, Z+40	; 0x28
    4e5c:	ec 85       	ldd	r30, Y+12	; 0x0c
    4e5e:	fd 85       	ldd	r31, Y+13	; 0x0d
    4e60:	80 83       	st	Z, r24
    4e62:	91 83       	std	Z+1, r25	; 0x01
    4e64:	a2 83       	std	Z+2, r26	; 0x02
    4e66:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    4e68:	eb 81       	ldd	r30, Y+3	; 0x03
    4e6a:	fc 81       	ldd	r31, Y+4	; 0x04
    4e6c:	81 a5       	ldd	r24, Z+41	; 0x29
    4e6e:	89 83       	std	Y+1, r24	; 0x01

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    4e70:	eb 81       	ldd	r30, Y+3	; 0x03
    4e72:	fc 81       	ldd	r31, Y+4	; 0x04
    4e74:	82 e0       	ldi	r24, 0x02	; 2
    4e76:	81 a7       	std	Z+41, r24	; 0x29

			switch( eAction )
    4e78:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e7a:	28 2f       	mov	r18, r24
    4e7c:	30 e0       	ldi	r19, 0x00	; 0
    4e7e:	3f 87       	std	Y+15, r19	; 0x0f
    4e80:	2e 87       	std	Y+14, r18	; 0x0e
    4e82:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e84:	9f 85       	ldd	r25, Y+15	; 0x0f
    4e86:	82 30       	cpi	r24, 0x02	; 2
    4e88:	91 05       	cpc	r25, r1
    4e8a:	59 f1       	breq	.+86     	; 0x4ee2 <xTaskGenericNotify+0xd6>
    4e8c:	2e 85       	ldd	r18, Y+14	; 0x0e
    4e8e:	3f 85       	ldd	r19, Y+15	; 0x0f
    4e90:	23 30       	cpi	r18, 0x03	; 3
    4e92:	31 05       	cpc	r19, r1
    4e94:	34 f4       	brge	.+12     	; 0x4ea2 <xTaskGenericNotify+0x96>
    4e96:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e98:	9f 85       	ldd	r25, Y+15	; 0x0f
    4e9a:	81 30       	cpi	r24, 0x01	; 1
    4e9c:	91 05       	cpc	r25, r1
    4e9e:	61 f0       	breq	.+24     	; 0x4eb8 <xTaskGenericNotify+0xac>
    4ea0:	4a c0       	rjmp	.+148    	; 0x4f36 <xTaskGenericNotify+0x12a>
    4ea2:	2e 85       	ldd	r18, Y+14	; 0x0e
    4ea4:	3f 85       	ldd	r19, Y+15	; 0x0f
    4ea6:	23 30       	cpi	r18, 0x03	; 3
    4ea8:	31 05       	cpc	r19, r1
    4eaa:	59 f1       	breq	.+86     	; 0x4f02 <xTaskGenericNotify+0xf6>
    4eac:	8e 85       	ldd	r24, Y+14	; 0x0e
    4eae:	9f 85       	ldd	r25, Y+15	; 0x0f
    4eb0:	84 30       	cpi	r24, 0x04	; 4
    4eb2:	91 05       	cpc	r25, r1
    4eb4:	89 f1       	breq	.+98     	; 0x4f18 <xTaskGenericNotify+0x10c>
    4eb6:	3f c0       	rjmp	.+126    	; 0x4f36 <xTaskGenericNotify+0x12a>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    4eb8:	eb 81       	ldd	r30, Y+3	; 0x03
    4eba:	fc 81       	ldd	r31, Y+4	; 0x04
    4ebc:	25 a1       	ldd	r18, Z+37	; 0x25
    4ebe:	36 a1       	ldd	r19, Z+38	; 0x26
    4ec0:	47 a1       	ldd	r20, Z+39	; 0x27
    4ec2:	50 a5       	ldd	r21, Z+40	; 0x28
    4ec4:	8f 81       	ldd	r24, Y+7	; 0x07
    4ec6:	98 85       	ldd	r25, Y+8	; 0x08
    4ec8:	a9 85       	ldd	r26, Y+9	; 0x09
    4eca:	ba 85       	ldd	r27, Y+10	; 0x0a
    4ecc:	82 2b       	or	r24, r18
    4ece:	93 2b       	or	r25, r19
    4ed0:	a4 2b       	or	r26, r20
    4ed2:	b5 2b       	or	r27, r21
    4ed4:	eb 81       	ldd	r30, Y+3	; 0x03
    4ed6:	fc 81       	ldd	r31, Y+4	; 0x04
    4ed8:	85 a3       	std	Z+37, r24	; 0x25
    4eda:	96 a3       	std	Z+38, r25	; 0x26
    4edc:	a7 a3       	std	Z+39, r26	; 0x27
    4ede:	b0 a7       	std	Z+40, r27	; 0x28
    4ee0:	2a c0       	rjmp	.+84     	; 0x4f36 <xTaskGenericNotify+0x12a>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    4ee2:	eb 81       	ldd	r30, Y+3	; 0x03
    4ee4:	fc 81       	ldd	r31, Y+4	; 0x04
    4ee6:	85 a1       	ldd	r24, Z+37	; 0x25
    4ee8:	96 a1       	ldd	r25, Z+38	; 0x26
    4eea:	a7 a1       	ldd	r26, Z+39	; 0x27
    4eec:	b0 a5       	ldd	r27, Z+40	; 0x28
    4eee:	01 96       	adiw	r24, 0x01	; 1
    4ef0:	a1 1d       	adc	r26, r1
    4ef2:	b1 1d       	adc	r27, r1
    4ef4:	eb 81       	ldd	r30, Y+3	; 0x03
    4ef6:	fc 81       	ldd	r31, Y+4	; 0x04
    4ef8:	85 a3       	std	Z+37, r24	; 0x25
    4efa:	96 a3       	std	Z+38, r25	; 0x26
    4efc:	a7 a3       	std	Z+39, r26	; 0x27
    4efe:	b0 a7       	std	Z+40, r27	; 0x28
    4f00:	1a c0       	rjmp	.+52     	; 0x4f36 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    4f02:	eb 81       	ldd	r30, Y+3	; 0x03
    4f04:	fc 81       	ldd	r31, Y+4	; 0x04
    4f06:	8f 81       	ldd	r24, Y+7	; 0x07
    4f08:	98 85       	ldd	r25, Y+8	; 0x08
    4f0a:	a9 85       	ldd	r26, Y+9	; 0x09
    4f0c:	ba 85       	ldd	r27, Y+10	; 0x0a
    4f0e:	85 a3       	std	Z+37, r24	; 0x25
    4f10:	96 a3       	std	Z+38, r25	; 0x26
    4f12:	a7 a3       	std	Z+39, r26	; 0x27
    4f14:	b0 a7       	std	Z+40, r27	; 0x28
    4f16:	0f c0       	rjmp	.+30     	; 0x4f36 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    4f18:	89 81       	ldd	r24, Y+1	; 0x01
    4f1a:	82 30       	cpi	r24, 0x02	; 2
    4f1c:	59 f0       	breq	.+22     	; 0x4f34 <xTaskGenericNotify+0x128>
					{
						pxTCB->ulNotifiedValue = ulValue;
    4f1e:	eb 81       	ldd	r30, Y+3	; 0x03
    4f20:	fc 81       	ldd	r31, Y+4	; 0x04
    4f22:	8f 81       	ldd	r24, Y+7	; 0x07
    4f24:	98 85       	ldd	r25, Y+8	; 0x08
    4f26:	a9 85       	ldd	r26, Y+9	; 0x09
    4f28:	ba 85       	ldd	r27, Y+10	; 0x0a
    4f2a:	85 a3       	std	Z+37, r24	; 0x25
    4f2c:	96 a3       	std	Z+38, r25	; 0x26
    4f2e:	a7 a3       	std	Z+39, r26	; 0x27
    4f30:	b0 a7       	std	Z+40, r27	; 0x28
    4f32:	01 c0       	rjmp	.+2      	; 0x4f36 <xTaskGenericNotify+0x12a>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    4f34:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    4f36:	89 81       	ldd	r24, Y+1	; 0x01
    4f38:	81 30       	cpi	r24, 0x01	; 1
    4f3a:	b9 f5       	brne	.+110    	; 0x4faa <xTaskGenericNotify+0x19e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f40:	02 96       	adiw	r24, 0x02	; 2
    4f42:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    4f46:	eb 81       	ldd	r30, Y+3	; 0x03
    4f48:	fc 81       	ldd	r31, Y+4	; 0x04
    4f4a:	96 89       	ldd	r25, Z+22	; 0x16
    4f4c:	80 91 a5 03 	lds	r24, 0x03A5
    4f50:	89 17       	cp	r24, r25
    4f52:	28 f4       	brcc	.+10     	; 0x4f5e <xTaskGenericNotify+0x152>
    4f54:	eb 81       	ldd	r30, Y+3	; 0x03
    4f56:	fc 81       	ldd	r31, Y+4	; 0x04
    4f58:	86 89       	ldd	r24, Z+22	; 0x16
    4f5a:	80 93 a5 03 	sts	0x03A5, r24
    4f5e:	eb 81       	ldd	r30, Y+3	; 0x03
    4f60:	fc 81       	ldd	r31, Y+4	; 0x04
    4f62:	86 89       	ldd	r24, Z+22	; 0x16
    4f64:	28 2f       	mov	r18, r24
    4f66:	30 e0       	ldi	r19, 0x00	; 0
    4f68:	c9 01       	movw	r24, r18
    4f6a:	88 0f       	add	r24, r24
    4f6c:	99 1f       	adc	r25, r25
    4f6e:	88 0f       	add	r24, r24
    4f70:	99 1f       	adc	r25, r25
    4f72:	88 0f       	add	r24, r24
    4f74:	99 1f       	adc	r25, r25
    4f76:	82 0f       	add	r24, r18
    4f78:	93 1f       	adc	r25, r19
    4f7a:	ac 01       	movw	r20, r24
    4f7c:	40 55       	subi	r20, 0x50	; 80
    4f7e:	5c 4f       	sbci	r21, 0xFC	; 252
    4f80:	8b 81       	ldd	r24, Y+3	; 0x03
    4f82:	9c 81       	ldd	r25, Y+4	; 0x04
    4f84:	9c 01       	movw	r18, r24
    4f86:	2e 5f       	subi	r18, 0xFE	; 254
    4f88:	3f 4f       	sbci	r19, 0xFF	; 255
    4f8a:	ca 01       	movw	r24, r20
    4f8c:	b9 01       	movw	r22, r18
    4f8e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4f92:	eb 81       	ldd	r30, Y+3	; 0x03
    4f94:	fc 81       	ldd	r31, Y+4	; 0x04
    4f96:	96 89       	ldd	r25, Z+22	; 0x16
    4f98:	e0 91 9f 03 	lds	r30, 0x039F
    4f9c:	f0 91 a0 03 	lds	r31, 0x03A0
    4fa0:	86 89       	ldd	r24, Z+22	; 0x16
    4fa2:	89 17       	cp	r24, r25
    4fa4:	10 f4       	brcc	.+4      	; 0x4faa <xTaskGenericNotify+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    4fa6:	0e 94 47 12 	call	0x248e	; 0x248e <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4faa:	0f 90       	pop	r0
    4fac:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    4fae:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    4fb0:	2f 96       	adiw	r28, 0x0f	; 15
    4fb2:	0f b6       	in	r0, 0x3f	; 63
    4fb4:	f8 94       	cli
    4fb6:	de bf       	out	0x3e, r29	; 62
    4fb8:	0f be       	out	0x3f, r0	; 63
    4fba:	cd bf       	out	0x3d, r28	; 61
    4fbc:	cf 91       	pop	r28
    4fbe:	df 91       	pop	r29
    4fc0:	1f 91       	pop	r17
    4fc2:	0f 91       	pop	r16
    4fc4:	08 95       	ret

00004fc6 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    4fc6:	ef 92       	push	r14
    4fc8:	ff 92       	push	r15
    4fca:	0f 93       	push	r16
    4fcc:	1f 93       	push	r17
    4fce:	df 93       	push	r29
    4fd0:	cf 93       	push	r28
    4fd2:	cd b7       	in	r28, 0x3d	; 61
    4fd4:	de b7       	in	r29, 0x3e	; 62
    4fd6:	62 97       	sbiw	r28, 0x12	; 18
    4fd8:	0f b6       	in	r0, 0x3f	; 63
    4fda:	f8 94       	cli
    4fdc:	de bf       	out	0x3e, r29	; 62
    4fde:	0f be       	out	0x3f, r0	; 63
    4fe0:	cd bf       	out	0x3d, r28	; 61
    4fe2:	9f 83       	std	Y+7, r25	; 0x07
    4fe4:	8e 83       	std	Y+6, r24	; 0x06
    4fe6:	48 87       	std	Y+8, r20	; 0x08
    4fe8:	59 87       	std	Y+9, r21	; 0x09
    4fea:	6a 87       	std	Y+10, r22	; 0x0a
    4fec:	7b 87       	std	Y+11, r23	; 0x0b
    4fee:	2c 87       	std	Y+12, r18	; 0x0c
    4ff0:	1e 87       	std	Y+14, r17	; 0x0e
    4ff2:	0d 87       	std	Y+13, r16	; 0x0d
    4ff4:	f8 8a       	std	Y+16, r15	; 0x10
    4ff6:	ef 86       	std	Y+15, r14	; 0x0f
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    4ff8:	81 e0       	ldi	r24, 0x01	; 1
    4ffa:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    4ffc:	8e 81       	ldd	r24, Y+6	; 0x06
    4ffe:	9f 81       	ldd	r25, Y+7	; 0x07
    5000:	9d 83       	std	Y+5, r25	; 0x05
    5002:	8c 83       	std	Y+4, r24	; 0x04

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5004:	19 82       	std	Y+1, r1	; 0x01
		{
			if( pulPreviousNotificationValue != NULL )
    5006:	8d 85       	ldd	r24, Y+13	; 0x0d
    5008:	9e 85       	ldd	r25, Y+14	; 0x0e
    500a:	00 97       	sbiw	r24, 0x00	; 0
    500c:	61 f0       	breq	.+24     	; 0x5026 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    500e:	ec 81       	ldd	r30, Y+4	; 0x04
    5010:	fd 81       	ldd	r31, Y+5	; 0x05
    5012:	85 a1       	ldd	r24, Z+37	; 0x25
    5014:	96 a1       	ldd	r25, Z+38	; 0x26
    5016:	a7 a1       	ldd	r26, Z+39	; 0x27
    5018:	b0 a5       	ldd	r27, Z+40	; 0x28
    501a:	ed 85       	ldd	r30, Y+13	; 0x0d
    501c:	fe 85       	ldd	r31, Y+14	; 0x0e
    501e:	80 83       	st	Z, r24
    5020:	91 83       	std	Z+1, r25	; 0x01
    5022:	a2 83       	std	Z+2, r26	; 0x02
    5024:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    5026:	ec 81       	ldd	r30, Y+4	; 0x04
    5028:	fd 81       	ldd	r31, Y+5	; 0x05
    502a:	81 a5       	ldd	r24, Z+41	; 0x29
    502c:	8b 83       	std	Y+3, r24	; 0x03
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    502e:	ec 81       	ldd	r30, Y+4	; 0x04
    5030:	fd 81       	ldd	r31, Y+5	; 0x05
    5032:	82 e0       	ldi	r24, 0x02	; 2
    5034:	81 a7       	std	Z+41, r24	; 0x29

			switch( eAction )
    5036:	8c 85       	ldd	r24, Y+12	; 0x0c
    5038:	28 2f       	mov	r18, r24
    503a:	30 e0       	ldi	r19, 0x00	; 0
    503c:	3a 8b       	std	Y+18, r19	; 0x12
    503e:	29 8b       	std	Y+17, r18	; 0x11
    5040:	89 89       	ldd	r24, Y+17	; 0x11
    5042:	9a 89       	ldd	r25, Y+18	; 0x12
    5044:	82 30       	cpi	r24, 0x02	; 2
    5046:	91 05       	cpc	r25, r1
    5048:	59 f1       	breq	.+86     	; 0x50a0 <xTaskGenericNotifyFromISR+0xda>
    504a:	29 89       	ldd	r18, Y+17	; 0x11
    504c:	3a 89       	ldd	r19, Y+18	; 0x12
    504e:	23 30       	cpi	r18, 0x03	; 3
    5050:	31 05       	cpc	r19, r1
    5052:	34 f4       	brge	.+12     	; 0x5060 <xTaskGenericNotifyFromISR+0x9a>
    5054:	89 89       	ldd	r24, Y+17	; 0x11
    5056:	9a 89       	ldd	r25, Y+18	; 0x12
    5058:	81 30       	cpi	r24, 0x01	; 1
    505a:	91 05       	cpc	r25, r1
    505c:	61 f0       	breq	.+24     	; 0x5076 <xTaskGenericNotifyFromISR+0xb0>
    505e:	4a c0       	rjmp	.+148    	; 0x50f4 <xTaskGenericNotifyFromISR+0x12e>
    5060:	29 89       	ldd	r18, Y+17	; 0x11
    5062:	3a 89       	ldd	r19, Y+18	; 0x12
    5064:	23 30       	cpi	r18, 0x03	; 3
    5066:	31 05       	cpc	r19, r1
    5068:	59 f1       	breq	.+86     	; 0x50c0 <xTaskGenericNotifyFromISR+0xfa>
    506a:	89 89       	ldd	r24, Y+17	; 0x11
    506c:	9a 89       	ldd	r25, Y+18	; 0x12
    506e:	84 30       	cpi	r24, 0x04	; 4
    5070:	91 05       	cpc	r25, r1
    5072:	89 f1       	breq	.+98     	; 0x50d6 <xTaskGenericNotifyFromISR+0x110>
    5074:	3f c0       	rjmp	.+126    	; 0x50f4 <xTaskGenericNotifyFromISR+0x12e>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    5076:	ec 81       	ldd	r30, Y+4	; 0x04
    5078:	fd 81       	ldd	r31, Y+5	; 0x05
    507a:	25 a1       	ldd	r18, Z+37	; 0x25
    507c:	36 a1       	ldd	r19, Z+38	; 0x26
    507e:	47 a1       	ldd	r20, Z+39	; 0x27
    5080:	50 a5       	ldd	r21, Z+40	; 0x28
    5082:	88 85       	ldd	r24, Y+8	; 0x08
    5084:	99 85       	ldd	r25, Y+9	; 0x09
    5086:	aa 85       	ldd	r26, Y+10	; 0x0a
    5088:	bb 85       	ldd	r27, Y+11	; 0x0b
    508a:	82 2b       	or	r24, r18
    508c:	93 2b       	or	r25, r19
    508e:	a4 2b       	or	r26, r20
    5090:	b5 2b       	or	r27, r21
    5092:	ec 81       	ldd	r30, Y+4	; 0x04
    5094:	fd 81       	ldd	r31, Y+5	; 0x05
    5096:	85 a3       	std	Z+37, r24	; 0x25
    5098:	96 a3       	std	Z+38, r25	; 0x26
    509a:	a7 a3       	std	Z+39, r26	; 0x27
    509c:	b0 a7       	std	Z+40, r27	; 0x28
    509e:	2a c0       	rjmp	.+84     	; 0x50f4 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    50a0:	ec 81       	ldd	r30, Y+4	; 0x04
    50a2:	fd 81       	ldd	r31, Y+5	; 0x05
    50a4:	85 a1       	ldd	r24, Z+37	; 0x25
    50a6:	96 a1       	ldd	r25, Z+38	; 0x26
    50a8:	a7 a1       	ldd	r26, Z+39	; 0x27
    50aa:	b0 a5       	ldd	r27, Z+40	; 0x28
    50ac:	01 96       	adiw	r24, 0x01	; 1
    50ae:	a1 1d       	adc	r26, r1
    50b0:	b1 1d       	adc	r27, r1
    50b2:	ec 81       	ldd	r30, Y+4	; 0x04
    50b4:	fd 81       	ldd	r31, Y+5	; 0x05
    50b6:	85 a3       	std	Z+37, r24	; 0x25
    50b8:	96 a3       	std	Z+38, r25	; 0x26
    50ba:	a7 a3       	std	Z+39, r26	; 0x27
    50bc:	b0 a7       	std	Z+40, r27	; 0x28
    50be:	1a c0       	rjmp	.+52     	; 0x50f4 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    50c0:	ec 81       	ldd	r30, Y+4	; 0x04
    50c2:	fd 81       	ldd	r31, Y+5	; 0x05
    50c4:	88 85       	ldd	r24, Y+8	; 0x08
    50c6:	99 85       	ldd	r25, Y+9	; 0x09
    50c8:	aa 85       	ldd	r26, Y+10	; 0x0a
    50ca:	bb 85       	ldd	r27, Y+11	; 0x0b
    50cc:	85 a3       	std	Z+37, r24	; 0x25
    50ce:	96 a3       	std	Z+38, r25	; 0x26
    50d0:	a7 a3       	std	Z+39, r26	; 0x27
    50d2:	b0 a7       	std	Z+40, r27	; 0x28
    50d4:	0f c0       	rjmp	.+30     	; 0x50f4 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    50d6:	8b 81       	ldd	r24, Y+3	; 0x03
    50d8:	82 30       	cpi	r24, 0x02	; 2
    50da:	59 f0       	breq	.+22     	; 0x50f2 <xTaskGenericNotifyFromISR+0x12c>
					{
						pxTCB->ulNotifiedValue = ulValue;
    50dc:	ec 81       	ldd	r30, Y+4	; 0x04
    50de:	fd 81       	ldd	r31, Y+5	; 0x05
    50e0:	88 85       	ldd	r24, Y+8	; 0x08
    50e2:	99 85       	ldd	r25, Y+9	; 0x09
    50e4:	aa 85       	ldd	r26, Y+10	; 0x0a
    50e6:	bb 85       	ldd	r27, Y+11	; 0x0b
    50e8:	85 a3       	std	Z+37, r24	; 0x25
    50ea:	96 a3       	std	Z+38, r25	; 0x26
    50ec:	a7 a3       	std	Z+39, r26	; 0x27
    50ee:	b0 a7       	std	Z+40, r27	; 0x28
    50f0:	01 c0       	rjmp	.+2      	; 0x50f4 <xTaskGenericNotifyFromISR+0x12e>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    50f2:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    50f4:	8b 81       	ldd	r24, Y+3	; 0x03
    50f6:	81 30       	cpi	r24, 0x01	; 1
    50f8:	09 f0       	breq	.+2      	; 0x50fc <xTaskGenericNotifyFromISR+0x136>
    50fa:	50 c0       	rjmp	.+160    	; 0x519c <xTaskGenericNotifyFromISR+0x1d6>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    50fc:	80 91 af 03 	lds	r24, 0x03AF
    5100:	88 23       	and	r24, r24
    5102:	61 f5       	brne	.+88     	; 0x515c <xTaskGenericNotifyFromISR+0x196>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5104:	8c 81       	ldd	r24, Y+4	; 0x04
    5106:	9d 81       	ldd	r25, Y+5	; 0x05
    5108:	02 96       	adiw	r24, 0x02	; 2
    510a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    510e:	ec 81       	ldd	r30, Y+4	; 0x04
    5110:	fd 81       	ldd	r31, Y+5	; 0x05
    5112:	96 89       	ldd	r25, Z+22	; 0x16
    5114:	80 91 a5 03 	lds	r24, 0x03A5
    5118:	89 17       	cp	r24, r25
    511a:	28 f4       	brcc	.+10     	; 0x5126 <xTaskGenericNotifyFromISR+0x160>
    511c:	ec 81       	ldd	r30, Y+4	; 0x04
    511e:	fd 81       	ldd	r31, Y+5	; 0x05
    5120:	86 89       	ldd	r24, Z+22	; 0x16
    5122:	80 93 a5 03 	sts	0x03A5, r24
    5126:	ec 81       	ldd	r30, Y+4	; 0x04
    5128:	fd 81       	ldd	r31, Y+5	; 0x05
    512a:	86 89       	ldd	r24, Z+22	; 0x16
    512c:	28 2f       	mov	r18, r24
    512e:	30 e0       	ldi	r19, 0x00	; 0
    5130:	c9 01       	movw	r24, r18
    5132:	88 0f       	add	r24, r24
    5134:	99 1f       	adc	r25, r25
    5136:	88 0f       	add	r24, r24
    5138:	99 1f       	adc	r25, r25
    513a:	88 0f       	add	r24, r24
    513c:	99 1f       	adc	r25, r25
    513e:	82 0f       	add	r24, r18
    5140:	93 1f       	adc	r25, r19
    5142:	ac 01       	movw	r20, r24
    5144:	40 55       	subi	r20, 0x50	; 80
    5146:	5c 4f       	sbci	r21, 0xFC	; 252
    5148:	8c 81       	ldd	r24, Y+4	; 0x04
    514a:	9d 81       	ldd	r25, Y+5	; 0x05
    514c:	9c 01       	movw	r18, r24
    514e:	2e 5f       	subi	r18, 0xFE	; 254
    5150:	3f 4f       	sbci	r19, 0xFF	; 255
    5152:	ca 01       	movw	r24, r20
    5154:	b9 01       	movw	r22, r18
    5156:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
    515a:	0a c0       	rjmp	.+20     	; 0x5170 <xTaskGenericNotifyFromISR+0x1aa>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    515c:	8c 81       	ldd	r24, Y+4	; 0x04
    515e:	9d 81       	ldd	r25, Y+5	; 0x05
    5160:	9c 01       	movw	r18, r24
    5162:	24 5f       	subi	r18, 0xF4	; 244
    5164:	3f 4f       	sbci	r19, 0xFF	; 255
    5166:	83 ef       	ldi	r24, 0xF3	; 243
    5168:	93 e0       	ldi	r25, 0x03	; 3
    516a:	b9 01       	movw	r22, r18
    516c:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    5170:	ec 81       	ldd	r30, Y+4	; 0x04
    5172:	fd 81       	ldd	r31, Y+5	; 0x05
    5174:	96 89       	ldd	r25, Z+22	; 0x16
    5176:	e0 91 9f 03 	lds	r30, 0x039F
    517a:	f0 91 a0 03 	lds	r31, 0x03A0
    517e:	86 89       	ldd	r24, Z+22	; 0x16
    5180:	89 17       	cp	r24, r25
    5182:	60 f4       	brcc	.+24     	; 0x519c <xTaskGenericNotifyFromISR+0x1d6>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    5184:	8f 85       	ldd	r24, Y+15	; 0x0f
    5186:	98 89       	ldd	r25, Y+16	; 0x10
    5188:	00 97       	sbiw	r24, 0x00	; 0
    518a:	29 f0       	breq	.+10     	; 0x5196 <xTaskGenericNotifyFromISR+0x1d0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    518c:	ef 85       	ldd	r30, Y+15	; 0x0f
    518e:	f8 89       	ldd	r31, Y+16	; 0x10
    5190:	81 e0       	ldi	r24, 0x01	; 1
    5192:	80 83       	st	Z, r24
    5194:	03 c0       	rjmp	.+6      	; 0x519c <xTaskGenericNotifyFromISR+0x1d6>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    5196:	81 e0       	ldi	r24, 0x01	; 1
    5198:	80 93 a8 03 	sts	0x03A8, r24
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    519c:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    519e:	62 96       	adiw	r28, 0x12	; 18
    51a0:	0f b6       	in	r0, 0x3f	; 63
    51a2:	f8 94       	cli
    51a4:	de bf       	out	0x3e, r29	; 62
    51a6:	0f be       	out	0x3f, r0	; 63
    51a8:	cd bf       	out	0x3d, r28	; 61
    51aa:	cf 91       	pop	r28
    51ac:	df 91       	pop	r29
    51ae:	1f 91       	pop	r17
    51b0:	0f 91       	pop	r16
    51b2:	ff 90       	pop	r15
    51b4:	ef 90       	pop	r14
    51b6:	08 95       	ret

000051b8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    51b8:	df 93       	push	r29
    51ba:	cf 93       	push	r28
    51bc:	cd b7       	in	r28, 0x3d	; 61
    51be:	de b7       	in	r29, 0x3e	; 62
    51c0:	28 97       	sbiw	r28, 0x08	; 8
    51c2:	0f b6       	in	r0, 0x3f	; 63
    51c4:	f8 94       	cli
    51c6:	de bf       	out	0x3e, r29	; 62
    51c8:	0f be       	out	0x3f, r0	; 63
    51ca:	cd bf       	out	0x3d, r28	; 61
    51cc:	9e 83       	std	Y+6, r25	; 0x06
    51ce:	8d 83       	std	Y+5, r24	; 0x05
    51d0:	78 87       	std	Y+8, r23	; 0x08
    51d2:	6f 83       	std	Y+7, r22	; 0x07
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    51d4:	8d 81       	ldd	r24, Y+5	; 0x05
    51d6:	9e 81       	ldd	r25, Y+6	; 0x06
    51d8:	9c 83       	std	Y+4, r25	; 0x04
    51da:	8b 83       	std	Y+3, r24	; 0x03

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    51dc:	19 82       	std	Y+1, r1	; 0x01
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    51de:	eb 81       	ldd	r30, Y+3	; 0x03
    51e0:	fc 81       	ldd	r31, Y+4	; 0x04
    51e2:	81 a5       	ldd	r24, Z+41	; 0x29
    51e4:	8a 83       	std	Y+2, r24	; 0x02
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    51e6:	eb 81       	ldd	r30, Y+3	; 0x03
    51e8:	fc 81       	ldd	r31, Y+4	; 0x04
    51ea:	82 e0       	ldi	r24, 0x02	; 2
    51ec:	81 a7       	std	Z+41, r24	; 0x29

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    51ee:	eb 81       	ldd	r30, Y+3	; 0x03
    51f0:	fc 81       	ldd	r31, Y+4	; 0x04
    51f2:	85 a1       	ldd	r24, Z+37	; 0x25
    51f4:	96 a1       	ldd	r25, Z+38	; 0x26
    51f6:	a7 a1       	ldd	r26, Z+39	; 0x27
    51f8:	b0 a5       	ldd	r27, Z+40	; 0x28
    51fa:	01 96       	adiw	r24, 0x01	; 1
    51fc:	a1 1d       	adc	r26, r1
    51fe:	b1 1d       	adc	r27, r1
    5200:	eb 81       	ldd	r30, Y+3	; 0x03
    5202:	fc 81       	ldd	r31, Y+4	; 0x04
    5204:	85 a3       	std	Z+37, r24	; 0x25
    5206:	96 a3       	std	Z+38, r25	; 0x26
    5208:	a7 a3       	std	Z+39, r26	; 0x27
    520a:	b0 a7       	std	Z+40, r27	; 0x28

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    520c:	8a 81       	ldd	r24, Y+2	; 0x02
    520e:	81 30       	cpi	r24, 0x01	; 1
    5210:	09 f0       	breq	.+2      	; 0x5214 <vTaskNotifyGiveFromISR+0x5c>
    5212:	50 c0       	rjmp	.+160    	; 0x52b4 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5214:	80 91 af 03 	lds	r24, 0x03AF
    5218:	88 23       	and	r24, r24
    521a:	61 f5       	brne	.+88     	; 0x5274 <vTaskNotifyGiveFromISR+0xbc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    521c:	8b 81       	ldd	r24, Y+3	; 0x03
    521e:	9c 81       	ldd	r25, Y+4	; 0x04
    5220:	02 96       	adiw	r24, 0x02	; 2
    5222:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    5226:	eb 81       	ldd	r30, Y+3	; 0x03
    5228:	fc 81       	ldd	r31, Y+4	; 0x04
    522a:	96 89       	ldd	r25, Z+22	; 0x16
    522c:	80 91 a5 03 	lds	r24, 0x03A5
    5230:	89 17       	cp	r24, r25
    5232:	28 f4       	brcc	.+10     	; 0x523e <vTaskNotifyGiveFromISR+0x86>
    5234:	eb 81       	ldd	r30, Y+3	; 0x03
    5236:	fc 81       	ldd	r31, Y+4	; 0x04
    5238:	86 89       	ldd	r24, Z+22	; 0x16
    523a:	80 93 a5 03 	sts	0x03A5, r24
    523e:	eb 81       	ldd	r30, Y+3	; 0x03
    5240:	fc 81       	ldd	r31, Y+4	; 0x04
    5242:	86 89       	ldd	r24, Z+22	; 0x16
    5244:	28 2f       	mov	r18, r24
    5246:	30 e0       	ldi	r19, 0x00	; 0
    5248:	c9 01       	movw	r24, r18
    524a:	88 0f       	add	r24, r24
    524c:	99 1f       	adc	r25, r25
    524e:	88 0f       	add	r24, r24
    5250:	99 1f       	adc	r25, r25
    5252:	88 0f       	add	r24, r24
    5254:	99 1f       	adc	r25, r25
    5256:	82 0f       	add	r24, r18
    5258:	93 1f       	adc	r25, r19
    525a:	ac 01       	movw	r20, r24
    525c:	40 55       	subi	r20, 0x50	; 80
    525e:	5c 4f       	sbci	r21, 0xFC	; 252
    5260:	8b 81       	ldd	r24, Y+3	; 0x03
    5262:	9c 81       	ldd	r25, Y+4	; 0x04
    5264:	9c 01       	movw	r18, r24
    5266:	2e 5f       	subi	r18, 0xFE	; 254
    5268:	3f 4f       	sbci	r19, 0xFF	; 255
    526a:	ca 01       	movw	r24, r20
    526c:	b9 01       	movw	r22, r18
    526e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
    5272:	0a c0       	rjmp	.+20     	; 0x5288 <vTaskNotifyGiveFromISR+0xd0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    5274:	8b 81       	ldd	r24, Y+3	; 0x03
    5276:	9c 81       	ldd	r25, Y+4	; 0x04
    5278:	9c 01       	movw	r18, r24
    527a:	24 5f       	subi	r18, 0xF4	; 244
    527c:	3f 4f       	sbci	r19, 0xFF	; 255
    527e:	83 ef       	ldi	r24, 0xF3	; 243
    5280:	93 e0       	ldi	r25, 0x03	; 3
    5282:	b9 01       	movw	r22, r18
    5284:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    5288:	eb 81       	ldd	r30, Y+3	; 0x03
    528a:	fc 81       	ldd	r31, Y+4	; 0x04
    528c:	96 89       	ldd	r25, Z+22	; 0x16
    528e:	e0 91 9f 03 	lds	r30, 0x039F
    5292:	f0 91 a0 03 	lds	r31, 0x03A0
    5296:	86 89       	ldd	r24, Z+22	; 0x16
    5298:	89 17       	cp	r24, r25
    529a:	60 f4       	brcc	.+24     	; 0x52b4 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    529c:	8f 81       	ldd	r24, Y+7	; 0x07
    529e:	98 85       	ldd	r25, Y+8	; 0x08
    52a0:	00 97       	sbiw	r24, 0x00	; 0
    52a2:	29 f0       	breq	.+10     	; 0x52ae <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    52a4:	ef 81       	ldd	r30, Y+7	; 0x07
    52a6:	f8 85       	ldd	r31, Y+8	; 0x08
    52a8:	81 e0       	ldi	r24, 0x01	; 1
    52aa:	80 83       	st	Z, r24
    52ac:	03 c0       	rjmp	.+6      	; 0x52b4 <vTaskNotifyGiveFromISR+0xfc>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    52ae:	81 e0       	ldi	r24, 0x01	; 1
    52b0:	80 93 a8 03 	sts	0x03A8, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    52b4:	28 96       	adiw	r28, 0x08	; 8
    52b6:	0f b6       	in	r0, 0x3f	; 63
    52b8:	f8 94       	cli
    52ba:	de bf       	out	0x3e, r29	; 62
    52bc:	0f be       	out	0x3f, r0	; 63
    52be:	cd bf       	out	0x3d, r28	; 61
    52c0:	cf 91       	pop	r28
    52c2:	df 91       	pop	r29
    52c4:	08 95       	ret

000052c6 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
    52c6:	df 93       	push	r29
    52c8:	cf 93       	push	r28
    52ca:	cd b7       	in	r28, 0x3d	; 61
    52cc:	de b7       	in	r29, 0x3e	; 62
    52ce:	27 97       	sbiw	r28, 0x07	; 7
    52d0:	0f b6       	in	r0, 0x3f	; 63
    52d2:	f8 94       	cli
    52d4:	de bf       	out	0x3e, r29	; 62
    52d6:	0f be       	out	0x3f, r0	; 63
    52d8:	cd bf       	out	0x3d, r28	; 61
    52da:	9d 83       	std	Y+5, r25	; 0x05
    52dc:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    52de:	8c 81       	ldd	r24, Y+4	; 0x04
    52e0:	9d 81       	ldd	r25, Y+5	; 0x05
    52e2:	00 97       	sbiw	r24, 0x00	; 0
    52e4:	39 f4       	brne	.+14     	; 0x52f4 <xTaskNotifyStateClear+0x2e>
    52e6:	80 91 9f 03 	lds	r24, 0x039F
    52ea:	90 91 a0 03 	lds	r25, 0x03A0
    52ee:	9f 83       	std	Y+7, r25	; 0x07
    52f0:	8e 83       	std	Y+6, r24	; 0x06
    52f2:	04 c0       	rjmp	.+8      	; 0x52fc <xTaskNotifyStateClear+0x36>
    52f4:	8c 81       	ldd	r24, Y+4	; 0x04
    52f6:	9d 81       	ldd	r25, Y+5	; 0x05
    52f8:	9f 83       	std	Y+7, r25	; 0x07
    52fa:	8e 83       	std	Y+6, r24	; 0x06
    52fc:	8e 81       	ldd	r24, Y+6	; 0x06
    52fe:	9f 81       	ldd	r25, Y+7	; 0x07
    5300:	9b 83       	std	Y+3, r25	; 0x03
    5302:	8a 83       	std	Y+2, r24	; 0x02

		taskENTER_CRITICAL();
    5304:	0f b6       	in	r0, 0x3f	; 63
    5306:	f8 94       	cli
    5308:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    530a:	ea 81       	ldd	r30, Y+2	; 0x02
    530c:	fb 81       	ldd	r31, Y+3	; 0x03
    530e:	81 a5       	ldd	r24, Z+41	; 0x29
    5310:	82 30       	cpi	r24, 0x02	; 2
    5312:	31 f4       	brne	.+12     	; 0x5320 <xTaskNotifyStateClear+0x5a>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5314:	ea 81       	ldd	r30, Y+2	; 0x02
    5316:	fb 81       	ldd	r31, Y+3	; 0x03
    5318:	11 a6       	std	Z+41, r1	; 0x29
				xReturn = pdPASS;
    531a:	81 e0       	ldi	r24, 0x01	; 1
    531c:	89 83       	std	Y+1, r24	; 0x01
    531e:	01 c0       	rjmp	.+2      	; 0x5322 <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
    5320:	19 82       	std	Y+1, r1	; 0x01
			}
		}
		taskEXIT_CRITICAL();
    5322:	0f 90       	pop	r0
    5324:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    5326:	89 81       	ldd	r24, Y+1	; 0x01
	}
    5328:	27 96       	adiw	r28, 0x07	; 7
    532a:	0f b6       	in	r0, 0x3f	; 63
    532c:	f8 94       	cli
    532e:	de bf       	out	0x3e, r29	; 62
    5330:	0f be       	out	0x3f, r0	; 63
    5332:	cd bf       	out	0x3d, r28	; 61
    5334:	cf 91       	pop	r28
    5336:	df 91       	pop	r29
    5338:	08 95       	ret

0000533a <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    533a:	df 93       	push	r29
    533c:	cf 93       	push	r28
    533e:	cd b7       	in	r28, 0x3d	; 61
    5340:	de b7       	in	r29, 0x3e	; 62
    5342:	27 97       	sbiw	r28, 0x07	; 7
    5344:	0f b6       	in	r0, 0x3f	; 63
    5346:	f8 94       	cli
    5348:	de bf       	out	0x3e, r29	; 62
    534a:	0f be       	out	0x3f, r0	; 63
    534c:	cd bf       	out	0x3d, r28	; 61
    534e:	9e 83       	std	Y+6, r25	; 0x06
    5350:	8d 83       	std	Y+5, r24	; 0x05
    5352:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    5354:	80 91 a3 03 	lds	r24, 0x03A3
    5358:	90 91 a4 03 	lds	r25, 0x03A4
    535c:	9a 83       	std	Y+2, r25	; 0x02
    535e:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    5360:	80 91 9f 03 	lds	r24, 0x039F
    5364:	90 91 a0 03 	lds	r25, 0x03A0
    5368:	02 96       	adiw	r24, 0x02	; 2
    536a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    536e:	8d 81       	ldd	r24, Y+5	; 0x05
    5370:	9e 81       	ldd	r25, Y+6	; 0x06
    5372:	2f ef       	ldi	r18, 0xFF	; 255
    5374:	8f 3f       	cpi	r24, 0xFF	; 255
    5376:	92 07       	cpc	r25, r18
    5378:	81 f4       	brne	.+32     	; 0x539a <prvAddCurrentTaskToDelayedList+0x60>
    537a:	8f 81       	ldd	r24, Y+7	; 0x07
    537c:	88 23       	and	r24, r24
    537e:	69 f0       	breq	.+26     	; 0x539a <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    5380:	80 91 9f 03 	lds	r24, 0x039F
    5384:	90 91 a0 03 	lds	r25, 0x03A0
    5388:	9c 01       	movw	r18, r24
    538a:	2e 5f       	subi	r18, 0xFE	; 254
    538c:	3f 4f       	sbci	r19, 0xFF	; 255
    538e:	85 e0       	ldi	r24, 0x05	; 5
    5390:	94 e0       	ldi	r25, 0x04	; 4
    5392:	b9 01       	movw	r22, r18
    5394:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
    5398:	43 c0       	rjmp	.+134    	; 0x5420 <prvAddCurrentTaskToDelayedList+0xe6>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    539a:	29 81       	ldd	r18, Y+1	; 0x01
    539c:	3a 81       	ldd	r19, Y+2	; 0x02
    539e:	8d 81       	ldd	r24, Y+5	; 0x05
    53a0:	9e 81       	ldd	r25, Y+6	; 0x06
    53a2:	82 0f       	add	r24, r18
    53a4:	93 1f       	adc	r25, r19
    53a6:	9c 83       	std	Y+4, r25	; 0x04
    53a8:	8b 83       	std	Y+3, r24	; 0x03

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    53aa:	e0 91 9f 03 	lds	r30, 0x039F
    53ae:	f0 91 a0 03 	lds	r31, 0x03A0
    53b2:	8b 81       	ldd	r24, Y+3	; 0x03
    53b4:	9c 81       	ldd	r25, Y+4	; 0x04
    53b6:	93 83       	std	Z+3, r25	; 0x03
    53b8:	82 83       	std	Z+2, r24	; 0x02

			if( xTimeToWake < xConstTickCount )
    53ba:	2b 81       	ldd	r18, Y+3	; 0x03
    53bc:	3c 81       	ldd	r19, Y+4	; 0x04
    53be:	89 81       	ldd	r24, Y+1	; 0x01
    53c0:	9a 81       	ldd	r25, Y+2	; 0x02
    53c2:	28 17       	cp	r18, r24
    53c4:	39 07       	cpc	r19, r25
    53c6:	70 f4       	brcc	.+28     	; 0x53e4 <prvAddCurrentTaskToDelayedList+0xaa>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    53c8:	80 91 f1 03 	lds	r24, 0x03F1
    53cc:	90 91 f2 03 	lds	r25, 0x03F2
    53d0:	20 91 9f 03 	lds	r18, 0x039F
    53d4:	30 91 a0 03 	lds	r19, 0x03A0
    53d8:	2e 5f       	subi	r18, 0xFE	; 254
    53da:	3f 4f       	sbci	r19, 0xFF	; 255
    53dc:	b9 01       	movw	r22, r18
    53de:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <vListInsert>
    53e2:	1e c0       	rjmp	.+60     	; 0x5420 <prvAddCurrentTaskToDelayedList+0xe6>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    53e4:	40 91 ef 03 	lds	r20, 0x03EF
    53e8:	50 91 f0 03 	lds	r21, 0x03F0
    53ec:	80 91 9f 03 	lds	r24, 0x039F
    53f0:	90 91 a0 03 	lds	r25, 0x03A0
    53f4:	9c 01       	movw	r18, r24
    53f6:	2e 5f       	subi	r18, 0xFE	; 254
    53f8:	3f 4f       	sbci	r19, 0xFF	; 255
    53fa:	ca 01       	movw	r24, r20
    53fc:	b9 01       	movw	r22, r18
    53fe:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    5402:	20 91 ab 03 	lds	r18, 0x03AB
    5406:	30 91 ac 03 	lds	r19, 0x03AC
    540a:	8b 81       	ldd	r24, Y+3	; 0x03
    540c:	9c 81       	ldd	r25, Y+4	; 0x04
    540e:	82 17       	cp	r24, r18
    5410:	93 07       	cpc	r25, r19
    5412:	30 f4       	brcc	.+12     	; 0x5420 <prvAddCurrentTaskToDelayedList+0xe6>
				{
					xNextTaskUnblockTime = xTimeToWake;
    5414:	8b 81       	ldd	r24, Y+3	; 0x03
    5416:	9c 81       	ldd	r25, Y+4	; 0x04
    5418:	90 93 ac 03 	sts	0x03AC, r25
    541c:	80 93 ab 03 	sts	0x03AB, r24

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    5420:	27 96       	adiw	r28, 0x07	; 7
    5422:	0f b6       	in	r0, 0x3f	; 63
    5424:	f8 94       	cli
    5426:	de bf       	out	0x3e, r29	; 62
    5428:	0f be       	out	0x3f, r0	; 63
    542a:	cd bf       	out	0x3d, r28	; 61
    542c:	cf 91       	pop	r28
    542e:	df 91       	pop	r29
    5430:	08 95       	ret

00005432 <__prologue_saves__>:
    5432:	2f 92       	push	r2
    5434:	3f 92       	push	r3
    5436:	4f 92       	push	r4
    5438:	5f 92       	push	r5
    543a:	6f 92       	push	r6
    543c:	7f 92       	push	r7
    543e:	8f 92       	push	r8
    5440:	9f 92       	push	r9
    5442:	af 92       	push	r10
    5444:	bf 92       	push	r11
    5446:	cf 92       	push	r12
    5448:	df 92       	push	r13
    544a:	ef 92       	push	r14
    544c:	ff 92       	push	r15
    544e:	0f 93       	push	r16
    5450:	1f 93       	push	r17
    5452:	cf 93       	push	r28
    5454:	df 93       	push	r29
    5456:	cd b7       	in	r28, 0x3d	; 61
    5458:	de b7       	in	r29, 0x3e	; 62
    545a:	ca 1b       	sub	r28, r26
    545c:	db 0b       	sbc	r29, r27
    545e:	0f b6       	in	r0, 0x3f	; 63
    5460:	f8 94       	cli
    5462:	de bf       	out	0x3e, r29	; 62
    5464:	0f be       	out	0x3f, r0	; 63
    5466:	cd bf       	out	0x3d, r28	; 61
    5468:	09 94       	ijmp

0000546a <__epilogue_restores__>:
    546a:	2a 88       	ldd	r2, Y+18	; 0x12
    546c:	39 88       	ldd	r3, Y+17	; 0x11
    546e:	48 88       	ldd	r4, Y+16	; 0x10
    5470:	5f 84       	ldd	r5, Y+15	; 0x0f
    5472:	6e 84       	ldd	r6, Y+14	; 0x0e
    5474:	7d 84       	ldd	r7, Y+13	; 0x0d
    5476:	8c 84       	ldd	r8, Y+12	; 0x0c
    5478:	9b 84       	ldd	r9, Y+11	; 0x0b
    547a:	aa 84       	ldd	r10, Y+10	; 0x0a
    547c:	b9 84       	ldd	r11, Y+9	; 0x09
    547e:	c8 84       	ldd	r12, Y+8	; 0x08
    5480:	df 80       	ldd	r13, Y+7	; 0x07
    5482:	ee 80       	ldd	r14, Y+6	; 0x06
    5484:	fd 80       	ldd	r15, Y+5	; 0x05
    5486:	0c 81       	ldd	r16, Y+4	; 0x04
    5488:	1b 81       	ldd	r17, Y+3	; 0x03
    548a:	aa 81       	ldd	r26, Y+2	; 0x02
    548c:	b9 81       	ldd	r27, Y+1	; 0x01
    548e:	ce 0f       	add	r28, r30
    5490:	d1 1d       	adc	r29, r1
    5492:	0f b6       	in	r0, 0x3f	; 63
    5494:	f8 94       	cli
    5496:	de bf       	out	0x3e, r29	; 62
    5498:	0f be       	out	0x3f, r0	; 63
    549a:	cd bf       	out	0x3d, r28	; 61
    549c:	ed 01       	movw	r28, r26
    549e:	08 95       	ret

000054a0 <memcpy>:
    54a0:	fb 01       	movw	r30, r22
    54a2:	dc 01       	movw	r26, r24
    54a4:	02 c0       	rjmp	.+4      	; 0x54aa <memcpy+0xa>
    54a6:	01 90       	ld	r0, Z+
    54a8:	0d 92       	st	X+, r0
    54aa:	41 50       	subi	r20, 0x01	; 1
    54ac:	50 40       	sbci	r21, 0x00	; 0
    54ae:	d8 f7       	brcc	.-10     	; 0x54a6 <memcpy+0x6>
    54b0:	08 95       	ret

000054b2 <_exit>:
    54b2:	f8 94       	cli

000054b4 <__stop_program>:
    54b4:	ff cf       	rjmp	.-2      	; 0x54b4 <__stop_program>
