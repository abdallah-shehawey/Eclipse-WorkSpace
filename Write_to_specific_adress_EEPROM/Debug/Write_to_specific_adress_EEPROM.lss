
Write_to_specific_adress_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000004a4  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006fc  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <EEPROM_write>:
 */ 

#include <avr/io.h>
#include "std_macros.h"
void EEPROM_write(unsigned short address, unsigned char data )
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <EEPROM_write+0x6>
  72:	0f 92       	push	r0
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	9a 83       	std	Y+2, r25	; 0x02
  7a:	89 83       	std	Y+1, r24	; 0x01
  7c:	6b 83       	std	Y+3, r22	; 0x03
	/*set up address register*/
	EEARL=(char)address;
  7e:	ee e3       	ldi	r30, 0x3E	; 62
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	89 81       	ldd	r24, Y+1	; 0x01
  84:	80 83       	st	Z, r24
	EEARH=(char)(address>>8);
  86:	ef e3       	ldi	r30, 0x3F	; 63
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	9a 81       	ldd	r25, Y+2	; 0x02
  8e:	89 2f       	mov	r24, r25
  90:	99 27       	eor	r25, r25
  92:	80 83       	st	Z, r24
	/*set up data register*/
	EEDR=data ;
  94:	ed e3       	ldi	r30, 0x3D	; 61
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	80 83       	st	Z, r24
	/*write logical one to EEMWE*/
	EECR = 0b00000110;
  9c:	ec e3       	ldi	r30, 0x3C	; 60
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	86 e0       	ldi	r24, 0x06	; 6
  a2:	80 83       	st	Z, r24
	/* wait for completion of  write operation*/
	while(Read_bIT(EECR,EEWE)==1); 
  a4:	ec e3       	ldi	r30, 0x3C	; 60
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	88 2f       	mov	r24, r24
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	82 70       	andi	r24, 0x02	; 2
  b0:	90 70       	andi	r25, 0x00	; 0
  b2:	95 95       	asr	r25
  b4:	87 95       	ror	r24
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	91 05       	cpc	r25, r1
  ba:	a1 f3       	breq	.-24     	; 0xa4 <EEPROM_write+0x38>
}
  bc:	0f 90       	pop	r0
  be:	0f 90       	pop	r0
  c0:	0f 90       	pop	r0
  c2:	cf 91       	pop	r28
  c4:	df 91       	pop	r29
  c6:	08 95       	ret

000000c8 <EEPROM_read>:
unsigned char EEPROM_read( unsigned short address )
{
  c8:	df 93       	push	r29
  ca:	cf 93       	push	r28
  cc:	00 d0       	rcall	.+0      	; 0xce <EEPROM_read+0x6>
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	9a 83       	std	Y+2, r25	; 0x02
  d4:	89 83       	std	Y+1, r24	; 0x01
	/*set up address register*/
	EEARL=(char)address;
  d6:	ee e3       	ldi	r30, 0x3E	; 62
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	80 83       	st	Z, r24
	EEARH=(char)(address>>8);
  de:	ef e3       	ldi	r30, 0x3F	; 63
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	9a 81       	ldd	r25, Y+2	; 0x02
  e6:	89 2f       	mov	r24, r25
  e8:	99 27       	eor	r25, r25
  ea:	80 83       	st	Z, r24
	/*start EEPROM read by setting EERE*/
	SET_BIT(EECR,EERE);
  ec:	ac e3       	ldi	r26, 0x3C	; 60
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	ec e3       	ldi	r30, 0x3C	; 60
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	8c 93       	st	X, r24
	/*return data from data register*/
	return EEDR ;
  fa:	ed e3       	ldi	r30, 0x3D	; 61
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
}
 100:	0f 90       	pop	r0
 102:	0f 90       	pop	r0
 104:	cf 91       	pop	r28
 106:	df 91       	pop	r29
 108:	08 95       	ret

0000010a <main>:
 */ 


#include "EEPROM_driver.h"
int main(void)
{
 10a:	df 93       	push	r29
 10c:	cf 93       	push	r28
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
	EEPROM_write(0x0030,0X50);
 112:	80 e3       	ldi	r24, 0x30	; 48
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	60 e5       	ldi	r22, 0x50	; 80
 118:	0e 94 36 00 	call	0x6c	; 0x6c <EEPROM_write>
 11c:	ff cf       	rjmp	.-2      	; 0x11c <main+0x12>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
