
RTOS_Message_Queue.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000065a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000065a2  00006636  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003bb  00800086  00800086  0000665c  2**0
                  ALLOC
  3 .stab         00007f08  00000000  00000000  0000665c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000039ca  00000000  00000000  0000e564  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00011f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0001206e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000121de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00013e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00014d12  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00015ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00015c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00015ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001667b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 cf 1b 	jmp	0x379e	; 0x379e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	f5 e6       	ldi	r31, 0x65	; 101
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 34       	cpi	r26, 0x41	; 65
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 10 18 	call	0x3020	; 0x3020 <main>
      8a:	0c 94 cf 32 	jmp	0x659e	; 0x659e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8f 32 	jmp	0x651e	; 0x651e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e6       	ldi	r26, 0x69	; 105
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ab 32 	jmp	0x6556	; 0x6556 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9b 32 	jmp	0x6536	; 0x6536 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b7 32 	jmp	0x656e	; 0x656e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9b 32 	jmp	0x6536	; 0x6536 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b7 32 	jmp	0x656e	; 0x656e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8f 32 	jmp	0x651e	; 0x651e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e6       	ldi	r24, 0x69	; 105
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ab 32 	jmp	0x6556	; 0x6556 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9b 32 	jmp	0x6536	; 0x6536 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b7 32 	jmp	0x656e	; 0x656e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9b 32 	jmp	0x6536	; 0x6536 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b7 32 	jmp	0x656e	; 0x656e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9b 32 	jmp	0x6536	; 0x6536 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b7 32 	jmp	0x656e	; 0x656e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9f 32 	jmp	0x653e	; 0x653e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 bb 32 	jmp	0x6576	; 0x6576 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_vsetPINDir>:


#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_vsetPINDir+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_vsetPINDir+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	82 34       	cpi	r24, 0x42	; 66
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <DIO_vsetPINDir+0x2a>
     b6e:	44 c0       	rjmp	.+136    	; 0xbf8 <DIO_vsetPINDir+0xb2>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	23 34       	cpi	r18, 0x43	; 67
     b76:	31 05       	cpc	r19, r1
     b78:	34 f4       	brge	.+12     	; 0xb86 <DIO_vsetPINDir+0x40>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	81 34       	cpi	r24, 0x41	; 65
     b80:	91 05       	cpc	r25, r1
     b82:	71 f0       	breq	.+28     	; 0xba0 <DIO_vsetPINDir+0x5a>
     b84:	bc c0       	rjmp	.+376    	; 0xcfe <DIO_vsetPINDir+0x1b8>
     b86:	2c 81       	ldd	r18, Y+4	; 0x04
     b88:	3d 81       	ldd	r19, Y+5	; 0x05
     b8a:	23 34       	cpi	r18, 0x43	; 67
     b8c:	31 05       	cpc	r19, r1
     b8e:	09 f4       	brne	.+2      	; 0xb92 <DIO_vsetPINDir+0x4c>
     b90:	5f c0       	rjmp	.+190    	; 0xc50 <DIO_vsetPINDir+0x10a>
     b92:	8c 81       	ldd	r24, Y+4	; 0x04
     b94:	9d 81       	ldd	r25, Y+5	; 0x05
     b96:	84 34       	cpi	r24, 0x44	; 68
     b98:	91 05       	cpc	r25, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <DIO_vsetPINDir+0x58>
     b9c:	85 c0       	rjmp	.+266    	; 0xca8 <DIO_vsetPINDir+0x162>
     b9e:	af c0       	rjmp	.+350    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	{
		
		
		case 'A':
		if(direction==1)
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	a1 f4       	brne	.+40     	; 0xbce <DIO_vsetPINDir+0x88>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
     ba6:	aa e3       	ldi	r26, 0x3A	; 58
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e3       	ldi	r30, 0x3A	; 58
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_vsetPINDir+0x7e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_vsetPINDir+0x7a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	98 c0       	rjmp	.+304    	; 0xcfe <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
     bce:	aa e3       	ldi	r26, 0x3A	; 58
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	ea e3       	ldi	r30, 0x3A	; 58
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_vsetPINDir+0xa6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_vsetPINDir+0xa2>
     bf0:	80 95       	com	r24
     bf2:	84 23       	and	r24, r20
     bf4:	8c 93       	st	X, r24
     bf6:	83 c0       	rjmp	.+262    	; 0xcfe <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'B':
		if(direction==1)
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	a1 f4       	brne	.+40     	; 0xc26 <DIO_vsetPINDir+0xe0>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
     bfe:	a7 e3       	ldi	r26, 0x37	; 55
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e7 e3       	ldi	r30, 0x37	; 55
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	48 2f       	mov	r20, r24
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	02 2e       	mov	r0, r18
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <DIO_vsetPINDir+0xd6>
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	0a 94       	dec	r0
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <DIO_vsetPINDir+0xd2>
     c20:	84 2b       	or	r24, r20
     c22:	8c 93       	st	X, r24
     c24:	6c c0       	rjmp	.+216    	; 0xcfe <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
     c26:	a7 e3       	ldi	r26, 0x37	; 55
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e7 e3       	ldi	r30, 0x37	; 55
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	48 2f       	mov	r20, r24
     c32:	8a 81       	ldd	r24, Y+2	; 0x02
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	02 2e       	mov	r0, r18
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_vsetPINDir+0xfe>
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <DIO_vsetPINDir+0xfa>
     c48:	80 95       	com	r24
     c4a:	84 23       	and	r24, r20
     c4c:	8c 93       	st	X, r24
     c4e:	57 c0       	rjmp	.+174    	; 0xcfe <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'C':
		if(direction==1)
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	a1 f4       	brne	.+40     	; 0xc7e <DIO_vsetPINDir+0x138>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
     c56:	a4 e3       	ldi	r26, 0x34	; 52
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e4 e3       	ldi	r30, 0x34	; 52
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	48 2f       	mov	r20, r24
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 2e       	mov	r0, r18
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <DIO_vsetPINDir+0x12e>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	0a 94       	dec	r0
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <DIO_vsetPINDir+0x12a>
     c78:	84 2b       	or	r24, r20
     c7a:	8c 93       	st	X, r24
     c7c:	40 c0       	rjmp	.+128    	; 0xcfe <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
     c7e:	a4 e3       	ldi	r26, 0x34	; 52
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e4 e3       	ldi	r30, 0x34	; 52
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	48 2f       	mov	r20, r24
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	02 2e       	mov	r0, r18
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <DIO_vsetPINDir+0x156>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	0a 94       	dec	r0
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <DIO_vsetPINDir+0x152>
     ca0:	80 95       	com	r24
     ca2:	84 23       	and	r24, r20
     ca4:	8c 93       	st	X, r24
     ca6:	2b c0       	rjmp	.+86     	; 0xcfe <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'D':
		if(direction==1)
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	a1 f4       	brne	.+40     	; 0xcd6 <DIO_vsetPINDir+0x190>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
     cae:	a1 e3       	ldi	r26, 0x31	; 49
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e1 e3       	ldi	r30, 0x31	; 49
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	48 2f       	mov	r20, r24
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 2e       	mov	r0, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <DIO_vsetPINDir+0x186>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	0a 94       	dec	r0
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <DIO_vsetPINDir+0x182>
     cd0:	84 2b       	or	r24, r20
     cd2:	8c 93       	st	X, r24
     cd4:	14 c0       	rjmp	.+40     	; 0xcfe <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
     cd6:	a1 e3       	ldi	r26, 0x31	; 49
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e1 e3       	ldi	r30, 0x31	; 49
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 2e       	mov	r0, r18
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <DIO_vsetPINDir+0x1ae>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <DIO_vsetPINDir+0x1aa>
     cf8:	80 95       	com	r24
     cfa:	84 23       	and	r24, r20
     cfc:	8c 93       	st	X, r24
		}
		break;
		default: 
		break;
	}
}
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <DIO_write>:


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <DIO_write+0x6>
     d14:	00 d0       	rcall	.+0      	; 0xd16 <DIO_write+0x8>
     d16:	0f 92       	push	r0
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	89 83       	std	Y+1, r24	; 0x01
     d1e:	6a 83       	std	Y+2, r22	; 0x02
     d20:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	3d 83       	std	Y+5, r19	; 0x05
     d2a:	2c 83       	std	Y+4, r18	; 0x04
     d2c:	8c 81       	ldd	r24, Y+4	; 0x04
     d2e:	9d 81       	ldd	r25, Y+5	; 0x05
     d30:	82 34       	cpi	r24, 0x42	; 66
     d32:	91 05       	cpc	r25, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <DIO_write+0x2a>
     d36:	44 c0       	rjmp	.+136    	; 0xdc0 <DIO_write+0xb2>
     d38:	2c 81       	ldd	r18, Y+4	; 0x04
     d3a:	3d 81       	ldd	r19, Y+5	; 0x05
     d3c:	23 34       	cpi	r18, 0x43	; 67
     d3e:	31 05       	cpc	r19, r1
     d40:	34 f4       	brge	.+12     	; 0xd4e <DIO_write+0x40>
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	9d 81       	ldd	r25, Y+5	; 0x05
     d46:	81 34       	cpi	r24, 0x41	; 65
     d48:	91 05       	cpc	r25, r1
     d4a:	71 f0       	breq	.+28     	; 0xd68 <DIO_write+0x5a>
     d4c:	bc c0       	rjmp	.+376    	; 0xec6 <DIO_write+0x1b8>
     d4e:	2c 81       	ldd	r18, Y+4	; 0x04
     d50:	3d 81       	ldd	r19, Y+5	; 0x05
     d52:	23 34       	cpi	r18, 0x43	; 67
     d54:	31 05       	cpc	r19, r1
     d56:	09 f4       	brne	.+2      	; 0xd5a <DIO_write+0x4c>
     d58:	5f c0       	rjmp	.+190    	; 0xe18 <DIO_write+0x10a>
     d5a:	8c 81       	ldd	r24, Y+4	; 0x04
     d5c:	9d 81       	ldd	r25, Y+5	; 0x05
     d5e:	84 34       	cpi	r24, 0x44	; 68
     d60:	91 05       	cpc	r25, r1
     d62:	09 f4       	brne	.+2      	; 0xd66 <DIO_write+0x58>
     d64:	85 c0       	rjmp	.+266    	; 0xe70 <DIO_write+0x162>
     d66:	af c0       	rjmp	.+350    	; 0xec6 <DIO_write+0x1b8>
	{
		case 'A' :
		
		if(outputvalue==1)
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	a1 f4       	brne	.+40     	; 0xd96 <DIO_write+0x88>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
     d6e:	ab e3       	ldi	r26, 0x3B	; 59
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	eb e3       	ldi	r30, 0x3B	; 59
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 2e       	mov	r0, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <DIO_write+0x7e>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <DIO_write+0x7a>
     d90:	84 2b       	or	r24, r20
     d92:	8c 93       	st	X, r24
     d94:	98 c0       	rjmp	.+304    	; 0xec6 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
     d96:	ab e3       	ldi	r26, 0x3B	; 59
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	eb e3       	ldi	r30, 0x3B	; 59
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <DIO_write+0xa6>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <DIO_write+0xa2>
     db8:	80 95       	com	r24
     dba:	84 23       	and	r24, r20
     dbc:	8c 93       	st	X, r24
     dbe:	83 c0       	rjmp	.+262    	; 0xec6 <DIO_write+0x1b8>
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	a1 f4       	brne	.+40     	; 0xdee <DIO_write+0xe0>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
     dc6:	a8 e3       	ldi	r26, 0x38	; 56
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e3       	ldi	r30, 0x38	; 56
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	48 2f       	mov	r20, r24
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 2e       	mov	r0, r18
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <DIO_write+0xd6>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	0a 94       	dec	r0
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <DIO_write+0xd2>
     de8:	84 2b       	or	r24, r20
     dea:	8c 93       	st	X, r24
     dec:	6c c0       	rjmp	.+216    	; 0xec6 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
     dee:	a8 e3       	ldi	r26, 0x38	; 56
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e8 e3       	ldi	r30, 0x38	; 56
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	48 2f       	mov	r20, r24
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 2e       	mov	r0, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_write+0xfe>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_write+0xfa>
     e10:	80 95       	com	r24
     e12:	84 23       	and	r24, r20
     e14:	8c 93       	st	X, r24
     e16:	57 c0       	rjmp	.+174    	; 0xec6 <DIO_write+0x1b8>
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	a1 f4       	brne	.+40     	; 0xe46 <DIO_write+0x138>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
     e1e:	a5 e3       	ldi	r26, 0x35	; 53
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e5 e3       	ldi	r30, 0x35	; 53
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_write+0x12e>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_write+0x12a>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	40 c0       	rjmp	.+128    	; 0xec6 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
     e46:	a5 e3       	ldi	r26, 0x35	; 53
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e5 e3       	ldi	r30, 0x35	; 53
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <DIO_write+0x156>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <DIO_write+0x152>
     e68:	80 95       	com	r24
     e6a:	84 23       	and	r24, r20
     e6c:	8c 93       	st	X, r24
     e6e:	2b c0       	rjmp	.+86     	; 0xec6 <DIO_write+0x1b8>
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	a1 f4       	brne	.+40     	; 0xe9e <DIO_write+0x190>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
     e76:	a2 e3       	ldi	r26, 0x32	; 50
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e2 e3       	ldi	r30, 0x32	; 50
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_write+0x186>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_write+0x182>
     e98:	84 2b       	or	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	14 c0       	rjmp	.+40     	; 0xec6 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
     e9e:	a2 e3       	ldi	r26, 0x32	; 50
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e2 e3       	ldi	r30, 0x32	; 50
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DIO_write+0x1ae>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <DIO_write+0x1aa>
     ec0:	80 95       	com	r24
     ec2:	84 23       	and	r24, r20
     ec4:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	00 d0       	rcall	.+0      	; 0xedc <DIO_u8read+0x6>
     edc:	00 d0       	rcall	.+0      	; 0xede <DIO_u8read+0x8>
     ede:	0f 92       	push	r0
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	8a 83       	std	Y+2, r24	; 0x02
     ee6:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char return_value=0;
     ee8:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	3d 83       	std	Y+5, r19	; 0x05
     ef2:	2c 83       	std	Y+4, r18	; 0x04
     ef4:	4c 81       	ldd	r20, Y+4	; 0x04
     ef6:	5d 81       	ldd	r21, Y+5	; 0x05
     ef8:	42 34       	cpi	r20, 0x42	; 66
     efa:	51 05       	cpc	r21, r1
     efc:	b1 f1       	breq	.+108    	; 0xf6a <DIO_u8read+0x94>
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	9d 81       	ldd	r25, Y+5	; 0x05
     f02:	83 34       	cpi	r24, 0x43	; 67
     f04:	91 05       	cpc	r25, r1
     f06:	34 f4       	brge	.+12     	; 0xf14 <DIO_u8read+0x3e>
     f08:	2c 81       	ldd	r18, Y+4	; 0x04
     f0a:	3d 81       	ldd	r19, Y+5	; 0x05
     f0c:	21 34       	cpi	r18, 0x41	; 65
     f0e:	31 05       	cpc	r19, r1
     f10:	71 f0       	breq	.+28     	; 0xf2e <DIO_u8read+0x58>
     f12:	84 c0       	rjmp	.+264    	; 0x101c <DIO_u8read+0x146>
     f14:	4c 81       	ldd	r20, Y+4	; 0x04
     f16:	5d 81       	ldd	r21, Y+5	; 0x05
     f18:	43 34       	cpi	r20, 0x43	; 67
     f1a:	51 05       	cpc	r21, r1
     f1c:	09 f4       	brne	.+2      	; 0xf20 <DIO_u8read+0x4a>
     f1e:	43 c0       	rjmp	.+134    	; 0xfa6 <DIO_u8read+0xd0>
     f20:	8c 81       	ldd	r24, Y+4	; 0x04
     f22:	9d 81       	ldd	r25, Y+5	; 0x05
     f24:	84 34       	cpi	r24, 0x44	; 68
     f26:	91 05       	cpc	r25, r1
     f28:	09 f4       	brne	.+2      	; 0xf2c <DIO_u8read+0x56>
     f2a:	5b c0       	rjmp	.+182    	; 0xfe2 <DIO_u8read+0x10c>
     f2c:	77 c0       	rjmp	.+238    	; 0x101c <DIO_u8read+0x146>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
     f2e:	e9 e3       	ldi	r30, 0x39	; 57
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	50 e0       	ldi	r21, 0x00	; 0
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_u8read+0x72>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	2a 95       	dec	r18
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_u8read+0x6e>
     f4c:	9a 01       	movw	r18, r20
     f4e:	28 23       	and	r18, r24
     f50:	39 23       	and	r19, r25
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	88 2f       	mov	r24, r24
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	a9 01       	movw	r20, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_u8read+0x8a>
     f5c:	55 95       	asr	r21
     f5e:	47 95       	ror	r20
     f60:	8a 95       	dec	r24
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_u8read+0x86>
     f64:	ca 01       	movw	r24, r20
     f66:	89 83       	std	Y+1, r24	; 0x01
     f68:	59 c0       	rjmp	.+178    	; 0x101c <DIO_u8read+0x146>
		break;
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
     f6a:	e6 e3       	ldi	r30, 0x36	; 54
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <DIO_u8read+0xae>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	2a 95       	dec	r18
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <DIO_u8read+0xaa>
     f88:	9a 01       	movw	r18, r20
     f8a:	28 23       	and	r18, r24
     f8c:	39 23       	and	r19, r25
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	a9 01       	movw	r20, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <DIO_u8read+0xc6>
     f98:	55 95       	asr	r21
     f9a:	47 95       	ror	r20
     f9c:	8a 95       	dec	r24
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <DIO_u8read+0xc2>
     fa0:	ca 01       	movw	r24, r20
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	3b c0       	rjmp	.+118    	; 0x101c <DIO_u8read+0x146>
		break;
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
     fa6:	e3 e3       	ldi	r30, 0x33	; 51
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <DIO_u8read+0xea>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	2a 95       	dec	r18
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <DIO_u8read+0xe6>
     fc4:	9a 01       	movw	r18, r20
     fc6:	28 23       	and	r18, r24
     fc8:	39 23       	and	r19, r25
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	88 2f       	mov	r24, r24
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	a9 01       	movw	r20, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <DIO_u8read+0x102>
     fd4:	55 95       	asr	r21
     fd6:	47 95       	ror	r20
     fd8:	8a 95       	dec	r24
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <DIO_u8read+0xfe>
     fdc:	ca 01       	movw	r24, r20
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	1d c0       	rjmp	.+58     	; 0x101c <DIO_u8read+0x146>
		break;
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
     fe2:	e0 e3       	ldi	r30, 0x30	; 48
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_u8read+0x126>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	2a 95       	dec	r18
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_u8read+0x122>
    1000:	9a 01       	movw	r18, r20
    1002:	28 23       	and	r18, r24
    1004:	39 23       	and	r19, r25
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	a9 01       	movw	r20, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_u8read+0x13e>
    1010:	55 95       	asr	r21
    1012:	47 95       	ror	r20
    1014:	8a 95       	dec	r24
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_u8read+0x13a>
    1018:	ca 01       	movw	r24, r20
    101a:	89 83       	std	Y+1, r24	; 0x01
		break;
		default: 
		break;
	}
	return return_value ;
    101c:	89 81       	ldd	r24, Y+1	; 0x01
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	00 d0       	rcall	.+0      	; 0x1034 <DIO_toggle+0x6>
    1034:	00 d0       	rcall	.+0      	; 0x1036 <DIO_toggle+0x8>
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	82 34       	cpi	r24, 0x42	; 66
    104e:	91 05       	cpc	r25, r1
    1050:	51 f1       	breq	.+84     	; 0x10a6 <DIO_toggle+0x78>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	23 34       	cpi	r18, 0x43	; 67
    1058:	31 05       	cpc	r19, r1
    105a:	34 f4       	brge	.+12     	; 0x1068 <DIO_toggle+0x3a>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	81 34       	cpi	r24, 0x41	; 65
    1062:	91 05       	cpc	r25, r1
    1064:	61 f0       	breq	.+24     	; 0x107e <DIO_toggle+0x50>
    1066:	5a c0       	rjmp	.+180    	; 0x111c <DIO_toggle+0xee>
    1068:	2b 81       	ldd	r18, Y+3	; 0x03
    106a:	3c 81       	ldd	r19, Y+4	; 0x04
    106c:	23 34       	cpi	r18, 0x43	; 67
    106e:	31 05       	cpc	r19, r1
    1070:	71 f1       	breq	.+92     	; 0x10ce <DIO_toggle+0xa0>
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	84 34       	cpi	r24, 0x44	; 68
    1078:	91 05       	cpc	r25, r1
    107a:	e9 f1       	breq	.+122    	; 0x10f6 <DIO_toggle+0xc8>
    107c:	4f c0       	rjmp	.+158    	; 0x111c <DIO_toggle+0xee>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
    107e:	ab e3       	ldi	r26, 0x3B	; 59
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	eb e3       	ldi	r30, 0x3B	; 59
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 2e       	mov	r0, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <DIO_toggle+0x6e>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <DIO_toggle+0x6a>
    10a0:	84 27       	eor	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	3b c0       	rjmp	.+118    	; 0x111c <DIO_toggle+0xee>
		break;
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
    10a6:	a8 e3       	ldi	r26, 0x38	; 56
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 e3       	ldi	r30, 0x38	; 56
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <DIO_toggle+0x96>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <DIO_toggle+0x92>
    10c8:	84 27       	eor	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	27 c0       	rjmp	.+78     	; 0x111c <DIO_toggle+0xee>
		break;
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
    10ce:	a5 e3       	ldi	r26, 0x35	; 53
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e5 e3       	ldi	r30, 0x35	; 53
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <DIO_toggle+0xbe>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <DIO_toggle+0xba>
    10f0:	84 27       	eor	r24, r20
    10f2:	8c 93       	st	X, r24
    10f4:	13 c0       	rjmp	.+38     	; 0x111c <DIO_toggle+0xee>
		break;
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
    10f6:	a2 e3       	ldi	r26, 0x32	; 50
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e2 e3       	ldi	r30, 0x32	; 50
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	48 2f       	mov	r20, r24
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 2e       	mov	r0, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_toggle+0xe6>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_toggle+0xe2>
    1118:	84 27       	eor	r24, r20
    111a:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <DIO_set_port_direction>:
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	00 d0       	rcall	.+0      	; 0x1130 <DIO_set_port_direction+0x6>
    1130:	00 d0       	rcall	.+0      	; 0x1132 <DIO_set_port_direction+0x8>
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	3c 83       	std	Y+4, r19	; 0x04
    1142:	2b 83       	std	Y+3, r18	; 0x03
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	9c 81       	ldd	r25, Y+4	; 0x04
    1148:	82 34       	cpi	r24, 0x42	; 66
    114a:	91 05       	cpc	r25, r1
    114c:	d9 f0       	breq	.+54     	; 0x1184 <DIO_set_port_direction+0x5a>
    114e:	2b 81       	ldd	r18, Y+3	; 0x03
    1150:	3c 81       	ldd	r19, Y+4	; 0x04
    1152:	23 34       	cpi	r18, 0x43	; 67
    1154:	31 05       	cpc	r19, r1
    1156:	34 f4       	brge	.+12     	; 0x1164 <DIO_set_port_direction+0x3a>
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 34       	cpi	r24, 0x41	; 65
    115e:	91 05       	cpc	r25, r1
    1160:	61 f0       	breq	.+24     	; 0x117a <DIO_set_port_direction+0x50>
    1162:	1e c0       	rjmp	.+60     	; 0x11a0 <DIO_set_port_direction+0x76>
    1164:	2b 81       	ldd	r18, Y+3	; 0x03
    1166:	3c 81       	ldd	r19, Y+4	; 0x04
    1168:	23 34       	cpi	r18, 0x43	; 67
    116a:	31 05       	cpc	r19, r1
    116c:	81 f0       	breq	.+32     	; 0x118e <DIO_set_port_direction+0x64>
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	84 34       	cpi	r24, 0x44	; 68
    1174:	91 05       	cpc	r25, r1
    1176:	81 f0       	breq	.+32     	; 0x1198 <DIO_set_port_direction+0x6e>
    1178:	13 c0       	rjmp	.+38     	; 0x11a0 <DIO_set_port_direction+0x76>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
    117a:	ea e3       	ldi	r30, 0x3A	; 58
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	80 83       	st	Z, r24
    1182:	0e c0       	rjmp	.+28     	; 0x11a0 <DIO_set_port_direction+0x76>
		break ;
		case 'B':
		DDRB=direction; //set the direction of port B
    1184:	e7 e3       	ldi	r30, 0x37	; 55
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	80 83       	st	Z, r24
    118c:	09 c0       	rjmp	.+18     	; 0x11a0 <DIO_set_port_direction+0x76>
		break ;
		case 'C' :
		DDRC=direction; //set the direction of port C
    118e:	e4 e3       	ldi	r30, 0x34	; 52
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	80 83       	st	Z, r24
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <DIO_set_port_direction+0x76>
		break ;
		case 'D':
		DDRD=direction; //set the direction of port D
    1198:	e1 e3       	ldi	r30, 0x31	; 49
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	80 83       	st	Z, r24
		break ;
		default:
		break ;
	}
	
}
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <DIO_write_port>:
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <DIO_write_port+0x6>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <DIO_write_port+0x8>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	3c 83       	std	Y+4, r19	; 0x04
    11c6:	2b 83       	std	Y+3, r18	; 0x03
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	82 34       	cpi	r24, 0x42	; 66
    11ce:	91 05       	cpc	r25, r1
    11d0:	d9 f0       	breq	.+54     	; 0x1208 <DIO_write_port+0x5a>
    11d2:	2b 81       	ldd	r18, Y+3	; 0x03
    11d4:	3c 81       	ldd	r19, Y+4	; 0x04
    11d6:	23 34       	cpi	r18, 0x43	; 67
    11d8:	31 05       	cpc	r19, r1
    11da:	34 f4       	brge	.+12     	; 0x11e8 <DIO_write_port+0x3a>
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	81 34       	cpi	r24, 0x41	; 65
    11e2:	91 05       	cpc	r25, r1
    11e4:	61 f0       	breq	.+24     	; 0x11fe <DIO_write_port+0x50>
    11e6:	1e c0       	rjmp	.+60     	; 0x1224 <DIO_write_port+0x76>
    11e8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ea:	3c 81       	ldd	r19, Y+4	; 0x04
    11ec:	23 34       	cpi	r18, 0x43	; 67
    11ee:	31 05       	cpc	r19, r1
    11f0:	81 f0       	breq	.+32     	; 0x1212 <DIO_write_port+0x64>
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	84 34       	cpi	r24, 0x44	; 68
    11f8:	91 05       	cpc	r25, r1
    11fa:	81 f0       	breq	.+32     	; 0x121c <DIO_write_port+0x6e>
    11fc:	13 c0       	rjmp	.+38     	; 0x1224 <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
    11fe:	eb e3       	ldi	r30, 0x3B	; 59
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	80 83       	st	Z, r24
    1206:	0e c0       	rjmp	.+28     	; 0x1224 <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
    1208:	e8 e3       	ldi	r30, 0x38	; 56
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	80 83       	st	Z, r24
    1210:	09 c0       	rjmp	.+18     	; 0x1224 <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
    1212:	e5 e3       	ldi	r30, 0x35	; 53
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	80 83       	st	Z, r24
    121a:	04 c0       	rjmp	.+8      	; 0x1224 <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
    121c:	e2 e3       	ldi	r30, 0x32	; 50
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	80 83       	st	Z, r24
		break ;
		default:
		 break ;
	}
}
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <DIO_read_port>:

unsigned char DIO_read_port(unsigned char portname)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	00 d0       	rcall	.+0      	; 0x1238 <DIO_read_port+0x6>
    1238:	00 d0       	rcall	.+0      	; 0x123a <DIO_read_port+0x8>
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char return_val=0;
    1240:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	3c 83       	std	Y+4, r19	; 0x04
    124a:	2b 83       	std	Y+3, r18	; 0x03
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	9c 81       	ldd	r25, Y+4	; 0x04
    1250:	82 34       	cpi	r24, 0x42	; 66
    1252:	91 05       	cpc	r25, r1
    1254:	d9 f0       	breq	.+54     	; 0x128c <DIO_read_port+0x5a>
    1256:	2b 81       	ldd	r18, Y+3	; 0x03
    1258:	3c 81       	ldd	r19, Y+4	; 0x04
    125a:	23 34       	cpi	r18, 0x43	; 67
    125c:	31 05       	cpc	r19, r1
    125e:	34 f4       	brge	.+12     	; 0x126c <DIO_read_port+0x3a>
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	81 34       	cpi	r24, 0x41	; 65
    1266:	91 05       	cpc	r25, r1
    1268:	61 f0       	breq	.+24     	; 0x1282 <DIO_read_port+0x50>
    126a:	1e c0       	rjmp	.+60     	; 0x12a8 <DIO_read_port+0x76>
    126c:	2b 81       	ldd	r18, Y+3	; 0x03
    126e:	3c 81       	ldd	r19, Y+4	; 0x04
    1270:	23 34       	cpi	r18, 0x43	; 67
    1272:	31 05       	cpc	r19, r1
    1274:	81 f0       	breq	.+32     	; 0x1296 <DIO_read_port+0x64>
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	84 34       	cpi	r24, 0x44	; 68
    127c:	91 05       	cpc	r25, r1
    127e:	81 f0       	breq	.+32     	; 0x12a0 <DIO_read_port+0x6e>
    1280:	13 c0       	rjmp	.+38     	; 0x12a8 <DIO_read_port+0x76>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
    1282:	e9 e3       	ldi	r30, 0x39	; 57
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	0e c0       	rjmp	.+28     	; 0x12a8 <DIO_read_port+0x76>
		break ;
		case 'B':
		return_val=PINB; // read the value of port B 
    128c:	e6 e3       	ldi	r30, 0x36	; 54
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	09 c0       	rjmp	.+18     	; 0x12a8 <DIO_read_port+0x76>
		break ;
		case 'C' :
		return_val=PINC; // read the value of port C 
    1296:	e3 e3       	ldi	r30, 0x33	; 51
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	04 c0       	rjmp	.+8      	; 0x12a8 <DIO_read_port+0x76>
		break ;
		case 'D':
		return_val=PIND; // read the value of port D 
    12a0:	e0 e3       	ldi	r30, 0x30	; 48
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	89 83       	std	Y+1, r24	; 0x01
		break ;
		default:
		break ;
	}
	return return_val;
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	00 d0       	rcall	.+0      	; 0x12be <DIO_vconnectpullup+0x6>
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <DIO_vconnectpullup+0x8>
    12c0:	0f 92       	push	r0
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	6a 83       	std	Y+2, r22	; 0x02
    12ca:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	3d 83       	std	Y+5, r19	; 0x05
    12d4:	2c 83       	std	Y+4, r18	; 0x04
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	82 34       	cpi	r24, 0x42	; 66
    12dc:	91 05       	cpc	r25, r1
    12de:	09 f4       	brne	.+2      	; 0x12e2 <DIO_vconnectpullup+0x2a>
    12e0:	44 c0       	rjmp	.+136    	; 0x136a <DIO_vconnectpullup+0xb2>
    12e2:	2c 81       	ldd	r18, Y+4	; 0x04
    12e4:	3d 81       	ldd	r19, Y+5	; 0x05
    12e6:	23 34       	cpi	r18, 0x43	; 67
    12e8:	31 05       	cpc	r19, r1
    12ea:	34 f4       	brge	.+12     	; 0x12f8 <DIO_vconnectpullup+0x40>
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
    12ee:	9d 81       	ldd	r25, Y+5	; 0x05
    12f0:	81 34       	cpi	r24, 0x41	; 65
    12f2:	91 05       	cpc	r25, r1
    12f4:	71 f0       	breq	.+28     	; 0x1312 <DIO_vconnectpullup+0x5a>
    12f6:	bc c0       	rjmp	.+376    	; 0x1470 <DIO_vconnectpullup+0x1b8>
    12f8:	2c 81       	ldd	r18, Y+4	; 0x04
    12fa:	3d 81       	ldd	r19, Y+5	; 0x05
    12fc:	23 34       	cpi	r18, 0x43	; 67
    12fe:	31 05       	cpc	r19, r1
    1300:	09 f4       	brne	.+2      	; 0x1304 <DIO_vconnectpullup+0x4c>
    1302:	5f c0       	rjmp	.+190    	; 0x13c2 <DIO_vconnectpullup+0x10a>
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	9d 81       	ldd	r25, Y+5	; 0x05
    1308:	84 34       	cpi	r24, 0x44	; 68
    130a:	91 05       	cpc	r25, r1
    130c:	09 f4       	brne	.+2      	; 0x1310 <DIO_vconnectpullup+0x58>
    130e:	85 c0       	rjmp	.+266    	; 0x141a <DIO_vconnectpullup+0x162>
    1310:	af c0       	rjmp	.+350    	; 0x1470 <DIO_vconnectpullup+0x1b8>
	{
		case 'A':
		if(connect_pullup==1)
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	a1 f4       	brne	.+40     	; 0x1340 <DIO_vconnectpullup+0x88>
		{
			SET_BIT(PORTA,pinnumber);
    1318:	ab e3       	ldi	r26, 0x3B	; 59
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	eb e3       	ldi	r30, 0x3B	; 59
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	48 2f       	mov	r20, r24
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	02 2e       	mov	r0, r18
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <DIO_vconnectpullup+0x7e>
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	0a 94       	dec	r0
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <DIO_vconnectpullup+0x7a>
    133a:	84 2b       	or	r24, r20
    133c:	8c 93       	st	X, r24
    133e:	98 c0       	rjmp	.+304    	; 0x1470 <DIO_vconnectpullup+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
    1340:	ab e3       	ldi	r26, 0x3B	; 59
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	eb e3       	ldi	r30, 0x3B	; 59
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <DIO_vconnectpullup+0xa6>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <DIO_vconnectpullup+0xa2>
    1362:	80 95       	com	r24
    1364:	84 23       	and	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	83 c0       	rjmp	.+262    	; 0x1470 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'B':
		if(connect_pullup==1)
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	a1 f4       	brne	.+40     	; 0x1398 <DIO_vconnectpullup+0xe0>
		{
			SET_BIT(PORTB,pinnumber);
    1370:	a8 e3       	ldi	r26, 0x38	; 56
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e8 e3       	ldi	r30, 0x38	; 56
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	48 2f       	mov	r20, r24
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 2e       	mov	r0, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <DIO_vconnectpullup+0xd6>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	0a 94       	dec	r0
    1390:	e2 f7       	brpl	.-8      	; 0x138a <DIO_vconnectpullup+0xd2>
    1392:	84 2b       	or	r24, r20
    1394:	8c 93       	st	X, r24
    1396:	6c c0       	rjmp	.+216    	; 0x1470 <DIO_vconnectpullup+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
    1398:	a8 e3       	ldi	r26, 0x38	; 56
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e8 e3       	ldi	r30, 0x38	; 56
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	48 2f       	mov	r20, r24
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 2e       	mov	r0, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <DIO_vconnectpullup+0xfe>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	0a 94       	dec	r0
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <DIO_vconnectpullup+0xfa>
    13ba:	80 95       	com	r24
    13bc:	84 23       	and	r24, r20
    13be:	8c 93       	st	X, r24
    13c0:	57 c0       	rjmp	.+174    	; 0x1470 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'C':
		if(connect_pullup==1)
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	a1 f4       	brne	.+40     	; 0x13f0 <DIO_vconnectpullup+0x138>
		{
			SET_BIT(PORTC,pinnumber);
    13c8:	a5 e3       	ldi	r26, 0x35	; 53
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e5 e3       	ldi	r30, 0x35	; 53
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	48 2f       	mov	r20, r24
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	02 2e       	mov	r0, r18
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <DIO_vconnectpullup+0x12e>
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	0a 94       	dec	r0
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <DIO_vconnectpullup+0x12a>
    13ea:	84 2b       	or	r24, r20
    13ec:	8c 93       	st	X, r24
    13ee:	40 c0       	rjmp	.+128    	; 0x1470 <DIO_vconnectpullup+0x1b8>
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
    13f0:	a5 e3       	ldi	r26, 0x35	; 53
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e5 e3       	ldi	r30, 0x35	; 53
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_vconnectpullup+0x156>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_vconnectpullup+0x152>
    1412:	80 95       	com	r24
    1414:	84 23       	and	r24, r20
    1416:	8c 93       	st	X, r24
    1418:	2b c0       	rjmp	.+86     	; 0x1470 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'D':
		if(connect_pullup==1)
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	a1 f4       	brne	.+40     	; 0x1448 <DIO_vconnectpullup+0x190>
		{
			SET_BIT(PORTD,pinnumber);
    1420:	a2 e3       	ldi	r26, 0x32	; 50
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e2 e3       	ldi	r30, 0x32	; 50
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 2e       	mov	r0, r18
    1438:	02 c0       	rjmp	.+4      	; 0x143e <DIO_vconnectpullup+0x186>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	0a 94       	dec	r0
    1440:	e2 f7       	brpl	.-8      	; 0x143a <DIO_vconnectpullup+0x182>
    1442:	84 2b       	or	r24, r20
    1444:	8c 93       	st	X, r24
    1446:	14 c0       	rjmp	.+40     	; 0x1470 <DIO_vconnectpullup+0x1b8>
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
    1448:	a2 e3       	ldi	r26, 0x32	; 50
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e2 e3       	ldi	r30, 0x32	; 50
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	48 2f       	mov	r20, r24
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 2e       	mov	r0, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <DIO_vconnectpullup+0x1ae>
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	0a 94       	dec	r0
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <DIO_vconnectpullup+0x1aa>
    146a:	80 95       	com	r24
    146c:	84 23       	and	r24, r20
    146e:	8c 93       	st	X, r24
		}
		break;
		
	}
}
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <write_low_nibble>:

void write_low_nibble(unsigned char portname,unsigned char value)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	00 d0       	rcall	.+0      	; 0x1486 <write_low_nibble+0x6>
    1486:	00 d0       	rcall	.+0      	; 0x1488 <write_low_nibble+0x8>
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	89 83       	std	Y+1, r24	; 0x01
    148e:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	8f 70       	andi	r24, 0x0F	; 15
    1494:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	3c 83       	std	Y+4, r19	; 0x04
    149e:	2b 83       	std	Y+3, r18	; 0x03
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	82 34       	cpi	r24, 0x42	; 66
    14a6:	91 05       	cpc	r25, r1
    14a8:	29 f1       	breq	.+74     	; 0x14f4 <write_low_nibble+0x74>
    14aa:	2b 81       	ldd	r18, Y+3	; 0x03
    14ac:	3c 81       	ldd	r19, Y+4	; 0x04
    14ae:	23 34       	cpi	r18, 0x43	; 67
    14b0:	31 05       	cpc	r19, r1
    14b2:	34 f4       	brge	.+12     	; 0x14c0 <write_low_nibble+0x40>
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	81 34       	cpi	r24, 0x41	; 65
    14ba:	91 05       	cpc	r25, r1
    14bc:	61 f0       	breq	.+24     	; 0x14d6 <write_low_nibble+0x56>
    14be:	47 c0       	rjmp	.+142    	; 0x154e <write_low_nibble+0xce>
    14c0:	2b 81       	ldd	r18, Y+3	; 0x03
    14c2:	3c 81       	ldd	r19, Y+4	; 0x04
    14c4:	23 34       	cpi	r18, 0x43	; 67
    14c6:	31 05       	cpc	r19, r1
    14c8:	21 f1       	breq	.+72     	; 0x1512 <write_low_nibble+0x92>
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	9c 81       	ldd	r25, Y+4	; 0x04
    14ce:	84 34       	cpi	r24, 0x44	; 68
    14d0:	91 05       	cpc	r25, r1
    14d2:	71 f1       	breq	.+92     	; 0x1530 <write_low_nibble+0xb0>
    14d4:	3c c0       	rjmp	.+120    	; 0x154e <write_low_nibble+0xce>
	{
		case 'A':
		PORTA&=0xf0;
    14d6:	ab e3       	ldi	r26, 0x3B	; 59
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	eb e3       	ldi	r30, 0x3B	; 59
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	80 7f       	andi	r24, 0xF0	; 240
    14e2:	8c 93       	st	X, r24
		PORTA|=value;
    14e4:	ab e3       	ldi	r26, 0x3B	; 59
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	eb e3       	ldi	r30, 0x3B	; 59
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	90 81       	ld	r25, Z
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	89 2b       	or	r24, r25
    14f2:	8c 93       	st	X, r24
		case 'B':
		PORTB&=0xf0;
    14f4:	a8 e3       	ldi	r26, 0x38	; 56
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e8 e3       	ldi	r30, 0x38	; 56
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 7f       	andi	r24, 0xF0	; 240
    1500:	8c 93       	st	X, r24
		PORTB|=value;
    1502:	a8 e3       	ldi	r26, 0x38	; 56
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e8 e3       	ldi	r30, 0x38	; 56
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	90 81       	ld	r25, Z
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	89 2b       	or	r24, r25
    1510:	8c 93       	st	X, r24
		case 'C':
		PORTC&=0xf0;
    1512:	a5 e3       	ldi	r26, 0x35	; 53
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e5 e3       	ldi	r30, 0x35	; 53
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	80 7f       	andi	r24, 0xF0	; 240
    151e:	8c 93       	st	X, r24
		PORTC|=value;
    1520:	a5 e3       	ldi	r26, 0x35	; 53
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e5 e3       	ldi	r30, 0x35	; 53
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	90 81       	ld	r25, Z
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	89 2b       	or	r24, r25
    152e:	8c 93       	st	X, r24
		case 'D':
		PORTD&=0xf0;
    1530:	a2 e3       	ldi	r26, 0x32	; 50
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e2 e3       	ldi	r30, 0x32	; 50
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	80 7f       	andi	r24, 0xF0	; 240
    153c:	8c 93       	st	X, r24
		PORTD|=value;
    153e:	a2 e3       	ldi	r26, 0x32	; 50
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e2 e3       	ldi	r30, 0x32	; 50
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	90 81       	ld	r25, Z
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	89 2b       	or	r24, r25
    154c:	8c 93       	st	X, r24
	}
}
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <write_high_nibble>:

void write_high_nibble(unsigned char portname,unsigned char value)
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	00 d0       	rcall	.+0      	; 0x1562 <write_high_nibble+0x6>
    1562:	00 d0       	rcall	.+0      	; 0x1564 <write_high_nibble+0x8>
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	82 95       	swap	r24
    1570:	80 7f       	andi	r24, 0xF0	; 240
    1572:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	3c 83       	std	Y+4, r19	; 0x04
    157c:	2b 83       	std	Y+3, r18	; 0x03
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	82 34       	cpi	r24, 0x42	; 66
    1584:	91 05       	cpc	r25, r1
    1586:	29 f1       	breq	.+74     	; 0x15d2 <write_high_nibble+0x76>
    1588:	2b 81       	ldd	r18, Y+3	; 0x03
    158a:	3c 81       	ldd	r19, Y+4	; 0x04
    158c:	23 34       	cpi	r18, 0x43	; 67
    158e:	31 05       	cpc	r19, r1
    1590:	34 f4       	brge	.+12     	; 0x159e <write_high_nibble+0x42>
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	9c 81       	ldd	r25, Y+4	; 0x04
    1596:	81 34       	cpi	r24, 0x41	; 65
    1598:	91 05       	cpc	r25, r1
    159a:	61 f0       	breq	.+24     	; 0x15b4 <write_high_nibble+0x58>
    159c:	47 c0       	rjmp	.+142    	; 0x162c <write_high_nibble+0xd0>
    159e:	2b 81       	ldd	r18, Y+3	; 0x03
    15a0:	3c 81       	ldd	r19, Y+4	; 0x04
    15a2:	23 34       	cpi	r18, 0x43	; 67
    15a4:	31 05       	cpc	r19, r1
    15a6:	21 f1       	breq	.+72     	; 0x15f0 <write_high_nibble+0x94>
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	9c 81       	ldd	r25, Y+4	; 0x04
    15ac:	84 34       	cpi	r24, 0x44	; 68
    15ae:	91 05       	cpc	r25, r1
    15b0:	71 f1       	breq	.+92     	; 0x160e <write_high_nibble+0xb2>
    15b2:	3c c0       	rjmp	.+120    	; 0x162c <write_high_nibble+0xd0>
	{
		case 'A':
		PORTA&=0x0f;
    15b4:	ab e3       	ldi	r26, 0x3B	; 59
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	eb e3       	ldi	r30, 0x3B	; 59
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	8f 70       	andi	r24, 0x0F	; 15
    15c0:	8c 93       	st	X, r24
		PORTA|=value;
    15c2:	ab e3       	ldi	r26, 0x3B	; 59
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	eb e3       	ldi	r30, 0x3B	; 59
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	90 81       	ld	r25, Z
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	89 2b       	or	r24, r25
    15d0:	8c 93       	st	X, r24
		case 'B':
		PORTB&=0x0f;
    15d2:	a8 e3       	ldi	r26, 0x38	; 56
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e8 e3       	ldi	r30, 0x38	; 56
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	8f 70       	andi	r24, 0x0F	; 15
    15de:	8c 93       	st	X, r24
		PORTB|=value;
    15e0:	a8 e3       	ldi	r26, 0x38	; 56
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e8 e3       	ldi	r30, 0x38	; 56
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	90 81       	ld	r25, Z
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	89 2b       	or	r24, r25
    15ee:	8c 93       	st	X, r24
		case 'C':
		PORTC&=0x0f;
    15f0:	a5 e3       	ldi	r26, 0x35	; 53
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e5 e3       	ldi	r30, 0x35	; 53
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	8f 70       	andi	r24, 0x0F	; 15
    15fc:	8c 93       	st	X, r24
		PORTC|=value;
    15fe:	a5 e3       	ldi	r26, 0x35	; 53
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e5 e3       	ldi	r30, 0x35	; 53
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	90 81       	ld	r25, Z
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	89 2b       	or	r24, r25
    160c:	8c 93       	st	X, r24
		case 'D':
		PORTD&=0x0f;
    160e:	a2 e3       	ldi	r26, 0x32	; 50
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e2 e3       	ldi	r30, 0x32	; 50
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	8f 70       	andi	r24, 0x0F	; 15
    161a:	8c 93       	st	X, r24
		PORTD|=value;
    161c:	a2 e3       	ldi	r26, 0x32	; 50
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e2 e3       	ldi	r30, 0x32	; 50
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	90 81       	ld	r25, Z
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	89 2b       	or	r24, r25
    162a:	8c 93       	st	X, r24
	}
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <LCD_vInit>:
#include "LCD.h"
#define  F_CPU 8000000UL 
#include <util/delay.h>

void LCD_vInit(void)
{
    163a:	0f 93       	push	r16
    163c:	1f 93       	push	r17
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	c6 54       	subi	r28, 0x46	; 70
    1648:	d0 40       	sbci	r29, 0x00	; 0
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
    1654:	fe 01       	movw	r30, r28
    1656:	ed 5b       	subi	r30, 0xBD	; 189
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	a8 e4       	ldi	r26, 0x48	; 72
    1660:	b3 e4       	ldi	r27, 0x43	; 67
    1662:	80 83       	st	Z, r24
    1664:	91 83       	std	Z+1, r25	; 0x01
    1666:	a2 83       	std	Z+2, r26	; 0x02
    1668:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    166a:	8e 01       	movw	r16, r28
    166c:	01 5c       	subi	r16, 0xC1	; 193
    166e:	1f 4f       	sbci	r17, 0xFF	; 255
    1670:	fe 01       	movw	r30, r28
    1672:	ed 5b       	subi	r30, 0xBD	; 189
    1674:	ff 4f       	sbci	r31, 0xFF	; 255
    1676:	60 81       	ld	r22, Z
    1678:	71 81       	ldd	r23, Z+1	; 0x01
    167a:	82 81       	ldd	r24, Z+2	; 0x02
    167c:	93 81       	ldd	r25, Z+3	; 0x03
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	4a ef       	ldi	r20, 0xFA	; 250
    1684:	54 e4       	ldi	r21, 0x44	; 68
    1686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	f8 01       	movw	r30, r16
    1690:	80 83       	st	Z, r24
    1692:	91 83       	std	Z+1, r25	; 0x01
    1694:	a2 83       	std	Z+2, r26	; 0x02
    1696:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1698:	fe 01       	movw	r30, r28
    169a:	ff 96       	adiw	r30, 0x3f	; 63
    169c:	60 81       	ld	r22, Z
    169e:	71 81       	ldd	r23, Z+1	; 0x01
    16a0:	82 81       	ldd	r24, Z+2	; 0x02
    16a2:	93 81       	ldd	r25, Z+3	; 0x03
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e8       	ldi	r20, 0x80	; 128
    16aa:	5f e3       	ldi	r21, 0x3F	; 63
    16ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16b0:	88 23       	and	r24, r24
    16b2:	2c f4       	brge	.+10     	; 0x16be <LCD_vInit+0x84>
		__ticks = 1;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9e af       	std	Y+62, r25	; 0x3e
    16ba:	8d af       	std	Y+61, r24	; 0x3d
    16bc:	46 c0       	rjmp	.+140    	; 0x174a <LCD_vInit+0x110>
	else if (__tmp > 65535)
    16be:	fe 01       	movw	r30, r28
    16c0:	ff 96       	adiw	r30, 0x3f	; 63
    16c2:	60 81       	ld	r22, Z
    16c4:	71 81       	ldd	r23, Z+1	; 0x01
    16c6:	82 81       	ldd	r24, Z+2	; 0x02
    16c8:	93 81       	ldd	r25, Z+3	; 0x03
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	3f ef       	ldi	r19, 0xFF	; 255
    16ce:	4f e7       	ldi	r20, 0x7F	; 127
    16d0:	57 e4       	ldi	r21, 0x47	; 71
    16d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16d6:	18 16       	cp	r1, r24
    16d8:	64 f5       	brge	.+88     	; 0x1732 <LCD_vInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16da:	fe 01       	movw	r30, r28
    16dc:	ed 5b       	subi	r30, 0xBD	; 189
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	60 81       	ld	r22, Z
    16e2:	71 81       	ldd	r23, Z+1	; 0x01
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	93 81       	ldd	r25, Z+3	; 0x03
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e2       	ldi	r20, 0x20	; 32
    16ee:	51 e4       	ldi	r21, 0x41	; 65
    16f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	bc 01       	movw	r22, r24
    16fa:	cd 01       	movw	r24, r26
    16fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	9e af       	std	Y+62, r25	; 0x3e
    1706:	8d af       	std	Y+61, r24	; 0x3d
    1708:	0f c0       	rjmp	.+30     	; 0x1728 <LCD_vInit+0xee>
    170a:	88 ec       	ldi	r24, 0xC8	; 200
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	9c af       	std	Y+60, r25	; 0x3c
    1710:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1712:	8b ad       	ldd	r24, Y+59	; 0x3b
    1714:	9c ad       	ldd	r25, Y+60	; 0x3c
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <LCD_vInit+0xdc>
    171a:	9c af       	std	Y+60, r25	; 0x3c
    171c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1720:	9e ad       	ldd	r25, Y+62	; 0x3e
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	9e af       	std	Y+62, r25	; 0x3e
    1726:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1728:	8d ad       	ldd	r24, Y+61	; 0x3d
    172a:	9e ad       	ldd	r25, Y+62	; 0x3e
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	69 f7       	brne	.-38     	; 0x170a <LCD_vInit+0xd0>
    1730:	16 c0       	rjmp	.+44     	; 0x175e <LCD_vInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1732:	fe 01       	movw	r30, r28
    1734:	ff 96       	adiw	r30, 0x3f	; 63
    1736:	60 81       	ld	r22, Z
    1738:	71 81       	ldd	r23, Z+1	; 0x01
    173a:	82 81       	ldd	r24, Z+2	; 0x02
    173c:	93 81       	ldd	r25, Z+3	; 0x03
    173e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	9e af       	std	Y+62, r25	; 0x3e
    1748:	8d af       	std	Y+61, r24	; 0x3d
    174a:	8d ad       	ldd	r24, Y+61	; 0x3d
    174c:	9e ad       	ldd	r25, Y+62	; 0x3e
    174e:	9a af       	std	Y+58, r25	; 0x3a
    1750:	89 af       	std	Y+57, r24	; 0x39
    1752:	89 ad       	ldd	r24, Y+57	; 0x39
    1754:	9a ad       	ldd	r25, Y+58	; 0x3a
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	f1 f7       	brne	.-4      	; 0x1756 <LCD_vInit+0x11c>
    175a:	9a af       	std	Y+58, r25	; 0x3a
    175c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(200);
	#if defined eight_bits_mode
	DIO_vsetPINDir('A',0,1);
    175e:	81 e4       	ldi	r24, 0x41	; 65
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	41 e0       	ldi	r20, 0x01	; 1
    1764:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',1,1);
    1768:	81 e4       	ldi	r24, 0x41	; 65
    176a:	61 e0       	ldi	r22, 0x01	; 1
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',2,1);
    1772:	81 e4       	ldi	r24, 0x41	; 65
    1774:	62 e0       	ldi	r22, 0x02	; 2
    1776:	41 e0       	ldi	r20, 0x01	; 1
    1778:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',3,1);
    177c:	81 e4       	ldi	r24, 0x41	; 65
    177e:	63 e0       	ldi	r22, 0x03	; 3
    1780:	41 e0       	ldi	r20, 0x01	; 1
    1782:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',4,1);
    1786:	81 e4       	ldi	r24, 0x41	; 65
    1788:	64 e0       	ldi	r22, 0x04	; 4
    178a:	41 e0       	ldi	r20, 0x01	; 1
    178c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
    1790:	81 e4       	ldi	r24, 0x41	; 65
    1792:	65 e0       	ldi	r22, 0x05	; 5
    1794:	41 e0       	ldi	r20, 0x01	; 1
    1796:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
    179a:	81 e4       	ldi	r24, 0x41	; 65
    179c:	66 e0       	ldi	r22, 0x06	; 6
    179e:	41 e0       	ldi	r20, 0x01	; 1
    17a0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
    17a4:	81 e4       	ldi	r24, 0x41	; 65
    17a6:	67 e0       	ldi	r22, 0x07	; 7
    17a8:	41 e0       	ldi	r20, 0x01	; 1
    17aa:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
    17ae:	82 e4       	ldi	r24, 0x42	; 66
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	41 e0       	ldi	r20, 0x01	; 1
    17b4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
    17b8:	82 e4       	ldi	r24, 0x42	; 66
    17ba:	62 e0       	ldi	r22, 0x02	; 2
    17bc:	41 e0       	ldi	r20, 0x01	; 1
    17be:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
    17c2:	82 e4       	ldi	r24, 0x42	; 66
    17c4:	61 e0       	ldi	r22, 0x01	; 1
    17c6:	41 e0       	ldi	r20, 0x01	; 1
    17c8:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_write('B',RW,0);
    17cc:	82 e4       	ldi	r24, 0x42	; 66
    17ce:	62 e0       	ldi	r22, 0x02	; 2
    17d0:	40 e0       	ldi	r20, 0x00	; 0
    17d2:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
	LCD_vSend_cmd(EIGHT_BITS); //8 bit mode
    17d6:	88 e3       	ldi	r24, 0x38	; 56
    17d8:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <LCD_vSend_cmd>
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	a0 e8       	ldi	r26, 0x80	; 128
    17e2:	bf e3       	ldi	r27, 0x3F	; 63
    17e4:	8d ab       	std	Y+53, r24	; 0x35
    17e6:	9e ab       	std	Y+54, r25	; 0x36
    17e8:	af ab       	std	Y+55, r26	; 0x37
    17ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ec:	6d a9       	ldd	r22, Y+53	; 0x35
    17ee:	7e a9       	ldd	r23, Y+54	; 0x36
    17f0:	8f a9       	ldd	r24, Y+55	; 0x37
    17f2:	98 ad       	ldd	r25, Y+56	; 0x38
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	4a ef       	ldi	r20, 0xFA	; 250
    17fa:	54 e4       	ldi	r21, 0x44	; 68
    17fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	89 ab       	std	Y+49, r24	; 0x31
    1806:	9a ab       	std	Y+50, r25	; 0x32
    1808:	ab ab       	std	Y+51, r26	; 0x33
    180a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    180c:	69 a9       	ldd	r22, Y+49	; 0x31
    180e:	7a a9       	ldd	r23, Y+50	; 0x32
    1810:	8b a9       	ldd	r24, Y+51	; 0x33
    1812:	9c a9       	ldd	r25, Y+52	; 0x34
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e8       	ldi	r20, 0x80	; 128
    181a:	5f e3       	ldi	r21, 0x3F	; 63
    181c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1820:	88 23       	and	r24, r24
    1822:	2c f4       	brge	.+10     	; 0x182e <LCD_vInit+0x1f4>
		__ticks = 1;
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	98 ab       	std	Y+48, r25	; 0x30
    182a:	8f a7       	std	Y+47, r24	; 0x2f
    182c:	3f c0       	rjmp	.+126    	; 0x18ac <LCD_vInit+0x272>
	else if (__tmp > 65535)
    182e:	69 a9       	ldd	r22, Y+49	; 0x31
    1830:	7a a9       	ldd	r23, Y+50	; 0x32
    1832:	8b a9       	ldd	r24, Y+51	; 0x33
    1834:	9c a9       	ldd	r25, Y+52	; 0x34
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	3f ef       	ldi	r19, 0xFF	; 255
    183a:	4f e7       	ldi	r20, 0x7F	; 127
    183c:	57 e4       	ldi	r21, 0x47	; 71
    183e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1842:	18 16       	cp	r1, r24
    1844:	4c f5       	brge	.+82     	; 0x1898 <LCD_vInit+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1846:	6d a9       	ldd	r22, Y+53	; 0x35
    1848:	7e a9       	ldd	r23, Y+54	; 0x36
    184a:	8f a9       	ldd	r24, Y+55	; 0x37
    184c:	98 ad       	ldd	r25, Y+56	; 0x38
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e2       	ldi	r20, 0x20	; 32
    1854:	51 e4       	ldi	r21, 0x41	; 65
    1856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	bc 01       	movw	r22, r24
    1860:	cd 01       	movw	r24, r26
    1862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	98 ab       	std	Y+48, r25	; 0x30
    186c:	8f a7       	std	Y+47, r24	; 0x2f
    186e:	0f c0       	rjmp	.+30     	; 0x188e <LCD_vInit+0x254>
    1870:	88 ec       	ldi	r24, 0xC8	; 200
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	9e a7       	std	Y+46, r25	; 0x2e
    1876:	8d a7       	std	Y+45, r24	; 0x2d
    1878:	8d a5       	ldd	r24, Y+45	; 0x2d
    187a:	9e a5       	ldd	r25, Y+46	; 0x2e
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	f1 f7       	brne	.-4      	; 0x187c <LCD_vInit+0x242>
    1880:	9e a7       	std	Y+46, r25	; 0x2e
    1882:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1884:	8f a5       	ldd	r24, Y+47	; 0x2f
    1886:	98 a9       	ldd	r25, Y+48	; 0x30
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	98 ab       	std	Y+48, r25	; 0x30
    188c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1890:	98 a9       	ldd	r25, Y+48	; 0x30
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	69 f7       	brne	.-38     	; 0x1870 <LCD_vInit+0x236>
    1896:	14 c0       	rjmp	.+40     	; 0x18c0 <LCD_vInit+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1898:	69 a9       	ldd	r22, Y+49	; 0x31
    189a:	7a a9       	ldd	r23, Y+50	; 0x32
    189c:	8b a9       	ldd	r24, Y+51	; 0x33
    189e:	9c a9       	ldd	r25, Y+52	; 0x34
    18a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	98 ab       	std	Y+48, r25	; 0x30
    18aa:	8f a7       	std	Y+47, r24	; 0x2f
    18ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ae:	98 a9       	ldd	r25, Y+48	; 0x30
    18b0:	9c a7       	std	Y+44, r25	; 0x2c
    18b2:	8b a7       	std	Y+43, r24	; 0x2b
    18b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    18b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <LCD_vInit+0x27e>
    18bc:	9c a7       	std	Y+44, r25	; 0x2c
    18be:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
    18c0:	8e e0       	ldi	r24, 0x0E	; 14
    18c2:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <LCD_vSend_cmd>
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	a0 e8       	ldi	r26, 0x80	; 128
    18cc:	bf e3       	ldi	r27, 0x3F	; 63
    18ce:	8f a3       	std	Y+39, r24	; 0x27
    18d0:	98 a7       	std	Y+40, r25	; 0x28
    18d2:	a9 a7       	std	Y+41, r26	; 0x29
    18d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d6:	6f a1       	ldd	r22, Y+39	; 0x27
    18d8:	78 a5       	ldd	r23, Y+40	; 0x28
    18da:	89 a5       	ldd	r24, Y+41	; 0x29
    18dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	4a ef       	ldi	r20, 0xFA	; 250
    18e4:	54 e4       	ldi	r21, 0x44	; 68
    18e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	8b a3       	std	Y+35, r24	; 0x23
    18f0:	9c a3       	std	Y+36, r25	; 0x24
    18f2:	ad a3       	std	Y+37, r26	; 0x25
    18f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18f6:	6b a1       	ldd	r22, Y+35	; 0x23
    18f8:	7c a1       	ldd	r23, Y+36	; 0x24
    18fa:	8d a1       	ldd	r24, Y+37	; 0x25
    18fc:	9e a1       	ldd	r25, Y+38	; 0x26
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e8       	ldi	r20, 0x80	; 128
    1904:	5f e3       	ldi	r21, 0x3F	; 63
    1906:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    190a:	88 23       	and	r24, r24
    190c:	2c f4       	brge	.+10     	; 0x1918 <LCD_vInit+0x2de>
		__ticks = 1;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	9a a3       	std	Y+34, r25	; 0x22
    1914:	89 a3       	std	Y+33, r24	; 0x21
    1916:	3f c0       	rjmp	.+126    	; 0x1996 <LCD_vInit+0x35c>
	else if (__tmp > 65535)
    1918:	6b a1       	ldd	r22, Y+35	; 0x23
    191a:	7c a1       	ldd	r23, Y+36	; 0x24
    191c:	8d a1       	ldd	r24, Y+37	; 0x25
    191e:	9e a1       	ldd	r25, Y+38	; 0x26
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	3f ef       	ldi	r19, 0xFF	; 255
    1924:	4f e7       	ldi	r20, 0x7F	; 127
    1926:	57 e4       	ldi	r21, 0x47	; 71
    1928:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    192c:	18 16       	cp	r1, r24
    192e:	4c f5       	brge	.+82     	; 0x1982 <LCD_vInit+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1930:	6f a1       	ldd	r22, Y+39	; 0x27
    1932:	78 a5       	ldd	r23, Y+40	; 0x28
    1934:	89 a5       	ldd	r24, Y+41	; 0x29
    1936:	9a a5       	ldd	r25, Y+42	; 0x2a
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e2       	ldi	r20, 0x20	; 32
    193e:	51 e4       	ldi	r21, 0x41	; 65
    1940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	bc 01       	movw	r22, r24
    194a:	cd 01       	movw	r24, r26
    194c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	9a a3       	std	Y+34, r25	; 0x22
    1956:	89 a3       	std	Y+33, r24	; 0x21
    1958:	0f c0       	rjmp	.+30     	; 0x1978 <LCD_vInit+0x33e>
    195a:	88 ec       	ldi	r24, 0xC8	; 200
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	98 a3       	std	Y+32, r25	; 0x20
    1960:	8f 8f       	std	Y+31, r24	; 0x1f
    1962:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1964:	98 a1       	ldd	r25, Y+32	; 0x20
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <LCD_vInit+0x32c>
    196a:	98 a3       	std	Y+32, r25	; 0x20
    196c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196e:	89 a1       	ldd	r24, Y+33	; 0x21
    1970:	9a a1       	ldd	r25, Y+34	; 0x22
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	9a a3       	std	Y+34, r25	; 0x22
    1976:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1978:	89 a1       	ldd	r24, Y+33	; 0x21
    197a:	9a a1       	ldd	r25, Y+34	; 0x22
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	69 f7       	brne	.-38     	; 0x195a <LCD_vInit+0x320>
    1980:	14 c0       	rjmp	.+40     	; 0x19aa <LCD_vInit+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1982:	6b a1       	ldd	r22, Y+35	; 0x23
    1984:	7c a1       	ldd	r23, Y+36	; 0x24
    1986:	8d a1       	ldd	r24, Y+37	; 0x25
    1988:	9e a1       	ldd	r25, Y+38	; 0x26
    198a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	9a a3       	std	Y+34, r25	; 0x22
    1994:	89 a3       	std	Y+33, r24	; 0x21
    1996:	89 a1       	ldd	r24, Y+33	; 0x21
    1998:	9a a1       	ldd	r25, Y+34	; 0x22
    199a:	9e 8f       	std	Y+30, r25	; 0x1e
    199c:	8d 8f       	std	Y+29, r24	; 0x1d
    199e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	f1 f7       	brne	.-4      	; 0x19a2 <LCD_vInit+0x368>
    19a6:	9e 8f       	std	Y+30, r25	; 0x1e
    19a8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <LCD_vSend_cmd>
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a0 e2       	ldi	r26, 0x20	; 32
    19b6:	b1 e4       	ldi	r27, 0x41	; 65
    19b8:	89 8f       	std	Y+25, r24	; 0x19
    19ba:	9a 8f       	std	Y+26, r25	; 0x1a
    19bc:	ab 8f       	std	Y+27, r26	; 0x1b
    19be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c0:	69 8d       	ldd	r22, Y+25	; 0x19
    19c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	4a ef       	ldi	r20, 0xFA	; 250
    19ce:	54 e4       	ldi	r21, 0x44	; 68
    19d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	8d 8b       	std	Y+21, r24	; 0x15
    19da:	9e 8b       	std	Y+22, r25	; 0x16
    19dc:	af 8b       	std	Y+23, r26	; 0x17
    19de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19e0:	6d 89       	ldd	r22, Y+21	; 0x15
    19e2:	7e 89       	ldd	r23, Y+22	; 0x16
    19e4:	8f 89       	ldd	r24, Y+23	; 0x17
    19e6:	98 8d       	ldd	r25, Y+24	; 0x18
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e8       	ldi	r20, 0x80	; 128
    19ee:	5f e3       	ldi	r21, 0x3F	; 63
    19f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19f4:	88 23       	and	r24, r24
    19f6:	2c f4       	brge	.+10     	; 0x1a02 <LCD_vInit+0x3c8>
		__ticks = 1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9c 8b       	std	Y+20, r25	; 0x14
    19fe:	8b 8b       	std	Y+19, r24	; 0x13
    1a00:	3f c0       	rjmp	.+126    	; 0x1a80 <LCD_vInit+0x446>
	else if (__tmp > 65535)
    1a02:	6d 89       	ldd	r22, Y+21	; 0x15
    1a04:	7e 89       	ldd	r23, Y+22	; 0x16
    1a06:	8f 89       	ldd	r24, Y+23	; 0x17
    1a08:	98 8d       	ldd	r25, Y+24	; 0x18
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	3f ef       	ldi	r19, 0xFF	; 255
    1a0e:	4f e7       	ldi	r20, 0x7F	; 127
    1a10:	57 e4       	ldi	r21, 0x47	; 71
    1a12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a16:	18 16       	cp	r1, r24
    1a18:	4c f5       	brge	.+82     	; 0x1a6c <LCD_vInit+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e2       	ldi	r20, 0x20	; 32
    1a28:	51 e4       	ldi	r21, 0x41	; 65
    1a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	bc 01       	movw	r22, r24
    1a34:	cd 01       	movw	r24, r26
    1a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	9c 8b       	std	Y+20, r25	; 0x14
    1a40:	8b 8b       	std	Y+19, r24	; 0x13
    1a42:	0f c0       	rjmp	.+30     	; 0x1a62 <LCD_vInit+0x428>
    1a44:	88 ec       	ldi	r24, 0xC8	; 200
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9a 8b       	std	Y+18, r25	; 0x12
    1a4a:	89 8b       	std	Y+17, r24	; 0x11
    1a4c:	89 89       	ldd	r24, Y+17	; 0x11
    1a4e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <LCD_vInit+0x416>
    1a54:	9a 8b       	std	Y+18, r25	; 0x12
    1a56:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a58:	8b 89       	ldd	r24, Y+19	; 0x13
    1a5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	9c 8b       	std	Y+20, r25	; 0x14
    1a60:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a62:	8b 89       	ldd	r24, Y+19	; 0x13
    1a64:	9c 89       	ldd	r25, Y+20	; 0x14
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	69 f7       	brne	.-38     	; 0x1a44 <LCD_vInit+0x40a>
    1a6a:	14 c0       	rjmp	.+40     	; 0x1a94 <LCD_vInit+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a70:	8f 89       	ldd	r24, Y+23	; 0x17
    1a72:	98 8d       	ldd	r25, Y+24	; 0x18
    1a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	9c 8b       	std	Y+20, r25	; 0x14
    1a7e:	8b 8b       	std	Y+19, r24	; 0x13
    1a80:	8b 89       	ldd	r24, Y+19	; 0x13
    1a82:	9c 89       	ldd	r25, Y+20	; 0x14
    1a84:	98 8b       	std	Y+16, r25	; 0x10
    1a86:	8f 87       	std	Y+15, r24	; 0x0f
    1a88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a8a:	98 89       	ldd	r25, Y+16	; 0x10
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_vInit+0x452>
    1a90:	98 8b       	std	Y+16, r25	; 0x10
    1a92:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
    1a94:	86 e0       	ldi	r24, 0x06	; 6
    1a96:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <LCD_vSend_cmd>
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	a0 e8       	ldi	r26, 0x80	; 128
    1aa0:	bf e3       	ldi	r27, 0x3F	; 63
    1aa2:	8b 87       	std	Y+11, r24	; 0x0b
    1aa4:	9c 87       	std	Y+12, r25	; 0x0c
    1aa6:	ad 87       	std	Y+13, r26	; 0x0d
    1aa8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	4a ef       	ldi	r20, 0xFA	; 250
    1ab8:	54 e4       	ldi	r21, 0x44	; 68
    1aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	8f 83       	std	Y+7, r24	; 0x07
    1ac4:	98 87       	std	Y+8, r25	; 0x08
    1ac6:	a9 87       	std	Y+9, r26	; 0x09
    1ac8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aca:	6f 81       	ldd	r22, Y+7	; 0x07
    1acc:	78 85       	ldd	r23, Y+8	; 0x08
    1ace:	89 85       	ldd	r24, Y+9	; 0x09
    1ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e8       	ldi	r20, 0x80	; 128
    1ad8:	5f e3       	ldi	r21, 0x3F	; 63
    1ada:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ade:	88 23       	and	r24, r24
    1ae0:	2c f4       	brge	.+10     	; 0x1aec <LCD_vInit+0x4b2>
		__ticks = 1;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	9e 83       	std	Y+6, r25	; 0x06
    1ae8:	8d 83       	std	Y+5, r24	; 0x05
    1aea:	3f c0       	rjmp	.+126    	; 0x1b6a <LCD_vInit+0x530>
	else if (__tmp > 65535)
    1aec:	6f 81       	ldd	r22, Y+7	; 0x07
    1aee:	78 85       	ldd	r23, Y+8	; 0x08
    1af0:	89 85       	ldd	r24, Y+9	; 0x09
    1af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	3f ef       	ldi	r19, 0xFF	; 255
    1af8:	4f e7       	ldi	r20, 0x7F	; 127
    1afa:	57 e4       	ldi	r21, 0x47	; 71
    1afc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b00:	18 16       	cp	r1, r24
    1b02:	4c f5       	brge	.+82     	; 0x1b56 <LCD_vInit+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	40 e2       	ldi	r20, 0x20	; 32
    1b12:	51 e4       	ldi	r21, 0x41	; 65
    1b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	bc 01       	movw	r22, r24
    1b1e:	cd 01       	movw	r24, r26
    1b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	9e 83       	std	Y+6, r25	; 0x06
    1b2a:	8d 83       	std	Y+5, r24	; 0x05
    1b2c:	0f c0       	rjmp	.+30     	; 0x1b4c <LCD_vInit+0x512>
    1b2e:	88 ec       	ldi	r24, 0xC8	; 200
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	9c 83       	std	Y+4, r25	; 0x04
    1b34:	8b 83       	std	Y+3, r24	; 0x03
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <LCD_vInit+0x500>
    1b3e:	9c 83       	std	Y+4, r25	; 0x04
    1b40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b42:	8d 81       	ldd	r24, Y+5	; 0x05
    1b44:	9e 81       	ldd	r25, Y+6	; 0x06
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	9e 83       	std	Y+6, r25	; 0x06
    1b4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	69 f7       	brne	.-38     	; 0x1b2e <LCD_vInit+0x4f4>
    1b54:	14 c0       	rjmp	.+40     	; 0x1b7e <LCD_vInit+0x544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b56:	6f 81       	ldd	r22, Y+7	; 0x07
    1b58:	78 85       	ldd	r23, Y+8	; 0x08
    1b5a:	89 85       	ldd	r24, Y+9	; 0x09
    1b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	9e 83       	std	Y+6, r25	; 0x06
    1b68:	8d 83       	std	Y+5, r24	; 0x05
    1b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	9a 81       	ldd	r25, Y+2	; 0x02
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	f1 f7       	brne	.-4      	; 0x1b76 <LCD_vInit+0x53c>
    1b7a:	9a 83       	std	Y+2, r25	; 0x02
    1b7c:	89 83       	std	Y+1, r24	; 0x01
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1);
	#endif
}
    1b7e:	ca 5b       	subi	r28, 0xBA	; 186
    1b80:	df 4f       	sbci	r29, 0xFF	; 255
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	cd bf       	out	0x3d, r28	; 61
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	1f 91       	pop	r17
    1b92:	0f 91       	pop	r16
    1b94:	08 95       	ret

00001b96 <send_falling_edge>:


static void send_falling_edge(void)
{
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	6c 97       	sbiw	r28, 0x1c	; 28
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	f8 94       	cli
    1ba4:	de bf       	out	0x3e, r29	; 62
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	cd bf       	out	0x3d, r28	; 61
	DIO_write('B',EN,1);
    1baa:	82 e4       	ldi	r24, 0x42	; 66
    1bac:	60 e0       	ldi	r22, 0x00	; 0
    1bae:	41 e0       	ldi	r20, 0x01	; 1
    1bb0:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	a0 e0       	ldi	r26, 0x00	; 0
    1bba:	b0 e4       	ldi	r27, 0x40	; 64
    1bbc:	89 8f       	std	Y+25, r24	; 0x19
    1bbe:	9a 8f       	std	Y+26, r25	; 0x1a
    1bc0:	ab 8f       	std	Y+27, r26	; 0x1b
    1bc2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc4:	69 8d       	ldd	r22, Y+25	; 0x19
    1bc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	4a ef       	ldi	r20, 0xFA	; 250
    1bd2:	54 e4       	ldi	r21, 0x44	; 68
    1bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	8d 8b       	std	Y+21, r24	; 0x15
    1bde:	9e 8b       	std	Y+22, r25	; 0x16
    1be0:	af 8b       	std	Y+23, r26	; 0x17
    1be2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1be4:	6d 89       	ldd	r22, Y+21	; 0x15
    1be6:	7e 89       	ldd	r23, Y+22	; 0x16
    1be8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bea:	98 8d       	ldd	r25, Y+24	; 0x18
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e8       	ldi	r20, 0x80	; 128
    1bf2:	5f e3       	ldi	r21, 0x3F	; 63
    1bf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf8:	88 23       	and	r24, r24
    1bfa:	2c f4       	brge	.+10     	; 0x1c06 <send_falling_edge+0x70>
		__ticks = 1;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	9c 8b       	std	Y+20, r25	; 0x14
    1c02:	8b 8b       	std	Y+19, r24	; 0x13
    1c04:	3f c0       	rjmp	.+126    	; 0x1c84 <send_falling_edge+0xee>
	else if (__tmp > 65535)
    1c06:	6d 89       	ldd	r22, Y+21	; 0x15
    1c08:	7e 89       	ldd	r23, Y+22	; 0x16
    1c0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	3f ef       	ldi	r19, 0xFF	; 255
    1c12:	4f e7       	ldi	r20, 0x7F	; 127
    1c14:	57 e4       	ldi	r21, 0x47	; 71
    1c16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c1a:	18 16       	cp	r1, r24
    1c1c:	4c f5       	brge	.+82     	; 0x1c70 <send_falling_edge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e2       	ldi	r20, 0x20	; 32
    1c2c:	51 e4       	ldi	r21, 0x41	; 65
    1c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	9c 8b       	std	Y+20, r25	; 0x14
    1c44:	8b 8b       	std	Y+19, r24	; 0x13
    1c46:	0f c0       	rjmp	.+30     	; 0x1c66 <send_falling_edge+0xd0>
    1c48:	88 ec       	ldi	r24, 0xC8	; 200
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	9a 8b       	std	Y+18, r25	; 0x12
    1c4e:	89 8b       	std	Y+17, r24	; 0x11
    1c50:	89 89       	ldd	r24, Y+17	; 0x11
    1c52:	9a 89       	ldd	r25, Y+18	; 0x12
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <send_falling_edge+0xbe>
    1c58:	9a 8b       	std	Y+18, r25	; 0x12
    1c5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	9c 8b       	std	Y+20, r25	; 0x14
    1c64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c66:	8b 89       	ldd	r24, Y+19	; 0x13
    1c68:	9c 89       	ldd	r25, Y+20	; 0x14
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	69 f7       	brne	.-38     	; 0x1c48 <send_falling_edge+0xb2>
    1c6e:	14 c0       	rjmp	.+40     	; 0x1c98 <send_falling_edge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c70:	6d 89       	ldd	r22, Y+21	; 0x15
    1c72:	7e 89       	ldd	r23, Y+22	; 0x16
    1c74:	8f 89       	ldd	r24, Y+23	; 0x17
    1c76:	98 8d       	ldd	r25, Y+24	; 0x18
    1c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	9c 8b       	std	Y+20, r25	; 0x14
    1c82:	8b 8b       	std	Y+19, r24	; 0x13
    1c84:	8b 89       	ldd	r24, Y+19	; 0x13
    1c86:	9c 89       	ldd	r25, Y+20	; 0x14
    1c88:	98 8b       	std	Y+16, r25	; 0x10
    1c8a:	8f 87       	std	Y+15, r24	; 0x0f
    1c8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c8e:	98 89       	ldd	r25, Y+16	; 0x10
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <send_falling_edge+0xfa>
    1c94:	98 8b       	std	Y+16, r25	; 0x10
    1c96:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_write('B',EN,0);
    1c98:	82 e4       	ldi	r24, 0x42	; 66
    1c9a:	60 e0       	ldi	r22, 0x00	; 0
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	a0 e0       	ldi	r26, 0x00	; 0
    1ca8:	b0 e4       	ldi	r27, 0x40	; 64
    1caa:	8b 87       	std	Y+11, r24	; 0x0b
    1cac:	9c 87       	std	Y+12, r25	; 0x0c
    1cae:	ad 87       	std	Y+13, r26	; 0x0d
    1cb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	4a ef       	ldi	r20, 0xFA	; 250
    1cc0:	54 e4       	ldi	r21, 0x44	; 68
    1cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	8f 83       	std	Y+7, r24	; 0x07
    1ccc:	98 87       	std	Y+8, r25	; 0x08
    1cce:	a9 87       	std	Y+9, r26	; 0x09
    1cd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd4:	78 85       	ldd	r23, Y+8	; 0x08
    1cd6:	89 85       	ldd	r24, Y+9	; 0x09
    1cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e8       	ldi	r20, 0x80	; 128
    1ce0:	5f e3       	ldi	r21, 0x3F	; 63
    1ce2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce6:	88 23       	and	r24, r24
    1ce8:	2c f4       	brge	.+10     	; 0x1cf4 <send_falling_edge+0x15e>
		__ticks = 1;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9e 83       	std	Y+6, r25	; 0x06
    1cf0:	8d 83       	std	Y+5, r24	; 0x05
    1cf2:	3f c0       	rjmp	.+126    	; 0x1d72 <send_falling_edge+0x1dc>
	else if (__tmp > 65535)
    1cf4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf6:	78 85       	ldd	r23, Y+8	; 0x08
    1cf8:	89 85       	ldd	r24, Y+9	; 0x09
    1cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	3f ef       	ldi	r19, 0xFF	; 255
    1d00:	4f e7       	ldi	r20, 0x7F	; 127
    1d02:	57 e4       	ldi	r21, 0x47	; 71
    1d04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d08:	18 16       	cp	r1, r24
    1d0a:	4c f5       	brge	.+82     	; 0x1d5e <send_falling_edge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e2       	ldi	r20, 0x20	; 32
    1d1a:	51 e4       	ldi	r21, 0x41	; 65
    1d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	bc 01       	movw	r22, r24
    1d26:	cd 01       	movw	r24, r26
    1d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	8d 83       	std	Y+5, r24	; 0x05
    1d34:	0f c0       	rjmp	.+30     	; 0x1d54 <send_falling_edge+0x1be>
    1d36:	88 ec       	ldi	r24, 0xC8	; 200
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	9c 83       	std	Y+4, r25	; 0x04
    1d3c:	8b 83       	std	Y+3, r24	; 0x03
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	9c 81       	ldd	r25, Y+4	; 0x04
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <send_falling_edge+0x1ac>
    1d46:	9c 83       	std	Y+4, r25	; 0x04
    1d48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	9e 83       	std	Y+6, r25	; 0x06
    1d52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d54:	8d 81       	ldd	r24, Y+5	; 0x05
    1d56:	9e 81       	ldd	r25, Y+6	; 0x06
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	69 f7       	brne	.-38     	; 0x1d36 <send_falling_edge+0x1a0>
    1d5c:	14 c0       	rjmp	.+40     	; 0x1d86 <send_falling_edge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d60:	78 85       	ldd	r23, Y+8	; 0x08
    1d62:	89 85       	ldd	r24, Y+9	; 0x09
    1d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	9e 83       	std	Y+6, r25	; 0x06
    1d70:	8d 83       	std	Y+5, r24	; 0x05
    1d72:	8d 81       	ldd	r24, Y+5	; 0x05
    1d74:	9e 81       	ldd	r25, Y+6	; 0x06
    1d76:	9a 83       	std	Y+2, r25	; 0x02
    1d78:	89 83       	std	Y+1, r24	; 0x01
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <send_falling_edge+0x1e8>
    1d82:	9a 83       	std	Y+2, r25	; 0x02
    1d84:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1d86:	6c 96       	adiw	r28, 0x1c	; 28
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	08 95       	ret

00001d98 <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
    1d98:	df 93       	push	r29
    1d9a:	cf 93       	push	r28
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	2f 97       	sbiw	r28, 0x0f	; 15
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	8f 87       	std	Y+15, r24	; 0x0f
	#if defined eight_bits_mode
	DIO_write_port('A',cmd);
    1dae:	81 e4       	ldi	r24, 0x41	; 65
    1db0:	6f 85       	ldd	r22, Y+15	; 0x0f
    1db2:	0e 94 d7 08 	call	0x11ae	; 0x11ae <DIO_write_port>
	DIO_write('B',RS,0);
    1db6:	82 e4       	ldi	r24, 0x42	; 66
    1db8:	61 e0       	ldi	r22, 0x01	; 1
    1dba:	40 e0       	ldi	r20, 0x00	; 0
    1dbc:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
	send_falling_edge();
    1dc0:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <send_falling_edge>
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	a0 e8       	ldi	r26, 0x80	; 128
    1dca:	bf e3       	ldi	r27, 0x3F	; 63
    1dcc:	8b 87       	std	Y+11, r24	; 0x0b
    1dce:	9c 87       	std	Y+12, r25	; 0x0c
    1dd0:	ad 87       	std	Y+13, r26	; 0x0d
    1dd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	4a ef       	ldi	r20, 0xFA	; 250
    1de2:	54 e4       	ldi	r21, 0x44	; 68
    1de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	8f 83       	std	Y+7, r24	; 0x07
    1dee:	98 87       	std	Y+8, r25	; 0x08
    1df0:	a9 87       	std	Y+9, r26	; 0x09
    1df2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1df4:	6f 81       	ldd	r22, Y+7	; 0x07
    1df6:	78 85       	ldd	r23, Y+8	; 0x08
    1df8:	89 85       	ldd	r24, Y+9	; 0x09
    1dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e8       	ldi	r20, 0x80	; 128
    1e02:	5f e3       	ldi	r21, 0x3F	; 63
    1e04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e08:	88 23       	and	r24, r24
    1e0a:	2c f4       	brge	.+10     	; 0x1e16 <LCD_vSend_cmd+0x7e>
		__ticks = 1;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	9e 83       	std	Y+6, r25	; 0x06
    1e12:	8d 83       	std	Y+5, r24	; 0x05
    1e14:	3f c0       	rjmp	.+126    	; 0x1e94 <LCD_vSend_cmd+0xfc>
	else if (__tmp > 65535)
    1e16:	6f 81       	ldd	r22, Y+7	; 0x07
    1e18:	78 85       	ldd	r23, Y+8	; 0x08
    1e1a:	89 85       	ldd	r24, Y+9	; 0x09
    1e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	3f ef       	ldi	r19, 0xFF	; 255
    1e22:	4f e7       	ldi	r20, 0x7F	; 127
    1e24:	57 e4       	ldi	r21, 0x47	; 71
    1e26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e2a:	18 16       	cp	r1, r24
    1e2c:	4c f5       	brge	.+82     	; 0x1e80 <LCD_vSend_cmd+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e2       	ldi	r20, 0x20	; 32
    1e3c:	51 e4       	ldi	r21, 0x41	; 65
    1e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	bc 01       	movw	r22, r24
    1e48:	cd 01       	movw	r24, r26
    1e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	9e 83       	std	Y+6, r25	; 0x06
    1e54:	8d 83       	std	Y+5, r24	; 0x05
    1e56:	0f c0       	rjmp	.+30     	; 0x1e76 <LCD_vSend_cmd+0xde>
    1e58:	88 ec       	ldi	r24, 0xC8	; 200
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	9c 83       	std	Y+4, r25	; 0x04
    1e5e:	8b 83       	std	Y+3, r24	; 0x03
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <LCD_vSend_cmd+0xcc>
    1e68:	9c 83       	std	Y+4, r25	; 0x04
    1e6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	9e 83       	std	Y+6, r25	; 0x06
    1e74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e76:	8d 81       	ldd	r24, Y+5	; 0x05
    1e78:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	69 f7       	brne	.-38     	; 0x1e58 <LCD_vSend_cmd+0xc0>
    1e7e:	14 c0       	rjmp	.+40     	; 0x1ea8 <LCD_vSend_cmd+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e80:	6f 81       	ldd	r22, Y+7	; 0x07
    1e82:	78 85       	ldd	r23, Y+8	; 0x08
    1e84:	89 85       	ldd	r24, Y+9	; 0x09
    1e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	9e 83       	std	Y+6, r25	; 0x06
    1e92:	8d 83       	std	Y+5, r24	; 0x05
    1e94:	8d 81       	ldd	r24, Y+5	; 0x05
    1e96:	9e 81       	ldd	r25, Y+6	; 0x06
    1e98:	9a 83       	std	Y+2, r25	; 0x02
    1e9a:	89 83       	std	Y+1, r24	; 0x01
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <LCD_vSend_cmd+0x108>
    1ea4:	9a 83       	std	Y+2, r25	; 0x02
    1ea6:	89 83       	std	Y+1, r24	; 0x01
	write_high_nibble('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	#endif
	_delay_ms(1);
}
    1ea8:	2f 96       	adiw	r28, 0x0f	; 15
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <LCD_vSend_char>:

void LCD_vSend_char(char data)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	2f 97       	sbiw	r28, 0x0f	; 15
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
    1ece:	8f 87       	std	Y+15, r24	; 0x0f
	#if defined eight_bits_mode
	DIO_write_port('A',data);
    1ed0:	81 e4       	ldi	r24, 0x41	; 65
    1ed2:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ed4:	0e 94 d7 08 	call	0x11ae	; 0x11ae <DIO_write_port>
	DIO_write('B',RS,1);
    1ed8:	82 e4       	ldi	r24, 0x42	; 66
    1eda:	61 e0       	ldi	r22, 0x01	; 1
    1edc:	41 e0       	ldi	r20, 0x01	; 1
    1ede:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
	send_falling_edge();
    1ee2:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <send_falling_edge>
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	a0 e8       	ldi	r26, 0x80	; 128
    1eec:	bf e3       	ldi	r27, 0x3F	; 63
    1eee:	8b 87       	std	Y+11, r24	; 0x0b
    1ef0:	9c 87       	std	Y+12, r25	; 0x0c
    1ef2:	ad 87       	std	Y+13, r26	; 0x0d
    1ef4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1efa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1efc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	4a ef       	ldi	r20, 0xFA	; 250
    1f04:	54 e4       	ldi	r21, 0x44	; 68
    1f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	8f 83       	std	Y+7, r24	; 0x07
    1f10:	98 87       	std	Y+8, r25	; 0x08
    1f12:	a9 87       	std	Y+9, r26	; 0x09
    1f14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f16:	6f 81       	ldd	r22, Y+7	; 0x07
    1f18:	78 85       	ldd	r23, Y+8	; 0x08
    1f1a:	89 85       	ldd	r24, Y+9	; 0x09
    1f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e8       	ldi	r20, 0x80	; 128
    1f24:	5f e3       	ldi	r21, 0x3F	; 63
    1f26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f2a:	88 23       	and	r24, r24
    1f2c:	2c f4       	brge	.+10     	; 0x1f38 <LCD_vSend_char+0x7e>
		__ticks = 1;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	9e 83       	std	Y+6, r25	; 0x06
    1f34:	8d 83       	std	Y+5, r24	; 0x05
    1f36:	3f c0       	rjmp	.+126    	; 0x1fb6 <LCD_vSend_char+0xfc>
	else if (__tmp > 65535)
    1f38:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3a:	78 85       	ldd	r23, Y+8	; 0x08
    1f3c:	89 85       	ldd	r24, Y+9	; 0x09
    1f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	3f ef       	ldi	r19, 0xFF	; 255
    1f44:	4f e7       	ldi	r20, 0x7F	; 127
    1f46:	57 e4       	ldi	r21, 0x47	; 71
    1f48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f4c:	18 16       	cp	r1, r24
    1f4e:	4c f5       	brge	.+82     	; 0x1fa2 <LCD_vSend_char+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e2       	ldi	r20, 0x20	; 32
    1f5e:	51 e4       	ldi	r21, 0x41	; 65
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9e 83       	std	Y+6, r25	; 0x06
    1f76:	8d 83       	std	Y+5, r24	; 0x05
    1f78:	0f c0       	rjmp	.+30     	; 0x1f98 <LCD_vSend_char+0xde>
    1f7a:	88 ec       	ldi	r24, 0xC8	; 200
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	9c 83       	std	Y+4, r25	; 0x04
    1f80:	8b 83       	std	Y+3, r24	; 0x03
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	9c 81       	ldd	r25, Y+4	; 0x04
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <LCD_vSend_char+0xcc>
    1f8a:	9c 83       	std	Y+4, r25	; 0x04
    1f8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f90:	9e 81       	ldd	r25, Y+6	; 0x06
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	9e 83       	std	Y+6, r25	; 0x06
    1f96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f98:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	69 f7       	brne	.-38     	; 0x1f7a <LCD_vSend_char+0xc0>
    1fa0:	14 c0       	rjmp	.+40     	; 0x1fca <LCD_vSend_char+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa4:	78 85       	ldd	r23, Y+8	; 0x08
    1fa6:	89 85       	ldd	r24, Y+9	; 0x09
    1fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	9e 83       	std	Y+6, r25	; 0x06
    1fb4:	8d 83       	std	Y+5, r24	; 0x05
    1fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fba:	9a 83       	std	Y+2, r25	; 0x02
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <LCD_vSend_char+0x108>
    1fc6:	9a 83       	std	Y+2, r25	; 0x02
    1fc8:	89 83       	std	Y+1, r24	; 0x01
	write_high_nibble('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	#endif
	_delay_ms(1);
}
    1fca:	2f 96       	adiw	r28, 0x0f	; 15
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	cd bf       	out	0x3d, r28	; 61
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	08 95       	ret

00001fdc <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	00 d0       	rcall	.+0      	; 0x1fe2 <LCD_vSend_string+0x6>
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	9a 83       	std	Y+2, r25	; 0x02
    1fe8:	89 83       	std	Y+1, r24	; 0x01
    1fea:	0a c0       	rjmp	.+20     	; 0x2000 <LCD_vSend_string+0x24>
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
    1fec:	e9 81       	ldd	r30, Y+1	; 0x01
    1fee:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff0:	80 81       	ld	r24, Z
    1ff2:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_vSend_char>
		data++;
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffa:	01 96       	adiw	r24, 0x01	; 1
    1ffc:	9a 83       	std	Y+2, r25	; 0x02
    1ffe:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
    2000:	e9 81       	ldd	r30, Y+1	; 0x01
    2002:	fa 81       	ldd	r31, Y+2	; 0x02
    2004:	80 81       	ld	r24, Z
    2006:	88 23       	and	r24, r24
    2008:	89 f7       	brne	.-30     	; 0x1fec <LCD_vSend_string+0x10>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <LCD_clearscreen>:
void LCD_clearscreen()
{
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	2e 97       	sbiw	r28, 0x0e	; 14
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
	LCD_vSend_cmd(CLR_SCREEN);
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <LCD_vSend_cmd>
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	a0 e2       	ldi	r26, 0x20	; 32
    2034:	b1 e4       	ldi	r27, 0x41	; 65
    2036:	8b 87       	std	Y+11, r24	; 0x0b
    2038:	9c 87       	std	Y+12, r25	; 0x0c
    203a:	ad 87       	std	Y+13, r26	; 0x0d
    203c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2040:	7c 85       	ldd	r23, Y+12	; 0x0c
    2042:	8d 85       	ldd	r24, Y+13	; 0x0d
    2044:	9e 85       	ldd	r25, Y+14	; 0x0e
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	4a ef       	ldi	r20, 0xFA	; 250
    204c:	54 e4       	ldi	r21, 0x44	; 68
    204e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	8f 83       	std	Y+7, r24	; 0x07
    2058:	98 87       	std	Y+8, r25	; 0x08
    205a:	a9 87       	std	Y+9, r26	; 0x09
    205c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    205e:	6f 81       	ldd	r22, Y+7	; 0x07
    2060:	78 85       	ldd	r23, Y+8	; 0x08
    2062:	89 85       	ldd	r24, Y+9	; 0x09
    2064:	9a 85       	ldd	r25, Y+10	; 0x0a
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 e8       	ldi	r20, 0x80	; 128
    206c:	5f e3       	ldi	r21, 0x3F	; 63
    206e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2072:	88 23       	and	r24, r24
    2074:	2c f4       	brge	.+10     	; 0x2080 <LCD_clearscreen+0x6c>
		__ticks = 1;
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	9e 83       	std	Y+6, r25	; 0x06
    207c:	8d 83       	std	Y+5, r24	; 0x05
    207e:	3f c0       	rjmp	.+126    	; 0x20fe <LCD_clearscreen+0xea>
	else if (__tmp > 65535)
    2080:	6f 81       	ldd	r22, Y+7	; 0x07
    2082:	78 85       	ldd	r23, Y+8	; 0x08
    2084:	89 85       	ldd	r24, Y+9	; 0x09
    2086:	9a 85       	ldd	r25, Y+10	; 0x0a
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	3f ef       	ldi	r19, 0xFF	; 255
    208c:	4f e7       	ldi	r20, 0x7F	; 127
    208e:	57 e4       	ldi	r21, 0x47	; 71
    2090:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2094:	18 16       	cp	r1, r24
    2096:	4c f5       	brge	.+82     	; 0x20ea <LCD_clearscreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2098:	6b 85       	ldd	r22, Y+11	; 0x0b
    209a:	7c 85       	ldd	r23, Y+12	; 0x0c
    209c:	8d 85       	ldd	r24, Y+13	; 0x0d
    209e:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e2       	ldi	r20, 0x20	; 32
    20a6:	51 e4       	ldi	r21, 0x41	; 65
    20a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	9e 83       	std	Y+6, r25	; 0x06
    20be:	8d 83       	std	Y+5, r24	; 0x05
    20c0:	0f c0       	rjmp	.+30     	; 0x20e0 <LCD_clearscreen+0xcc>
    20c2:	88 ec       	ldi	r24, 0xC8	; 200
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	9c 83       	std	Y+4, r25	; 0x04
    20c8:	8b 83       	std	Y+3, r24	; 0x03
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <LCD_clearscreen+0xba>
    20d2:	9c 83       	std	Y+4, r25	; 0x04
    20d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d6:	8d 81       	ldd	r24, Y+5	; 0x05
    20d8:	9e 81       	ldd	r25, Y+6	; 0x06
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	9e 83       	std	Y+6, r25	; 0x06
    20de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e0:	8d 81       	ldd	r24, Y+5	; 0x05
    20e2:	9e 81       	ldd	r25, Y+6	; 0x06
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	69 f7       	brne	.-38     	; 0x20c2 <LCD_clearscreen+0xae>
    20e8:	14 c0       	rjmp	.+40     	; 0x2112 <LCD_clearscreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ea:	6f 81       	ldd	r22, Y+7	; 0x07
    20ec:	78 85       	ldd	r23, Y+8	; 0x08
    20ee:	89 85       	ldd	r24, Y+9	; 0x09
    20f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9e 83       	std	Y+6, r25	; 0x06
    20fc:	8d 83       	std	Y+5, r24	; 0x05
    20fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2100:	9e 81       	ldd	r25, Y+6	; 0x06
    2102:	9a 83       	std	Y+2, r25	; 0x02
    2104:	89 83       	std	Y+1, r24	; 0x01
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	9a 81       	ldd	r25, Y+2	; 0x02
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <LCD_clearscreen+0xf6>
    210e:	9a 83       	std	Y+2, r25	; 0x02
    2110:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2112:	2e 96       	adiw	r28, 0x0e	; 14
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	61 97       	sbiw	r28, 0x11	; 17
    212e:	0f b6       	in	r0, 0x3f	; 63
    2130:	f8 94       	cli
    2132:	de bf       	out	0x3e, r29	; 62
    2134:	0f be       	out	0x3f, r0	; 63
    2136:	cd bf       	out	0x3d, r28	; 61
    2138:	88 8b       	std	Y+16, r24	; 0x10
    213a:	69 8b       	std	Y+17, r22	; 0x11
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
    213c:	88 89       	ldd	r24, Y+16	; 0x10
    213e:	83 30       	cpi	r24, 0x03	; 3
    2140:	48 f4       	brcc	.+18     	; 0x2154 <LCD_movecursor+0x30>
    2142:	88 89       	ldd	r24, Y+16	; 0x10
    2144:	88 23       	and	r24, r24
    2146:	31 f0       	breq	.+12     	; 0x2154 <LCD_movecursor+0x30>
    2148:	89 89       	ldd	r24, Y+17	; 0x11
    214a:	81 31       	cpi	r24, 0x11	; 17
    214c:	18 f4       	brcc	.+6      	; 0x2154 <LCD_movecursor+0x30>
    214e:	89 89       	ldd	r24, Y+17	; 0x11
    2150:	88 23       	and	r24, r24
    2152:	19 f4       	brne	.+6      	; 0x215a <LCD_movecursor+0x36>
	{
		data=0x80;
    2154:	80 e8       	ldi	r24, 0x80	; 128
    2156:	8f 87       	std	Y+15, r24	; 0x0f
    2158:	0d c0       	rjmp	.+26     	; 0x2174 <LCD_movecursor+0x50>
	}
	else if(row==1)
    215a:	88 89       	ldd	r24, Y+16	; 0x10
    215c:	81 30       	cpi	r24, 0x01	; 1
    215e:	21 f4       	brne	.+8      	; 0x2168 <LCD_movecursor+0x44>
	{
		data=0x80+coloumn-1 ;
    2160:	89 89       	ldd	r24, Y+17	; 0x11
    2162:	81 58       	subi	r24, 0x81	; 129
    2164:	8f 87       	std	Y+15, r24	; 0x0f
    2166:	06 c0       	rjmp	.+12     	; 0x2174 <LCD_movecursor+0x50>
	}
	else if (row==2)
    2168:	88 89       	ldd	r24, Y+16	; 0x10
    216a:	82 30       	cpi	r24, 0x02	; 2
    216c:	19 f4       	brne	.+6      	; 0x2174 <LCD_movecursor+0x50>
	{
		data=0xc0+coloumn-1;
    216e:	89 89       	ldd	r24, Y+17	; 0x11
    2170:	81 54       	subi	r24, 0x41	; 65
    2172:	8f 87       	std	Y+15, r24	; 0x0f
	}
	LCD_vSend_cmd(data);
    2174:	8f 85       	ldd	r24, Y+15	; 0x0f
    2176:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <LCD_vSend_cmd>
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	a0 e8       	ldi	r26, 0x80	; 128
    2180:	bf e3       	ldi	r27, 0x3F	; 63
    2182:	8b 87       	std	Y+11, r24	; 0x0b
    2184:	9c 87       	std	Y+12, r25	; 0x0c
    2186:	ad 87       	std	Y+13, r26	; 0x0d
    2188:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218a:	6b 85       	ldd	r22, Y+11	; 0x0b
    218c:	7c 85       	ldd	r23, Y+12	; 0x0c
    218e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2190:	9e 85       	ldd	r25, Y+14	; 0x0e
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	4a ef       	ldi	r20, 0xFA	; 250
    2198:	54 e4       	ldi	r21, 0x44	; 68
    219a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	8f 83       	std	Y+7, r24	; 0x07
    21a4:	98 87       	std	Y+8, r25	; 0x08
    21a6:	a9 87       	std	Y+9, r26	; 0x09
    21a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21aa:	6f 81       	ldd	r22, Y+7	; 0x07
    21ac:	78 85       	ldd	r23, Y+8	; 0x08
    21ae:	89 85       	ldd	r24, Y+9	; 0x09
    21b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e8       	ldi	r20, 0x80	; 128
    21b8:	5f e3       	ldi	r21, 0x3F	; 63
    21ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21be:	88 23       	and	r24, r24
    21c0:	2c f4       	brge	.+10     	; 0x21cc <LCD_movecursor+0xa8>
		__ticks = 1;
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	9e 83       	std	Y+6, r25	; 0x06
    21c8:	8d 83       	std	Y+5, r24	; 0x05
    21ca:	3f c0       	rjmp	.+126    	; 0x224a <LCD_movecursor+0x126>
	else if (__tmp > 65535)
    21cc:	6f 81       	ldd	r22, Y+7	; 0x07
    21ce:	78 85       	ldd	r23, Y+8	; 0x08
    21d0:	89 85       	ldd	r24, Y+9	; 0x09
    21d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	3f ef       	ldi	r19, 0xFF	; 255
    21d8:	4f e7       	ldi	r20, 0x7F	; 127
    21da:	57 e4       	ldi	r21, 0x47	; 71
    21dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e0:	18 16       	cp	r1, r24
    21e2:	4c f5       	brge	.+82     	; 0x2236 <LCD_movecursor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e2       	ldi	r20, 0x20	; 32
    21f2:	51 e4       	ldi	r21, 0x41	; 65
    21f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	bc 01       	movw	r22, r24
    21fe:	cd 01       	movw	r24, r26
    2200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	9e 83       	std	Y+6, r25	; 0x06
    220a:	8d 83       	std	Y+5, r24	; 0x05
    220c:	0f c0       	rjmp	.+30     	; 0x222c <LCD_movecursor+0x108>
    220e:	88 ec       	ldi	r24, 0xC8	; 200
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	9c 83       	std	Y+4, r25	; 0x04
    2214:	8b 83       	std	Y+3, r24	; 0x03
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	9c 81       	ldd	r25, Y+4	; 0x04
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	f1 f7       	brne	.-4      	; 0x221a <LCD_movecursor+0xf6>
    221e:	9c 83       	std	Y+4, r25	; 0x04
    2220:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2222:	8d 81       	ldd	r24, Y+5	; 0x05
    2224:	9e 81       	ldd	r25, Y+6	; 0x06
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	9e 83       	std	Y+6, r25	; 0x06
    222a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222c:	8d 81       	ldd	r24, Y+5	; 0x05
    222e:	9e 81       	ldd	r25, Y+6	; 0x06
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	69 f7       	brne	.-38     	; 0x220e <LCD_movecursor+0xea>
    2234:	14 c0       	rjmp	.+40     	; 0x225e <LCD_movecursor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2236:	6f 81       	ldd	r22, Y+7	; 0x07
    2238:	78 85       	ldd	r23, Y+8	; 0x08
    223a:	89 85       	ldd	r24, Y+9	; 0x09
    223c:	9a 85       	ldd	r25, Y+10	; 0x0a
    223e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	9e 83       	std	Y+6, r25	; 0x06
    2248:	8d 83       	std	Y+5, r24	; 0x05
    224a:	8d 81       	ldd	r24, Y+5	; 0x05
    224c:	9e 81       	ldd	r25, Y+6	; 0x06
    224e:	9a 83       	std	Y+2, r25	; 0x02
    2250:	89 83       	std	Y+1, r24	; 0x01
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	9a 81       	ldd	r25, Y+2	; 0x02
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	f1 f7       	brne	.-4      	; 0x2256 <LCD_movecursor+0x132>
    225a:	9a 83       	std	Y+2, r25	; 0x02
    225c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    225e:	61 96       	adiw	r28, 0x11	; 17
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	de bf       	out	0x3e, r29	; 62
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	cd bf       	out	0x3d, r28	; 61
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	00 d0       	rcall	.+0      	; 0x2276 <xEventGroupCreate+0x6>
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
    227a:	8b e0       	ldi	r24, 0x0B	; 11
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	0e 94 78 14 	call	0x28f0	; 0x28f0 <pvPortMalloc>
    2282:	9a 83       	std	Y+2, r25	; 0x02
    2284:	89 83       	std	Y+1, r24	; 0x01

		if( pxEventBits != NULL )
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	9a 81       	ldd	r25, Y+2	; 0x02
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	49 f0       	breq	.+18     	; 0x22a0 <xEventGroupCreate+0x30>
		{
			pxEventBits->uxEventBits = 0;
    228e:	e9 81       	ldd	r30, Y+1	; 0x01
    2290:	fa 81       	ldd	r31, Y+2	; 0x02
    2292:	11 82       	std	Z+1, r1	; 0x01
    2294:	10 82       	st	Z, r1
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	9a 81       	ldd	r25, Y+2	; 0x02
    229a:	02 96       	adiw	r24, 0x02	; 2
    229c:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	08 95       	ret

000022ae <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	60 97       	sbiw	r28, 0x10	; 16
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	de bf       	out	0x3e, r29	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	cd bf       	out	0x3d, r28	; 61
    22c2:	9a 87       	std	Y+10, r25	; 0x0a
    22c4:	89 87       	std	Y+9, r24	; 0x09
    22c6:	7c 87       	std	Y+12, r23	; 0x0c
    22c8:	6b 87       	std	Y+11, r22	; 0x0b
    22ca:	5e 87       	std	Y+14, r21	; 0x0e
    22cc:	4d 87       	std	Y+13, r20	; 0x0d
    22ce:	38 8b       	std	Y+16, r19	; 0x10
    22d0:	2f 87       	std	Y+15, r18	; 0x0f
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    22d2:	89 85       	ldd	r24, Y+9	; 0x09
    22d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d6:	9c 83       	std	Y+4, r25	; 0x04
    22d8:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    22da:	19 82       	std	Y+1, r1	; 0x01
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    22dc:	0e 94 63 28 	call	0x50c6	; 0x50c6 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
    22e0:	eb 81       	ldd	r30, Y+3	; 0x03
    22e2:	fc 81       	ldd	r31, Y+4	; 0x04
    22e4:	80 81       	ld	r24, Z
    22e6:	91 81       	ldd	r25, Z+1	; 0x01
    22e8:	98 87       	std	Y+8, r25	; 0x08
    22ea:	8f 83       	std	Y+7, r24	; 0x07

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
    22ec:	89 85       	ldd	r24, Y+9	; 0x09
    22ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f0:	2b 85       	ldd	r18, Y+11	; 0x0b
    22f2:	3c 85       	ldd	r19, Y+12	; 0x0c
    22f4:	b9 01       	movw	r22, r18
    22f6:	0e 94 29 13 	call	0x2652	; 0x2652 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
    22fa:	2f 81       	ldd	r18, Y+7	; 0x07
    22fc:	38 85       	ldd	r19, Y+8	; 0x08
    22fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2300:	9c 85       	ldd	r25, Y+12	; 0x0c
    2302:	28 2b       	or	r18, r24
    2304:	39 2b       	or	r19, r25
    2306:	8d 85       	ldd	r24, Y+13	; 0x0d
    2308:	9e 85       	ldd	r25, Y+14	; 0x0e
    230a:	28 23       	and	r18, r24
    230c:	39 23       	and	r19, r25
    230e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2310:	9e 85       	ldd	r25, Y+14	; 0x0e
    2312:	28 17       	cp	r18, r24
    2314:	39 07       	cpc	r19, r25
    2316:	c9 f4       	brne	.+50     	; 0x234a <xEventGroupSync+0x9c>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
    2318:	2f 81       	ldd	r18, Y+7	; 0x07
    231a:	38 85       	ldd	r19, Y+8	; 0x08
    231c:	8b 85       	ldd	r24, Y+11	; 0x0b
    231e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2320:	82 2b       	or	r24, r18
    2322:	93 2b       	or	r25, r19
    2324:	9e 83       	std	Y+6, r25	; 0x06
    2326:	8d 83       	std	Y+5, r24	; 0x05

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    2328:	eb 81       	ldd	r30, Y+3	; 0x03
    232a:	fc 81       	ldd	r31, Y+4	; 0x04
    232c:	20 81       	ld	r18, Z
    232e:	31 81       	ldd	r19, Z+1	; 0x01
    2330:	8d 85       	ldd	r24, Y+13	; 0x0d
    2332:	9e 85       	ldd	r25, Y+14	; 0x0e
    2334:	80 95       	com	r24
    2336:	90 95       	com	r25
    2338:	82 23       	and	r24, r18
    233a:	93 23       	and	r25, r19
    233c:	eb 81       	ldd	r30, Y+3	; 0x03
    233e:	fc 81       	ldd	r31, Y+4	; 0x04
    2340:	91 83       	std	Z+1, r25	; 0x01
    2342:	80 83       	st	Z, r24

			xTicksToWait = 0;
    2344:	18 8a       	std	Y+16, r1	; 0x10
    2346:	1f 86       	std	Y+15, r1	; 0x0f
    2348:	1c c0       	rjmp	.+56     	; 0x2382 <xEventGroupSync+0xd4>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
    234a:	8f 85       	ldd	r24, Y+15	; 0x0f
    234c:	98 89       	ldd	r25, Y+16	; 0x10
    234e:	00 97       	sbiw	r24, 0x00	; 0
    2350:	91 f0       	breq	.+36     	; 0x2376 <xEventGroupSync+0xc8>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	9c 81       	ldd	r25, Y+4	; 0x04
    2356:	bc 01       	movw	r22, r24
    2358:	6e 5f       	subi	r22, 0xFE	; 254
    235a:	7f 4f       	sbci	r23, 0xFF	; 255
    235c:	8d 85       	ldd	r24, Y+13	; 0x0d
    235e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2360:	9c 01       	movw	r18, r24
    2362:	35 60       	ori	r19, 0x05	; 5
    2364:	4f 85       	ldd	r20, Y+15	; 0x0f
    2366:	58 89       	ldd	r21, Y+16	; 0x10
    2368:	cb 01       	movw	r24, r22
    236a:	b9 01       	movw	r22, r18
    236c:	0e 94 ba 2a 	call	0x5574	; 0x5574 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
    2370:	1e 82       	std	Y+6, r1	; 0x06
    2372:	1d 82       	std	Y+5, r1	; 0x05
    2374:	06 c0       	rjmp	.+12     	; 0x2382 <xEventGroupSync+0xd4>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    2376:	eb 81       	ldd	r30, Y+3	; 0x03
    2378:	fc 81       	ldd	r31, Y+4	; 0x04
    237a:	80 81       	ld	r24, Z
    237c:	91 81       	ldd	r25, Z+1	; 0x01
    237e:	9e 83       	std	Y+6, r25	; 0x06
    2380:	8d 83       	std	Y+5, r24	; 0x05
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    2382:	0e 94 6f 28 	call	0x50de	; 0x50de <xTaskResumeAll>
    2386:	8a 83       	std	Y+2, r24	; 0x02

	if( xTicksToWait != ( TickType_t ) 0 )
    2388:	8f 85       	ldd	r24, Y+15	; 0x0f
    238a:	98 89       	ldd	r25, Y+16	; 0x10
    238c:	00 97       	sbiw	r24, 0x00	; 0
    238e:	09 f4       	brne	.+2      	; 0x2392 <xEventGroupSync+0xe4>
    2390:	3a c0       	rjmp	.+116    	; 0x2406 <xEventGroupSync+0x158>
	{
		if( xAlreadyYielded == pdFALSE )
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	88 23       	and	r24, r24
    2396:	11 f4       	brne	.+4      	; 0x239c <xEventGroupSync+0xee>
		{
			portYIELD_WITHIN_API();
    2398:	0e 94 bd 1a 	call	0x357a	; 0x357a <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    239c:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <uxTaskResetEventItemValue>
    23a0:	9e 83       	std	Y+6, r25	; 0x06
    23a2:	8d 83       	std	Y+5, r24	; 0x05

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    23a4:	8d 81       	ldd	r24, Y+5	; 0x05
    23a6:	9e 81       	ldd	r25, Y+6	; 0x06
    23a8:	80 70       	andi	r24, 0x00	; 0
    23aa:	92 70       	andi	r25, 0x02	; 2
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	31 f5       	brne	.+76     	; 0x23fc <xEventGroupSync+0x14e>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	0f 92       	push	r0
			{
				uxReturn = pxEventBits->uxEventBits;
    23b6:	eb 81       	ldd	r30, Y+3	; 0x03
    23b8:	fc 81       	ldd	r31, Y+4	; 0x04
    23ba:	80 81       	ld	r24, Z
    23bc:	91 81       	ldd	r25, Z+1	; 0x01
    23be:	9e 83       	std	Y+6, r25	; 0x06
    23c0:	8d 83       	std	Y+5, r24	; 0x05

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
    23c2:	2d 81       	ldd	r18, Y+5	; 0x05
    23c4:	3e 81       	ldd	r19, Y+6	; 0x06
    23c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ca:	28 23       	and	r18, r24
    23cc:	39 23       	and	r19, r25
    23ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d2:	28 17       	cp	r18, r24
    23d4:	39 07       	cpc	r19, r25
    23d6:	71 f4       	brne	.+28     	; 0x23f4 <xEventGroupSync+0x146>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    23d8:	eb 81       	ldd	r30, Y+3	; 0x03
    23da:	fc 81       	ldd	r31, Y+4	; 0x04
    23dc:	20 81       	ld	r18, Z
    23de:	31 81       	ldd	r19, Z+1	; 0x01
    23e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e4:	80 95       	com	r24
    23e6:	90 95       	com	r25
    23e8:	82 23       	and	r24, r18
    23ea:	93 23       	and	r25, r19
    23ec:	eb 81       	ldd	r30, Y+3	; 0x03
    23ee:	fc 81       	ldd	r31, Y+4	; 0x04
    23f0:	91 83       	std	Z+1, r25	; 0x01
    23f2:	80 83       	st	Z, r24
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    23f4:	0f 90       	pop	r0
    23f6:	0f be       	out	0x3f, r0	; 63

			xTimeoutOccurred = pdTRUE;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	89 83       	std	Y+1, r24	; 0x01
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    23fc:	8d 81       	ldd	r24, Y+5	; 0x05
    23fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2400:	90 70       	andi	r25, 0x00	; 0
    2402:	9e 83       	std	Y+6, r25	; 0x06
    2404:	8d 83       	std	Y+5, r24	; 0x05
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
    2406:	8d 81       	ldd	r24, Y+5	; 0x05
    2408:	9e 81       	ldd	r25, Y+6	; 0x06
}
    240a:	60 96       	adiw	r28, 0x10	; 16
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	cd bf       	out	0x3d, r28	; 61
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	08 95       	ret

0000241c <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
    241c:	0f 93       	push	r16
    241e:	1f 93       	push	r17
    2420:	df 93       	push	r29
    2422:	cf 93       	push	r28
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
    2428:	63 97       	sbiw	r28, 0x13	; 19
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	f8 94       	cli
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	cd bf       	out	0x3d, r28	; 61
    2434:	9d 87       	std	Y+13, r25	; 0x0d
    2436:	8c 87       	std	Y+12, r24	; 0x0c
    2438:	7f 87       	std	Y+15, r23	; 0x0f
    243a:	6e 87       	std	Y+14, r22	; 0x0e
    243c:	48 8b       	std	Y+16, r20	; 0x10
    243e:	29 8b       	std	Y+17, r18	; 0x11
    2440:	1b 8b       	std	Y+19, r17	; 0x13
    2442:	0a 8b       	std	Y+18, r16	; 0x12
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    2444:	8c 85       	ldd	r24, Y+12	; 0x0c
    2446:	9d 85       	ldd	r25, Y+13	; 0x0d
    2448:	9b 87       	std	Y+11, r25	; 0x0b
    244a:	8a 87       	std	Y+10, r24	; 0x0a
EventBits_t uxReturn, uxControlBits = 0;
    244c:	1f 82       	std	Y+7, r1	; 0x07
    244e:	1e 82       	std	Y+6, r1	; 0x06
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    2450:	1b 82       	std	Y+3, r1	; 0x03
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    2452:	0e 94 63 28 	call	0x50c6	; 0x50c6 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    2456:	ea 85       	ldd	r30, Y+10	; 0x0a
    2458:	fb 85       	ldd	r31, Y+11	; 0x0b
    245a:	80 81       	ld	r24, Z
    245c:	91 81       	ldd	r25, Z+1	; 0x01
    245e:	9a 83       	std	Y+2, r25	; 0x02
    2460:	89 83       	std	Y+1, r24	; 0x01

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	9a 81       	ldd	r25, Y+2	; 0x02
    2466:	2e 85       	ldd	r18, Y+14	; 0x0e
    2468:	3f 85       	ldd	r19, Y+15	; 0x0f
    246a:	b9 01       	movw	r22, r18
    246c:	49 89       	ldd	r20, Y+17	; 0x11
    246e:	0e 94 46 14 	call	0x288c	; 0x288c <prvTestWaitCondition>
    2472:	8d 83       	std	Y+5, r24	; 0x05

		if( xWaitConditionMet != pdFALSE )
    2474:	8d 81       	ldd	r24, Y+5	; 0x05
    2476:	88 23       	and	r24, r24
    2478:	c1 f0       	breq	.+48     	; 0x24aa <xEventGroupWaitBits+0x8e>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	9a 81       	ldd	r25, Y+2	; 0x02
    247e:	99 87       	std	Y+9, r25	; 0x09
    2480:	88 87       	std	Y+8, r24	; 0x08
			xTicksToWait = ( TickType_t ) 0;
    2482:	1b 8a       	std	Y+19, r1	; 0x13
    2484:	1a 8a       	std	Y+18, r1	; 0x12

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
    2486:	88 89       	ldd	r24, Y+16	; 0x10
    2488:	88 23       	and	r24, r24
    248a:	d9 f1       	breq	.+118    	; 0x2502 <xEventGroupWaitBits+0xe6>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    248c:	ea 85       	ldd	r30, Y+10	; 0x0a
    248e:	fb 85       	ldd	r31, Y+11	; 0x0b
    2490:	20 81       	ld	r18, Z
    2492:	31 81       	ldd	r19, Z+1	; 0x01
    2494:	8e 85       	ldd	r24, Y+14	; 0x0e
    2496:	9f 85       	ldd	r25, Y+15	; 0x0f
    2498:	80 95       	com	r24
    249a:	90 95       	com	r25
    249c:	82 23       	and	r24, r18
    249e:	93 23       	and	r25, r19
    24a0:	ea 85       	ldd	r30, Y+10	; 0x0a
    24a2:	fb 85       	ldd	r31, Y+11	; 0x0b
    24a4:	91 83       	std	Z+1, r25	; 0x01
    24a6:	80 83       	st	Z, r24
    24a8:	2c c0       	rjmp	.+88     	; 0x2502 <xEventGroupWaitBits+0xe6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
    24aa:	8a 89       	ldd	r24, Y+18	; 0x12
    24ac:	9b 89       	ldd	r25, Y+19	; 0x13
    24ae:	00 97       	sbiw	r24, 0x00	; 0
    24b0:	29 f4       	brne	.+10     	; 0x24bc <xEventGroupWaitBits+0xa0>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	9a 81       	ldd	r25, Y+2	; 0x02
    24b6:	99 87       	std	Y+9, r25	; 0x09
    24b8:	88 87       	std	Y+8, r24	; 0x08
    24ba:	23 c0       	rjmp	.+70     	; 0x2502 <xEventGroupWaitBits+0xe6>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
    24bc:	88 89       	ldd	r24, Y+16	; 0x10
    24be:	88 23       	and	r24, r24
    24c0:	29 f0       	breq	.+10     	; 0x24cc <xEventGroupWaitBits+0xb0>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
    24c2:	8e 81       	ldd	r24, Y+6	; 0x06
    24c4:	9f 81       	ldd	r25, Y+7	; 0x07
    24c6:	91 60       	ori	r25, 0x01	; 1
    24c8:	9f 83       	std	Y+7, r25	; 0x07
    24ca:	8e 83       	std	Y+6, r24	; 0x06
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
    24cc:	89 89       	ldd	r24, Y+17	; 0x11
    24ce:	88 23       	and	r24, r24
    24d0:	29 f0       	breq	.+10     	; 0x24dc <xEventGroupWaitBits+0xc0>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
    24d2:	8e 81       	ldd	r24, Y+6	; 0x06
    24d4:	9f 81       	ldd	r25, Y+7	; 0x07
    24d6:	94 60       	ori	r25, 0x04	; 4
    24d8:	9f 83       	std	Y+7, r25	; 0x07
    24da:	8e 83       	std	Y+6, r24	; 0x06
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
    24dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    24de:	9b 85       	ldd	r25, Y+11	; 0x0b
    24e0:	bc 01       	movw	r22, r24
    24e2:	6e 5f       	subi	r22, 0xFE	; 254
    24e4:	7f 4f       	sbci	r23, 0xFF	; 255
    24e6:	2e 85       	ldd	r18, Y+14	; 0x0e
    24e8:	3f 85       	ldd	r19, Y+15	; 0x0f
    24ea:	8e 81       	ldd	r24, Y+6	; 0x06
    24ec:	9f 81       	ldd	r25, Y+7	; 0x07
    24ee:	28 2b       	or	r18, r24
    24f0:	39 2b       	or	r19, r25
    24f2:	4a 89       	ldd	r20, Y+18	; 0x12
    24f4:	5b 89       	ldd	r21, Y+19	; 0x13
    24f6:	cb 01       	movw	r24, r22
    24f8:	b9 01       	movw	r22, r18
    24fa:	0e 94 ba 2a 	call	0x5574	; 0x5574 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
    24fe:	19 86       	std	Y+9, r1	; 0x09
    2500:	18 86       	std	Y+8, r1	; 0x08

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    2502:	0e 94 6f 28 	call	0x50de	; 0x50de <xTaskResumeAll>
    2506:	8c 83       	std	Y+4, r24	; 0x04

	if( xTicksToWait != ( TickType_t ) 0 )
    2508:	8a 89       	ldd	r24, Y+18	; 0x12
    250a:	9b 89       	ldd	r25, Y+19	; 0x13
    250c:	00 97       	sbiw	r24, 0x00	; 0
    250e:	09 f4       	brne	.+2      	; 0x2512 <xEventGroupWaitBits+0xf6>
    2510:	3b c0       	rjmp	.+118    	; 0x2588 <xEventGroupWaitBits+0x16c>
	{
		if( xAlreadyYielded == pdFALSE )
    2512:	8c 81       	ldd	r24, Y+4	; 0x04
    2514:	88 23       	and	r24, r24
    2516:	11 f4       	brne	.+4      	; 0x251c <xEventGroupWaitBits+0x100>
		{
			portYIELD_WITHIN_API();
    2518:	0e 94 bd 1a 	call	0x357a	; 0x357a <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    251c:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <uxTaskResetEventItemValue>
    2520:	99 87       	std	Y+9, r25	; 0x09
    2522:	88 87       	std	Y+8, r24	; 0x08

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    2524:	88 85       	ldd	r24, Y+8	; 0x08
    2526:	99 85       	ldd	r25, Y+9	; 0x09
    2528:	80 70       	andi	r24, 0x00	; 0
    252a:	92 70       	andi	r25, 0x02	; 2
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	39 f5       	brne	.+78     	; 0x257e <xEventGroupWaitBits+0x162>
		{
			taskENTER_CRITICAL();
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	0f 92       	push	r0
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    2536:	ea 85       	ldd	r30, Y+10	; 0x0a
    2538:	fb 85       	ldd	r31, Y+11	; 0x0b
    253a:	80 81       	ld	r24, Z
    253c:	91 81       	ldd	r25, Z+1	; 0x01
    253e:	99 87       	std	Y+9, r25	; 0x09
    2540:	88 87       	std	Y+8, r24	; 0x08

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
    2542:	88 85       	ldd	r24, Y+8	; 0x08
    2544:	99 85       	ldd	r25, Y+9	; 0x09
    2546:	2e 85       	ldd	r18, Y+14	; 0x0e
    2548:	3f 85       	ldd	r19, Y+15	; 0x0f
    254a:	b9 01       	movw	r22, r18
    254c:	49 89       	ldd	r20, Y+17	; 0x11
    254e:	0e 94 46 14 	call	0x288c	; 0x288c <prvTestWaitCondition>
    2552:	88 23       	and	r24, r24
    2554:	89 f0       	breq	.+34     	; 0x2578 <xEventGroupWaitBits+0x15c>
				{
					if( xClearOnExit != pdFALSE )
    2556:	88 89       	ldd	r24, Y+16	; 0x10
    2558:	88 23       	and	r24, r24
    255a:	71 f0       	breq	.+28     	; 0x2578 <xEventGroupWaitBits+0x15c>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    255c:	ea 85       	ldd	r30, Y+10	; 0x0a
    255e:	fb 85       	ldd	r31, Y+11	; 0x0b
    2560:	20 81       	ld	r18, Z
    2562:	31 81       	ldd	r19, Z+1	; 0x01
    2564:	8e 85       	ldd	r24, Y+14	; 0x0e
    2566:	9f 85       	ldd	r25, Y+15	; 0x0f
    2568:	80 95       	com	r24
    256a:	90 95       	com	r25
    256c:	82 23       	and	r24, r18
    256e:	93 23       	and	r25, r19
    2570:	ea 85       	ldd	r30, Y+10	; 0x0a
    2572:	fb 85       	ldd	r31, Y+11	; 0x0b
    2574:	91 83       	std	Z+1, r25	; 0x01
    2576:	80 83       	st	Z, r24
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    2578:	0f 90       	pop	r0
    257a:	0f be       	out	0x3f, r0	; 63

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
    257c:	1b 82       	std	Y+3, r1	; 0x03
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    257e:	88 85       	ldd	r24, Y+8	; 0x08
    2580:	99 85       	ldd	r25, Y+9	; 0x09
    2582:	90 70       	andi	r25, 0x00	; 0
    2584:	99 87       	std	Y+9, r25	; 0x09
    2586:	88 87       	std	Y+8, r24	; 0x08
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
    2588:	88 85       	ldd	r24, Y+8	; 0x08
    258a:	99 85       	ldd	r25, Y+9	; 0x09
}
    258c:	63 96       	adiw	r28, 0x13	; 19
    258e:	0f b6       	in	r0, 0x3f	; 63
    2590:	f8 94       	cli
    2592:	de bf       	out	0x3e, r29	; 62
    2594:	0f be       	out	0x3f, r0	; 63
    2596:	cd bf       	out	0x3d, r28	; 61
    2598:	cf 91       	pop	r28
    259a:	df 91       	pop	r29
    259c:	1f 91       	pop	r17
    259e:	0f 91       	pop	r16
    25a0:	08 95       	ret

000025a2 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
    25a2:	df 93       	push	r29
    25a4:	cf 93       	push	r28
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
    25aa:	28 97       	sbiw	r28, 0x08	; 8
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	f8 94       	cli
    25b0:	de bf       	out	0x3e, r29	; 62
    25b2:	0f be       	out	0x3f, r0	; 63
    25b4:	cd bf       	out	0x3d, r28	; 61
    25b6:	9e 83       	std	Y+6, r25	; 0x06
    25b8:	8d 83       	std	Y+5, r24	; 0x05
    25ba:	78 87       	std	Y+8, r23	; 0x08
    25bc:	6f 83       	std	Y+7, r22	; 0x07
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    25be:	8d 81       	ldd	r24, Y+5	; 0x05
    25c0:	9e 81       	ldd	r25, Y+6	; 0x06
    25c2:	9c 83       	std	Y+4, r25	; 0x04
    25c4:	8b 83       	std	Y+3, r24	; 0x03
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
    25c6:	0f b6       	in	r0, 0x3f	; 63
    25c8:	f8 94       	cli
    25ca:	0f 92       	push	r0
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
    25cc:	eb 81       	ldd	r30, Y+3	; 0x03
    25ce:	fc 81       	ldd	r31, Y+4	; 0x04
    25d0:	80 81       	ld	r24, Z
    25d2:	91 81       	ldd	r25, Z+1	; 0x01
    25d4:	9a 83       	std	Y+2, r25	; 0x02
    25d6:	89 83       	std	Y+1, r24	; 0x01

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    25d8:	eb 81       	ldd	r30, Y+3	; 0x03
    25da:	fc 81       	ldd	r31, Y+4	; 0x04
    25dc:	20 81       	ld	r18, Z
    25de:	31 81       	ldd	r19, Z+1	; 0x01
    25e0:	8f 81       	ldd	r24, Y+7	; 0x07
    25e2:	98 85       	ldd	r25, Y+8	; 0x08
    25e4:	80 95       	com	r24
    25e6:	90 95       	com	r25
    25e8:	82 23       	and	r24, r18
    25ea:	93 23       	and	r25, r19
    25ec:	eb 81       	ldd	r30, Y+3	; 0x03
    25ee:	fc 81       	ldd	r31, Y+4	; 0x04
    25f0:	91 83       	std	Z+1, r25	; 0x01
    25f2:	80 83       	st	Z, r24
	}
	taskEXIT_CRITICAL();
    25f4:	0f 90       	pop	r0
    25f6:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	9a 81       	ldd	r25, Y+2	; 0x02
}
    25fc:	28 96       	adiw	r28, 0x08	; 8
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
    2616:	27 97       	sbiw	r28, 0x07	; 7
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	f8 94       	cli
    261c:	de bf       	out	0x3e, r29	; 62
    261e:	0f be       	out	0x3f, r0	; 63
    2620:	cd bf       	out	0x3d, r28	; 61
    2622:	9f 83       	std	Y+7, r25	; 0x07
    2624:	8e 83       	std	Y+6, r24	; 0x06
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    2626:	8e 81       	ldd	r24, Y+6	; 0x06
    2628:	9f 81       	ldd	r25, Y+7	; 0x07
    262a:	9c 83       	std	Y+4, r25	; 0x04
    262c:	8b 83       	std	Y+3, r24	; 0x03
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    262e:	1d 82       	std	Y+5, r1	; 0x05
	{
		uxReturn = pxEventBits->uxEventBits;
    2630:	eb 81       	ldd	r30, Y+3	; 0x03
    2632:	fc 81       	ldd	r31, Y+4	; 0x04
    2634:	80 81       	ld	r24, Z
    2636:	91 81       	ldd	r25, Z+1	; 0x01
    2638:	9a 83       	std	Y+2, r25	; 0x02
    263a:	89 83       	std	Y+1, r24	; 0x01
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2640:	27 96       	adiw	r28, 0x07	; 7
    2642:	0f b6       	in	r0, 0x3f	; 63
    2644:	f8 94       	cli
    2646:	de bf       	out	0x3e, r29	; 62
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	cd bf       	out	0x3d, r28	; 61
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	08 95       	ret

00002652 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	65 97       	sbiw	r28, 0x15	; 21
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	f8 94       	cli
    2660:	de bf       	out	0x3e, r29	; 62
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	cd bf       	out	0x3d, r28	; 61
    2666:	9b 8b       	std	Y+19, r25	; 0x13
    2668:	8a 8b       	std	Y+18, r24	; 0x12
    266a:	7d 8b       	std	Y+21, r23	; 0x15
    266c:	6c 8b       	std	Y+20, r22	; 0x14
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    266e:	19 86       	std	Y+9, r1	; 0x09
    2670:	18 86       	std	Y+8, r1	; 0x08
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    2672:	8a 89       	ldd	r24, Y+18	; 0x12
    2674:	9b 89       	ldd	r25, Y+19	; 0x13
    2676:	9b 83       	std	Y+3, r25	; 0x03
    2678:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xMatchFound = pdFALSE;
    267a:	19 82       	std	Y+1, r1	; 0x01
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
    267c:	8a 81       	ldd	r24, Y+2	; 0x02
    267e:	9b 81       	ldd	r25, Y+3	; 0x03
    2680:	02 96       	adiw	r24, 0x02	; 2
    2682:	9b 87       	std	Y+11, r25	; 0x0b
    2684:	8a 87       	std	Y+10, r24	; 0x0a
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2686:	8a 85       	ldd	r24, Y+10	; 0x0a
    2688:	9b 85       	ldd	r25, Y+11	; 0x0b
    268a:	03 96       	adiw	r24, 0x03	; 3
    268c:	9d 87       	std	Y+13, r25	; 0x0d
    268e:	8c 87       	std	Y+12, r24	; 0x0c
	vTaskSuspendAll();
    2690:	0e 94 63 28 	call	0x50c6	; 0x50c6 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
    2694:	ea 85       	ldd	r30, Y+10	; 0x0a
    2696:	fb 85       	ldd	r31, Y+11	; 0x0b
    2698:	85 81       	ldd	r24, Z+5	; 0x05
    269a:	96 81       	ldd	r25, Z+6	; 0x06
    269c:	99 8b       	std	Y+17, r25	; 0x11
    269e:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
    26a0:	ea 81       	ldd	r30, Y+2	; 0x02
    26a2:	fb 81       	ldd	r31, Y+3	; 0x03
    26a4:	20 81       	ld	r18, Z
    26a6:	31 81       	ldd	r19, Z+1	; 0x01
    26a8:	8c 89       	ldd	r24, Y+20	; 0x14
    26aa:	9d 89       	ldd	r25, Y+21	; 0x15
    26ac:	82 2b       	or	r24, r18
    26ae:	93 2b       	or	r25, r19
    26b0:	ea 81       	ldd	r30, Y+2	; 0x02
    26b2:	fb 81       	ldd	r31, Y+3	; 0x03
    26b4:	91 83       	std	Z+1, r25	; 0x01
    26b6:	80 83       	st	Z, r24
    26b8:	59 c0       	rjmp	.+178    	; 0x276c <xEventGroupSetBits+0x11a>

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
		{
			pxNext = listGET_NEXT( pxListItem );
    26ba:	e8 89       	ldd	r30, Y+16	; 0x10
    26bc:	f9 89       	ldd	r31, Y+17	; 0x11
    26be:	82 81       	ldd	r24, Z+2	; 0x02
    26c0:	93 81       	ldd	r25, Z+3	; 0x03
    26c2:	9f 87       	std	Y+15, r25	; 0x0f
    26c4:	8e 87       	std	Y+14, r24	; 0x0e
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    26c6:	e8 89       	ldd	r30, Y+16	; 0x10
    26c8:	f9 89       	ldd	r31, Y+17	; 0x11
    26ca:	80 81       	ld	r24, Z
    26cc:	91 81       	ldd	r25, Z+1	; 0x01
    26ce:	9f 83       	std	Y+7, r25	; 0x07
    26d0:	8e 83       	std	Y+6, r24	; 0x06
			xMatchFound = pdFALSE;
    26d2:	19 82       	std	Y+1, r1	; 0x01

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
    26d4:	8e 81       	ldd	r24, Y+6	; 0x06
    26d6:	9f 81       	ldd	r25, Y+7	; 0x07
    26d8:	80 70       	andi	r24, 0x00	; 0
    26da:	9d 83       	std	Y+5, r25	; 0x05
    26dc:	8c 83       	std	Y+4, r24	; 0x04
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    26de:	8e 81       	ldd	r24, Y+6	; 0x06
    26e0:	9f 81       	ldd	r25, Y+7	; 0x07
    26e2:	90 70       	andi	r25, 0x00	; 0
    26e4:	9f 83       	std	Y+7, r25	; 0x07
    26e6:	8e 83       	std	Y+6, r24	; 0x06

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    26e8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ea:	9d 81       	ldd	r25, Y+5	; 0x05
    26ec:	80 70       	andi	r24, 0x00	; 0
    26ee:	94 70       	andi	r25, 0x04	; 4
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	69 f4       	brne	.+26     	; 0x270e <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    26f4:	ea 81       	ldd	r30, Y+2	; 0x02
    26f6:	fb 81       	ldd	r31, Y+3	; 0x03
    26f8:	20 81       	ld	r18, Z
    26fa:	31 81       	ldd	r19, Z+1	; 0x01
    26fc:	8e 81       	ldd	r24, Y+6	; 0x06
    26fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2700:	82 23       	and	r24, r18
    2702:	93 23       	and	r25, r19
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	91 f0       	breq	.+36     	; 0x272c <xEventGroupSetBits+0xda>
				{
					xMatchFound = pdTRUE;
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	89 83       	std	Y+1, r24	; 0x01
    270c:	0f c0       	rjmp	.+30     	; 0x272c <xEventGroupSetBits+0xda>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    270e:	ea 81       	ldd	r30, Y+2	; 0x02
    2710:	fb 81       	ldd	r31, Y+3	; 0x03
    2712:	20 81       	ld	r18, Z
    2714:	31 81       	ldd	r19, Z+1	; 0x01
    2716:	8e 81       	ldd	r24, Y+6	; 0x06
    2718:	9f 81       	ldd	r25, Y+7	; 0x07
    271a:	28 23       	and	r18, r24
    271c:	39 23       	and	r19, r25
    271e:	8e 81       	ldd	r24, Y+6	; 0x06
    2720:	9f 81       	ldd	r25, Y+7	; 0x07
    2722:	28 17       	cp	r18, r24
    2724:	39 07       	cpc	r19, r25
    2726:	11 f4       	brne	.+4      	; 0x272c <xEventGroupSetBits+0xda>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	88 23       	and	r24, r24
    2730:	c9 f0       	breq	.+50     	; 0x2764 <xEventGroupSetBits+0x112>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    2732:	8c 81       	ldd	r24, Y+4	; 0x04
    2734:	9d 81       	ldd	r25, Y+5	; 0x05
    2736:	80 70       	andi	r24, 0x00	; 0
    2738:	91 70       	andi	r25, 0x01	; 1
    273a:	00 97       	sbiw	r24, 0x00	; 0
    273c:	41 f0       	breq	.+16     	; 0x274e <xEventGroupSetBits+0xfc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
    273e:	88 85       	ldd	r24, Y+8	; 0x08
    2740:	99 85       	ldd	r25, Y+9	; 0x09
    2742:	2e 81       	ldd	r18, Y+6	; 0x06
    2744:	3f 81       	ldd	r19, Y+7	; 0x07
    2746:	82 2b       	or	r24, r18
    2748:	93 2b       	or	r25, r19
    274a:	99 87       	std	Y+9, r25	; 0x09
    274c:	88 87       	std	Y+8, r24	; 0x08
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    274e:	ea 81       	ldd	r30, Y+2	; 0x02
    2750:	fb 81       	ldd	r31, Y+3	; 0x03
    2752:	80 81       	ld	r24, Z
    2754:	91 81       	ldd	r25, Z+1	; 0x01
    2756:	9c 01       	movw	r18, r24
    2758:	32 60       	ori	r19, 0x02	; 2
    275a:	88 89       	ldd	r24, Y+16	; 0x10
    275c:	99 89       	ldd	r25, Y+17	; 0x11
    275e:	b9 01       	movw	r22, r18
    2760:	0e 94 55 2b 	call	0x56aa	; 0x56aa <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
    2764:	8e 85       	ldd	r24, Y+14	; 0x0e
    2766:	9f 85       	ldd	r25, Y+15	; 0x0f
    2768:	99 8b       	std	Y+17, r25	; 0x11
    276a:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
    276c:	28 89       	ldd	r18, Y+16	; 0x10
    276e:	39 89       	ldd	r19, Y+17	; 0x11
    2770:	8c 85       	ldd	r24, Y+12	; 0x0c
    2772:	9d 85       	ldd	r25, Y+13	; 0x0d
    2774:	28 17       	cp	r18, r24
    2776:	39 07       	cpc	r19, r25
    2778:	09 f0       	breq	.+2      	; 0x277c <xEventGroupSetBits+0x12a>
    277a:	9f cf       	rjmp	.-194    	; 0x26ba <xEventGroupSetBits+0x68>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    277c:	ea 81       	ldd	r30, Y+2	; 0x02
    277e:	fb 81       	ldd	r31, Y+3	; 0x03
    2780:	20 81       	ld	r18, Z
    2782:	31 81       	ldd	r19, Z+1	; 0x01
    2784:	88 85       	ldd	r24, Y+8	; 0x08
    2786:	99 85       	ldd	r25, Y+9	; 0x09
    2788:	80 95       	com	r24
    278a:	90 95       	com	r25
    278c:	82 23       	and	r24, r18
    278e:	93 23       	and	r25, r19
    2790:	ea 81       	ldd	r30, Y+2	; 0x02
    2792:	fb 81       	ldd	r31, Y+3	; 0x03
    2794:	91 83       	std	Z+1, r25	; 0x01
    2796:	80 83       	st	Z, r24
	}
	( void ) xTaskResumeAll();
    2798:	0e 94 6f 28 	call	0x50de	; 0x50de <xTaskResumeAll>

	return pxEventBits->uxEventBits;
    279c:	ea 81       	ldd	r30, Y+2	; 0x02
    279e:	fb 81       	ldd	r31, Y+3	; 0x03
    27a0:	80 81       	ld	r24, Z
    27a2:	91 81       	ldd	r25, Z+1	; 0x01
}
    27a4:	65 96       	adiw	r28, 0x15	; 21
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	00 d0       	rcall	.+0      	; 0x27bc <vEventGroupDelete+0x6>
    27bc:	00 d0       	rcall	.+0      	; 0x27be <vEventGroupDelete+0x8>
    27be:	00 d0       	rcall	.+0      	; 0x27c0 <vEventGroupDelete+0xa>
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
    27c4:	9e 83       	std	Y+6, r25	; 0x06
    27c6:	8d 83       	std	Y+5, r24	; 0x05
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    27c8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ca:	9e 81       	ldd	r25, Y+6	; 0x06
    27cc:	9c 83       	std	Y+4, r25	; 0x04
    27ce:	8b 83       	std	Y+3, r24	; 0x03
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	9c 81       	ldd	r25, Y+4	; 0x04
    27d4:	02 96       	adiw	r24, 0x02	; 2
    27d6:	9a 83       	std	Y+2, r25	; 0x02
    27d8:	89 83       	std	Y+1, r24	; 0x01

	vTaskSuspendAll();
    27da:	0e 94 63 28 	call	0x50c6	; 0x50c6 <vTaskSuspendAll>
    27de:	08 c0       	rjmp	.+16     	; 0x27f0 <vEventGroupDelete+0x3a>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
    27e0:	e9 81       	ldd	r30, Y+1	; 0x01
    27e2:	fa 81       	ldd	r31, Y+2	; 0x02
    27e4:	85 81       	ldd	r24, Z+5	; 0x05
    27e6:	96 81       	ldd	r25, Z+6	; 0x06
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	72 e0       	ldi	r23, 0x02	; 2
    27ec:	0e 94 55 2b 	call	0x56aa	; 0x56aa <xTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    27f0:	e9 81       	ldd	r30, Y+1	; 0x01
    27f2:	fa 81       	ldd	r31, Y+2	; 0x02
    27f4:	80 81       	ld	r24, Z
    27f6:	88 23       	and	r24, r24
    27f8:	99 f7       	brne	.-26     	; 0x27e0 <vEventGroupDelete+0x2a>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
    27fa:	8b 81       	ldd	r24, Y+3	; 0x03
    27fc:	9c 81       	ldd	r25, Y+4	; 0x04
    27fe:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
    2802:	0e 94 6f 28 	call	0x50de	; 0x50de <xTaskResumeAll>
}
    2806:	26 96       	adiw	r28, 0x06	; 6
    2808:	0f b6       	in	r0, 0x3f	; 63
    280a:	f8 94       	cli
    280c:	de bf       	out	0x3e, r29	; 62
    280e:	0f be       	out	0x3f, r0	; 63
    2810:	cd bf       	out	0x3d, r28	; 61
    2812:	cf 91       	pop	r28
    2814:	df 91       	pop	r29
    2816:	08 95       	ret

00002818 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
    2818:	df 93       	push	r29
    281a:	cf 93       	push	r28
    281c:	00 d0       	rcall	.+0      	; 0x281e <vEventGroupSetBitsCallback+0x6>
    281e:	00 d0       	rcall	.+0      	; 0x2820 <vEventGroupSetBitsCallback+0x8>
    2820:	00 d0       	rcall	.+0      	; 0x2822 <vEventGroupSetBitsCallback+0xa>
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	9a 83       	std	Y+2, r25	; 0x02
    2828:	89 83       	std	Y+1, r24	; 0x01
    282a:	4b 83       	std	Y+3, r20	; 0x03
    282c:	5c 83       	std	Y+4, r21	; 0x04
    282e:	6d 83       	std	Y+5, r22	; 0x05
    2830:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
    2832:	2b 81       	ldd	r18, Y+3	; 0x03
    2834:	3c 81       	ldd	r19, Y+4	; 0x04
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	9a 81       	ldd	r25, Y+2	; 0x02
    283a:	b9 01       	movw	r22, r18
    283c:	0e 94 29 13 	call	0x2652	; 0x2652 <xEventGroupSetBits>
}
    2840:	26 96       	adiw	r28, 0x06	; 6
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	de bf       	out	0x3e, r29	; 62
    2848:	0f be       	out	0x3f, r0	; 63
    284a:	cd bf       	out	0x3d, r28	; 61
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	00 d0       	rcall	.+0      	; 0x2858 <vEventGroupClearBitsCallback+0x6>
    2858:	00 d0       	rcall	.+0      	; 0x285a <vEventGroupClearBitsCallback+0x8>
    285a:	00 d0       	rcall	.+0      	; 0x285c <vEventGroupClearBitsCallback+0xa>
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	9a 83       	std	Y+2, r25	; 0x02
    2862:	89 83       	std	Y+1, r24	; 0x01
    2864:	4b 83       	std	Y+3, r20	; 0x03
    2866:	5c 83       	std	Y+4, r21	; 0x04
    2868:	6d 83       	std	Y+5, r22	; 0x05
    286a:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
    286c:	2b 81       	ldd	r18, Y+3	; 0x03
    286e:	3c 81       	ldd	r19, Y+4	; 0x04
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	9a 81       	ldd	r25, Y+2	; 0x02
    2874:	b9 01       	movw	r22, r18
    2876:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <xEventGroupClearBits>
}
    287a:	26 96       	adiw	r28, 0x06	; 6
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	f8 94       	cli
    2880:	de bf       	out	0x3e, r29	; 62
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	cd bf       	out	0x3d, r28	; 61
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	08 95       	ret

0000288c <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
    288c:	df 93       	push	r29
    288e:	cf 93       	push	r28
    2890:	00 d0       	rcall	.+0      	; 0x2892 <prvTestWaitCondition+0x6>
    2892:	00 d0       	rcall	.+0      	; 0x2894 <prvTestWaitCondition+0x8>
    2894:	00 d0       	rcall	.+0      	; 0x2896 <prvTestWaitCondition+0xa>
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
    289a:	9b 83       	std	Y+3, r25	; 0x03
    289c:	8a 83       	std	Y+2, r24	; 0x02
    289e:	7d 83       	std	Y+5, r23	; 0x05
    28a0:	6c 83       	std	Y+4, r22	; 0x04
    28a2:	4e 83       	std	Y+6, r20	; 0x06
BaseType_t xWaitConditionMet = pdFALSE;
    28a4:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
    28a6:	8e 81       	ldd	r24, Y+6	; 0x06
    28a8:	88 23       	and	r24, r24
    28aa:	59 f4       	brne	.+22     	; 0x28c2 <prvTestWaitCondition+0x36>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    28ac:	8a 81       	ldd	r24, Y+2	; 0x02
    28ae:	9b 81       	ldd	r25, Y+3	; 0x03
    28b0:	2c 81       	ldd	r18, Y+4	; 0x04
    28b2:	3d 81       	ldd	r19, Y+5	; 0x05
    28b4:	82 23       	and	r24, r18
    28b6:	93 23       	and	r25, r19
    28b8:	00 97       	sbiw	r24, 0x00	; 0
    28ba:	81 f0       	breq	.+32     	; 0x28dc <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	89 83       	std	Y+1, r24	; 0x01
    28c0:	0d c0       	rjmp	.+26     	; 0x28dc <prvTestWaitCondition+0x50>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    28c2:	2a 81       	ldd	r18, Y+2	; 0x02
    28c4:	3b 81       	ldd	r19, Y+3	; 0x03
    28c6:	8c 81       	ldd	r24, Y+4	; 0x04
    28c8:	9d 81       	ldd	r25, Y+5	; 0x05
    28ca:	28 23       	and	r18, r24
    28cc:	39 23       	and	r19, r25
    28ce:	8c 81       	ldd	r24, Y+4	; 0x04
    28d0:	9d 81       	ldd	r25, Y+5	; 0x05
    28d2:	28 17       	cp	r18, r24
    28d4:	39 07       	cpc	r19, r25
    28d6:	11 f4       	brne	.+4      	; 0x28dc <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    28de:	26 96       	adiw	r28, 0x06	; 6
    28e0:	0f b6       	in	r0, 0x3f	; 63
    28e2:	f8 94       	cli
    28e4:	de bf       	out	0x3e, r29	; 62
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	cd bf       	out	0x3d, r28	; 61
    28ea:	cf 91       	pop	r28
    28ec:	df 91       	pop	r29
    28ee:	08 95       	ret

000028f0 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    28f0:	df 93       	push	r29
    28f2:	cf 93       	push	r28
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	2e 97       	sbiw	r28, 0x0e	; 14
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	9e 87       	std	Y+14, r25	; 0x0e
    2906:	8d 87       	std	Y+13, r24	; 0x0d
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    2908:	1e 82       	std	Y+6, r1	; 0x06
    290a:	1d 82       	std	Y+5, r1	; 0x05

	vTaskSuspendAll();
    290c:	0e 94 63 28 	call	0x50c6	; 0x50c6 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    2910:	80 91 86 00 	lds	r24, 0x0086
    2914:	88 23       	and	r24, r24
    2916:	29 f4       	brne	.+10     	; 0x2922 <pvPortMalloc+0x32>
		{
			prvHeapInit();
    2918:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	80 93 86 00 	sts	0x0086, r24
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    2922:	8d 85       	ldd	r24, Y+13	; 0x0d
    2924:	9e 85       	ldd	r25, Y+14	; 0x0e
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	51 f0       	breq	.+20     	; 0x293e <pvPortMalloc+0x4e>
		{
			xWantedSize += heapSTRUCT_SIZE;
    292a:	80 91 73 00 	lds	r24, 0x0073
    292e:	90 91 74 00 	lds	r25, 0x0074
    2932:	2d 85       	ldd	r18, Y+13	; 0x0d
    2934:	3e 85       	ldd	r19, Y+14	; 0x0e
    2936:	82 0f       	add	r24, r18
    2938:	93 1f       	adc	r25, r19
    293a:	9e 87       	std	Y+14, r25	; 0x0e
    293c:	8d 87       	std	Y+13, r24	; 0x0d
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    293e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2940:	9e 85       	ldd	r25, Y+14	; 0x0e
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	09 f4       	brne	.+2      	; 0x2948 <pvPortMalloc+0x58>
    2946:	af c0       	rjmp	.+350    	; 0x2aa6 <pvPortMalloc+0x1b6>
    2948:	8d 85       	ldd	r24, Y+13	; 0x0d
    294a:	9e 85       	ldd	r25, Y+14	; 0x0e
    294c:	23 e0       	ldi	r18, 0x03	; 3
    294e:	8f 31       	cpi	r24, 0x1F	; 31
    2950:	92 07       	cpc	r25, r18
    2952:	08 f0       	brcs	.+2      	; 0x2956 <pvPortMalloc+0x66>
    2954:	a8 c0       	rjmp	.+336    	; 0x2aa6 <pvPortMalloc+0x1b6>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    2956:	87 ea       	ldi	r24, 0xA7	; 167
    2958:	93 e0       	ldi	r25, 0x03	; 3
    295a:	9a 87       	std	Y+10, r25	; 0x0a
    295c:	89 87       	std	Y+9, r24	; 0x09
			pxBlock = xStart.pxNextFreeBlock;
    295e:	80 91 a7 03 	lds	r24, 0x03A7
    2962:	90 91 a8 03 	lds	r25, 0x03A8
    2966:	9c 87       	std	Y+12, r25	; 0x0c
    2968:	8b 87       	std	Y+11, r24	; 0x0b
    296a:	0a c0       	rjmp	.+20     	; 0x2980 <pvPortMalloc+0x90>
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
			{
				pxPreviousBlock = pxBlock;
    296c:	8b 85       	ldd	r24, Y+11	; 0x0b
    296e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2970:	9a 87       	std	Y+10, r25	; 0x0a
    2972:	89 87       	std	Y+9, r24	; 0x09
				pxBlock = pxBlock->pxNextFreeBlock;
    2974:	eb 85       	ldd	r30, Y+11	; 0x0b
    2976:	fc 85       	ldd	r31, Y+12	; 0x0c
    2978:	80 81       	ld	r24, Z
    297a:	91 81       	ldd	r25, Z+1	; 0x01
    297c:	9c 87       	std	Y+12, r25	; 0x0c
    297e:	8b 87       	std	Y+11, r24	; 0x0b
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    2980:	eb 85       	ldd	r30, Y+11	; 0x0b
    2982:	fc 85       	ldd	r31, Y+12	; 0x0c
    2984:	22 81       	ldd	r18, Z+2	; 0x02
    2986:	33 81       	ldd	r19, Z+3	; 0x03
    2988:	8d 85       	ldd	r24, Y+13	; 0x0d
    298a:	9e 85       	ldd	r25, Y+14	; 0x0e
    298c:	28 17       	cp	r18, r24
    298e:	39 07       	cpc	r19, r25
    2990:	30 f4       	brcc	.+12     	; 0x299e <pvPortMalloc+0xae>
    2992:	eb 85       	ldd	r30, Y+11	; 0x0b
    2994:	fc 85       	ldd	r31, Y+12	; 0x0c
    2996:	80 81       	ld	r24, Z
    2998:	91 81       	ldd	r25, Z+1	; 0x01
    299a:	00 97       	sbiw	r24, 0x00	; 0
    299c:	39 f7       	brne	.-50     	; 0x296c <pvPortMalloc+0x7c>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    299e:	8b 85       	ldd	r24, Y+11	; 0x0b
    29a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    29a2:	43 e0       	ldi	r20, 0x03	; 3
    29a4:	8b 3a       	cpi	r24, 0xAB	; 171
    29a6:	94 07       	cpc	r25, r20
    29a8:	09 f4       	brne	.+2      	; 0x29ac <pvPortMalloc+0xbc>
    29aa:	7d c0       	rjmp	.+250    	; 0x2aa6 <pvPortMalloc+0x1b6>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    29ac:	e9 85       	ldd	r30, Y+9	; 0x09
    29ae:	fa 85       	ldd	r31, Y+10	; 0x0a
    29b0:	20 81       	ld	r18, Z
    29b2:	31 81       	ldd	r19, Z+1	; 0x01
    29b4:	80 91 73 00 	lds	r24, 0x0073
    29b8:	90 91 74 00 	lds	r25, 0x0074
    29bc:	82 0f       	add	r24, r18
    29be:	93 1f       	adc	r25, r19
    29c0:	9e 83       	std	Y+6, r25	; 0x06
    29c2:	8d 83       	std	Y+5, r24	; 0x05

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    29c4:	eb 85       	ldd	r30, Y+11	; 0x0b
    29c6:	fc 85       	ldd	r31, Y+12	; 0x0c
    29c8:	80 81       	ld	r24, Z
    29ca:	91 81       	ldd	r25, Z+1	; 0x01
    29cc:	e9 85       	ldd	r30, Y+9	; 0x09
    29ce:	fa 85       	ldd	r31, Y+10	; 0x0a
    29d0:	91 83       	std	Z+1, r25	; 0x01
    29d2:	80 83       	st	Z, r24

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    29d4:	eb 85       	ldd	r30, Y+11	; 0x0b
    29d6:	fc 85       	ldd	r31, Y+12	; 0x0c
    29d8:	22 81       	ldd	r18, Z+2	; 0x02
    29da:	33 81       	ldd	r19, Z+3	; 0x03
    29dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    29de:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e0:	28 1b       	sub	r18, r24
    29e2:	39 0b       	sbc	r19, r25
    29e4:	80 91 73 00 	lds	r24, 0x0073
    29e8:	90 91 74 00 	lds	r25, 0x0074
    29ec:	88 0f       	add	r24, r24
    29ee:	99 1f       	adc	r25, r25
    29f0:	82 17       	cp	r24, r18
    29f2:	93 07       	cpc	r25, r19
    29f4:	08 f0       	brcs	.+2      	; 0x29f8 <pvPortMalloc+0x108>
    29f6:	47 c0       	rjmp	.+142    	; 0x2a86 <pvPortMalloc+0x196>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    29f8:	2b 85       	ldd	r18, Y+11	; 0x0b
    29fa:	3c 85       	ldd	r19, Y+12	; 0x0c
    29fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    29fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a00:	82 0f       	add	r24, r18
    2a02:	93 1f       	adc	r25, r19
    2a04:	98 87       	std	Y+8, r25	; 0x08
    2a06:	8f 83       	std	Y+7, r24	; 0x07

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    2a08:	eb 85       	ldd	r30, Y+11	; 0x0b
    2a0a:	fc 85       	ldd	r31, Y+12	; 0x0c
    2a0c:	22 81       	ldd	r18, Z+2	; 0x02
    2a0e:	33 81       	ldd	r19, Z+3	; 0x03
    2a10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a14:	a9 01       	movw	r20, r18
    2a16:	48 1b       	sub	r20, r24
    2a18:	59 0b       	sbc	r21, r25
    2a1a:	ca 01       	movw	r24, r20
    2a1c:	ef 81       	ldd	r30, Y+7	; 0x07
    2a1e:	f8 85       	ldd	r31, Y+8	; 0x08
    2a20:	93 83       	std	Z+3, r25	; 0x03
    2a22:	82 83       	std	Z+2, r24	; 0x02
					pxBlock->xBlockSize = xWantedSize;
    2a24:	eb 85       	ldd	r30, Y+11	; 0x0b
    2a26:	fc 85       	ldd	r31, Y+12	; 0x0c
    2a28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a2c:	93 83       	std	Z+3, r25	; 0x03
    2a2e:	82 83       	std	Z+2, r24	; 0x02

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    2a30:	ef 81       	ldd	r30, Y+7	; 0x07
    2a32:	f8 85       	ldd	r31, Y+8	; 0x08
    2a34:	82 81       	ldd	r24, Z+2	; 0x02
    2a36:	93 81       	ldd	r25, Z+3	; 0x03
    2a38:	9a 83       	std	Y+2, r25	; 0x02
    2a3a:	89 83       	std	Y+1, r24	; 0x01
    2a3c:	87 ea       	ldi	r24, 0xA7	; 167
    2a3e:	93 e0       	ldi	r25, 0x03	; 3
    2a40:	9c 83       	std	Y+4, r25	; 0x04
    2a42:	8b 83       	std	Y+3, r24	; 0x03
    2a44:	06 c0       	rjmp	.+12     	; 0x2a52 <pvPortMalloc+0x162>
    2a46:	eb 81       	ldd	r30, Y+3	; 0x03
    2a48:	fc 81       	ldd	r31, Y+4	; 0x04
    2a4a:	80 81       	ld	r24, Z
    2a4c:	91 81       	ldd	r25, Z+1	; 0x01
    2a4e:	9c 83       	std	Y+4, r25	; 0x04
    2a50:	8b 83       	std	Y+3, r24	; 0x03
    2a52:	eb 81       	ldd	r30, Y+3	; 0x03
    2a54:	fc 81       	ldd	r31, Y+4	; 0x04
    2a56:	01 90       	ld	r0, Z+
    2a58:	f0 81       	ld	r31, Z
    2a5a:	e0 2d       	mov	r30, r0
    2a5c:	22 81       	ldd	r18, Z+2	; 0x02
    2a5e:	33 81       	ldd	r19, Z+3	; 0x03
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	9a 81       	ldd	r25, Y+2	; 0x02
    2a64:	28 17       	cp	r18, r24
    2a66:	39 07       	cpc	r19, r25
    2a68:	70 f3       	brcs	.-36     	; 0x2a46 <pvPortMalloc+0x156>
    2a6a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a6c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a6e:	80 81       	ld	r24, Z
    2a70:	91 81       	ldd	r25, Z+1	; 0x01
    2a72:	ef 81       	ldd	r30, Y+7	; 0x07
    2a74:	f8 85       	ldd	r31, Y+8	; 0x08
    2a76:	91 83       	std	Z+1, r25	; 0x01
    2a78:	80 83       	st	Z, r24
    2a7a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a7c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a7e:	8f 81       	ldd	r24, Y+7	; 0x07
    2a80:	98 85       	ldd	r25, Y+8	; 0x08
    2a82:	91 83       	std	Z+1, r25	; 0x01
    2a84:	80 83       	st	Z, r24
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
    2a86:	20 91 71 00 	lds	r18, 0x0071
    2a8a:	30 91 72 00 	lds	r19, 0x0072
    2a8e:	eb 85       	ldd	r30, Y+11	; 0x0b
    2a90:	fc 85       	ldd	r31, Y+12	; 0x0c
    2a92:	82 81       	ldd	r24, Z+2	; 0x02
    2a94:	93 81       	ldd	r25, Z+3	; 0x03
    2a96:	a9 01       	movw	r20, r18
    2a98:	48 1b       	sub	r20, r24
    2a9a:	59 0b       	sbc	r21, r25
    2a9c:	ca 01       	movw	r24, r20
    2a9e:	90 93 72 00 	sts	0x0072, r25
    2aa2:	80 93 71 00 	sts	0x0071, r24
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    2aa6:	0e 94 6f 28 	call	0x50de	; 0x50de <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    2aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    2aac:	9e 81       	ldd	r25, Y+6	; 0x06
}
    2aae:	2e 96       	adiw	r28, 0x0e	; 14
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	f8 94       	cli
    2ab4:	de bf       	out	0x3e, r29	; 62
    2ab6:	0f be       	out	0x3f, r0	; 63
    2ab8:	cd bf       	out	0x3d, r28	; 61
    2aba:	cf 91       	pop	r28
    2abc:	df 91       	pop	r29
    2abe:	08 95       	ret

00002ac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    2ac0:	df 93       	push	r29
    2ac2:	cf 93       	push	r28
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
    2ac8:	2a 97       	sbiw	r28, 0x0a	; 10
    2aca:	0f b6       	in	r0, 0x3f	; 63
    2acc:	f8 94       	cli
    2ace:	de bf       	out	0x3e, r29	; 62
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	cd bf       	out	0x3d, r28	; 61
    2ad4:	9a 87       	std	Y+10, r25	; 0x0a
    2ad6:	89 87       	std	Y+9, r24	; 0x09
uint8_t *puc = ( uint8_t * ) pv;
    2ad8:	89 85       	ldd	r24, Y+9	; 0x09
    2ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    2adc:	98 87       	std	Y+8, r25	; 0x08
    2ade:	8f 83       	std	Y+7, r24	; 0x07
BlockLink_t *pxLink;

	if( pv != NULL )
    2ae0:	89 85       	ldd	r24, Y+9	; 0x09
    2ae2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae4:	00 97       	sbiw	r24, 0x00	; 0
    2ae6:	09 f4       	brne	.+2      	; 0x2aea <vPortFree+0x2a>
    2ae8:	4f c0       	rjmp	.+158    	; 0x2b88 <vPortFree+0xc8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    2aea:	80 91 73 00 	lds	r24, 0x0073
    2aee:	90 91 74 00 	lds	r25, 0x0074
    2af2:	22 27       	eor	r18, r18
    2af4:	33 27       	eor	r19, r19
    2af6:	28 1b       	sub	r18, r24
    2af8:	39 0b       	sbc	r19, r25
    2afa:	8f 81       	ldd	r24, Y+7	; 0x07
    2afc:	98 85       	ldd	r25, Y+8	; 0x08
    2afe:	82 0f       	add	r24, r18
    2b00:	93 1f       	adc	r25, r19
    2b02:	98 87       	std	Y+8, r25	; 0x08
    2b04:	8f 83       	std	Y+7, r24	; 0x07

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
    2b06:	8f 81       	ldd	r24, Y+7	; 0x07
    2b08:	98 85       	ldd	r25, Y+8	; 0x08
    2b0a:	9e 83       	std	Y+6, r25	; 0x06
    2b0c:	8d 83       	std	Y+5, r24	; 0x05

		vTaskSuspendAll();
    2b0e:	0e 94 63 28 	call	0x50c6	; 0x50c6 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    2b12:	ed 81       	ldd	r30, Y+5	; 0x05
    2b14:	fe 81       	ldd	r31, Y+6	; 0x06
    2b16:	82 81       	ldd	r24, Z+2	; 0x02
    2b18:	93 81       	ldd	r25, Z+3	; 0x03
    2b1a:	9a 83       	std	Y+2, r25	; 0x02
    2b1c:	89 83       	std	Y+1, r24	; 0x01
    2b1e:	87 ea       	ldi	r24, 0xA7	; 167
    2b20:	93 e0       	ldi	r25, 0x03	; 3
    2b22:	9c 83       	std	Y+4, r25	; 0x04
    2b24:	8b 83       	std	Y+3, r24	; 0x03
    2b26:	06 c0       	rjmp	.+12     	; 0x2b34 <vPortFree+0x74>
    2b28:	eb 81       	ldd	r30, Y+3	; 0x03
    2b2a:	fc 81       	ldd	r31, Y+4	; 0x04
    2b2c:	80 81       	ld	r24, Z
    2b2e:	91 81       	ldd	r25, Z+1	; 0x01
    2b30:	9c 83       	std	Y+4, r25	; 0x04
    2b32:	8b 83       	std	Y+3, r24	; 0x03
    2b34:	eb 81       	ldd	r30, Y+3	; 0x03
    2b36:	fc 81       	ldd	r31, Y+4	; 0x04
    2b38:	01 90       	ld	r0, Z+
    2b3a:	f0 81       	ld	r31, Z
    2b3c:	e0 2d       	mov	r30, r0
    2b3e:	22 81       	ldd	r18, Z+2	; 0x02
    2b40:	33 81       	ldd	r19, Z+3	; 0x03
    2b42:	89 81       	ldd	r24, Y+1	; 0x01
    2b44:	9a 81       	ldd	r25, Y+2	; 0x02
    2b46:	28 17       	cp	r18, r24
    2b48:	39 07       	cpc	r19, r25
    2b4a:	70 f3       	brcs	.-36     	; 0x2b28 <vPortFree+0x68>
    2b4c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b4e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b50:	80 81       	ld	r24, Z
    2b52:	91 81       	ldd	r25, Z+1	; 0x01
    2b54:	ed 81       	ldd	r30, Y+5	; 0x05
    2b56:	fe 81       	ldd	r31, Y+6	; 0x06
    2b58:	91 83       	std	Z+1, r25	; 0x01
    2b5a:	80 83       	st	Z, r24
    2b5c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b5e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b60:	8d 81       	ldd	r24, Y+5	; 0x05
    2b62:	9e 81       	ldd	r25, Y+6	; 0x06
    2b64:	91 83       	std	Z+1, r25	; 0x01
    2b66:	80 83       	st	Z, r24
			xFreeBytesRemaining += pxLink->xBlockSize;
    2b68:	ed 81       	ldd	r30, Y+5	; 0x05
    2b6a:	fe 81       	ldd	r31, Y+6	; 0x06
    2b6c:	22 81       	ldd	r18, Z+2	; 0x02
    2b6e:	33 81       	ldd	r19, Z+3	; 0x03
    2b70:	80 91 71 00 	lds	r24, 0x0071
    2b74:	90 91 72 00 	lds	r25, 0x0072
    2b78:	82 0f       	add	r24, r18
    2b7a:	93 1f       	adc	r25, r19
    2b7c:	90 93 72 00 	sts	0x0072, r25
    2b80:	80 93 71 00 	sts	0x0071, r24
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
    2b84:	0e 94 6f 28 	call	0x50de	; 0x50de <xTaskResumeAll>
	}
}
    2b88:	2a 96       	adiw	r28, 0x0a	; 10
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	f8 94       	cli
    2b8e:	de bf       	out	0x3e, r29	; 62
    2b90:	0f be       	out	0x3f, r0	; 63
    2b92:	cd bf       	out	0x3d, r28	; 61
    2b94:	cf 91       	pop	r28
    2b96:	df 91       	pop	r29
    2b98:	08 95       	ret

00002b9a <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    2b9a:	df 93       	push	r29
    2b9c:	cf 93       	push	r28
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
	return xFreeBytesRemaining;
    2ba2:	80 91 71 00 	lds	r24, 0x0071
    2ba6:	90 91 72 00 	lds	r25, 0x0072
}
    2baa:	cf 91       	pop	r28
    2bac:	df 91       	pop	r29
    2bae:	08 95       	ret

00002bb0 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    2bb0:	df 93       	push	r29
    2bb2:	cf 93       	push	r28
    2bb4:	cd b7       	in	r28, 0x3d	; 61
    2bb6:	de b7       	in	r29, 0x3e	; 62
	/* This just exists to keep the linker quiet. */
}
    2bb8:	cf 91       	pop	r28
    2bba:	df 91       	pop	r29
    2bbc:	08 95       	ret

00002bbe <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    2bbe:	df 93       	push	r29
    2bc0:	cf 93       	push	r28
    2bc2:	00 d0       	rcall	.+0      	; 0x2bc4 <prvHeapInit+0x6>
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <prvHeapInit+0x8>
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    2bca:	88 e8       	ldi	r24, 0x88	; 136
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	9a 83       	std	Y+2, r25	; 0x02
    2bd0:	89 83       	std	Y+1, r24	; 0x01

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd6:	90 93 a8 03 	sts	0x03A8, r25
    2bda:	80 93 a7 03 	sts	0x03A7, r24
	xStart.xBlockSize = ( size_t ) 0;
    2bde:	10 92 aa 03 	sts	0x03AA, r1
    2be2:	10 92 a9 03 	sts	0x03A9, r1

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    2be6:	8f e1       	ldi	r24, 0x1F	; 31
    2be8:	93 e0       	ldi	r25, 0x03	; 3
    2bea:	90 93 ae 03 	sts	0x03AE, r25
    2bee:	80 93 ad 03 	sts	0x03AD, r24
	xEnd.pxNextFreeBlock = NULL;
    2bf2:	10 92 ac 03 	sts	0x03AC, r1
    2bf6:	10 92 ab 03 	sts	0x03AB, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfe:	9c 83       	std	Y+4, r25	; 0x04
    2c00:	8b 83       	std	Y+3, r24	; 0x03
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    2c02:	eb 81       	ldd	r30, Y+3	; 0x03
    2c04:	fc 81       	ldd	r31, Y+4	; 0x04
    2c06:	8f e1       	ldi	r24, 0x1F	; 31
    2c08:	93 e0       	ldi	r25, 0x03	; 3
    2c0a:	93 83       	std	Z+3, r25	; 0x03
    2c0c:	82 83       	std	Z+2, r24	; 0x02
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    2c0e:	eb 81       	ldd	r30, Y+3	; 0x03
    2c10:	fc 81       	ldd	r31, Y+4	; 0x04
    2c12:	8b ea       	ldi	r24, 0xAB	; 171
    2c14:	93 e0       	ldi	r25, 0x03	; 3
    2c16:	91 83       	std	Z+1, r25	; 0x01
    2c18:	80 83       	st	Z, r24
}
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <keypad_vInit>:
 * Created: 2/24/2018 4:06:22 PM
 *  Author: Mohamed Zaghlol
 */ 
 #include "keypad_driver.h"
 void keypad_vInit()
 {
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
	 DIO_vsetPINDir('D',0,1);
    2c30:	84 e4       	ldi	r24, 0x44	; 68
    2c32:	60 e0       	ldi	r22, 0x00	; 0
    2c34:	41 e0       	ldi	r20, 0x01	; 1
    2c36:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',1,1);
    2c3a:	84 e4       	ldi	r24, 0x44	; 68
    2c3c:	61 e0       	ldi	r22, 0x01	; 1
    2c3e:	41 e0       	ldi	r20, 0x01	; 1
    2c40:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',2,1);
    2c44:	84 e4       	ldi	r24, 0x44	; 68
    2c46:	62 e0       	ldi	r22, 0x02	; 2
    2c48:	41 e0       	ldi	r20, 0x01	; 1
    2c4a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',3,1);
    2c4e:	84 e4       	ldi	r24, 0x44	; 68
    2c50:	63 e0       	ldi	r22, 0x03	; 3
    2c52:	41 e0       	ldi	r20, 0x01	; 1
    2c54:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',4,0);
    2c58:	84 e4       	ldi	r24, 0x44	; 68
    2c5a:	64 e0       	ldi	r22, 0x04	; 4
    2c5c:	40 e0       	ldi	r20, 0x00	; 0
    2c5e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',5,0);
    2c62:	84 e4       	ldi	r24, 0x44	; 68
    2c64:	65 e0       	ldi	r22, 0x05	; 5
    2c66:	40 e0       	ldi	r20, 0x00	; 0
    2c68:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',6,0);
    2c6c:	84 e4       	ldi	r24, 0x44	; 68
    2c6e:	66 e0       	ldi	r22, 0x06	; 6
    2c70:	40 e0       	ldi	r20, 0x00	; 0
    2c72:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',7,0);
    2c76:	84 e4       	ldi	r24, 0x44	; 68
    2c78:	67 e0       	ldi	r22, 0x07	; 7
    2c7a:	40 e0       	ldi	r20, 0x00	; 0
    2c7c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	 DIO_vconnectpullup('D',4,1);
    2c80:	84 e4       	ldi	r24, 0x44	; 68
    2c82:	64 e0       	ldi	r22, 0x04	; 4
    2c84:	41 e0       	ldi	r20, 0x01	; 1
    2c86:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',5,1);
    2c8a:	84 e4       	ldi	r24, 0x44	; 68
    2c8c:	65 e0       	ldi	r22, 0x05	; 5
    2c8e:	41 e0       	ldi	r20, 0x01	; 1
    2c90:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',6,1);
    2c94:	84 e4       	ldi	r24, 0x44	; 68
    2c96:	66 e0       	ldi	r22, 0x06	; 6
    2c98:	41 e0       	ldi	r20, 0x01	; 1
    2c9a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',7,1);
    2c9e:	84 e4       	ldi	r24, 0x44	; 68
    2ca0:	67 e0       	ldi	r22, 0x07	; 7
    2ca2:	41 e0       	ldi	r20, 0x01	; 1
    2ca4:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_vconnectpullup>
	  
 }
    2ca8:	cf 91       	pop	r28
    2caa:	df 91       	pop	r29
    2cac:	08 95       	ret

00002cae <keypad_u8check_press>:
 char keypad_u8check_press()
 {
    2cae:	df 93       	push	r29
    2cb0:	cf 93       	push	r28
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
    2cb6:	69 97       	sbiw	r28, 0x19	; 25
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	f8 94       	cli
    2cbc:	de bf       	out	0x3e, r29	; 62
    2cbe:	0f be       	out	0x3f, r0	; 63
    2cc0:	cd bf       	out	0x3d, r28	; 61
	 char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
    2cc2:	ce 01       	movw	r24, r28
    2cc4:	05 96       	adiw	r24, 0x05	; 5
    2cc6:	9e 8b       	std	Y+22, r25	; 0x16
    2cc8:	8d 8b       	std	Y+21, r24	; 0x15
    2cca:	e5 e7       	ldi	r30, 0x75	; 117
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	f8 8f       	std	Y+24, r31	; 0x18
    2cd0:	ef 8b       	std	Y+23, r30	; 0x17
    2cd2:	f0 e1       	ldi	r31, 0x10	; 16
    2cd4:	f9 8f       	std	Y+25, r31	; 0x19
    2cd6:	ef 89       	ldd	r30, Y+23	; 0x17
    2cd8:	f8 8d       	ldd	r31, Y+24	; 0x18
    2cda:	00 80       	ld	r0, Z
    2cdc:	8f 89       	ldd	r24, Y+23	; 0x17
    2cde:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce0:	01 96       	adiw	r24, 0x01	; 1
    2ce2:	98 8f       	std	Y+24, r25	; 0x18
    2ce4:	8f 8b       	std	Y+23, r24	; 0x17
    2ce6:	ed 89       	ldd	r30, Y+21	; 0x15
    2ce8:	fe 89       	ldd	r31, Y+22	; 0x16
    2cea:	00 82       	st	Z, r0
    2cec:	8d 89       	ldd	r24, Y+21	; 0x15
    2cee:	9e 89       	ldd	r25, Y+22	; 0x16
    2cf0:	01 96       	adiw	r24, 0x01	; 1
    2cf2:	9e 8b       	std	Y+22, r25	; 0x16
    2cf4:	8d 8b       	std	Y+21, r24	; 0x15
    2cf6:	99 8d       	ldd	r25, Y+25	; 0x19
    2cf8:	91 50       	subi	r25, 0x01	; 1
    2cfa:	99 8f       	std	Y+25, r25	; 0x19
    2cfc:	e9 8d       	ldd	r30, Y+25	; 0x19
    2cfe:	ee 23       	and	r30, r30
    2d00:	51 f7       	brne	.-44     	; 0x2cd6 <keypad_u8check_press+0x28>
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
    2d02:	8f ef       	ldi	r24, 0xFF	; 255
    2d04:	89 83       	std	Y+1, r24	; 0x01
	 for(row=0;row<4;row++)
    2d06:	1c 82       	std	Y+4, r1	; 0x04
    2d08:	47 c0       	rjmp	.+142    	; 0x2d98 <keypad_u8check_press+0xea>
	 {
		DIO_write('D',0,1);
    2d0a:	84 e4       	ldi	r24, 0x44	; 68
    2d0c:	60 e0       	ldi	r22, 0x00	; 0
    2d0e:	41 e0       	ldi	r20, 0x01	; 1
    2d10:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
		DIO_write('D',1,1);
    2d14:	84 e4       	ldi	r24, 0x44	; 68
    2d16:	61 e0       	ldi	r22, 0x01	; 1
    2d18:	41 e0       	ldi	r20, 0x01	; 1
    2d1a:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
		DIO_write('D',2,1);
    2d1e:	84 e4       	ldi	r24, 0x44	; 68
    2d20:	62 e0       	ldi	r22, 0x02	; 2
    2d22:	41 e0       	ldi	r20, 0x01	; 1
    2d24:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
		DIO_write('D',3,1);
    2d28:	84 e4       	ldi	r24, 0x44	; 68
    2d2a:	63 e0       	ldi	r22, 0x03	; 3
    2d2c:	41 e0       	ldi	r20, 0x01	; 1
    2d2e:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
		DIO_write('D',row,0);
    2d32:	84 e4       	ldi	r24, 0x44	; 68
    2d34:	6c 81       	ldd	r22, Y+4	; 0x04
    2d36:	40 e0       	ldi	r20, 0x00	; 0
    2d38:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
	
		for(coloumn=0;coloumn<4;coloumn++)
    2d3c:	1b 82       	std	Y+3, r1	; 0x03
    2d3e:	23 c0       	rjmp	.+70     	; 0x2d86 <keypad_u8check_press+0xd8>
		{
			x=DIO_u8read('D',(coloumn+4));
    2d40:	8b 81       	ldd	r24, Y+3	; 0x03
    2d42:	98 2f       	mov	r25, r24
    2d44:	9c 5f       	subi	r25, 0xFC	; 252
    2d46:	84 e4       	ldi	r24, 0x44	; 68
    2d48:	69 2f       	mov	r22, r25
    2d4a:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8read>
    2d4e:	8a 83       	std	Y+2, r24	; 0x02
			if(x==0)
    2d50:	8a 81       	ldd	r24, Y+2	; 0x02
    2d52:	88 23       	and	r24, r24
    2d54:	a9 f4       	brne	.+42     	; 0x2d80 <keypad_u8check_press+0xd2>
			 {
				 returnval=arr[row][coloumn];
    2d56:	8c 81       	ldd	r24, Y+4	; 0x04
    2d58:	28 2f       	mov	r18, r24
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5e:	48 2f       	mov	r20, r24
    2d60:	50 e0       	ldi	r21, 0x00	; 0
    2d62:	22 0f       	add	r18, r18
    2d64:	33 1f       	adc	r19, r19
    2d66:	22 0f       	add	r18, r18
    2d68:	33 1f       	adc	r19, r19
    2d6a:	ce 01       	movw	r24, r28
    2d6c:	01 96       	adiw	r24, 0x01	; 1
    2d6e:	82 0f       	add	r24, r18
    2d70:	93 1f       	adc	r25, r19
    2d72:	84 0f       	add	r24, r20
    2d74:	95 1f       	adc	r25, r21
    2d76:	fc 01       	movw	r30, r24
    2d78:	34 96       	adiw	r30, 0x04	; 4
    2d7a:	80 81       	ld	r24, Z
    2d7c:	89 83       	std	Y+1, r24	; 0x01
    2d7e:	06 c0       	rjmp	.+12     	; 0x2d8c <keypad_u8check_press+0xde>
		DIO_write('D',1,1);
		DIO_write('D',2,1);
		DIO_write('D',3,1);
		DIO_write('D',row,0);
	
		for(coloumn=0;coloumn<4;coloumn++)
    2d80:	8b 81       	ldd	r24, Y+3	; 0x03
    2d82:	8f 5f       	subi	r24, 0xFF	; 255
    2d84:	8b 83       	std	Y+3, r24	; 0x03
    2d86:	8b 81       	ldd	r24, Y+3	; 0x03
    2d88:	84 30       	cpi	r24, 0x04	; 4
    2d8a:	d0 f2       	brcs	.-76     	; 0x2d40 <keypad_u8check_press+0x92>
			 {
				 returnval=arr[row][coloumn];
				 break;
			 }  
		}	
		if(x==0)
    2d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8e:	88 23       	and	r24, r24
    2d90:	39 f0       	breq	.+14     	; 0x2da0 <keypad_u8check_press+0xf2>
 char keypad_u8check_press()
 {
	 char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
	 for(row=0;row<4;row++)
    2d92:	8c 81       	ldd	r24, Y+4	; 0x04
    2d94:	8f 5f       	subi	r24, 0xFF	; 255
    2d96:	8c 83       	std	Y+4, r24	; 0x04
    2d98:	8c 81       	ldd	r24, Y+4	; 0x04
    2d9a:	84 30       	cpi	r24, 0x04	; 4
    2d9c:	08 f4       	brcc	.+2      	; 0x2da0 <keypad_u8check_press+0xf2>
    2d9e:	b5 cf       	rjmp	.-150    	; 0x2d0a <keypad_u8check_press+0x5c>
		if(x==0)
		{
			break;
		}
	}	 
	 return returnval ;	 
    2da0:	89 81       	ldd	r24, Y+1	; 0x01
    2da2:	69 96       	adiw	r28, 0x19	; 25
    2da4:	0f b6       	in	r0, 0x3f	; 63
    2da6:	f8 94       	cli
    2da8:	de bf       	out	0x3e, r29	; 62
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	cd bf       	out	0x3d, r28	; 61
    2dae:	cf 91       	pop	r28
    2db0:	df 91       	pop	r29
    2db2:	08 95       	ret

00002db4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    2db4:	df 93       	push	r29
    2db6:	cf 93       	push	r28
    2db8:	00 d0       	rcall	.+0      	; 0x2dba <vListInitialise+0x6>
    2dba:	cd b7       	in	r28, 0x3d	; 61
    2dbc:	de b7       	in	r29, 0x3e	; 62
    2dbe:	9a 83       	std	Y+2, r25	; 0x02
    2dc0:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc6:	03 96       	adiw	r24, 0x03	; 3
    2dc8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dca:	fa 81       	ldd	r31, Y+2	; 0x02
    2dcc:	92 83       	std	Z+2, r25	; 0x02
    2dce:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2dd0:	e9 81       	ldd	r30, Y+1	; 0x01
    2dd2:	fa 81       	ldd	r31, Y+2	; 0x02
    2dd4:	8f ef       	ldi	r24, 0xFF	; 255
    2dd6:	9f ef       	ldi	r25, 0xFF	; 255
    2dd8:	94 83       	std	Z+4, r25	; 0x04
    2dda:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	9a 81       	ldd	r25, Y+2	; 0x02
    2de0:	03 96       	adiw	r24, 0x03	; 3
    2de2:	e9 81       	ldd	r30, Y+1	; 0x01
    2de4:	fa 81       	ldd	r31, Y+2	; 0x02
    2de6:	96 83       	std	Z+6, r25	; 0x06
    2de8:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	9a 81       	ldd	r25, Y+2	; 0x02
    2dee:	03 96       	adiw	r24, 0x03	; 3
    2df0:	e9 81       	ldd	r30, Y+1	; 0x01
    2df2:	fa 81       	ldd	r31, Y+2	; 0x02
    2df4:	90 87       	std	Z+8, r25	; 0x08
    2df6:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    2df8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dfa:	fa 81       	ldd	r31, Y+2	; 0x02
    2dfc:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	08 95       	ret

00002e08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    2e08:	df 93       	push	r29
    2e0a:	cf 93       	push	r28
    2e0c:	00 d0       	rcall	.+0      	; 0x2e0e <vListInitialiseItem+0x6>
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	9a 83       	std	Y+2, r25	; 0x02
    2e14:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2e16:	e9 81       	ldd	r30, Y+1	; 0x01
    2e18:	fa 81       	ldd	r31, Y+2	; 0x02
    2e1a:	11 86       	std	Z+9, r1	; 0x09
    2e1c:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    2e1e:	0f 90       	pop	r0
    2e20:	0f 90       	pop	r0
    2e22:	cf 91       	pop	r28
    2e24:	df 91       	pop	r29
    2e26:	08 95       	ret

00002e28 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2e28:	df 93       	push	r29
    2e2a:	cf 93       	push	r28
    2e2c:	00 d0       	rcall	.+0      	; 0x2e2e <vListInsertEnd+0x6>
    2e2e:	00 d0       	rcall	.+0      	; 0x2e30 <vListInsertEnd+0x8>
    2e30:	00 d0       	rcall	.+0      	; 0x2e32 <vListInsertEnd+0xa>
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	9c 83       	std	Y+4, r25	; 0x04
    2e38:	8b 83       	std	Y+3, r24	; 0x03
    2e3a:	7e 83       	std	Y+6, r23	; 0x06
    2e3c:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    2e3e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e40:	fc 81       	ldd	r31, Y+4	; 0x04
    2e42:	81 81       	ldd	r24, Z+1	; 0x01
    2e44:	92 81       	ldd	r25, Z+2	; 0x02
    2e46:	9a 83       	std	Y+2, r25	; 0x02
    2e48:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    2e4a:	ed 81       	ldd	r30, Y+5	; 0x05
    2e4c:	fe 81       	ldd	r31, Y+6	; 0x06
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	9a 81       	ldd	r25, Y+2	; 0x02
    2e52:	93 83       	std	Z+3, r25	; 0x03
    2e54:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    2e56:	e9 81       	ldd	r30, Y+1	; 0x01
    2e58:	fa 81       	ldd	r31, Y+2	; 0x02
    2e5a:	84 81       	ldd	r24, Z+4	; 0x04
    2e5c:	95 81       	ldd	r25, Z+5	; 0x05
    2e5e:	ed 81       	ldd	r30, Y+5	; 0x05
    2e60:	fe 81       	ldd	r31, Y+6	; 0x06
    2e62:	95 83       	std	Z+5, r25	; 0x05
    2e64:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    2e66:	e9 81       	ldd	r30, Y+1	; 0x01
    2e68:	fa 81       	ldd	r31, Y+2	; 0x02
    2e6a:	04 80       	ldd	r0, Z+4	; 0x04
    2e6c:	f5 81       	ldd	r31, Z+5	; 0x05
    2e6e:	e0 2d       	mov	r30, r0
    2e70:	8d 81       	ldd	r24, Y+5	; 0x05
    2e72:	9e 81       	ldd	r25, Y+6	; 0x06
    2e74:	93 83       	std	Z+3, r25	; 0x03
    2e76:	82 83       	std	Z+2, r24	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    2e78:	e9 81       	ldd	r30, Y+1	; 0x01
    2e7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e80:	95 83       	std	Z+5, r25	; 0x05
    2e82:	84 83       	std	Z+4, r24	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2e84:	ed 81       	ldd	r30, Y+5	; 0x05
    2e86:	fe 81       	ldd	r31, Y+6	; 0x06
    2e88:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8c:	91 87       	std	Z+9, r25	; 0x09
    2e8e:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    2e90:	eb 81       	ldd	r30, Y+3	; 0x03
    2e92:	fc 81       	ldd	r31, Y+4	; 0x04
    2e94:	80 81       	ld	r24, Z
    2e96:	8f 5f       	subi	r24, 0xFF	; 255
    2e98:	eb 81       	ldd	r30, Y+3	; 0x03
    2e9a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e9c:	80 83       	st	Z, r24
}
    2e9e:	26 96       	adiw	r28, 0x06	; 6
    2ea0:	0f b6       	in	r0, 0x3f	; 63
    2ea2:	f8 94       	cli
    2ea4:	de bf       	out	0x3e, r29	; 62
    2ea6:	0f be       	out	0x3f, r0	; 63
    2ea8:	cd bf       	out	0x3d, r28	; 61
    2eaa:	cf 91       	pop	r28
    2eac:	df 91       	pop	r29
    2eae:	08 95       	ret

00002eb0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2eb0:	df 93       	push	r29
    2eb2:	cf 93       	push	r28
    2eb4:	cd b7       	in	r28, 0x3d	; 61
    2eb6:	de b7       	in	r29, 0x3e	; 62
    2eb8:	28 97       	sbiw	r28, 0x08	; 8
    2eba:	0f b6       	in	r0, 0x3f	; 63
    2ebc:	f8 94       	cli
    2ebe:	de bf       	out	0x3e, r29	; 62
    2ec0:	0f be       	out	0x3f, r0	; 63
    2ec2:	cd bf       	out	0x3d, r28	; 61
    2ec4:	9e 83       	std	Y+6, r25	; 0x06
    2ec6:	8d 83       	std	Y+5, r24	; 0x05
    2ec8:	78 87       	std	Y+8, r23	; 0x08
    2eca:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2ecc:	ef 81       	ldd	r30, Y+7	; 0x07
    2ece:	f8 85       	ldd	r31, Y+8	; 0x08
    2ed0:	80 81       	ld	r24, Z
    2ed2:	91 81       	ldd	r25, Z+1	; 0x01
    2ed4:	9a 83       	std	Y+2, r25	; 0x02
    2ed6:	89 83       	std	Y+1, r24	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
    2eda:	9a 81       	ldd	r25, Y+2	; 0x02
    2edc:	2f ef       	ldi	r18, 0xFF	; 255
    2ede:	8f 3f       	cpi	r24, 0xFF	; 255
    2ee0:	92 07       	cpc	r25, r18
    2ee2:	39 f4       	brne	.+14     	; 0x2ef2 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2ee4:	ed 81       	ldd	r30, Y+5	; 0x05
    2ee6:	fe 81       	ldd	r31, Y+6	; 0x06
    2ee8:	87 81       	ldd	r24, Z+7	; 0x07
    2eea:	90 85       	ldd	r25, Z+8	; 0x08
    2eec:	9c 83       	std	Y+4, r25	; 0x04
    2eee:	8b 83       	std	Y+3, r24	; 0x03
    2ef0:	18 c0       	rjmp	.+48     	; 0x2f22 <vListInsert+0x72>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef6:	03 96       	adiw	r24, 0x03	; 3
    2ef8:	9c 83       	std	Y+4, r25	; 0x04
    2efa:	8b 83       	std	Y+3, r24	; 0x03
    2efc:	06 c0       	rjmp	.+12     	; 0x2f0a <vListInsert+0x5a>
    2efe:	eb 81       	ldd	r30, Y+3	; 0x03
    2f00:	fc 81       	ldd	r31, Y+4	; 0x04
    2f02:	82 81       	ldd	r24, Z+2	; 0x02
    2f04:	93 81       	ldd	r25, Z+3	; 0x03
    2f06:	9c 83       	std	Y+4, r25	; 0x04
    2f08:	8b 83       	std	Y+3, r24	; 0x03
    2f0a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f0c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f0e:	02 80       	ldd	r0, Z+2	; 0x02
    2f10:	f3 81       	ldd	r31, Z+3	; 0x03
    2f12:	e0 2d       	mov	r30, r0
    2f14:	20 81       	ld	r18, Z
    2f16:	31 81       	ldd	r19, Z+1	; 0x01
    2f18:	89 81       	ldd	r24, Y+1	; 0x01
    2f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f1c:	82 17       	cp	r24, r18
    2f1e:	93 07       	cpc	r25, r19
    2f20:	70 f7       	brcc	.-36     	; 0x2efe <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2f22:	eb 81       	ldd	r30, Y+3	; 0x03
    2f24:	fc 81       	ldd	r31, Y+4	; 0x04
    2f26:	82 81       	ldd	r24, Z+2	; 0x02
    2f28:	93 81       	ldd	r25, Z+3	; 0x03
    2f2a:	ef 81       	ldd	r30, Y+7	; 0x07
    2f2c:	f8 85       	ldd	r31, Y+8	; 0x08
    2f2e:	93 83       	std	Z+3, r25	; 0x03
    2f30:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2f32:	ef 81       	ldd	r30, Y+7	; 0x07
    2f34:	f8 85       	ldd	r31, Y+8	; 0x08
    2f36:	02 80       	ldd	r0, Z+2	; 0x02
    2f38:	f3 81       	ldd	r31, Z+3	; 0x03
    2f3a:	e0 2d       	mov	r30, r0
    2f3c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f3e:	98 85       	ldd	r25, Y+8	; 0x08
    2f40:	95 83       	std	Z+5, r25	; 0x05
    2f42:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    2f44:	ef 81       	ldd	r30, Y+7	; 0x07
    2f46:	f8 85       	ldd	r31, Y+8	; 0x08
    2f48:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f4c:	95 83       	std	Z+5, r25	; 0x05
    2f4e:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = pxNewListItem;
    2f50:	eb 81       	ldd	r30, Y+3	; 0x03
    2f52:	fc 81       	ldd	r31, Y+4	; 0x04
    2f54:	8f 81       	ldd	r24, Y+7	; 0x07
    2f56:	98 85       	ldd	r25, Y+8	; 0x08
    2f58:	93 83       	std	Z+3, r25	; 0x03
    2f5a:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2f5c:	ef 81       	ldd	r30, Y+7	; 0x07
    2f5e:	f8 85       	ldd	r31, Y+8	; 0x08
    2f60:	8d 81       	ldd	r24, Y+5	; 0x05
    2f62:	9e 81       	ldd	r25, Y+6	; 0x06
    2f64:	91 87       	std	Z+9, r25	; 0x09
    2f66:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    2f68:	ed 81       	ldd	r30, Y+5	; 0x05
    2f6a:	fe 81       	ldd	r31, Y+6	; 0x06
    2f6c:	80 81       	ld	r24, Z
    2f6e:	8f 5f       	subi	r24, 0xFF	; 255
    2f70:	ed 81       	ldd	r30, Y+5	; 0x05
    2f72:	fe 81       	ldd	r31, Y+6	; 0x06
    2f74:	80 83       	st	Z, r24
}
    2f76:	28 96       	adiw	r28, 0x08	; 8
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	f8 94       	cli
    2f7c:	de bf       	out	0x3e, r29	; 62
    2f7e:	0f be       	out	0x3f, r0	; 63
    2f80:	cd bf       	out	0x3d, r28	; 61
    2f82:	cf 91       	pop	r28
    2f84:	df 91       	pop	r29
    2f86:	08 95       	ret

00002f88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2f88:	df 93       	push	r29
    2f8a:	cf 93       	push	r28
    2f8c:	00 d0       	rcall	.+0      	; 0x2f8e <uxListRemove+0x6>
    2f8e:	00 d0       	rcall	.+0      	; 0x2f90 <uxListRemove+0x8>
    2f90:	cd b7       	in	r28, 0x3d	; 61
    2f92:	de b7       	in	r29, 0x3e	; 62
    2f94:	9c 83       	std	Y+4, r25	; 0x04
    2f96:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    2f98:	eb 81       	ldd	r30, Y+3	; 0x03
    2f9a:	fc 81       	ldd	r31, Y+4	; 0x04
    2f9c:	80 85       	ldd	r24, Z+8	; 0x08
    2f9e:	91 85       	ldd	r25, Z+9	; 0x09
    2fa0:	9a 83       	std	Y+2, r25	; 0x02
    2fa2:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2fa4:	eb 81       	ldd	r30, Y+3	; 0x03
    2fa6:	fc 81       	ldd	r31, Y+4	; 0x04
    2fa8:	a2 81       	ldd	r26, Z+2	; 0x02
    2faa:	b3 81       	ldd	r27, Z+3	; 0x03
    2fac:	eb 81       	ldd	r30, Y+3	; 0x03
    2fae:	fc 81       	ldd	r31, Y+4	; 0x04
    2fb0:	84 81       	ldd	r24, Z+4	; 0x04
    2fb2:	95 81       	ldd	r25, Z+5	; 0x05
    2fb4:	15 96       	adiw	r26, 0x05	; 5
    2fb6:	9c 93       	st	X, r25
    2fb8:	8e 93       	st	-X, r24
    2fba:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2fbc:	eb 81       	ldd	r30, Y+3	; 0x03
    2fbe:	fc 81       	ldd	r31, Y+4	; 0x04
    2fc0:	a4 81       	ldd	r26, Z+4	; 0x04
    2fc2:	b5 81       	ldd	r27, Z+5	; 0x05
    2fc4:	eb 81       	ldd	r30, Y+3	; 0x03
    2fc6:	fc 81       	ldd	r31, Y+4	; 0x04
    2fc8:	82 81       	ldd	r24, Z+2	; 0x02
    2fca:	93 81       	ldd	r25, Z+3	; 0x03
    2fcc:	13 96       	adiw	r26, 0x03	; 3
    2fce:	9c 93       	st	X, r25
    2fd0:	8e 93       	st	-X, r24
    2fd2:	12 97       	sbiw	r26, 0x02	; 2

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2fd4:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd6:	fa 81       	ldd	r31, Y+2	; 0x02
    2fd8:	21 81       	ldd	r18, Z+1	; 0x01
    2fda:	32 81       	ldd	r19, Z+2	; 0x02
    2fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fde:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe0:	28 17       	cp	r18, r24
    2fe2:	39 07       	cpc	r19, r25
    2fe4:	41 f4       	brne	.+16     	; 0x2ff6 <uxListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2fe6:	eb 81       	ldd	r30, Y+3	; 0x03
    2fe8:	fc 81       	ldd	r31, Y+4	; 0x04
    2fea:	84 81       	ldd	r24, Z+4	; 0x04
    2fec:	95 81       	ldd	r25, Z+5	; 0x05
    2fee:	e9 81       	ldd	r30, Y+1	; 0x01
    2ff0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ff2:	92 83       	std	Z+2, r25	; 0x02
    2ff4:	81 83       	std	Z+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    2ff6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ff8:	fc 81       	ldd	r31, Y+4	; 0x04
    2ffa:	11 86       	std	Z+9, r1	; 0x09
    2ffc:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    2ffe:	e9 81       	ldd	r30, Y+1	; 0x01
    3000:	fa 81       	ldd	r31, Y+2	; 0x02
    3002:	80 81       	ld	r24, Z
    3004:	81 50       	subi	r24, 0x01	; 1
    3006:	e9 81       	ldd	r30, Y+1	; 0x01
    3008:	fa 81       	ldd	r31, Y+2	; 0x02
    300a:	80 83       	st	Z, r24

	return pxList->uxNumberOfItems;
    300c:	e9 81       	ldd	r30, Y+1	; 0x01
    300e:	fa 81       	ldd	r31, Y+2	; 0x02
    3010:	80 81       	ld	r24, Z
}
    3012:	0f 90       	pop	r0
    3014:	0f 90       	pop	r0
    3016:	0f 90       	pop	r0
    3018:	0f 90       	pop	r0
    301a:	cf 91       	pop	r28
    301c:	df 91       	pop	r29
    301e:	08 95       	ret

00003020 <main>:

QueueHandle_t my_queue ;
unsigned char z;

int main(void)
{
    3020:	ef 92       	push	r14
    3022:	ff 92       	push	r15
    3024:	0f 93       	push	r16
    3026:	df 93       	push	r29
    3028:	cf 93       	push	r28
    302a:	cd b7       	in	r28, 0x3d	; 61
    302c:	de b7       	in	r29, 0x3e	; 62
	keypad_vInit();
    302e:	0e 94 14 16 	call	0x2c28	; 0x2c28 <keypad_vInit>
	LCD_vInit();
    3032:	0e 94 1d 0b 	call	0x163a	; 0x163a <LCD_vInit>
	xTaskCreate(keypad,"M", 100, NULL, 2, NULL);
    3036:	83 e4       	ldi	r24, 0x43	; 67
    3038:	98 e1       	ldi	r25, 0x18	; 24
    303a:	20 e6       	ldi	r18, 0x60	; 96
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	b9 01       	movw	r22, r18
    3040:	44 e6       	ldi	r20, 0x64	; 100
    3042:	50 e0       	ldi	r21, 0x00	; 0
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	02 e0       	ldi	r16, 0x02	; 2
    304a:	ee 24       	eor	r14, r14
    304c:	ff 24       	eor	r15, r15
    304e:	0e 94 e5 22 	call	0x45ca	; 0x45ca <xTaskCreate>
	xTaskCreate(LCD, "N", 100, NULL, 1, NULL);
    3052:	85 ee       	ldi	r24, 0xE5	; 229
    3054:	98 e1       	ldi	r25, 0x18	; 24
    3056:	22 e6       	ldi	r18, 0x62	; 98
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	b9 01       	movw	r22, r18
    305c:	44 e6       	ldi	r20, 0x64	; 100
    305e:	50 e0       	ldi	r21, 0x00	; 0
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	01 e0       	ldi	r16, 0x01	; 1
    3066:	ee 24       	eor	r14, r14
    3068:	ff 24       	eor	r15, r15
    306a:	0e 94 e5 22 	call	0x45ca	; 0x45ca <xTaskCreate>
	my_queue = xQueueCreate(5, sizeof(char));
    306e:	85 e0       	ldi	r24, 0x05	; 5
    3070:	61 e0       	ldi	r22, 0x01	; 1
    3072:	40 e0       	ldi	r20, 0x00	; 0
    3074:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <xQueueGenericCreate>
    3078:	90 93 20 04 	sts	0x0420, r25
    307c:	80 93 1f 04 	sts	0x041F, r24
	vTaskStartScheduler();
    3080:	0e 94 25 28 	call	0x504a	; 0x504a <vTaskStartScheduler>
    3084:	ff cf       	rjmp	.-2      	; 0x3084 <main+0x64>

00003086 <keypad>:
	{
		
	}
}
void keypad( void *pv )
{
    3086:	df 93       	push	r29
    3088:	cf 93       	push	r28
    308a:	cd b7       	in	r28, 0x3d	; 61
    308c:	de b7       	in	r29, 0x3e	; 62
    308e:	61 97       	sbiw	r28, 0x11	; 17
    3090:	0f b6       	in	r0, 0x3f	; 63
    3092:	f8 94       	cli
    3094:	de bf       	out	0x3e, r29	; 62
    3096:	0f be       	out	0x3f, r0	; 63
    3098:	cd bf       	out	0x3d, r28	; 61
    309a:	99 8b       	std	Y+17, r25	; 0x11
    309c:	88 8b       	std	Y+16, r24	; 0x10
	char x;
	while(1)
	{
		x = keypad_u8check_press();
    309e:	0e 94 57 16 	call	0x2cae	; 0x2cae <keypad_u8check_press>
    30a2:	8f 87       	std	Y+15, r24	; 0x0f
		if(x != NOTPRESSED)
    30a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    30a6:	8f 3f       	cpi	r24, 0xFF	; 255
    30a8:	d1 f3       	breq	.-12     	; 0x309e <keypad+0x18>
		{
			xQueueSend(my_queue, &x, 1000);
    30aa:	80 91 1f 04 	lds	r24, 0x041F
    30ae:	90 91 20 04 	lds	r25, 0x0420
    30b2:	9e 01       	movw	r18, r28
    30b4:	21 5f       	subi	r18, 0xF1	; 241
    30b6:	3f 4f       	sbci	r19, 0xFF	; 255
    30b8:	b9 01       	movw	r22, r18
    30ba:	48 ee       	ldi	r20, 0xE8	; 232
    30bc:	53 e0       	ldi	r21, 0x03	; 3
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <xQueueGenericSend>
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	a6 e9       	ldi	r26, 0x96	; 150
    30ca:	b3 e4       	ldi	r27, 0x43	; 67
    30cc:	8b 87       	std	Y+11, r24	; 0x0b
    30ce:	9c 87       	std	Y+12, r25	; 0x0c
    30d0:	ad 87       	std	Y+13, r26	; 0x0d
    30d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30da:	9e 85       	ldd	r25, Y+14	; 0x0e
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	4a ef       	ldi	r20, 0xFA	; 250
    30e2:	54 e4       	ldi	r21, 0x44	; 68
    30e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	8f 83       	std	Y+7, r24	; 0x07
    30ee:	98 87       	std	Y+8, r25	; 0x08
    30f0:	a9 87       	std	Y+9, r26	; 0x09
    30f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30f4:	6f 81       	ldd	r22, Y+7	; 0x07
    30f6:	78 85       	ldd	r23, Y+8	; 0x08
    30f8:	89 85       	ldd	r24, Y+9	; 0x09
    30fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	40 e8       	ldi	r20, 0x80	; 128
    3102:	5f e3       	ldi	r21, 0x3F	; 63
    3104:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3108:	88 23       	and	r24, r24
    310a:	2c f4       	brge	.+10     	; 0x3116 <keypad+0x90>
		__ticks = 1;
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	9e 83       	std	Y+6, r25	; 0x06
    3112:	8d 83       	std	Y+5, r24	; 0x05
    3114:	3f c0       	rjmp	.+126    	; 0x3194 <keypad+0x10e>
	else if (__tmp > 65535)
    3116:	6f 81       	ldd	r22, Y+7	; 0x07
    3118:	78 85       	ldd	r23, Y+8	; 0x08
    311a:	89 85       	ldd	r24, Y+9	; 0x09
    311c:	9a 85       	ldd	r25, Y+10	; 0x0a
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	3f ef       	ldi	r19, 0xFF	; 255
    3122:	4f e7       	ldi	r20, 0x7F	; 127
    3124:	57 e4       	ldi	r21, 0x47	; 71
    3126:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    312a:	18 16       	cp	r1, r24
    312c:	4c f5       	brge	.+82     	; 0x3180 <keypad+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    312e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3130:	7c 85       	ldd	r23, Y+12	; 0x0c
    3132:	8d 85       	ldd	r24, Y+13	; 0x0d
    3134:	9e 85       	ldd	r25, Y+14	; 0x0e
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	40 e2       	ldi	r20, 0x20	; 32
    313c:	51 e4       	ldi	r21, 0x41	; 65
    313e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3142:	dc 01       	movw	r26, r24
    3144:	cb 01       	movw	r24, r22
    3146:	bc 01       	movw	r22, r24
    3148:	cd 01       	movw	r24, r26
    314a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	9e 83       	std	Y+6, r25	; 0x06
    3154:	8d 83       	std	Y+5, r24	; 0x05
    3156:	0f c0       	rjmp	.+30     	; 0x3176 <keypad+0xf0>
    3158:	88 ec       	ldi	r24, 0xC8	; 200
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	9c 83       	std	Y+4, r25	; 0x04
    315e:	8b 83       	std	Y+3, r24	; 0x03
    3160:	8b 81       	ldd	r24, Y+3	; 0x03
    3162:	9c 81       	ldd	r25, Y+4	; 0x04
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	f1 f7       	brne	.-4      	; 0x3164 <keypad+0xde>
    3168:	9c 83       	std	Y+4, r25	; 0x04
    316a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316c:	8d 81       	ldd	r24, Y+5	; 0x05
    316e:	9e 81       	ldd	r25, Y+6	; 0x06
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	9e 83       	std	Y+6, r25	; 0x06
    3174:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3176:	8d 81       	ldd	r24, Y+5	; 0x05
    3178:	9e 81       	ldd	r25, Y+6	; 0x06
    317a:	00 97       	sbiw	r24, 0x00	; 0
    317c:	69 f7       	brne	.-38     	; 0x3158 <keypad+0xd2>
    317e:	14 c0       	rjmp	.+40     	; 0x31a8 <keypad+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3180:	6f 81       	ldd	r22, Y+7	; 0x07
    3182:	78 85       	ldd	r23, Y+8	; 0x08
    3184:	89 85       	ldd	r24, Y+9	; 0x09
    3186:	9a 85       	ldd	r25, Y+10	; 0x0a
    3188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	9e 83       	std	Y+6, r25	; 0x06
    3192:	8d 83       	std	Y+5, r24	; 0x05
    3194:	8d 81       	ldd	r24, Y+5	; 0x05
    3196:	9e 81       	ldd	r25, Y+6	; 0x06
    3198:	9a 83       	std	Y+2, r25	; 0x02
    319a:	89 83       	std	Y+1, r24	; 0x01
    319c:	89 81       	ldd	r24, Y+1	; 0x01
    319e:	9a 81       	ldd	r25, Y+2	; 0x02
    31a0:	01 97       	sbiw	r24, 0x01	; 1
    31a2:	f1 f7       	brne	.-4      	; 0x31a0 <keypad+0x11a>
    31a4:	9a 83       	std	Y+2, r25	; 0x02
    31a6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);
			z++;
    31a8:	80 91 1e 04 	lds	r24, 0x041E
    31ac:	8f 5f       	subi	r24, 0xFF	; 255
    31ae:	80 93 1e 04 	sts	0x041E, r24
			if (z == 3)
    31b2:	80 91 1e 04 	lds	r24, 0x041E
    31b6:	83 30       	cpi	r24, 0x03	; 3
    31b8:	09 f0       	breq	.+2      	; 0x31bc <keypad+0x136>
    31ba:	71 cf       	rjmp	.-286    	; 0x309e <keypad+0x18>
			{
			vTaskDelay(1000);
    31bc:	88 ee       	ldi	r24, 0xE8	; 232
    31be:	93 e0       	ldi	r25, 0x03	; 3
    31c0:	0e 94 74 25 	call	0x4ae8	; 0x4ae8 <vTaskDelay>
			z = 0;
    31c4:	10 92 1e 04 	sts	0x041E, r1
    31c8:	6a cf       	rjmp	.-300    	; 0x309e <keypad+0x18>

000031ca <LCD>:
			}
		}
	}
}
void LCD( void *pv )
{
    31ca:	df 93       	push	r29
    31cc:	cf 93       	push	r28
    31ce:	00 d0       	rcall	.+0      	; 0x31d0 <LCD+0x6>
    31d0:	0f 92       	push	r0
    31d2:	cd b7       	in	r28, 0x3d	; 61
    31d4:	de b7       	in	r29, 0x3e	; 62
    31d6:	9b 83       	std	Y+3, r25	; 0x03
    31d8:	8a 83       	std	Y+2, r24	; 0x02
	char y;
	while(1)
	{
		xQueueReceive(my_queue, &y, 1000);
    31da:	80 91 1f 04 	lds	r24, 0x041F
    31de:	90 91 20 04 	lds	r25, 0x0420
    31e2:	9e 01       	movw	r18, r28
    31e4:	2f 5f       	subi	r18, 0xFF	; 255
    31e6:	3f 4f       	sbci	r19, 0xFF	; 255
    31e8:	b9 01       	movw	r22, r18
    31ea:	48 ee       	ldi	r20, 0xE8	; 232
    31ec:	53 e0       	ldi	r21, 0x03	; 3
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <xQueueGenericReceive>
		LCD_vSend_char(y);
    31f4:	89 81       	ldd	r24, Y+1	; 0x01
    31f6:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_vSend_char>
    31fa:	ef cf       	rjmp	.-34     	; 0x31da <LCD+0x10>

000031fc <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    31fc:	df 93       	push	r29
    31fe:	cf 93       	push	r28
    3200:	cd b7       	in	r28, 0x3d	; 61
    3202:	de b7       	in	r29, 0x3e	; 62
    3204:	28 97       	sbiw	r28, 0x08	; 8
    3206:	0f b6       	in	r0, 0x3f	; 63
    3208:	f8 94       	cli
    320a:	de bf       	out	0x3e, r29	; 62
    320c:	0f be       	out	0x3f, r0	; 63
    320e:	cd bf       	out	0x3d, r28	; 61
    3210:	9c 83       	std	Y+4, r25	; 0x04
    3212:	8b 83       	std	Y+3, r24	; 0x03
    3214:	7e 83       	std	Y+6, r23	; 0x06
    3216:	6d 83       	std	Y+5, r22	; 0x05
    3218:	58 87       	std	Y+8, r21	; 0x08
    321a:	4f 83       	std	Y+7, r20	; 0x07
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    321c:	eb 81       	ldd	r30, Y+3	; 0x03
    321e:	fc 81       	ldd	r31, Y+4	; 0x04
    3220:	81 e1       	ldi	r24, 0x11	; 17
    3222:	80 83       	st	Z, r24
	pxTopOfStack--;
    3224:	8b 81       	ldd	r24, Y+3	; 0x03
    3226:	9c 81       	ldd	r25, Y+4	; 0x04
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	9c 83       	std	Y+4, r25	; 0x04
    322c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    322e:	eb 81       	ldd	r30, Y+3	; 0x03
    3230:	fc 81       	ldd	r31, Y+4	; 0x04
    3232:	82 e2       	ldi	r24, 0x22	; 34
    3234:	80 83       	st	Z, r24
	pxTopOfStack--;
    3236:	8b 81       	ldd	r24, Y+3	; 0x03
    3238:	9c 81       	ldd	r25, Y+4	; 0x04
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	9c 83       	std	Y+4, r25	; 0x04
    323e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    3240:	eb 81       	ldd	r30, Y+3	; 0x03
    3242:	fc 81       	ldd	r31, Y+4	; 0x04
    3244:	83 e3       	ldi	r24, 0x33	; 51
    3246:	80 83       	st	Z, r24
	pxTopOfStack--;
    3248:	8b 81       	ldd	r24, Y+3	; 0x03
    324a:	9c 81       	ldd	r25, Y+4	; 0x04
    324c:	01 97       	sbiw	r24, 0x01	; 1
    324e:	9c 83       	std	Y+4, r25	; 0x04
    3250:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
    3252:	8d 81       	ldd	r24, Y+5	; 0x05
    3254:	9e 81       	ldd	r25, Y+6	; 0x06
    3256:	9a 83       	std	Y+2, r25	; 0x02
    3258:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	eb 81       	ldd	r30, Y+3	; 0x03
    325e:	fc 81       	ldd	r31, Y+4	; 0x04
    3260:	80 83       	st	Z, r24
	pxTopOfStack--;
    3262:	8b 81       	ldd	r24, Y+3	; 0x03
    3264:	9c 81       	ldd	r25, Y+4	; 0x04
    3266:	01 97       	sbiw	r24, 0x01	; 1
    3268:	9c 83       	std	Y+4, r25	; 0x04
    326a:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	9a 81       	ldd	r25, Y+2	; 0x02
    3270:	89 2f       	mov	r24, r25
    3272:	99 27       	eor	r25, r25
    3274:	9a 83       	std	Y+2, r25	; 0x02
    3276:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	eb 81       	ldd	r30, Y+3	; 0x03
    327c:	fc 81       	ldd	r31, Y+4	; 0x04
    327e:	80 83       	st	Z, r24
	pxTopOfStack--;
    3280:	8b 81       	ldd	r24, Y+3	; 0x03
    3282:	9c 81       	ldd	r25, Y+4	; 0x04
    3284:	01 97       	sbiw	r24, 0x01	; 1
    3286:	9c 83       	std	Y+4, r25	; 0x04
    3288:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    328a:	eb 81       	ldd	r30, Y+3	; 0x03
    328c:	fc 81       	ldd	r31, Y+4	; 0x04
    328e:	10 82       	st	Z, r1
	pxTopOfStack--;
    3290:	8b 81       	ldd	r24, Y+3	; 0x03
    3292:	9c 81       	ldd	r25, Y+4	; 0x04
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	9c 83       	std	Y+4, r25	; 0x04
    3298:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    329a:	eb 81       	ldd	r30, Y+3	; 0x03
    329c:	fc 81       	ldd	r31, Y+4	; 0x04
    329e:	80 e8       	ldi	r24, 0x80	; 128
    32a0:	80 83       	st	Z, r24
	pxTopOfStack--;
    32a2:	8b 81       	ldd	r24, Y+3	; 0x03
    32a4:	9c 81       	ldd	r25, Y+4	; 0x04
    32a6:	01 97       	sbiw	r24, 0x01	; 1
    32a8:	9c 83       	std	Y+4, r25	; 0x04
    32aa:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    32ac:	eb 81       	ldd	r30, Y+3	; 0x03
    32ae:	fc 81       	ldd	r31, Y+4	; 0x04
    32b0:	10 82       	st	Z, r1
	pxTopOfStack--;
    32b2:	8b 81       	ldd	r24, Y+3	; 0x03
    32b4:	9c 81       	ldd	r25, Y+4	; 0x04
    32b6:	01 97       	sbiw	r24, 0x01	; 1
    32b8:	9c 83       	std	Y+4, r25	; 0x04
    32ba:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    32bc:	eb 81       	ldd	r30, Y+3	; 0x03
    32be:	fc 81       	ldd	r31, Y+4	; 0x04
    32c0:	82 e0       	ldi	r24, 0x02	; 2
    32c2:	80 83       	st	Z, r24
	pxTopOfStack--;
    32c4:	8b 81       	ldd	r24, Y+3	; 0x03
    32c6:	9c 81       	ldd	r25, Y+4	; 0x04
    32c8:	01 97       	sbiw	r24, 0x01	; 1
    32ca:	9c 83       	std	Y+4, r25	; 0x04
    32cc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    32ce:	eb 81       	ldd	r30, Y+3	; 0x03
    32d0:	fc 81       	ldd	r31, Y+4	; 0x04
    32d2:	83 e0       	ldi	r24, 0x03	; 3
    32d4:	80 83       	st	Z, r24
	pxTopOfStack--;
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	9c 81       	ldd	r25, Y+4	; 0x04
    32da:	01 97       	sbiw	r24, 0x01	; 1
    32dc:	9c 83       	std	Y+4, r25	; 0x04
    32de:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    32e0:	eb 81       	ldd	r30, Y+3	; 0x03
    32e2:	fc 81       	ldd	r31, Y+4	; 0x04
    32e4:	84 e0       	ldi	r24, 0x04	; 4
    32e6:	80 83       	st	Z, r24
	pxTopOfStack--;
    32e8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ea:	9c 81       	ldd	r25, Y+4	; 0x04
    32ec:	01 97       	sbiw	r24, 0x01	; 1
    32ee:	9c 83       	std	Y+4, r25	; 0x04
    32f0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    32f2:	eb 81       	ldd	r30, Y+3	; 0x03
    32f4:	fc 81       	ldd	r31, Y+4	; 0x04
    32f6:	85 e0       	ldi	r24, 0x05	; 5
    32f8:	80 83       	st	Z, r24
	pxTopOfStack--;
    32fa:	8b 81       	ldd	r24, Y+3	; 0x03
    32fc:	9c 81       	ldd	r25, Y+4	; 0x04
    32fe:	01 97       	sbiw	r24, 0x01	; 1
    3300:	9c 83       	std	Y+4, r25	; 0x04
    3302:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    3304:	eb 81       	ldd	r30, Y+3	; 0x03
    3306:	fc 81       	ldd	r31, Y+4	; 0x04
    3308:	86 e0       	ldi	r24, 0x06	; 6
    330a:	80 83       	st	Z, r24
	pxTopOfStack--;
    330c:	8b 81       	ldd	r24, Y+3	; 0x03
    330e:	9c 81       	ldd	r25, Y+4	; 0x04
    3310:	01 97       	sbiw	r24, 0x01	; 1
    3312:	9c 83       	std	Y+4, r25	; 0x04
    3314:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    3316:	eb 81       	ldd	r30, Y+3	; 0x03
    3318:	fc 81       	ldd	r31, Y+4	; 0x04
    331a:	87 e0       	ldi	r24, 0x07	; 7
    331c:	80 83       	st	Z, r24
	pxTopOfStack--;
    331e:	8b 81       	ldd	r24, Y+3	; 0x03
    3320:	9c 81       	ldd	r25, Y+4	; 0x04
    3322:	01 97       	sbiw	r24, 0x01	; 1
    3324:	9c 83       	std	Y+4, r25	; 0x04
    3326:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    3328:	eb 81       	ldd	r30, Y+3	; 0x03
    332a:	fc 81       	ldd	r31, Y+4	; 0x04
    332c:	88 e0       	ldi	r24, 0x08	; 8
    332e:	80 83       	st	Z, r24
	pxTopOfStack--;
    3330:	8b 81       	ldd	r24, Y+3	; 0x03
    3332:	9c 81       	ldd	r25, Y+4	; 0x04
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	9c 83       	std	Y+4, r25	; 0x04
    3338:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    333a:	eb 81       	ldd	r30, Y+3	; 0x03
    333c:	fc 81       	ldd	r31, Y+4	; 0x04
    333e:	89 e0       	ldi	r24, 0x09	; 9
    3340:	80 83       	st	Z, r24
	pxTopOfStack--;
    3342:	8b 81       	ldd	r24, Y+3	; 0x03
    3344:	9c 81       	ldd	r25, Y+4	; 0x04
    3346:	01 97       	sbiw	r24, 0x01	; 1
    3348:	9c 83       	std	Y+4, r25	; 0x04
    334a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    334c:	eb 81       	ldd	r30, Y+3	; 0x03
    334e:	fc 81       	ldd	r31, Y+4	; 0x04
    3350:	80 e1       	ldi	r24, 0x10	; 16
    3352:	80 83       	st	Z, r24
	pxTopOfStack--;
    3354:	8b 81       	ldd	r24, Y+3	; 0x03
    3356:	9c 81       	ldd	r25, Y+4	; 0x04
    3358:	01 97       	sbiw	r24, 0x01	; 1
    335a:	9c 83       	std	Y+4, r25	; 0x04
    335c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    335e:	eb 81       	ldd	r30, Y+3	; 0x03
    3360:	fc 81       	ldd	r31, Y+4	; 0x04
    3362:	81 e1       	ldi	r24, 0x11	; 17
    3364:	80 83       	st	Z, r24
	pxTopOfStack--;
    3366:	8b 81       	ldd	r24, Y+3	; 0x03
    3368:	9c 81       	ldd	r25, Y+4	; 0x04
    336a:	01 97       	sbiw	r24, 0x01	; 1
    336c:	9c 83       	std	Y+4, r25	; 0x04
    336e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    3370:	eb 81       	ldd	r30, Y+3	; 0x03
    3372:	fc 81       	ldd	r31, Y+4	; 0x04
    3374:	82 e1       	ldi	r24, 0x12	; 18
    3376:	80 83       	st	Z, r24
	pxTopOfStack--;
    3378:	8b 81       	ldd	r24, Y+3	; 0x03
    337a:	9c 81       	ldd	r25, Y+4	; 0x04
    337c:	01 97       	sbiw	r24, 0x01	; 1
    337e:	9c 83       	std	Y+4, r25	; 0x04
    3380:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    3382:	eb 81       	ldd	r30, Y+3	; 0x03
    3384:	fc 81       	ldd	r31, Y+4	; 0x04
    3386:	83 e1       	ldi	r24, 0x13	; 19
    3388:	80 83       	st	Z, r24
	pxTopOfStack--;
    338a:	8b 81       	ldd	r24, Y+3	; 0x03
    338c:	9c 81       	ldd	r25, Y+4	; 0x04
    338e:	01 97       	sbiw	r24, 0x01	; 1
    3390:	9c 83       	std	Y+4, r25	; 0x04
    3392:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    3394:	eb 81       	ldd	r30, Y+3	; 0x03
    3396:	fc 81       	ldd	r31, Y+4	; 0x04
    3398:	84 e1       	ldi	r24, 0x14	; 20
    339a:	80 83       	st	Z, r24
	pxTopOfStack--;
    339c:	8b 81       	ldd	r24, Y+3	; 0x03
    339e:	9c 81       	ldd	r25, Y+4	; 0x04
    33a0:	01 97       	sbiw	r24, 0x01	; 1
    33a2:	9c 83       	std	Y+4, r25	; 0x04
    33a4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    33a6:	eb 81       	ldd	r30, Y+3	; 0x03
    33a8:	fc 81       	ldd	r31, Y+4	; 0x04
    33aa:	85 e1       	ldi	r24, 0x15	; 21
    33ac:	80 83       	st	Z, r24
	pxTopOfStack--;
    33ae:	8b 81       	ldd	r24, Y+3	; 0x03
    33b0:	9c 81       	ldd	r25, Y+4	; 0x04
    33b2:	01 97       	sbiw	r24, 0x01	; 1
    33b4:	9c 83       	std	Y+4, r25	; 0x04
    33b6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    33b8:	eb 81       	ldd	r30, Y+3	; 0x03
    33ba:	fc 81       	ldd	r31, Y+4	; 0x04
    33bc:	86 e1       	ldi	r24, 0x16	; 22
    33be:	80 83       	st	Z, r24
	pxTopOfStack--;
    33c0:	8b 81       	ldd	r24, Y+3	; 0x03
    33c2:	9c 81       	ldd	r25, Y+4	; 0x04
    33c4:	01 97       	sbiw	r24, 0x01	; 1
    33c6:	9c 83       	std	Y+4, r25	; 0x04
    33c8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    33ca:	eb 81       	ldd	r30, Y+3	; 0x03
    33cc:	fc 81       	ldd	r31, Y+4	; 0x04
    33ce:	87 e1       	ldi	r24, 0x17	; 23
    33d0:	80 83       	st	Z, r24
	pxTopOfStack--;
    33d2:	8b 81       	ldd	r24, Y+3	; 0x03
    33d4:	9c 81       	ldd	r25, Y+4	; 0x04
    33d6:	01 97       	sbiw	r24, 0x01	; 1
    33d8:	9c 83       	std	Y+4, r25	; 0x04
    33da:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    33dc:	eb 81       	ldd	r30, Y+3	; 0x03
    33de:	fc 81       	ldd	r31, Y+4	; 0x04
    33e0:	88 e1       	ldi	r24, 0x18	; 24
    33e2:	80 83       	st	Z, r24
	pxTopOfStack--;
    33e4:	8b 81       	ldd	r24, Y+3	; 0x03
    33e6:	9c 81       	ldd	r25, Y+4	; 0x04
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	9c 83       	std	Y+4, r25	; 0x04
    33ec:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    33ee:	eb 81       	ldd	r30, Y+3	; 0x03
    33f0:	fc 81       	ldd	r31, Y+4	; 0x04
    33f2:	89 e1       	ldi	r24, 0x19	; 25
    33f4:	80 83       	st	Z, r24
	pxTopOfStack--;
    33f6:	8b 81       	ldd	r24, Y+3	; 0x03
    33f8:	9c 81       	ldd	r25, Y+4	; 0x04
    33fa:	01 97       	sbiw	r24, 0x01	; 1
    33fc:	9c 83       	std	Y+4, r25	; 0x04
    33fe:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    3400:	eb 81       	ldd	r30, Y+3	; 0x03
    3402:	fc 81       	ldd	r31, Y+4	; 0x04
    3404:	80 e2       	ldi	r24, 0x20	; 32
    3406:	80 83       	st	Z, r24
	pxTopOfStack--;
    3408:	8b 81       	ldd	r24, Y+3	; 0x03
    340a:	9c 81       	ldd	r25, Y+4	; 0x04
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	9c 83       	std	Y+4, r25	; 0x04
    3410:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    3412:	eb 81       	ldd	r30, Y+3	; 0x03
    3414:	fc 81       	ldd	r31, Y+4	; 0x04
    3416:	81 e2       	ldi	r24, 0x21	; 33
    3418:	80 83       	st	Z, r24
	pxTopOfStack--;
    341a:	8b 81       	ldd	r24, Y+3	; 0x03
    341c:	9c 81       	ldd	r25, Y+4	; 0x04
    341e:	01 97       	sbiw	r24, 0x01	; 1
    3420:	9c 83       	std	Y+4, r25	; 0x04
    3422:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    3424:	eb 81       	ldd	r30, Y+3	; 0x03
    3426:	fc 81       	ldd	r31, Y+4	; 0x04
    3428:	82 e2       	ldi	r24, 0x22	; 34
    342a:	80 83       	st	Z, r24
	pxTopOfStack--;
    342c:	8b 81       	ldd	r24, Y+3	; 0x03
    342e:	9c 81       	ldd	r25, Y+4	; 0x04
    3430:	01 97       	sbiw	r24, 0x01	; 1
    3432:	9c 83       	std	Y+4, r25	; 0x04
    3434:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    3436:	eb 81       	ldd	r30, Y+3	; 0x03
    3438:	fc 81       	ldd	r31, Y+4	; 0x04
    343a:	83 e2       	ldi	r24, 0x23	; 35
    343c:	80 83       	st	Z, r24
	pxTopOfStack--;
    343e:	8b 81       	ldd	r24, Y+3	; 0x03
    3440:	9c 81       	ldd	r25, Y+4	; 0x04
    3442:	01 97       	sbiw	r24, 0x01	; 1
    3444:	9c 83       	std	Y+4, r25	; 0x04
    3446:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
    3448:	8f 81       	ldd	r24, Y+7	; 0x07
    344a:	98 85       	ldd	r25, Y+8	; 0x08
    344c:	9a 83       	std	Y+2, r25	; 0x02
    344e:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    3450:	89 81       	ldd	r24, Y+1	; 0x01
    3452:	eb 81       	ldd	r30, Y+3	; 0x03
    3454:	fc 81       	ldd	r31, Y+4	; 0x04
    3456:	80 83       	st	Z, r24
	pxTopOfStack--;
    3458:	8b 81       	ldd	r24, Y+3	; 0x03
    345a:	9c 81       	ldd	r25, Y+4	; 0x04
    345c:	01 97       	sbiw	r24, 0x01	; 1
    345e:	9c 83       	std	Y+4, r25	; 0x04
    3460:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    3462:	89 81       	ldd	r24, Y+1	; 0x01
    3464:	9a 81       	ldd	r25, Y+2	; 0x02
    3466:	89 2f       	mov	r24, r25
    3468:	99 27       	eor	r25, r25
    346a:	9a 83       	std	Y+2, r25	; 0x02
    346c:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    346e:	89 81       	ldd	r24, Y+1	; 0x01
    3470:	eb 81       	ldd	r30, Y+3	; 0x03
    3472:	fc 81       	ldd	r31, Y+4	; 0x04
    3474:	80 83       	st	Z, r24
	pxTopOfStack--;
    3476:	8b 81       	ldd	r24, Y+3	; 0x03
    3478:	9c 81       	ldd	r25, Y+4	; 0x04
    347a:	01 97       	sbiw	r24, 0x01	; 1
    347c:	9c 83       	std	Y+4, r25	; 0x04
    347e:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    3480:	eb 81       	ldd	r30, Y+3	; 0x03
    3482:	fc 81       	ldd	r31, Y+4	; 0x04
    3484:	86 e2       	ldi	r24, 0x26	; 38
    3486:	80 83       	st	Z, r24
	pxTopOfStack--;
    3488:	8b 81       	ldd	r24, Y+3	; 0x03
    348a:	9c 81       	ldd	r25, Y+4	; 0x04
    348c:	01 97       	sbiw	r24, 0x01	; 1
    348e:	9c 83       	std	Y+4, r25	; 0x04
    3490:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    3492:	eb 81       	ldd	r30, Y+3	; 0x03
    3494:	fc 81       	ldd	r31, Y+4	; 0x04
    3496:	87 e2       	ldi	r24, 0x27	; 39
    3498:	80 83       	st	Z, r24
	pxTopOfStack--;
    349a:	8b 81       	ldd	r24, Y+3	; 0x03
    349c:	9c 81       	ldd	r25, Y+4	; 0x04
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	9c 83       	std	Y+4, r25	; 0x04
    34a2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    34a4:	eb 81       	ldd	r30, Y+3	; 0x03
    34a6:	fc 81       	ldd	r31, Y+4	; 0x04
    34a8:	88 e2       	ldi	r24, 0x28	; 40
    34aa:	80 83       	st	Z, r24
	pxTopOfStack--;
    34ac:	8b 81       	ldd	r24, Y+3	; 0x03
    34ae:	9c 81       	ldd	r25, Y+4	; 0x04
    34b0:	01 97       	sbiw	r24, 0x01	; 1
    34b2:	9c 83       	std	Y+4, r25	; 0x04
    34b4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    34b6:	eb 81       	ldd	r30, Y+3	; 0x03
    34b8:	fc 81       	ldd	r31, Y+4	; 0x04
    34ba:	89 e2       	ldi	r24, 0x29	; 41
    34bc:	80 83       	st	Z, r24
	pxTopOfStack--;
    34be:	8b 81       	ldd	r24, Y+3	; 0x03
    34c0:	9c 81       	ldd	r25, Y+4	; 0x04
    34c2:	01 97       	sbiw	r24, 0x01	; 1
    34c4:	9c 83       	std	Y+4, r25	; 0x04
    34c6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    34c8:	eb 81       	ldd	r30, Y+3	; 0x03
    34ca:	fc 81       	ldd	r31, Y+4	; 0x04
    34cc:	80 e3       	ldi	r24, 0x30	; 48
    34ce:	80 83       	st	Z, r24
	pxTopOfStack--;
    34d0:	8b 81       	ldd	r24, Y+3	; 0x03
    34d2:	9c 81       	ldd	r25, Y+4	; 0x04
    34d4:	01 97       	sbiw	r24, 0x01	; 1
    34d6:	9c 83       	std	Y+4, r25	; 0x04
    34d8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    34da:	eb 81       	ldd	r30, Y+3	; 0x03
    34dc:	fc 81       	ldd	r31, Y+4	; 0x04
    34de:	81 e3       	ldi	r24, 0x31	; 49
    34e0:	80 83       	st	Z, r24
	pxTopOfStack--;
    34e2:	8b 81       	ldd	r24, Y+3	; 0x03
    34e4:	9c 81       	ldd	r25, Y+4	; 0x04
    34e6:	01 97       	sbiw	r24, 0x01	; 1
    34e8:	9c 83       	std	Y+4, r25	; 0x04
    34ea:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    34ec:	8b 81       	ldd	r24, Y+3	; 0x03
    34ee:	9c 81       	ldd	r25, Y+4	; 0x04
}
    34f0:	28 96       	adiw	r28, 0x08	; 8
    34f2:	0f b6       	in	r0, 0x3f	; 63
    34f4:	f8 94       	cli
    34f6:	de bf       	out	0x3e, r29	; 62
    34f8:	0f be       	out	0x3f, r0	; 63
    34fa:	cd bf       	out	0x3d, r28	; 61
    34fc:	cf 91       	pop	r28
    34fe:	df 91       	pop	r29
    3500:	08 95       	ret

00003502 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    3502:	df 93       	push	r29
    3504:	cf 93       	push	r28
    3506:	cd b7       	in	r28, 0x3d	; 61
    3508:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    350a:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    350e:	a0 91 af 03 	lds	r26, 0x03AF
    3512:	b0 91 b0 03 	lds	r27, 0x03B0
    3516:	cd 91       	ld	r28, X+
    3518:	cd bf       	out	0x3d, r28	; 61
    351a:	dd 91       	ld	r29, X+
    351c:	de bf       	out	0x3e, r29	; 62
    351e:	ff 91       	pop	r31
    3520:	ef 91       	pop	r30
    3522:	df 91       	pop	r29
    3524:	cf 91       	pop	r28
    3526:	bf 91       	pop	r27
    3528:	af 91       	pop	r26
    352a:	9f 91       	pop	r25
    352c:	8f 91       	pop	r24
    352e:	7f 91       	pop	r23
    3530:	6f 91       	pop	r22
    3532:	5f 91       	pop	r21
    3534:	4f 91       	pop	r20
    3536:	3f 91       	pop	r19
    3538:	2f 91       	pop	r18
    353a:	1f 91       	pop	r17
    353c:	0f 91       	pop	r16
    353e:	ff 90       	pop	r15
    3540:	ef 90       	pop	r14
    3542:	df 90       	pop	r13
    3544:	cf 90       	pop	r12
    3546:	bf 90       	pop	r11
    3548:	af 90       	pop	r10
    354a:	9f 90       	pop	r9
    354c:	8f 90       	pop	r8
    354e:	7f 90       	pop	r7
    3550:	6f 90       	pop	r6
    3552:	5f 90       	pop	r5
    3554:	4f 90       	pop	r4
    3556:	3f 90       	pop	r3
    3558:	2f 90       	pop	r2
    355a:	1f 90       	pop	r1
    355c:	0f 90       	pop	r0
    355e:	0f be       	out	0x3f, r0	; 63
    3560:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    3562:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    3564:	81 e0       	ldi	r24, 0x01	; 1
}
    3566:	cf 91       	pop	r28
    3568:	df 91       	pop	r29
    356a:	08 95       	ret

0000356c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    356c:	df 93       	push	r29
    356e:	cf 93       	push	r28
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    3574:	cf 91       	pop	r28
    3576:	df 91       	pop	r29
    3578:	08 95       	ret

0000357a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    357a:	0f 92       	push	r0
    357c:	0f b6       	in	r0, 0x3f	; 63
    357e:	f8 94       	cli
    3580:	0f 92       	push	r0
    3582:	1f 92       	push	r1
    3584:	11 24       	eor	r1, r1
    3586:	2f 92       	push	r2
    3588:	3f 92       	push	r3
    358a:	4f 92       	push	r4
    358c:	5f 92       	push	r5
    358e:	6f 92       	push	r6
    3590:	7f 92       	push	r7
    3592:	8f 92       	push	r8
    3594:	9f 92       	push	r9
    3596:	af 92       	push	r10
    3598:	bf 92       	push	r11
    359a:	cf 92       	push	r12
    359c:	df 92       	push	r13
    359e:	ef 92       	push	r14
    35a0:	ff 92       	push	r15
    35a2:	0f 93       	push	r16
    35a4:	1f 93       	push	r17
    35a6:	2f 93       	push	r18
    35a8:	3f 93       	push	r19
    35aa:	4f 93       	push	r20
    35ac:	5f 93       	push	r21
    35ae:	6f 93       	push	r22
    35b0:	7f 93       	push	r23
    35b2:	8f 93       	push	r24
    35b4:	9f 93       	push	r25
    35b6:	af 93       	push	r26
    35b8:	bf 93       	push	r27
    35ba:	cf 93       	push	r28
    35bc:	df 93       	push	r29
    35be:	ef 93       	push	r30
    35c0:	ff 93       	push	r31
    35c2:	a0 91 af 03 	lds	r26, 0x03AF
    35c6:	b0 91 b0 03 	lds	r27, 0x03B0
    35ca:	0d b6       	in	r0, 0x3d	; 61
    35cc:	0d 92       	st	X+, r0
    35ce:	0e b6       	in	r0, 0x3e	; 62
    35d0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    35d2:	0e 94 2b 2a 	call	0x5456	; 0x5456 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    35d6:	a0 91 af 03 	lds	r26, 0x03AF
    35da:	b0 91 b0 03 	lds	r27, 0x03B0
    35de:	cd 91       	ld	r28, X+
    35e0:	cd bf       	out	0x3d, r28	; 61
    35e2:	dd 91       	ld	r29, X+
    35e4:	de bf       	out	0x3e, r29	; 62
    35e6:	ff 91       	pop	r31
    35e8:	ef 91       	pop	r30
    35ea:	df 91       	pop	r29
    35ec:	cf 91       	pop	r28
    35ee:	bf 91       	pop	r27
    35f0:	af 91       	pop	r26
    35f2:	9f 91       	pop	r25
    35f4:	8f 91       	pop	r24
    35f6:	7f 91       	pop	r23
    35f8:	6f 91       	pop	r22
    35fa:	5f 91       	pop	r21
    35fc:	4f 91       	pop	r20
    35fe:	3f 91       	pop	r19
    3600:	2f 91       	pop	r18
    3602:	1f 91       	pop	r17
    3604:	0f 91       	pop	r16
    3606:	ff 90       	pop	r15
    3608:	ef 90       	pop	r14
    360a:	df 90       	pop	r13
    360c:	cf 90       	pop	r12
    360e:	bf 90       	pop	r11
    3610:	af 90       	pop	r10
    3612:	9f 90       	pop	r9
    3614:	8f 90       	pop	r8
    3616:	7f 90       	pop	r7
    3618:	6f 90       	pop	r6
    361a:	5f 90       	pop	r5
    361c:	4f 90       	pop	r4
    361e:	3f 90       	pop	r3
    3620:	2f 90       	pop	r2
    3622:	1f 90       	pop	r1
    3624:	0f 90       	pop	r0
    3626:	0f be       	out	0x3f, r0	; 63
    3628:	0f 90       	pop	r0

	asm volatile ( "ret" );
    362a:	08 95       	ret

0000362c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    362c:	0f 92       	push	r0
    362e:	0f b6       	in	r0, 0x3f	; 63
    3630:	f8 94       	cli
    3632:	0f 92       	push	r0
    3634:	1f 92       	push	r1
    3636:	11 24       	eor	r1, r1
    3638:	2f 92       	push	r2
    363a:	3f 92       	push	r3
    363c:	4f 92       	push	r4
    363e:	5f 92       	push	r5
    3640:	6f 92       	push	r6
    3642:	7f 92       	push	r7
    3644:	8f 92       	push	r8
    3646:	9f 92       	push	r9
    3648:	af 92       	push	r10
    364a:	bf 92       	push	r11
    364c:	cf 92       	push	r12
    364e:	df 92       	push	r13
    3650:	ef 92       	push	r14
    3652:	ff 92       	push	r15
    3654:	0f 93       	push	r16
    3656:	1f 93       	push	r17
    3658:	2f 93       	push	r18
    365a:	3f 93       	push	r19
    365c:	4f 93       	push	r20
    365e:	5f 93       	push	r21
    3660:	6f 93       	push	r22
    3662:	7f 93       	push	r23
    3664:	8f 93       	push	r24
    3666:	9f 93       	push	r25
    3668:	af 93       	push	r26
    366a:	bf 93       	push	r27
    366c:	cf 93       	push	r28
    366e:	df 93       	push	r29
    3670:	ef 93       	push	r30
    3672:	ff 93       	push	r31
    3674:	a0 91 af 03 	lds	r26, 0x03AF
    3678:	b0 91 b0 03 	lds	r27, 0x03B0
    367c:	0d b6       	in	r0, 0x3d	; 61
    367e:	0d 92       	st	X+, r0
    3680:	0e b6       	in	r0, 0x3e	; 62
    3682:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    3684:	0e 94 5f 29 	call	0x52be	; 0x52be <xTaskIncrementTick>
    3688:	88 23       	and	r24, r24
    368a:	11 f0       	breq	.+4      	; 0x3690 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    368c:	0e 94 2b 2a 	call	0x5456	; 0x5456 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    3690:	a0 91 af 03 	lds	r26, 0x03AF
    3694:	b0 91 b0 03 	lds	r27, 0x03B0
    3698:	cd 91       	ld	r28, X+
    369a:	cd bf       	out	0x3d, r28	; 61
    369c:	dd 91       	ld	r29, X+
    369e:	de bf       	out	0x3e, r29	; 62
    36a0:	ff 91       	pop	r31
    36a2:	ef 91       	pop	r30
    36a4:	df 91       	pop	r29
    36a6:	cf 91       	pop	r28
    36a8:	bf 91       	pop	r27
    36aa:	af 91       	pop	r26
    36ac:	9f 91       	pop	r25
    36ae:	8f 91       	pop	r24
    36b0:	7f 91       	pop	r23
    36b2:	6f 91       	pop	r22
    36b4:	5f 91       	pop	r21
    36b6:	4f 91       	pop	r20
    36b8:	3f 91       	pop	r19
    36ba:	2f 91       	pop	r18
    36bc:	1f 91       	pop	r17
    36be:	0f 91       	pop	r16
    36c0:	ff 90       	pop	r15
    36c2:	ef 90       	pop	r14
    36c4:	df 90       	pop	r13
    36c6:	cf 90       	pop	r12
    36c8:	bf 90       	pop	r11
    36ca:	af 90       	pop	r10
    36cc:	9f 90       	pop	r9
    36ce:	8f 90       	pop	r8
    36d0:	7f 90       	pop	r7
    36d2:	6f 90       	pop	r6
    36d4:	5f 90       	pop	r5
    36d6:	4f 90       	pop	r4
    36d8:	3f 90       	pop	r3
    36da:	2f 90       	pop	r2
    36dc:	1f 90       	pop	r1
    36de:	0f 90       	pop	r0
    36e0:	0f be       	out	0x3f, r0	; 63
    36e2:	0f 90       	pop	r0

	asm volatile ( "ret" );
    36e4:	08 95       	ret

000036e6 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    36e6:	df 93       	push	r29
    36e8:	cf 93       	push	r28
    36ea:	00 d0       	rcall	.+0      	; 0x36ec <prvSetupTimerInterrupt+0x6>
    36ec:	00 d0       	rcall	.+0      	; 0x36ee <prvSetupTimerInterrupt+0x8>
    36ee:	00 d0       	rcall	.+0      	; 0x36f0 <prvSetupTimerInterrupt+0xa>
    36f0:	cd b7       	in	r28, 0x3d	; 61
    36f2:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    36f4:	80 e4       	ldi	r24, 0x40	; 64
    36f6:	9f e1       	ldi	r25, 0x1F	; 31
    36f8:	a0 e0       	ldi	r26, 0x00	; 0
    36fa:	b0 e0       	ldi	r27, 0x00	; 0
    36fc:	8b 83       	std	Y+3, r24	; 0x03
    36fe:	9c 83       	std	Y+4, r25	; 0x04
    3700:	ad 83       	std	Y+5, r26	; 0x05
    3702:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    3704:	8b 81       	ldd	r24, Y+3	; 0x03
    3706:	9c 81       	ldd	r25, Y+4	; 0x04
    3708:	ad 81       	ldd	r26, Y+5	; 0x05
    370a:	be 81       	ldd	r27, Y+6	; 0x06
    370c:	68 94       	set
    370e:	15 f8       	bld	r1, 5
    3710:	b6 95       	lsr	r27
    3712:	a7 95       	ror	r26
    3714:	97 95       	ror	r25
    3716:	87 95       	ror	r24
    3718:	16 94       	lsr	r1
    371a:	d1 f7       	brne	.-12     	; 0x3710 <prvSetupTimerInterrupt+0x2a>
    371c:	8b 83       	std	Y+3, r24	; 0x03
    371e:	9c 83       	std	Y+4, r25	; 0x04
    3720:	ad 83       	std	Y+5, r26	; 0x05
    3722:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    3724:	8b 81       	ldd	r24, Y+3	; 0x03
    3726:	9c 81       	ldd	r25, Y+4	; 0x04
    3728:	ad 81       	ldd	r26, Y+5	; 0x05
    372a:	be 81       	ldd	r27, Y+6	; 0x06
    372c:	01 97       	sbiw	r24, 0x01	; 1
    372e:	a1 09       	sbc	r26, r1
    3730:	b1 09       	sbc	r27, r1
    3732:	8b 83       	std	Y+3, r24	; 0x03
    3734:	9c 83       	std	Y+4, r25	; 0x04
    3736:	ad 83       	std	Y+5, r26	; 0x05
    3738:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    373a:	8b 81       	ldd	r24, Y+3	; 0x03
    373c:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    373e:	8b 81       	ldd	r24, Y+3	; 0x03
    3740:	9c 81       	ldd	r25, Y+4	; 0x04
    3742:	ad 81       	ldd	r26, Y+5	; 0x05
    3744:	be 81       	ldd	r27, Y+6	; 0x06
    3746:	89 2f       	mov	r24, r25
    3748:	9a 2f       	mov	r25, r26
    374a:	ab 2f       	mov	r26, r27
    374c:	bb 27       	eor	r27, r27
    374e:	8b 83       	std	Y+3, r24	; 0x03
    3750:	9c 83       	std	Y+4, r25	; 0x04
    3752:	ad 83       	std	Y+5, r26	; 0x05
    3754:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    3756:	8b 81       	ldd	r24, Y+3	; 0x03
    3758:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    375a:	eb e4       	ldi	r30, 0x4B	; 75
    375c:	f0 e0       	ldi	r31, 0x00	; 0
    375e:	8a 81       	ldd	r24, Y+2	; 0x02
    3760:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    3762:	ea e4       	ldi	r30, 0x4A	; 74
    3764:	f0 e0       	ldi	r31, 0x00	; 0
    3766:	89 81       	ldd	r24, Y+1	; 0x01
    3768:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    376a:	8b e0       	ldi	r24, 0x0B	; 11
    376c:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    376e:	ee e4       	ldi	r30, 0x4E	; 78
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	89 81       	ldd	r24, Y+1	; 0x01
    3774:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    3776:	e9 e5       	ldi	r30, 0x59	; 89
    3778:	f0 e0       	ldi	r31, 0x00	; 0
    377a:	80 81       	ld	r24, Z
    377c:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    377e:	89 81       	ldd	r24, Y+1	; 0x01
    3780:	80 61       	ori	r24, 0x10	; 16
    3782:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    3784:	e9 e5       	ldi	r30, 0x59	; 89
    3786:	f0 e0       	ldi	r31, 0x00	; 0
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	80 83       	st	Z, r24
}
    378c:	26 96       	adiw	r28, 0x06	; 6
    378e:	0f b6       	in	r0, 0x3f	; 63
    3790:	f8 94       	cli
    3792:	de bf       	out	0x3e, r29	; 62
    3794:	0f be       	out	0x3f, r0	; 63
    3796:	cd bf       	out	0x3d, r28	; 61
    3798:	cf 91       	pop	r28
    379a:	df 91       	pop	r29
    379c:	08 95       	ret

0000379e <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    379e:	0e 94 16 1b 	call	0x362c	; 0x362c <vPortYieldFromTick>
		asm volatile ( "reti" );
    37a2:	18 95       	reti

000037a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    37a4:	df 93       	push	r29
    37a6:	cf 93       	push	r28
    37a8:	00 d0       	rcall	.+0      	; 0x37aa <xQueueGenericReset+0x6>
    37aa:	00 d0       	rcall	.+0      	; 0x37ac <xQueueGenericReset+0x8>
    37ac:	0f 92       	push	r0
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62
    37b2:	9c 83       	std	Y+4, r25	; 0x04
    37b4:	8b 83       	std	Y+3, r24	; 0x03
    37b6:	6d 83       	std	Y+5, r22	; 0x05
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    37b8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ba:	9c 81       	ldd	r25, Y+4	; 0x04
    37bc:	9a 83       	std	Y+2, r25	; 0x02
    37be:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    37c0:	0f b6       	in	r0, 0x3f	; 63
    37c2:	f8 94       	cli
    37c4:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    37c6:	e9 81       	ldd	r30, Y+1	; 0x01
    37c8:	fa 81       	ldd	r31, Y+2	; 0x02
    37ca:	40 81       	ld	r20, Z
    37cc:	51 81       	ldd	r21, Z+1	; 0x01
    37ce:	e9 81       	ldd	r30, Y+1	; 0x01
    37d0:	fa 81       	ldd	r31, Y+2	; 0x02
    37d2:	83 8d       	ldd	r24, Z+27	; 0x1b
    37d4:	28 2f       	mov	r18, r24
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	e9 81       	ldd	r30, Y+1	; 0x01
    37da:	fa 81       	ldd	r31, Y+2	; 0x02
    37dc:	84 8d       	ldd	r24, Z+28	; 0x1c
    37de:	88 2f       	mov	r24, r24
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	bc 01       	movw	r22, r24
    37e4:	26 9f       	mul	r18, r22
    37e6:	c0 01       	movw	r24, r0
    37e8:	27 9f       	mul	r18, r23
    37ea:	90 0d       	add	r25, r0
    37ec:	36 9f       	mul	r19, r22
    37ee:	90 0d       	add	r25, r0
    37f0:	11 24       	eor	r1, r1
    37f2:	84 0f       	add	r24, r20
    37f4:	95 1f       	adc	r25, r21
    37f6:	e9 81       	ldd	r30, Y+1	; 0x01
    37f8:	fa 81       	ldd	r31, Y+2	; 0x02
    37fa:	93 83       	std	Z+3, r25	; 0x03
    37fc:	82 83       	std	Z+2, r24	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    37fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3800:	fa 81       	ldd	r31, Y+2	; 0x02
    3802:	12 8e       	std	Z+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    3804:	e9 81       	ldd	r30, Y+1	; 0x01
    3806:	fa 81       	ldd	r31, Y+2	; 0x02
    3808:	80 81       	ld	r24, Z
    380a:	91 81       	ldd	r25, Z+1	; 0x01
    380c:	e9 81       	ldd	r30, Y+1	; 0x01
    380e:	fa 81       	ldd	r31, Y+2	; 0x02
    3810:	95 83       	std	Z+5, r25	; 0x05
    3812:	84 83       	std	Z+4, r24	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    3814:	e9 81       	ldd	r30, Y+1	; 0x01
    3816:	fa 81       	ldd	r31, Y+2	; 0x02
    3818:	40 81       	ld	r20, Z
    381a:	51 81       	ldd	r21, Z+1	; 0x01
    381c:	e9 81       	ldd	r30, Y+1	; 0x01
    381e:	fa 81       	ldd	r31, Y+2	; 0x02
    3820:	83 8d       	ldd	r24, Z+27	; 0x1b
    3822:	88 2f       	mov	r24, r24
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	9c 01       	movw	r18, r24
    3828:	21 50       	subi	r18, 0x01	; 1
    382a:	30 40       	sbci	r19, 0x00	; 0
    382c:	e9 81       	ldd	r30, Y+1	; 0x01
    382e:	fa 81       	ldd	r31, Y+2	; 0x02
    3830:	84 8d       	ldd	r24, Z+28	; 0x1c
    3832:	88 2f       	mov	r24, r24
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	bc 01       	movw	r22, r24
    3838:	26 9f       	mul	r18, r22
    383a:	c0 01       	movw	r24, r0
    383c:	27 9f       	mul	r18, r23
    383e:	90 0d       	add	r25, r0
    3840:	36 9f       	mul	r19, r22
    3842:	90 0d       	add	r25, r0
    3844:	11 24       	eor	r1, r1
    3846:	84 0f       	add	r24, r20
    3848:	95 1f       	adc	r25, r21
    384a:	e9 81       	ldd	r30, Y+1	; 0x01
    384c:	fa 81       	ldd	r31, Y+2	; 0x02
    384e:	97 83       	std	Z+7, r25	; 0x07
    3850:	86 83       	std	Z+6, r24	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
    3852:	e9 81       	ldd	r30, Y+1	; 0x01
    3854:	fa 81       	ldd	r31, Y+2	; 0x02
    3856:	8f ef       	ldi	r24, 0xFF	; 255
    3858:	85 8f       	std	Z+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
    385a:	e9 81       	ldd	r30, Y+1	; 0x01
    385c:	fa 81       	ldd	r31, Y+2	; 0x02
    385e:	8f ef       	ldi	r24, 0xFF	; 255
    3860:	86 8f       	std	Z+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    3862:	8d 81       	ldd	r24, Y+5	; 0x05
    3864:	88 23       	and	r24, r24
    3866:	79 f4       	brne	.+30     	; 0x3886 <xQueueGenericReset+0xe2>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3868:	e9 81       	ldd	r30, Y+1	; 0x01
    386a:	fa 81       	ldd	r31, Y+2	; 0x02
    386c:	80 85       	ldd	r24, Z+8	; 0x08
    386e:	88 23       	and	r24, r24
    3870:	a1 f0       	breq	.+40     	; 0x389a <xQueueGenericReset+0xf6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3872:	89 81       	ldd	r24, Y+1	; 0x01
    3874:	9a 81       	ldd	r25, Y+2	; 0x02
    3876:	08 96       	adiw	r24, 0x08	; 8
    3878:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <xTaskRemoveFromEventList>
    387c:	88 23       	and	r24, r24
    387e:	69 f0       	breq	.+26     	; 0x389a <xQueueGenericReset+0xf6>
				{
					queueYIELD_IF_USING_PREEMPTION();
    3880:	0e 94 bd 1a 	call	0x357a	; 0x357a <vPortYield>
    3884:	0a c0       	rjmp	.+20     	; 0x389a <xQueueGenericReset+0xf6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    3886:	89 81       	ldd	r24, Y+1	; 0x01
    3888:	9a 81       	ldd	r25, Y+2	; 0x02
    388a:	08 96       	adiw	r24, 0x08	; 8
    388c:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    3890:	89 81       	ldd	r24, Y+1	; 0x01
    3892:	9a 81       	ldd	r25, Y+2	; 0x02
    3894:	41 96       	adiw	r24, 0x11	; 17
    3896:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    389a:	0f 90       	pop	r0
    389c:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    389e:	81 e0       	ldi	r24, 0x01	; 1
}
    38a0:	0f 90       	pop	r0
    38a2:	0f 90       	pop	r0
    38a4:	0f 90       	pop	r0
    38a6:	0f 90       	pop	r0
    38a8:	0f 90       	pop	r0
    38aa:	cf 91       	pop	r28
    38ac:	df 91       	pop	r29
    38ae:	08 95       	ret

000038b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    38b0:	0f 93       	push	r16
    38b2:	1f 93       	push	r17
    38b4:	df 93       	push	r29
    38b6:	cf 93       	push	r28
    38b8:	cd b7       	in	r28, 0x3d	; 61
    38ba:	de b7       	in	r29, 0x3e	; 62
    38bc:	29 97       	sbiw	r28, 0x09	; 9
    38be:	0f b6       	in	r0, 0x3f	; 63
    38c0:	f8 94       	cli
    38c2:	de bf       	out	0x3e, r29	; 62
    38c4:	0f be       	out	0x3f, r0	; 63
    38c6:	cd bf       	out	0x3d, r28	; 61
    38c8:	8f 83       	std	Y+7, r24	; 0x07
    38ca:	68 87       	std	Y+8, r22	; 0x08
    38cc:	49 87       	std	Y+9, r20	; 0x09
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    38ce:	88 85       	ldd	r24, Y+8	; 0x08
    38d0:	88 23       	and	r24, r24
    38d2:	19 f4       	brne	.+6      	; 0x38da <xQueueGenericCreate+0x2a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    38d4:	1c 82       	std	Y+4, r1	; 0x04
    38d6:	1b 82       	std	Y+3, r1	; 0x03
    38d8:	10 c0       	rjmp	.+32     	; 0x38fa <xQueueGenericCreate+0x4a>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    38da:	8f 81       	ldd	r24, Y+7	; 0x07
    38dc:	28 2f       	mov	r18, r24
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	88 85       	ldd	r24, Y+8	; 0x08
    38e2:	88 2f       	mov	r24, r24
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	ac 01       	movw	r20, r24
    38e8:	24 9f       	mul	r18, r20
    38ea:	c0 01       	movw	r24, r0
    38ec:	25 9f       	mul	r18, r21
    38ee:	90 0d       	add	r25, r0
    38f0:	34 9f       	mul	r19, r20
    38f2:	90 0d       	add	r25, r0
    38f4:	11 24       	eor	r1, r1
    38f6:	9c 83       	std	Y+4, r25	; 0x04
    38f8:	8b 83       	std	Y+3, r24	; 0x03
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    38fa:	8b 81       	ldd	r24, Y+3	; 0x03
    38fc:	9c 81       	ldd	r25, Y+4	; 0x04
    38fe:	4f 96       	adiw	r24, 0x1f	; 31
    3900:	0e 94 78 14 	call	0x28f0	; 0x28f0 <pvPortMalloc>
    3904:	9e 83       	std	Y+6, r25	; 0x06
    3906:	8d 83       	std	Y+5, r24	; 0x05

		if( pxNewQueue != NULL )
    3908:	8d 81       	ldd	r24, Y+5	; 0x05
    390a:	9e 81       	ldd	r25, Y+6	; 0x06
    390c:	00 97       	sbiw	r24, 0x00	; 0
    390e:	81 f0       	breq	.+32     	; 0x3930 <xQueueGenericCreate+0x80>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    3910:	8d 81       	ldd	r24, Y+5	; 0x05
    3912:	9e 81       	ldd	r25, Y+6	; 0x06
    3914:	4f 96       	adiw	r24, 0x1f	; 31
    3916:	9a 83       	std	Y+2, r25	; 0x02
    3918:	89 83       	std	Y+1, r24	; 0x01
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    391a:	29 81       	ldd	r18, Y+1	; 0x01
    391c:	3a 81       	ldd	r19, Y+2	; 0x02
    391e:	ed 81       	ldd	r30, Y+5	; 0x05
    3920:	fe 81       	ldd	r31, Y+6	; 0x06
    3922:	8f 81       	ldd	r24, Y+7	; 0x07
    3924:	68 85       	ldd	r22, Y+8	; 0x08
    3926:	a9 01       	movw	r20, r18
    3928:	29 85       	ldd	r18, Y+9	; 0x09
    392a:	8f 01       	movw	r16, r30
    392c:	0e 94 a5 1c 	call	0x394a	; 0x394a <prvInitialiseNewQueue>
		}

		return pxNewQueue;
    3930:	8d 81       	ldd	r24, Y+5	; 0x05
    3932:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    3934:	29 96       	adiw	r28, 0x09	; 9
    3936:	0f b6       	in	r0, 0x3f	; 63
    3938:	f8 94       	cli
    393a:	de bf       	out	0x3e, r29	; 62
    393c:	0f be       	out	0x3f, r0	; 63
    393e:	cd bf       	out	0x3d, r28	; 61
    3940:	cf 91       	pop	r28
    3942:	df 91       	pop	r29
    3944:	1f 91       	pop	r17
    3946:	0f 91       	pop	r16
    3948:	08 95       	ret

0000394a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    394a:	0f 93       	push	r16
    394c:	1f 93       	push	r17
    394e:	df 93       	push	r29
    3950:	cf 93       	push	r28
    3952:	cd b7       	in	r28, 0x3d	; 61
    3954:	de b7       	in	r29, 0x3e	; 62
    3956:	27 97       	sbiw	r28, 0x07	; 7
    3958:	0f b6       	in	r0, 0x3f	; 63
    395a:	f8 94       	cli
    395c:	de bf       	out	0x3e, r29	; 62
    395e:	0f be       	out	0x3f, r0	; 63
    3960:	cd bf       	out	0x3d, r28	; 61
    3962:	89 83       	std	Y+1, r24	; 0x01
    3964:	6a 83       	std	Y+2, r22	; 0x02
    3966:	5c 83       	std	Y+4, r21	; 0x04
    3968:	4b 83       	std	Y+3, r20	; 0x03
    396a:	2d 83       	std	Y+5, r18	; 0x05
    396c:	1f 83       	std	Y+7, r17	; 0x07
    396e:	0e 83       	std	Y+6, r16	; 0x06
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    3970:	8a 81       	ldd	r24, Y+2	; 0x02
    3972:	88 23       	and	r24, r24
    3974:	39 f4       	brne	.+14     	; 0x3984 <prvInitialiseNewQueue+0x3a>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    3976:	8e 81       	ldd	r24, Y+6	; 0x06
    3978:	9f 81       	ldd	r25, Y+7	; 0x07
    397a:	ee 81       	ldd	r30, Y+6	; 0x06
    397c:	ff 81       	ldd	r31, Y+7	; 0x07
    397e:	91 83       	std	Z+1, r25	; 0x01
    3980:	80 83       	st	Z, r24
    3982:	06 c0       	rjmp	.+12     	; 0x3990 <prvInitialiseNewQueue+0x46>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    3984:	8b 81       	ldd	r24, Y+3	; 0x03
    3986:	9c 81       	ldd	r25, Y+4	; 0x04
    3988:	ee 81       	ldd	r30, Y+6	; 0x06
    398a:	ff 81       	ldd	r31, Y+7	; 0x07
    398c:	91 83       	std	Z+1, r25	; 0x01
    398e:	80 83       	st	Z, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    3990:	ee 81       	ldd	r30, Y+6	; 0x06
    3992:	ff 81       	ldd	r31, Y+7	; 0x07
    3994:	89 81       	ldd	r24, Y+1	; 0x01
    3996:	83 8f       	std	Z+27, r24	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
    3998:	ee 81       	ldd	r30, Y+6	; 0x06
    399a:	ff 81       	ldd	r31, Y+7	; 0x07
    399c:	8a 81       	ldd	r24, Y+2	; 0x02
    399e:	84 8f       	std	Z+28, r24	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    39a0:	8e 81       	ldd	r24, Y+6	; 0x06
    39a2:	9f 81       	ldd	r25, Y+7	; 0x07
    39a4:	61 e0       	ldi	r22, 0x01	; 1
    39a6:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    39aa:	27 96       	adiw	r28, 0x07	; 7
    39ac:	0f b6       	in	r0, 0x3f	; 63
    39ae:	f8 94       	cli
    39b0:	de bf       	out	0x3e, r29	; 62
    39b2:	0f be       	out	0x3f, r0	; 63
    39b4:	cd bf       	out	0x3d, r28	; 61
    39b6:	cf 91       	pop	r28
    39b8:	df 91       	pop	r29
    39ba:	1f 91       	pop	r17
    39bc:	0f 91       	pop	r16
    39be:	08 95       	ret

000039c0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    39c0:	df 93       	push	r29
    39c2:	cf 93       	push	r28
    39c4:	00 d0       	rcall	.+0      	; 0x39c6 <prvInitialiseMutex+0x6>
    39c6:	cd b7       	in	r28, 0x3d	; 61
    39c8:	de b7       	in	r29, 0x3e	; 62
    39ca:	9a 83       	std	Y+2, r25	; 0x02
    39cc:	89 83       	std	Y+1, r24	; 0x01
		if( pxNewQueue != NULL )
    39ce:	89 81       	ldd	r24, Y+1	; 0x01
    39d0:	9a 81       	ldd	r25, Y+2	; 0x02
    39d2:	00 97       	sbiw	r24, 0x00	; 0
    39d4:	a1 f0       	breq	.+40     	; 0x39fe <prvInitialiseMutex+0x3e>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    39d6:	e9 81       	ldd	r30, Y+1	; 0x01
    39d8:	fa 81       	ldd	r31, Y+2	; 0x02
    39da:	13 82       	std	Z+3, r1	; 0x03
    39dc:	12 82       	std	Z+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    39de:	e9 81       	ldd	r30, Y+1	; 0x01
    39e0:	fa 81       	ldd	r31, Y+2	; 0x02
    39e2:	11 82       	std	Z+1, r1	; 0x01
    39e4:	10 82       	st	Z, r1

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    39e6:	e9 81       	ldd	r30, Y+1	; 0x01
    39e8:	fa 81       	ldd	r31, Y+2	; 0x02
    39ea:	16 82       	std	Z+6, r1	; 0x06

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    39ec:	89 81       	ldd	r24, Y+1	; 0x01
    39ee:	9a 81       	ldd	r25, Y+2	; 0x02
    39f0:	60 e0       	ldi	r22, 0x00	; 0
    39f2:	70 e0       	ldi	r23, 0x00	; 0
    39f4:	40 e0       	ldi	r20, 0x00	; 0
    39f6:	50 e0       	ldi	r21, 0x00	; 0
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    39fe:	0f 90       	pop	r0
    3a00:	0f 90       	pop	r0
    3a02:	cf 91       	pop	r28
    3a04:	df 91       	pop	r29
    3a06:	08 95       	ret

00003a08 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    3a08:	df 93       	push	r29
    3a0a:	cf 93       	push	r28
    3a0c:	00 d0       	rcall	.+0      	; 0x3a0e <xQueueCreateMutex+0x6>
    3a0e:	00 d0       	rcall	.+0      	; 0x3a10 <xQueueCreateMutex+0x8>
    3a10:	0f 92       	push	r0
    3a12:	cd b7       	in	r28, 0x3d	; 61
    3a14:	de b7       	in	r29, 0x3e	; 62
    3a16:	8d 83       	std	Y+5, r24	; 0x05
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	8a 83       	std	Y+2, r24	; 0x02
    3a1c:	19 82       	std	Y+1, r1	; 0x01

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    3a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a20:	69 81       	ldd	r22, Y+1	; 0x01
    3a22:	4d 81       	ldd	r20, Y+5	; 0x05
    3a24:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <xQueueGenericCreate>
    3a28:	9c 83       	std	Y+4, r25	; 0x04
    3a2a:	8b 83       	std	Y+3, r24	; 0x03
		prvInitialiseMutex( pxNewQueue );
    3a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a30:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <prvInitialiseMutex>

		return pxNewQueue;
    3a34:	8b 81       	ldd	r24, Y+3	; 0x03
    3a36:	9c 81       	ldd	r25, Y+4	; 0x04
	}
    3a38:	0f 90       	pop	r0
    3a3a:	0f 90       	pop	r0
    3a3c:	0f 90       	pop	r0
    3a3e:	0f 90       	pop	r0
    3a40:	0f 90       	pop	r0
    3a42:	cf 91       	pop	r28
    3a44:	df 91       	pop	r29
    3a46:	08 95       	ret

00003a48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    3a48:	df 93       	push	r29
    3a4a:	cf 93       	push	r28
    3a4c:	cd b7       	in	r28, 0x3d	; 61
    3a4e:	de b7       	in	r29, 0x3e	; 62
    3a50:	2f 97       	sbiw	r28, 0x0f	; 15
    3a52:	0f b6       	in	r0, 0x3f	; 63
    3a54:	f8 94       	cli
    3a56:	de bf       	out	0x3e, r29	; 62
    3a58:	0f be       	out	0x3f, r0	; 63
    3a5a:	cd bf       	out	0x3d, r28	; 61
    3a5c:	99 87       	std	Y+9, r25	; 0x09
    3a5e:	88 87       	std	Y+8, r24	; 0x08
    3a60:	7b 87       	std	Y+11, r23	; 0x0b
    3a62:	6a 87       	std	Y+10, r22	; 0x0a
    3a64:	5d 87       	std	Y+13, r21	; 0x0d
    3a66:	4c 87       	std	Y+12, r20	; 0x0c
    3a68:	2e 87       	std	Y+14, r18	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    3a6a:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    3a6c:	88 85       	ldd	r24, Y+8	; 0x08
    3a6e:	99 85       	ldd	r25, Y+9	; 0x09
    3a70:	9a 83       	std	Y+2, r25	; 0x02
    3a72:	89 83       	std	Y+1, r24	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3a74:	0f b6       	in	r0, 0x3f	; 63
    3a76:	f8 94       	cli
    3a78:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    3a7a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a7c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a7e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3a80:	e9 81       	ldd	r30, Y+1	; 0x01
    3a82:	fa 81       	ldd	r31, Y+2	; 0x02
    3a84:	83 8d       	ldd	r24, Z+27	; 0x1b
    3a86:	98 17       	cp	r25, r24
    3a88:	18 f0       	brcs	.+6      	; 0x3a90 <xQueueGenericSend+0x48>
    3a8a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a8c:	82 30       	cpi	r24, 0x02	; 2
    3a8e:	11 f5       	brne	.+68     	; 0x3ad4 <xQueueGenericSend+0x8c>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3a90:	89 81       	ldd	r24, Y+1	; 0x01
    3a92:	9a 81       	ldd	r25, Y+2	; 0x02
    3a94:	2a 85       	ldd	r18, Y+10	; 0x0a
    3a96:	3b 85       	ldd	r19, Y+11	; 0x0b
    3a98:	b9 01       	movw	r22, r18
    3a9a:	4e 85       	ldd	r20, Y+14	; 0x0e
    3a9c:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <prvCopyDataToQueue>
    3aa0:	8b 83       	std	Y+3, r24	; 0x03
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3aa2:	e9 81       	ldd	r30, Y+1	; 0x01
    3aa4:	fa 81       	ldd	r31, Y+2	; 0x02
    3aa6:	81 89       	ldd	r24, Z+17	; 0x11
    3aa8:	88 23       	and	r24, r24
    3aaa:	51 f0       	breq	.+20     	; 0x3ac0 <xQueueGenericSend+0x78>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3aac:	89 81       	ldd	r24, Y+1	; 0x01
    3aae:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab0:	41 96       	adiw	r24, 0x11	; 17
    3ab2:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <xTaskRemoveFromEventList>
    3ab6:	88 23       	and	r24, r24
    3ab8:	41 f0       	breq	.+16     	; 0x3aca <xQueueGenericSend+0x82>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    3aba:	0e 94 bd 1a 	call	0x357a	; 0x357a <vPortYield>
    3abe:	05 c0       	rjmp	.+10     	; 0x3aca <xQueueGenericSend+0x82>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    3ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac2:	88 23       	and	r24, r24
    3ac4:	11 f0       	breq	.+4      	; 0x3aca <xQueueGenericSend+0x82>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    3ac6:	0e 94 bd 1a 	call	0x357a	; 0x357a <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    3aca:	0f 90       	pop	r0
    3acc:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    3ace:	81 e0       	ldi	r24, 0x01	; 1
    3ad0:	8f 87       	std	Y+15, r24	; 0x0f
    3ad2:	5c c0       	rjmp	.+184    	; 0x3b8c <xQueueGenericSend+0x144>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    3ad4:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ad6:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ad8:	00 97       	sbiw	r24, 0x00	; 0
    3ada:	21 f4       	brne	.+8      	; 0x3ae4 <xQueueGenericSend+0x9c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3adc:	0f 90       	pop	r0
    3ade:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    3ae0:	1f 86       	std	Y+15, r1	; 0x0f
    3ae2:	54 c0       	rjmp	.+168    	; 0x3b8c <xQueueGenericSend+0x144>
				}
				else if( xEntryTimeSet == pdFALSE )
    3ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ae6:	88 23       	and	r24, r24
    3ae8:	31 f4       	brne	.+12     	; 0x3af6 <xQueueGenericSend+0xae>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3aea:	ce 01       	movw	r24, r28
    3aec:	05 96       	adiw	r24, 0x05	; 5
    3aee:	0e 94 ba 2b 	call	0x5774	; 0x5774 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3af2:	81 e0       	ldi	r24, 0x01	; 1
    3af4:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    3af6:	0f 90       	pop	r0
    3af8:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3afa:	0e 94 63 28 	call	0x50c6	; 0x50c6 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3afe:	0f b6       	in	r0, 0x3f	; 63
    3b00:	f8 94       	cli
    3b02:	0f 92       	push	r0
    3b04:	e9 81       	ldd	r30, Y+1	; 0x01
    3b06:	fa 81       	ldd	r31, Y+2	; 0x02
    3b08:	85 8d       	ldd	r24, Z+29	; 0x1d
    3b0a:	8f 3f       	cpi	r24, 0xFF	; 255
    3b0c:	19 f4       	brne	.+6      	; 0x3b14 <xQueueGenericSend+0xcc>
    3b0e:	e9 81       	ldd	r30, Y+1	; 0x01
    3b10:	fa 81       	ldd	r31, Y+2	; 0x02
    3b12:	15 8e       	std	Z+29, r1	; 0x1d
    3b14:	e9 81       	ldd	r30, Y+1	; 0x01
    3b16:	fa 81       	ldd	r31, Y+2	; 0x02
    3b18:	86 8d       	ldd	r24, Z+30	; 0x1e
    3b1a:	8f 3f       	cpi	r24, 0xFF	; 255
    3b1c:	19 f4       	brne	.+6      	; 0x3b24 <xQueueGenericSend+0xdc>
    3b1e:	e9 81       	ldd	r30, Y+1	; 0x01
    3b20:	fa 81       	ldd	r31, Y+2	; 0x02
    3b22:	16 8e       	std	Z+30, r1	; 0x1e
    3b24:	0f 90       	pop	r0
    3b26:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3b28:	ce 01       	movw	r24, r28
    3b2a:	05 96       	adiw	r24, 0x05	; 5
    3b2c:	9e 01       	movw	r18, r28
    3b2e:	24 5f       	subi	r18, 0xF4	; 244
    3b30:	3f 4f       	sbci	r19, 0xFF	; 255
    3b32:	b9 01       	movw	r22, r18
    3b34:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <xTaskCheckForTimeOut>
    3b38:	88 23       	and	r24, r24
    3b3a:	09 f5       	brne	.+66     	; 0x3b7e <xQueueGenericSend+0x136>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    3b3c:	89 81       	ldd	r24, Y+1	; 0x01
    3b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b40:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <prvIsQueueFull>
    3b44:	88 23       	and	r24, r24
    3b46:	a1 f0       	breq	.+40     	; 0x3b70 <xQueueGenericSend+0x128>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    3b48:	89 81       	ldd	r24, Y+1	; 0x01
    3b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b4c:	08 96       	adiw	r24, 0x08	; 8
    3b4e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3b50:	3d 85       	ldd	r19, Y+13	; 0x0d
    3b52:	b9 01       	movw	r22, r18
    3b54:	0e 94 98 2a 	call	0x5530	; 0x5530 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    3b58:	89 81       	ldd	r24, Y+1	; 0x01
    3b5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b5c:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    3b60:	0e 94 6f 28 	call	0x50de	; 0x50de <xTaskResumeAll>
    3b64:	88 23       	and	r24, r24
    3b66:	09 f0       	breq	.+2      	; 0x3b6a <xQueueGenericSend+0x122>
    3b68:	85 cf       	rjmp	.-246    	; 0x3a74 <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
    3b6a:	0e 94 bd 1a 	call	0x357a	; 0x357a <vPortYield>
    3b6e:	82 cf       	rjmp	.-252    	; 0x3a74 <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3b70:	89 81       	ldd	r24, Y+1	; 0x01
    3b72:	9a 81       	ldd	r25, Y+2	; 0x02
    3b74:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    3b78:	0e 94 6f 28 	call	0x50de	; 0x50de <xTaskResumeAll>
    3b7c:	7b cf       	rjmp	.-266    	; 0x3a74 <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    3b7e:	89 81       	ldd	r24, Y+1	; 0x01
    3b80:	9a 81       	ldd	r25, Y+2	; 0x02
    3b82:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3b86:	0e 94 6f 28 	call	0x50de	; 0x50de <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    3b8a:	1f 86       	std	Y+15, r1	; 0x0f
    3b8c:	8f 85       	ldd	r24, Y+15	; 0x0f
		}
	}
}
    3b8e:	2f 96       	adiw	r28, 0x0f	; 15
    3b90:	0f b6       	in	r0, 0x3f	; 63
    3b92:	f8 94       	cli
    3b94:	de bf       	out	0x3e, r29	; 62
    3b96:	0f be       	out	0x3f, r0	; 63
    3b98:	cd bf       	out	0x3d, r28	; 61
    3b9a:	cf 91       	pop	r28
    3b9c:	df 91       	pop	r29
    3b9e:	08 95       	ret

00003ba0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    3ba0:	df 93       	push	r29
    3ba2:	cf 93       	push	r28
    3ba4:	cd b7       	in	r28, 0x3d	; 61
    3ba6:	de b7       	in	r29, 0x3e	; 62
    3ba8:	2c 97       	sbiw	r28, 0x0c	; 12
    3baa:	0f b6       	in	r0, 0x3f	; 63
    3bac:	f8 94       	cli
    3bae:	de bf       	out	0x3e, r29	; 62
    3bb0:	0f be       	out	0x3f, r0	; 63
    3bb2:	cd bf       	out	0x3d, r28	; 61
    3bb4:	9f 83       	std	Y+7, r25	; 0x07
    3bb6:	8e 83       	std	Y+6, r24	; 0x06
    3bb8:	79 87       	std	Y+9, r23	; 0x09
    3bba:	68 87       	std	Y+8, r22	; 0x08
    3bbc:	5b 87       	std	Y+11, r21	; 0x0b
    3bbe:	4a 87       	std	Y+10, r20	; 0x0a
    3bc0:	2c 87       	std	Y+12, r18	; 0x0c
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    3bc2:	8e 81       	ldd	r24, Y+6	; 0x06
    3bc4:	9f 81       	ldd	r25, Y+7	; 0x07
    3bc6:	9b 83       	std	Y+3, r25	; 0x03
    3bc8:	8a 83       	std	Y+2, r24	; 0x02
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3bca:	1c 82       	std	Y+4, r1	; 0x04
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    3bcc:	ea 81       	ldd	r30, Y+2	; 0x02
    3bce:	fb 81       	ldd	r31, Y+3	; 0x03
    3bd0:	92 8d       	ldd	r25, Z+26	; 0x1a
    3bd2:	ea 81       	ldd	r30, Y+2	; 0x02
    3bd4:	fb 81       	ldd	r31, Y+3	; 0x03
    3bd6:	83 8d       	ldd	r24, Z+27	; 0x1b
    3bd8:	98 17       	cp	r25, r24
    3bda:	18 f0       	brcs	.+6      	; 0x3be2 <xQueueGenericSendFromISR+0x42>
    3bdc:	8c 85       	ldd	r24, Y+12	; 0x0c
    3bde:	82 30       	cpi	r24, 0x02	; 2
    3be0:	61 f5       	brne	.+88     	; 0x3c3a <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    3be2:	ea 81       	ldd	r30, Y+2	; 0x02
    3be4:	fb 81       	ldd	r31, Y+3	; 0x03
    3be6:	86 8d       	ldd	r24, Z+30	; 0x1e
    3be8:	89 83       	std	Y+1, r24	; 0x01
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3bea:	8a 81       	ldd	r24, Y+2	; 0x02
    3bec:	9b 81       	ldd	r25, Y+3	; 0x03
    3bee:	28 85       	ldd	r18, Y+8	; 0x08
    3bf0:	39 85       	ldd	r19, Y+9	; 0x09
    3bf2:	b9 01       	movw	r22, r18
    3bf4:	4c 85       	ldd	r20, Y+12	; 0x0c
    3bf6:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    3bfa:	89 81       	ldd	r24, Y+1	; 0x01
    3bfc:	8f 3f       	cpi	r24, 0xFF	; 255
    3bfe:	a9 f4       	brne	.+42     	; 0x3c2a <xQueueGenericSendFromISR+0x8a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3c00:	ea 81       	ldd	r30, Y+2	; 0x02
    3c02:	fb 81       	ldd	r31, Y+3	; 0x03
    3c04:	81 89       	ldd	r24, Z+17	; 0x11
    3c06:	88 23       	and	r24, r24
    3c08:	a9 f0       	breq	.+42     	; 0x3c34 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c0e:	41 96       	adiw	r24, 0x11	; 17
    3c10:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <xTaskRemoveFromEventList>
    3c14:	88 23       	and	r24, r24
    3c16:	71 f0       	breq	.+28     	; 0x3c34 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    3c18:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c1c:	00 97       	sbiw	r24, 0x00	; 0
    3c1e:	51 f0       	breq	.+20     	; 0x3c34 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    3c20:	ea 85       	ldd	r30, Y+10	; 0x0a
    3c22:	fb 85       	ldd	r31, Y+11	; 0x0b
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	80 83       	st	Z, r24
    3c28:	05 c0       	rjmp	.+10     	; 0x3c34 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    3c2a:	89 81       	ldd	r24, Y+1	; 0x01
    3c2c:	8f 5f       	subi	r24, 0xFF	; 255
    3c2e:	ea 81       	ldd	r30, Y+2	; 0x02
    3c30:	fb 81       	ldd	r31, Y+3	; 0x03
    3c32:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    3c34:	81 e0       	ldi	r24, 0x01	; 1
    3c36:	8d 83       	std	Y+5, r24	; 0x05
    3c38:	01 c0       	rjmp	.+2      	; 0x3c3c <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3c3a:	1d 82       	std	Y+5, r1	; 0x05
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3c3c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3c3e:	2c 96       	adiw	r28, 0x0c	; 12
    3c40:	0f b6       	in	r0, 0x3f	; 63
    3c42:	f8 94       	cli
    3c44:	de bf       	out	0x3e, r29	; 62
    3c46:	0f be       	out	0x3f, r0	; 63
    3c48:	cd bf       	out	0x3d, r28	; 61
    3c4a:	cf 91       	pop	r28
    3c4c:	df 91       	pop	r29
    3c4e:	08 95       	ret

00003c50 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    3c50:	df 93       	push	r29
    3c52:	cf 93       	push	r28
    3c54:	cd b7       	in	r28, 0x3d	; 61
    3c56:	de b7       	in	r29, 0x3e	; 62
    3c58:	2a 97       	sbiw	r28, 0x0a	; 10
    3c5a:	0f b6       	in	r0, 0x3f	; 63
    3c5c:	f8 94       	cli
    3c5e:	de bf       	out	0x3e, r29	; 62
    3c60:	0f be       	out	0x3f, r0	; 63
    3c62:	cd bf       	out	0x3d, r28	; 61
    3c64:	98 87       	std	Y+8, r25	; 0x08
    3c66:	8f 83       	std	Y+7, r24	; 0x07
    3c68:	7a 87       	std	Y+10, r23	; 0x0a
    3c6a:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    3c6c:	8f 81       	ldd	r24, Y+7	; 0x07
    3c6e:	98 85       	ldd	r25, Y+8	; 0x08
    3c70:	9c 83       	std	Y+4, r25	; 0x04
    3c72:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3c74:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3c76:	eb 81       	ldd	r30, Y+3	; 0x03
    3c78:	fc 81       	ldd	r31, Y+4	; 0x04
    3c7a:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c7c:	8a 83       	std	Y+2, r24	; 0x02

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    3c7e:	eb 81       	ldd	r30, Y+3	; 0x03
    3c80:	fc 81       	ldd	r31, Y+4	; 0x04
    3c82:	93 8d       	ldd	r25, Z+27	; 0x1b
    3c84:	8a 81       	ldd	r24, Y+2	; 0x02
    3c86:	89 17       	cp	r24, r25
    3c88:	48 f5       	brcc	.+82     	; 0x3cdc <xQueueGiveFromISR+0x8c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    3c8a:	eb 81       	ldd	r30, Y+3	; 0x03
    3c8c:	fc 81       	ldd	r31, Y+4	; 0x04
    3c8e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3c90:	89 83       	std	Y+1, r24	; 0x01
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    3c92:	8a 81       	ldd	r24, Y+2	; 0x02
    3c94:	8f 5f       	subi	r24, 0xFF	; 255
    3c96:	eb 81       	ldd	r30, Y+3	; 0x03
    3c98:	fc 81       	ldd	r31, Y+4	; 0x04
    3c9a:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    3c9c:	89 81       	ldd	r24, Y+1	; 0x01
    3c9e:	8f 3f       	cpi	r24, 0xFF	; 255
    3ca0:	a9 f4       	brne	.+42     	; 0x3ccc <xQueueGiveFromISR+0x7c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3ca2:	eb 81       	ldd	r30, Y+3	; 0x03
    3ca4:	fc 81       	ldd	r31, Y+4	; 0x04
    3ca6:	81 89       	ldd	r24, Z+17	; 0x11
    3ca8:	88 23       	and	r24, r24
    3caa:	a9 f0       	breq	.+42     	; 0x3cd6 <xQueueGiveFromISR+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3cac:	8b 81       	ldd	r24, Y+3	; 0x03
    3cae:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb0:	41 96       	adiw	r24, 0x11	; 17
    3cb2:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <xTaskRemoveFromEventList>
    3cb6:	88 23       	and	r24, r24
    3cb8:	71 f0       	breq	.+28     	; 0x3cd6 <xQueueGiveFromISR+0x86>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    3cba:	89 85       	ldd	r24, Y+9	; 0x09
    3cbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cbe:	00 97       	sbiw	r24, 0x00	; 0
    3cc0:	51 f0       	breq	.+20     	; 0x3cd6 <xQueueGiveFromISR+0x86>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    3cc2:	e9 85       	ldd	r30, Y+9	; 0x09
    3cc4:	fa 85       	ldd	r31, Y+10	; 0x0a
    3cc6:	81 e0       	ldi	r24, 0x01	; 1
    3cc8:	80 83       	st	Z, r24
    3cca:	05 c0       	rjmp	.+10     	; 0x3cd6 <xQueueGiveFromISR+0x86>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    3ccc:	89 81       	ldd	r24, Y+1	; 0x01
    3cce:	8f 5f       	subi	r24, 0xFF	; 255
    3cd0:	eb 81       	ldd	r30, Y+3	; 0x03
    3cd2:	fc 81       	ldd	r31, Y+4	; 0x04
    3cd4:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    3cd6:	81 e0       	ldi	r24, 0x01	; 1
    3cd8:	8e 83       	std	Y+6, r24	; 0x06
    3cda:	01 c0       	rjmp	.+2      	; 0x3cde <xQueueGiveFromISR+0x8e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3cdc:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3cde:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3ce0:	2a 96       	adiw	r28, 0x0a	; 10
    3ce2:	0f b6       	in	r0, 0x3f	; 63
    3ce4:	f8 94       	cli
    3ce6:	de bf       	out	0x3e, r29	; 62
    3ce8:	0f be       	out	0x3f, r0	; 63
    3cea:	cd bf       	out	0x3d, r28	; 61
    3cec:	cf 91       	pop	r28
    3cee:	df 91       	pop	r29
    3cf0:	08 95       	ret

00003cf2 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    3cf2:	df 93       	push	r29
    3cf4:	cf 93       	push	r28
    3cf6:	cd b7       	in	r28, 0x3d	; 61
    3cf8:	de b7       	in	r29, 0x3e	; 62
    3cfa:	61 97       	sbiw	r28, 0x11	; 17
    3cfc:	0f b6       	in	r0, 0x3f	; 63
    3cfe:	f8 94       	cli
    3d00:	de bf       	out	0x3e, r29	; 62
    3d02:	0f be       	out	0x3f, r0	; 63
    3d04:	cd bf       	out	0x3d, r28	; 61
    3d06:	9b 87       	std	Y+11, r25	; 0x0b
    3d08:	8a 87       	std	Y+10, r24	; 0x0a
    3d0a:	7d 87       	std	Y+13, r23	; 0x0d
    3d0c:	6c 87       	std	Y+12, r22	; 0x0c
    3d0e:	5f 87       	std	Y+15, r21	; 0x0f
    3d10:	4e 87       	std	Y+14, r20	; 0x0e
    3d12:	28 8b       	std	Y+16, r18	; 0x10
BaseType_t xEntryTimeSet = pdFALSE;
    3d14:	1e 82       	std	Y+6, r1	; 0x06
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    3d16:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d18:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d1a:	9b 83       	std	Y+3, r25	; 0x03
    3d1c:	8a 83       	std	Y+2, r24	; 0x02
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3d1e:	0f b6       	in	r0, 0x3f	; 63
    3d20:	f8 94       	cli
    3d22:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3d24:	ea 81       	ldd	r30, Y+2	; 0x02
    3d26:	fb 81       	ldd	r31, Y+3	; 0x03
    3d28:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d2a:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    3d2c:	89 81       	ldd	r24, Y+1	; 0x01
    3d2e:	88 23       	and	r24, r24
    3d30:	09 f4       	brne	.+2      	; 0x3d34 <xQueueGenericReceive+0x42>
    3d32:	49 c0       	rjmp	.+146    	; 0x3dc6 <xQueueGenericReceive+0xd4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    3d34:	ea 81       	ldd	r30, Y+2	; 0x02
    3d36:	fb 81       	ldd	r31, Y+3	; 0x03
    3d38:	86 81       	ldd	r24, Z+6	; 0x06
    3d3a:	97 81       	ldd	r25, Z+7	; 0x07
    3d3c:	9d 83       	std	Y+5, r25	; 0x05
    3d3e:	8c 83       	std	Y+4, r24	; 0x04

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    3d40:	8a 81       	ldd	r24, Y+2	; 0x02
    3d42:	9b 81       	ldd	r25, Y+3	; 0x03
    3d44:	2c 85       	ldd	r18, Y+12	; 0x0c
    3d46:	3d 85       	ldd	r19, Y+13	; 0x0d
    3d48:	b9 01       	movw	r22, r18
    3d4a:	0e 94 14 21 	call	0x4228	; 0x4228 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    3d4e:	88 89       	ldd	r24, Y+16	; 0x10
    3d50:	88 23       	and	r24, r24
    3d52:	01 f5       	brne	.+64     	; 0x3d94 <xQueueGenericReceive+0xa2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    3d54:	89 81       	ldd	r24, Y+1	; 0x01
    3d56:	81 50       	subi	r24, 0x01	; 1
    3d58:	ea 81       	ldd	r30, Y+2	; 0x02
    3d5a:	fb 81       	ldd	r31, Y+3	; 0x03
    3d5c:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3d5e:	ea 81       	ldd	r30, Y+2	; 0x02
    3d60:	fb 81       	ldd	r31, Y+3	; 0x03
    3d62:	80 81       	ld	r24, Z
    3d64:	91 81       	ldd	r25, Z+1	; 0x01
    3d66:	00 97       	sbiw	r24, 0x00	; 0
    3d68:	31 f4       	brne	.+12     	; 0x3d76 <xQueueGenericReceive+0x84>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    3d6a:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <pvTaskIncrementMutexHeldCount>
    3d6e:	ea 81       	ldd	r30, Y+2	; 0x02
    3d70:	fb 81       	ldd	r31, Y+3	; 0x03
    3d72:	93 83       	std	Z+3, r25	; 0x03
    3d74:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3d76:	ea 81       	ldd	r30, Y+2	; 0x02
    3d78:	fb 81       	ldd	r31, Y+3	; 0x03
    3d7a:	80 85       	ldd	r24, Z+8	; 0x08
    3d7c:	88 23       	and	r24, r24
    3d7e:	f1 f0       	breq	.+60     	; 0x3dbc <xQueueGenericReceive+0xca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3d80:	8a 81       	ldd	r24, Y+2	; 0x02
    3d82:	9b 81       	ldd	r25, Y+3	; 0x03
    3d84:	08 96       	adiw	r24, 0x08	; 8
    3d86:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <xTaskRemoveFromEventList>
    3d8a:	88 23       	and	r24, r24
    3d8c:	b9 f0       	breq	.+46     	; 0x3dbc <xQueueGenericReceive+0xca>
						{
							queueYIELD_IF_USING_PREEMPTION();
    3d8e:	0e 94 bd 1a 	call	0x357a	; 0x357a <vPortYield>
    3d92:	14 c0       	rjmp	.+40     	; 0x3dbc <xQueueGenericReceive+0xca>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    3d94:	ea 81       	ldd	r30, Y+2	; 0x02
    3d96:	fb 81       	ldd	r31, Y+3	; 0x03
    3d98:	8c 81       	ldd	r24, Y+4	; 0x04
    3d9a:	9d 81       	ldd	r25, Y+5	; 0x05
    3d9c:	97 83       	std	Z+7, r25	; 0x07
    3d9e:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3da0:	ea 81       	ldd	r30, Y+2	; 0x02
    3da2:	fb 81       	ldd	r31, Y+3	; 0x03
    3da4:	81 89       	ldd	r24, Z+17	; 0x11
    3da6:	88 23       	and	r24, r24
    3da8:	49 f0       	breq	.+18     	; 0x3dbc <xQueueGenericReceive+0xca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3daa:	8a 81       	ldd	r24, Y+2	; 0x02
    3dac:	9b 81       	ldd	r25, Y+3	; 0x03
    3dae:	41 96       	adiw	r24, 0x11	; 17
    3db0:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <xTaskRemoveFromEventList>
    3db4:	88 23       	and	r24, r24
    3db6:	11 f0       	breq	.+4      	; 0x3dbc <xQueueGenericReceive+0xca>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    3db8:	0e 94 bd 1a 	call	0x357a	; 0x357a <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    3dbc:	0f 90       	pop	r0
    3dbe:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
    3dc2:	89 8b       	std	Y+17, r24	; 0x11
    3dc4:	74 c0       	rjmp	.+232    	; 0x3eae <xQueueGenericReceive+0x1bc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    3dc6:	8e 85       	ldd	r24, Y+14	; 0x0e
    3dc8:	9f 85       	ldd	r25, Y+15	; 0x0f
    3dca:	00 97       	sbiw	r24, 0x00	; 0
    3dcc:	21 f4       	brne	.+8      	; 0x3dd6 <xQueueGenericReceive+0xe4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3dce:	0f 90       	pop	r0
    3dd0:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3dd2:	19 8a       	std	Y+17, r1	; 0x11
    3dd4:	6c c0       	rjmp	.+216    	; 0x3eae <xQueueGenericReceive+0x1bc>
				}
				else if( xEntryTimeSet == pdFALSE )
    3dd6:	8e 81       	ldd	r24, Y+6	; 0x06
    3dd8:	88 23       	and	r24, r24
    3dda:	31 f4       	brne	.+12     	; 0x3de8 <xQueueGenericReceive+0xf6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3ddc:	ce 01       	movw	r24, r28
    3dde:	07 96       	adiw	r24, 0x07	; 7
    3de0:	0e 94 ba 2b 	call	0x5774	; 0x5774 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3de4:	81 e0       	ldi	r24, 0x01	; 1
    3de6:	8e 83       	std	Y+6, r24	; 0x06
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    3de8:	0f 90       	pop	r0
    3dea:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3dec:	0e 94 63 28 	call	0x50c6	; 0x50c6 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3df0:	0f b6       	in	r0, 0x3f	; 63
    3df2:	f8 94       	cli
    3df4:	0f 92       	push	r0
    3df6:	ea 81       	ldd	r30, Y+2	; 0x02
    3df8:	fb 81       	ldd	r31, Y+3	; 0x03
    3dfa:	85 8d       	ldd	r24, Z+29	; 0x1d
    3dfc:	8f 3f       	cpi	r24, 0xFF	; 255
    3dfe:	19 f4       	brne	.+6      	; 0x3e06 <xQueueGenericReceive+0x114>
    3e00:	ea 81       	ldd	r30, Y+2	; 0x02
    3e02:	fb 81       	ldd	r31, Y+3	; 0x03
    3e04:	15 8e       	std	Z+29, r1	; 0x1d
    3e06:	ea 81       	ldd	r30, Y+2	; 0x02
    3e08:	fb 81       	ldd	r31, Y+3	; 0x03
    3e0a:	86 8d       	ldd	r24, Z+30	; 0x1e
    3e0c:	8f 3f       	cpi	r24, 0xFF	; 255
    3e0e:	19 f4       	brne	.+6      	; 0x3e16 <xQueueGenericReceive+0x124>
    3e10:	ea 81       	ldd	r30, Y+2	; 0x02
    3e12:	fb 81       	ldd	r31, Y+3	; 0x03
    3e14:	16 8e       	std	Z+30, r1	; 0x1e
    3e16:	0f 90       	pop	r0
    3e18:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3e1a:	ce 01       	movw	r24, r28
    3e1c:	07 96       	adiw	r24, 0x07	; 7
    3e1e:	9e 01       	movw	r18, r28
    3e20:	22 5f       	subi	r18, 0xF2	; 242
    3e22:	3f 4f       	sbci	r19, 0xFF	; 255
    3e24:	b9 01       	movw	r22, r18
    3e26:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <xTaskCheckForTimeOut>
    3e2a:	88 23       	and	r24, r24
    3e2c:	91 f5       	brne	.+100    	; 0x3e92 <xQueueGenericReceive+0x1a0>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e30:	9b 81       	ldd	r25, Y+3	; 0x03
    3e32:	0e 94 ae 21 	call	0x435c	; 0x435c <prvIsQueueEmpty>
    3e36:	88 23       	and	r24, r24
    3e38:	29 f1       	breq	.+74     	; 0x3e84 <xQueueGenericReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3e3a:	ea 81       	ldd	r30, Y+2	; 0x02
    3e3c:	fb 81       	ldd	r31, Y+3	; 0x03
    3e3e:	80 81       	ld	r24, Z
    3e40:	91 81       	ldd	r25, Z+1	; 0x01
    3e42:	00 97       	sbiw	r24, 0x00	; 0
    3e44:	59 f4       	brne	.+22     	; 0x3e5c <xQueueGenericReceive+0x16a>
					{
						taskENTER_CRITICAL();
    3e46:	0f b6       	in	r0, 0x3f	; 63
    3e48:	f8 94       	cli
    3e4a:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    3e4c:	ea 81       	ldd	r30, Y+2	; 0x02
    3e4e:	fb 81       	ldd	r31, Y+3	; 0x03
    3e50:	82 81       	ldd	r24, Z+2	; 0x02
    3e52:	93 81       	ldd	r25, Z+3	; 0x03
    3e54:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    3e58:	0f 90       	pop	r0
    3e5a:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e5e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e60:	41 96       	adiw	r24, 0x11	; 17
    3e62:	2e 85       	ldd	r18, Y+14	; 0x0e
    3e64:	3f 85       	ldd	r19, Y+15	; 0x0f
    3e66:	b9 01       	movw	r22, r18
    3e68:	0e 94 98 2a 	call	0x5530	; 0x5530 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    3e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e70:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    3e74:	0e 94 6f 28 	call	0x50de	; 0x50de <xTaskResumeAll>
    3e78:	88 23       	and	r24, r24
    3e7a:	09 f0       	breq	.+2      	; 0x3e7e <xQueueGenericReceive+0x18c>
    3e7c:	50 cf       	rjmp	.-352    	; 0x3d1e <xQueueGenericReceive+0x2c>
				{
					portYIELD_WITHIN_API();
    3e7e:	0e 94 bd 1a 	call	0x357a	; 0x357a <vPortYield>
    3e82:	4d cf       	rjmp	.-358    	; 0x3d1e <xQueueGenericReceive+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3e84:	8a 81       	ldd	r24, Y+2	; 0x02
    3e86:	9b 81       	ldd	r25, Y+3	; 0x03
    3e88:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    3e8c:	0e 94 6f 28 	call	0x50de	; 0x50de <xTaskResumeAll>
    3e90:	46 cf       	rjmp	.-372    	; 0x3d1e <xQueueGenericReceive+0x2c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    3e92:	8a 81       	ldd	r24, Y+2	; 0x02
    3e94:	9b 81       	ldd	r25, Y+3	; 0x03
    3e96:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3e9a:	0e 94 6f 28 	call	0x50de	; 0x50de <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ea2:	0e 94 ae 21 	call	0x435c	; 0x435c <prvIsQueueEmpty>
    3ea6:	88 23       	and	r24, r24
    3ea8:	09 f4       	brne	.+2      	; 0x3eac <xQueueGenericReceive+0x1ba>
    3eaa:	39 cf       	rjmp	.-398    	; 0x3d1e <xQueueGenericReceive+0x2c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    3eac:	19 8a       	std	Y+17, r1	; 0x11
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    3eae:	89 89       	ldd	r24, Y+17	; 0x11
}
    3eb0:	61 96       	adiw	r28, 0x11	; 17
    3eb2:	0f b6       	in	r0, 0x3f	; 63
    3eb4:	f8 94       	cli
    3eb6:	de bf       	out	0x3e, r29	; 62
    3eb8:	0f be       	out	0x3f, r0	; 63
    3eba:	cd bf       	out	0x3d, r28	; 61
    3ebc:	cf 91       	pop	r28
    3ebe:	df 91       	pop	r29
    3ec0:	08 95       	ret

00003ec2 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    3ec2:	df 93       	push	r29
    3ec4:	cf 93       	push	r28
    3ec6:	cd b7       	in	r28, 0x3d	; 61
    3ec8:	de b7       	in	r29, 0x3e	; 62
    3eca:	2c 97       	sbiw	r28, 0x0c	; 12
    3ecc:	0f b6       	in	r0, 0x3f	; 63
    3ece:	f8 94       	cli
    3ed0:	de bf       	out	0x3e, r29	; 62
    3ed2:	0f be       	out	0x3f, r0	; 63
    3ed4:	cd bf       	out	0x3d, r28	; 61
    3ed6:	98 87       	std	Y+8, r25	; 0x08
    3ed8:	8f 83       	std	Y+7, r24	; 0x07
    3eda:	7a 87       	std	Y+10, r23	; 0x0a
    3edc:	69 87       	std	Y+9, r22	; 0x09
    3ede:	5c 87       	std	Y+12, r21	; 0x0c
    3ee0:	4b 87       	std	Y+11, r20	; 0x0b
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    3ee2:	8f 81       	ldd	r24, Y+7	; 0x07
    3ee4:	98 85       	ldd	r25, Y+8	; 0x08
    3ee6:	9c 83       	std	Y+4, r25	; 0x04
    3ee8:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3eea:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3eec:	eb 81       	ldd	r30, Y+3	; 0x03
    3eee:	fc 81       	ldd	r31, Y+4	; 0x04
    3ef0:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ef2:	8a 83       	std	Y+2, r24	; 0x02

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    3ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ef6:	88 23       	and	r24, r24
    3ef8:	81 f1       	breq	.+96     	; 0x3f5a <xQueueReceiveFromISR+0x98>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    3efa:	eb 81       	ldd	r30, Y+3	; 0x03
    3efc:	fc 81       	ldd	r31, Y+4	; 0x04
    3efe:	85 8d       	ldd	r24, Z+29	; 0x1d
    3f00:	89 83       	std	Y+1, r24	; 0x01

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    3f02:	8b 81       	ldd	r24, Y+3	; 0x03
    3f04:	9c 81       	ldd	r25, Y+4	; 0x04
    3f06:	29 85       	ldd	r18, Y+9	; 0x09
    3f08:	3a 85       	ldd	r19, Y+10	; 0x0a
    3f0a:	b9 01       	movw	r22, r18
    3f0c:	0e 94 14 21 	call	0x4228	; 0x4228 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    3f10:	8a 81       	ldd	r24, Y+2	; 0x02
    3f12:	81 50       	subi	r24, 0x01	; 1
    3f14:	eb 81       	ldd	r30, Y+3	; 0x03
    3f16:	fc 81       	ldd	r31, Y+4	; 0x04
    3f18:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    3f1a:	89 81       	ldd	r24, Y+1	; 0x01
    3f1c:	8f 3f       	cpi	r24, 0xFF	; 255
    3f1e:	a9 f4       	brne	.+42     	; 0x3f4a <xQueueReceiveFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3f20:	eb 81       	ldd	r30, Y+3	; 0x03
    3f22:	fc 81       	ldd	r31, Y+4	; 0x04
    3f24:	80 85       	ldd	r24, Z+8	; 0x08
    3f26:	88 23       	and	r24, r24
    3f28:	a9 f0       	breq	.+42     	; 0x3f54 <xQueueReceiveFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f2e:	08 96       	adiw	r24, 0x08	; 8
    3f30:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <xTaskRemoveFromEventList>
    3f34:	88 23       	and	r24, r24
    3f36:	71 f0       	breq	.+28     	; 0x3f54 <xQueueReceiveFromISR+0x92>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    3f38:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f3a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3f3c:	00 97       	sbiw	r24, 0x00	; 0
    3f3e:	51 f0       	breq	.+20     	; 0x3f54 <xQueueReceiveFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    3f40:	eb 85       	ldd	r30, Y+11	; 0x0b
    3f42:	fc 85       	ldd	r31, Y+12	; 0x0c
    3f44:	81 e0       	ldi	r24, 0x01	; 1
    3f46:	80 83       	st	Z, r24
    3f48:	05 c0       	rjmp	.+10     	; 0x3f54 <xQueueReceiveFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    3f4a:	89 81       	ldd	r24, Y+1	; 0x01
    3f4c:	8f 5f       	subi	r24, 0xFF	; 255
    3f4e:	eb 81       	ldd	r30, Y+3	; 0x03
    3f50:	fc 81       	ldd	r31, Y+4	; 0x04
    3f52:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    3f54:	81 e0       	ldi	r24, 0x01	; 1
    3f56:	8e 83       	std	Y+6, r24	; 0x06
    3f58:	01 c0       	rjmp	.+2      	; 0x3f5c <xQueueReceiveFromISR+0x9a>
		}
		else
		{
			xReturn = pdFAIL;
    3f5a:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3f5c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3f5e:	2c 96       	adiw	r28, 0x0c	; 12
    3f60:	0f b6       	in	r0, 0x3f	; 63
    3f62:	f8 94       	cli
    3f64:	de bf       	out	0x3e, r29	; 62
    3f66:	0f be       	out	0x3f, r0	; 63
    3f68:	cd bf       	out	0x3d, r28	; 61
    3f6a:	cf 91       	pop	r28
    3f6c:	df 91       	pop	r29
    3f6e:	08 95       	ret

00003f70 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    3f70:	df 93       	push	r29
    3f72:	cf 93       	push	r28
    3f74:	cd b7       	in	r28, 0x3d	; 61
    3f76:	de b7       	in	r29, 0x3e	; 62
    3f78:	2a 97       	sbiw	r28, 0x0a	; 10
    3f7a:	0f b6       	in	r0, 0x3f	; 63
    3f7c:	f8 94       	cli
    3f7e:	de bf       	out	0x3e, r29	; 62
    3f80:	0f be       	out	0x3f, r0	; 63
    3f82:	cd bf       	out	0x3d, r28	; 61
    3f84:	98 87       	std	Y+8, r25	; 0x08
    3f86:	8f 83       	std	Y+7, r24	; 0x07
    3f88:	7a 87       	std	Y+10, r23	; 0x0a
    3f8a:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    3f8c:	8f 81       	ldd	r24, Y+7	; 0x07
    3f8e:	98 85       	ldd	r25, Y+8	; 0x08
    3f90:	9a 83       	std	Y+2, r25	; 0x02
    3f92:	89 83       	std	Y+1, r24	; 0x01
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3f94:	1d 82       	std	Y+5, r1	; 0x05
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    3f96:	e9 81       	ldd	r30, Y+1	; 0x01
    3f98:	fa 81       	ldd	r31, Y+2	; 0x02
    3f9a:	82 8d       	ldd	r24, Z+26	; 0x1a
    3f9c:	88 23       	and	r24, r24
    3f9e:	b1 f0       	breq	.+44     	; 0x3fcc <xQueuePeekFromISR+0x5c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    3fa0:	e9 81       	ldd	r30, Y+1	; 0x01
    3fa2:	fa 81       	ldd	r31, Y+2	; 0x02
    3fa4:	86 81       	ldd	r24, Z+6	; 0x06
    3fa6:	97 81       	ldd	r25, Z+7	; 0x07
    3fa8:	9c 83       	std	Y+4, r25	; 0x04
    3faa:	8b 83       	std	Y+3, r24	; 0x03
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    3fac:	89 81       	ldd	r24, Y+1	; 0x01
    3fae:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb0:	29 85       	ldd	r18, Y+9	; 0x09
    3fb2:	3a 85       	ldd	r19, Y+10	; 0x0a
    3fb4:	b9 01       	movw	r22, r18
    3fb6:	0e 94 14 21 	call	0x4228	; 0x4228 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    3fba:	e9 81       	ldd	r30, Y+1	; 0x01
    3fbc:	fa 81       	ldd	r31, Y+2	; 0x02
    3fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    3fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    3fc2:	97 83       	std	Z+7, r25	; 0x07
    3fc4:	86 83       	std	Z+6, r24	; 0x06

			xReturn = pdPASS;
    3fc6:	81 e0       	ldi	r24, 0x01	; 1
    3fc8:	8e 83       	std	Y+6, r24	; 0x06
    3fca:	01 c0       	rjmp	.+2      	; 0x3fce <xQueuePeekFromISR+0x5e>
		}
		else
		{
			xReturn = pdFAIL;
    3fcc:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3fce:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3fd0:	2a 96       	adiw	r28, 0x0a	; 10
    3fd2:	0f b6       	in	r0, 0x3f	; 63
    3fd4:	f8 94       	cli
    3fd6:	de bf       	out	0x3e, r29	; 62
    3fd8:	0f be       	out	0x3f, r0	; 63
    3fda:	cd bf       	out	0x3d, r28	; 61
    3fdc:	cf 91       	pop	r28
    3fde:	df 91       	pop	r29
    3fe0:	08 95       	ret

00003fe2 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    3fe2:	df 93       	push	r29
    3fe4:	cf 93       	push	r28
    3fe6:	00 d0       	rcall	.+0      	; 0x3fe8 <uxQueueMessagesWaiting+0x6>
    3fe8:	0f 92       	push	r0
    3fea:	cd b7       	in	r28, 0x3d	; 61
    3fec:	de b7       	in	r29, 0x3e	; 62
    3fee:	9b 83       	std	Y+3, r25	; 0x03
    3ff0:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    3ff2:	0f b6       	in	r0, 0x3f	; 63
    3ff4:	f8 94       	cli
    3ff6:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    3ff8:	ea 81       	ldd	r30, Y+2	; 0x02
    3ffa:	fb 81       	ldd	r31, Y+3	; 0x03
    3ffc:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ffe:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    4000:	0f 90       	pop	r0
    4002:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    4004:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    4006:	0f 90       	pop	r0
    4008:	0f 90       	pop	r0
    400a:	0f 90       	pop	r0
    400c:	cf 91       	pop	r28
    400e:	df 91       	pop	r29
    4010:	08 95       	ret

00004012 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    4012:	df 93       	push	r29
    4014:	cf 93       	push	r28
    4016:	00 d0       	rcall	.+0      	; 0x4018 <uxQueueSpacesAvailable+0x6>
    4018:	00 d0       	rcall	.+0      	; 0x401a <uxQueueSpacesAvailable+0x8>
    401a:	0f 92       	push	r0
    401c:	cd b7       	in	r28, 0x3d	; 61
    401e:	de b7       	in	r29, 0x3e	; 62
    4020:	9d 83       	std	Y+5, r25	; 0x05
    4022:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    4024:	8c 81       	ldd	r24, Y+4	; 0x04
    4026:	9d 81       	ldd	r25, Y+5	; 0x05
    4028:	9a 83       	std	Y+2, r25	; 0x02
    402a:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    402c:	0f b6       	in	r0, 0x3f	; 63
    402e:	f8 94       	cli
    4030:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    4032:	e9 81       	ldd	r30, Y+1	; 0x01
    4034:	fa 81       	ldd	r31, Y+2	; 0x02
    4036:	93 8d       	ldd	r25, Z+27	; 0x1b
    4038:	e9 81       	ldd	r30, Y+1	; 0x01
    403a:	fa 81       	ldd	r31, Y+2	; 0x02
    403c:	82 8d       	ldd	r24, Z+26	; 0x1a
    403e:	29 2f       	mov	r18, r25
    4040:	28 1b       	sub	r18, r24
    4042:	82 2f       	mov	r24, r18
    4044:	8b 83       	std	Y+3, r24	; 0x03
	}
	taskEXIT_CRITICAL();
    4046:	0f 90       	pop	r0
    4048:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    404a:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    404c:	0f 90       	pop	r0
    404e:	0f 90       	pop	r0
    4050:	0f 90       	pop	r0
    4052:	0f 90       	pop	r0
    4054:	0f 90       	pop	r0
    4056:	cf 91       	pop	r28
    4058:	df 91       	pop	r29
    405a:	08 95       	ret

0000405c <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    405c:	df 93       	push	r29
    405e:	cf 93       	push	r28
    4060:	00 d0       	rcall	.+0      	; 0x4062 <uxQueueMessagesWaitingFromISR+0x6>
    4062:	0f 92       	push	r0
    4064:	cd b7       	in	r28, 0x3d	; 61
    4066:	de b7       	in	r29, 0x3e	; 62
    4068:	9b 83       	std	Y+3, r25	; 0x03
    406a:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    406c:	ea 81       	ldd	r30, Y+2	; 0x02
    406e:	fb 81       	ldd	r31, Y+3	; 0x03
    4070:	82 8d       	ldd	r24, Z+26	; 0x1a
    4072:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    4074:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    4076:	0f 90       	pop	r0
    4078:	0f 90       	pop	r0
    407a:	0f 90       	pop	r0
    407c:	cf 91       	pop	r28
    407e:	df 91       	pop	r29
    4080:	08 95       	ret

00004082 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    4082:	df 93       	push	r29
    4084:	cf 93       	push	r28
    4086:	00 d0       	rcall	.+0      	; 0x4088 <vQueueDelete+0x6>
    4088:	00 d0       	rcall	.+0      	; 0x408a <vQueueDelete+0x8>
    408a:	cd b7       	in	r28, 0x3d	; 61
    408c:	de b7       	in	r29, 0x3e	; 62
    408e:	9c 83       	std	Y+4, r25	; 0x04
    4090:	8b 83       	std	Y+3, r24	; 0x03
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    4092:	8b 81       	ldd	r24, Y+3	; 0x03
    4094:	9c 81       	ldd	r25, Y+4	; 0x04
    4096:	9a 83       	std	Y+2, r25	; 0x02
    4098:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
    409a:	89 81       	ldd	r24, Y+1	; 0x01
    409c:	9a 81       	ldd	r25, Y+2	; 0x02
    409e:	0e 94 a3 22 	call	0x4546	; 0x4546 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    40a2:	89 81       	ldd	r24, Y+1	; 0x01
    40a4:	9a 81       	ldd	r25, Y+2	; 0x02
    40a6:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    40aa:	0f 90       	pop	r0
    40ac:	0f 90       	pop	r0
    40ae:	0f 90       	pop	r0
    40b0:	0f 90       	pop	r0
    40b2:	cf 91       	pop	r28
    40b4:	df 91       	pop	r29
    40b6:	08 95       	ret

000040b8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    40b8:	df 93       	push	r29
    40ba:	cf 93       	push	r28
    40bc:	cd b7       	in	r28, 0x3d	; 61
    40be:	de b7       	in	r29, 0x3e	; 62
    40c0:	27 97       	sbiw	r28, 0x07	; 7
    40c2:	0f b6       	in	r0, 0x3f	; 63
    40c4:	f8 94       	cli
    40c6:	de bf       	out	0x3e, r29	; 62
    40c8:	0f be       	out	0x3f, r0	; 63
    40ca:	cd bf       	out	0x3d, r28	; 61
    40cc:	9c 83       	std	Y+4, r25	; 0x04
    40ce:	8b 83       	std	Y+3, r24	; 0x03
    40d0:	7e 83       	std	Y+6, r23	; 0x06
    40d2:	6d 83       	std	Y+5, r22	; 0x05
    40d4:	4f 83       	std	Y+7, r20	; 0x07
BaseType_t xReturn = pdFALSE;
    40d6:	1a 82       	std	Y+2, r1	; 0x02
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    40d8:	eb 81       	ldd	r30, Y+3	; 0x03
    40da:	fc 81       	ldd	r31, Y+4	; 0x04
    40dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    40de:	89 83       	std	Y+1, r24	; 0x01

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    40e0:	eb 81       	ldd	r30, Y+3	; 0x03
    40e2:	fc 81       	ldd	r31, Y+4	; 0x04
    40e4:	84 8d       	ldd	r24, Z+28	; 0x1c
    40e6:	88 23       	and	r24, r24
    40e8:	99 f4       	brne	.+38     	; 0x4110 <prvCopyDataToQueue+0x58>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    40ea:	eb 81       	ldd	r30, Y+3	; 0x03
    40ec:	fc 81       	ldd	r31, Y+4	; 0x04
    40ee:	80 81       	ld	r24, Z
    40f0:	91 81       	ldd	r25, Z+1	; 0x01
    40f2:	00 97       	sbiw	r24, 0x00	; 0
    40f4:	09 f0       	breq	.+2      	; 0x40f8 <prvCopyDataToQueue+0x40>
    40f6:	89 c0       	rjmp	.+274    	; 0x420a <prvCopyDataToQueue+0x152>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    40f8:	eb 81       	ldd	r30, Y+3	; 0x03
    40fa:	fc 81       	ldd	r31, Y+4	; 0x04
    40fc:	82 81       	ldd	r24, Z+2	; 0x02
    40fe:	93 81       	ldd	r25, Z+3	; 0x03
    4100:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <xTaskPriorityDisinherit>
    4104:	8a 83       	std	Y+2, r24	; 0x02
				pxQueue->pxMutexHolder = NULL;
    4106:	eb 81       	ldd	r30, Y+3	; 0x03
    4108:	fc 81       	ldd	r31, Y+4	; 0x04
    410a:	13 82       	std	Z+3, r1	; 0x03
    410c:	12 82       	std	Z+2, r1	; 0x02
    410e:	7d c0       	rjmp	.+250    	; 0x420a <prvCopyDataToQueue+0x152>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    4110:	8f 81       	ldd	r24, Y+7	; 0x07
    4112:	88 23       	and	r24, r24
    4114:	99 f5       	brne	.+102    	; 0x417c <prvCopyDataToQueue+0xc4>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    4116:	eb 81       	ldd	r30, Y+3	; 0x03
    4118:	fc 81       	ldd	r31, Y+4	; 0x04
    411a:	64 81       	ldd	r22, Z+4	; 0x04
    411c:	75 81       	ldd	r23, Z+5	; 0x05
    411e:	eb 81       	ldd	r30, Y+3	; 0x03
    4120:	fc 81       	ldd	r31, Y+4	; 0x04
    4122:	84 8d       	ldd	r24, Z+28	; 0x1c
    4124:	48 2f       	mov	r20, r24
    4126:	50 e0       	ldi	r21, 0x00	; 0
    4128:	2d 81       	ldd	r18, Y+5	; 0x05
    412a:	3e 81       	ldd	r19, Y+6	; 0x06
    412c:	cb 01       	movw	r24, r22
    412e:	b9 01       	movw	r22, r18
    4130:	0e 94 c6 32 	call	0x658c	; 0x658c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    4134:	eb 81       	ldd	r30, Y+3	; 0x03
    4136:	fc 81       	ldd	r31, Y+4	; 0x04
    4138:	24 81       	ldd	r18, Z+4	; 0x04
    413a:	35 81       	ldd	r19, Z+5	; 0x05
    413c:	eb 81       	ldd	r30, Y+3	; 0x03
    413e:	fc 81       	ldd	r31, Y+4	; 0x04
    4140:	84 8d       	ldd	r24, Z+28	; 0x1c
    4142:	88 2f       	mov	r24, r24
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	82 0f       	add	r24, r18
    4148:	93 1f       	adc	r25, r19
    414a:	eb 81       	ldd	r30, Y+3	; 0x03
    414c:	fc 81       	ldd	r31, Y+4	; 0x04
    414e:	95 83       	std	Z+5, r25	; 0x05
    4150:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    4152:	eb 81       	ldd	r30, Y+3	; 0x03
    4154:	fc 81       	ldd	r31, Y+4	; 0x04
    4156:	24 81       	ldd	r18, Z+4	; 0x04
    4158:	35 81       	ldd	r19, Z+5	; 0x05
    415a:	eb 81       	ldd	r30, Y+3	; 0x03
    415c:	fc 81       	ldd	r31, Y+4	; 0x04
    415e:	82 81       	ldd	r24, Z+2	; 0x02
    4160:	93 81       	ldd	r25, Z+3	; 0x03
    4162:	28 17       	cp	r18, r24
    4164:	39 07       	cpc	r19, r25
    4166:	08 f4       	brcc	.+2      	; 0x416a <prvCopyDataToQueue+0xb2>
    4168:	50 c0       	rjmp	.+160    	; 0x420a <prvCopyDataToQueue+0x152>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    416a:	eb 81       	ldd	r30, Y+3	; 0x03
    416c:	fc 81       	ldd	r31, Y+4	; 0x04
    416e:	80 81       	ld	r24, Z
    4170:	91 81       	ldd	r25, Z+1	; 0x01
    4172:	eb 81       	ldd	r30, Y+3	; 0x03
    4174:	fc 81       	ldd	r31, Y+4	; 0x04
    4176:	95 83       	std	Z+5, r25	; 0x05
    4178:	84 83       	std	Z+4, r24	; 0x04
    417a:	47 c0       	rjmp	.+142    	; 0x420a <prvCopyDataToQueue+0x152>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    417c:	eb 81       	ldd	r30, Y+3	; 0x03
    417e:	fc 81       	ldd	r31, Y+4	; 0x04
    4180:	66 81       	ldd	r22, Z+6	; 0x06
    4182:	77 81       	ldd	r23, Z+7	; 0x07
    4184:	eb 81       	ldd	r30, Y+3	; 0x03
    4186:	fc 81       	ldd	r31, Y+4	; 0x04
    4188:	84 8d       	ldd	r24, Z+28	; 0x1c
    418a:	48 2f       	mov	r20, r24
    418c:	50 e0       	ldi	r21, 0x00	; 0
    418e:	2d 81       	ldd	r18, Y+5	; 0x05
    4190:	3e 81       	ldd	r19, Y+6	; 0x06
    4192:	cb 01       	movw	r24, r22
    4194:	b9 01       	movw	r22, r18
    4196:	0e 94 c6 32 	call	0x658c	; 0x658c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    419a:	eb 81       	ldd	r30, Y+3	; 0x03
    419c:	fc 81       	ldd	r31, Y+4	; 0x04
    419e:	26 81       	ldd	r18, Z+6	; 0x06
    41a0:	37 81       	ldd	r19, Z+7	; 0x07
    41a2:	eb 81       	ldd	r30, Y+3	; 0x03
    41a4:	fc 81       	ldd	r31, Y+4	; 0x04
    41a6:	84 8d       	ldd	r24, Z+28	; 0x1c
    41a8:	88 2f       	mov	r24, r24
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	90 95       	com	r25
    41ae:	81 95       	neg	r24
    41b0:	9f 4f       	sbci	r25, 0xFF	; 255
    41b2:	82 0f       	add	r24, r18
    41b4:	93 1f       	adc	r25, r19
    41b6:	eb 81       	ldd	r30, Y+3	; 0x03
    41b8:	fc 81       	ldd	r31, Y+4	; 0x04
    41ba:	97 83       	std	Z+7, r25	; 0x07
    41bc:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    41be:	eb 81       	ldd	r30, Y+3	; 0x03
    41c0:	fc 81       	ldd	r31, Y+4	; 0x04
    41c2:	26 81       	ldd	r18, Z+6	; 0x06
    41c4:	37 81       	ldd	r19, Z+7	; 0x07
    41c6:	eb 81       	ldd	r30, Y+3	; 0x03
    41c8:	fc 81       	ldd	r31, Y+4	; 0x04
    41ca:	80 81       	ld	r24, Z
    41cc:	91 81       	ldd	r25, Z+1	; 0x01
    41ce:	28 17       	cp	r18, r24
    41d0:	39 07       	cpc	r19, r25
    41d2:	90 f4       	brcc	.+36     	; 0x41f8 <prvCopyDataToQueue+0x140>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    41d4:	eb 81       	ldd	r30, Y+3	; 0x03
    41d6:	fc 81       	ldd	r31, Y+4	; 0x04
    41d8:	22 81       	ldd	r18, Z+2	; 0x02
    41da:	33 81       	ldd	r19, Z+3	; 0x03
    41dc:	eb 81       	ldd	r30, Y+3	; 0x03
    41de:	fc 81       	ldd	r31, Y+4	; 0x04
    41e0:	84 8d       	ldd	r24, Z+28	; 0x1c
    41e2:	88 2f       	mov	r24, r24
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	90 95       	com	r25
    41e8:	81 95       	neg	r24
    41ea:	9f 4f       	sbci	r25, 0xFF	; 255
    41ec:	82 0f       	add	r24, r18
    41ee:	93 1f       	adc	r25, r19
    41f0:	eb 81       	ldd	r30, Y+3	; 0x03
    41f2:	fc 81       	ldd	r31, Y+4	; 0x04
    41f4:	97 83       	std	Z+7, r25	; 0x07
    41f6:	86 83       	std	Z+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    41f8:	8f 81       	ldd	r24, Y+7	; 0x07
    41fa:	82 30       	cpi	r24, 0x02	; 2
    41fc:	31 f4       	brne	.+12     	; 0x420a <prvCopyDataToQueue+0x152>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    41fe:	89 81       	ldd	r24, Y+1	; 0x01
    4200:	88 23       	and	r24, r24
    4202:	19 f0       	breq	.+6      	; 0x420a <prvCopyDataToQueue+0x152>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    4204:	89 81       	ldd	r24, Y+1	; 0x01
    4206:	81 50       	subi	r24, 0x01	; 1
    4208:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    420a:	89 81       	ldd	r24, Y+1	; 0x01
    420c:	8f 5f       	subi	r24, 0xFF	; 255
    420e:	eb 81       	ldd	r30, Y+3	; 0x03
    4210:	fc 81       	ldd	r31, Y+4	; 0x04
    4212:	82 8f       	std	Z+26, r24	; 0x1a

	return xReturn;
    4214:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4216:	27 96       	adiw	r28, 0x07	; 7
    4218:	0f b6       	in	r0, 0x3f	; 63
    421a:	f8 94       	cli
    421c:	de bf       	out	0x3e, r29	; 62
    421e:	0f be       	out	0x3f, r0	; 63
    4220:	cd bf       	out	0x3d, r28	; 61
    4222:	cf 91       	pop	r28
    4224:	df 91       	pop	r29
    4226:	08 95       	ret

00004228 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    4228:	df 93       	push	r29
    422a:	cf 93       	push	r28
    422c:	00 d0       	rcall	.+0      	; 0x422e <prvCopyDataFromQueue+0x6>
    422e:	00 d0       	rcall	.+0      	; 0x4230 <prvCopyDataFromQueue+0x8>
    4230:	cd b7       	in	r28, 0x3d	; 61
    4232:	de b7       	in	r29, 0x3e	; 62
    4234:	9a 83       	std	Y+2, r25	; 0x02
    4236:	89 83       	std	Y+1, r24	; 0x01
    4238:	7c 83       	std	Y+4, r23	; 0x04
    423a:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    423c:	e9 81       	ldd	r30, Y+1	; 0x01
    423e:	fa 81       	ldd	r31, Y+2	; 0x02
    4240:	84 8d       	ldd	r24, Z+28	; 0x1c
    4242:	88 23       	and	r24, r24
    4244:	89 f1       	breq	.+98     	; 0x42a8 <prvCopyDataFromQueue+0x80>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    4246:	e9 81       	ldd	r30, Y+1	; 0x01
    4248:	fa 81       	ldd	r31, Y+2	; 0x02
    424a:	26 81       	ldd	r18, Z+6	; 0x06
    424c:	37 81       	ldd	r19, Z+7	; 0x07
    424e:	e9 81       	ldd	r30, Y+1	; 0x01
    4250:	fa 81       	ldd	r31, Y+2	; 0x02
    4252:	84 8d       	ldd	r24, Z+28	; 0x1c
    4254:	88 2f       	mov	r24, r24
    4256:	90 e0       	ldi	r25, 0x00	; 0
    4258:	82 0f       	add	r24, r18
    425a:	93 1f       	adc	r25, r19
    425c:	e9 81       	ldd	r30, Y+1	; 0x01
    425e:	fa 81       	ldd	r31, Y+2	; 0x02
    4260:	97 83       	std	Z+7, r25	; 0x07
    4262:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    4264:	e9 81       	ldd	r30, Y+1	; 0x01
    4266:	fa 81       	ldd	r31, Y+2	; 0x02
    4268:	26 81       	ldd	r18, Z+6	; 0x06
    426a:	37 81       	ldd	r19, Z+7	; 0x07
    426c:	e9 81       	ldd	r30, Y+1	; 0x01
    426e:	fa 81       	ldd	r31, Y+2	; 0x02
    4270:	82 81       	ldd	r24, Z+2	; 0x02
    4272:	93 81       	ldd	r25, Z+3	; 0x03
    4274:	28 17       	cp	r18, r24
    4276:	39 07       	cpc	r19, r25
    4278:	40 f0       	brcs	.+16     	; 0x428a <prvCopyDataFromQueue+0x62>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    427a:	e9 81       	ldd	r30, Y+1	; 0x01
    427c:	fa 81       	ldd	r31, Y+2	; 0x02
    427e:	80 81       	ld	r24, Z
    4280:	91 81       	ldd	r25, Z+1	; 0x01
    4282:	e9 81       	ldd	r30, Y+1	; 0x01
    4284:	fa 81       	ldd	r31, Y+2	; 0x02
    4286:	97 83       	std	Z+7, r25	; 0x07
    4288:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    428a:	e9 81       	ldd	r30, Y+1	; 0x01
    428c:	fa 81       	ldd	r31, Y+2	; 0x02
    428e:	46 81       	ldd	r20, Z+6	; 0x06
    4290:	57 81       	ldd	r21, Z+7	; 0x07
    4292:	e9 81       	ldd	r30, Y+1	; 0x01
    4294:	fa 81       	ldd	r31, Y+2	; 0x02
    4296:	84 8d       	ldd	r24, Z+28	; 0x1c
    4298:	28 2f       	mov	r18, r24
    429a:	30 e0       	ldi	r19, 0x00	; 0
    429c:	8b 81       	ldd	r24, Y+3	; 0x03
    429e:	9c 81       	ldd	r25, Y+4	; 0x04
    42a0:	ba 01       	movw	r22, r20
    42a2:	a9 01       	movw	r20, r18
    42a4:	0e 94 c6 32 	call	0x658c	; 0x658c <memcpy>
	}
}
    42a8:	0f 90       	pop	r0
    42aa:	0f 90       	pop	r0
    42ac:	0f 90       	pop	r0
    42ae:	0f 90       	pop	r0
    42b0:	cf 91       	pop	r28
    42b2:	df 91       	pop	r29
    42b4:	08 95       	ret

000042b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    42b6:	df 93       	push	r29
    42b8:	cf 93       	push	r28
    42ba:	00 d0       	rcall	.+0      	; 0x42bc <prvUnlockQueue+0x6>
    42bc:	00 d0       	rcall	.+0      	; 0x42be <prvUnlockQueue+0x8>
    42be:	cd b7       	in	r28, 0x3d	; 61
    42c0:	de b7       	in	r29, 0x3e	; 62
    42c2:	9c 83       	std	Y+4, r25	; 0x04
    42c4:	8b 83       	std	Y+3, r24	; 0x03

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    42c6:	0f b6       	in	r0, 0x3f	; 63
    42c8:	f8 94       	cli
    42ca:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
    42cc:	eb 81       	ldd	r30, Y+3	; 0x03
    42ce:	fc 81       	ldd	r31, Y+4	; 0x04
    42d0:	86 8d       	ldd	r24, Z+30	; 0x1e
    42d2:	8a 83       	std	Y+2, r24	; 0x02
    42d4:	11 c0       	rjmp	.+34     	; 0x42f8 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    42d6:	eb 81       	ldd	r30, Y+3	; 0x03
    42d8:	fc 81       	ldd	r31, Y+4	; 0x04
    42da:	81 89       	ldd	r24, Z+17	; 0x11
    42dc:	88 23       	and	r24, r24
    42de:	79 f0       	breq	.+30     	; 0x42fe <prvUnlockQueue+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    42e0:	8b 81       	ldd	r24, Y+3	; 0x03
    42e2:	9c 81       	ldd	r25, Y+4	; 0x04
    42e4:	41 96       	adiw	r24, 0x11	; 17
    42e6:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <xTaskRemoveFromEventList>
    42ea:	88 23       	and	r24, r24
    42ec:	11 f0       	breq	.+4      	; 0x42f2 <prvUnlockQueue+0x3c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    42ee:	0e 94 40 2c 	call	0x5880	; 0x5880 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    42f2:	8a 81       	ldd	r24, Y+2	; 0x02
    42f4:	81 50       	subi	r24, 0x01	; 1
    42f6:	8a 83       	std	Y+2, r24	; 0x02
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    42f8:	8a 81       	ldd	r24, Y+2	; 0x02
    42fa:	18 16       	cp	r1, r24
    42fc:	64 f3       	brlt	.-40     	; 0x42d6 <prvUnlockQueue+0x20>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    42fe:	eb 81       	ldd	r30, Y+3	; 0x03
    4300:	fc 81       	ldd	r31, Y+4	; 0x04
    4302:	8f ef       	ldi	r24, 0xFF	; 255
    4304:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    4306:	0f 90       	pop	r0
    4308:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    430a:	0f b6       	in	r0, 0x3f	; 63
    430c:	f8 94       	cli
    430e:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
    4310:	eb 81       	ldd	r30, Y+3	; 0x03
    4312:	fc 81       	ldd	r31, Y+4	; 0x04
    4314:	85 8d       	ldd	r24, Z+29	; 0x1d
    4316:	89 83       	std	Y+1, r24	; 0x01
    4318:	11 c0       	rjmp	.+34     	; 0x433c <prvUnlockQueue+0x86>

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    431a:	eb 81       	ldd	r30, Y+3	; 0x03
    431c:	fc 81       	ldd	r31, Y+4	; 0x04
    431e:	80 85       	ldd	r24, Z+8	; 0x08
    4320:	88 23       	and	r24, r24
    4322:	79 f0       	breq	.+30     	; 0x4342 <prvUnlockQueue+0x8c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4324:	8b 81       	ldd	r24, Y+3	; 0x03
    4326:	9c 81       	ldd	r25, Y+4	; 0x04
    4328:	08 96       	adiw	r24, 0x08	; 8
    432a:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <xTaskRemoveFromEventList>
    432e:	88 23       	and	r24, r24
    4330:	11 f0       	breq	.+4      	; 0x4336 <prvUnlockQueue+0x80>
				{
					vTaskMissedYield();
    4332:	0e 94 40 2c 	call	0x5880	; 0x5880 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    4336:	89 81       	ldd	r24, Y+1	; 0x01
    4338:	81 50       	subi	r24, 0x01	; 1
    433a:	89 83       	std	Y+1, r24	; 0x01
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    433c:	89 81       	ldd	r24, Y+1	; 0x01
    433e:	18 16       	cp	r1, r24
    4340:	64 f3       	brlt	.-40     	; 0x431a <prvUnlockQueue+0x64>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    4342:	eb 81       	ldd	r30, Y+3	; 0x03
    4344:	fc 81       	ldd	r31, Y+4	; 0x04
    4346:	8f ef       	ldi	r24, 0xFF	; 255
    4348:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    434a:	0f 90       	pop	r0
    434c:	0f be       	out	0x3f, r0	; 63
}
    434e:	0f 90       	pop	r0
    4350:	0f 90       	pop	r0
    4352:	0f 90       	pop	r0
    4354:	0f 90       	pop	r0
    4356:	cf 91       	pop	r28
    4358:	df 91       	pop	r29
    435a:	08 95       	ret

0000435c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    435c:	df 93       	push	r29
    435e:	cf 93       	push	r28
    4360:	00 d0       	rcall	.+0      	; 0x4362 <prvIsQueueEmpty+0x6>
    4362:	0f 92       	push	r0
    4364:	cd b7       	in	r28, 0x3d	; 61
    4366:	de b7       	in	r29, 0x3e	; 62
    4368:	9b 83       	std	Y+3, r25	; 0x03
    436a:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    436c:	0f b6       	in	r0, 0x3f	; 63
    436e:	f8 94       	cli
    4370:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    4372:	ea 81       	ldd	r30, Y+2	; 0x02
    4374:	fb 81       	ldd	r31, Y+3	; 0x03
    4376:	82 8d       	ldd	r24, Z+26	; 0x1a
    4378:	88 23       	and	r24, r24
    437a:	19 f4       	brne	.+6      	; 0x4382 <prvIsQueueEmpty+0x26>
		{
			xReturn = pdTRUE;
    437c:	81 e0       	ldi	r24, 0x01	; 1
    437e:	89 83       	std	Y+1, r24	; 0x01
    4380:	01 c0       	rjmp	.+2      	; 0x4384 <prvIsQueueEmpty+0x28>
		}
		else
		{
			xReturn = pdFALSE;
    4382:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    4384:	0f 90       	pop	r0
    4386:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    4388:	89 81       	ldd	r24, Y+1	; 0x01
}
    438a:	0f 90       	pop	r0
    438c:	0f 90       	pop	r0
    438e:	0f 90       	pop	r0
    4390:	cf 91       	pop	r28
    4392:	df 91       	pop	r29
    4394:	08 95       	ret

00004396 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    4396:	df 93       	push	r29
    4398:	cf 93       	push	r28
    439a:	00 d0       	rcall	.+0      	; 0x439c <xQueueIsQueueEmptyFromISR+0x6>
    439c:	0f 92       	push	r0
    439e:	cd b7       	in	r28, 0x3d	; 61
    43a0:	de b7       	in	r29, 0x3e	; 62
    43a2:	9b 83       	std	Y+3, r25	; 0x03
    43a4:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    43a6:	ea 81       	ldd	r30, Y+2	; 0x02
    43a8:	fb 81       	ldd	r31, Y+3	; 0x03
    43aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    43ac:	88 23       	and	r24, r24
    43ae:	19 f4       	brne	.+6      	; 0x43b6 <xQueueIsQueueEmptyFromISR+0x20>
	{
		xReturn = pdTRUE;
    43b0:	81 e0       	ldi	r24, 0x01	; 1
    43b2:	89 83       	std	Y+1, r24	; 0x01
    43b4:	01 c0       	rjmp	.+2      	; 0x43b8 <xQueueIsQueueEmptyFromISR+0x22>
	}
	else
	{
		xReturn = pdFALSE;
    43b6:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    43b8:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    43ba:	0f 90       	pop	r0
    43bc:	0f 90       	pop	r0
    43be:	0f 90       	pop	r0
    43c0:	cf 91       	pop	r28
    43c2:	df 91       	pop	r29
    43c4:	08 95       	ret

000043c6 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    43c6:	df 93       	push	r29
    43c8:	cf 93       	push	r28
    43ca:	00 d0       	rcall	.+0      	; 0x43cc <prvIsQueueFull+0x6>
    43cc:	0f 92       	push	r0
    43ce:	cd b7       	in	r28, 0x3d	; 61
    43d0:	de b7       	in	r29, 0x3e	; 62
    43d2:	9b 83       	std	Y+3, r25	; 0x03
    43d4:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    43d6:	0f b6       	in	r0, 0x3f	; 63
    43d8:	f8 94       	cli
    43da:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    43dc:	ea 81       	ldd	r30, Y+2	; 0x02
    43de:	fb 81       	ldd	r31, Y+3	; 0x03
    43e0:	92 8d       	ldd	r25, Z+26	; 0x1a
    43e2:	ea 81       	ldd	r30, Y+2	; 0x02
    43e4:	fb 81       	ldd	r31, Y+3	; 0x03
    43e6:	83 8d       	ldd	r24, Z+27	; 0x1b
    43e8:	98 17       	cp	r25, r24
    43ea:	19 f4       	brne	.+6      	; 0x43f2 <prvIsQueueFull+0x2c>
		{
			xReturn = pdTRUE;
    43ec:	81 e0       	ldi	r24, 0x01	; 1
    43ee:	89 83       	std	Y+1, r24	; 0x01
    43f0:	01 c0       	rjmp	.+2      	; 0x43f4 <prvIsQueueFull+0x2e>
		}
		else
		{
			xReturn = pdFALSE;
    43f2:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    43f4:	0f 90       	pop	r0
    43f6:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    43f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    43fa:	0f 90       	pop	r0
    43fc:	0f 90       	pop	r0
    43fe:	0f 90       	pop	r0
    4400:	cf 91       	pop	r28
    4402:	df 91       	pop	r29
    4404:	08 95       	ret

00004406 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    4406:	df 93       	push	r29
    4408:	cf 93       	push	r28
    440a:	00 d0       	rcall	.+0      	; 0x440c <xQueueIsQueueFullFromISR+0x6>
    440c:	0f 92       	push	r0
    440e:	cd b7       	in	r28, 0x3d	; 61
    4410:	de b7       	in	r29, 0x3e	; 62
    4412:	9b 83       	std	Y+3, r25	; 0x03
    4414:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    4416:	ea 81       	ldd	r30, Y+2	; 0x02
    4418:	fb 81       	ldd	r31, Y+3	; 0x03
    441a:	92 8d       	ldd	r25, Z+26	; 0x1a
    441c:	ea 81       	ldd	r30, Y+2	; 0x02
    441e:	fb 81       	ldd	r31, Y+3	; 0x03
    4420:	83 8d       	ldd	r24, Z+27	; 0x1b
    4422:	98 17       	cp	r25, r24
    4424:	19 f4       	brne	.+6      	; 0x442c <xQueueIsQueueFullFromISR+0x26>
	{
		xReturn = pdTRUE;
    4426:	81 e0       	ldi	r24, 0x01	; 1
    4428:	89 83       	std	Y+1, r24	; 0x01
    442a:	01 c0       	rjmp	.+2      	; 0x442e <xQueueIsQueueFullFromISR+0x28>
	}
	else
	{
		xReturn = pdFALSE;
    442c:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    442e:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    4430:	0f 90       	pop	r0
    4432:	0f 90       	pop	r0
    4434:	0f 90       	pop	r0
    4436:	cf 91       	pop	r28
    4438:	df 91       	pop	r29
    443a:	08 95       	ret

0000443c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    443c:	df 93       	push	r29
    443e:	cf 93       	push	r28
    4440:	00 d0       	rcall	.+0      	; 0x4442 <vQueueAddToRegistry+0x6>
    4442:	00 d0       	rcall	.+0      	; 0x4444 <vQueueAddToRegistry+0x8>
    4444:	0f 92       	push	r0
    4446:	cd b7       	in	r28, 0x3d	; 61
    4448:	de b7       	in	r29, 0x3e	; 62
    444a:	9b 83       	std	Y+3, r25	; 0x03
    444c:	8a 83       	std	Y+2, r24	; 0x02
    444e:	7d 83       	std	Y+5, r23	; 0x05
    4450:	6c 83       	std	Y+4, r22	; 0x04
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    4452:	19 82       	std	Y+1, r1	; 0x01
    4454:	2f c0       	rjmp	.+94     	; 0x44b4 <vQueueAddToRegistry+0x78>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    4456:	89 81       	ldd	r24, Y+1	; 0x01
    4458:	88 2f       	mov	r24, r24
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	88 0f       	add	r24, r24
    445e:	99 1f       	adc	r25, r25
    4460:	88 0f       	add	r24, r24
    4462:	99 1f       	adc	r25, r25
    4464:	fc 01       	movw	r30, r24
    4466:	ef 5d       	subi	r30, 0xDF	; 223
    4468:	fb 4f       	sbci	r31, 0xFB	; 251
    446a:	80 81       	ld	r24, Z
    446c:	91 81       	ldd	r25, Z+1	; 0x01
    446e:	00 97       	sbiw	r24, 0x00	; 0
    4470:	f1 f4       	brne	.+60     	; 0x44ae <vQueueAddToRegistry+0x72>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    4472:	89 81       	ldd	r24, Y+1	; 0x01
    4474:	88 2f       	mov	r24, r24
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	88 0f       	add	r24, r24
    447a:	99 1f       	adc	r25, r25
    447c:	88 0f       	add	r24, r24
    447e:	99 1f       	adc	r25, r25
    4480:	fc 01       	movw	r30, r24
    4482:	ef 5d       	subi	r30, 0xDF	; 223
    4484:	fb 4f       	sbci	r31, 0xFB	; 251
    4486:	8c 81       	ldd	r24, Y+4	; 0x04
    4488:	9d 81       	ldd	r25, Y+5	; 0x05
    448a:	91 83       	std	Z+1, r25	; 0x01
    448c:	80 83       	st	Z, r24
				xQueueRegistry[ ux ].xHandle = xQueue;
    448e:	89 81       	ldd	r24, Y+1	; 0x01
    4490:	88 2f       	mov	r24, r24
    4492:	90 e0       	ldi	r25, 0x00	; 0
    4494:	88 0f       	add	r24, r24
    4496:	99 1f       	adc	r25, r25
    4498:	01 96       	adiw	r24, 0x01	; 1
    449a:	88 0f       	add	r24, r24
    449c:	99 1f       	adc	r25, r25
    449e:	fc 01       	movw	r30, r24
    44a0:	ef 5d       	subi	r30, 0xDF	; 223
    44a2:	fb 4f       	sbci	r31, 0xFB	; 251
    44a4:	8a 81       	ldd	r24, Y+2	; 0x02
    44a6:	9b 81       	ldd	r25, Y+3	; 0x03
    44a8:	91 83       	std	Z+1, r25	; 0x01
    44aa:	80 83       	st	Z, r24
    44ac:	06 c0       	rjmp	.+12     	; 0x44ba <vQueueAddToRegistry+0x7e>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    44ae:	89 81       	ldd	r24, Y+1	; 0x01
    44b0:	8f 5f       	subi	r24, 0xFF	; 255
    44b2:	89 83       	std	Y+1, r24	; 0x01
    44b4:	89 81       	ldd	r24, Y+1	; 0x01
    44b6:	88 30       	cpi	r24, 0x08	; 8
    44b8:	70 f2       	brcs	.-100    	; 0x4456 <vQueueAddToRegistry+0x1a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    44ba:	0f 90       	pop	r0
    44bc:	0f 90       	pop	r0
    44be:	0f 90       	pop	r0
    44c0:	0f 90       	pop	r0
    44c2:	0f 90       	pop	r0
    44c4:	cf 91       	pop	r28
    44c6:	df 91       	pop	r29
    44c8:	08 95       	ret

000044ca <pcQueueGetName>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    44ca:	df 93       	push	r29
    44cc:	cf 93       	push	r28
    44ce:	00 d0       	rcall	.+0      	; 0x44d0 <pcQueueGetName+0x6>
    44d0:	00 d0       	rcall	.+0      	; 0x44d2 <pcQueueGetName+0x8>
    44d2:	0f 92       	push	r0
    44d4:	cd b7       	in	r28, 0x3d	; 61
    44d6:	de b7       	in	r29, 0x3e	; 62
    44d8:	9d 83       	std	Y+5, r25	; 0x05
    44da:	8c 83       	std	Y+4, r24	; 0x04
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    44dc:	1a 82       	std	Y+2, r1	; 0x02
    44de:	19 82       	std	Y+1, r1	; 0x01

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    44e0:	1b 82       	std	Y+3, r1	; 0x03
    44e2:	24 c0       	rjmp	.+72     	; 0x452c <pcQueueGetName+0x62>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    44e4:	8b 81       	ldd	r24, Y+3	; 0x03
    44e6:	88 2f       	mov	r24, r24
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	88 0f       	add	r24, r24
    44ec:	99 1f       	adc	r25, r25
    44ee:	01 96       	adiw	r24, 0x01	; 1
    44f0:	88 0f       	add	r24, r24
    44f2:	99 1f       	adc	r25, r25
    44f4:	fc 01       	movw	r30, r24
    44f6:	ef 5d       	subi	r30, 0xDF	; 223
    44f8:	fb 4f       	sbci	r31, 0xFB	; 251
    44fa:	20 81       	ld	r18, Z
    44fc:	31 81       	ldd	r19, Z+1	; 0x01
    44fe:	8c 81       	ldd	r24, Y+4	; 0x04
    4500:	9d 81       	ldd	r25, Y+5	; 0x05
    4502:	28 17       	cp	r18, r24
    4504:	39 07       	cpc	r19, r25
    4506:	79 f4       	brne	.+30     	; 0x4526 <pcQueueGetName+0x5c>
			{
				pcReturn = xQueueRegistry[ ux ].pcQueueName;
    4508:	8b 81       	ldd	r24, Y+3	; 0x03
    450a:	88 2f       	mov	r24, r24
    450c:	90 e0       	ldi	r25, 0x00	; 0
    450e:	88 0f       	add	r24, r24
    4510:	99 1f       	adc	r25, r25
    4512:	88 0f       	add	r24, r24
    4514:	99 1f       	adc	r25, r25
    4516:	fc 01       	movw	r30, r24
    4518:	ef 5d       	subi	r30, 0xDF	; 223
    451a:	fb 4f       	sbci	r31, 0xFB	; 251
    451c:	80 81       	ld	r24, Z
    451e:	91 81       	ldd	r25, Z+1	; 0x01
    4520:	9a 83       	std	Y+2, r25	; 0x02
    4522:	89 83       	std	Y+1, r24	; 0x01
    4524:	06 c0       	rjmp	.+12     	; 0x4532 <pcQueueGetName+0x68>
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    4526:	8b 81       	ldd	r24, Y+3	; 0x03
    4528:	8f 5f       	subi	r24, 0xFF	; 255
    452a:	8b 83       	std	Y+3, r24	; 0x03
    452c:	8b 81       	ldd	r24, Y+3	; 0x03
    452e:	88 30       	cpi	r24, 0x08	; 8
    4530:	c8 f2       	brcs	.-78     	; 0x44e4 <pcQueueGetName+0x1a>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return pcReturn;
    4532:	89 81       	ldd	r24, Y+1	; 0x01
    4534:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    4536:	0f 90       	pop	r0
    4538:	0f 90       	pop	r0
    453a:	0f 90       	pop	r0
    453c:	0f 90       	pop	r0
    453e:	0f 90       	pop	r0
    4540:	cf 91       	pop	r28
    4542:	df 91       	pop	r29
    4544:	08 95       	ret

00004546 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
    4546:	df 93       	push	r29
    4548:	cf 93       	push	r28
    454a:	00 d0       	rcall	.+0      	; 0x454c <vQueueUnregisterQueue+0x6>
    454c:	0f 92       	push	r0
    454e:	cd b7       	in	r28, 0x3d	; 61
    4550:	de b7       	in	r29, 0x3e	; 62
    4552:	9b 83       	std	Y+3, r25	; 0x03
    4554:	8a 83       	std	Y+2, r24	; 0x02
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    4556:	19 82       	std	Y+1, r1	; 0x01
    4558:	2f c0       	rjmp	.+94     	; 0x45b8 <vQueueUnregisterQueue+0x72>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    455a:	89 81       	ldd	r24, Y+1	; 0x01
    455c:	88 2f       	mov	r24, r24
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	88 0f       	add	r24, r24
    4562:	99 1f       	adc	r25, r25
    4564:	01 96       	adiw	r24, 0x01	; 1
    4566:	88 0f       	add	r24, r24
    4568:	99 1f       	adc	r25, r25
    456a:	fc 01       	movw	r30, r24
    456c:	ef 5d       	subi	r30, 0xDF	; 223
    456e:	fb 4f       	sbci	r31, 0xFB	; 251
    4570:	20 81       	ld	r18, Z
    4572:	31 81       	ldd	r19, Z+1	; 0x01
    4574:	8a 81       	ldd	r24, Y+2	; 0x02
    4576:	9b 81       	ldd	r25, Y+3	; 0x03
    4578:	28 17       	cp	r18, r24
    457a:	39 07       	cpc	r19, r25
    457c:	d1 f4       	brne	.+52     	; 0x45b2 <vQueueUnregisterQueue+0x6c>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
    457e:	89 81       	ldd	r24, Y+1	; 0x01
    4580:	88 2f       	mov	r24, r24
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	88 0f       	add	r24, r24
    4586:	99 1f       	adc	r25, r25
    4588:	88 0f       	add	r24, r24
    458a:	99 1f       	adc	r25, r25
    458c:	fc 01       	movw	r30, r24
    458e:	ef 5d       	subi	r30, 0xDF	; 223
    4590:	fb 4f       	sbci	r31, 0xFB	; 251
    4592:	11 82       	std	Z+1, r1	; 0x01
    4594:	10 82       	st	Z, r1

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
    4596:	89 81       	ldd	r24, Y+1	; 0x01
    4598:	88 2f       	mov	r24, r24
    459a:	90 e0       	ldi	r25, 0x00	; 0
    459c:	88 0f       	add	r24, r24
    459e:	99 1f       	adc	r25, r25
    45a0:	01 96       	adiw	r24, 0x01	; 1
    45a2:	88 0f       	add	r24, r24
    45a4:	99 1f       	adc	r25, r25
    45a6:	fc 01       	movw	r30, r24
    45a8:	ef 5d       	subi	r30, 0xDF	; 223
    45aa:	fb 4f       	sbci	r31, 0xFB	; 251
    45ac:	11 82       	std	Z+1, r1	; 0x01
    45ae:	10 82       	st	Z, r1
    45b0:	06 c0       	rjmp	.+12     	; 0x45be <vQueueUnregisterQueue+0x78>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    45b2:	89 81       	ldd	r24, Y+1	; 0x01
    45b4:	8f 5f       	subi	r24, 0xFF	; 255
    45b6:	89 83       	std	Y+1, r24	; 0x01
    45b8:	89 81       	ldd	r24, Y+1	; 0x01
    45ba:	88 30       	cpi	r24, 0x08	; 8
    45bc:	70 f2       	brcs	.-100    	; 0x455a <vQueueUnregisterQueue+0x14>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    45be:	0f 90       	pop	r0
    45c0:	0f 90       	pop	r0
    45c2:	0f 90       	pop	r0
    45c4:	cf 91       	pop	r28
    45c6:	df 91       	pop	r29
    45c8:	08 95       	ret

000045ca <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    45ca:	8f 92       	push	r8
    45cc:	9f 92       	push	r9
    45ce:	af 92       	push	r10
    45d0:	bf 92       	push	r11
    45d2:	cf 92       	push	r12
    45d4:	df 92       	push	r13
    45d6:	ef 92       	push	r14
    45d8:	ff 92       	push	r15
    45da:	0f 93       	push	r16
    45dc:	1f 93       	push	r17
    45de:	df 93       	push	r29
    45e0:	cf 93       	push	r28
    45e2:	cd b7       	in	r28, 0x3d	; 61
    45e4:	de b7       	in	r29, 0x3e	; 62
    45e6:	60 97       	sbiw	r28, 0x10	; 16
    45e8:	0f b6       	in	r0, 0x3f	; 63
    45ea:	f8 94       	cli
    45ec:	de bf       	out	0x3e, r29	; 62
    45ee:	0f be       	out	0x3f, r0	; 63
    45f0:	cd bf       	out	0x3d, r28	; 61
    45f2:	9f 83       	std	Y+7, r25	; 0x07
    45f4:	8e 83       	std	Y+6, r24	; 0x06
    45f6:	79 87       	std	Y+9, r23	; 0x09
    45f8:	68 87       	std	Y+8, r22	; 0x08
    45fa:	5b 87       	std	Y+11, r21	; 0x0b
    45fc:	4a 87       	std	Y+10, r20	; 0x0a
    45fe:	3d 87       	std	Y+13, r19	; 0x0d
    4600:	2c 87       	std	Y+12, r18	; 0x0c
    4602:	0e 87       	std	Y+14, r16	; 0x0e
    4604:	f8 8a       	std	Y+16, r15	; 0x10
    4606:	ef 86       	std	Y+15, r14	; 0x0f
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4608:	8a 85       	ldd	r24, Y+10	; 0x0a
    460a:	9b 85       	ldd	r25, Y+11	; 0x0b
    460c:	0e 94 78 14 	call	0x28f0	; 0x28f0 <pvPortMalloc>
    4610:	9a 83       	std	Y+2, r25	; 0x02
    4612:	89 83       	std	Y+1, r24	; 0x01

			if( pxStack != NULL )
    4614:	89 81       	ldd	r24, Y+1	; 0x01
    4616:	9a 81       	ldd	r25, Y+2	; 0x02
    4618:	00 97       	sbiw	r24, 0x00	; 0
    461a:	b1 f0       	breq	.+44     	; 0x4648 <xTaskCreate+0x7e>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    461c:	8a e2       	ldi	r24, 0x2A	; 42
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	0e 94 78 14 	call	0x28f0	; 0x28f0 <pvPortMalloc>
    4624:	9d 83       	std	Y+5, r25	; 0x05
    4626:	8c 83       	std	Y+4, r24	; 0x04

				if( pxNewTCB != NULL )
    4628:	8c 81       	ldd	r24, Y+4	; 0x04
    462a:	9d 81       	ldd	r25, Y+5	; 0x05
    462c:	00 97       	sbiw	r24, 0x00	; 0
    462e:	39 f0       	breq	.+14     	; 0x463e <xTaskCreate+0x74>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    4630:	ec 81       	ldd	r30, Y+4	; 0x04
    4632:	fd 81       	ldd	r31, Y+5	; 0x05
    4634:	89 81       	ldd	r24, Y+1	; 0x01
    4636:	9a 81       	ldd	r25, Y+2	; 0x02
    4638:	90 8f       	std	Z+24, r25	; 0x18
    463a:	87 8b       	std	Z+23, r24	; 0x17
    463c:	07 c0       	rjmp	.+14     	; 0x464c <xTaskCreate+0x82>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    463e:	89 81       	ldd	r24, Y+1	; 0x01
    4640:	9a 81       	ldd	r25, Y+2	; 0x02
    4642:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <vPortFree>
    4646:	02 c0       	rjmp	.+4      	; 0x464c <xTaskCreate+0x82>
				}
			}
			else
			{
				pxNewTCB = NULL;
    4648:	1d 82       	std	Y+5, r1	; 0x05
    464a:	1c 82       	std	Y+4, r1	; 0x04
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    464c:	8c 81       	ldd	r24, Y+4	; 0x04
    464e:	9d 81       	ldd	r25, Y+5	; 0x05
    4650:	00 97       	sbiw	r24, 0x00	; 0
    4652:	e9 f0       	breq	.+58     	; 0x468e <xTaskCreate+0xc4>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    4654:	8a 85       	ldd	r24, Y+10	; 0x0a
    4656:	9b 85       	ldd	r25, Y+11	; 0x0b
    4658:	9c 01       	movw	r18, r24
    465a:	40 e0       	ldi	r20, 0x00	; 0
    465c:	50 e0       	ldi	r21, 0x00	; 0
    465e:	8e 81       	ldd	r24, Y+6	; 0x06
    4660:	9f 81       	ldd	r25, Y+7	; 0x07
    4662:	68 85       	ldd	r22, Y+8	; 0x08
    4664:	79 85       	ldd	r23, Y+9	; 0x09
    4666:	ec 85       	ldd	r30, Y+12	; 0x0c
    4668:	fd 85       	ldd	r31, Y+13	; 0x0d
    466a:	af 85       	ldd	r26, Y+15	; 0x0f
    466c:	b8 89       	ldd	r27, Y+16	; 0x10
    466e:	ac 80       	ldd	r10, Y+4	; 0x04
    4670:	bd 80       	ldd	r11, Y+5	; 0x05
    4672:	8f 01       	movw	r16, r30
    4674:	ee 84       	ldd	r14, Y+14	; 0x0e
    4676:	6d 01       	movw	r12, r26
    4678:	88 24       	eor	r8, r8
    467a:	99 24       	eor	r9, r9
    467c:	0e 94 5d 23 	call	0x46ba	; 0x46ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    4680:	8c 81       	ldd	r24, Y+4	; 0x04
    4682:	9d 81       	ldd	r25, Y+5	; 0x05
    4684:	0e 94 18 24 	call	0x4830	; 0x4830 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    4688:	81 e0       	ldi	r24, 0x01	; 1
    468a:	8b 83       	std	Y+3, r24	; 0x03
    468c:	02 c0       	rjmp	.+4      	; 0x4692 <xTaskCreate+0xc8>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    468e:	8f ef       	ldi	r24, 0xFF	; 255
    4690:	8b 83       	std	Y+3, r24	; 0x03
		}

		return xReturn;
    4692:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    4694:	60 96       	adiw	r28, 0x10	; 16
    4696:	0f b6       	in	r0, 0x3f	; 63
    4698:	f8 94       	cli
    469a:	de bf       	out	0x3e, r29	; 62
    469c:	0f be       	out	0x3f, r0	; 63
    469e:	cd bf       	out	0x3d, r28	; 61
    46a0:	cf 91       	pop	r28
    46a2:	df 91       	pop	r29
    46a4:	1f 91       	pop	r17
    46a6:	0f 91       	pop	r16
    46a8:	ff 90       	pop	r15
    46aa:	ef 90       	pop	r14
    46ac:	df 90       	pop	r13
    46ae:	cf 90       	pop	r12
    46b0:	bf 90       	pop	r11
    46b2:	af 90       	pop	r10
    46b4:	9f 90       	pop	r9
    46b6:	8f 90       	pop	r8
    46b8:	08 95       	ret

000046ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    46ba:	8f 92       	push	r8
    46bc:	9f 92       	push	r9
    46be:	af 92       	push	r10
    46c0:	bf 92       	push	r11
    46c2:	cf 92       	push	r12
    46c4:	df 92       	push	r13
    46c6:	ef 92       	push	r14
    46c8:	0f 93       	push	r16
    46ca:	1f 93       	push	r17
    46cc:	df 93       	push	r29
    46ce:	cf 93       	push	r28
    46d0:	cd b7       	in	r28, 0x3d	; 61
    46d2:	de b7       	in	r29, 0x3e	; 62
    46d4:	64 97       	sbiw	r28, 0x14	; 20
    46d6:	0f b6       	in	r0, 0x3f	; 63
    46d8:	f8 94       	cli
    46da:	de bf       	out	0x3e, r29	; 62
    46dc:	0f be       	out	0x3f, r0	; 63
    46de:	cd bf       	out	0x3d, r28	; 61
    46e0:	9d 83       	std	Y+5, r25	; 0x05
    46e2:	8c 83       	std	Y+4, r24	; 0x04
    46e4:	7f 83       	std	Y+7, r23	; 0x07
    46e6:	6e 83       	std	Y+6, r22	; 0x06
    46e8:	28 87       	std	Y+8, r18	; 0x08
    46ea:	39 87       	std	Y+9, r19	; 0x09
    46ec:	4a 87       	std	Y+10, r20	; 0x0a
    46ee:	5b 87       	std	Y+11, r21	; 0x0b
    46f0:	1d 87       	std	Y+13, r17	; 0x0d
    46f2:	0c 87       	std	Y+12, r16	; 0x0c
    46f4:	ee 86       	std	Y+14, r14	; 0x0e
    46f6:	d8 8a       	std	Y+16, r13	; 0x10
    46f8:	cf 86       	std	Y+15, r12	; 0x0f
    46fa:	ba 8a       	std	Y+18, r11	; 0x12
    46fc:	a9 8a       	std	Y+17, r10	; 0x11
    46fe:	9c 8a       	std	Y+20, r9	; 0x14
    4700:	8b 8a       	std	Y+19, r8	; 0x13
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    4702:	e9 89       	ldd	r30, Y+17	; 0x11
    4704:	fa 89       	ldd	r31, Y+18	; 0x12
    4706:	27 89       	ldd	r18, Z+23	; 0x17
    4708:	30 8d       	ldd	r19, Z+24	; 0x18
    470a:	88 85       	ldd	r24, Y+8	; 0x08
    470c:	99 85       	ldd	r25, Y+9	; 0x09
    470e:	01 97       	sbiw	r24, 0x01	; 1
    4710:	82 0f       	add	r24, r18
    4712:	93 1f       	adc	r25, r19
    4714:	9b 83       	std	Y+3, r25	; 0x03
    4716:	8a 83       	std	Y+2, r24	; 0x02
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    4718:	19 82       	std	Y+1, r1	; 0x01
    471a:	21 c0       	rjmp	.+66     	; 0x475e <prvInitialiseNewTask+0xa4>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    471c:	89 81       	ldd	r24, Y+1	; 0x01
    471e:	48 2f       	mov	r20, r24
    4720:	50 e0       	ldi	r21, 0x00	; 0
    4722:	89 81       	ldd	r24, Y+1	; 0x01
    4724:	28 2f       	mov	r18, r24
    4726:	30 e0       	ldi	r19, 0x00	; 0
    4728:	8e 81       	ldd	r24, Y+6	; 0x06
    472a:	9f 81       	ldd	r25, Y+7	; 0x07
    472c:	fc 01       	movw	r30, r24
    472e:	e2 0f       	add	r30, r18
    4730:	f3 1f       	adc	r31, r19
    4732:	20 81       	ld	r18, Z
    4734:	89 89       	ldd	r24, Y+17	; 0x11
    4736:	9a 89       	ldd	r25, Y+18	; 0x12
    4738:	84 0f       	add	r24, r20
    473a:	95 1f       	adc	r25, r21
    473c:	fc 01       	movw	r30, r24
    473e:	79 96       	adiw	r30, 0x19	; 25
    4740:	20 83       	st	Z, r18

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    4742:	89 81       	ldd	r24, Y+1	; 0x01
    4744:	28 2f       	mov	r18, r24
    4746:	30 e0       	ldi	r19, 0x00	; 0
    4748:	8e 81       	ldd	r24, Y+6	; 0x06
    474a:	9f 81       	ldd	r25, Y+7	; 0x07
    474c:	fc 01       	movw	r30, r24
    474e:	e2 0f       	add	r30, r18
    4750:	f3 1f       	adc	r31, r19
    4752:	80 81       	ld	r24, Z
    4754:	88 23       	and	r24, r24
    4756:	31 f0       	breq	.+12     	; 0x4764 <prvInitialiseNewTask+0xaa>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    4758:	89 81       	ldd	r24, Y+1	; 0x01
    475a:	8f 5f       	subi	r24, 0xFF	; 255
    475c:	89 83       	std	Y+1, r24	; 0x01
    475e:	89 81       	ldd	r24, Y+1	; 0x01
    4760:	8a 30       	cpi	r24, 0x0A	; 10
    4762:	e0 f2       	brcs	.-72     	; 0x471c <prvInitialiseNewTask+0x62>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    4764:	e9 89       	ldd	r30, Y+17	; 0x11
    4766:	fa 89       	ldd	r31, Y+18	; 0x12
    4768:	12 a2       	std	Z+34, r1	; 0x22

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    476a:	8e 85       	ldd	r24, Y+14	; 0x0e
    476c:	85 30       	cpi	r24, 0x05	; 5
    476e:	10 f0       	brcs	.+4      	; 0x4774 <prvInitialiseNewTask+0xba>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    4770:	84 e0       	ldi	r24, 0x04	; 4
    4772:	8e 87       	std	Y+14, r24	; 0x0e
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    4774:	e9 89       	ldd	r30, Y+17	; 0x11
    4776:	fa 89       	ldd	r31, Y+18	; 0x12
    4778:	8e 85       	ldd	r24, Y+14	; 0x0e
    477a:	86 8b       	std	Z+22, r24	; 0x16
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    477c:	e9 89       	ldd	r30, Y+17	; 0x11
    477e:	fa 89       	ldd	r31, Y+18	; 0x12
    4780:	8e 85       	ldd	r24, Y+14	; 0x0e
    4782:	83 a3       	std	Z+35, r24	; 0x23
		pxNewTCB->uxMutexesHeld = 0;
    4784:	e9 89       	ldd	r30, Y+17	; 0x11
    4786:	fa 89       	ldd	r31, Y+18	; 0x12
    4788:	14 a2       	std	Z+36, r1	; 0x24
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    478a:	89 89       	ldd	r24, Y+17	; 0x11
    478c:	9a 89       	ldd	r25, Y+18	; 0x12
    478e:	02 96       	adiw	r24, 0x02	; 2
    4790:	0e 94 04 17 	call	0x2e08	; 0x2e08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    4794:	89 89       	ldd	r24, Y+17	; 0x11
    4796:	9a 89       	ldd	r25, Y+18	; 0x12
    4798:	0c 96       	adiw	r24, 0x0c	; 12
    479a:	0e 94 04 17 	call	0x2e08	; 0x2e08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    479e:	e9 89       	ldd	r30, Y+17	; 0x11
    47a0:	fa 89       	ldd	r31, Y+18	; 0x12
    47a2:	89 89       	ldd	r24, Y+17	; 0x11
    47a4:	9a 89       	ldd	r25, Y+18	; 0x12
    47a6:	91 87       	std	Z+9, r25	; 0x09
    47a8:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    47aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    47ac:	28 2f       	mov	r18, r24
    47ae:	30 e0       	ldi	r19, 0x00	; 0
    47b0:	85 e0       	ldi	r24, 0x05	; 5
    47b2:	90 e0       	ldi	r25, 0x00	; 0
    47b4:	82 1b       	sub	r24, r18
    47b6:	93 0b       	sbc	r25, r19
    47b8:	e9 89       	ldd	r30, Y+17	; 0x11
    47ba:	fa 89       	ldd	r31, Y+18	; 0x12
    47bc:	95 87       	std	Z+13, r25	; 0x0d
    47be:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    47c0:	e9 89       	ldd	r30, Y+17	; 0x11
    47c2:	fa 89       	ldd	r31, Y+18	; 0x12
    47c4:	89 89       	ldd	r24, Y+17	; 0x11
    47c6:	9a 89       	ldd	r25, Y+18	; 0x12
    47c8:	93 8b       	std	Z+19, r25	; 0x13
    47ca:	82 8b       	std	Z+18, r24	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    47cc:	e9 89       	ldd	r30, Y+17	; 0x11
    47ce:	fa 89       	ldd	r31, Y+18	; 0x12
    47d0:	15 a2       	std	Z+37, r1	; 0x25
    47d2:	16 a2       	std	Z+38, r1	; 0x26
    47d4:	17 a2       	std	Z+39, r1	; 0x27
    47d6:	10 a6       	std	Z+40, r1	; 0x28
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    47d8:	e9 89       	ldd	r30, Y+17	; 0x11
    47da:	fa 89       	ldd	r31, Y+18	; 0x12
    47dc:	11 a6       	std	Z+41, r1	; 0x29
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    47de:	8a 81       	ldd	r24, Y+2	; 0x02
    47e0:	9b 81       	ldd	r25, Y+3	; 0x03
    47e2:	2c 81       	ldd	r18, Y+4	; 0x04
    47e4:	3d 81       	ldd	r19, Y+5	; 0x05
    47e6:	4c 85       	ldd	r20, Y+12	; 0x0c
    47e8:	5d 85       	ldd	r21, Y+13	; 0x0d
    47ea:	b9 01       	movw	r22, r18
    47ec:	0e 94 fe 18 	call	0x31fc	; 0x31fc <pxPortInitialiseStack>
    47f0:	e9 89       	ldd	r30, Y+17	; 0x11
    47f2:	fa 89       	ldd	r31, Y+18	; 0x12
    47f4:	91 83       	std	Z+1, r25	; 0x01
    47f6:	80 83       	st	Z, r24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    47f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    47fa:	98 89       	ldd	r25, Y+16	; 0x10
    47fc:	00 97       	sbiw	r24, 0x00	; 0
    47fe:	31 f0       	breq	.+12     	; 0x480c <prvInitialiseNewTask+0x152>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    4800:	ef 85       	ldd	r30, Y+15	; 0x0f
    4802:	f8 89       	ldd	r31, Y+16	; 0x10
    4804:	89 89       	ldd	r24, Y+17	; 0x11
    4806:	9a 89       	ldd	r25, Y+18	; 0x12
    4808:	91 83       	std	Z+1, r25	; 0x01
    480a:	80 83       	st	Z, r24
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    480c:	64 96       	adiw	r28, 0x14	; 20
    480e:	0f b6       	in	r0, 0x3f	; 63
    4810:	f8 94       	cli
    4812:	de bf       	out	0x3e, r29	; 62
    4814:	0f be       	out	0x3f, r0	; 63
    4816:	cd bf       	out	0x3d, r28	; 61
    4818:	cf 91       	pop	r28
    481a:	df 91       	pop	r29
    481c:	1f 91       	pop	r17
    481e:	0f 91       	pop	r16
    4820:	ef 90       	pop	r14
    4822:	df 90       	pop	r13
    4824:	cf 90       	pop	r12
    4826:	bf 90       	pop	r11
    4828:	af 90       	pop	r10
    482a:	9f 90       	pop	r9
    482c:	8f 90       	pop	r8
    482e:	08 95       	ret

00004830 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    4830:	df 93       	push	r29
    4832:	cf 93       	push	r28
    4834:	00 d0       	rcall	.+0      	; 0x4836 <prvAddNewTaskToReadyList+0x6>
    4836:	cd b7       	in	r28, 0x3d	; 61
    4838:	de b7       	in	r29, 0x3e	; 62
    483a:	9a 83       	std	Y+2, r25	; 0x02
    483c:	89 83       	std	Y+1, r24	; 0x01
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    483e:	0f b6       	in	r0, 0x3f	; 63
    4840:	f8 94       	cli
    4842:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    4844:	80 91 b2 03 	lds	r24, 0x03B2
    4848:	8f 5f       	subi	r24, 0xFF	; 255
    484a:	80 93 b2 03 	sts	0x03B2, r24
		if( pxCurrentTCB == NULL )
    484e:	80 91 af 03 	lds	r24, 0x03AF
    4852:	90 91 b0 03 	lds	r25, 0x03B0
    4856:	00 97       	sbiw	r24, 0x00	; 0
    4858:	69 f4       	brne	.+26     	; 0x4874 <prvAddNewTaskToReadyList+0x44>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    485a:	89 81       	ldd	r24, Y+1	; 0x01
    485c:	9a 81       	ldd	r25, Y+2	; 0x02
    485e:	90 93 b0 03 	sts	0x03B0, r25
    4862:	80 93 af 03 	sts	0x03AF, r24

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    4866:	80 91 b2 03 	lds	r24, 0x03B2
    486a:	81 30       	cpi	r24, 0x01	; 1
    486c:	b9 f4       	brne	.+46     	; 0x489c <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    486e:	0e 94 5a 2c 	call	0x58b4	; 0x58b4 <prvInitialiseTaskLists>
    4872:	14 c0       	rjmp	.+40     	; 0x489c <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    4874:	80 91 b6 03 	lds	r24, 0x03B6
    4878:	88 23       	and	r24, r24
    487a:	81 f4       	brne	.+32     	; 0x489c <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    487c:	e0 91 af 03 	lds	r30, 0x03AF
    4880:	f0 91 b0 03 	lds	r31, 0x03B0
    4884:	96 89       	ldd	r25, Z+22	; 0x16
    4886:	e9 81       	ldd	r30, Y+1	; 0x01
    4888:	fa 81       	ldd	r31, Y+2	; 0x02
    488a:	86 89       	ldd	r24, Z+22	; 0x16
    488c:	89 17       	cp	r24, r25
    488e:	30 f0       	brcs	.+12     	; 0x489c <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
    4890:	89 81       	ldd	r24, Y+1	; 0x01
    4892:	9a 81       	ldd	r25, Y+2	; 0x02
    4894:	90 93 b0 03 	sts	0x03B0, r25
    4898:	80 93 af 03 	sts	0x03AF, r24
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    489c:	80 91 ba 03 	lds	r24, 0x03BA
    48a0:	8f 5f       	subi	r24, 0xFF	; 255
    48a2:	80 93 ba 03 	sts	0x03BA, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    48a6:	e9 81       	ldd	r30, Y+1	; 0x01
    48a8:	fa 81       	ldd	r31, Y+2	; 0x02
    48aa:	96 89       	ldd	r25, Z+22	; 0x16
    48ac:	80 91 b5 03 	lds	r24, 0x03B5
    48b0:	89 17       	cp	r24, r25
    48b2:	28 f4       	brcc	.+10     	; 0x48be <prvAddNewTaskToReadyList+0x8e>
    48b4:	e9 81       	ldd	r30, Y+1	; 0x01
    48b6:	fa 81       	ldd	r31, Y+2	; 0x02
    48b8:	86 89       	ldd	r24, Z+22	; 0x16
    48ba:	80 93 b5 03 	sts	0x03B5, r24
    48be:	e9 81       	ldd	r30, Y+1	; 0x01
    48c0:	fa 81       	ldd	r31, Y+2	; 0x02
    48c2:	86 89       	ldd	r24, Z+22	; 0x16
    48c4:	28 2f       	mov	r18, r24
    48c6:	30 e0       	ldi	r19, 0x00	; 0
    48c8:	c9 01       	movw	r24, r18
    48ca:	88 0f       	add	r24, r24
    48cc:	99 1f       	adc	r25, r25
    48ce:	88 0f       	add	r24, r24
    48d0:	99 1f       	adc	r25, r25
    48d2:	88 0f       	add	r24, r24
    48d4:	99 1f       	adc	r25, r25
    48d6:	82 0f       	add	r24, r18
    48d8:	93 1f       	adc	r25, r19
    48da:	ac 01       	movw	r20, r24
    48dc:	40 54       	subi	r20, 0x40	; 64
    48de:	5c 4f       	sbci	r21, 0xFC	; 252
    48e0:	89 81       	ldd	r24, Y+1	; 0x01
    48e2:	9a 81       	ldd	r25, Y+2	; 0x02
    48e4:	9c 01       	movw	r18, r24
    48e6:	2e 5f       	subi	r18, 0xFE	; 254
    48e8:	3f 4f       	sbci	r19, 0xFF	; 255
    48ea:	ca 01       	movw	r24, r20
    48ec:	b9 01       	movw	r22, r18
    48ee:	0e 94 14 17 	call	0x2e28	; 0x2e28 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    48f2:	0f 90       	pop	r0
    48f4:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    48f6:	80 91 b6 03 	lds	r24, 0x03B6
    48fa:	88 23       	and	r24, r24
    48fc:	61 f0       	breq	.+24     	; 0x4916 <prvAddNewTaskToReadyList+0xe6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    48fe:	e0 91 af 03 	lds	r30, 0x03AF
    4902:	f0 91 b0 03 	lds	r31, 0x03B0
    4906:	96 89       	ldd	r25, Z+22	; 0x16
    4908:	e9 81       	ldd	r30, Y+1	; 0x01
    490a:	fa 81       	ldd	r31, Y+2	; 0x02
    490c:	86 89       	ldd	r24, Z+22	; 0x16
    490e:	98 17       	cp	r25, r24
    4910:	10 f4       	brcc	.+4      	; 0x4916 <prvAddNewTaskToReadyList+0xe6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    4912:	0e 94 bd 1a 	call	0x357a	; 0x357a <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    4916:	0f 90       	pop	r0
    4918:	0f 90       	pop	r0
    491a:	cf 91       	pop	r28
    491c:	df 91       	pop	r29
    491e:	08 95       	ret

00004920 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    4920:	df 93       	push	r29
    4922:	cf 93       	push	r28
    4924:	00 d0       	rcall	.+0      	; 0x4926 <vTaskDelete+0x6>
    4926:	00 d0       	rcall	.+0      	; 0x4928 <vTaskDelete+0x8>
    4928:	00 d0       	rcall	.+0      	; 0x492a <vTaskDelete+0xa>
    492a:	cd b7       	in	r28, 0x3d	; 61
    492c:	de b7       	in	r29, 0x3e	; 62
    492e:	9c 83       	std	Y+4, r25	; 0x04
    4930:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    4932:	0f b6       	in	r0, 0x3f	; 63
    4934:	f8 94       	cli
    4936:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    4938:	8b 81       	ldd	r24, Y+3	; 0x03
    493a:	9c 81       	ldd	r25, Y+4	; 0x04
    493c:	00 97       	sbiw	r24, 0x00	; 0
    493e:	39 f4       	brne	.+14     	; 0x494e <vTaskDelete+0x2e>
    4940:	80 91 af 03 	lds	r24, 0x03AF
    4944:	90 91 b0 03 	lds	r25, 0x03B0
    4948:	9e 83       	std	Y+6, r25	; 0x06
    494a:	8d 83       	std	Y+5, r24	; 0x05
    494c:	04 c0       	rjmp	.+8      	; 0x4956 <vTaskDelete+0x36>
    494e:	8b 81       	ldd	r24, Y+3	; 0x03
    4950:	9c 81       	ldd	r25, Y+4	; 0x04
    4952:	9e 83       	std	Y+6, r25	; 0x06
    4954:	8d 83       	std	Y+5, r24	; 0x05
    4956:	8d 81       	ldd	r24, Y+5	; 0x05
    4958:	9e 81       	ldd	r25, Y+6	; 0x06
    495a:	9a 83       	std	Y+2, r25	; 0x02
    495c:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    495e:	89 81       	ldd	r24, Y+1	; 0x01
    4960:	9a 81       	ldd	r25, Y+2	; 0x02
    4962:	02 96       	adiw	r24, 0x02	; 2
    4964:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    4968:	e9 81       	ldd	r30, Y+1	; 0x01
    496a:	fa 81       	ldd	r31, Y+2	; 0x02
    496c:	84 89       	ldd	r24, Z+20	; 0x14
    496e:	95 89       	ldd	r25, Z+21	; 0x15
    4970:	00 97       	sbiw	r24, 0x00	; 0
    4972:	29 f0       	breq	.+10     	; 0x497e <vTaskDelete+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4974:	89 81       	ldd	r24, Y+1	; 0x01
    4976:	9a 81       	ldd	r25, Y+2	; 0x02
    4978:	0c 96       	adiw	r24, 0x0c	; 12
    497a:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    497e:	80 91 ba 03 	lds	r24, 0x03BA
    4982:	8f 5f       	subi	r24, 0xFF	; 255
    4984:	80 93 ba 03 	sts	0x03BA, r24

			if( pxTCB == pxCurrentTCB )
    4988:	20 91 af 03 	lds	r18, 0x03AF
    498c:	30 91 b0 03 	lds	r19, 0x03B0
    4990:	89 81       	ldd	r24, Y+1	; 0x01
    4992:	9a 81       	ldd	r25, Y+2	; 0x02
    4994:	82 17       	cp	r24, r18
    4996:	93 07       	cpc	r25, r19
    4998:	81 f4       	brne	.+32     	; 0x49ba <vTaskDelete+0x9a>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    499a:	89 81       	ldd	r24, Y+1	; 0x01
    499c:	9a 81       	ldd	r25, Y+2	; 0x02
    499e:	9c 01       	movw	r18, r24
    49a0:	2e 5f       	subi	r18, 0xFE	; 254
    49a2:	3f 4f       	sbci	r19, 0xFF	; 255
    49a4:	8c e0       	ldi	r24, 0x0C	; 12
    49a6:	94 e0       	ldi	r25, 0x04	; 4
    49a8:	b9 01       	movw	r22, r18
    49aa:	0e 94 14 17 	call	0x2e28	; 0x2e28 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    49ae:	80 91 b1 03 	lds	r24, 0x03B1
    49b2:	8f 5f       	subi	r24, 0xFF	; 255
    49b4:	80 93 b1 03 	sts	0x03B1, r24
    49b8:	0b c0       	rjmp	.+22     	; 0x49d0 <vTaskDelete+0xb0>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    49ba:	80 91 b2 03 	lds	r24, 0x03B2
    49be:	81 50       	subi	r24, 0x01	; 1
    49c0:	80 93 b2 03 	sts	0x03B2, r24
				prvDeleteTCB( pxTCB );
    49c4:	89 81       	ldd	r24, Y+1	; 0x01
    49c6:	9a 81       	ldd	r25, Y+2	; 0x02
    49c8:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    49cc:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    49d0:	0f 90       	pop	r0
    49d2:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    49d4:	80 91 b6 03 	lds	r24, 0x03B6
    49d8:	88 23       	and	r24, r24
    49da:	59 f0       	breq	.+22     	; 0x49f2 <vTaskDelete+0xd2>
		{
			if( pxTCB == pxCurrentTCB )
    49dc:	20 91 af 03 	lds	r18, 0x03AF
    49e0:	30 91 b0 03 	lds	r19, 0x03B0
    49e4:	89 81       	ldd	r24, Y+1	; 0x01
    49e6:	9a 81       	ldd	r25, Y+2	; 0x02
    49e8:	82 17       	cp	r24, r18
    49ea:	93 07       	cpc	r25, r19
    49ec:	11 f4       	brne	.+4      	; 0x49f2 <vTaskDelete+0xd2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    49ee:	0e 94 bd 1a 	call	0x357a	; 0x357a <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    49f2:	26 96       	adiw	r28, 0x06	; 6
    49f4:	0f b6       	in	r0, 0x3f	; 63
    49f6:	f8 94       	cli
    49f8:	de bf       	out	0x3e, r29	; 62
    49fa:	0f be       	out	0x3f, r0	; 63
    49fc:	cd bf       	out	0x3d, r28	; 61
    49fe:	cf 91       	pop	r28
    4a00:	df 91       	pop	r29
    4a02:	08 95       	ret

00004a04 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    4a04:	df 93       	push	r29
    4a06:	cf 93       	push	r28
    4a08:	cd b7       	in	r28, 0x3d	; 61
    4a0a:	de b7       	in	r29, 0x3e	; 62
    4a0c:	2a 97       	sbiw	r28, 0x0a	; 10
    4a0e:	0f b6       	in	r0, 0x3f	; 63
    4a10:	f8 94       	cli
    4a12:	de bf       	out	0x3e, r29	; 62
    4a14:	0f be       	out	0x3f, r0	; 63
    4a16:	cd bf       	out	0x3d, r28	; 61
    4a18:	98 87       	std	Y+8, r25	; 0x08
    4a1a:	8f 83       	std	Y+7, r24	; 0x07
    4a1c:	7a 87       	std	Y+10, r23	; 0x0a
    4a1e:	69 87       	std	Y+9, r22	; 0x09
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    4a20:	1b 82       	std	Y+3, r1	; 0x03

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    4a22:	0e 94 63 28 	call	0x50c6	; 0x50c6 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    4a26:	80 91 b3 03 	lds	r24, 0x03B3
    4a2a:	90 91 b4 03 	lds	r25, 0x03B4
    4a2e:	9a 83       	std	Y+2, r25	; 0x02
    4a30:	89 83       	std	Y+1, r24	; 0x01

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4a32:	ef 81       	ldd	r30, Y+7	; 0x07
    4a34:	f8 85       	ldd	r31, Y+8	; 0x08
    4a36:	20 81       	ld	r18, Z
    4a38:	31 81       	ldd	r19, Z+1	; 0x01
    4a3a:	89 85       	ldd	r24, Y+9	; 0x09
    4a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a3e:	82 0f       	add	r24, r18
    4a40:	93 1f       	adc	r25, r19
    4a42:	9e 83       	std	Y+6, r25	; 0x06
    4a44:	8d 83       	std	Y+5, r24	; 0x05

			if( xConstTickCount < *pxPreviousWakeTime )
    4a46:	ef 81       	ldd	r30, Y+7	; 0x07
    4a48:	f8 85       	ldd	r31, Y+8	; 0x08
    4a4a:	20 81       	ld	r18, Z
    4a4c:	31 81       	ldd	r19, Z+1	; 0x01
    4a4e:	89 81       	ldd	r24, Y+1	; 0x01
    4a50:	9a 81       	ldd	r25, Y+2	; 0x02
    4a52:	82 17       	cp	r24, r18
    4a54:	93 07       	cpc	r25, r19
    4a56:	98 f4       	brcc	.+38     	; 0x4a7e <vTaskDelayUntil+0x7a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    4a58:	ef 81       	ldd	r30, Y+7	; 0x07
    4a5a:	f8 85       	ldd	r31, Y+8	; 0x08
    4a5c:	20 81       	ld	r18, Z
    4a5e:	31 81       	ldd	r19, Z+1	; 0x01
    4a60:	8d 81       	ldd	r24, Y+5	; 0x05
    4a62:	9e 81       	ldd	r25, Y+6	; 0x06
    4a64:	82 17       	cp	r24, r18
    4a66:	93 07       	cpc	r25, r19
    4a68:	e0 f4       	brcc	.+56     	; 0x4aa2 <vTaskDelayUntil+0x9e>
    4a6a:	2d 81       	ldd	r18, Y+5	; 0x05
    4a6c:	3e 81       	ldd	r19, Y+6	; 0x06
    4a6e:	89 81       	ldd	r24, Y+1	; 0x01
    4a70:	9a 81       	ldd	r25, Y+2	; 0x02
    4a72:	82 17       	cp	r24, r18
    4a74:	93 07       	cpc	r25, r19
    4a76:	a8 f4       	brcc	.+42     	; 0x4aa2 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    4a78:	81 e0       	ldi	r24, 0x01	; 1
    4a7a:	8b 83       	std	Y+3, r24	; 0x03
    4a7c:	12 c0       	rjmp	.+36     	; 0x4aa2 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    4a7e:	ef 81       	ldd	r30, Y+7	; 0x07
    4a80:	f8 85       	ldd	r31, Y+8	; 0x08
    4a82:	20 81       	ld	r18, Z
    4a84:	31 81       	ldd	r19, Z+1	; 0x01
    4a86:	8d 81       	ldd	r24, Y+5	; 0x05
    4a88:	9e 81       	ldd	r25, Y+6	; 0x06
    4a8a:	82 17       	cp	r24, r18
    4a8c:	93 07       	cpc	r25, r19
    4a8e:	38 f0       	brcs	.+14     	; 0x4a9e <vTaskDelayUntil+0x9a>
    4a90:	2d 81       	ldd	r18, Y+5	; 0x05
    4a92:	3e 81       	ldd	r19, Y+6	; 0x06
    4a94:	89 81       	ldd	r24, Y+1	; 0x01
    4a96:	9a 81       	ldd	r25, Y+2	; 0x02
    4a98:	82 17       	cp	r24, r18
    4a9a:	93 07       	cpc	r25, r19
    4a9c:	10 f4       	brcc	.+4      	; 0x4aa2 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    4a9e:	81 e0       	ldi	r24, 0x01	; 1
    4aa0:	8b 83       	std	Y+3, r24	; 0x03
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4aa2:	ef 81       	ldd	r30, Y+7	; 0x07
    4aa4:	f8 85       	ldd	r31, Y+8	; 0x08
    4aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    4aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    4aaa:	91 83       	std	Z+1, r25	; 0x01
    4aac:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    4aae:	8b 81       	ldd	r24, Y+3	; 0x03
    4ab0:	88 23       	and	r24, r24
    4ab2:	49 f0       	breq	.+18     	; 0x4ac6 <vTaskDelayUntil+0xc2>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    4ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ab8:	29 81       	ldd	r18, Y+1	; 0x01
    4aba:	3a 81       	ldd	r19, Y+2	; 0x02
    4abc:	82 1b       	sub	r24, r18
    4abe:	93 0b       	sbc	r25, r19
    4ac0:	60 e0       	ldi	r22, 0x00	; 0
    4ac2:	0e 94 13 32 	call	0x6426	; 0x6426 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4ac6:	0e 94 6f 28 	call	0x50de	; 0x50de <xTaskResumeAll>
    4aca:	8c 83       	std	Y+4, r24	; 0x04

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4acc:	8c 81       	ldd	r24, Y+4	; 0x04
    4ace:	88 23       	and	r24, r24
    4ad0:	11 f4       	brne	.+4      	; 0x4ad6 <vTaskDelayUntil+0xd2>
		{
			portYIELD_WITHIN_API();
    4ad2:	0e 94 bd 1a 	call	0x357a	; 0x357a <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4ad6:	2a 96       	adiw	r28, 0x0a	; 10
    4ad8:	0f b6       	in	r0, 0x3f	; 63
    4ada:	f8 94       	cli
    4adc:	de bf       	out	0x3e, r29	; 62
    4ade:	0f be       	out	0x3f, r0	; 63
    4ae0:	cd bf       	out	0x3d, r28	; 61
    4ae2:	cf 91       	pop	r28
    4ae4:	df 91       	pop	r29
    4ae6:	08 95       	ret

00004ae8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    4ae8:	df 93       	push	r29
    4aea:	cf 93       	push	r28
    4aec:	00 d0       	rcall	.+0      	; 0x4aee <vTaskDelay+0x6>
    4aee:	0f 92       	push	r0
    4af0:	cd b7       	in	r28, 0x3d	; 61
    4af2:	de b7       	in	r29, 0x3e	; 62
    4af4:	9b 83       	std	Y+3, r25	; 0x03
    4af6:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xAlreadyYielded = pdFALSE;
    4af8:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    4afa:	8a 81       	ldd	r24, Y+2	; 0x02
    4afc:	9b 81       	ldd	r25, Y+3	; 0x03
    4afe:	00 97       	sbiw	r24, 0x00	; 0
    4b00:	51 f0       	breq	.+20     	; 0x4b16 <vTaskDelay+0x2e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    4b02:	0e 94 63 28 	call	0x50c6	; 0x50c6 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    4b06:	8a 81       	ldd	r24, Y+2	; 0x02
    4b08:	9b 81       	ldd	r25, Y+3	; 0x03
    4b0a:	60 e0       	ldi	r22, 0x00	; 0
    4b0c:	0e 94 13 32 	call	0x6426	; 0x6426 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4b10:	0e 94 6f 28 	call	0x50de	; 0x50de <xTaskResumeAll>
    4b14:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4b16:	89 81       	ldd	r24, Y+1	; 0x01
    4b18:	88 23       	and	r24, r24
    4b1a:	11 f4       	brne	.+4      	; 0x4b20 <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    4b1c:	0e 94 bd 1a 	call	0x357a	; 0x357a <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4b20:	0f 90       	pop	r0
    4b22:	0f 90       	pop	r0
    4b24:	0f 90       	pop	r0
    4b26:	cf 91       	pop	r28
    4b28:	df 91       	pop	r29
    4b2a:	08 95       	ret

00004b2c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
    4b2c:	df 93       	push	r29
    4b2e:	cf 93       	push	r28
    4b30:	cd b7       	in	r28, 0x3d	; 61
    4b32:	de b7       	in	r29, 0x3e	; 62
    4b34:	27 97       	sbiw	r28, 0x07	; 7
    4b36:	0f b6       	in	r0, 0x3f	; 63
    4b38:	f8 94       	cli
    4b3a:	de bf       	out	0x3e, r29	; 62
    4b3c:	0f be       	out	0x3f, r0	; 63
    4b3e:	cd bf       	out	0x3d, r28	; 61
    4b40:	9d 83       	std	Y+5, r25	; 0x05
    4b42:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
    4b44:	0f b6       	in	r0, 0x3f	; 63
    4b46:	f8 94       	cli
    4b48:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    4b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    4b4c:	9d 81       	ldd	r25, Y+5	; 0x05
    4b4e:	00 97       	sbiw	r24, 0x00	; 0
    4b50:	39 f4       	brne	.+14     	; 0x4b60 <uxTaskPriorityGet+0x34>
    4b52:	80 91 af 03 	lds	r24, 0x03AF
    4b56:	90 91 b0 03 	lds	r25, 0x03B0
    4b5a:	9f 83       	std	Y+7, r25	; 0x07
    4b5c:	8e 83       	std	Y+6, r24	; 0x06
    4b5e:	04 c0       	rjmp	.+8      	; 0x4b68 <uxTaskPriorityGet+0x3c>
    4b60:	8c 81       	ldd	r24, Y+4	; 0x04
    4b62:	9d 81       	ldd	r25, Y+5	; 0x05
    4b64:	9f 83       	std	Y+7, r25	; 0x07
    4b66:	8e 83       	std	Y+6, r24	; 0x06
    4b68:	8e 81       	ldd	r24, Y+6	; 0x06
    4b6a:	9f 81       	ldd	r25, Y+7	; 0x07
    4b6c:	9b 83       	std	Y+3, r25	; 0x03
    4b6e:	8a 83       	std	Y+2, r24	; 0x02
			uxReturn = pxTCB->uxPriority;
    4b70:	ea 81       	ldd	r30, Y+2	; 0x02
    4b72:	fb 81       	ldd	r31, Y+3	; 0x03
    4b74:	86 89       	ldd	r24, Z+22	; 0x16
    4b76:	89 83       	std	Y+1, r24	; 0x01
		}
		taskEXIT_CRITICAL();
    4b78:	0f 90       	pop	r0
    4b7a:	0f be       	out	0x3f, r0	; 63

		return uxReturn;
    4b7c:	89 81       	ldd	r24, Y+1	; 0x01
	}
    4b7e:	27 96       	adiw	r28, 0x07	; 7
    4b80:	0f b6       	in	r0, 0x3f	; 63
    4b82:	f8 94       	cli
    4b84:	de bf       	out	0x3e, r29	; 62
    4b86:	0f be       	out	0x3f, r0	; 63
    4b88:	cd bf       	out	0x3d, r28	; 61
    4b8a:	cf 91       	pop	r28
    4b8c:	df 91       	pop	r29
    4b8e:	08 95       	ret

00004b90 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
    4b90:	df 93       	push	r29
    4b92:	cf 93       	push	r28
    4b94:	cd b7       	in	r28, 0x3d	; 61
    4b96:	de b7       	in	r29, 0x3e	; 62
    4b98:	28 97       	sbiw	r28, 0x08	; 8
    4b9a:	0f b6       	in	r0, 0x3f	; 63
    4b9c:	f8 94       	cli
    4b9e:	de bf       	out	0x3e, r29	; 62
    4ba0:	0f be       	out	0x3f, r0	; 63
    4ba2:	cd bf       	out	0x3d, r28	; 61
    4ba4:	9e 83       	std	Y+6, r25	; 0x06
    4ba6:	8d 83       	std	Y+5, r24	; 0x05
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
    4ba8:	19 82       	std	Y+1, r1	; 0x01
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    4baa:	8d 81       	ldd	r24, Y+5	; 0x05
    4bac:	9e 81       	ldd	r25, Y+6	; 0x06
    4bae:	00 97       	sbiw	r24, 0x00	; 0
    4bb0:	39 f4       	brne	.+14     	; 0x4bc0 <uxTaskPriorityGetFromISR+0x30>
    4bb2:	80 91 af 03 	lds	r24, 0x03AF
    4bb6:	90 91 b0 03 	lds	r25, 0x03B0
    4bba:	98 87       	std	Y+8, r25	; 0x08
    4bbc:	8f 83       	std	Y+7, r24	; 0x07
    4bbe:	04 c0       	rjmp	.+8      	; 0x4bc8 <uxTaskPriorityGetFromISR+0x38>
    4bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    4bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    4bc4:	98 87       	std	Y+8, r25	; 0x08
    4bc6:	8f 83       	std	Y+7, r24	; 0x07
    4bc8:	8f 81       	ldd	r24, Y+7	; 0x07
    4bca:	98 85       	ldd	r25, Y+8	; 0x08
    4bcc:	9c 83       	std	Y+4, r25	; 0x04
    4bce:	8b 83       	std	Y+3, r24	; 0x03
			uxReturn = pxTCB->uxPriority;
    4bd0:	eb 81       	ldd	r30, Y+3	; 0x03
    4bd2:	fc 81       	ldd	r31, Y+4	; 0x04
    4bd4:	86 89       	ldd	r24, Z+22	; 0x16
    4bd6:	8a 83       	std	Y+2, r24	; 0x02
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
    4bd8:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    4bda:	28 96       	adiw	r28, 0x08	; 8
    4bdc:	0f b6       	in	r0, 0x3f	; 63
    4bde:	f8 94       	cli
    4be0:	de bf       	out	0x3e, r29	; 62
    4be2:	0f be       	out	0x3f, r0	; 63
    4be4:	cd bf       	out	0x3d, r28	; 61
    4be6:	cf 91       	pop	r28
    4be8:	df 91       	pop	r29
    4bea:	08 95       	ret

00004bec <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    4bec:	df 93       	push	r29
    4bee:	cf 93       	push	r28
    4bf0:	cd b7       	in	r28, 0x3d	; 61
    4bf2:	de b7       	in	r29, 0x3e	; 62
    4bf4:	2a 97       	sbiw	r28, 0x0a	; 10
    4bf6:	0f b6       	in	r0, 0x3f	; 63
    4bf8:	f8 94       	cli
    4bfa:	de bf       	out	0x3e, r29	; 62
    4bfc:	0f be       	out	0x3f, r0	; 63
    4bfe:	cd bf       	out	0x3d, r28	; 61
    4c00:	9f 83       	std	Y+7, r25	; 0x07
    4c02:	8e 83       	std	Y+6, r24	; 0x06
    4c04:	68 87       	std	Y+8, r22	; 0x08
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    4c06:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    4c08:	88 85       	ldd	r24, Y+8	; 0x08
    4c0a:	85 30       	cpi	r24, 0x05	; 5
    4c0c:	10 f0       	brcs	.+4      	; 0x4c12 <vTaskPrioritySet+0x26>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    4c0e:	84 e0       	ldi	r24, 0x04	; 4
    4c10:	88 87       	std	Y+8, r24	; 0x08
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    4c12:	0f b6       	in	r0, 0x3f	; 63
    4c14:	f8 94       	cli
    4c16:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    4c18:	8e 81       	ldd	r24, Y+6	; 0x06
    4c1a:	9f 81       	ldd	r25, Y+7	; 0x07
    4c1c:	00 97       	sbiw	r24, 0x00	; 0
    4c1e:	39 f4       	brne	.+14     	; 0x4c2e <vTaskPrioritySet+0x42>
    4c20:	80 91 af 03 	lds	r24, 0x03AF
    4c24:	90 91 b0 03 	lds	r25, 0x03B0
    4c28:	9a 87       	std	Y+10, r25	; 0x0a
    4c2a:	89 87       	std	Y+9, r24	; 0x09
    4c2c:	04 c0       	rjmp	.+8      	; 0x4c36 <vTaskPrioritySet+0x4a>
    4c2e:	8e 81       	ldd	r24, Y+6	; 0x06
    4c30:	9f 81       	ldd	r25, Y+7	; 0x07
    4c32:	9a 87       	std	Y+10, r25	; 0x0a
    4c34:	89 87       	std	Y+9, r24	; 0x09
    4c36:	89 85       	ldd	r24, Y+9	; 0x09
    4c38:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c3a:	9d 83       	std	Y+5, r25	; 0x05
    4c3c:	8c 83       	std	Y+4, r24	; 0x04

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    4c3e:	ec 81       	ldd	r30, Y+4	; 0x04
    4c40:	fd 81       	ldd	r31, Y+5	; 0x05
    4c42:	83 a1       	ldd	r24, Z+35	; 0x23
    4c44:	8b 83       	std	Y+3, r24	; 0x03
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    4c46:	9b 81       	ldd	r25, Y+3	; 0x03
    4c48:	88 85       	ldd	r24, Y+8	; 0x08
    4c4a:	98 17       	cp	r25, r24
    4c4c:	09 f4       	brne	.+2      	; 0x4c50 <vTaskPrioritySet+0x64>
    4c4e:	8d c0       	rjmp	.+282    	; 0x4d6a <vTaskPrioritySet+0x17e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    4c50:	98 85       	ldd	r25, Y+8	; 0x08
    4c52:	8b 81       	ldd	r24, Y+3	; 0x03
    4c54:	89 17       	cp	r24, r25
    4c56:	a0 f4       	brcc	.+40     	; 0x4c80 <vTaskPrioritySet+0x94>
				{
					if( pxTCB != pxCurrentTCB )
    4c58:	20 91 af 03 	lds	r18, 0x03AF
    4c5c:	30 91 b0 03 	lds	r19, 0x03B0
    4c60:	8c 81       	ldd	r24, Y+4	; 0x04
    4c62:	9d 81       	ldd	r25, Y+5	; 0x05
    4c64:	82 17       	cp	r24, r18
    4c66:	93 07       	cpc	r25, r19
    4c68:	b1 f0       	breq	.+44     	; 0x4c96 <vTaskPrioritySet+0xaa>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    4c6a:	e0 91 af 03 	lds	r30, 0x03AF
    4c6e:	f0 91 b0 03 	lds	r31, 0x03B0
    4c72:	96 89       	ldd	r25, Z+22	; 0x16
    4c74:	88 85       	ldd	r24, Y+8	; 0x08
    4c76:	89 17       	cp	r24, r25
    4c78:	70 f0       	brcs	.+28     	; 0x4c96 <vTaskPrioritySet+0xaa>
						{
							xYieldRequired = pdTRUE;
    4c7a:	81 e0       	ldi	r24, 0x01	; 1
    4c7c:	89 83       	std	Y+1, r24	; 0x01
    4c7e:	0b c0       	rjmp	.+22     	; 0x4c96 <vTaskPrioritySet+0xaa>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    4c80:	20 91 af 03 	lds	r18, 0x03AF
    4c84:	30 91 b0 03 	lds	r19, 0x03B0
    4c88:	8c 81       	ldd	r24, Y+4	; 0x04
    4c8a:	9d 81       	ldd	r25, Y+5	; 0x05
    4c8c:	82 17       	cp	r24, r18
    4c8e:	93 07       	cpc	r25, r19
    4c90:	11 f4       	brne	.+4      	; 0x4c96 <vTaskPrioritySet+0xaa>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
    4c92:	81 e0       	ldi	r24, 0x01	; 1
    4c94:	89 83       	std	Y+1, r24	; 0x01
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    4c96:	ec 81       	ldd	r30, Y+4	; 0x04
    4c98:	fd 81       	ldd	r31, Y+5	; 0x05
    4c9a:	86 89       	ldd	r24, Z+22	; 0x16
    4c9c:	8a 83       	std	Y+2, r24	; 0x02

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4c9e:	ec 81       	ldd	r30, Y+4	; 0x04
    4ca0:	fd 81       	ldd	r31, Y+5	; 0x05
    4ca2:	93 a1       	ldd	r25, Z+35	; 0x23
    4ca4:	ec 81       	ldd	r30, Y+4	; 0x04
    4ca6:	fd 81       	ldd	r31, Y+5	; 0x05
    4ca8:	86 89       	ldd	r24, Z+22	; 0x16
    4caa:	98 17       	cp	r25, r24
    4cac:	21 f4       	brne	.+8      	; 0x4cb6 <vTaskPrioritySet+0xca>
					{
						pxTCB->uxPriority = uxNewPriority;
    4cae:	ec 81       	ldd	r30, Y+4	; 0x04
    4cb0:	fd 81       	ldd	r31, Y+5	; 0x05
    4cb2:	88 85       	ldd	r24, Y+8	; 0x08
    4cb4:	86 8b       	std	Z+22, r24	; 0x16
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4cb6:	ec 81       	ldd	r30, Y+4	; 0x04
    4cb8:	fd 81       	ldd	r31, Y+5	; 0x05
    4cba:	88 85       	ldd	r24, Y+8	; 0x08
    4cbc:	83 a3       	std	Z+35, r24	; 0x23
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    4cbe:	ec 81       	ldd	r30, Y+4	; 0x04
    4cc0:	fd 81       	ldd	r31, Y+5	; 0x05
    4cc2:	84 85       	ldd	r24, Z+12	; 0x0c
    4cc4:	95 85       	ldd	r25, Z+13	; 0x0d
    4cc6:	99 23       	and	r25, r25
    4cc8:	5c f0       	brlt	.+22     	; 0x4ce0 <vTaskPrioritySet+0xf4>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4cca:	88 85       	ldd	r24, Y+8	; 0x08
    4ccc:	28 2f       	mov	r18, r24
    4cce:	30 e0       	ldi	r19, 0x00	; 0
    4cd0:	85 e0       	ldi	r24, 0x05	; 5
    4cd2:	90 e0       	ldi	r25, 0x00	; 0
    4cd4:	82 1b       	sub	r24, r18
    4cd6:	93 0b       	sbc	r25, r19
    4cd8:	ec 81       	ldd	r30, Y+4	; 0x04
    4cda:	fd 81       	ldd	r31, Y+5	; 0x05
    4cdc:	95 87       	std	Z+13, r25	; 0x0d
    4cde:	84 87       	std	Z+12, r24	; 0x0c

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    4ce0:	ec 81       	ldd	r30, Y+4	; 0x04
    4ce2:	fd 81       	ldd	r31, Y+5	; 0x05
    4ce4:	42 85       	ldd	r20, Z+10	; 0x0a
    4ce6:	53 85       	ldd	r21, Z+11	; 0x0b
    4ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    4cea:	28 2f       	mov	r18, r24
    4cec:	30 e0       	ldi	r19, 0x00	; 0
    4cee:	c9 01       	movw	r24, r18
    4cf0:	88 0f       	add	r24, r24
    4cf2:	99 1f       	adc	r25, r25
    4cf4:	88 0f       	add	r24, r24
    4cf6:	99 1f       	adc	r25, r25
    4cf8:	88 0f       	add	r24, r24
    4cfa:	99 1f       	adc	r25, r25
    4cfc:	82 0f       	add	r24, r18
    4cfe:	93 1f       	adc	r25, r19
    4d00:	80 54       	subi	r24, 0x40	; 64
    4d02:	9c 4f       	sbci	r25, 0xFC	; 252
    4d04:	48 17       	cp	r20, r24
    4d06:	59 07       	cpc	r21, r25
    4d08:	59 f5       	brne	.+86     	; 0x4d60 <vTaskPrioritySet+0x174>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4d0a:	8c 81       	ldd	r24, Y+4	; 0x04
    4d0c:	9d 81       	ldd	r25, Y+5	; 0x05
    4d0e:	02 96       	adiw	r24, 0x02	; 2
    4d10:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    4d14:	ec 81       	ldd	r30, Y+4	; 0x04
    4d16:	fd 81       	ldd	r31, Y+5	; 0x05
    4d18:	96 89       	ldd	r25, Z+22	; 0x16
    4d1a:	80 91 b5 03 	lds	r24, 0x03B5
    4d1e:	89 17       	cp	r24, r25
    4d20:	28 f4       	brcc	.+10     	; 0x4d2c <vTaskPrioritySet+0x140>
    4d22:	ec 81       	ldd	r30, Y+4	; 0x04
    4d24:	fd 81       	ldd	r31, Y+5	; 0x05
    4d26:	86 89       	ldd	r24, Z+22	; 0x16
    4d28:	80 93 b5 03 	sts	0x03B5, r24
    4d2c:	ec 81       	ldd	r30, Y+4	; 0x04
    4d2e:	fd 81       	ldd	r31, Y+5	; 0x05
    4d30:	86 89       	ldd	r24, Z+22	; 0x16
    4d32:	28 2f       	mov	r18, r24
    4d34:	30 e0       	ldi	r19, 0x00	; 0
    4d36:	c9 01       	movw	r24, r18
    4d38:	88 0f       	add	r24, r24
    4d3a:	99 1f       	adc	r25, r25
    4d3c:	88 0f       	add	r24, r24
    4d3e:	99 1f       	adc	r25, r25
    4d40:	88 0f       	add	r24, r24
    4d42:	99 1f       	adc	r25, r25
    4d44:	82 0f       	add	r24, r18
    4d46:	93 1f       	adc	r25, r19
    4d48:	ac 01       	movw	r20, r24
    4d4a:	40 54       	subi	r20, 0x40	; 64
    4d4c:	5c 4f       	sbci	r21, 0xFC	; 252
    4d4e:	8c 81       	ldd	r24, Y+4	; 0x04
    4d50:	9d 81       	ldd	r25, Y+5	; 0x05
    4d52:	9c 01       	movw	r18, r24
    4d54:	2e 5f       	subi	r18, 0xFE	; 254
    4d56:	3f 4f       	sbci	r19, 0xFF	; 255
    4d58:	ca 01       	movw	r24, r20
    4d5a:	b9 01       	movw	r22, r18
    4d5c:	0e 94 14 17 	call	0x2e28	; 0x2e28 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
    4d60:	89 81       	ldd	r24, Y+1	; 0x01
    4d62:	88 23       	and	r24, r24
    4d64:	11 f0       	breq	.+4      	; 0x4d6a <vTaskPrioritySet+0x17e>
				{
					taskYIELD_IF_USING_PREEMPTION();
    4d66:	0e 94 bd 1a 	call	0x357a	; 0x357a <vPortYield>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    4d6a:	0f 90       	pop	r0
    4d6c:	0f be       	out	0x3f, r0	; 63
	}
    4d6e:	2a 96       	adiw	r28, 0x0a	; 10
    4d70:	0f b6       	in	r0, 0x3f	; 63
    4d72:	f8 94       	cli
    4d74:	de bf       	out	0x3e, r29	; 62
    4d76:	0f be       	out	0x3f, r0	; 63
    4d78:	cd bf       	out	0x3d, r28	; 61
    4d7a:	cf 91       	pop	r28
    4d7c:	df 91       	pop	r29
    4d7e:	08 95       	ret

00004d80 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    4d80:	df 93       	push	r29
    4d82:	cf 93       	push	r28
    4d84:	00 d0       	rcall	.+0      	; 0x4d86 <vTaskSuspend+0x6>
    4d86:	00 d0       	rcall	.+0      	; 0x4d88 <vTaskSuspend+0x8>
    4d88:	00 d0       	rcall	.+0      	; 0x4d8a <vTaskSuspend+0xa>
    4d8a:	cd b7       	in	r28, 0x3d	; 61
    4d8c:	de b7       	in	r29, 0x3e	; 62
    4d8e:	9c 83       	std	Y+4, r25	; 0x04
    4d90:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    4d92:	0f b6       	in	r0, 0x3f	; 63
    4d94:	f8 94       	cli
    4d96:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    4d98:	8b 81       	ldd	r24, Y+3	; 0x03
    4d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    4d9c:	00 97       	sbiw	r24, 0x00	; 0
    4d9e:	39 f4       	brne	.+14     	; 0x4dae <vTaskSuspend+0x2e>
    4da0:	80 91 af 03 	lds	r24, 0x03AF
    4da4:	90 91 b0 03 	lds	r25, 0x03B0
    4da8:	9e 83       	std	Y+6, r25	; 0x06
    4daa:	8d 83       	std	Y+5, r24	; 0x05
    4dac:	04 c0       	rjmp	.+8      	; 0x4db6 <vTaskSuspend+0x36>
    4dae:	8b 81       	ldd	r24, Y+3	; 0x03
    4db0:	9c 81       	ldd	r25, Y+4	; 0x04
    4db2:	9e 83       	std	Y+6, r25	; 0x06
    4db4:	8d 83       	std	Y+5, r24	; 0x05
    4db6:	8d 81       	ldd	r24, Y+5	; 0x05
    4db8:	9e 81       	ldd	r25, Y+6	; 0x06
    4dba:	9a 83       	std	Y+2, r25	; 0x02
    4dbc:	89 83       	std	Y+1, r24	; 0x01

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4dbe:	89 81       	ldd	r24, Y+1	; 0x01
    4dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    4dc2:	02 96       	adiw	r24, 0x02	; 2
    4dc4:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    4dc8:	e9 81       	ldd	r30, Y+1	; 0x01
    4dca:	fa 81       	ldd	r31, Y+2	; 0x02
    4dcc:	84 89       	ldd	r24, Z+20	; 0x14
    4dce:	95 89       	ldd	r25, Z+21	; 0x15
    4dd0:	00 97       	sbiw	r24, 0x00	; 0
    4dd2:	29 f0       	breq	.+10     	; 0x4dde <vTaskSuspend+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4dd4:	89 81       	ldd	r24, Y+1	; 0x01
    4dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    4dd8:	0c 96       	adiw	r24, 0x0c	; 12
    4dda:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    4dde:	89 81       	ldd	r24, Y+1	; 0x01
    4de0:	9a 81       	ldd	r25, Y+2	; 0x02
    4de2:	9c 01       	movw	r18, r24
    4de4:	2e 5f       	subi	r18, 0xFE	; 254
    4de6:	3f 4f       	sbci	r19, 0xFF	; 255
    4de8:	85 e1       	ldi	r24, 0x15	; 21
    4dea:	94 e0       	ldi	r25, 0x04	; 4
    4dec:	b9 01       	movw	r22, r18
    4dee:	0e 94 14 17 	call	0x2e28	; 0x2e28 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4df2:	0f 90       	pop	r0
    4df4:	0f be       	out	0x3f, r0	; 63

		if( xSchedulerRunning != pdFALSE )
    4df6:	80 91 b6 03 	lds	r24, 0x03B6
    4dfa:	88 23       	and	r24, r24
    4dfc:	39 f0       	breq	.+14     	; 0x4e0c <vTaskSuspend+0x8c>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    4dfe:	0f b6       	in	r0, 0x3f	; 63
    4e00:	f8 94       	cli
    4e02:	0f 92       	push	r0
			{
				prvResetNextTaskUnblockTime();
    4e04:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    4e08:	0f 90       	pop	r0
    4e0a:	0f be       	out	0x3f, r0	; 63
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    4e0c:	20 91 af 03 	lds	r18, 0x03AF
    4e10:	30 91 b0 03 	lds	r19, 0x03B0
    4e14:	89 81       	ldd	r24, Y+1	; 0x01
    4e16:	9a 81       	ldd	r25, Y+2	; 0x02
    4e18:	82 17       	cp	r24, r18
    4e1a:	93 07       	cpc	r25, r19
    4e1c:	a1 f4       	brne	.+40     	; 0x4e46 <vTaskSuspend+0xc6>
		{
			if( xSchedulerRunning != pdFALSE )
    4e1e:	80 91 b6 03 	lds	r24, 0x03B6
    4e22:	88 23       	and	r24, r24
    4e24:	19 f0       	breq	.+6      	; 0x4e2c <vTaskSuspend+0xac>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    4e26:	0e 94 bd 1a 	call	0x357a	; 0x357a <vPortYield>
    4e2a:	0d c0       	rjmp	.+26     	; 0x4e46 <vTaskSuspend+0xc6>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4e2c:	90 91 15 04 	lds	r25, 0x0415
    4e30:	80 91 b2 03 	lds	r24, 0x03B2
    4e34:	98 17       	cp	r25, r24
    4e36:	29 f4       	brne	.+10     	; 0x4e42 <vTaskSuspend+0xc2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4e38:	10 92 b0 03 	sts	0x03B0, r1
    4e3c:	10 92 af 03 	sts	0x03AF, r1
    4e40:	02 c0       	rjmp	.+4      	; 0x4e46 <vTaskSuspend+0xc6>
				}
				else
				{
					vTaskSwitchContext();
    4e42:	0e 94 2b 2a 	call	0x5456	; 0x5456 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4e46:	26 96       	adiw	r28, 0x06	; 6
    4e48:	0f b6       	in	r0, 0x3f	; 63
    4e4a:	f8 94       	cli
    4e4c:	de bf       	out	0x3e, r29	; 62
    4e4e:	0f be       	out	0x3f, r0	; 63
    4e50:	cd bf       	out	0x3d, r28	; 61
    4e52:	cf 91       	pop	r28
    4e54:	df 91       	pop	r29
    4e56:	08 95       	ret

00004e58 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    4e58:	df 93       	push	r29
    4e5a:	cf 93       	push	r28
    4e5c:	00 d0       	rcall	.+0      	; 0x4e5e <prvTaskIsTaskSuspended+0x6>
    4e5e:	00 d0       	rcall	.+0      	; 0x4e60 <prvTaskIsTaskSuspended+0x8>
    4e60:	0f 92       	push	r0
    4e62:	cd b7       	in	r28, 0x3d	; 61
    4e64:	de b7       	in	r29, 0x3e	; 62
    4e66:	9d 83       	std	Y+5, r25	; 0x05
    4e68:	8c 83       	std	Y+4, r24	; 0x04
	BaseType_t xReturn = pdFALSE;
    4e6a:	1b 82       	std	Y+3, r1	; 0x03
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
    4e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    4e6e:	9d 81       	ldd	r25, Y+5	; 0x05
    4e70:	9a 83       	std	Y+2, r25	; 0x02
    4e72:	89 83       	std	Y+1, r24	; 0x01

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    4e74:	e9 81       	ldd	r30, Y+1	; 0x01
    4e76:	fa 81       	ldd	r31, Y+2	; 0x02
    4e78:	82 85       	ldd	r24, Z+10	; 0x0a
    4e7a:	93 85       	ldd	r25, Z+11	; 0x0b
    4e7c:	24 e0       	ldi	r18, 0x04	; 4
    4e7e:	85 31       	cpi	r24, 0x15	; 21
    4e80:	92 07       	cpc	r25, r18
    4e82:	81 f4       	brne	.+32     	; 0x4ea4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    4e84:	e9 81       	ldd	r30, Y+1	; 0x01
    4e86:	fa 81       	ldd	r31, Y+2	; 0x02
    4e88:	84 89       	ldd	r24, Z+20	; 0x14
    4e8a:	95 89       	ldd	r25, Z+21	; 0x15
    4e8c:	24 e0       	ldi	r18, 0x04	; 4
    4e8e:	83 30       	cpi	r24, 0x03	; 3
    4e90:	92 07       	cpc	r25, r18
    4e92:	41 f0       	breq	.+16     	; 0x4ea4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
    4e94:	e9 81       	ldd	r30, Y+1	; 0x01
    4e96:	fa 81       	ldd	r31, Y+2	; 0x02
    4e98:	84 89       	ldd	r24, Z+20	; 0x14
    4e9a:	95 89       	ldd	r25, Z+21	; 0x15
    4e9c:	00 97       	sbiw	r24, 0x00	; 0
    4e9e:	11 f4       	brne	.+4      	; 0x4ea4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
    4ea0:	81 e0       	ldi	r24, 0x01	; 1
    4ea2:	8b 83       	std	Y+3, r24	; 0x03
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    4ea4:	8b 81       	ldd	r24, Y+3	; 0x03
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    4ea6:	0f 90       	pop	r0
    4ea8:	0f 90       	pop	r0
    4eaa:	0f 90       	pop	r0
    4eac:	0f 90       	pop	r0
    4eae:	0f 90       	pop	r0
    4eb0:	cf 91       	pop	r28
    4eb2:	df 91       	pop	r29
    4eb4:	08 95       	ret

00004eb6 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    4eb6:	df 93       	push	r29
    4eb8:	cf 93       	push	r28
    4eba:	00 d0       	rcall	.+0      	; 0x4ebc <vTaskResume+0x6>
    4ebc:	00 d0       	rcall	.+0      	; 0x4ebe <vTaskResume+0x8>
    4ebe:	cd b7       	in	r28, 0x3d	; 61
    4ec0:	de b7       	in	r29, 0x3e	; 62
    4ec2:	9c 83       	std	Y+4, r25	; 0x04
    4ec4:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    4ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    4eca:	9a 83       	std	Y+2, r25	; 0x02
    4ecc:	89 83       	std	Y+1, r24	; 0x01
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4ece:	89 81       	ldd	r24, Y+1	; 0x01
    4ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ed2:	00 97       	sbiw	r24, 0x00	; 0
    4ed4:	09 f4       	brne	.+2      	; 0x4ed8 <vTaskResume+0x22>
    4ed6:	4c c0       	rjmp	.+152    	; 0x4f70 <vTaskResume+0xba>
    4ed8:	20 91 af 03 	lds	r18, 0x03AF
    4edc:	30 91 b0 03 	lds	r19, 0x03B0
    4ee0:	89 81       	ldd	r24, Y+1	; 0x01
    4ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ee4:	82 17       	cp	r24, r18
    4ee6:	93 07       	cpc	r25, r19
    4ee8:	09 f4       	brne	.+2      	; 0x4eec <vTaskResume+0x36>
    4eea:	42 c0       	rjmp	.+132    	; 0x4f70 <vTaskResume+0xba>
		{
			taskENTER_CRITICAL();
    4eec:	0f b6       	in	r0, 0x3f	; 63
    4eee:	f8 94       	cli
    4ef0:	0f 92       	push	r0
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    4ef2:	89 81       	ldd	r24, Y+1	; 0x01
    4ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ef6:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <prvTaskIsTaskSuspended>
    4efa:	88 23       	and	r24, r24
    4efc:	b9 f1       	breq	.+110    	; 0x4f6c <vTaskResume+0xb6>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    4efe:	89 81       	ldd	r24, Y+1	; 0x01
    4f00:	9a 81       	ldd	r25, Y+2	; 0x02
    4f02:	02 96       	adiw	r24, 0x02	; 2
    4f04:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    4f08:	e9 81       	ldd	r30, Y+1	; 0x01
    4f0a:	fa 81       	ldd	r31, Y+2	; 0x02
    4f0c:	96 89       	ldd	r25, Z+22	; 0x16
    4f0e:	80 91 b5 03 	lds	r24, 0x03B5
    4f12:	89 17       	cp	r24, r25
    4f14:	28 f4       	brcc	.+10     	; 0x4f20 <vTaskResume+0x6a>
    4f16:	e9 81       	ldd	r30, Y+1	; 0x01
    4f18:	fa 81       	ldd	r31, Y+2	; 0x02
    4f1a:	86 89       	ldd	r24, Z+22	; 0x16
    4f1c:	80 93 b5 03 	sts	0x03B5, r24
    4f20:	e9 81       	ldd	r30, Y+1	; 0x01
    4f22:	fa 81       	ldd	r31, Y+2	; 0x02
    4f24:	86 89       	ldd	r24, Z+22	; 0x16
    4f26:	28 2f       	mov	r18, r24
    4f28:	30 e0       	ldi	r19, 0x00	; 0
    4f2a:	c9 01       	movw	r24, r18
    4f2c:	88 0f       	add	r24, r24
    4f2e:	99 1f       	adc	r25, r25
    4f30:	88 0f       	add	r24, r24
    4f32:	99 1f       	adc	r25, r25
    4f34:	88 0f       	add	r24, r24
    4f36:	99 1f       	adc	r25, r25
    4f38:	82 0f       	add	r24, r18
    4f3a:	93 1f       	adc	r25, r19
    4f3c:	ac 01       	movw	r20, r24
    4f3e:	40 54       	subi	r20, 0x40	; 64
    4f40:	5c 4f       	sbci	r21, 0xFC	; 252
    4f42:	89 81       	ldd	r24, Y+1	; 0x01
    4f44:	9a 81       	ldd	r25, Y+2	; 0x02
    4f46:	9c 01       	movw	r18, r24
    4f48:	2e 5f       	subi	r18, 0xFE	; 254
    4f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f4c:	ca 01       	movw	r24, r20
    4f4e:	b9 01       	movw	r22, r18
    4f50:	0e 94 14 17 	call	0x2e28	; 0x2e28 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4f54:	e9 81       	ldd	r30, Y+1	; 0x01
    4f56:	fa 81       	ldd	r31, Y+2	; 0x02
    4f58:	96 89       	ldd	r25, Z+22	; 0x16
    4f5a:	e0 91 af 03 	lds	r30, 0x03AF
    4f5e:	f0 91 b0 03 	lds	r31, 0x03B0
    4f62:	86 89       	ldd	r24, Z+22	; 0x16
    4f64:	98 17       	cp	r25, r24
    4f66:	10 f0       	brcs	.+4      	; 0x4f6c <vTaskResume+0xb6>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    4f68:	0e 94 bd 1a 	call	0x357a	; 0x357a <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    4f6c:	0f 90       	pop	r0
    4f6e:	0f be       	out	0x3f, r0	; 63
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4f70:	0f 90       	pop	r0
    4f72:	0f 90       	pop	r0
    4f74:	0f 90       	pop	r0
    4f76:	0f 90       	pop	r0
    4f78:	cf 91       	pop	r28
    4f7a:	df 91       	pop	r29
    4f7c:	08 95       	ret

00004f7e <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    4f7e:	df 93       	push	r29
    4f80:	cf 93       	push	r28
    4f82:	00 d0       	rcall	.+0      	; 0x4f84 <xTaskResumeFromISR+0x6>
    4f84:	00 d0       	rcall	.+0      	; 0x4f86 <xTaskResumeFromISR+0x8>
    4f86:	00 d0       	rcall	.+0      	; 0x4f88 <xTaskResumeFromISR+0xa>
    4f88:	cd b7       	in	r28, 0x3d	; 61
    4f8a:	de b7       	in	r29, 0x3e	; 62
    4f8c:	9e 83       	std	Y+6, r25	; 0x06
    4f8e:	8d 83       	std	Y+5, r24	; 0x05
	BaseType_t xYieldRequired = pdFALSE;
    4f90:	1c 82       	std	Y+4, r1	; 0x04
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    4f92:	8d 81       	ldd	r24, Y+5	; 0x05
    4f94:	9e 81       	ldd	r25, Y+6	; 0x06
    4f96:	9b 83       	std	Y+3, r25	; 0x03
    4f98:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4f9a:	19 82       	std	Y+1, r1	; 0x01
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    4f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f9e:	9b 81       	ldd	r25, Y+3	; 0x03
    4fa0:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <prvTaskIsTaskSuspended>
    4fa4:	88 23       	and	r24, r24
    4fa6:	09 f4       	brne	.+2      	; 0x4faa <xTaskResumeFromISR+0x2c>
    4fa8:	46 c0       	rjmp	.+140    	; 0x5036 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4faa:	80 91 bf 03 	lds	r24, 0x03BF
    4fae:	88 23       	and	r24, r24
    4fb0:	c1 f5       	brne	.+112    	; 0x5022 <xTaskResumeFromISR+0xa4>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4fb2:	ea 81       	ldd	r30, Y+2	; 0x02
    4fb4:	fb 81       	ldd	r31, Y+3	; 0x03
    4fb6:	96 89       	ldd	r25, Z+22	; 0x16
    4fb8:	e0 91 af 03 	lds	r30, 0x03AF
    4fbc:	f0 91 b0 03 	lds	r31, 0x03B0
    4fc0:	86 89       	ldd	r24, Z+22	; 0x16
    4fc2:	98 17       	cp	r25, r24
    4fc4:	10 f0       	brcs	.+4      	; 0x4fca <xTaskResumeFromISR+0x4c>
					{
						xYieldRequired = pdTRUE;
    4fc6:	81 e0       	ldi	r24, 0x01	; 1
    4fc8:	8c 83       	std	Y+4, r24	; 0x04
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4fca:	8a 81       	ldd	r24, Y+2	; 0x02
    4fcc:	9b 81       	ldd	r25, Y+3	; 0x03
    4fce:	02 96       	adiw	r24, 0x02	; 2
    4fd0:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    4fd4:	ea 81       	ldd	r30, Y+2	; 0x02
    4fd6:	fb 81       	ldd	r31, Y+3	; 0x03
    4fd8:	96 89       	ldd	r25, Z+22	; 0x16
    4fda:	80 91 b5 03 	lds	r24, 0x03B5
    4fde:	89 17       	cp	r24, r25
    4fe0:	28 f4       	brcc	.+10     	; 0x4fec <xTaskResumeFromISR+0x6e>
    4fe2:	ea 81       	ldd	r30, Y+2	; 0x02
    4fe4:	fb 81       	ldd	r31, Y+3	; 0x03
    4fe6:	86 89       	ldd	r24, Z+22	; 0x16
    4fe8:	80 93 b5 03 	sts	0x03B5, r24
    4fec:	ea 81       	ldd	r30, Y+2	; 0x02
    4fee:	fb 81       	ldd	r31, Y+3	; 0x03
    4ff0:	86 89       	ldd	r24, Z+22	; 0x16
    4ff2:	28 2f       	mov	r18, r24
    4ff4:	30 e0       	ldi	r19, 0x00	; 0
    4ff6:	c9 01       	movw	r24, r18
    4ff8:	88 0f       	add	r24, r24
    4ffa:	99 1f       	adc	r25, r25
    4ffc:	88 0f       	add	r24, r24
    4ffe:	99 1f       	adc	r25, r25
    5000:	88 0f       	add	r24, r24
    5002:	99 1f       	adc	r25, r25
    5004:	82 0f       	add	r24, r18
    5006:	93 1f       	adc	r25, r19
    5008:	ac 01       	movw	r20, r24
    500a:	40 54       	subi	r20, 0x40	; 64
    500c:	5c 4f       	sbci	r21, 0xFC	; 252
    500e:	8a 81       	ldd	r24, Y+2	; 0x02
    5010:	9b 81       	ldd	r25, Y+3	; 0x03
    5012:	9c 01       	movw	r18, r24
    5014:	2e 5f       	subi	r18, 0xFE	; 254
    5016:	3f 4f       	sbci	r19, 0xFF	; 255
    5018:	ca 01       	movw	r24, r20
    501a:	b9 01       	movw	r22, r18
    501c:	0e 94 14 17 	call	0x2e28	; 0x2e28 <vListInsertEnd>
    5020:	0a c0       	rjmp	.+20     	; 0x5036 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    5022:	8a 81       	ldd	r24, Y+2	; 0x02
    5024:	9b 81       	ldd	r25, Y+3	; 0x03
    5026:	9c 01       	movw	r18, r24
    5028:	24 5f       	subi	r18, 0xF4	; 244
    502a:	3f 4f       	sbci	r19, 0xFF	; 255
    502c:	83 e0       	ldi	r24, 0x03	; 3
    502e:	94 e0       	ldi	r25, 0x04	; 4
    5030:	b9 01       	movw	r22, r18
    5032:	0e 94 14 17 	call	0x2e28	; 0x2e28 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
    5036:	8c 81       	ldd	r24, Y+4	; 0x04
	}
    5038:	26 96       	adiw	r28, 0x06	; 6
    503a:	0f b6       	in	r0, 0x3f	; 63
    503c:	f8 94       	cli
    503e:	de bf       	out	0x3e, r29	; 62
    5040:	0f be       	out	0x3f, r0	; 63
    5042:	cd bf       	out	0x3d, r28	; 61
    5044:	cf 91       	pop	r28
    5046:	df 91       	pop	r29
    5048:	08 95       	ret

0000504a <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    504a:	ef 92       	push	r14
    504c:	ff 92       	push	r15
    504e:	0f 93       	push	r16
    5050:	df 93       	push	r29
    5052:	cf 93       	push	r28
    5054:	0f 92       	push	r0
    5056:	cd b7       	in	r28, 0x3d	; 61
    5058:	de b7       	in	r29, 0x3e	; 62
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    505a:	8a e4       	ldi	r24, 0x4A	; 74
    505c:	9c e2       	ldi	r25, 0x2C	; 44
    505e:	24 e6       	ldi	r18, 0x64	; 100
    5060:	30 e0       	ldi	r19, 0x00	; 0
    5062:	ed eb       	ldi	r30, 0xBD	; 189
    5064:	f3 e0       	ldi	r31, 0x03	; 3
    5066:	b9 01       	movw	r22, r18
    5068:	48 ec       	ldi	r20, 0xC8	; 200
    506a:	50 e0       	ldi	r21, 0x00	; 0
    506c:	20 e0       	ldi	r18, 0x00	; 0
    506e:	30 e0       	ldi	r19, 0x00	; 0
    5070:	00 e0       	ldi	r16, 0x00	; 0
    5072:	7f 01       	movw	r14, r30
    5074:	0e 94 e5 22 	call	0x45ca	; 0x45ca <xTaskCreate>
    5078:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    507a:	89 81       	ldd	r24, Y+1	; 0x01
    507c:	81 30       	cpi	r24, 0x01	; 1
    507e:	81 f4       	brne	.+32     	; 0x50a0 <vTaskStartScheduler+0x56>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    5080:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    5082:	8f ef       	ldi	r24, 0xFF	; 255
    5084:	9f ef       	ldi	r25, 0xFF	; 255
    5086:	90 93 bc 03 	sts	0x03BC, r25
    508a:	80 93 bb 03 	sts	0x03BB, r24
		xSchedulerRunning = pdTRUE;
    508e:	81 e0       	ldi	r24, 0x01	; 1
    5090:	80 93 b6 03 	sts	0x03B6, r24
		xTickCount = ( TickType_t ) 0U;
    5094:	10 92 b4 03 	sts	0x03B4, r1
    5098:	10 92 b3 03 	sts	0x03B3, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    509c:	0e 94 81 1a 	call	0x3502	; 0x3502 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    50a0:	0f 90       	pop	r0
    50a2:	cf 91       	pop	r28
    50a4:	df 91       	pop	r29
    50a6:	0f 91       	pop	r16
    50a8:	ff 90       	pop	r15
    50aa:	ef 90       	pop	r14
    50ac:	08 95       	ret

000050ae <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    50ae:	df 93       	push	r29
    50b0:	cf 93       	push	r28
    50b2:	cd b7       	in	r28, 0x3d	; 61
    50b4:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    50b6:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    50b8:	10 92 b6 03 	sts	0x03B6, r1
	vPortEndScheduler();
    50bc:	0e 94 b6 1a 	call	0x356c	; 0x356c <vPortEndScheduler>
}
    50c0:	cf 91       	pop	r28
    50c2:	df 91       	pop	r29
    50c4:	08 95       	ret

000050c6 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    50c6:	df 93       	push	r29
    50c8:	cf 93       	push	r28
    50ca:	cd b7       	in	r28, 0x3d	; 61
    50cc:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    50ce:	80 91 bf 03 	lds	r24, 0x03BF
    50d2:	8f 5f       	subi	r24, 0xFF	; 255
    50d4:	80 93 bf 03 	sts	0x03BF, r24
}
    50d8:	cf 91       	pop	r28
    50da:	df 91       	pop	r29
    50dc:	08 95       	ret

000050de <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    50de:	df 93       	push	r29
    50e0:	cf 93       	push	r28
    50e2:	00 d0       	rcall	.+0      	; 0x50e4 <xTaskResumeAll+0x6>
    50e4:	00 d0       	rcall	.+0      	; 0x50e6 <xTaskResumeAll+0x8>
    50e6:	cd b7       	in	r28, 0x3d	; 61
    50e8:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB = NULL;
    50ea:	1c 82       	std	Y+4, r1	; 0x04
    50ec:	1b 82       	std	Y+3, r1	; 0x03
BaseType_t xAlreadyYielded = pdFALSE;
    50ee:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    50f0:	0f b6       	in	r0, 0x3f	; 63
    50f2:	f8 94       	cli
    50f4:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    50f6:	80 91 bf 03 	lds	r24, 0x03BF
    50fa:	81 50       	subi	r24, 0x01	; 1
    50fc:	80 93 bf 03 	sts	0x03BF, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5100:	80 91 bf 03 	lds	r24, 0x03BF
    5104:	88 23       	and	r24, r24
    5106:	09 f0       	breq	.+2      	; 0x510a <xTaskResumeAll+0x2c>
    5108:	73 c0       	rjmp	.+230    	; 0x51f0 <xTaskResumeAll+0x112>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    510a:	80 91 b2 03 	lds	r24, 0x03B2
    510e:	88 23       	and	r24, r24
    5110:	09 f4       	brne	.+2      	; 0x5114 <xTaskResumeAll+0x36>
    5112:	6e c0       	rjmp	.+220    	; 0x51f0 <xTaskResumeAll+0x112>
    5114:	45 c0       	rjmp	.+138    	; 0x51a0 <xTaskResumeAll+0xc2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    5116:	e0 91 08 04 	lds	r30, 0x0408
    511a:	f0 91 09 04 	lds	r31, 0x0409
    511e:	86 81       	ldd	r24, Z+6	; 0x06
    5120:	97 81       	ldd	r25, Z+7	; 0x07
    5122:	9c 83       	std	Y+4, r25	; 0x04
    5124:	8b 83       	std	Y+3, r24	; 0x03
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    5126:	8b 81       	ldd	r24, Y+3	; 0x03
    5128:	9c 81       	ldd	r25, Y+4	; 0x04
    512a:	0c 96       	adiw	r24, 0x0c	; 12
    512c:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5130:	8b 81       	ldd	r24, Y+3	; 0x03
    5132:	9c 81       	ldd	r25, Y+4	; 0x04
    5134:	02 96       	adiw	r24, 0x02	; 2
    5136:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    513a:	eb 81       	ldd	r30, Y+3	; 0x03
    513c:	fc 81       	ldd	r31, Y+4	; 0x04
    513e:	96 89       	ldd	r25, Z+22	; 0x16
    5140:	80 91 b5 03 	lds	r24, 0x03B5
    5144:	89 17       	cp	r24, r25
    5146:	28 f4       	brcc	.+10     	; 0x5152 <xTaskResumeAll+0x74>
    5148:	eb 81       	ldd	r30, Y+3	; 0x03
    514a:	fc 81       	ldd	r31, Y+4	; 0x04
    514c:	86 89       	ldd	r24, Z+22	; 0x16
    514e:	80 93 b5 03 	sts	0x03B5, r24
    5152:	eb 81       	ldd	r30, Y+3	; 0x03
    5154:	fc 81       	ldd	r31, Y+4	; 0x04
    5156:	86 89       	ldd	r24, Z+22	; 0x16
    5158:	28 2f       	mov	r18, r24
    515a:	30 e0       	ldi	r19, 0x00	; 0
    515c:	c9 01       	movw	r24, r18
    515e:	88 0f       	add	r24, r24
    5160:	99 1f       	adc	r25, r25
    5162:	88 0f       	add	r24, r24
    5164:	99 1f       	adc	r25, r25
    5166:	88 0f       	add	r24, r24
    5168:	99 1f       	adc	r25, r25
    516a:	82 0f       	add	r24, r18
    516c:	93 1f       	adc	r25, r19
    516e:	ac 01       	movw	r20, r24
    5170:	40 54       	subi	r20, 0x40	; 64
    5172:	5c 4f       	sbci	r21, 0xFC	; 252
    5174:	8b 81       	ldd	r24, Y+3	; 0x03
    5176:	9c 81       	ldd	r25, Y+4	; 0x04
    5178:	9c 01       	movw	r18, r24
    517a:	2e 5f       	subi	r18, 0xFE	; 254
    517c:	3f 4f       	sbci	r19, 0xFF	; 255
    517e:	ca 01       	movw	r24, r20
    5180:	b9 01       	movw	r22, r18
    5182:	0e 94 14 17 	call	0x2e28	; 0x2e28 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5186:	eb 81       	ldd	r30, Y+3	; 0x03
    5188:	fc 81       	ldd	r31, Y+4	; 0x04
    518a:	96 89       	ldd	r25, Z+22	; 0x16
    518c:	e0 91 af 03 	lds	r30, 0x03AF
    5190:	f0 91 b0 03 	lds	r31, 0x03B0
    5194:	86 89       	ldd	r24, Z+22	; 0x16
    5196:	98 17       	cp	r25, r24
    5198:	18 f0       	brcs	.+6      	; 0x51a0 <xTaskResumeAll+0xc2>
					{
						xYieldPending = pdTRUE;
    519a:	81 e0       	ldi	r24, 0x01	; 1
    519c:	80 93 b8 03 	sts	0x03B8, r24
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    51a0:	80 91 03 04 	lds	r24, 0x0403
    51a4:	88 23       	and	r24, r24
    51a6:	09 f0       	breq	.+2      	; 0x51aa <xTaskResumeAll+0xcc>
    51a8:	b6 cf       	rjmp	.-148    	; 0x5116 <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    51aa:	8b 81       	ldd	r24, Y+3	; 0x03
    51ac:	9c 81       	ldd	r25, Y+4	; 0x04
    51ae:	00 97       	sbiw	r24, 0x00	; 0
    51b0:	11 f0       	breq	.+4      	; 0x51b6 <xTaskResumeAll+0xd8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    51b2:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    51b6:	80 91 b7 03 	lds	r24, 0x03B7
    51ba:	89 83       	std	Y+1, r24	; 0x01

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    51bc:	89 81       	ldd	r24, Y+1	; 0x01
    51be:	88 23       	and	r24, r24
    51c0:	79 f0       	breq	.+30     	; 0x51e0 <xTaskResumeAll+0x102>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    51c2:	0e 94 5f 29 	call	0x52be	; 0x52be <xTaskIncrementTick>
    51c6:	88 23       	and	r24, r24
    51c8:	19 f0       	breq	.+6      	; 0x51d0 <xTaskResumeAll+0xf2>
							{
								xYieldPending = pdTRUE;
    51ca:	81 e0       	ldi	r24, 0x01	; 1
    51cc:	80 93 b8 03 	sts	0x03B8, r24
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    51d0:	89 81       	ldd	r24, Y+1	; 0x01
    51d2:	81 50       	subi	r24, 0x01	; 1
    51d4:	89 83       	std	Y+1, r24	; 0x01
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    51d6:	89 81       	ldd	r24, Y+1	; 0x01
    51d8:	88 23       	and	r24, r24
    51da:	99 f7       	brne	.-26     	; 0x51c2 <xTaskResumeAll+0xe4>

						uxPendedTicks = 0;
    51dc:	10 92 b7 03 	sts	0x03B7, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    51e0:	80 91 b8 03 	lds	r24, 0x03B8
    51e4:	88 23       	and	r24, r24
    51e6:	21 f0       	breq	.+8      	; 0x51f0 <xTaskResumeAll+0x112>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    51e8:	81 e0       	ldi	r24, 0x01	; 1
    51ea:	8a 83       	std	Y+2, r24	; 0x02
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    51ec:	0e 94 bd 1a 	call	0x357a	; 0x357a <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    51f0:	0f 90       	pop	r0
    51f2:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    51f4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    51f6:	0f 90       	pop	r0
    51f8:	0f 90       	pop	r0
    51fa:	0f 90       	pop	r0
    51fc:	0f 90       	pop	r0
    51fe:	cf 91       	pop	r28
    5200:	df 91       	pop	r29
    5202:	08 95       	ret

00005204 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    5204:	df 93       	push	r29
    5206:	cf 93       	push	r28
    5208:	00 d0       	rcall	.+0      	; 0x520a <xTaskGetTickCount+0x6>
    520a:	cd b7       	in	r28, 0x3d	; 61
    520c:	de b7       	in	r29, 0x3e	; 62
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    520e:	0f b6       	in	r0, 0x3f	; 63
    5210:	f8 94       	cli
    5212:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    5214:	80 91 b3 03 	lds	r24, 0x03B3
    5218:	90 91 b4 03 	lds	r25, 0x03B4
    521c:	9a 83       	std	Y+2, r25	; 0x02
    521e:	89 83       	std	Y+1, r24	; 0x01
	}
	portTICK_TYPE_EXIT_CRITICAL();
    5220:	0f 90       	pop	r0
    5222:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    5224:	89 81       	ldd	r24, Y+1	; 0x01
    5226:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5228:	0f 90       	pop	r0
    522a:	0f 90       	pop	r0
    522c:	cf 91       	pop	r28
    522e:	df 91       	pop	r29
    5230:	08 95       	ret

00005232 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    5232:	df 93       	push	r29
    5234:	cf 93       	push	r28
    5236:	00 d0       	rcall	.+0      	; 0x5238 <xTaskGetTickCountFromISR+0x6>
    5238:	0f 92       	push	r0
    523a:	cd b7       	in	r28, 0x3d	; 61
    523c:	de b7       	in	r29, 0x3e	; 62
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    523e:	19 82       	std	Y+1, r1	; 0x01
	{
		xReturn = xTickCount;
    5240:	80 91 b3 03 	lds	r24, 0x03B3
    5244:	90 91 b4 03 	lds	r25, 0x03B4
    5248:	9b 83       	std	Y+3, r25	; 0x03
    524a:	8a 83       	std	Y+2, r24	; 0x02
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    524c:	8a 81       	ldd	r24, Y+2	; 0x02
    524e:	9b 81       	ldd	r25, Y+3	; 0x03
}
    5250:	0f 90       	pop	r0
    5252:	0f 90       	pop	r0
    5254:	0f 90       	pop	r0
    5256:	cf 91       	pop	r28
    5258:	df 91       	pop	r29
    525a:	08 95       	ret

0000525c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    525c:	df 93       	push	r29
    525e:	cf 93       	push	r28
    5260:	cd b7       	in	r28, 0x3d	; 61
    5262:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    5264:	80 91 b2 03 	lds	r24, 0x03B2
}
    5268:	cf 91       	pop	r28
    526a:	df 91       	pop	r29
    526c:	08 95       	ret

0000526e <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    526e:	df 93       	push	r29
    5270:	cf 93       	push	r28
    5272:	00 d0       	rcall	.+0      	; 0x5274 <pcTaskGetName+0x6>
    5274:	00 d0       	rcall	.+0      	; 0x5276 <pcTaskGetName+0x8>
    5276:	00 d0       	rcall	.+0      	; 0x5278 <pcTaskGetName+0xa>
    5278:	cd b7       	in	r28, 0x3d	; 61
    527a:	de b7       	in	r29, 0x3e	; 62
    527c:	9c 83       	std	Y+4, r25	; 0x04
    527e:	8b 83       	std	Y+3, r24	; 0x03
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    5280:	8b 81       	ldd	r24, Y+3	; 0x03
    5282:	9c 81       	ldd	r25, Y+4	; 0x04
    5284:	00 97       	sbiw	r24, 0x00	; 0
    5286:	39 f4       	brne	.+14     	; 0x5296 <pcTaskGetName+0x28>
    5288:	80 91 af 03 	lds	r24, 0x03AF
    528c:	90 91 b0 03 	lds	r25, 0x03B0
    5290:	9e 83       	std	Y+6, r25	; 0x06
    5292:	8d 83       	std	Y+5, r24	; 0x05
    5294:	04 c0       	rjmp	.+8      	; 0x529e <pcTaskGetName+0x30>
    5296:	8b 81       	ldd	r24, Y+3	; 0x03
    5298:	9c 81       	ldd	r25, Y+4	; 0x04
    529a:	9e 83       	std	Y+6, r25	; 0x06
    529c:	8d 83       	std	Y+5, r24	; 0x05
    529e:	8d 81       	ldd	r24, Y+5	; 0x05
    52a0:	9e 81       	ldd	r25, Y+6	; 0x06
    52a2:	9a 83       	std	Y+2, r25	; 0x02
    52a4:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    52a6:	89 81       	ldd	r24, Y+1	; 0x01
    52a8:	9a 81       	ldd	r25, Y+2	; 0x02
    52aa:	49 96       	adiw	r24, 0x19	; 25
}
    52ac:	26 96       	adiw	r28, 0x06	; 6
    52ae:	0f b6       	in	r0, 0x3f	; 63
    52b0:	f8 94       	cli
    52b2:	de bf       	out	0x3e, r29	; 62
    52b4:	0f be       	out	0x3f, r0	; 63
    52b6:	cd bf       	out	0x3d, r28	; 61
    52b8:	cf 91       	pop	r28
    52ba:	df 91       	pop	r29
    52bc:	08 95       	ret

000052be <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    52be:	df 93       	push	r29
    52c0:	cf 93       	push	r28
    52c2:	cd b7       	in	r28, 0x3d	; 61
    52c4:	de b7       	in	r29, 0x3e	; 62
    52c6:	29 97       	sbiw	r28, 0x09	; 9
    52c8:	0f b6       	in	r0, 0x3f	; 63
    52ca:	f8 94       	cli
    52cc:	de bf       	out	0x3e, r29	; 62
    52ce:	0f be       	out	0x3f, r0	; 63
    52d0:	cd bf       	out	0x3d, r28	; 61
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    52d2:	1d 82       	std	Y+5, r1	; 0x05

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    52d4:	80 91 bf 03 	lds	r24, 0x03BF
    52d8:	88 23       	and	r24, r24
    52da:	09 f0       	breq	.+2      	; 0x52de <xTaskIncrementTick+0x20>
    52dc:	a7 c0       	rjmp	.+334    	; 0x542c <xTaskIncrementTick+0x16e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    52de:	80 91 b3 03 	lds	r24, 0x03B3
    52e2:	90 91 b4 03 	lds	r25, 0x03B4
    52e6:	01 96       	adiw	r24, 0x01	; 1
    52e8:	9c 83       	std	Y+4, r25	; 0x04
    52ea:	8b 83       	std	Y+3, r24	; 0x03

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    52ec:	8b 81       	ldd	r24, Y+3	; 0x03
    52ee:	9c 81       	ldd	r25, Y+4	; 0x04
    52f0:	90 93 b4 03 	sts	0x03B4, r25
    52f4:	80 93 b3 03 	sts	0x03B3, r24

		if( xConstTickCount == ( TickType_t ) 0U )
    52f8:	8b 81       	ldd	r24, Y+3	; 0x03
    52fa:	9c 81       	ldd	r25, Y+4	; 0x04
    52fc:	00 97       	sbiw	r24, 0x00	; 0
    52fe:	d9 f4       	brne	.+54     	; 0x5336 <xTaskIncrementTick+0x78>
		{
			taskSWITCH_DELAYED_LISTS();
    5300:	80 91 ff 03 	lds	r24, 0x03FF
    5304:	90 91 00 04 	lds	r25, 0x0400
    5308:	9a 83       	std	Y+2, r25	; 0x02
    530a:	89 83       	std	Y+1, r24	; 0x01
    530c:	80 91 01 04 	lds	r24, 0x0401
    5310:	90 91 02 04 	lds	r25, 0x0402
    5314:	90 93 00 04 	sts	0x0400, r25
    5318:	80 93 ff 03 	sts	0x03FF, r24
    531c:	89 81       	ldd	r24, Y+1	; 0x01
    531e:	9a 81       	ldd	r25, Y+2	; 0x02
    5320:	90 93 02 04 	sts	0x0402, r25
    5324:	80 93 01 04 	sts	0x0401, r24
    5328:	80 91 b9 03 	lds	r24, 0x03B9
    532c:	8f 5f       	subi	r24, 0xFF	; 255
    532e:	80 93 b9 03 	sts	0x03B9, r24
    5332:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    5336:	20 91 bb 03 	lds	r18, 0x03BB
    533a:	30 91 bc 03 	lds	r19, 0x03BC
    533e:	8b 81       	ldd	r24, Y+3	; 0x03
    5340:	9c 81       	ldd	r25, Y+4	; 0x04
    5342:	82 17       	cp	r24, r18
    5344:	93 07       	cpc	r25, r19
    5346:	08 f4       	brcc	.+2      	; 0x534a <xTaskIncrementTick+0x8c>
    5348:	76 c0       	rjmp	.+236    	; 0x5436 <xTaskIncrementTick+0x178>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    534a:	e0 91 ff 03 	lds	r30, 0x03FF
    534e:	f0 91 00 04 	lds	r31, 0x0400
    5352:	80 81       	ld	r24, Z
    5354:	88 23       	and	r24, r24
    5356:	39 f4       	brne	.+14     	; 0x5366 <xTaskIncrementTick+0xa8>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5358:	8f ef       	ldi	r24, 0xFF	; 255
    535a:	9f ef       	ldi	r25, 0xFF	; 255
    535c:	90 93 bc 03 	sts	0x03BC, r25
    5360:	80 93 bb 03 	sts	0x03BB, r24
    5364:	68 c0       	rjmp	.+208    	; 0x5436 <xTaskIncrementTick+0x178>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    5366:	e0 91 ff 03 	lds	r30, 0x03FF
    536a:	f0 91 00 04 	lds	r31, 0x0400
    536e:	05 80       	ldd	r0, Z+5	; 0x05
    5370:	f6 81       	ldd	r31, Z+6	; 0x06
    5372:	e0 2d       	mov	r30, r0
    5374:	86 81       	ldd	r24, Z+6	; 0x06
    5376:	97 81       	ldd	r25, Z+7	; 0x07
    5378:	99 87       	std	Y+9, r25	; 0x09
    537a:	88 87       	std	Y+8, r24	; 0x08
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    537c:	e8 85       	ldd	r30, Y+8	; 0x08
    537e:	f9 85       	ldd	r31, Y+9	; 0x09
    5380:	82 81       	ldd	r24, Z+2	; 0x02
    5382:	93 81       	ldd	r25, Z+3	; 0x03
    5384:	9f 83       	std	Y+7, r25	; 0x07
    5386:	8e 83       	std	Y+6, r24	; 0x06

					if( xConstTickCount < xItemValue )
    5388:	2b 81       	ldd	r18, Y+3	; 0x03
    538a:	3c 81       	ldd	r19, Y+4	; 0x04
    538c:	8e 81       	ldd	r24, Y+6	; 0x06
    538e:	9f 81       	ldd	r25, Y+7	; 0x07
    5390:	28 17       	cp	r18, r24
    5392:	39 07       	cpc	r19, r25
    5394:	38 f4       	brcc	.+14     	; 0x53a4 <xTaskIncrementTick+0xe6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    5396:	8e 81       	ldd	r24, Y+6	; 0x06
    5398:	9f 81       	ldd	r25, Y+7	; 0x07
    539a:	90 93 bc 03 	sts	0x03BC, r25
    539e:	80 93 bb 03 	sts	0x03BB, r24
    53a2:	49 c0       	rjmp	.+146    	; 0x5436 <xTaskIncrementTick+0x178>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    53a4:	88 85       	ldd	r24, Y+8	; 0x08
    53a6:	99 85       	ldd	r25, Y+9	; 0x09
    53a8:	02 96       	adiw	r24, 0x02	; 2
    53aa:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    53ae:	e8 85       	ldd	r30, Y+8	; 0x08
    53b0:	f9 85       	ldd	r31, Y+9	; 0x09
    53b2:	84 89       	ldd	r24, Z+20	; 0x14
    53b4:	95 89       	ldd	r25, Z+21	; 0x15
    53b6:	00 97       	sbiw	r24, 0x00	; 0
    53b8:	29 f0       	breq	.+10     	; 0x53c4 <xTaskIncrementTick+0x106>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    53ba:	88 85       	ldd	r24, Y+8	; 0x08
    53bc:	99 85       	ldd	r25, Y+9	; 0x09
    53be:	0c 96       	adiw	r24, 0x0c	; 12
    53c0:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    53c4:	e8 85       	ldd	r30, Y+8	; 0x08
    53c6:	f9 85       	ldd	r31, Y+9	; 0x09
    53c8:	96 89       	ldd	r25, Z+22	; 0x16
    53ca:	80 91 b5 03 	lds	r24, 0x03B5
    53ce:	89 17       	cp	r24, r25
    53d0:	28 f4       	brcc	.+10     	; 0x53dc <xTaskIncrementTick+0x11e>
    53d2:	e8 85       	ldd	r30, Y+8	; 0x08
    53d4:	f9 85       	ldd	r31, Y+9	; 0x09
    53d6:	86 89       	ldd	r24, Z+22	; 0x16
    53d8:	80 93 b5 03 	sts	0x03B5, r24
    53dc:	e8 85       	ldd	r30, Y+8	; 0x08
    53de:	f9 85       	ldd	r31, Y+9	; 0x09
    53e0:	86 89       	ldd	r24, Z+22	; 0x16
    53e2:	28 2f       	mov	r18, r24
    53e4:	30 e0       	ldi	r19, 0x00	; 0
    53e6:	c9 01       	movw	r24, r18
    53e8:	88 0f       	add	r24, r24
    53ea:	99 1f       	adc	r25, r25
    53ec:	88 0f       	add	r24, r24
    53ee:	99 1f       	adc	r25, r25
    53f0:	88 0f       	add	r24, r24
    53f2:	99 1f       	adc	r25, r25
    53f4:	82 0f       	add	r24, r18
    53f6:	93 1f       	adc	r25, r19
    53f8:	ac 01       	movw	r20, r24
    53fa:	40 54       	subi	r20, 0x40	; 64
    53fc:	5c 4f       	sbci	r21, 0xFC	; 252
    53fe:	88 85       	ldd	r24, Y+8	; 0x08
    5400:	99 85       	ldd	r25, Y+9	; 0x09
    5402:	9c 01       	movw	r18, r24
    5404:	2e 5f       	subi	r18, 0xFE	; 254
    5406:	3f 4f       	sbci	r19, 0xFF	; 255
    5408:	ca 01       	movw	r24, r20
    540a:	b9 01       	movw	r22, r18
    540c:	0e 94 14 17 	call	0x2e28	; 0x2e28 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5410:	e8 85       	ldd	r30, Y+8	; 0x08
    5412:	f9 85       	ldd	r31, Y+9	; 0x09
    5414:	96 89       	ldd	r25, Z+22	; 0x16
    5416:	e0 91 af 03 	lds	r30, 0x03AF
    541a:	f0 91 b0 03 	lds	r31, 0x03B0
    541e:	86 89       	ldd	r24, Z+22	; 0x16
    5420:	98 17       	cp	r25, r24
    5422:	08 f4       	brcc	.+2      	; 0x5426 <xTaskIncrementTick+0x168>
    5424:	92 cf       	rjmp	.-220    	; 0x534a <xTaskIncrementTick+0x8c>
						{
							xSwitchRequired = pdTRUE;
    5426:	81 e0       	ldi	r24, 0x01	; 1
    5428:	8d 83       	std	Y+5, r24	; 0x05
    542a:	8f cf       	rjmp	.-226    	; 0x534a <xTaskIncrementTick+0x8c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    542c:	80 91 b7 03 	lds	r24, 0x03B7
    5430:	8f 5f       	subi	r24, 0xFF	; 255
    5432:	80 93 b7 03 	sts	0x03B7, r24
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    5436:	80 91 b8 03 	lds	r24, 0x03B8
    543a:	88 23       	and	r24, r24
    543c:	11 f0       	breq	.+4      	; 0x5442 <xTaskIncrementTick+0x184>
		{
			xSwitchRequired = pdTRUE;
    543e:	81 e0       	ldi	r24, 0x01	; 1
    5440:	8d 83       	std	Y+5, r24	; 0x05
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    5442:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5444:	29 96       	adiw	r28, 0x09	; 9
    5446:	0f b6       	in	r0, 0x3f	; 63
    5448:	f8 94       	cli
    544a:	de bf       	out	0x3e, r29	; 62
    544c:	0f be       	out	0x3f, r0	; 63
    544e:	cd bf       	out	0x3d, r28	; 61
    5450:	cf 91       	pop	r28
    5452:	df 91       	pop	r29
    5454:	08 95       	ret

00005456 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    5456:	df 93       	push	r29
    5458:	cf 93       	push	r28
    545a:	00 d0       	rcall	.+0      	; 0x545c <vTaskSwitchContext+0x6>
    545c:	0f 92       	push	r0
    545e:	cd b7       	in	r28, 0x3d	; 61
    5460:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    5462:	80 91 bf 03 	lds	r24, 0x03BF
    5466:	88 23       	and	r24, r24
    5468:	21 f0       	breq	.+8      	; 0x5472 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    546a:	81 e0       	ldi	r24, 0x01	; 1
    546c:	80 93 b8 03 	sts	0x03B8, r24
    5470:	59 c0       	rjmp	.+178    	; 0x5524 <vTaskSwitchContext+0xce>
	}
	else
	{
		xYieldPending = pdFALSE;
    5472:	10 92 b8 03 	sts	0x03B8, r1
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    5476:	80 91 b5 03 	lds	r24, 0x03B5
    547a:	8b 83       	std	Y+3, r24	; 0x03
    547c:	03 c0       	rjmp	.+6      	; 0x5484 <vTaskSwitchContext+0x2e>
    547e:	8b 81       	ldd	r24, Y+3	; 0x03
    5480:	81 50       	subi	r24, 0x01	; 1
    5482:	8b 83       	std	Y+3, r24	; 0x03
    5484:	8b 81       	ldd	r24, Y+3	; 0x03
    5486:	28 2f       	mov	r18, r24
    5488:	30 e0       	ldi	r19, 0x00	; 0
    548a:	c9 01       	movw	r24, r18
    548c:	88 0f       	add	r24, r24
    548e:	99 1f       	adc	r25, r25
    5490:	88 0f       	add	r24, r24
    5492:	99 1f       	adc	r25, r25
    5494:	88 0f       	add	r24, r24
    5496:	99 1f       	adc	r25, r25
    5498:	82 0f       	add	r24, r18
    549a:	93 1f       	adc	r25, r19
    549c:	fc 01       	movw	r30, r24
    549e:	e0 54       	subi	r30, 0x40	; 64
    54a0:	fc 4f       	sbci	r31, 0xFC	; 252
    54a2:	80 81       	ld	r24, Z
    54a4:	88 23       	and	r24, r24
    54a6:	59 f3       	breq	.-42     	; 0x547e <vTaskSwitchContext+0x28>
    54a8:	8b 81       	ldd	r24, Y+3	; 0x03
    54aa:	28 2f       	mov	r18, r24
    54ac:	30 e0       	ldi	r19, 0x00	; 0
    54ae:	c9 01       	movw	r24, r18
    54b0:	88 0f       	add	r24, r24
    54b2:	99 1f       	adc	r25, r25
    54b4:	88 0f       	add	r24, r24
    54b6:	99 1f       	adc	r25, r25
    54b8:	88 0f       	add	r24, r24
    54ba:	99 1f       	adc	r25, r25
    54bc:	82 0f       	add	r24, r18
    54be:	93 1f       	adc	r25, r19
    54c0:	80 54       	subi	r24, 0x40	; 64
    54c2:	9c 4f       	sbci	r25, 0xFC	; 252
    54c4:	9a 83       	std	Y+2, r25	; 0x02
    54c6:	89 83       	std	Y+1, r24	; 0x01
    54c8:	e9 81       	ldd	r30, Y+1	; 0x01
    54ca:	fa 81       	ldd	r31, Y+2	; 0x02
    54cc:	01 80       	ldd	r0, Z+1	; 0x01
    54ce:	f2 81       	ldd	r31, Z+2	; 0x02
    54d0:	e0 2d       	mov	r30, r0
    54d2:	82 81       	ldd	r24, Z+2	; 0x02
    54d4:	93 81       	ldd	r25, Z+3	; 0x03
    54d6:	e9 81       	ldd	r30, Y+1	; 0x01
    54d8:	fa 81       	ldd	r31, Y+2	; 0x02
    54da:	92 83       	std	Z+2, r25	; 0x02
    54dc:	81 83       	std	Z+1, r24	; 0x01
    54de:	e9 81       	ldd	r30, Y+1	; 0x01
    54e0:	fa 81       	ldd	r31, Y+2	; 0x02
    54e2:	21 81       	ldd	r18, Z+1	; 0x01
    54e4:	32 81       	ldd	r19, Z+2	; 0x02
    54e6:	89 81       	ldd	r24, Y+1	; 0x01
    54e8:	9a 81       	ldd	r25, Y+2	; 0x02
    54ea:	03 96       	adiw	r24, 0x03	; 3
    54ec:	28 17       	cp	r18, r24
    54ee:	39 07       	cpc	r19, r25
    54f0:	59 f4       	brne	.+22     	; 0x5508 <vTaskSwitchContext+0xb2>
    54f2:	e9 81       	ldd	r30, Y+1	; 0x01
    54f4:	fa 81       	ldd	r31, Y+2	; 0x02
    54f6:	01 80       	ldd	r0, Z+1	; 0x01
    54f8:	f2 81       	ldd	r31, Z+2	; 0x02
    54fa:	e0 2d       	mov	r30, r0
    54fc:	82 81       	ldd	r24, Z+2	; 0x02
    54fe:	93 81       	ldd	r25, Z+3	; 0x03
    5500:	e9 81       	ldd	r30, Y+1	; 0x01
    5502:	fa 81       	ldd	r31, Y+2	; 0x02
    5504:	92 83       	std	Z+2, r25	; 0x02
    5506:	81 83       	std	Z+1, r24	; 0x01
    5508:	e9 81       	ldd	r30, Y+1	; 0x01
    550a:	fa 81       	ldd	r31, Y+2	; 0x02
    550c:	01 80       	ldd	r0, Z+1	; 0x01
    550e:	f2 81       	ldd	r31, Z+2	; 0x02
    5510:	e0 2d       	mov	r30, r0
    5512:	86 81       	ldd	r24, Z+6	; 0x06
    5514:	97 81       	ldd	r25, Z+7	; 0x07
    5516:	90 93 b0 03 	sts	0x03B0, r25
    551a:	80 93 af 03 	sts	0x03AF, r24
    551e:	8b 81       	ldd	r24, Y+3	; 0x03
    5520:	80 93 b5 03 	sts	0x03B5, r24
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    5524:	0f 90       	pop	r0
    5526:	0f 90       	pop	r0
    5528:	0f 90       	pop	r0
    552a:	cf 91       	pop	r28
    552c:	df 91       	pop	r29
    552e:	08 95       	ret

00005530 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    5530:	df 93       	push	r29
    5532:	cf 93       	push	r28
    5534:	00 d0       	rcall	.+0      	; 0x5536 <vTaskPlaceOnEventList+0x6>
    5536:	00 d0       	rcall	.+0      	; 0x5538 <vTaskPlaceOnEventList+0x8>
    5538:	cd b7       	in	r28, 0x3d	; 61
    553a:	de b7       	in	r29, 0x3e	; 62
    553c:	9a 83       	std	Y+2, r25	; 0x02
    553e:	89 83       	std	Y+1, r24	; 0x01
    5540:	7c 83       	std	Y+4, r23	; 0x04
    5542:	6b 83       	std	Y+3, r22	; 0x03

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    5544:	80 91 af 03 	lds	r24, 0x03AF
    5548:	90 91 b0 03 	lds	r25, 0x03B0
    554c:	9c 01       	movw	r18, r24
    554e:	24 5f       	subi	r18, 0xF4	; 244
    5550:	3f 4f       	sbci	r19, 0xFF	; 255
    5552:	89 81       	ldd	r24, Y+1	; 0x01
    5554:	9a 81       	ldd	r25, Y+2	; 0x02
    5556:	b9 01       	movw	r22, r18
    5558:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    555c:	8b 81       	ldd	r24, Y+3	; 0x03
    555e:	9c 81       	ldd	r25, Y+4	; 0x04
    5560:	61 e0       	ldi	r22, 0x01	; 1
    5562:	0e 94 13 32 	call	0x6426	; 0x6426 <prvAddCurrentTaskToDelayedList>
}
    5566:	0f 90       	pop	r0
    5568:	0f 90       	pop	r0
    556a:	0f 90       	pop	r0
    556c:	0f 90       	pop	r0
    556e:	cf 91       	pop	r28
    5570:	df 91       	pop	r29
    5572:	08 95       	ret

00005574 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    5574:	df 93       	push	r29
    5576:	cf 93       	push	r28
    5578:	00 d0       	rcall	.+0      	; 0x557a <vTaskPlaceOnUnorderedEventList+0x6>
    557a:	00 d0       	rcall	.+0      	; 0x557c <vTaskPlaceOnUnorderedEventList+0x8>
    557c:	00 d0       	rcall	.+0      	; 0x557e <vTaskPlaceOnUnorderedEventList+0xa>
    557e:	cd b7       	in	r28, 0x3d	; 61
    5580:	de b7       	in	r29, 0x3e	; 62
    5582:	9a 83       	std	Y+2, r25	; 0x02
    5584:	89 83       	std	Y+1, r24	; 0x01
    5586:	7c 83       	std	Y+4, r23	; 0x04
    5588:	6b 83       	std	Y+3, r22	; 0x03
    558a:	5e 83       	std	Y+6, r21	; 0x06
    558c:	4d 83       	std	Y+5, r20	; 0x05
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    558e:	e0 91 af 03 	lds	r30, 0x03AF
    5592:	f0 91 b0 03 	lds	r31, 0x03B0
    5596:	8b 81       	ldd	r24, Y+3	; 0x03
    5598:	9c 81       	ldd	r25, Y+4	; 0x04
    559a:	90 68       	ori	r25, 0x80	; 128
    559c:	95 87       	std	Z+13, r25	; 0x0d
    559e:	84 87       	std	Z+12, r24	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    55a0:	80 91 af 03 	lds	r24, 0x03AF
    55a4:	90 91 b0 03 	lds	r25, 0x03B0
    55a8:	9c 01       	movw	r18, r24
    55aa:	24 5f       	subi	r18, 0xF4	; 244
    55ac:	3f 4f       	sbci	r19, 0xFF	; 255
    55ae:	89 81       	ldd	r24, Y+1	; 0x01
    55b0:	9a 81       	ldd	r25, Y+2	; 0x02
    55b2:	b9 01       	movw	r22, r18
    55b4:	0e 94 14 17 	call	0x2e28	; 0x2e28 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    55b8:	8d 81       	ldd	r24, Y+5	; 0x05
    55ba:	9e 81       	ldd	r25, Y+6	; 0x06
    55bc:	61 e0       	ldi	r22, 0x01	; 1
    55be:	0e 94 13 32 	call	0x6426	; 0x6426 <prvAddCurrentTaskToDelayedList>
}
    55c2:	26 96       	adiw	r28, 0x06	; 6
    55c4:	0f b6       	in	r0, 0x3f	; 63
    55c6:	f8 94       	cli
    55c8:	de bf       	out	0x3e, r29	; 62
    55ca:	0f be       	out	0x3f, r0	; 63
    55cc:	cd bf       	out	0x3d, r28	; 61
    55ce:	cf 91       	pop	r28
    55d0:	df 91       	pop	r29
    55d2:	08 95       	ret

000055d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    55d4:	df 93       	push	r29
    55d6:	cf 93       	push	r28
    55d8:	00 d0       	rcall	.+0      	; 0x55da <xTaskRemoveFromEventList+0x6>
    55da:	00 d0       	rcall	.+0      	; 0x55dc <xTaskRemoveFromEventList+0x8>
    55dc:	0f 92       	push	r0
    55de:	cd b7       	in	r28, 0x3d	; 61
    55e0:	de b7       	in	r29, 0x3e	; 62
    55e2:	9d 83       	std	Y+5, r25	; 0x05
    55e4:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    55e6:	ec 81       	ldd	r30, Y+4	; 0x04
    55e8:	fd 81       	ldd	r31, Y+5	; 0x05
    55ea:	05 80       	ldd	r0, Z+5	; 0x05
    55ec:	f6 81       	ldd	r31, Z+6	; 0x06
    55ee:	e0 2d       	mov	r30, r0
    55f0:	86 81       	ldd	r24, Z+6	; 0x06
    55f2:	97 81       	ldd	r25, Z+7	; 0x07
    55f4:	9b 83       	std	Y+3, r25	; 0x03
    55f6:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    55f8:	8a 81       	ldd	r24, Y+2	; 0x02
    55fa:	9b 81       	ldd	r25, Y+3	; 0x03
    55fc:	0c 96       	adiw	r24, 0x0c	; 12
    55fe:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5602:	80 91 bf 03 	lds	r24, 0x03BF
    5606:	88 23       	and	r24, r24
    5608:	61 f5       	brne	.+88     	; 0x5662 <xTaskRemoveFromEventList+0x8e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    560a:	8a 81       	ldd	r24, Y+2	; 0x02
    560c:	9b 81       	ldd	r25, Y+3	; 0x03
    560e:	02 96       	adiw	r24, 0x02	; 2
    5610:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    5614:	ea 81       	ldd	r30, Y+2	; 0x02
    5616:	fb 81       	ldd	r31, Y+3	; 0x03
    5618:	96 89       	ldd	r25, Z+22	; 0x16
    561a:	80 91 b5 03 	lds	r24, 0x03B5
    561e:	89 17       	cp	r24, r25
    5620:	28 f4       	brcc	.+10     	; 0x562c <xTaskRemoveFromEventList+0x58>
    5622:	ea 81       	ldd	r30, Y+2	; 0x02
    5624:	fb 81       	ldd	r31, Y+3	; 0x03
    5626:	86 89       	ldd	r24, Z+22	; 0x16
    5628:	80 93 b5 03 	sts	0x03B5, r24
    562c:	ea 81       	ldd	r30, Y+2	; 0x02
    562e:	fb 81       	ldd	r31, Y+3	; 0x03
    5630:	86 89       	ldd	r24, Z+22	; 0x16
    5632:	28 2f       	mov	r18, r24
    5634:	30 e0       	ldi	r19, 0x00	; 0
    5636:	c9 01       	movw	r24, r18
    5638:	88 0f       	add	r24, r24
    563a:	99 1f       	adc	r25, r25
    563c:	88 0f       	add	r24, r24
    563e:	99 1f       	adc	r25, r25
    5640:	88 0f       	add	r24, r24
    5642:	99 1f       	adc	r25, r25
    5644:	82 0f       	add	r24, r18
    5646:	93 1f       	adc	r25, r19
    5648:	ac 01       	movw	r20, r24
    564a:	40 54       	subi	r20, 0x40	; 64
    564c:	5c 4f       	sbci	r21, 0xFC	; 252
    564e:	8a 81       	ldd	r24, Y+2	; 0x02
    5650:	9b 81       	ldd	r25, Y+3	; 0x03
    5652:	9c 01       	movw	r18, r24
    5654:	2e 5f       	subi	r18, 0xFE	; 254
    5656:	3f 4f       	sbci	r19, 0xFF	; 255
    5658:	ca 01       	movw	r24, r20
    565a:	b9 01       	movw	r22, r18
    565c:	0e 94 14 17 	call	0x2e28	; 0x2e28 <vListInsertEnd>
    5660:	0a c0       	rjmp	.+20     	; 0x5676 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    5662:	8a 81       	ldd	r24, Y+2	; 0x02
    5664:	9b 81       	ldd	r25, Y+3	; 0x03
    5666:	9c 01       	movw	r18, r24
    5668:	24 5f       	subi	r18, 0xF4	; 244
    566a:	3f 4f       	sbci	r19, 0xFF	; 255
    566c:	83 e0       	ldi	r24, 0x03	; 3
    566e:	94 e0       	ldi	r25, 0x04	; 4
    5670:	b9 01       	movw	r22, r18
    5672:	0e 94 14 17 	call	0x2e28	; 0x2e28 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    5676:	ea 81       	ldd	r30, Y+2	; 0x02
    5678:	fb 81       	ldd	r31, Y+3	; 0x03
    567a:	96 89       	ldd	r25, Z+22	; 0x16
    567c:	e0 91 af 03 	lds	r30, 0x03AF
    5680:	f0 91 b0 03 	lds	r31, 0x03B0
    5684:	86 89       	ldd	r24, Z+22	; 0x16
    5686:	89 17       	cp	r24, r25
    5688:	30 f4       	brcc	.+12     	; 0x5696 <xTaskRemoveFromEventList+0xc2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    568a:	81 e0       	ldi	r24, 0x01	; 1
    568c:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    568e:	81 e0       	ldi	r24, 0x01	; 1
    5690:	80 93 b8 03 	sts	0x03B8, r24
    5694:	01 c0       	rjmp	.+2      	; 0x5698 <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		xReturn = pdFALSE;
    5696:	19 82       	std	Y+1, r1	; 0x01
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    5698:	89 81       	ldd	r24, Y+1	; 0x01
}
    569a:	0f 90       	pop	r0
    569c:	0f 90       	pop	r0
    569e:	0f 90       	pop	r0
    56a0:	0f 90       	pop	r0
    56a2:	0f 90       	pop	r0
    56a4:	cf 91       	pop	r28
    56a6:	df 91       	pop	r29
    56a8:	08 95       	ret

000056aa <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    56aa:	df 93       	push	r29
    56ac:	cf 93       	push	r28
    56ae:	cd b7       	in	r28, 0x3d	; 61
    56b0:	de b7       	in	r29, 0x3e	; 62
    56b2:	27 97       	sbiw	r28, 0x07	; 7
    56b4:	0f b6       	in	r0, 0x3f	; 63
    56b6:	f8 94       	cli
    56b8:	de bf       	out	0x3e, r29	; 62
    56ba:	0f be       	out	0x3f, r0	; 63
    56bc:	cd bf       	out	0x3d, r28	; 61
    56be:	9d 83       	std	Y+5, r25	; 0x05
    56c0:	8c 83       	std	Y+4, r24	; 0x04
    56c2:	7f 83       	std	Y+7, r23	; 0x07
    56c4:	6e 83       	std	Y+6, r22	; 0x06
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    56c6:	8e 81       	ldd	r24, Y+6	; 0x06
    56c8:	9f 81       	ldd	r25, Y+7	; 0x07
    56ca:	90 68       	ori	r25, 0x80	; 128
    56cc:	ec 81       	ldd	r30, Y+4	; 0x04
    56ce:	fd 81       	ldd	r31, Y+5	; 0x05
    56d0:	91 83       	std	Z+1, r25	; 0x01
    56d2:	80 83       	st	Z, r24

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    56d4:	ec 81       	ldd	r30, Y+4	; 0x04
    56d6:	fd 81       	ldd	r31, Y+5	; 0x05
    56d8:	86 81       	ldd	r24, Z+6	; 0x06
    56da:	97 81       	ldd	r25, Z+7	; 0x07
    56dc:	9b 83       	std	Y+3, r25	; 0x03
    56de:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    56e0:	8c 81       	ldd	r24, Y+4	; 0x04
    56e2:	9d 81       	ldd	r25, Y+5	; 0x05
    56e4:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    56e8:	8a 81       	ldd	r24, Y+2	; 0x02
    56ea:	9b 81       	ldd	r25, Y+3	; 0x03
    56ec:	02 96       	adiw	r24, 0x02	; 2
    56ee:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    56f2:	ea 81       	ldd	r30, Y+2	; 0x02
    56f4:	fb 81       	ldd	r31, Y+3	; 0x03
    56f6:	96 89       	ldd	r25, Z+22	; 0x16
    56f8:	80 91 b5 03 	lds	r24, 0x03B5
    56fc:	89 17       	cp	r24, r25
    56fe:	28 f4       	brcc	.+10     	; 0x570a <xTaskRemoveFromUnorderedEventList+0x60>
    5700:	ea 81       	ldd	r30, Y+2	; 0x02
    5702:	fb 81       	ldd	r31, Y+3	; 0x03
    5704:	86 89       	ldd	r24, Z+22	; 0x16
    5706:	80 93 b5 03 	sts	0x03B5, r24
    570a:	ea 81       	ldd	r30, Y+2	; 0x02
    570c:	fb 81       	ldd	r31, Y+3	; 0x03
    570e:	86 89       	ldd	r24, Z+22	; 0x16
    5710:	28 2f       	mov	r18, r24
    5712:	30 e0       	ldi	r19, 0x00	; 0
    5714:	c9 01       	movw	r24, r18
    5716:	88 0f       	add	r24, r24
    5718:	99 1f       	adc	r25, r25
    571a:	88 0f       	add	r24, r24
    571c:	99 1f       	adc	r25, r25
    571e:	88 0f       	add	r24, r24
    5720:	99 1f       	adc	r25, r25
    5722:	82 0f       	add	r24, r18
    5724:	93 1f       	adc	r25, r19
    5726:	ac 01       	movw	r20, r24
    5728:	40 54       	subi	r20, 0x40	; 64
    572a:	5c 4f       	sbci	r21, 0xFC	; 252
    572c:	8a 81       	ldd	r24, Y+2	; 0x02
    572e:	9b 81       	ldd	r25, Y+3	; 0x03
    5730:	9c 01       	movw	r18, r24
    5732:	2e 5f       	subi	r18, 0xFE	; 254
    5734:	3f 4f       	sbci	r19, 0xFF	; 255
    5736:	ca 01       	movw	r24, r20
    5738:	b9 01       	movw	r22, r18
    573a:	0e 94 14 17 	call	0x2e28	; 0x2e28 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    573e:	ea 81       	ldd	r30, Y+2	; 0x02
    5740:	fb 81       	ldd	r31, Y+3	; 0x03
    5742:	96 89       	ldd	r25, Z+22	; 0x16
    5744:	e0 91 af 03 	lds	r30, 0x03AF
    5748:	f0 91 b0 03 	lds	r31, 0x03B0
    574c:	86 89       	ldd	r24, Z+22	; 0x16
    574e:	89 17       	cp	r24, r25
    5750:	30 f4       	brcc	.+12     	; 0x575e <xTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    5752:	81 e0       	ldi	r24, 0x01	; 1
    5754:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    5756:	81 e0       	ldi	r24, 0x01	; 1
    5758:	80 93 b8 03 	sts	0x03B8, r24
    575c:	01 c0       	rjmp	.+2      	; 0x5760 <xTaskRemoveFromUnorderedEventList+0xb6>
	}
	else
	{
		xReturn = pdFALSE;
    575e:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    5760:	89 81       	ldd	r24, Y+1	; 0x01
}
    5762:	27 96       	adiw	r28, 0x07	; 7
    5764:	0f b6       	in	r0, 0x3f	; 63
    5766:	f8 94       	cli
    5768:	de bf       	out	0x3e, r29	; 62
    576a:	0f be       	out	0x3f, r0	; 63
    576c:	cd bf       	out	0x3d, r28	; 61
    576e:	cf 91       	pop	r28
    5770:	df 91       	pop	r29
    5772:	08 95       	ret

00005774 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    5774:	df 93       	push	r29
    5776:	cf 93       	push	r28
    5778:	00 d0       	rcall	.+0      	; 0x577a <vTaskSetTimeOutState+0x6>
    577a:	cd b7       	in	r28, 0x3d	; 61
    577c:	de b7       	in	r29, 0x3e	; 62
    577e:	9a 83       	std	Y+2, r25	; 0x02
    5780:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    5782:	80 91 b9 03 	lds	r24, 0x03B9
    5786:	e9 81       	ldd	r30, Y+1	; 0x01
    5788:	fa 81       	ldd	r31, Y+2	; 0x02
    578a:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    578c:	80 91 b3 03 	lds	r24, 0x03B3
    5790:	90 91 b4 03 	lds	r25, 0x03B4
    5794:	e9 81       	ldd	r30, Y+1	; 0x01
    5796:	fa 81       	ldd	r31, Y+2	; 0x02
    5798:	92 83       	std	Z+2, r25	; 0x02
    579a:	81 83       	std	Z+1, r24	; 0x01
}
    579c:	0f 90       	pop	r0
    579e:	0f 90       	pop	r0
    57a0:	cf 91       	pop	r28
    57a2:	df 91       	pop	r29
    57a4:	08 95       	ret

000057a6 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    57a6:	df 93       	push	r29
    57a8:	cf 93       	push	r28
    57aa:	cd b7       	in	r28, 0x3d	; 61
    57ac:	de b7       	in	r29, 0x3e	; 62
    57ae:	27 97       	sbiw	r28, 0x07	; 7
    57b0:	0f b6       	in	r0, 0x3f	; 63
    57b2:	f8 94       	cli
    57b4:	de bf       	out	0x3e, r29	; 62
    57b6:	0f be       	out	0x3f, r0	; 63
    57b8:	cd bf       	out	0x3d, r28	; 61
    57ba:	9d 83       	std	Y+5, r25	; 0x05
    57bc:	8c 83       	std	Y+4, r24	; 0x04
    57be:	7f 83       	std	Y+7, r23	; 0x07
    57c0:	6e 83       	std	Y+6, r22	; 0x06
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    57c2:	0f b6       	in	r0, 0x3f	; 63
    57c4:	f8 94       	cli
    57c6:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    57c8:	80 91 b3 03 	lds	r24, 0x03B3
    57cc:	90 91 b4 03 	lds	r25, 0x03B4
    57d0:	9a 83       	std	Y+2, r25	; 0x02
    57d2:	89 83       	std	Y+1, r24	; 0x01
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    57d4:	ee 81       	ldd	r30, Y+6	; 0x06
    57d6:	ff 81       	ldd	r31, Y+7	; 0x07
    57d8:	80 81       	ld	r24, Z
    57da:	91 81       	ldd	r25, Z+1	; 0x01
    57dc:	2f ef       	ldi	r18, 0xFF	; 255
    57de:	8f 3f       	cpi	r24, 0xFF	; 255
    57e0:	92 07       	cpc	r25, r18
    57e2:	11 f4       	brne	.+4      	; 0x57e8 <xTaskCheckForTimeOut+0x42>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    57e4:	1b 82       	std	Y+3, r1	; 0x03
    57e6:	40 c0       	rjmp	.+128    	; 0x5868 <xTaskCheckForTimeOut+0xc2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    57e8:	ec 81       	ldd	r30, Y+4	; 0x04
    57ea:	fd 81       	ldd	r31, Y+5	; 0x05
    57ec:	90 81       	ld	r25, Z
    57ee:	80 91 b9 03 	lds	r24, 0x03B9
    57f2:	98 17       	cp	r25, r24
    57f4:	61 f0       	breq	.+24     	; 0x580e <xTaskCheckForTimeOut+0x68>
    57f6:	ec 81       	ldd	r30, Y+4	; 0x04
    57f8:	fd 81       	ldd	r31, Y+5	; 0x05
    57fa:	21 81       	ldd	r18, Z+1	; 0x01
    57fc:	32 81       	ldd	r19, Z+2	; 0x02
    57fe:	89 81       	ldd	r24, Y+1	; 0x01
    5800:	9a 81       	ldd	r25, Y+2	; 0x02
    5802:	82 17       	cp	r24, r18
    5804:	93 07       	cpc	r25, r19
    5806:	18 f0       	brcs	.+6      	; 0x580e <xTaskCheckForTimeOut+0x68>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    5808:	81 e0       	ldi	r24, 0x01	; 1
    580a:	8b 83       	std	Y+3, r24	; 0x03
    580c:	2d c0       	rjmp	.+90     	; 0x5868 <xTaskCheckForTimeOut+0xc2>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    580e:	ec 81       	ldd	r30, Y+4	; 0x04
    5810:	fd 81       	ldd	r31, Y+5	; 0x05
    5812:	21 81       	ldd	r18, Z+1	; 0x01
    5814:	32 81       	ldd	r19, Z+2	; 0x02
    5816:	89 81       	ldd	r24, Y+1	; 0x01
    5818:	9a 81       	ldd	r25, Y+2	; 0x02
    581a:	ac 01       	movw	r20, r24
    581c:	42 1b       	sub	r20, r18
    581e:	53 0b       	sbc	r21, r19
    5820:	9a 01       	movw	r18, r20
    5822:	ee 81       	ldd	r30, Y+6	; 0x06
    5824:	ff 81       	ldd	r31, Y+7	; 0x07
    5826:	80 81       	ld	r24, Z
    5828:	91 81       	ldd	r25, Z+1	; 0x01
    582a:	28 17       	cp	r18, r24
    582c:	39 07       	cpc	r19, r25
    582e:	d0 f4       	brcc	.+52     	; 0x5864 <xTaskCheckForTimeOut+0xbe>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    5830:	ee 81       	ldd	r30, Y+6	; 0x06
    5832:	ff 81       	ldd	r31, Y+7	; 0x07
    5834:	40 81       	ld	r20, Z
    5836:	51 81       	ldd	r21, Z+1	; 0x01
    5838:	ec 81       	ldd	r30, Y+4	; 0x04
    583a:	fd 81       	ldd	r31, Y+5	; 0x05
    583c:	21 81       	ldd	r18, Z+1	; 0x01
    583e:	32 81       	ldd	r19, Z+2	; 0x02
    5840:	89 81       	ldd	r24, Y+1	; 0x01
    5842:	9a 81       	ldd	r25, Y+2	; 0x02
    5844:	b9 01       	movw	r22, r18
    5846:	68 1b       	sub	r22, r24
    5848:	79 0b       	sbc	r23, r25
    584a:	cb 01       	movw	r24, r22
    584c:	84 0f       	add	r24, r20
    584e:	95 1f       	adc	r25, r21
    5850:	ee 81       	ldd	r30, Y+6	; 0x06
    5852:	ff 81       	ldd	r31, Y+7	; 0x07
    5854:	91 83       	std	Z+1, r25	; 0x01
    5856:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    5858:	8c 81       	ldd	r24, Y+4	; 0x04
    585a:	9d 81       	ldd	r25, Y+5	; 0x05
    585c:	0e 94 ba 2b 	call	0x5774	; 0x5774 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    5860:	1b 82       	std	Y+3, r1	; 0x03
    5862:	02 c0       	rjmp	.+4      	; 0x5868 <xTaskCheckForTimeOut+0xc2>
		}
		else
		{
			xReturn = pdTRUE;
    5864:	81 e0       	ldi	r24, 0x01	; 1
    5866:	8b 83       	std	Y+3, r24	; 0x03
		}
	}
	taskEXIT_CRITICAL();
    5868:	0f 90       	pop	r0
    586a:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    586c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    586e:	27 96       	adiw	r28, 0x07	; 7
    5870:	0f b6       	in	r0, 0x3f	; 63
    5872:	f8 94       	cli
    5874:	de bf       	out	0x3e, r29	; 62
    5876:	0f be       	out	0x3f, r0	; 63
    5878:	cd bf       	out	0x3d, r28	; 61
    587a:	cf 91       	pop	r28
    587c:	df 91       	pop	r29
    587e:	08 95       	ret

00005880 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    5880:	df 93       	push	r29
    5882:	cf 93       	push	r28
    5884:	cd b7       	in	r28, 0x3d	; 61
    5886:	de b7       	in	r29, 0x3e	; 62
	xYieldPending = pdTRUE;
    5888:	81 e0       	ldi	r24, 0x01	; 1
    588a:	80 93 b8 03 	sts	0x03B8, r24
}
    588e:	cf 91       	pop	r28
    5890:	df 91       	pop	r29
    5892:	08 95       	ret

00005894 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    5894:	df 93       	push	r29
    5896:	cf 93       	push	r28
    5898:	00 d0       	rcall	.+0      	; 0x589a <prvIdleTask+0x6>
    589a:	cd b7       	in	r28, 0x3d	; 61
    589c:	de b7       	in	r29, 0x3e	; 62
    589e:	9a 83       	std	Y+2, r25	; 0x02
    58a0:	89 83       	std	Y+1, r24	; 0x01

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    58a2:	0e 94 9b 2c 	call	0x5936	; 0x5936 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    58a6:	80 91 c0 03 	lds	r24, 0x03C0
    58aa:	82 30       	cpi	r24, 0x02	; 2
    58ac:	d0 f3       	brcs	.-12     	; 0x58a2 <prvIdleTask+0xe>
			{
				taskYIELD();
    58ae:	0e 94 bd 1a 	call	0x357a	; 0x357a <vPortYield>
    58b2:	f7 cf       	rjmp	.-18     	; 0x58a2 <prvIdleTask+0xe>

000058b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    58b4:	df 93       	push	r29
    58b6:	cf 93       	push	r28
    58b8:	0f 92       	push	r0
    58ba:	cd b7       	in	r28, 0x3d	; 61
    58bc:	de b7       	in	r29, 0x3e	; 62
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    58be:	19 82       	std	Y+1, r1	; 0x01
    58c0:	13 c0       	rjmp	.+38     	; 0x58e8 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    58c2:	89 81       	ldd	r24, Y+1	; 0x01
    58c4:	28 2f       	mov	r18, r24
    58c6:	30 e0       	ldi	r19, 0x00	; 0
    58c8:	c9 01       	movw	r24, r18
    58ca:	88 0f       	add	r24, r24
    58cc:	99 1f       	adc	r25, r25
    58ce:	88 0f       	add	r24, r24
    58d0:	99 1f       	adc	r25, r25
    58d2:	88 0f       	add	r24, r24
    58d4:	99 1f       	adc	r25, r25
    58d6:	82 0f       	add	r24, r18
    58d8:	93 1f       	adc	r25, r19
    58da:	80 54       	subi	r24, 0x40	; 64
    58dc:	9c 4f       	sbci	r25, 0xFC	; 252
    58de:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    58e2:	89 81       	ldd	r24, Y+1	; 0x01
    58e4:	8f 5f       	subi	r24, 0xFF	; 255
    58e6:	89 83       	std	Y+1, r24	; 0x01
    58e8:	89 81       	ldd	r24, Y+1	; 0x01
    58ea:	85 30       	cpi	r24, 0x05	; 5
    58ec:	50 f3       	brcs	.-44     	; 0x58c2 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    58ee:	8d ee       	ldi	r24, 0xED	; 237
    58f0:	93 e0       	ldi	r25, 0x03	; 3
    58f2:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    58f6:	86 ef       	ldi	r24, 0xF6	; 246
    58f8:	93 e0       	ldi	r25, 0x03	; 3
    58fa:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    58fe:	83 e0       	ldi	r24, 0x03	; 3
    5900:	94 e0       	ldi	r25, 0x04	; 4
    5902:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    5906:	8c e0       	ldi	r24, 0x0C	; 12
    5908:	94 e0       	ldi	r25, 0x04	; 4
    590a:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    590e:	85 e1       	ldi	r24, 0x15	; 21
    5910:	94 e0       	ldi	r25, 0x04	; 4
    5912:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    5916:	8d ee       	ldi	r24, 0xED	; 237
    5918:	93 e0       	ldi	r25, 0x03	; 3
    591a:	90 93 00 04 	sts	0x0400, r25
    591e:	80 93 ff 03 	sts	0x03FF, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5922:	86 ef       	ldi	r24, 0xF6	; 246
    5924:	93 e0       	ldi	r25, 0x03	; 3
    5926:	90 93 02 04 	sts	0x0402, r25
    592a:	80 93 01 04 	sts	0x0401, r24
}
    592e:	0f 90       	pop	r0
    5930:	cf 91       	pop	r28
    5932:	df 91       	pop	r29
    5934:	08 95       	ret

00005936 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    5936:	df 93       	push	r29
    5938:	cf 93       	push	r28
    593a:	00 d0       	rcall	.+0      	; 0x593c <prvCheckTasksWaitingTermination+0x6>
    593c:	0f 92       	push	r0
    593e:	cd b7       	in	r28, 0x3d	; 61
    5940:	de b7       	in	r29, 0x3e	; 62
    5942:	2e c0       	rjmp	.+92     	; 0x59a0 <prvCheckTasksWaitingTermination+0x6a>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    5944:	0e 94 63 28 	call	0x50c6	; 0x50c6 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    5948:	80 91 0c 04 	lds	r24, 0x040C
    594c:	1b 82       	std	Y+3, r1	; 0x03
    594e:	88 23       	and	r24, r24
    5950:	11 f4       	brne	.+4      	; 0x5956 <prvCheckTasksWaitingTermination+0x20>
    5952:	81 e0       	ldi	r24, 0x01	; 1
    5954:	8b 83       	std	Y+3, r24	; 0x03
			}
			( void ) xTaskResumeAll();
    5956:	0e 94 6f 28 	call	0x50de	; 0x50de <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    595a:	8b 81       	ldd	r24, Y+3	; 0x03
    595c:	88 23       	and	r24, r24
    595e:	01 f5       	brne	.+64     	; 0x59a0 <prvCheckTasksWaitingTermination+0x6a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    5960:	0f b6       	in	r0, 0x3f	; 63
    5962:	f8 94       	cli
    5964:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    5966:	e0 91 11 04 	lds	r30, 0x0411
    596a:	f0 91 12 04 	lds	r31, 0x0412
    596e:	86 81       	ldd	r24, Z+6	; 0x06
    5970:	97 81       	ldd	r25, Z+7	; 0x07
    5972:	9a 83       	std	Y+2, r25	; 0x02
    5974:	89 83       	std	Y+1, r24	; 0x01
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5976:	89 81       	ldd	r24, Y+1	; 0x01
    5978:	9a 81       	ldd	r25, Y+2	; 0x02
    597a:	02 96       	adiw	r24, 0x02	; 2
    597c:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>
					--uxCurrentNumberOfTasks;
    5980:	80 91 b2 03 	lds	r24, 0x03B2
    5984:	81 50       	subi	r24, 0x01	; 1
    5986:	80 93 b2 03 	sts	0x03B2, r24
					--uxDeletedTasksWaitingCleanUp;
    598a:	80 91 b1 03 	lds	r24, 0x03B1
    598e:	81 50       	subi	r24, 0x01	; 1
    5990:	80 93 b1 03 	sts	0x03B1, r24
				}
				taskEXIT_CRITICAL();
    5994:	0f 90       	pop	r0
    5996:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    5998:	89 81       	ldd	r24, Y+1	; 0x01
    599a:	9a 81       	ldd	r25, Y+2	; 0x02
    599c:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    59a0:	80 91 b1 03 	lds	r24, 0x03B1
    59a4:	88 23       	and	r24, r24
    59a6:	71 f6       	brne	.-100    	; 0x5944 <prvCheckTasksWaitingTermination+0xe>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    59a8:	0f 90       	pop	r0
    59aa:	0f 90       	pop	r0
    59ac:	0f 90       	pop	r0
    59ae:	cf 91       	pop	r28
    59b0:	df 91       	pop	r29
    59b2:	08 95       	ret

000059b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    59b4:	df 93       	push	r29
    59b6:	cf 93       	push	r28
    59b8:	00 d0       	rcall	.+0      	; 0x59ba <prvDeleteTCB+0x6>
    59ba:	cd b7       	in	r28, 0x3d	; 61
    59bc:	de b7       	in	r29, 0x3e	; 62
    59be:	9a 83       	std	Y+2, r25	; 0x02
    59c0:	89 83       	std	Y+1, r24	; 0x01

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    59c2:	e9 81       	ldd	r30, Y+1	; 0x01
    59c4:	fa 81       	ldd	r31, Y+2	; 0x02
    59c6:	87 89       	ldd	r24, Z+23	; 0x17
    59c8:	90 8d       	ldd	r25, Z+24	; 0x18
    59ca:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <vPortFree>
			vPortFree( pxTCB );
    59ce:	89 81       	ldd	r24, Y+1	; 0x01
    59d0:	9a 81       	ldd	r25, Y+2	; 0x02
    59d2:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    59d6:	0f 90       	pop	r0
    59d8:	0f 90       	pop	r0
    59da:	cf 91       	pop	r28
    59dc:	df 91       	pop	r29
    59de:	08 95       	ret

000059e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    59e0:	df 93       	push	r29
    59e2:	cf 93       	push	r28
    59e4:	00 d0       	rcall	.+0      	; 0x59e6 <prvResetNextTaskUnblockTime+0x6>
    59e6:	cd b7       	in	r28, 0x3d	; 61
    59e8:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    59ea:	e0 91 ff 03 	lds	r30, 0x03FF
    59ee:	f0 91 00 04 	lds	r31, 0x0400
    59f2:	80 81       	ld	r24, Z
    59f4:	88 23       	and	r24, r24
    59f6:	39 f4       	brne	.+14     	; 0x5a06 <prvResetNextTaskUnblockTime+0x26>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    59f8:	8f ef       	ldi	r24, 0xFF	; 255
    59fa:	9f ef       	ldi	r25, 0xFF	; 255
    59fc:	90 93 bc 03 	sts	0x03BC, r25
    5a00:	80 93 bb 03 	sts	0x03BB, r24
    5a04:	13 c0       	rjmp	.+38     	; 0x5a2c <prvResetNextTaskUnblockTime+0x4c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    5a06:	e0 91 ff 03 	lds	r30, 0x03FF
    5a0a:	f0 91 00 04 	lds	r31, 0x0400
    5a0e:	05 80       	ldd	r0, Z+5	; 0x05
    5a10:	f6 81       	ldd	r31, Z+6	; 0x06
    5a12:	e0 2d       	mov	r30, r0
    5a14:	86 81       	ldd	r24, Z+6	; 0x06
    5a16:	97 81       	ldd	r25, Z+7	; 0x07
    5a18:	9a 83       	std	Y+2, r25	; 0x02
    5a1a:	89 83       	std	Y+1, r24	; 0x01
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    5a1c:	e9 81       	ldd	r30, Y+1	; 0x01
    5a1e:	fa 81       	ldd	r31, Y+2	; 0x02
    5a20:	82 81       	ldd	r24, Z+2	; 0x02
    5a22:	93 81       	ldd	r25, Z+3	; 0x03
    5a24:	90 93 bc 03 	sts	0x03BC, r25
    5a28:	80 93 bb 03 	sts	0x03BB, r24
	}
}
    5a2c:	0f 90       	pop	r0
    5a2e:	0f 90       	pop	r0
    5a30:	cf 91       	pop	r28
    5a32:	df 91       	pop	r29
    5a34:	08 95       	ret

00005a36 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    5a36:	df 93       	push	r29
    5a38:	cf 93       	push	r28
    5a3a:	00 d0       	rcall	.+0      	; 0x5a3c <xTaskGetCurrentTaskHandle+0x6>
    5a3c:	cd b7       	in	r28, 0x3d	; 61
    5a3e:	de b7       	in	r29, 0x3e	; 62
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5a40:	80 91 af 03 	lds	r24, 0x03AF
    5a44:	90 91 b0 03 	lds	r25, 0x03B0
    5a48:	9a 83       	std	Y+2, r25	; 0x02
    5a4a:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
    5a4c:	89 81       	ldd	r24, Y+1	; 0x01
    5a4e:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    5a50:	0f 90       	pop	r0
    5a52:	0f 90       	pop	r0
    5a54:	cf 91       	pop	r28
    5a56:	df 91       	pop	r29
    5a58:	08 95       	ret

00005a5a <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    5a5a:	df 93       	push	r29
    5a5c:	cf 93       	push	r28
    5a5e:	00 d0       	rcall	.+0      	; 0x5a60 <vTaskPriorityInherit+0x6>
    5a60:	00 d0       	rcall	.+0      	; 0x5a62 <vTaskPriorityInherit+0x8>
    5a62:	cd b7       	in	r28, 0x3d	; 61
    5a64:	de b7       	in	r29, 0x3e	; 62
    5a66:	9c 83       	std	Y+4, r25	; 0x04
    5a68:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    5a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    5a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    5a6e:	9a 83       	std	Y+2, r25	; 0x02
    5a70:	89 83       	std	Y+1, r24	; 0x01

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    5a72:	8b 81       	ldd	r24, Y+3	; 0x03
    5a74:	9c 81       	ldd	r25, Y+4	; 0x04
    5a76:	00 97       	sbiw	r24, 0x00	; 0
    5a78:	09 f4       	brne	.+2      	; 0x5a7c <vTaskPriorityInherit+0x22>
    5a7a:	73 c0       	rjmp	.+230    	; 0x5b62 <vTaskPriorityInherit+0x108>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    5a7c:	e9 81       	ldd	r30, Y+1	; 0x01
    5a7e:	fa 81       	ldd	r31, Y+2	; 0x02
    5a80:	96 89       	ldd	r25, Z+22	; 0x16
    5a82:	e0 91 af 03 	lds	r30, 0x03AF
    5a86:	f0 91 b0 03 	lds	r31, 0x03B0
    5a8a:	86 89       	ldd	r24, Z+22	; 0x16
    5a8c:	98 17       	cp	r25, r24
    5a8e:	08 f0       	brcs	.+2      	; 0x5a92 <vTaskPriorityInherit+0x38>
    5a90:	68 c0       	rjmp	.+208    	; 0x5b62 <vTaskPriorityInherit+0x108>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    5a92:	e9 81       	ldd	r30, Y+1	; 0x01
    5a94:	fa 81       	ldd	r31, Y+2	; 0x02
    5a96:	84 85       	ldd	r24, Z+12	; 0x0c
    5a98:	95 85       	ldd	r25, Z+13	; 0x0d
    5a9a:	99 23       	and	r25, r25
    5a9c:	7c f0       	brlt	.+30     	; 0x5abc <vTaskPriorityInherit+0x62>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5a9e:	e0 91 af 03 	lds	r30, 0x03AF
    5aa2:	f0 91 b0 03 	lds	r31, 0x03B0
    5aa6:	86 89       	ldd	r24, Z+22	; 0x16
    5aa8:	28 2f       	mov	r18, r24
    5aaa:	30 e0       	ldi	r19, 0x00	; 0
    5aac:	85 e0       	ldi	r24, 0x05	; 5
    5aae:	90 e0       	ldi	r25, 0x00	; 0
    5ab0:	82 1b       	sub	r24, r18
    5ab2:	93 0b       	sbc	r25, r19
    5ab4:	e9 81       	ldd	r30, Y+1	; 0x01
    5ab6:	fa 81       	ldd	r31, Y+2	; 0x02
    5ab8:	95 87       	std	Z+13, r25	; 0x0d
    5aba:	84 87       	std	Z+12, r24	; 0x0c
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    5abc:	e9 81       	ldd	r30, Y+1	; 0x01
    5abe:	fa 81       	ldd	r31, Y+2	; 0x02
    5ac0:	42 85       	ldd	r20, Z+10	; 0x0a
    5ac2:	53 85       	ldd	r21, Z+11	; 0x0b
    5ac4:	e9 81       	ldd	r30, Y+1	; 0x01
    5ac6:	fa 81       	ldd	r31, Y+2	; 0x02
    5ac8:	86 89       	ldd	r24, Z+22	; 0x16
    5aca:	28 2f       	mov	r18, r24
    5acc:	30 e0       	ldi	r19, 0x00	; 0
    5ace:	c9 01       	movw	r24, r18
    5ad0:	88 0f       	add	r24, r24
    5ad2:	99 1f       	adc	r25, r25
    5ad4:	88 0f       	add	r24, r24
    5ad6:	99 1f       	adc	r25, r25
    5ad8:	88 0f       	add	r24, r24
    5ada:	99 1f       	adc	r25, r25
    5adc:	82 0f       	add	r24, r18
    5ade:	93 1f       	adc	r25, r19
    5ae0:	80 54       	subi	r24, 0x40	; 64
    5ae2:	9c 4f       	sbci	r25, 0xFC	; 252
    5ae4:	48 17       	cp	r20, r24
    5ae6:	59 07       	cpc	r21, r25
    5ae8:	a1 f5       	brne	.+104    	; 0x5b52 <vTaskPriorityInherit+0xf8>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    5aea:	89 81       	ldd	r24, Y+1	; 0x01
    5aec:	9a 81       	ldd	r25, Y+2	; 0x02
    5aee:	02 96       	adiw	r24, 0x02	; 2
    5af0:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5af4:	e0 91 af 03 	lds	r30, 0x03AF
    5af8:	f0 91 b0 03 	lds	r31, 0x03B0
    5afc:	86 89       	ldd	r24, Z+22	; 0x16
    5afe:	e9 81       	ldd	r30, Y+1	; 0x01
    5b00:	fa 81       	ldd	r31, Y+2	; 0x02
    5b02:	86 8b       	std	Z+22, r24	; 0x16
					prvAddTaskToReadyList( pxTCB );
    5b04:	e9 81       	ldd	r30, Y+1	; 0x01
    5b06:	fa 81       	ldd	r31, Y+2	; 0x02
    5b08:	96 89       	ldd	r25, Z+22	; 0x16
    5b0a:	80 91 b5 03 	lds	r24, 0x03B5
    5b0e:	89 17       	cp	r24, r25
    5b10:	28 f4       	brcc	.+10     	; 0x5b1c <vTaskPriorityInherit+0xc2>
    5b12:	e9 81       	ldd	r30, Y+1	; 0x01
    5b14:	fa 81       	ldd	r31, Y+2	; 0x02
    5b16:	86 89       	ldd	r24, Z+22	; 0x16
    5b18:	80 93 b5 03 	sts	0x03B5, r24
    5b1c:	e9 81       	ldd	r30, Y+1	; 0x01
    5b1e:	fa 81       	ldd	r31, Y+2	; 0x02
    5b20:	86 89       	ldd	r24, Z+22	; 0x16
    5b22:	28 2f       	mov	r18, r24
    5b24:	30 e0       	ldi	r19, 0x00	; 0
    5b26:	c9 01       	movw	r24, r18
    5b28:	88 0f       	add	r24, r24
    5b2a:	99 1f       	adc	r25, r25
    5b2c:	88 0f       	add	r24, r24
    5b2e:	99 1f       	adc	r25, r25
    5b30:	88 0f       	add	r24, r24
    5b32:	99 1f       	adc	r25, r25
    5b34:	82 0f       	add	r24, r18
    5b36:	93 1f       	adc	r25, r19
    5b38:	ac 01       	movw	r20, r24
    5b3a:	40 54       	subi	r20, 0x40	; 64
    5b3c:	5c 4f       	sbci	r21, 0xFC	; 252
    5b3e:	89 81       	ldd	r24, Y+1	; 0x01
    5b40:	9a 81       	ldd	r25, Y+2	; 0x02
    5b42:	9c 01       	movw	r18, r24
    5b44:	2e 5f       	subi	r18, 0xFE	; 254
    5b46:	3f 4f       	sbci	r19, 0xFF	; 255
    5b48:	ca 01       	movw	r24, r20
    5b4a:	b9 01       	movw	r22, r18
    5b4c:	0e 94 14 17 	call	0x2e28	; 0x2e28 <vListInsertEnd>
    5b50:	08 c0       	rjmp	.+16     	; 0x5b62 <vTaskPriorityInherit+0x108>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5b52:	e0 91 af 03 	lds	r30, 0x03AF
    5b56:	f0 91 b0 03 	lds	r31, 0x03B0
    5b5a:	86 89       	ldd	r24, Z+22	; 0x16
    5b5c:	e9 81       	ldd	r30, Y+1	; 0x01
    5b5e:	fa 81       	ldd	r31, Y+2	; 0x02
    5b60:	86 8b       	std	Z+22, r24	; 0x16
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    5b62:	0f 90       	pop	r0
    5b64:	0f 90       	pop	r0
    5b66:	0f 90       	pop	r0
    5b68:	0f 90       	pop	r0
    5b6a:	cf 91       	pop	r28
    5b6c:	df 91       	pop	r29
    5b6e:	08 95       	ret

00005b70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    5b70:	df 93       	push	r29
    5b72:	cf 93       	push	r28
    5b74:	00 d0       	rcall	.+0      	; 0x5b76 <xTaskPriorityDisinherit+0x6>
    5b76:	00 d0       	rcall	.+0      	; 0x5b78 <xTaskPriorityDisinherit+0x8>
    5b78:	0f 92       	push	r0
    5b7a:	cd b7       	in	r28, 0x3d	; 61
    5b7c:	de b7       	in	r29, 0x3e	; 62
    5b7e:	9d 83       	std	Y+5, r25	; 0x05
    5b80:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    5b82:	8c 81       	ldd	r24, Y+4	; 0x04
    5b84:	9d 81       	ldd	r25, Y+5	; 0x05
    5b86:	9b 83       	std	Y+3, r25	; 0x03
    5b88:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xReturn = pdFALSE;
    5b8a:	19 82       	std	Y+1, r1	; 0x01

		if( pxMutexHolder != NULL )
    5b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    5b8e:	9d 81       	ldd	r25, Y+5	; 0x05
    5b90:	00 97       	sbiw	r24, 0x00	; 0
    5b92:	09 f4       	brne	.+2      	; 0x5b96 <xTaskPriorityDisinherit+0x26>
    5b94:	56 c0       	rjmp	.+172    	; 0x5c42 <xTaskPriorityDisinherit+0xd2>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    5b96:	ea 81       	ldd	r30, Y+2	; 0x02
    5b98:	fb 81       	ldd	r31, Y+3	; 0x03
    5b9a:	84 a1       	ldd	r24, Z+36	; 0x24
    5b9c:	81 50       	subi	r24, 0x01	; 1
    5b9e:	ea 81       	ldd	r30, Y+2	; 0x02
    5ba0:	fb 81       	ldd	r31, Y+3	; 0x03
    5ba2:	84 a3       	std	Z+36, r24	; 0x24

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5ba4:	ea 81       	ldd	r30, Y+2	; 0x02
    5ba6:	fb 81       	ldd	r31, Y+3	; 0x03
    5ba8:	96 89       	ldd	r25, Z+22	; 0x16
    5baa:	ea 81       	ldd	r30, Y+2	; 0x02
    5bac:	fb 81       	ldd	r31, Y+3	; 0x03
    5bae:	83 a1       	ldd	r24, Z+35	; 0x23
    5bb0:	98 17       	cp	r25, r24
    5bb2:	09 f4       	brne	.+2      	; 0x5bb6 <xTaskPriorityDisinherit+0x46>
    5bb4:	46 c0       	rjmp	.+140    	; 0x5c42 <xTaskPriorityDisinherit+0xd2>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    5bb6:	ea 81       	ldd	r30, Y+2	; 0x02
    5bb8:	fb 81       	ldd	r31, Y+3	; 0x03
    5bba:	84 a1       	ldd	r24, Z+36	; 0x24
    5bbc:	88 23       	and	r24, r24
    5bbe:	09 f0       	breq	.+2      	; 0x5bc2 <xTaskPriorityDisinherit+0x52>
    5bc0:	40 c0       	rjmp	.+128    	; 0x5c42 <xTaskPriorityDisinherit+0xd2>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    5bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    5bc4:	9b 81       	ldd	r25, Y+3	; 0x03
    5bc6:	02 96       	adiw	r24, 0x02	; 2
    5bc8:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    5bcc:	ea 81       	ldd	r30, Y+2	; 0x02
    5bce:	fb 81       	ldd	r31, Y+3	; 0x03
    5bd0:	83 a1       	ldd	r24, Z+35	; 0x23
    5bd2:	ea 81       	ldd	r30, Y+2	; 0x02
    5bd4:	fb 81       	ldd	r31, Y+3	; 0x03
    5bd6:	86 8b       	std	Z+22, r24	; 0x16

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5bd8:	ea 81       	ldd	r30, Y+2	; 0x02
    5bda:	fb 81       	ldd	r31, Y+3	; 0x03
    5bdc:	86 89       	ldd	r24, Z+22	; 0x16
    5bde:	28 2f       	mov	r18, r24
    5be0:	30 e0       	ldi	r19, 0x00	; 0
    5be2:	85 e0       	ldi	r24, 0x05	; 5
    5be4:	90 e0       	ldi	r25, 0x00	; 0
    5be6:	82 1b       	sub	r24, r18
    5be8:	93 0b       	sbc	r25, r19
    5bea:	ea 81       	ldd	r30, Y+2	; 0x02
    5bec:	fb 81       	ldd	r31, Y+3	; 0x03
    5bee:	95 87       	std	Z+13, r25	; 0x0d
    5bf0:	84 87       	std	Z+12, r24	; 0x0c
					prvAddTaskToReadyList( pxTCB );
    5bf2:	ea 81       	ldd	r30, Y+2	; 0x02
    5bf4:	fb 81       	ldd	r31, Y+3	; 0x03
    5bf6:	96 89       	ldd	r25, Z+22	; 0x16
    5bf8:	80 91 b5 03 	lds	r24, 0x03B5
    5bfc:	89 17       	cp	r24, r25
    5bfe:	28 f4       	brcc	.+10     	; 0x5c0a <xTaskPriorityDisinherit+0x9a>
    5c00:	ea 81       	ldd	r30, Y+2	; 0x02
    5c02:	fb 81       	ldd	r31, Y+3	; 0x03
    5c04:	86 89       	ldd	r24, Z+22	; 0x16
    5c06:	80 93 b5 03 	sts	0x03B5, r24
    5c0a:	ea 81       	ldd	r30, Y+2	; 0x02
    5c0c:	fb 81       	ldd	r31, Y+3	; 0x03
    5c0e:	86 89       	ldd	r24, Z+22	; 0x16
    5c10:	28 2f       	mov	r18, r24
    5c12:	30 e0       	ldi	r19, 0x00	; 0
    5c14:	c9 01       	movw	r24, r18
    5c16:	88 0f       	add	r24, r24
    5c18:	99 1f       	adc	r25, r25
    5c1a:	88 0f       	add	r24, r24
    5c1c:	99 1f       	adc	r25, r25
    5c1e:	88 0f       	add	r24, r24
    5c20:	99 1f       	adc	r25, r25
    5c22:	82 0f       	add	r24, r18
    5c24:	93 1f       	adc	r25, r19
    5c26:	ac 01       	movw	r20, r24
    5c28:	40 54       	subi	r20, 0x40	; 64
    5c2a:	5c 4f       	sbci	r21, 0xFC	; 252
    5c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    5c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    5c30:	9c 01       	movw	r18, r24
    5c32:	2e 5f       	subi	r18, 0xFE	; 254
    5c34:	3f 4f       	sbci	r19, 0xFF	; 255
    5c36:	ca 01       	movw	r24, r20
    5c38:	b9 01       	movw	r22, r18
    5c3a:	0e 94 14 17 	call	0x2e28	; 0x2e28 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    5c3e:	81 e0       	ldi	r24, 0x01	; 1
    5c40:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    5c42:	89 81       	ldd	r24, Y+1	; 0x01
	}
    5c44:	0f 90       	pop	r0
    5c46:	0f 90       	pop	r0
    5c48:	0f 90       	pop	r0
    5c4a:	0f 90       	pop	r0
    5c4c:	0f 90       	pop	r0
    5c4e:	cf 91       	pop	r28
    5c50:	df 91       	pop	r29
    5c52:	08 95       	ret

00005c54 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    5c54:	df 93       	push	r29
    5c56:	cf 93       	push	r28
    5c58:	00 d0       	rcall	.+0      	; 0x5c5a <uxTaskResetEventItemValue+0x6>
    5c5a:	cd b7       	in	r28, 0x3d	; 61
    5c5c:	de b7       	in	r29, 0x3e	; 62
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    5c5e:	e0 91 af 03 	lds	r30, 0x03AF
    5c62:	f0 91 b0 03 	lds	r31, 0x03B0
    5c66:	84 85       	ldd	r24, Z+12	; 0x0c
    5c68:	95 85       	ldd	r25, Z+13	; 0x0d
    5c6a:	9a 83       	std	Y+2, r25	; 0x02
    5c6c:	89 83       	std	Y+1, r24	; 0x01

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5c6e:	a0 91 af 03 	lds	r26, 0x03AF
    5c72:	b0 91 b0 03 	lds	r27, 0x03B0
    5c76:	e0 91 af 03 	lds	r30, 0x03AF
    5c7a:	f0 91 b0 03 	lds	r31, 0x03B0
    5c7e:	86 89       	ldd	r24, Z+22	; 0x16
    5c80:	28 2f       	mov	r18, r24
    5c82:	30 e0       	ldi	r19, 0x00	; 0
    5c84:	85 e0       	ldi	r24, 0x05	; 5
    5c86:	90 e0       	ldi	r25, 0x00	; 0
    5c88:	82 1b       	sub	r24, r18
    5c8a:	93 0b       	sbc	r25, r19
    5c8c:	1d 96       	adiw	r26, 0x0d	; 13
    5c8e:	9c 93       	st	X, r25
    5c90:	8e 93       	st	-X, r24
    5c92:	1c 97       	sbiw	r26, 0x0c	; 12

	return uxReturn;
    5c94:	89 81       	ldd	r24, Y+1	; 0x01
    5c96:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5c98:	0f 90       	pop	r0
    5c9a:	0f 90       	pop	r0
    5c9c:	cf 91       	pop	r28
    5c9e:	df 91       	pop	r29
    5ca0:	08 95       	ret

00005ca2 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    5ca2:	df 93       	push	r29
    5ca4:	cf 93       	push	r28
    5ca6:	cd b7       	in	r28, 0x3d	; 61
    5ca8:	de b7       	in	r29, 0x3e	; 62
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    5caa:	80 91 af 03 	lds	r24, 0x03AF
    5cae:	90 91 b0 03 	lds	r25, 0x03B0
    5cb2:	00 97       	sbiw	r24, 0x00	; 0
    5cb4:	39 f0       	breq	.+14     	; 0x5cc4 <pvTaskIncrementMutexHeldCount+0x22>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    5cb6:	e0 91 af 03 	lds	r30, 0x03AF
    5cba:	f0 91 b0 03 	lds	r31, 0x03B0
    5cbe:	84 a1       	ldd	r24, Z+36	; 0x24
    5cc0:	8f 5f       	subi	r24, 0xFF	; 255
    5cc2:	84 a3       	std	Z+36, r24	; 0x24
		}

		return pxCurrentTCB;
    5cc4:	80 91 af 03 	lds	r24, 0x03AF
    5cc8:	90 91 b0 03 	lds	r25, 0x03B0
	}
    5ccc:	cf 91       	pop	r28
    5cce:	df 91       	pop	r29
    5cd0:	08 95       	ret

00005cd2 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    5cd2:	df 93       	push	r29
    5cd4:	cf 93       	push	r28
    5cd6:	cd b7       	in	r28, 0x3d	; 61
    5cd8:	de b7       	in	r29, 0x3e	; 62
    5cda:	27 97       	sbiw	r28, 0x07	; 7
    5cdc:	0f b6       	in	r0, 0x3f	; 63
    5cde:	f8 94       	cli
    5ce0:	de bf       	out	0x3e, r29	; 62
    5ce2:	0f be       	out	0x3f, r0	; 63
    5ce4:	cd bf       	out	0x3d, r28	; 61
    5ce6:	8d 83       	std	Y+5, r24	; 0x05
    5ce8:	7f 83       	std	Y+7, r23	; 0x07
    5cea:	6e 83       	std	Y+6, r22	; 0x06
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    5cec:	0f b6       	in	r0, 0x3f	; 63
    5cee:	f8 94       	cli
    5cf0:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    5cf2:	e0 91 af 03 	lds	r30, 0x03AF
    5cf6:	f0 91 b0 03 	lds	r31, 0x03B0
    5cfa:	85 a1       	ldd	r24, Z+37	; 0x25
    5cfc:	96 a1       	ldd	r25, Z+38	; 0x26
    5cfe:	a7 a1       	ldd	r26, Z+39	; 0x27
    5d00:	b0 a5       	ldd	r27, Z+40	; 0x28
    5d02:	00 97       	sbiw	r24, 0x00	; 0
    5d04:	a1 05       	cpc	r26, r1
    5d06:	b1 05       	cpc	r27, r1
    5d08:	89 f4       	brne	.+34     	; 0x5d2c <ulTaskNotifyTake+0x5a>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    5d0a:	e0 91 af 03 	lds	r30, 0x03AF
    5d0e:	f0 91 b0 03 	lds	r31, 0x03B0
    5d12:	81 e0       	ldi	r24, 0x01	; 1
    5d14:	81 a7       	std	Z+41, r24	; 0x29

				if( xTicksToWait > ( TickType_t ) 0 )
    5d16:	8e 81       	ldd	r24, Y+6	; 0x06
    5d18:	9f 81       	ldd	r25, Y+7	; 0x07
    5d1a:	00 97       	sbiw	r24, 0x00	; 0
    5d1c:	39 f0       	breq	.+14     	; 0x5d2c <ulTaskNotifyTake+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    5d1e:	8e 81       	ldd	r24, Y+6	; 0x06
    5d20:	9f 81       	ldd	r25, Y+7	; 0x07
    5d22:	61 e0       	ldi	r22, 0x01	; 1
    5d24:	0e 94 13 32 	call	0x6426	; 0x6426 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    5d28:	0e 94 bd 1a 	call	0x357a	; 0x357a <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    5d2c:	0f 90       	pop	r0
    5d2e:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    5d30:	0f b6       	in	r0, 0x3f	; 63
    5d32:	f8 94       	cli
    5d34:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    5d36:	e0 91 af 03 	lds	r30, 0x03AF
    5d3a:	f0 91 b0 03 	lds	r31, 0x03B0
    5d3e:	85 a1       	ldd	r24, Z+37	; 0x25
    5d40:	96 a1       	ldd	r25, Z+38	; 0x26
    5d42:	a7 a1       	ldd	r26, Z+39	; 0x27
    5d44:	b0 a5       	ldd	r27, Z+40	; 0x28
    5d46:	89 83       	std	Y+1, r24	; 0x01
    5d48:	9a 83       	std	Y+2, r25	; 0x02
    5d4a:	ab 83       	std	Y+3, r26	; 0x03
    5d4c:	bc 83       	std	Y+4, r27	; 0x04

			if( ulReturn != 0UL )
    5d4e:	89 81       	ldd	r24, Y+1	; 0x01
    5d50:	9a 81       	ldd	r25, Y+2	; 0x02
    5d52:	ab 81       	ldd	r26, Y+3	; 0x03
    5d54:	bc 81       	ldd	r27, Y+4	; 0x04
    5d56:	00 97       	sbiw	r24, 0x00	; 0
    5d58:	a1 05       	cpc	r26, r1
    5d5a:	b1 05       	cpc	r27, r1
    5d5c:	d9 f0       	breq	.+54     	; 0x5d94 <ulTaskNotifyTake+0xc2>
			{
				if( xClearCountOnExit != pdFALSE )
    5d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    5d60:	88 23       	and	r24, r24
    5d62:	49 f0       	breq	.+18     	; 0x5d76 <ulTaskNotifyTake+0xa4>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    5d64:	e0 91 af 03 	lds	r30, 0x03AF
    5d68:	f0 91 b0 03 	lds	r31, 0x03B0
    5d6c:	15 a2       	std	Z+37, r1	; 0x25
    5d6e:	16 a2       	std	Z+38, r1	; 0x26
    5d70:	17 a2       	std	Z+39, r1	; 0x27
    5d72:	10 a6       	std	Z+40, r1	; 0x28
    5d74:	0f c0       	rjmp	.+30     	; 0x5d94 <ulTaskNotifyTake+0xc2>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
    5d76:	e0 91 af 03 	lds	r30, 0x03AF
    5d7a:	f0 91 b0 03 	lds	r31, 0x03B0
    5d7e:	89 81       	ldd	r24, Y+1	; 0x01
    5d80:	9a 81       	ldd	r25, Y+2	; 0x02
    5d82:	ab 81       	ldd	r26, Y+3	; 0x03
    5d84:	bc 81       	ldd	r27, Y+4	; 0x04
    5d86:	01 97       	sbiw	r24, 0x01	; 1
    5d88:	a1 09       	sbc	r26, r1
    5d8a:	b1 09       	sbc	r27, r1
    5d8c:	85 a3       	std	Z+37, r24	; 0x25
    5d8e:	96 a3       	std	Z+38, r25	; 0x26
    5d90:	a7 a3       	std	Z+39, r26	; 0x27
    5d92:	b0 a7       	std	Z+40, r27	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5d94:	e0 91 af 03 	lds	r30, 0x03AF
    5d98:	f0 91 b0 03 	lds	r31, 0x03B0
    5d9c:	11 a6       	std	Z+41, r1	; 0x29
		}
		taskEXIT_CRITICAL();
    5d9e:	0f 90       	pop	r0
    5da0:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
    5da2:	89 81       	ldd	r24, Y+1	; 0x01
    5da4:	9a 81       	ldd	r25, Y+2	; 0x02
    5da6:	ab 81       	ldd	r26, Y+3	; 0x03
    5da8:	bc 81       	ldd	r27, Y+4	; 0x04
	}
    5daa:	bc 01       	movw	r22, r24
    5dac:	cd 01       	movw	r24, r26
    5dae:	27 96       	adiw	r28, 0x07	; 7
    5db0:	0f b6       	in	r0, 0x3f	; 63
    5db2:	f8 94       	cli
    5db4:	de bf       	out	0x3e, r29	; 62
    5db6:	0f be       	out	0x3f, r0	; 63
    5db8:	cd bf       	out	0x3d, r28	; 61
    5dba:	cf 91       	pop	r28
    5dbc:	df 91       	pop	r29
    5dbe:	08 95       	ret

00005dc0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    5dc0:	ef 92       	push	r14
    5dc2:	ff 92       	push	r15
    5dc4:	0f 93       	push	r16
    5dc6:	1f 93       	push	r17
    5dc8:	df 93       	push	r29
    5dca:	cf 93       	push	r28
    5dcc:	cd b7       	in	r28, 0x3d	; 61
    5dce:	de b7       	in	r29, 0x3e	; 62
    5dd0:	2d 97       	sbiw	r28, 0x0d	; 13
    5dd2:	0f b6       	in	r0, 0x3f	; 63
    5dd4:	f8 94       	cli
    5dd6:	de bf       	out	0x3e, r29	; 62
    5dd8:	0f be       	out	0x3f, r0	; 63
    5dda:	cd bf       	out	0x3d, r28	; 61
    5ddc:	6a 83       	std	Y+2, r22	; 0x02
    5dde:	7b 83       	std	Y+3, r23	; 0x03
    5de0:	8c 83       	std	Y+4, r24	; 0x04
    5de2:	9d 83       	std	Y+5, r25	; 0x05
    5de4:	2e 83       	std	Y+6, r18	; 0x06
    5de6:	3f 83       	std	Y+7, r19	; 0x07
    5de8:	48 87       	std	Y+8, r20	; 0x08
    5dea:	59 87       	std	Y+9, r21	; 0x09
    5dec:	1b 87       	std	Y+11, r17	; 0x0b
    5dee:	0a 87       	std	Y+10, r16	; 0x0a
    5df0:	fd 86       	std	Y+13, r15	; 0x0d
    5df2:	ec 86       	std	Y+12, r14	; 0x0c
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    5df4:	0f b6       	in	r0, 0x3f	; 63
    5df6:	f8 94       	cli
    5df8:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    5dfa:	e0 91 af 03 	lds	r30, 0x03AF
    5dfe:	f0 91 b0 03 	lds	r31, 0x03B0
    5e02:	81 a5       	ldd	r24, Z+41	; 0x29
    5e04:	82 30       	cpi	r24, 0x02	; 2
    5e06:	49 f1       	breq	.+82     	; 0x5e5a <xTaskNotifyWait+0x9a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    5e08:	e0 91 af 03 	lds	r30, 0x03AF
    5e0c:	f0 91 b0 03 	lds	r31, 0x03B0
    5e10:	25 a1       	ldd	r18, Z+37	; 0x25
    5e12:	36 a1       	ldd	r19, Z+38	; 0x26
    5e14:	47 a1       	ldd	r20, Z+39	; 0x27
    5e16:	50 a5       	ldd	r21, Z+40	; 0x28
    5e18:	8a 81       	ldd	r24, Y+2	; 0x02
    5e1a:	9b 81       	ldd	r25, Y+3	; 0x03
    5e1c:	ac 81       	ldd	r26, Y+4	; 0x04
    5e1e:	bd 81       	ldd	r27, Y+5	; 0x05
    5e20:	80 95       	com	r24
    5e22:	90 95       	com	r25
    5e24:	a0 95       	com	r26
    5e26:	b0 95       	com	r27
    5e28:	82 23       	and	r24, r18
    5e2a:	93 23       	and	r25, r19
    5e2c:	a4 23       	and	r26, r20
    5e2e:	b5 23       	and	r27, r21
    5e30:	85 a3       	std	Z+37, r24	; 0x25
    5e32:	96 a3       	std	Z+38, r25	; 0x26
    5e34:	a7 a3       	std	Z+39, r26	; 0x27
    5e36:	b0 a7       	std	Z+40, r27	; 0x28

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    5e38:	e0 91 af 03 	lds	r30, 0x03AF
    5e3c:	f0 91 b0 03 	lds	r31, 0x03B0
    5e40:	81 e0       	ldi	r24, 0x01	; 1
    5e42:	81 a7       	std	Z+41, r24	; 0x29

				if( xTicksToWait > ( TickType_t ) 0 )
    5e44:	8c 85       	ldd	r24, Y+12	; 0x0c
    5e46:	9d 85       	ldd	r25, Y+13	; 0x0d
    5e48:	00 97       	sbiw	r24, 0x00	; 0
    5e4a:	39 f0       	breq	.+14     	; 0x5e5a <xTaskNotifyWait+0x9a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    5e4c:	8c 85       	ldd	r24, Y+12	; 0x0c
    5e4e:	9d 85       	ldd	r25, Y+13	; 0x0d
    5e50:	61 e0       	ldi	r22, 0x01	; 1
    5e52:	0e 94 13 32 	call	0x6426	; 0x6426 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    5e56:	0e 94 bd 1a 	call	0x357a	; 0x357a <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    5e5a:	0f 90       	pop	r0
    5e5c:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    5e5e:	0f b6       	in	r0, 0x3f	; 63
    5e60:	f8 94       	cli
    5e62:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    5e64:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e66:	9b 85       	ldd	r25, Y+11	; 0x0b
    5e68:	00 97       	sbiw	r24, 0x00	; 0
    5e6a:	71 f0       	breq	.+28     	; 0x5e88 <xTaskNotifyWait+0xc8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    5e6c:	e0 91 af 03 	lds	r30, 0x03AF
    5e70:	f0 91 b0 03 	lds	r31, 0x03B0
    5e74:	85 a1       	ldd	r24, Z+37	; 0x25
    5e76:	96 a1       	ldd	r25, Z+38	; 0x26
    5e78:	a7 a1       	ldd	r26, Z+39	; 0x27
    5e7a:	b0 a5       	ldd	r27, Z+40	; 0x28
    5e7c:	ea 85       	ldd	r30, Y+10	; 0x0a
    5e7e:	fb 85       	ldd	r31, Y+11	; 0x0b
    5e80:	80 83       	st	Z, r24
    5e82:	91 83       	std	Z+1, r25	; 0x01
    5e84:	a2 83       	std	Z+2, r26	; 0x02
    5e86:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    5e88:	e0 91 af 03 	lds	r30, 0x03AF
    5e8c:	f0 91 b0 03 	lds	r31, 0x03B0
    5e90:	81 a5       	ldd	r24, Z+41	; 0x29
    5e92:	81 30       	cpi	r24, 0x01	; 1
    5e94:	11 f4       	brne	.+4      	; 0x5e9a <xTaskNotifyWait+0xda>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    5e96:	19 82       	std	Y+1, r1	; 0x01
    5e98:	1a c0       	rjmp	.+52     	; 0x5ece <xTaskNotifyWait+0x10e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    5e9a:	e0 91 af 03 	lds	r30, 0x03AF
    5e9e:	f0 91 b0 03 	lds	r31, 0x03B0
    5ea2:	25 a1       	ldd	r18, Z+37	; 0x25
    5ea4:	36 a1       	ldd	r19, Z+38	; 0x26
    5ea6:	47 a1       	ldd	r20, Z+39	; 0x27
    5ea8:	50 a5       	ldd	r21, Z+40	; 0x28
    5eaa:	8e 81       	ldd	r24, Y+6	; 0x06
    5eac:	9f 81       	ldd	r25, Y+7	; 0x07
    5eae:	a8 85       	ldd	r26, Y+8	; 0x08
    5eb0:	b9 85       	ldd	r27, Y+9	; 0x09
    5eb2:	80 95       	com	r24
    5eb4:	90 95       	com	r25
    5eb6:	a0 95       	com	r26
    5eb8:	b0 95       	com	r27
    5eba:	82 23       	and	r24, r18
    5ebc:	93 23       	and	r25, r19
    5ebe:	a4 23       	and	r26, r20
    5ec0:	b5 23       	and	r27, r21
    5ec2:	85 a3       	std	Z+37, r24	; 0x25
    5ec4:	96 a3       	std	Z+38, r25	; 0x26
    5ec6:	a7 a3       	std	Z+39, r26	; 0x27
    5ec8:	b0 a7       	std	Z+40, r27	; 0x28
				xReturn = pdTRUE;
    5eca:	81 e0       	ldi	r24, 0x01	; 1
    5ecc:	89 83       	std	Y+1, r24	; 0x01
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5ece:	e0 91 af 03 	lds	r30, 0x03AF
    5ed2:	f0 91 b0 03 	lds	r31, 0x03B0
    5ed6:	11 a6       	std	Z+41, r1	; 0x29
		}
		taskEXIT_CRITICAL();
    5ed8:	0f 90       	pop	r0
    5eda:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    5edc:	89 81       	ldd	r24, Y+1	; 0x01
	}
    5ede:	2d 96       	adiw	r28, 0x0d	; 13
    5ee0:	0f b6       	in	r0, 0x3f	; 63
    5ee2:	f8 94       	cli
    5ee4:	de bf       	out	0x3e, r29	; 62
    5ee6:	0f be       	out	0x3f, r0	; 63
    5ee8:	cd bf       	out	0x3d, r28	; 61
    5eea:	cf 91       	pop	r28
    5eec:	df 91       	pop	r29
    5eee:	1f 91       	pop	r17
    5ef0:	0f 91       	pop	r16
    5ef2:	ff 90       	pop	r15
    5ef4:	ef 90       	pop	r14
    5ef6:	08 95       	ret

00005ef8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    5ef8:	0f 93       	push	r16
    5efa:	1f 93       	push	r17
    5efc:	df 93       	push	r29
    5efe:	cf 93       	push	r28
    5f00:	cd b7       	in	r28, 0x3d	; 61
    5f02:	de b7       	in	r29, 0x3e	; 62
    5f04:	2f 97       	sbiw	r28, 0x0f	; 15
    5f06:	0f b6       	in	r0, 0x3f	; 63
    5f08:	f8 94       	cli
    5f0a:	de bf       	out	0x3e, r29	; 62
    5f0c:	0f be       	out	0x3f, r0	; 63
    5f0e:	cd bf       	out	0x3d, r28	; 61
    5f10:	9e 83       	std	Y+6, r25	; 0x06
    5f12:	8d 83       	std	Y+5, r24	; 0x05
    5f14:	4f 83       	std	Y+7, r20	; 0x07
    5f16:	58 87       	std	Y+8, r21	; 0x08
    5f18:	69 87       	std	Y+9, r22	; 0x09
    5f1a:	7a 87       	std	Y+10, r23	; 0x0a
    5f1c:	2b 87       	std	Y+11, r18	; 0x0b
    5f1e:	1d 87       	std	Y+13, r17	; 0x0d
    5f20:	0c 87       	std	Y+12, r16	; 0x0c
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    5f22:	81 e0       	ldi	r24, 0x01	; 1
    5f24:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
    5f26:	8d 81       	ldd	r24, Y+5	; 0x05
    5f28:	9e 81       	ldd	r25, Y+6	; 0x06
    5f2a:	9c 83       	std	Y+4, r25	; 0x04
    5f2c:	8b 83       	std	Y+3, r24	; 0x03

		taskENTER_CRITICAL();
    5f2e:	0f b6       	in	r0, 0x3f	; 63
    5f30:	f8 94       	cli
    5f32:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    5f34:	8c 85       	ldd	r24, Y+12	; 0x0c
    5f36:	9d 85       	ldd	r25, Y+13	; 0x0d
    5f38:	00 97       	sbiw	r24, 0x00	; 0
    5f3a:	61 f0       	breq	.+24     	; 0x5f54 <xTaskGenericNotify+0x5c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    5f3c:	eb 81       	ldd	r30, Y+3	; 0x03
    5f3e:	fc 81       	ldd	r31, Y+4	; 0x04
    5f40:	85 a1       	ldd	r24, Z+37	; 0x25
    5f42:	96 a1       	ldd	r25, Z+38	; 0x26
    5f44:	a7 a1       	ldd	r26, Z+39	; 0x27
    5f46:	b0 a5       	ldd	r27, Z+40	; 0x28
    5f48:	ec 85       	ldd	r30, Y+12	; 0x0c
    5f4a:	fd 85       	ldd	r31, Y+13	; 0x0d
    5f4c:	80 83       	st	Z, r24
    5f4e:	91 83       	std	Z+1, r25	; 0x01
    5f50:	a2 83       	std	Z+2, r26	; 0x02
    5f52:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    5f54:	eb 81       	ldd	r30, Y+3	; 0x03
    5f56:	fc 81       	ldd	r31, Y+4	; 0x04
    5f58:	81 a5       	ldd	r24, Z+41	; 0x29
    5f5a:	89 83       	std	Y+1, r24	; 0x01

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    5f5c:	eb 81       	ldd	r30, Y+3	; 0x03
    5f5e:	fc 81       	ldd	r31, Y+4	; 0x04
    5f60:	82 e0       	ldi	r24, 0x02	; 2
    5f62:	81 a7       	std	Z+41, r24	; 0x29

			switch( eAction )
    5f64:	8b 85       	ldd	r24, Y+11	; 0x0b
    5f66:	28 2f       	mov	r18, r24
    5f68:	30 e0       	ldi	r19, 0x00	; 0
    5f6a:	3f 87       	std	Y+15, r19	; 0x0f
    5f6c:	2e 87       	std	Y+14, r18	; 0x0e
    5f6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5f70:	9f 85       	ldd	r25, Y+15	; 0x0f
    5f72:	82 30       	cpi	r24, 0x02	; 2
    5f74:	91 05       	cpc	r25, r1
    5f76:	59 f1       	breq	.+86     	; 0x5fce <xTaskGenericNotify+0xd6>
    5f78:	2e 85       	ldd	r18, Y+14	; 0x0e
    5f7a:	3f 85       	ldd	r19, Y+15	; 0x0f
    5f7c:	23 30       	cpi	r18, 0x03	; 3
    5f7e:	31 05       	cpc	r19, r1
    5f80:	34 f4       	brge	.+12     	; 0x5f8e <xTaskGenericNotify+0x96>
    5f82:	8e 85       	ldd	r24, Y+14	; 0x0e
    5f84:	9f 85       	ldd	r25, Y+15	; 0x0f
    5f86:	81 30       	cpi	r24, 0x01	; 1
    5f88:	91 05       	cpc	r25, r1
    5f8a:	61 f0       	breq	.+24     	; 0x5fa4 <xTaskGenericNotify+0xac>
    5f8c:	4a c0       	rjmp	.+148    	; 0x6022 <xTaskGenericNotify+0x12a>
    5f8e:	2e 85       	ldd	r18, Y+14	; 0x0e
    5f90:	3f 85       	ldd	r19, Y+15	; 0x0f
    5f92:	23 30       	cpi	r18, 0x03	; 3
    5f94:	31 05       	cpc	r19, r1
    5f96:	59 f1       	breq	.+86     	; 0x5fee <xTaskGenericNotify+0xf6>
    5f98:	8e 85       	ldd	r24, Y+14	; 0x0e
    5f9a:	9f 85       	ldd	r25, Y+15	; 0x0f
    5f9c:	84 30       	cpi	r24, 0x04	; 4
    5f9e:	91 05       	cpc	r25, r1
    5fa0:	89 f1       	breq	.+98     	; 0x6004 <xTaskGenericNotify+0x10c>
    5fa2:	3f c0       	rjmp	.+126    	; 0x6022 <xTaskGenericNotify+0x12a>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    5fa4:	eb 81       	ldd	r30, Y+3	; 0x03
    5fa6:	fc 81       	ldd	r31, Y+4	; 0x04
    5fa8:	25 a1       	ldd	r18, Z+37	; 0x25
    5faa:	36 a1       	ldd	r19, Z+38	; 0x26
    5fac:	47 a1       	ldd	r20, Z+39	; 0x27
    5fae:	50 a5       	ldd	r21, Z+40	; 0x28
    5fb0:	8f 81       	ldd	r24, Y+7	; 0x07
    5fb2:	98 85       	ldd	r25, Y+8	; 0x08
    5fb4:	a9 85       	ldd	r26, Y+9	; 0x09
    5fb6:	ba 85       	ldd	r27, Y+10	; 0x0a
    5fb8:	82 2b       	or	r24, r18
    5fba:	93 2b       	or	r25, r19
    5fbc:	a4 2b       	or	r26, r20
    5fbe:	b5 2b       	or	r27, r21
    5fc0:	eb 81       	ldd	r30, Y+3	; 0x03
    5fc2:	fc 81       	ldd	r31, Y+4	; 0x04
    5fc4:	85 a3       	std	Z+37, r24	; 0x25
    5fc6:	96 a3       	std	Z+38, r25	; 0x26
    5fc8:	a7 a3       	std	Z+39, r26	; 0x27
    5fca:	b0 a7       	std	Z+40, r27	; 0x28
    5fcc:	2a c0       	rjmp	.+84     	; 0x6022 <xTaskGenericNotify+0x12a>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    5fce:	eb 81       	ldd	r30, Y+3	; 0x03
    5fd0:	fc 81       	ldd	r31, Y+4	; 0x04
    5fd2:	85 a1       	ldd	r24, Z+37	; 0x25
    5fd4:	96 a1       	ldd	r25, Z+38	; 0x26
    5fd6:	a7 a1       	ldd	r26, Z+39	; 0x27
    5fd8:	b0 a5       	ldd	r27, Z+40	; 0x28
    5fda:	01 96       	adiw	r24, 0x01	; 1
    5fdc:	a1 1d       	adc	r26, r1
    5fde:	b1 1d       	adc	r27, r1
    5fe0:	eb 81       	ldd	r30, Y+3	; 0x03
    5fe2:	fc 81       	ldd	r31, Y+4	; 0x04
    5fe4:	85 a3       	std	Z+37, r24	; 0x25
    5fe6:	96 a3       	std	Z+38, r25	; 0x26
    5fe8:	a7 a3       	std	Z+39, r26	; 0x27
    5fea:	b0 a7       	std	Z+40, r27	; 0x28
    5fec:	1a c0       	rjmp	.+52     	; 0x6022 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    5fee:	eb 81       	ldd	r30, Y+3	; 0x03
    5ff0:	fc 81       	ldd	r31, Y+4	; 0x04
    5ff2:	8f 81       	ldd	r24, Y+7	; 0x07
    5ff4:	98 85       	ldd	r25, Y+8	; 0x08
    5ff6:	a9 85       	ldd	r26, Y+9	; 0x09
    5ff8:	ba 85       	ldd	r27, Y+10	; 0x0a
    5ffa:	85 a3       	std	Z+37, r24	; 0x25
    5ffc:	96 a3       	std	Z+38, r25	; 0x26
    5ffe:	a7 a3       	std	Z+39, r26	; 0x27
    6000:	b0 a7       	std	Z+40, r27	; 0x28
    6002:	0f c0       	rjmp	.+30     	; 0x6022 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    6004:	89 81       	ldd	r24, Y+1	; 0x01
    6006:	82 30       	cpi	r24, 0x02	; 2
    6008:	59 f0       	breq	.+22     	; 0x6020 <xTaskGenericNotify+0x128>
					{
						pxTCB->ulNotifiedValue = ulValue;
    600a:	eb 81       	ldd	r30, Y+3	; 0x03
    600c:	fc 81       	ldd	r31, Y+4	; 0x04
    600e:	8f 81       	ldd	r24, Y+7	; 0x07
    6010:	98 85       	ldd	r25, Y+8	; 0x08
    6012:	a9 85       	ldd	r26, Y+9	; 0x09
    6014:	ba 85       	ldd	r27, Y+10	; 0x0a
    6016:	85 a3       	std	Z+37, r24	; 0x25
    6018:	96 a3       	std	Z+38, r25	; 0x26
    601a:	a7 a3       	std	Z+39, r26	; 0x27
    601c:	b0 a7       	std	Z+40, r27	; 0x28
    601e:	01 c0       	rjmp	.+2      	; 0x6022 <xTaskGenericNotify+0x12a>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    6020:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    6022:	89 81       	ldd	r24, Y+1	; 0x01
    6024:	81 30       	cpi	r24, 0x01	; 1
    6026:	b9 f5       	brne	.+110    	; 0x6096 <xTaskGenericNotify+0x19e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    6028:	8b 81       	ldd	r24, Y+3	; 0x03
    602a:	9c 81       	ldd	r25, Y+4	; 0x04
    602c:	02 96       	adiw	r24, 0x02	; 2
    602e:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    6032:	eb 81       	ldd	r30, Y+3	; 0x03
    6034:	fc 81       	ldd	r31, Y+4	; 0x04
    6036:	96 89       	ldd	r25, Z+22	; 0x16
    6038:	80 91 b5 03 	lds	r24, 0x03B5
    603c:	89 17       	cp	r24, r25
    603e:	28 f4       	brcc	.+10     	; 0x604a <xTaskGenericNotify+0x152>
    6040:	eb 81       	ldd	r30, Y+3	; 0x03
    6042:	fc 81       	ldd	r31, Y+4	; 0x04
    6044:	86 89       	ldd	r24, Z+22	; 0x16
    6046:	80 93 b5 03 	sts	0x03B5, r24
    604a:	eb 81       	ldd	r30, Y+3	; 0x03
    604c:	fc 81       	ldd	r31, Y+4	; 0x04
    604e:	86 89       	ldd	r24, Z+22	; 0x16
    6050:	28 2f       	mov	r18, r24
    6052:	30 e0       	ldi	r19, 0x00	; 0
    6054:	c9 01       	movw	r24, r18
    6056:	88 0f       	add	r24, r24
    6058:	99 1f       	adc	r25, r25
    605a:	88 0f       	add	r24, r24
    605c:	99 1f       	adc	r25, r25
    605e:	88 0f       	add	r24, r24
    6060:	99 1f       	adc	r25, r25
    6062:	82 0f       	add	r24, r18
    6064:	93 1f       	adc	r25, r19
    6066:	ac 01       	movw	r20, r24
    6068:	40 54       	subi	r20, 0x40	; 64
    606a:	5c 4f       	sbci	r21, 0xFC	; 252
    606c:	8b 81       	ldd	r24, Y+3	; 0x03
    606e:	9c 81       	ldd	r25, Y+4	; 0x04
    6070:	9c 01       	movw	r18, r24
    6072:	2e 5f       	subi	r18, 0xFE	; 254
    6074:	3f 4f       	sbci	r19, 0xFF	; 255
    6076:	ca 01       	movw	r24, r20
    6078:	b9 01       	movw	r22, r18
    607a:	0e 94 14 17 	call	0x2e28	; 0x2e28 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    607e:	eb 81       	ldd	r30, Y+3	; 0x03
    6080:	fc 81       	ldd	r31, Y+4	; 0x04
    6082:	96 89       	ldd	r25, Z+22	; 0x16
    6084:	e0 91 af 03 	lds	r30, 0x03AF
    6088:	f0 91 b0 03 	lds	r31, 0x03B0
    608c:	86 89       	ldd	r24, Z+22	; 0x16
    608e:	89 17       	cp	r24, r25
    6090:	10 f4       	brcc	.+4      	; 0x6096 <xTaskGenericNotify+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    6092:	0e 94 bd 1a 	call	0x357a	; 0x357a <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    6096:	0f 90       	pop	r0
    6098:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    609a:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    609c:	2f 96       	adiw	r28, 0x0f	; 15
    609e:	0f b6       	in	r0, 0x3f	; 63
    60a0:	f8 94       	cli
    60a2:	de bf       	out	0x3e, r29	; 62
    60a4:	0f be       	out	0x3f, r0	; 63
    60a6:	cd bf       	out	0x3d, r28	; 61
    60a8:	cf 91       	pop	r28
    60aa:	df 91       	pop	r29
    60ac:	1f 91       	pop	r17
    60ae:	0f 91       	pop	r16
    60b0:	08 95       	ret

000060b2 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    60b2:	ef 92       	push	r14
    60b4:	ff 92       	push	r15
    60b6:	0f 93       	push	r16
    60b8:	1f 93       	push	r17
    60ba:	df 93       	push	r29
    60bc:	cf 93       	push	r28
    60be:	cd b7       	in	r28, 0x3d	; 61
    60c0:	de b7       	in	r29, 0x3e	; 62
    60c2:	62 97       	sbiw	r28, 0x12	; 18
    60c4:	0f b6       	in	r0, 0x3f	; 63
    60c6:	f8 94       	cli
    60c8:	de bf       	out	0x3e, r29	; 62
    60ca:	0f be       	out	0x3f, r0	; 63
    60cc:	cd bf       	out	0x3d, r28	; 61
    60ce:	9f 83       	std	Y+7, r25	; 0x07
    60d0:	8e 83       	std	Y+6, r24	; 0x06
    60d2:	48 87       	std	Y+8, r20	; 0x08
    60d4:	59 87       	std	Y+9, r21	; 0x09
    60d6:	6a 87       	std	Y+10, r22	; 0x0a
    60d8:	7b 87       	std	Y+11, r23	; 0x0b
    60da:	2c 87       	std	Y+12, r18	; 0x0c
    60dc:	1e 87       	std	Y+14, r17	; 0x0e
    60de:	0d 87       	std	Y+13, r16	; 0x0d
    60e0:	f8 8a       	std	Y+16, r15	; 0x10
    60e2:	ef 86       	std	Y+15, r14	; 0x0f
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    60e4:	81 e0       	ldi	r24, 0x01	; 1
    60e6:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    60e8:	8e 81       	ldd	r24, Y+6	; 0x06
    60ea:	9f 81       	ldd	r25, Y+7	; 0x07
    60ec:	9d 83       	std	Y+5, r25	; 0x05
    60ee:	8c 83       	std	Y+4, r24	; 0x04

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    60f0:	19 82       	std	Y+1, r1	; 0x01
		{
			if( pulPreviousNotificationValue != NULL )
    60f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    60f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    60f6:	00 97       	sbiw	r24, 0x00	; 0
    60f8:	61 f0       	breq	.+24     	; 0x6112 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    60fa:	ec 81       	ldd	r30, Y+4	; 0x04
    60fc:	fd 81       	ldd	r31, Y+5	; 0x05
    60fe:	85 a1       	ldd	r24, Z+37	; 0x25
    6100:	96 a1       	ldd	r25, Z+38	; 0x26
    6102:	a7 a1       	ldd	r26, Z+39	; 0x27
    6104:	b0 a5       	ldd	r27, Z+40	; 0x28
    6106:	ed 85       	ldd	r30, Y+13	; 0x0d
    6108:	fe 85       	ldd	r31, Y+14	; 0x0e
    610a:	80 83       	st	Z, r24
    610c:	91 83       	std	Z+1, r25	; 0x01
    610e:	a2 83       	std	Z+2, r26	; 0x02
    6110:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    6112:	ec 81       	ldd	r30, Y+4	; 0x04
    6114:	fd 81       	ldd	r31, Y+5	; 0x05
    6116:	81 a5       	ldd	r24, Z+41	; 0x29
    6118:	8b 83       	std	Y+3, r24	; 0x03
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    611a:	ec 81       	ldd	r30, Y+4	; 0x04
    611c:	fd 81       	ldd	r31, Y+5	; 0x05
    611e:	82 e0       	ldi	r24, 0x02	; 2
    6120:	81 a7       	std	Z+41, r24	; 0x29

			switch( eAction )
    6122:	8c 85       	ldd	r24, Y+12	; 0x0c
    6124:	28 2f       	mov	r18, r24
    6126:	30 e0       	ldi	r19, 0x00	; 0
    6128:	3a 8b       	std	Y+18, r19	; 0x12
    612a:	29 8b       	std	Y+17, r18	; 0x11
    612c:	89 89       	ldd	r24, Y+17	; 0x11
    612e:	9a 89       	ldd	r25, Y+18	; 0x12
    6130:	82 30       	cpi	r24, 0x02	; 2
    6132:	91 05       	cpc	r25, r1
    6134:	59 f1       	breq	.+86     	; 0x618c <xTaskGenericNotifyFromISR+0xda>
    6136:	29 89       	ldd	r18, Y+17	; 0x11
    6138:	3a 89       	ldd	r19, Y+18	; 0x12
    613a:	23 30       	cpi	r18, 0x03	; 3
    613c:	31 05       	cpc	r19, r1
    613e:	34 f4       	brge	.+12     	; 0x614c <xTaskGenericNotifyFromISR+0x9a>
    6140:	89 89       	ldd	r24, Y+17	; 0x11
    6142:	9a 89       	ldd	r25, Y+18	; 0x12
    6144:	81 30       	cpi	r24, 0x01	; 1
    6146:	91 05       	cpc	r25, r1
    6148:	61 f0       	breq	.+24     	; 0x6162 <xTaskGenericNotifyFromISR+0xb0>
    614a:	4a c0       	rjmp	.+148    	; 0x61e0 <xTaskGenericNotifyFromISR+0x12e>
    614c:	29 89       	ldd	r18, Y+17	; 0x11
    614e:	3a 89       	ldd	r19, Y+18	; 0x12
    6150:	23 30       	cpi	r18, 0x03	; 3
    6152:	31 05       	cpc	r19, r1
    6154:	59 f1       	breq	.+86     	; 0x61ac <xTaskGenericNotifyFromISR+0xfa>
    6156:	89 89       	ldd	r24, Y+17	; 0x11
    6158:	9a 89       	ldd	r25, Y+18	; 0x12
    615a:	84 30       	cpi	r24, 0x04	; 4
    615c:	91 05       	cpc	r25, r1
    615e:	89 f1       	breq	.+98     	; 0x61c2 <xTaskGenericNotifyFromISR+0x110>
    6160:	3f c0       	rjmp	.+126    	; 0x61e0 <xTaskGenericNotifyFromISR+0x12e>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    6162:	ec 81       	ldd	r30, Y+4	; 0x04
    6164:	fd 81       	ldd	r31, Y+5	; 0x05
    6166:	25 a1       	ldd	r18, Z+37	; 0x25
    6168:	36 a1       	ldd	r19, Z+38	; 0x26
    616a:	47 a1       	ldd	r20, Z+39	; 0x27
    616c:	50 a5       	ldd	r21, Z+40	; 0x28
    616e:	88 85       	ldd	r24, Y+8	; 0x08
    6170:	99 85       	ldd	r25, Y+9	; 0x09
    6172:	aa 85       	ldd	r26, Y+10	; 0x0a
    6174:	bb 85       	ldd	r27, Y+11	; 0x0b
    6176:	82 2b       	or	r24, r18
    6178:	93 2b       	or	r25, r19
    617a:	a4 2b       	or	r26, r20
    617c:	b5 2b       	or	r27, r21
    617e:	ec 81       	ldd	r30, Y+4	; 0x04
    6180:	fd 81       	ldd	r31, Y+5	; 0x05
    6182:	85 a3       	std	Z+37, r24	; 0x25
    6184:	96 a3       	std	Z+38, r25	; 0x26
    6186:	a7 a3       	std	Z+39, r26	; 0x27
    6188:	b0 a7       	std	Z+40, r27	; 0x28
    618a:	2a c0       	rjmp	.+84     	; 0x61e0 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    618c:	ec 81       	ldd	r30, Y+4	; 0x04
    618e:	fd 81       	ldd	r31, Y+5	; 0x05
    6190:	85 a1       	ldd	r24, Z+37	; 0x25
    6192:	96 a1       	ldd	r25, Z+38	; 0x26
    6194:	a7 a1       	ldd	r26, Z+39	; 0x27
    6196:	b0 a5       	ldd	r27, Z+40	; 0x28
    6198:	01 96       	adiw	r24, 0x01	; 1
    619a:	a1 1d       	adc	r26, r1
    619c:	b1 1d       	adc	r27, r1
    619e:	ec 81       	ldd	r30, Y+4	; 0x04
    61a0:	fd 81       	ldd	r31, Y+5	; 0x05
    61a2:	85 a3       	std	Z+37, r24	; 0x25
    61a4:	96 a3       	std	Z+38, r25	; 0x26
    61a6:	a7 a3       	std	Z+39, r26	; 0x27
    61a8:	b0 a7       	std	Z+40, r27	; 0x28
    61aa:	1a c0       	rjmp	.+52     	; 0x61e0 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    61ac:	ec 81       	ldd	r30, Y+4	; 0x04
    61ae:	fd 81       	ldd	r31, Y+5	; 0x05
    61b0:	88 85       	ldd	r24, Y+8	; 0x08
    61b2:	99 85       	ldd	r25, Y+9	; 0x09
    61b4:	aa 85       	ldd	r26, Y+10	; 0x0a
    61b6:	bb 85       	ldd	r27, Y+11	; 0x0b
    61b8:	85 a3       	std	Z+37, r24	; 0x25
    61ba:	96 a3       	std	Z+38, r25	; 0x26
    61bc:	a7 a3       	std	Z+39, r26	; 0x27
    61be:	b0 a7       	std	Z+40, r27	; 0x28
    61c0:	0f c0       	rjmp	.+30     	; 0x61e0 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    61c2:	8b 81       	ldd	r24, Y+3	; 0x03
    61c4:	82 30       	cpi	r24, 0x02	; 2
    61c6:	59 f0       	breq	.+22     	; 0x61de <xTaskGenericNotifyFromISR+0x12c>
					{
						pxTCB->ulNotifiedValue = ulValue;
    61c8:	ec 81       	ldd	r30, Y+4	; 0x04
    61ca:	fd 81       	ldd	r31, Y+5	; 0x05
    61cc:	88 85       	ldd	r24, Y+8	; 0x08
    61ce:	99 85       	ldd	r25, Y+9	; 0x09
    61d0:	aa 85       	ldd	r26, Y+10	; 0x0a
    61d2:	bb 85       	ldd	r27, Y+11	; 0x0b
    61d4:	85 a3       	std	Z+37, r24	; 0x25
    61d6:	96 a3       	std	Z+38, r25	; 0x26
    61d8:	a7 a3       	std	Z+39, r26	; 0x27
    61da:	b0 a7       	std	Z+40, r27	; 0x28
    61dc:	01 c0       	rjmp	.+2      	; 0x61e0 <xTaskGenericNotifyFromISR+0x12e>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    61de:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    61e0:	8b 81       	ldd	r24, Y+3	; 0x03
    61e2:	81 30       	cpi	r24, 0x01	; 1
    61e4:	09 f0       	breq	.+2      	; 0x61e8 <xTaskGenericNotifyFromISR+0x136>
    61e6:	50 c0       	rjmp	.+160    	; 0x6288 <xTaskGenericNotifyFromISR+0x1d6>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    61e8:	80 91 bf 03 	lds	r24, 0x03BF
    61ec:	88 23       	and	r24, r24
    61ee:	61 f5       	brne	.+88     	; 0x6248 <xTaskGenericNotifyFromISR+0x196>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    61f0:	8c 81       	ldd	r24, Y+4	; 0x04
    61f2:	9d 81       	ldd	r25, Y+5	; 0x05
    61f4:	02 96       	adiw	r24, 0x02	; 2
    61f6:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    61fa:	ec 81       	ldd	r30, Y+4	; 0x04
    61fc:	fd 81       	ldd	r31, Y+5	; 0x05
    61fe:	96 89       	ldd	r25, Z+22	; 0x16
    6200:	80 91 b5 03 	lds	r24, 0x03B5
    6204:	89 17       	cp	r24, r25
    6206:	28 f4       	brcc	.+10     	; 0x6212 <xTaskGenericNotifyFromISR+0x160>
    6208:	ec 81       	ldd	r30, Y+4	; 0x04
    620a:	fd 81       	ldd	r31, Y+5	; 0x05
    620c:	86 89       	ldd	r24, Z+22	; 0x16
    620e:	80 93 b5 03 	sts	0x03B5, r24
    6212:	ec 81       	ldd	r30, Y+4	; 0x04
    6214:	fd 81       	ldd	r31, Y+5	; 0x05
    6216:	86 89       	ldd	r24, Z+22	; 0x16
    6218:	28 2f       	mov	r18, r24
    621a:	30 e0       	ldi	r19, 0x00	; 0
    621c:	c9 01       	movw	r24, r18
    621e:	88 0f       	add	r24, r24
    6220:	99 1f       	adc	r25, r25
    6222:	88 0f       	add	r24, r24
    6224:	99 1f       	adc	r25, r25
    6226:	88 0f       	add	r24, r24
    6228:	99 1f       	adc	r25, r25
    622a:	82 0f       	add	r24, r18
    622c:	93 1f       	adc	r25, r19
    622e:	ac 01       	movw	r20, r24
    6230:	40 54       	subi	r20, 0x40	; 64
    6232:	5c 4f       	sbci	r21, 0xFC	; 252
    6234:	8c 81       	ldd	r24, Y+4	; 0x04
    6236:	9d 81       	ldd	r25, Y+5	; 0x05
    6238:	9c 01       	movw	r18, r24
    623a:	2e 5f       	subi	r18, 0xFE	; 254
    623c:	3f 4f       	sbci	r19, 0xFF	; 255
    623e:	ca 01       	movw	r24, r20
    6240:	b9 01       	movw	r22, r18
    6242:	0e 94 14 17 	call	0x2e28	; 0x2e28 <vListInsertEnd>
    6246:	0a c0       	rjmp	.+20     	; 0x625c <xTaskGenericNotifyFromISR+0x1aa>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    6248:	8c 81       	ldd	r24, Y+4	; 0x04
    624a:	9d 81       	ldd	r25, Y+5	; 0x05
    624c:	9c 01       	movw	r18, r24
    624e:	24 5f       	subi	r18, 0xF4	; 244
    6250:	3f 4f       	sbci	r19, 0xFF	; 255
    6252:	83 e0       	ldi	r24, 0x03	; 3
    6254:	94 e0       	ldi	r25, 0x04	; 4
    6256:	b9 01       	movw	r22, r18
    6258:	0e 94 14 17 	call	0x2e28	; 0x2e28 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    625c:	ec 81       	ldd	r30, Y+4	; 0x04
    625e:	fd 81       	ldd	r31, Y+5	; 0x05
    6260:	96 89       	ldd	r25, Z+22	; 0x16
    6262:	e0 91 af 03 	lds	r30, 0x03AF
    6266:	f0 91 b0 03 	lds	r31, 0x03B0
    626a:	86 89       	ldd	r24, Z+22	; 0x16
    626c:	89 17       	cp	r24, r25
    626e:	60 f4       	brcc	.+24     	; 0x6288 <xTaskGenericNotifyFromISR+0x1d6>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    6270:	8f 85       	ldd	r24, Y+15	; 0x0f
    6272:	98 89       	ldd	r25, Y+16	; 0x10
    6274:	00 97       	sbiw	r24, 0x00	; 0
    6276:	29 f0       	breq	.+10     	; 0x6282 <xTaskGenericNotifyFromISR+0x1d0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    6278:	ef 85       	ldd	r30, Y+15	; 0x0f
    627a:	f8 89       	ldd	r31, Y+16	; 0x10
    627c:	81 e0       	ldi	r24, 0x01	; 1
    627e:	80 83       	st	Z, r24
    6280:	03 c0       	rjmp	.+6      	; 0x6288 <xTaskGenericNotifyFromISR+0x1d6>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    6282:	81 e0       	ldi	r24, 0x01	; 1
    6284:	80 93 b8 03 	sts	0x03B8, r24
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    6288:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    628a:	62 96       	adiw	r28, 0x12	; 18
    628c:	0f b6       	in	r0, 0x3f	; 63
    628e:	f8 94       	cli
    6290:	de bf       	out	0x3e, r29	; 62
    6292:	0f be       	out	0x3f, r0	; 63
    6294:	cd bf       	out	0x3d, r28	; 61
    6296:	cf 91       	pop	r28
    6298:	df 91       	pop	r29
    629a:	1f 91       	pop	r17
    629c:	0f 91       	pop	r16
    629e:	ff 90       	pop	r15
    62a0:	ef 90       	pop	r14
    62a2:	08 95       	ret

000062a4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    62a4:	df 93       	push	r29
    62a6:	cf 93       	push	r28
    62a8:	cd b7       	in	r28, 0x3d	; 61
    62aa:	de b7       	in	r29, 0x3e	; 62
    62ac:	28 97       	sbiw	r28, 0x08	; 8
    62ae:	0f b6       	in	r0, 0x3f	; 63
    62b0:	f8 94       	cli
    62b2:	de bf       	out	0x3e, r29	; 62
    62b4:	0f be       	out	0x3f, r0	; 63
    62b6:	cd bf       	out	0x3d, r28	; 61
    62b8:	9e 83       	std	Y+6, r25	; 0x06
    62ba:	8d 83       	std	Y+5, r24	; 0x05
    62bc:	78 87       	std	Y+8, r23	; 0x08
    62be:	6f 83       	std	Y+7, r22	; 0x07
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    62c0:	8d 81       	ldd	r24, Y+5	; 0x05
    62c2:	9e 81       	ldd	r25, Y+6	; 0x06
    62c4:	9c 83       	std	Y+4, r25	; 0x04
    62c6:	8b 83       	std	Y+3, r24	; 0x03

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    62c8:	19 82       	std	Y+1, r1	; 0x01
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    62ca:	eb 81       	ldd	r30, Y+3	; 0x03
    62cc:	fc 81       	ldd	r31, Y+4	; 0x04
    62ce:	81 a5       	ldd	r24, Z+41	; 0x29
    62d0:	8a 83       	std	Y+2, r24	; 0x02
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    62d2:	eb 81       	ldd	r30, Y+3	; 0x03
    62d4:	fc 81       	ldd	r31, Y+4	; 0x04
    62d6:	82 e0       	ldi	r24, 0x02	; 2
    62d8:	81 a7       	std	Z+41, r24	; 0x29

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    62da:	eb 81       	ldd	r30, Y+3	; 0x03
    62dc:	fc 81       	ldd	r31, Y+4	; 0x04
    62de:	85 a1       	ldd	r24, Z+37	; 0x25
    62e0:	96 a1       	ldd	r25, Z+38	; 0x26
    62e2:	a7 a1       	ldd	r26, Z+39	; 0x27
    62e4:	b0 a5       	ldd	r27, Z+40	; 0x28
    62e6:	01 96       	adiw	r24, 0x01	; 1
    62e8:	a1 1d       	adc	r26, r1
    62ea:	b1 1d       	adc	r27, r1
    62ec:	eb 81       	ldd	r30, Y+3	; 0x03
    62ee:	fc 81       	ldd	r31, Y+4	; 0x04
    62f0:	85 a3       	std	Z+37, r24	; 0x25
    62f2:	96 a3       	std	Z+38, r25	; 0x26
    62f4:	a7 a3       	std	Z+39, r26	; 0x27
    62f6:	b0 a7       	std	Z+40, r27	; 0x28

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    62f8:	8a 81       	ldd	r24, Y+2	; 0x02
    62fa:	81 30       	cpi	r24, 0x01	; 1
    62fc:	09 f0       	breq	.+2      	; 0x6300 <vTaskNotifyGiveFromISR+0x5c>
    62fe:	50 c0       	rjmp	.+160    	; 0x63a0 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    6300:	80 91 bf 03 	lds	r24, 0x03BF
    6304:	88 23       	and	r24, r24
    6306:	61 f5       	brne	.+88     	; 0x6360 <vTaskNotifyGiveFromISR+0xbc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    6308:	8b 81       	ldd	r24, Y+3	; 0x03
    630a:	9c 81       	ldd	r25, Y+4	; 0x04
    630c:	02 96       	adiw	r24, 0x02	; 2
    630e:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    6312:	eb 81       	ldd	r30, Y+3	; 0x03
    6314:	fc 81       	ldd	r31, Y+4	; 0x04
    6316:	96 89       	ldd	r25, Z+22	; 0x16
    6318:	80 91 b5 03 	lds	r24, 0x03B5
    631c:	89 17       	cp	r24, r25
    631e:	28 f4       	brcc	.+10     	; 0x632a <vTaskNotifyGiveFromISR+0x86>
    6320:	eb 81       	ldd	r30, Y+3	; 0x03
    6322:	fc 81       	ldd	r31, Y+4	; 0x04
    6324:	86 89       	ldd	r24, Z+22	; 0x16
    6326:	80 93 b5 03 	sts	0x03B5, r24
    632a:	eb 81       	ldd	r30, Y+3	; 0x03
    632c:	fc 81       	ldd	r31, Y+4	; 0x04
    632e:	86 89       	ldd	r24, Z+22	; 0x16
    6330:	28 2f       	mov	r18, r24
    6332:	30 e0       	ldi	r19, 0x00	; 0
    6334:	c9 01       	movw	r24, r18
    6336:	88 0f       	add	r24, r24
    6338:	99 1f       	adc	r25, r25
    633a:	88 0f       	add	r24, r24
    633c:	99 1f       	adc	r25, r25
    633e:	88 0f       	add	r24, r24
    6340:	99 1f       	adc	r25, r25
    6342:	82 0f       	add	r24, r18
    6344:	93 1f       	adc	r25, r19
    6346:	ac 01       	movw	r20, r24
    6348:	40 54       	subi	r20, 0x40	; 64
    634a:	5c 4f       	sbci	r21, 0xFC	; 252
    634c:	8b 81       	ldd	r24, Y+3	; 0x03
    634e:	9c 81       	ldd	r25, Y+4	; 0x04
    6350:	9c 01       	movw	r18, r24
    6352:	2e 5f       	subi	r18, 0xFE	; 254
    6354:	3f 4f       	sbci	r19, 0xFF	; 255
    6356:	ca 01       	movw	r24, r20
    6358:	b9 01       	movw	r22, r18
    635a:	0e 94 14 17 	call	0x2e28	; 0x2e28 <vListInsertEnd>
    635e:	0a c0       	rjmp	.+20     	; 0x6374 <vTaskNotifyGiveFromISR+0xd0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    6360:	8b 81       	ldd	r24, Y+3	; 0x03
    6362:	9c 81       	ldd	r25, Y+4	; 0x04
    6364:	9c 01       	movw	r18, r24
    6366:	24 5f       	subi	r18, 0xF4	; 244
    6368:	3f 4f       	sbci	r19, 0xFF	; 255
    636a:	83 e0       	ldi	r24, 0x03	; 3
    636c:	94 e0       	ldi	r25, 0x04	; 4
    636e:	b9 01       	movw	r22, r18
    6370:	0e 94 14 17 	call	0x2e28	; 0x2e28 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    6374:	eb 81       	ldd	r30, Y+3	; 0x03
    6376:	fc 81       	ldd	r31, Y+4	; 0x04
    6378:	96 89       	ldd	r25, Z+22	; 0x16
    637a:	e0 91 af 03 	lds	r30, 0x03AF
    637e:	f0 91 b0 03 	lds	r31, 0x03B0
    6382:	86 89       	ldd	r24, Z+22	; 0x16
    6384:	89 17       	cp	r24, r25
    6386:	60 f4       	brcc	.+24     	; 0x63a0 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    6388:	8f 81       	ldd	r24, Y+7	; 0x07
    638a:	98 85       	ldd	r25, Y+8	; 0x08
    638c:	00 97       	sbiw	r24, 0x00	; 0
    638e:	29 f0       	breq	.+10     	; 0x639a <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    6390:	ef 81       	ldd	r30, Y+7	; 0x07
    6392:	f8 85       	ldd	r31, Y+8	; 0x08
    6394:	81 e0       	ldi	r24, 0x01	; 1
    6396:	80 83       	st	Z, r24
    6398:	03 c0       	rjmp	.+6      	; 0x63a0 <vTaskNotifyGiveFromISR+0xfc>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    639a:	81 e0       	ldi	r24, 0x01	; 1
    639c:	80 93 b8 03 	sts	0x03B8, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    63a0:	28 96       	adiw	r28, 0x08	; 8
    63a2:	0f b6       	in	r0, 0x3f	; 63
    63a4:	f8 94       	cli
    63a6:	de bf       	out	0x3e, r29	; 62
    63a8:	0f be       	out	0x3f, r0	; 63
    63aa:	cd bf       	out	0x3d, r28	; 61
    63ac:	cf 91       	pop	r28
    63ae:	df 91       	pop	r29
    63b0:	08 95       	ret

000063b2 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
    63b2:	df 93       	push	r29
    63b4:	cf 93       	push	r28
    63b6:	cd b7       	in	r28, 0x3d	; 61
    63b8:	de b7       	in	r29, 0x3e	; 62
    63ba:	27 97       	sbiw	r28, 0x07	; 7
    63bc:	0f b6       	in	r0, 0x3f	; 63
    63be:	f8 94       	cli
    63c0:	de bf       	out	0x3e, r29	; 62
    63c2:	0f be       	out	0x3f, r0	; 63
    63c4:	cd bf       	out	0x3d, r28	; 61
    63c6:	9d 83       	std	Y+5, r25	; 0x05
    63c8:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    63ca:	8c 81       	ldd	r24, Y+4	; 0x04
    63cc:	9d 81       	ldd	r25, Y+5	; 0x05
    63ce:	00 97       	sbiw	r24, 0x00	; 0
    63d0:	39 f4       	brne	.+14     	; 0x63e0 <xTaskNotifyStateClear+0x2e>
    63d2:	80 91 af 03 	lds	r24, 0x03AF
    63d6:	90 91 b0 03 	lds	r25, 0x03B0
    63da:	9f 83       	std	Y+7, r25	; 0x07
    63dc:	8e 83       	std	Y+6, r24	; 0x06
    63de:	04 c0       	rjmp	.+8      	; 0x63e8 <xTaskNotifyStateClear+0x36>
    63e0:	8c 81       	ldd	r24, Y+4	; 0x04
    63e2:	9d 81       	ldd	r25, Y+5	; 0x05
    63e4:	9f 83       	std	Y+7, r25	; 0x07
    63e6:	8e 83       	std	Y+6, r24	; 0x06
    63e8:	8e 81       	ldd	r24, Y+6	; 0x06
    63ea:	9f 81       	ldd	r25, Y+7	; 0x07
    63ec:	9b 83       	std	Y+3, r25	; 0x03
    63ee:	8a 83       	std	Y+2, r24	; 0x02

		taskENTER_CRITICAL();
    63f0:	0f b6       	in	r0, 0x3f	; 63
    63f2:	f8 94       	cli
    63f4:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    63f6:	ea 81       	ldd	r30, Y+2	; 0x02
    63f8:	fb 81       	ldd	r31, Y+3	; 0x03
    63fa:	81 a5       	ldd	r24, Z+41	; 0x29
    63fc:	82 30       	cpi	r24, 0x02	; 2
    63fe:	31 f4       	brne	.+12     	; 0x640c <xTaskNotifyStateClear+0x5a>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    6400:	ea 81       	ldd	r30, Y+2	; 0x02
    6402:	fb 81       	ldd	r31, Y+3	; 0x03
    6404:	11 a6       	std	Z+41, r1	; 0x29
				xReturn = pdPASS;
    6406:	81 e0       	ldi	r24, 0x01	; 1
    6408:	89 83       	std	Y+1, r24	; 0x01
    640a:	01 c0       	rjmp	.+2      	; 0x640e <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
    640c:	19 82       	std	Y+1, r1	; 0x01
			}
		}
		taskEXIT_CRITICAL();
    640e:	0f 90       	pop	r0
    6410:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    6412:	89 81       	ldd	r24, Y+1	; 0x01
	}
    6414:	27 96       	adiw	r28, 0x07	; 7
    6416:	0f b6       	in	r0, 0x3f	; 63
    6418:	f8 94       	cli
    641a:	de bf       	out	0x3e, r29	; 62
    641c:	0f be       	out	0x3f, r0	; 63
    641e:	cd bf       	out	0x3d, r28	; 61
    6420:	cf 91       	pop	r28
    6422:	df 91       	pop	r29
    6424:	08 95       	ret

00006426 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    6426:	df 93       	push	r29
    6428:	cf 93       	push	r28
    642a:	cd b7       	in	r28, 0x3d	; 61
    642c:	de b7       	in	r29, 0x3e	; 62
    642e:	27 97       	sbiw	r28, 0x07	; 7
    6430:	0f b6       	in	r0, 0x3f	; 63
    6432:	f8 94       	cli
    6434:	de bf       	out	0x3e, r29	; 62
    6436:	0f be       	out	0x3f, r0	; 63
    6438:	cd bf       	out	0x3d, r28	; 61
    643a:	9e 83       	std	Y+6, r25	; 0x06
    643c:	8d 83       	std	Y+5, r24	; 0x05
    643e:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    6440:	80 91 b3 03 	lds	r24, 0x03B3
    6444:	90 91 b4 03 	lds	r25, 0x03B4
    6448:	9a 83       	std	Y+2, r25	; 0x02
    644a:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    644c:	80 91 af 03 	lds	r24, 0x03AF
    6450:	90 91 b0 03 	lds	r25, 0x03B0
    6454:	02 96       	adiw	r24, 0x02	; 2
    6456:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    645a:	8d 81       	ldd	r24, Y+5	; 0x05
    645c:	9e 81       	ldd	r25, Y+6	; 0x06
    645e:	2f ef       	ldi	r18, 0xFF	; 255
    6460:	8f 3f       	cpi	r24, 0xFF	; 255
    6462:	92 07       	cpc	r25, r18
    6464:	81 f4       	brne	.+32     	; 0x6486 <prvAddCurrentTaskToDelayedList+0x60>
    6466:	8f 81       	ldd	r24, Y+7	; 0x07
    6468:	88 23       	and	r24, r24
    646a:	69 f0       	breq	.+26     	; 0x6486 <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    646c:	80 91 af 03 	lds	r24, 0x03AF
    6470:	90 91 b0 03 	lds	r25, 0x03B0
    6474:	9c 01       	movw	r18, r24
    6476:	2e 5f       	subi	r18, 0xFE	; 254
    6478:	3f 4f       	sbci	r19, 0xFF	; 255
    647a:	85 e1       	ldi	r24, 0x15	; 21
    647c:	94 e0       	ldi	r25, 0x04	; 4
    647e:	b9 01       	movw	r22, r18
    6480:	0e 94 14 17 	call	0x2e28	; 0x2e28 <vListInsertEnd>
    6484:	43 c0       	rjmp	.+134    	; 0x650c <prvAddCurrentTaskToDelayedList+0xe6>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    6486:	29 81       	ldd	r18, Y+1	; 0x01
    6488:	3a 81       	ldd	r19, Y+2	; 0x02
    648a:	8d 81       	ldd	r24, Y+5	; 0x05
    648c:	9e 81       	ldd	r25, Y+6	; 0x06
    648e:	82 0f       	add	r24, r18
    6490:	93 1f       	adc	r25, r19
    6492:	9c 83       	std	Y+4, r25	; 0x04
    6494:	8b 83       	std	Y+3, r24	; 0x03

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    6496:	e0 91 af 03 	lds	r30, 0x03AF
    649a:	f0 91 b0 03 	lds	r31, 0x03B0
    649e:	8b 81       	ldd	r24, Y+3	; 0x03
    64a0:	9c 81       	ldd	r25, Y+4	; 0x04
    64a2:	93 83       	std	Z+3, r25	; 0x03
    64a4:	82 83       	std	Z+2, r24	; 0x02

			if( xTimeToWake < xConstTickCount )
    64a6:	2b 81       	ldd	r18, Y+3	; 0x03
    64a8:	3c 81       	ldd	r19, Y+4	; 0x04
    64aa:	89 81       	ldd	r24, Y+1	; 0x01
    64ac:	9a 81       	ldd	r25, Y+2	; 0x02
    64ae:	28 17       	cp	r18, r24
    64b0:	39 07       	cpc	r19, r25
    64b2:	70 f4       	brcc	.+28     	; 0x64d0 <prvAddCurrentTaskToDelayedList+0xaa>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    64b4:	80 91 01 04 	lds	r24, 0x0401
    64b8:	90 91 02 04 	lds	r25, 0x0402
    64bc:	20 91 af 03 	lds	r18, 0x03AF
    64c0:	30 91 b0 03 	lds	r19, 0x03B0
    64c4:	2e 5f       	subi	r18, 0xFE	; 254
    64c6:	3f 4f       	sbci	r19, 0xFF	; 255
    64c8:	b9 01       	movw	r22, r18
    64ca:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <vListInsert>
    64ce:	1e c0       	rjmp	.+60     	; 0x650c <prvAddCurrentTaskToDelayedList+0xe6>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    64d0:	40 91 ff 03 	lds	r20, 0x03FF
    64d4:	50 91 00 04 	lds	r21, 0x0400
    64d8:	80 91 af 03 	lds	r24, 0x03AF
    64dc:	90 91 b0 03 	lds	r25, 0x03B0
    64e0:	9c 01       	movw	r18, r24
    64e2:	2e 5f       	subi	r18, 0xFE	; 254
    64e4:	3f 4f       	sbci	r19, 0xFF	; 255
    64e6:	ca 01       	movw	r24, r20
    64e8:	b9 01       	movw	r22, r18
    64ea:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    64ee:	20 91 bb 03 	lds	r18, 0x03BB
    64f2:	30 91 bc 03 	lds	r19, 0x03BC
    64f6:	8b 81       	ldd	r24, Y+3	; 0x03
    64f8:	9c 81       	ldd	r25, Y+4	; 0x04
    64fa:	82 17       	cp	r24, r18
    64fc:	93 07       	cpc	r25, r19
    64fe:	30 f4       	brcc	.+12     	; 0x650c <prvAddCurrentTaskToDelayedList+0xe6>
				{
					xNextTaskUnblockTime = xTimeToWake;
    6500:	8b 81       	ldd	r24, Y+3	; 0x03
    6502:	9c 81       	ldd	r25, Y+4	; 0x04
    6504:	90 93 bc 03 	sts	0x03BC, r25
    6508:	80 93 bb 03 	sts	0x03BB, r24

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    650c:	27 96       	adiw	r28, 0x07	; 7
    650e:	0f b6       	in	r0, 0x3f	; 63
    6510:	f8 94       	cli
    6512:	de bf       	out	0x3e, r29	; 62
    6514:	0f be       	out	0x3f, r0	; 63
    6516:	cd bf       	out	0x3d, r28	; 61
    6518:	cf 91       	pop	r28
    651a:	df 91       	pop	r29
    651c:	08 95       	ret

0000651e <__prologue_saves__>:
    651e:	2f 92       	push	r2
    6520:	3f 92       	push	r3
    6522:	4f 92       	push	r4
    6524:	5f 92       	push	r5
    6526:	6f 92       	push	r6
    6528:	7f 92       	push	r7
    652a:	8f 92       	push	r8
    652c:	9f 92       	push	r9
    652e:	af 92       	push	r10
    6530:	bf 92       	push	r11
    6532:	cf 92       	push	r12
    6534:	df 92       	push	r13
    6536:	ef 92       	push	r14
    6538:	ff 92       	push	r15
    653a:	0f 93       	push	r16
    653c:	1f 93       	push	r17
    653e:	cf 93       	push	r28
    6540:	df 93       	push	r29
    6542:	cd b7       	in	r28, 0x3d	; 61
    6544:	de b7       	in	r29, 0x3e	; 62
    6546:	ca 1b       	sub	r28, r26
    6548:	db 0b       	sbc	r29, r27
    654a:	0f b6       	in	r0, 0x3f	; 63
    654c:	f8 94       	cli
    654e:	de bf       	out	0x3e, r29	; 62
    6550:	0f be       	out	0x3f, r0	; 63
    6552:	cd bf       	out	0x3d, r28	; 61
    6554:	09 94       	ijmp

00006556 <__epilogue_restores__>:
    6556:	2a 88       	ldd	r2, Y+18	; 0x12
    6558:	39 88       	ldd	r3, Y+17	; 0x11
    655a:	48 88       	ldd	r4, Y+16	; 0x10
    655c:	5f 84       	ldd	r5, Y+15	; 0x0f
    655e:	6e 84       	ldd	r6, Y+14	; 0x0e
    6560:	7d 84       	ldd	r7, Y+13	; 0x0d
    6562:	8c 84       	ldd	r8, Y+12	; 0x0c
    6564:	9b 84       	ldd	r9, Y+11	; 0x0b
    6566:	aa 84       	ldd	r10, Y+10	; 0x0a
    6568:	b9 84       	ldd	r11, Y+9	; 0x09
    656a:	c8 84       	ldd	r12, Y+8	; 0x08
    656c:	df 80       	ldd	r13, Y+7	; 0x07
    656e:	ee 80       	ldd	r14, Y+6	; 0x06
    6570:	fd 80       	ldd	r15, Y+5	; 0x05
    6572:	0c 81       	ldd	r16, Y+4	; 0x04
    6574:	1b 81       	ldd	r17, Y+3	; 0x03
    6576:	aa 81       	ldd	r26, Y+2	; 0x02
    6578:	b9 81       	ldd	r27, Y+1	; 0x01
    657a:	ce 0f       	add	r28, r30
    657c:	d1 1d       	adc	r29, r1
    657e:	0f b6       	in	r0, 0x3f	; 63
    6580:	f8 94       	cli
    6582:	de bf       	out	0x3e, r29	; 62
    6584:	0f be       	out	0x3f, r0	; 63
    6586:	cd bf       	out	0x3d, r28	; 61
    6588:	ed 01       	movw	r28, r26
    658a:	08 95       	ret

0000658c <memcpy>:
    658c:	fb 01       	movw	r30, r22
    658e:	dc 01       	movw	r26, r24
    6590:	02 c0       	rjmp	.+4      	; 0x6596 <memcpy+0xa>
    6592:	01 90       	ld	r0, Z+
    6594:	0d 92       	st	X+, r0
    6596:	41 50       	subi	r20, 0x01	; 1
    6598:	50 40       	sbci	r21, 0x00	; 0
    659a:	d8 f7       	brcc	.-10     	; 0x6592 <memcpy+0x6>
    659c:	08 95       	ret

0000659e <_exit>:
    659e:	f8 94       	cli

000065a0 <__stop_program>:
    65a0:	ff cf       	rjmp	.-2      	; 0x65a0 <__stop_program>
