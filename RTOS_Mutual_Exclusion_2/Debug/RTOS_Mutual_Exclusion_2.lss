
RTOS_Mutual_Exclusion_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005484  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00005484  00005518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003bc  00800076  00800076  0000552e  2**0
                  ALLOC
  3 .stab         00006d5c  00000000  00000000  00005530  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000037a4  00000000  00000000  0000c28c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000fa30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000fb70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000fce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00011929  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00012814  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000135c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00013724  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000139b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001417f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 40 13 	jmp	0x2680	; 0x2680 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	f4 e5       	ldi	r31, 0x54	; 84
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 33       	cpi	r26, 0x32	; 50
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <main>
      8a:	0c 94 40 2a 	jmp	0x5480	; 0x5480 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 00 2a 	jmp	0x5400	; 0x5400 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e6       	ldi	r26, 0x69	; 105
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1c 2a 	jmp	0x5438	; 0x5438 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0c 2a 	jmp	0x5418	; 0x5418 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0c 2a 	jmp	0x5418	; 0x5418 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 00 2a 	jmp	0x5400	; 0x5400 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e6       	ldi	r24, 0x69	; 105
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1c 2a 	jmp	0x5438	; 0x5438 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0c 2a 	jmp	0x5418	; 0x5418 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0c 2a 	jmp	0x5418	; 0x5418 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0c 2a 	jmp	0x5418	; 0x5418 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 28 2a 	jmp	0x5450	; 0x5450 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 10 2a 	jmp	0x5420	; 0x5420 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2c 2a 	jmp	0x5458	; 0x5458 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_vsetPINDir>:




void DIO_vsetPINDir(char portname,char pinnumber,char direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_vsetPINDir+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_vsetPINDir+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	82 34       	cpi	r24, 0x42	; 66
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <DIO_vsetPINDir+0x2a>
     b6e:	44 c0       	rjmp	.+136    	; 0xbf8 <DIO_vsetPINDir+0xb2>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	23 34       	cpi	r18, 0x43	; 67
     b76:	31 05       	cpc	r19, r1
     b78:	34 f4       	brge	.+12     	; 0xb86 <DIO_vsetPINDir+0x40>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	81 34       	cpi	r24, 0x41	; 65
     b80:	91 05       	cpc	r25, r1
     b82:	71 f0       	breq	.+28     	; 0xba0 <DIO_vsetPINDir+0x5a>
     b84:	bc c0       	rjmp	.+376    	; 0xcfe <DIO_vsetPINDir+0x1b8>
     b86:	2c 81       	ldd	r18, Y+4	; 0x04
     b88:	3d 81       	ldd	r19, Y+5	; 0x05
     b8a:	23 34       	cpi	r18, 0x43	; 67
     b8c:	31 05       	cpc	r19, r1
     b8e:	09 f4       	brne	.+2      	; 0xb92 <DIO_vsetPINDir+0x4c>
     b90:	5f c0       	rjmp	.+190    	; 0xc50 <DIO_vsetPINDir+0x10a>
     b92:	8c 81       	ldd	r24, Y+4	; 0x04
     b94:	9d 81       	ldd	r25, Y+5	; 0x05
     b96:	84 34       	cpi	r24, 0x44	; 68
     b98:	91 05       	cpc	r25, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <DIO_vsetPINDir+0x58>
     b9c:	85 c0       	rjmp	.+266    	; 0xca8 <DIO_vsetPINDir+0x162>
     b9e:	af c0       	rjmp	.+350    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	{
		
	
	case 'A':
	if(direction==1)
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	a1 f4       	brne	.+40     	; 0xbce <DIO_vsetPINDir+0x88>
	{
		DDRA|=(1<<pinnumber);
     ba6:	aa e3       	ldi	r26, 0x3A	; 58
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e3       	ldi	r30, 0x3A	; 58
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_vsetPINDir+0x7e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_vsetPINDir+0x7a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	98 c0       	rjmp	.+304    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	else
	{
		DDRA&=(~(1<<pinnumber));
     bce:	aa e3       	ldi	r26, 0x3A	; 58
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	ea e3       	ldi	r30, 0x3A	; 58
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_vsetPINDir+0xa6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_vsetPINDir+0xa2>
     bf0:	80 95       	com	r24
     bf2:	84 23       	and	r24, r20
     bf4:	8c 93       	st	X, r24
     bf6:	83 c0       	rjmp	.+262    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	break;
	case 'B':
	if(direction==1)
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	a1 f4       	brne	.+40     	; 0xc26 <DIO_vsetPINDir+0xe0>
	{
		DDRB|=(1<<pinnumber);
     bfe:	a7 e3       	ldi	r26, 0x37	; 55
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e7 e3       	ldi	r30, 0x37	; 55
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	48 2f       	mov	r20, r24
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	02 2e       	mov	r0, r18
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <DIO_vsetPINDir+0xd6>
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	0a 94       	dec	r0
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <DIO_vsetPINDir+0xd2>
     c20:	84 2b       	or	r24, r20
     c22:	8c 93       	st	X, r24
     c24:	6c c0       	rjmp	.+216    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	else
	{
		DDRB&=(~(1<<pinnumber));
     c26:	a7 e3       	ldi	r26, 0x37	; 55
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e7 e3       	ldi	r30, 0x37	; 55
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	48 2f       	mov	r20, r24
     c32:	8a 81       	ldd	r24, Y+2	; 0x02
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	02 2e       	mov	r0, r18
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_vsetPINDir+0xfe>
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <DIO_vsetPINDir+0xfa>
     c48:	80 95       	com	r24
     c4a:	84 23       	and	r24, r20
     c4c:	8c 93       	st	X, r24
     c4e:	57 c0       	rjmp	.+174    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	break;
	case 'C':
	if(direction==1)
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	a1 f4       	brne	.+40     	; 0xc7e <DIO_vsetPINDir+0x138>
	{
		DDRC|=(1<<pinnumber);
     c56:	a4 e3       	ldi	r26, 0x34	; 52
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e4 e3       	ldi	r30, 0x34	; 52
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	48 2f       	mov	r20, r24
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 2e       	mov	r0, r18
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <DIO_vsetPINDir+0x12e>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	0a 94       	dec	r0
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <DIO_vsetPINDir+0x12a>
     c78:	84 2b       	or	r24, r20
     c7a:	8c 93       	st	X, r24
     c7c:	40 c0       	rjmp	.+128    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	else
	{
		DDRC&=(~(1<<pinnumber));
     c7e:	a4 e3       	ldi	r26, 0x34	; 52
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e4 e3       	ldi	r30, 0x34	; 52
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	48 2f       	mov	r20, r24
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	02 2e       	mov	r0, r18
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <DIO_vsetPINDir+0x156>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	0a 94       	dec	r0
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <DIO_vsetPINDir+0x152>
     ca0:	80 95       	com	r24
     ca2:	84 23       	and	r24, r20
     ca4:	8c 93       	st	X, r24
     ca6:	2b c0       	rjmp	.+86     	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	break;
	case 'D':
	if(direction==1)
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	a1 f4       	brne	.+40     	; 0xcd6 <DIO_vsetPINDir+0x190>
	{
		DDRD|=(1<<pinnumber);
     cae:	a1 e3       	ldi	r26, 0x31	; 49
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e1 e3       	ldi	r30, 0x31	; 49
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	48 2f       	mov	r20, r24
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 2e       	mov	r0, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <DIO_vsetPINDir+0x186>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	0a 94       	dec	r0
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <DIO_vsetPINDir+0x182>
     cd0:	84 2b       	or	r24, r20
     cd2:	8c 93       	st	X, r24
     cd4:	14 c0       	rjmp	.+40     	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	else
	{
		DDRD&=(~(1<<pinnumber));
     cd6:	a1 e3       	ldi	r26, 0x31	; 49
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e1 e3       	ldi	r30, 0x31	; 49
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 2e       	mov	r0, r18
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <DIO_vsetPINDir+0x1ae>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <DIO_vsetPINDir+0x1aa>
     cf8:	80 95       	com	r24
     cfa:	84 23       	and	r24, r20
     cfc:	8c 93       	st	X, r24
	}
	break;
	default: break;
	}	
}
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <DIO_write>:


void DIO_write(char portname,char pinnumber,char outputvalue)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <DIO_write+0x6>
     d14:	00 d0       	rcall	.+0      	; 0xd16 <DIO_write+0x8>
     d16:	0f 92       	push	r0
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	89 83       	std	Y+1, r24	; 0x01
     d1e:	6a 83       	std	Y+2, r22	; 0x02
     d20:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	3d 83       	std	Y+5, r19	; 0x05
     d2a:	2c 83       	std	Y+4, r18	; 0x04
     d2c:	8c 81       	ldd	r24, Y+4	; 0x04
     d2e:	9d 81       	ldd	r25, Y+5	; 0x05
     d30:	82 34       	cpi	r24, 0x42	; 66
     d32:	91 05       	cpc	r25, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <DIO_write+0x2a>
     d36:	44 c0       	rjmp	.+136    	; 0xdc0 <DIO_write+0xb2>
     d38:	2c 81       	ldd	r18, Y+4	; 0x04
     d3a:	3d 81       	ldd	r19, Y+5	; 0x05
     d3c:	23 34       	cpi	r18, 0x43	; 67
     d3e:	31 05       	cpc	r19, r1
     d40:	34 f4       	brge	.+12     	; 0xd4e <DIO_write+0x40>
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	9d 81       	ldd	r25, Y+5	; 0x05
     d46:	81 34       	cpi	r24, 0x41	; 65
     d48:	91 05       	cpc	r25, r1
     d4a:	71 f0       	breq	.+28     	; 0xd68 <DIO_write+0x5a>
     d4c:	bc c0       	rjmp	.+376    	; 0xec6 <DIO_write+0x1b8>
     d4e:	2c 81       	ldd	r18, Y+4	; 0x04
     d50:	3d 81       	ldd	r19, Y+5	; 0x05
     d52:	23 34       	cpi	r18, 0x43	; 67
     d54:	31 05       	cpc	r19, r1
     d56:	09 f4       	brne	.+2      	; 0xd5a <DIO_write+0x4c>
     d58:	5f c0       	rjmp	.+190    	; 0xe18 <DIO_write+0x10a>
     d5a:	8c 81       	ldd	r24, Y+4	; 0x04
     d5c:	9d 81       	ldd	r25, Y+5	; 0x05
     d5e:	84 34       	cpi	r24, 0x44	; 68
     d60:	91 05       	cpc	r25, r1
     d62:	09 f4       	brne	.+2      	; 0xd66 <DIO_write+0x58>
     d64:	85 c0       	rjmp	.+266    	; 0xe70 <DIO_write+0x162>
     d66:	af c0       	rjmp	.+350    	; 0xec6 <DIO_write+0x1b8>
	{
		case 'A' :
		
			if(outputvalue==1)
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	a1 f4       	brne	.+40     	; 0xd96 <DIO_write+0x88>
			{
				PORTA|=(1<<pinnumber);
     d6e:	ab e3       	ldi	r26, 0x3B	; 59
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	eb e3       	ldi	r30, 0x3B	; 59
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 2e       	mov	r0, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <DIO_write+0x7e>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <DIO_write+0x7a>
     d90:	84 2b       	or	r24, r20
     d92:	8c 93       	st	X, r24
     d94:	98 c0       	rjmp	.+304    	; 0xec6 <DIO_write+0x1b8>
			}
			else
			{
				PORTA&=(~(1<<pinnumber));
     d96:	ab e3       	ldi	r26, 0x3B	; 59
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	eb e3       	ldi	r30, 0x3B	; 59
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <DIO_write+0xa6>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <DIO_write+0xa2>
     db8:	80 95       	com	r24
     dba:	84 23       	and	r24, r20
     dbc:	8c 93       	st	X, r24
     dbe:	83 c0       	rjmp	.+262    	; 0xec6 <DIO_write+0x1b8>
			}
			break ;
			case 'B':
			
			if(outputvalue==1)
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	a1 f4       	brne	.+40     	; 0xdee <DIO_write+0xe0>
			{
				PORTB|=(1<<pinnumber);
     dc6:	a8 e3       	ldi	r26, 0x38	; 56
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e3       	ldi	r30, 0x38	; 56
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	48 2f       	mov	r20, r24
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 2e       	mov	r0, r18
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <DIO_write+0xd6>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	0a 94       	dec	r0
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <DIO_write+0xd2>
     de8:	84 2b       	or	r24, r20
     dea:	8c 93       	st	X, r24
     dec:	6c c0       	rjmp	.+216    	; 0xec6 <DIO_write+0x1b8>
			}
			else
			{
				PORTB&=(~(1<<pinnumber));
     dee:	a8 e3       	ldi	r26, 0x38	; 56
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e8 e3       	ldi	r30, 0x38	; 56
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	48 2f       	mov	r20, r24
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 2e       	mov	r0, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_write+0xfe>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_write+0xfa>
     e10:	80 95       	com	r24
     e12:	84 23       	and	r24, r20
     e14:	8c 93       	st	X, r24
     e16:	57 c0       	rjmp	.+174    	; 0xec6 <DIO_write+0x1b8>
			}
			break ;
			case 'C' :
			
			if(outputvalue==1)
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	a1 f4       	brne	.+40     	; 0xe46 <DIO_write+0x138>
			{
				PORTC|=(1<<pinnumber);
     e1e:	a5 e3       	ldi	r26, 0x35	; 53
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e5 e3       	ldi	r30, 0x35	; 53
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_write+0x12e>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_write+0x12a>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	40 c0       	rjmp	.+128    	; 0xec6 <DIO_write+0x1b8>
			}
			else
			{
				PORTC&=(~(1<<pinnumber));
     e46:	a5 e3       	ldi	r26, 0x35	; 53
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e5 e3       	ldi	r30, 0x35	; 53
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <DIO_write+0x156>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <DIO_write+0x152>
     e68:	80 95       	com	r24
     e6a:	84 23       	and	r24, r20
     e6c:	8c 93       	st	X, r24
     e6e:	2b c0       	rjmp	.+86     	; 0xec6 <DIO_write+0x1b8>
			}
			break ;
		case 'D':
		
		if(outputvalue==1)
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	a1 f4       	brne	.+40     	; 0xe9e <DIO_write+0x190>
		{
			PORTD|=(1<<pinnumber);
     e76:	a2 e3       	ldi	r26, 0x32	; 50
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e2 e3       	ldi	r30, 0x32	; 50
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_write+0x186>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_write+0x182>
     e98:	84 2b       	or	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	14 c0       	rjmp	.+40     	; 0xec6 <DIO_write+0x1b8>
		}
		else
	{
			PORTD&=(~(1<<pinnumber));
     e9e:	a2 e3       	ldi	r26, 0x32	; 50
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e2 e3       	ldi	r30, 0x32	; 50
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DIO_write+0x1ae>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <DIO_write+0x1aa>
     ec0:	80 95       	com	r24
     ec2:	84 23       	and	r24, r20
     ec4:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <DIO_u8read>:


char DIO_u8read(char portname,char pinnumber)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	00 d0       	rcall	.+0      	; 0xedc <DIO_u8read+0x6>
     edc:	00 d0       	rcall	.+0      	; 0xede <DIO_u8read+0x8>
     ede:	0f 92       	push	r0
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	8a 83       	std	Y+2, r24	; 0x02
     ee6:	6b 83       	std	Y+3, r22	; 0x03
	char x ;
	switch(portname)
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	3d 83       	std	Y+5, r19	; 0x05
     ef0:	2c 83       	std	Y+4, r18	; 0x04
     ef2:	4c 81       	ldd	r20, Y+4	; 0x04
     ef4:	5d 81       	ldd	r21, Y+5	; 0x05
     ef6:	42 34       	cpi	r20, 0x42	; 66
     ef8:	51 05       	cpc	r21, r1
     efa:	b1 f1       	breq	.+108    	; 0xf68 <DIO_u8read+0x92>
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	9d 81       	ldd	r25, Y+5	; 0x05
     f00:	83 34       	cpi	r24, 0x43	; 67
     f02:	91 05       	cpc	r25, r1
     f04:	34 f4       	brge	.+12     	; 0xf12 <DIO_u8read+0x3c>
     f06:	2c 81       	ldd	r18, Y+4	; 0x04
     f08:	3d 81       	ldd	r19, Y+5	; 0x05
     f0a:	21 34       	cpi	r18, 0x41	; 65
     f0c:	31 05       	cpc	r19, r1
     f0e:	71 f0       	breq	.+28     	; 0xf2c <DIO_u8read+0x56>
     f10:	84 c0       	rjmp	.+264    	; 0x101a <DIO_u8read+0x144>
     f12:	4c 81       	ldd	r20, Y+4	; 0x04
     f14:	5d 81       	ldd	r21, Y+5	; 0x05
     f16:	43 34       	cpi	r20, 0x43	; 67
     f18:	51 05       	cpc	r21, r1
     f1a:	09 f4       	brne	.+2      	; 0xf1e <DIO_u8read+0x48>
     f1c:	43 c0       	rjmp	.+134    	; 0xfa4 <DIO_u8read+0xce>
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	9d 81       	ldd	r25, Y+5	; 0x05
     f22:	84 34       	cpi	r24, 0x44	; 68
     f24:	91 05       	cpc	r25, r1
     f26:	09 f4       	brne	.+2      	; 0xf2a <DIO_u8read+0x54>
     f28:	5b c0       	rjmp	.+182    	; 0xfe0 <DIO_u8read+0x10a>
     f2a:	77 c0       	rjmp	.+238    	; 0x101a <DIO_u8read+0x144>
	{
		case 'A' :
		x=((PINA&(1<<pinnumber))>>pinnumber);
     f2c:	e9 e3       	ldi	r30, 0x39	; 57
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <DIO_u8read+0x70>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	2a 95       	dec	r18
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <DIO_u8read+0x6c>
     f4a:	9a 01       	movw	r18, r20
     f4c:	28 23       	and	r18, r24
     f4e:	39 23       	and	r19, r25
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	a9 01       	movw	r20, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_u8read+0x88>
     f5a:	55 95       	asr	r21
     f5c:	47 95       	ror	r20
     f5e:	8a 95       	dec	r24
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_u8read+0x84>
     f62:	ca 01       	movw	r24, r20
     f64:	89 83       	std	Y+1, r24	; 0x01
     f66:	59 c0       	rjmp	.+178    	; 0x101a <DIO_u8read+0x144>
		break;
		
	case 'B' :
	x=((PINB&(1<<pinnumber))>>pinnumber) ;
     f68:	e6 e3       	ldi	r30, 0x36	; 54
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <DIO_u8read+0xac>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	2a 95       	dec	r18
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <DIO_u8read+0xa8>
     f86:	9a 01       	movw	r18, r20
     f88:	28 23       	and	r18, r24
     f8a:	39 23       	and	r19, r25
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	a9 01       	movw	r20, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_u8read+0xc4>
     f96:	55 95       	asr	r21
     f98:	47 95       	ror	r20
     f9a:	8a 95       	dec	r24
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_u8read+0xc0>
     f9e:	ca 01       	movw	r24, r20
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	3b c0       	rjmp	.+118    	; 0x101a <DIO_u8read+0x144>
	break;
	
	case 'C' :
	x=((PINC&(1<<pinnumber))>>pinnumber) ;
     fa4:	e3 e3       	ldi	r30, 0x33	; 51
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_u8read+0xe8>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	2a 95       	dec	r18
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_u8read+0xe4>
     fc2:	9a 01       	movw	r18, r20
     fc4:	28 23       	and	r18, r24
     fc6:	39 23       	and	r19, r25
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a9 01       	movw	r20, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_u8read+0x100>
     fd2:	55 95       	asr	r21
     fd4:	47 95       	ror	r20
     fd6:	8a 95       	dec	r24
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_u8read+0xfc>
     fda:	ca 01       	movw	r24, r20
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	1d c0       	rjmp	.+58     	; 0x101a <DIO_u8read+0x144>
	break;
	
	case 'D' :
	x=((PIND&(1<<pinnumber))>>pinnumber) ;
     fe0:	e0 e3       	ldi	r30, 0x30	; 48
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_u8read+0x124>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	2a 95       	dec	r18
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_u8read+0x120>
     ffe:	9a 01       	movw	r18, r20
    1000:	28 23       	and	r18, r24
    1002:	39 23       	and	r19, r25
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	88 2f       	mov	r24, r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a9 01       	movw	r20, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_u8read+0x13c>
    100e:	55 95       	asr	r21
    1010:	47 95       	ror	r20
    1012:	8a 95       	dec	r24
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_u8read+0x138>
    1016:	ca 01       	movw	r24, r20
    1018:	89 83       	std	Y+1, r24	; 0x01
	break;
	default: break;
}
return x ;
    101a:	89 81       	ldd	r24, Y+1	; 0x01
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <DIO_toggle>:
void DIO_toggle(char portname,char pinnumber)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	00 d0       	rcall	.+0      	; 0x1032 <DIO_toggle+0x6>
    1032:	00 d0       	rcall	.+0      	; 0x1034 <DIO_toggle+0x8>
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	89 83       	std	Y+1, r24	; 0x01
    103a:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	3c 83       	std	Y+4, r19	; 0x04
    1044:	2b 83       	std	Y+3, r18	; 0x03
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	82 34       	cpi	r24, 0x42	; 66
    104c:	91 05       	cpc	r25, r1
    104e:	51 f1       	breq	.+84     	; 0x10a4 <DIO_toggle+0x78>
    1050:	2b 81       	ldd	r18, Y+3	; 0x03
    1052:	3c 81       	ldd	r19, Y+4	; 0x04
    1054:	23 34       	cpi	r18, 0x43	; 67
    1056:	31 05       	cpc	r19, r1
    1058:	34 f4       	brge	.+12     	; 0x1066 <DIO_toggle+0x3a>
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	9c 81       	ldd	r25, Y+4	; 0x04
    105e:	81 34       	cpi	r24, 0x41	; 65
    1060:	91 05       	cpc	r25, r1
    1062:	61 f0       	breq	.+24     	; 0x107c <DIO_toggle+0x50>
    1064:	5a c0       	rjmp	.+180    	; 0x111a <DIO_toggle+0xee>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	23 34       	cpi	r18, 0x43	; 67
    106c:	31 05       	cpc	r19, r1
    106e:	71 f1       	breq	.+92     	; 0x10cc <DIO_toggle+0xa0>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	84 34       	cpi	r24, 0x44	; 68
    1076:	91 05       	cpc	r25, r1
    1078:	e9 f1       	breq	.+122    	; 0x10f4 <DIO_toggle+0xc8>
    107a:	4f c0       	rjmp	.+158    	; 0x111a <DIO_toggle+0xee>
	{
		case 'A':
		PORTA^=(1<<pinnumber);
    107c:	ab e3       	ldi	r26, 0x3B	; 59
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	eb e3       	ldi	r30, 0x3B	; 59
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_toggle+0x6e>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_toggle+0x6a>
    109e:	84 27       	eor	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	3b c0       	rjmp	.+118    	; 0x111a <DIO_toggle+0xee>
		break;
		case 'B':
		PORTB^=(1<<pinnumber);
    10a4:	a8 e3       	ldi	r26, 0x38	; 56
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e8 e3       	ldi	r30, 0x38	; 56
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_toggle+0x96>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_toggle+0x92>
    10c6:	84 27       	eor	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	27 c0       	rjmp	.+78     	; 0x111a <DIO_toggle+0xee>
		break;
		case 'C':
		PORTC^=(1<<pinnumber);
    10cc:	a5 e3       	ldi	r26, 0x35	; 53
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e5 e3       	ldi	r30, 0x35	; 53
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_toggle+0xbe>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_toggle+0xba>
    10ee:	84 27       	eor	r24, r20
    10f0:	8c 93       	st	X, r24
    10f2:	13 c0       	rjmp	.+38     	; 0x111a <DIO_toggle+0xee>
		break;
		case 'D':
		PORTD^=(1<<pinnumber);
    10f4:	a2 e3       	ldi	r26, 0x32	; 50
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e2 e3       	ldi	r30, 0x32	; 50
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_toggle+0xe6>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_toggle+0xe2>
    1116:	84 27       	eor	r24, r20
    1118:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <DIO_write_port>:
void DIO_write_port(char portname,char portvalue)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	00 d0       	rcall	.+0      	; 0x112e <DIO_write_port+0x6>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <DIO_write_port+0x8>
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	89 83       	std	Y+1, r24	; 0x01
    1136:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	3c 83       	std	Y+4, r19	; 0x04
    1140:	2b 83       	std	Y+3, r18	; 0x03
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	9c 81       	ldd	r25, Y+4	; 0x04
    1146:	82 34       	cpi	r24, 0x42	; 66
    1148:	91 05       	cpc	r25, r1
    114a:	d9 f0       	breq	.+54     	; 0x1182 <DIO_write_port+0x5a>
    114c:	2b 81       	ldd	r18, Y+3	; 0x03
    114e:	3c 81       	ldd	r19, Y+4	; 0x04
    1150:	23 34       	cpi	r18, 0x43	; 67
    1152:	31 05       	cpc	r19, r1
    1154:	34 f4       	brge	.+12     	; 0x1162 <DIO_write_port+0x3a>
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	81 34       	cpi	r24, 0x41	; 65
    115c:	91 05       	cpc	r25, r1
    115e:	61 f0       	breq	.+24     	; 0x1178 <DIO_write_port+0x50>
    1160:	1e c0       	rjmp	.+60     	; 0x119e <DIO_write_port+0x76>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	23 34       	cpi	r18, 0x43	; 67
    1168:	31 05       	cpc	r19, r1
    116a:	81 f0       	breq	.+32     	; 0x118c <DIO_write_port+0x64>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	84 34       	cpi	r24, 0x44	; 68
    1172:	91 05       	cpc	r25, r1
    1174:	81 f0       	breq	.+32     	; 0x1196 <DIO_write_port+0x6e>
    1176:	13 c0       	rjmp	.+38     	; 0x119e <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue;
    1178:	eb e3       	ldi	r30, 0x3B	; 59
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	80 83       	st	Z, r24
    1180:	0e c0       	rjmp	.+28     	; 0x119e <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue;
    1182:	e8 e3       	ldi	r30, 0x38	; 56
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	80 83       	st	Z, r24
    118a:	09 c0       	rjmp	.+18     	; 0x119e <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue;
    118c:	e5 e3       	ldi	r30, 0x35	; 53
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	80 83       	st	Z, r24
    1194:	04 c0       	rjmp	.+8      	; 0x119e <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue;
    1196:	e2 e3       	ldi	r30, 0x32	; 50
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	80 83       	st	Z, r24
		break ;
		default: break ;
	}
}
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <dio_write_highnibble>:
void dio_write_highnibble(char portname,char value)
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <dio_write_highnibble+0x6>
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <dio_write_highnibble+0x8>
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	6a 83       	std	Y+2, r22	; 0x02
		switch(portname)
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	3c 83       	std	Y+4, r19	; 0x04
    11c4:	2b 83       	std	Y+3, r18	; 0x03
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	82 34       	cpi	r24, 0x42	; 66
    11cc:	91 05       	cpc	r25, r1
    11ce:	09 f1       	breq	.+66     	; 0x1212 <dio_write_highnibble+0x66>
    11d0:	2b 81       	ldd	r18, Y+3	; 0x03
    11d2:	3c 81       	ldd	r19, Y+4	; 0x04
    11d4:	23 34       	cpi	r18, 0x43	; 67
    11d6:	31 05       	cpc	r19, r1
    11d8:	34 f4       	brge	.+12     	; 0x11e6 <dio_write_highnibble+0x3a>
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	81 34       	cpi	r24, 0x41	; 65
    11e0:	91 05       	cpc	r25, r1
    11e2:	61 f0       	breq	.+24     	; 0x11fc <dio_write_highnibble+0x50>
    11e4:	36 c0       	rjmp	.+108    	; 0x1252 <dio_write_highnibble+0xa6>
    11e6:	2b 81       	ldd	r18, Y+3	; 0x03
    11e8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ea:	23 34       	cpi	r18, 0x43	; 67
    11ec:	31 05       	cpc	r19, r1
    11ee:	e1 f0       	breq	.+56     	; 0x1228 <dio_write_highnibble+0x7c>
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	84 34       	cpi	r24, 0x44	; 68
    11f6:	91 05       	cpc	r25, r1
    11f8:	11 f1       	breq	.+68     	; 0x123e <dio_write_highnibble+0x92>
    11fa:	2b c0       	rjmp	.+86     	; 0x1252 <dio_write_highnibble+0xa6>
		{
			case 'A' :
			PORTA|=(value&0xf0);
    11fc:	ab e3       	ldi	r26, 0x3B	; 59
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	eb e3       	ldi	r30, 0x3B	; 59
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	98 2f       	mov	r25, r24
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	80 7f       	andi	r24, 0xF0	; 240
    120c:	89 2b       	or	r24, r25
    120e:	8c 93       	st	X, r24
    1210:	20 c0       	rjmp	.+64     	; 0x1252 <dio_write_highnibble+0xa6>
			break ;
			case 'B':
			PORTB|=(value&0xf0);
    1212:	a8 e3       	ldi	r26, 0x38	; 56
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e8 e3       	ldi	r30, 0x38	; 56
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	98 2f       	mov	r25, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	80 7f       	andi	r24, 0xF0	; 240
    1222:	89 2b       	or	r24, r25
    1224:	8c 93       	st	X, r24
    1226:	15 c0       	rjmp	.+42     	; 0x1252 <dio_write_highnibble+0xa6>
			break ;
			case 'C' :
			PORTC|=(value&0xf0);
    1228:	a5 e3       	ldi	r26, 0x35	; 53
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e5 e3       	ldi	r30, 0x35	; 53
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	98 2f       	mov	r25, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	80 7f       	andi	r24, 0xF0	; 240
    1238:	89 2b       	or	r24, r25
    123a:	8c 93       	st	X, r24
    123c:	0a c0       	rjmp	.+20     	; 0x1252 <dio_write_highnibble+0xa6>
			break ;
			case 'D':
			PORTD|=(value&0xf0);
    123e:	a2 e3       	ldi	r26, 0x32	; 50
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e2 e3       	ldi	r30, 0x32	; 50
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	98 2f       	mov	r25, r24
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	80 7f       	andi	r24, 0xF0	; 240
    124e:	89 2b       	or	r24, r25
    1250:	8c 93       	st	X, r24
			break ;
			default: break ;
	
}
}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <clear_high_nibble>:
void clear_high_nibble(char portname)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <clear_high_nibble+0x6>
    1266:	0f 92       	push	r0
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	3b 83       	std	Y+3, r19	; 0x03
    1276:	2a 83       	std	Y+2, r18	; 0x02
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	9b 81       	ldd	r25, Y+3	; 0x03
    127c:	82 34       	cpi	r24, 0x42	; 66
    127e:	91 05       	cpc	r25, r1
    1280:	f1 f0       	breq	.+60     	; 0x12be <clear_high_nibble+0x5e>
    1282:	2a 81       	ldd	r18, Y+2	; 0x02
    1284:	3b 81       	ldd	r19, Y+3	; 0x03
    1286:	23 34       	cpi	r18, 0x43	; 67
    1288:	31 05       	cpc	r19, r1
    128a:	34 f4       	brge	.+12     	; 0x1298 <clear_high_nibble+0x38>
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	9b 81       	ldd	r25, Y+3	; 0x03
    1290:	81 34       	cpi	r24, 0x41	; 65
    1292:	91 05       	cpc	r25, r1
    1294:	61 f0       	breq	.+24     	; 0x12ae <clear_high_nibble+0x4e>
    1296:	2a c0       	rjmp	.+84     	; 0x12ec <clear_high_nibble+0x8c>
    1298:	2a 81       	ldd	r18, Y+2	; 0x02
    129a:	3b 81       	ldd	r19, Y+3	; 0x03
    129c:	23 34       	cpi	r18, 0x43	; 67
    129e:	31 05       	cpc	r19, r1
    12a0:	b1 f0       	breq	.+44     	; 0x12ce <clear_high_nibble+0x6e>
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	9b 81       	ldd	r25, Y+3	; 0x03
    12a6:	84 34       	cpi	r24, 0x44	; 68
    12a8:	91 05       	cpc	r25, r1
    12aa:	c9 f0       	breq	.+50     	; 0x12de <clear_high_nibble+0x7e>
    12ac:	1f c0       	rjmp	.+62     	; 0x12ec <clear_high_nibble+0x8c>
	{
		case 'A' :
		PORTA&=0x0f;
    12ae:	ab e3       	ldi	r26, 0x3B	; 59
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	eb e3       	ldi	r30, 0x3B	; 59
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	8f 70       	andi	r24, 0x0F	; 15
    12ba:	8c 93       	st	X, r24
    12bc:	17 c0       	rjmp	.+46     	; 0x12ec <clear_high_nibble+0x8c>
		break ;
		case 'B':
		PORTB&=0x0f;
    12be:	a8 e3       	ldi	r26, 0x38	; 56
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e8 e3       	ldi	r30, 0x38	; 56
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	8f 70       	andi	r24, 0x0F	; 15
    12ca:	8c 93       	st	X, r24
    12cc:	0f c0       	rjmp	.+30     	; 0x12ec <clear_high_nibble+0x8c>
		break ;
		case 'C' :
		PORTC&=0x0f;
    12ce:	a5 e3       	ldi	r26, 0x35	; 53
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e5 e3       	ldi	r30, 0x35	; 53
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	8f 70       	andi	r24, 0x0F	; 15
    12da:	8c 93       	st	X, r24
    12dc:	07 c0       	rjmp	.+14     	; 0x12ec <clear_high_nibble+0x8c>
		break ;
		case 'D':
		PORTD&=0x0f;
    12de:	a2 e3       	ldi	r26, 0x32	; 50
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e2 e3       	ldi	r30, 0x32	; 50
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	8f 70       	andi	r24, 0x0F	; 15
    12ea:	8c 93       	st	X, r24
		break ;
		default: break ;
		
	}
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <main>:
#include <avr/interrupt.h>
int x,y;
void task1(void *pv);
void task2 (void *pv);
int main(void)
{
    12f8:	ef 92       	push	r14
    12fa:	ff 92       	push	r15
    12fc:	0f 93       	push	r16
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
	/* create the tasks */
	xTaskCreate(task1,"M",100,NULL,2,NULL);
    1306:	82 ea       	ldi	r24, 0xA2	; 162
    1308:	99 e0       	ldi	r25, 0x09	; 9
    130a:	20 e6       	ldi	r18, 0x60	; 96
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	b9 01       	movw	r22, r18
    1310:	44 e6       	ldi	r20, 0x64	; 100
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	02 e0       	ldi	r16, 0x02	; 2
    131a:	ee 24       	eor	r14, r14
    131c:	ff 24       	eor	r15, r15
    131e:	0e 94 56 1a 	call	0x34ac	; 0x34ac <xTaskCreate>
	xTaskCreate(task2,"N",100,NULL,1,NULL);
    1322:	88 ec       	ldi	r24, 0xC8	; 200
    1324:	99 e0       	ldi	r25, 0x09	; 9
    1326:	22 e6       	ldi	r18, 0x62	; 98
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	b9 01       	movw	r22, r18
    132c:	44 e6       	ldi	r20, 0x64	; 100
    132e:	50 e0       	ldi	r21, 0x00	; 0
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	01 e0       	ldi	r16, 0x01	; 1
    1336:	ee 24       	eor	r14, r14
    1338:	ff 24       	eor	r15, r15
    133a:	0e 94 56 1a 	call	0x34ac	; 0x34ac <xTaskCreate>
	/* start os*/
	vTaskStartScheduler();
    133e:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <vTaskStartScheduler>
    1342:	ff cf       	rjmp	.-2      	; 0x1342 <main+0x4a>

00001344 <task1>:
	{
		
	}
}
void task1(void *pv)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	00 d0       	rcall	.+0      	; 0x134a <task1+0x6>
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	9a 83       	std	Y+2, r25	; 0x02
    1350:	89 83       	std	Y+1, r24	; 0x01
	DDRD|=(1<<7);
    1352:	a1 e3       	ldi	r26, 0x31	; 49
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e1 e3       	ldi	r30, 0x31	; 49
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	80 68       	ori	r24, 0x80	; 128
    135e:	8c 93       	st	X, r24
	while(1)
	{
		if(x==y)
    1360:	20 91 0e 04 	lds	r18, 0x040E
    1364:	30 91 0f 04 	lds	r19, 0x040F
    1368:	80 91 10 04 	lds	r24, 0x0410
    136c:	90 91 11 04 	lds	r25, 0x0411
    1370:	28 17       	cp	r18, r24
    1372:	39 07       	cpc	r19, r25
    1374:	41 f4       	brne	.+16     	; 0x1386 <task1+0x42>
		{
			PORTD^=(1<<7);
    1376:	a2 e3       	ldi	r26, 0x32	; 50
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e2 e3       	ldi	r30, 0x32	; 50
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	90 81       	ld	r25, Z
    1380:	80 e8       	ldi	r24, 0x80	; 128
    1382:	89 27       	eor	r24, r25
    1384:	8c 93       	st	X, r24
		}
		vTaskDelay(1000);
    1386:	88 ee       	ldi	r24, 0xE8	; 232
    1388:	93 e0       	ldi	r25, 0x03	; 3
    138a:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <vTaskDelay>
    138e:	e8 cf       	rjmp	.-48     	; 0x1360 <task1+0x1c>

00001390 <task2>:
	}
}

void task2(void *pv)
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	60 97       	sbiw	r28, 0x10	; 16
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	98 8b       	std	Y+16, r25	; 0x10
    13a6:	8f 87       	std	Y+15, r24	; 0x0f
	while(1)
	{
		vTaskSuspendAll();
    13a8:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <vTaskSuspendAll>
		++x;
    13ac:	80 91 0e 04 	lds	r24, 0x040E
    13b0:	90 91 0f 04 	lds	r25, 0x040F
    13b4:	01 96       	adiw	r24, 0x01	; 1
    13b6:	90 93 0f 04 	sts	0x040F, r25
    13ba:	80 93 0e 04 	sts	0x040E, r24
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	a8 e4       	ldi	r26, 0x48	; 72
    13c4:	b3 e4       	ldi	r27, 0x43	; 67
    13c6:	8b 87       	std	Y+11, r24	; 0x0b
    13c8:	9c 87       	std	Y+12, r25	; 0x0c
    13ca:	ad 87       	std	Y+13, r26	; 0x0d
    13cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	4a ef       	ldi	r20, 0xFA	; 250
    13dc:	54 e4       	ldi	r21, 0x44	; 68
    13de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	8f 83       	std	Y+7, r24	; 0x07
    13e8:	98 87       	std	Y+8, r25	; 0x08
    13ea:	a9 87       	std	Y+9, r26	; 0x09
    13ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13ee:	6f 81       	ldd	r22, Y+7	; 0x07
    13f0:	78 85       	ldd	r23, Y+8	; 0x08
    13f2:	89 85       	ldd	r24, Y+9	; 0x09
    13f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	40 e8       	ldi	r20, 0x80	; 128
    13fc:	5f e3       	ldi	r21, 0x3F	; 63
    13fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1402:	88 23       	and	r24, r24
    1404:	2c f4       	brge	.+10     	; 0x1410 <task2+0x80>
		__ticks = 1;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	9e 83       	std	Y+6, r25	; 0x06
    140c:	8d 83       	std	Y+5, r24	; 0x05
    140e:	3f c0       	rjmp	.+126    	; 0x148e <task2+0xfe>
	else if (__tmp > 65535)
    1410:	6f 81       	ldd	r22, Y+7	; 0x07
    1412:	78 85       	ldd	r23, Y+8	; 0x08
    1414:	89 85       	ldd	r24, Y+9	; 0x09
    1416:	9a 85       	ldd	r25, Y+10	; 0x0a
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	3f ef       	ldi	r19, 0xFF	; 255
    141c:	4f e7       	ldi	r20, 0x7F	; 127
    141e:	57 e4       	ldi	r21, 0x47	; 71
    1420:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1424:	18 16       	cp	r1, r24
    1426:	4c f5       	brge	.+82     	; 0x147a <task2+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1428:	6b 85       	ldd	r22, Y+11	; 0x0b
    142a:	7c 85       	ldd	r23, Y+12	; 0x0c
    142c:	8d 85       	ldd	r24, Y+13	; 0x0d
    142e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e2       	ldi	r20, 0x20	; 32
    1436:	51 e4       	ldi	r21, 0x41	; 65
    1438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	bc 01       	movw	r22, r24
    1442:	cd 01       	movw	r24, r26
    1444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	9e 83       	std	Y+6, r25	; 0x06
    144e:	8d 83       	std	Y+5, r24	; 0x05
    1450:	0f c0       	rjmp	.+30     	; 0x1470 <task2+0xe0>
    1452:	88 ec       	ldi	r24, 0xC8	; 200
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	9c 83       	std	Y+4, r25	; 0x04
    1458:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	9c 81       	ldd	r25, Y+4	; 0x04
    145e:	01 97       	sbiw	r24, 0x01	; 1
    1460:	f1 f7       	brne	.-4      	; 0x145e <task2+0xce>
    1462:	9c 83       	std	Y+4, r25	; 0x04
    1464:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	01 97       	sbiw	r24, 0x01	; 1
    146c:	9e 83       	std	Y+6, r25	; 0x06
    146e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1470:	8d 81       	ldd	r24, Y+5	; 0x05
    1472:	9e 81       	ldd	r25, Y+6	; 0x06
    1474:	00 97       	sbiw	r24, 0x00	; 0
    1476:	69 f7       	brne	.-38     	; 0x1452 <task2+0xc2>
    1478:	14 c0       	rjmp	.+40     	; 0x14a2 <task2+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    147a:	6f 81       	ldd	r22, Y+7	; 0x07
    147c:	78 85       	ldd	r23, Y+8	; 0x08
    147e:	89 85       	ldd	r24, Y+9	; 0x09
    1480:	9a 85       	ldd	r25, Y+10	; 0x0a
    1482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	9e 83       	std	Y+6, r25	; 0x06
    148c:	8d 83       	std	Y+5, r24	; 0x05
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	9a 83       	std	Y+2, r25	; 0x02
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	9a 81       	ldd	r25, Y+2	; 0x02
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	f1 f7       	brne	.-4      	; 0x149a <task2+0x10a>
    149e:	9a 83       	std	Y+2, r25	; 0x02
    14a0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		++y;
    14a2:	80 91 10 04 	lds	r24, 0x0410
    14a6:	90 91 11 04 	lds	r25, 0x0411
    14aa:	01 96       	adiw	r24, 0x01	; 1
    14ac:	90 93 11 04 	sts	0x0411, r25
    14b0:	80 93 10 04 	sts	0x0410, r24
		xTaskResumeAll();
    14b4:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <xTaskResumeAll>
    14b8:	77 cf       	rjmp	.-274    	; 0x13a8 <task2+0x18>

000014ba <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <xEventGroupCreate+0x6>
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
    14c4:	8b e0       	ldi	r24, 0x0B	; 11
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <pvPortMalloc>
    14cc:	9a 83       	std	Y+2, r25	; 0x02
    14ce:	89 83       	std	Y+1, r24	; 0x01

		if( pxEventBits != NULL )
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	9a 81       	ldd	r25, Y+2	; 0x02
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	49 f0       	breq	.+18     	; 0x14ea <xEventGroupCreate+0x30>
		{
			pxEventBits->uxEventBits = 0;
    14d8:	e9 81       	ldd	r30, Y+1	; 0x01
    14da:	fa 81       	ldd	r31, Y+2	; 0x02
    14dc:	11 82       	std	Z+1, r1	; 0x01
    14de:	10 82       	st	Z, r1
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	9a 81       	ldd	r25, Y+2	; 0x02
    14e4:	02 96       	adiw	r24, 0x02	; 2
    14e6:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	60 97       	sbiw	r28, 0x10	; 16
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	9a 87       	std	Y+10, r25	; 0x0a
    150e:	89 87       	std	Y+9, r24	; 0x09
    1510:	7c 87       	std	Y+12, r23	; 0x0c
    1512:	6b 87       	std	Y+11, r22	; 0x0b
    1514:	5e 87       	std	Y+14, r21	; 0x0e
    1516:	4d 87       	std	Y+13, r20	; 0x0d
    1518:	38 8b       	std	Y+16, r19	; 0x10
    151a:	2f 87       	std	Y+15, r18	; 0x0f
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    151c:	89 85       	ldd	r24, Y+9	; 0x09
    151e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1520:	9c 83       	std	Y+4, r25	; 0x04
    1522:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    1524:	19 82       	std	Y+1, r1	; 0x01
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    1526:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
    152a:	eb 81       	ldd	r30, Y+3	; 0x03
    152c:	fc 81       	ldd	r31, Y+4	; 0x04
    152e:	80 81       	ld	r24, Z
    1530:	91 81       	ldd	r25, Z+1	; 0x01
    1532:	98 87       	std	Y+8, r25	; 0x08
    1534:	8f 83       	std	Y+7, r24	; 0x07

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
    1536:	89 85       	ldd	r24, Y+9	; 0x09
    1538:	9a 85       	ldd	r25, Y+10	; 0x0a
    153a:	2b 85       	ldd	r18, Y+11	; 0x0b
    153c:	3c 85       	ldd	r19, Y+12	; 0x0c
    153e:	b9 01       	movw	r22, r18
    1540:	0e 94 4e 0c 	call	0x189c	; 0x189c <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1544:	2f 81       	ldd	r18, Y+7	; 0x07
    1546:	38 85       	ldd	r19, Y+8	; 0x08
    1548:	8b 85       	ldd	r24, Y+11	; 0x0b
    154a:	9c 85       	ldd	r25, Y+12	; 0x0c
    154c:	28 2b       	or	r18, r24
    154e:	39 2b       	or	r19, r25
    1550:	8d 85       	ldd	r24, Y+13	; 0x0d
    1552:	9e 85       	ldd	r25, Y+14	; 0x0e
    1554:	28 23       	and	r18, r24
    1556:	39 23       	and	r19, r25
    1558:	8d 85       	ldd	r24, Y+13	; 0x0d
    155a:	9e 85       	ldd	r25, Y+14	; 0x0e
    155c:	28 17       	cp	r18, r24
    155e:	39 07       	cpc	r19, r25
    1560:	c9 f4       	brne	.+50     	; 0x1594 <xEventGroupSync+0x9c>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
    1562:	2f 81       	ldd	r18, Y+7	; 0x07
    1564:	38 85       	ldd	r19, Y+8	; 0x08
    1566:	8b 85       	ldd	r24, Y+11	; 0x0b
    1568:	9c 85       	ldd	r25, Y+12	; 0x0c
    156a:	82 2b       	or	r24, r18
    156c:	93 2b       	or	r25, r19
    156e:	9e 83       	std	Y+6, r25	; 0x06
    1570:	8d 83       	std	Y+5, r24	; 0x05

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    1572:	eb 81       	ldd	r30, Y+3	; 0x03
    1574:	fc 81       	ldd	r31, Y+4	; 0x04
    1576:	20 81       	ld	r18, Z
    1578:	31 81       	ldd	r19, Z+1	; 0x01
    157a:	8d 85       	ldd	r24, Y+13	; 0x0d
    157c:	9e 85       	ldd	r25, Y+14	; 0x0e
    157e:	80 95       	com	r24
    1580:	90 95       	com	r25
    1582:	82 23       	and	r24, r18
    1584:	93 23       	and	r25, r19
    1586:	eb 81       	ldd	r30, Y+3	; 0x03
    1588:	fc 81       	ldd	r31, Y+4	; 0x04
    158a:	91 83       	std	Z+1, r25	; 0x01
    158c:	80 83       	st	Z, r24

			xTicksToWait = 0;
    158e:	18 8a       	std	Y+16, r1	; 0x10
    1590:	1f 86       	std	Y+15, r1	; 0x0f
    1592:	1c c0       	rjmp	.+56     	; 0x15cc <xEventGroupSync+0xd4>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
    1594:	8f 85       	ldd	r24, Y+15	; 0x0f
    1596:	98 89       	ldd	r25, Y+16	; 0x10
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	91 f0       	breq	.+36     	; 0x15c0 <xEventGroupSync+0xc8>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	bc 01       	movw	r22, r24
    15a2:	6e 5f       	subi	r22, 0xFE	; 254
    15a4:	7f 4f       	sbci	r23, 0xFF	; 255
    15a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15aa:	9c 01       	movw	r18, r24
    15ac:	35 60       	ori	r19, 0x05	; 5
    15ae:	4f 85       	ldd	r20, Y+15	; 0x0f
    15b0:	58 89       	ldd	r21, Y+16	; 0x10
    15b2:	cb 01       	movw	r24, r22
    15b4:	b9 01       	movw	r22, r18
    15b6:	0e 94 2b 22 	call	0x4456	; 0x4456 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
    15ba:	1e 82       	std	Y+6, r1	; 0x06
    15bc:	1d 82       	std	Y+5, r1	; 0x05
    15be:	06 c0       	rjmp	.+12     	; 0x15cc <xEventGroupSync+0xd4>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    15c0:	eb 81       	ldd	r30, Y+3	; 0x03
    15c2:	fc 81       	ldd	r31, Y+4	; 0x04
    15c4:	80 81       	ld	r24, Z
    15c6:	91 81       	ldd	r25, Z+1	; 0x01
    15c8:	9e 83       	std	Y+6, r25	; 0x06
    15ca:	8d 83       	std	Y+5, r24	; 0x05
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    15cc:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <xTaskResumeAll>
    15d0:	8a 83       	std	Y+2, r24	; 0x02

	if( xTicksToWait != ( TickType_t ) 0 )
    15d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15d4:	98 89       	ldd	r25, Y+16	; 0x10
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	09 f4       	brne	.+2      	; 0x15dc <xEventGroupSync+0xe4>
    15da:	3a c0       	rjmp	.+116    	; 0x1650 <xEventGroupSync+0x158>
	{
		if( xAlreadyYielded == pdFALSE )
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	88 23       	and	r24, r24
    15e0:	11 f4       	brne	.+4      	; 0x15e6 <xEventGroupSync+0xee>
		{
			portYIELD_WITHIN_API();
    15e2:	0e 94 2e 12 	call	0x245c	; 0x245c <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    15e6:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <uxTaskResetEventItemValue>
    15ea:	9e 83       	std	Y+6, r25	; 0x06
    15ec:	8d 83       	std	Y+5, r24	; 0x05

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    15ee:	8d 81       	ldd	r24, Y+5	; 0x05
    15f0:	9e 81       	ldd	r25, Y+6	; 0x06
    15f2:	80 70       	andi	r24, 0x00	; 0
    15f4:	92 70       	andi	r25, 0x02	; 2
    15f6:	00 97       	sbiw	r24, 0x00	; 0
    15f8:	31 f5       	brne	.+76     	; 0x1646 <xEventGroupSync+0x14e>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	0f 92       	push	r0
			{
				uxReturn = pxEventBits->uxEventBits;
    1600:	eb 81       	ldd	r30, Y+3	; 0x03
    1602:	fc 81       	ldd	r31, Y+4	; 0x04
    1604:	80 81       	ld	r24, Z
    1606:	91 81       	ldd	r25, Z+1	; 0x01
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	8d 83       	std	Y+5, r24	; 0x05

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
    160c:	2d 81       	ldd	r18, Y+5	; 0x05
    160e:	3e 81       	ldd	r19, Y+6	; 0x06
    1610:	8d 85       	ldd	r24, Y+13	; 0x0d
    1612:	9e 85       	ldd	r25, Y+14	; 0x0e
    1614:	28 23       	and	r18, r24
    1616:	39 23       	and	r19, r25
    1618:	8d 85       	ldd	r24, Y+13	; 0x0d
    161a:	9e 85       	ldd	r25, Y+14	; 0x0e
    161c:	28 17       	cp	r18, r24
    161e:	39 07       	cpc	r19, r25
    1620:	71 f4       	brne	.+28     	; 0x163e <xEventGroupSync+0x146>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    1622:	eb 81       	ldd	r30, Y+3	; 0x03
    1624:	fc 81       	ldd	r31, Y+4	; 0x04
    1626:	20 81       	ld	r18, Z
    1628:	31 81       	ldd	r19, Z+1	; 0x01
    162a:	8d 85       	ldd	r24, Y+13	; 0x0d
    162c:	9e 85       	ldd	r25, Y+14	; 0x0e
    162e:	80 95       	com	r24
    1630:	90 95       	com	r25
    1632:	82 23       	and	r24, r18
    1634:	93 23       	and	r25, r19
    1636:	eb 81       	ldd	r30, Y+3	; 0x03
    1638:	fc 81       	ldd	r31, Y+4	; 0x04
    163a:	91 83       	std	Z+1, r25	; 0x01
    163c:	80 83       	st	Z, r24
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    163e:	0f 90       	pop	r0
    1640:	0f be       	out	0x3f, r0	; 63

			xTimeoutOccurred = pdTRUE;
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	89 83       	std	Y+1, r24	; 0x01
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    1646:	8d 81       	ldd	r24, Y+5	; 0x05
    1648:	9e 81       	ldd	r25, Y+6	; 0x06
    164a:	90 70       	andi	r25, 0x00	; 0
    164c:	9e 83       	std	Y+6, r25	; 0x06
    164e:	8d 83       	std	Y+5, r24	; 0x05
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
    1650:	8d 81       	ldd	r24, Y+5	; 0x05
    1652:	9e 81       	ldd	r25, Y+6	; 0x06
}
    1654:	60 96       	adiw	r28, 0x10	; 16
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	63 97       	sbiw	r28, 0x13	; 19
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	9d 87       	std	Y+13, r25	; 0x0d
    1680:	8c 87       	std	Y+12, r24	; 0x0c
    1682:	7f 87       	std	Y+15, r23	; 0x0f
    1684:	6e 87       	std	Y+14, r22	; 0x0e
    1686:	48 8b       	std	Y+16, r20	; 0x10
    1688:	29 8b       	std	Y+17, r18	; 0x11
    168a:	1b 8b       	std	Y+19, r17	; 0x13
    168c:	0a 8b       	std	Y+18, r16	; 0x12
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    168e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1690:	9d 85       	ldd	r25, Y+13	; 0x0d
    1692:	9b 87       	std	Y+11, r25	; 0x0b
    1694:	8a 87       	std	Y+10, r24	; 0x0a
EventBits_t uxReturn, uxControlBits = 0;
    1696:	1f 82       	std	Y+7, r1	; 0x07
    1698:	1e 82       	std	Y+6, r1	; 0x06
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    169a:	1b 82       	std	Y+3, r1	; 0x03
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    169c:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    16a0:	ea 85       	ldd	r30, Y+10	; 0x0a
    16a2:	fb 85       	ldd	r31, Y+11	; 0x0b
    16a4:	80 81       	ld	r24, Z
    16a6:	91 81       	ldd	r25, Z+1	; 0x01
    16a8:	9a 83       	std	Y+2, r25	; 0x02
    16aa:	89 83       	std	Y+1, r24	; 0x01

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	9a 81       	ldd	r25, Y+2	; 0x02
    16b0:	2e 85       	ldd	r18, Y+14	; 0x0e
    16b2:	3f 85       	ldd	r19, Y+15	; 0x0f
    16b4:	b9 01       	movw	r22, r18
    16b6:	49 89       	ldd	r20, Y+17	; 0x11
    16b8:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <prvTestWaitCondition>
    16bc:	8d 83       	std	Y+5, r24	; 0x05

		if( xWaitConditionMet != pdFALSE )
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
    16c0:	88 23       	and	r24, r24
    16c2:	c1 f0       	breq	.+48     	; 0x16f4 <xEventGroupWaitBits+0x8e>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	9a 81       	ldd	r25, Y+2	; 0x02
    16c8:	99 87       	std	Y+9, r25	; 0x09
    16ca:	88 87       	std	Y+8, r24	; 0x08
			xTicksToWait = ( TickType_t ) 0;
    16cc:	1b 8a       	std	Y+19, r1	; 0x13
    16ce:	1a 8a       	std	Y+18, r1	; 0x12

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
    16d0:	88 89       	ldd	r24, Y+16	; 0x10
    16d2:	88 23       	and	r24, r24
    16d4:	d9 f1       	breq	.+118    	; 0x174c <xEventGroupWaitBits+0xe6>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    16d6:	ea 85       	ldd	r30, Y+10	; 0x0a
    16d8:	fb 85       	ldd	r31, Y+11	; 0x0b
    16da:	20 81       	ld	r18, Z
    16dc:	31 81       	ldd	r19, Z+1	; 0x01
    16de:	8e 85       	ldd	r24, Y+14	; 0x0e
    16e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    16e2:	80 95       	com	r24
    16e4:	90 95       	com	r25
    16e6:	82 23       	and	r24, r18
    16e8:	93 23       	and	r25, r19
    16ea:	ea 85       	ldd	r30, Y+10	; 0x0a
    16ec:	fb 85       	ldd	r31, Y+11	; 0x0b
    16ee:	91 83       	std	Z+1, r25	; 0x01
    16f0:	80 83       	st	Z, r24
    16f2:	2c c0       	rjmp	.+88     	; 0x174c <xEventGroupWaitBits+0xe6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
    16f4:	8a 89       	ldd	r24, Y+18	; 0x12
    16f6:	9b 89       	ldd	r25, Y+19	; 0x13
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	29 f4       	brne	.+10     	; 0x1706 <xEventGroupWaitBits+0xa0>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1700:	99 87       	std	Y+9, r25	; 0x09
    1702:	88 87       	std	Y+8, r24	; 0x08
    1704:	23 c0       	rjmp	.+70     	; 0x174c <xEventGroupWaitBits+0xe6>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
    1706:	88 89       	ldd	r24, Y+16	; 0x10
    1708:	88 23       	and	r24, r24
    170a:	29 f0       	breq	.+10     	; 0x1716 <xEventGroupWaitBits+0xb0>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
    170c:	8e 81       	ldd	r24, Y+6	; 0x06
    170e:	9f 81       	ldd	r25, Y+7	; 0x07
    1710:	91 60       	ori	r25, 0x01	; 1
    1712:	9f 83       	std	Y+7, r25	; 0x07
    1714:	8e 83       	std	Y+6, r24	; 0x06
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
    1716:	89 89       	ldd	r24, Y+17	; 0x11
    1718:	88 23       	and	r24, r24
    171a:	29 f0       	breq	.+10     	; 0x1726 <xEventGroupWaitBits+0xc0>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
    171c:	8e 81       	ldd	r24, Y+6	; 0x06
    171e:	9f 81       	ldd	r25, Y+7	; 0x07
    1720:	94 60       	ori	r25, 0x04	; 4
    1722:	9f 83       	std	Y+7, r25	; 0x07
    1724:	8e 83       	std	Y+6, r24	; 0x06
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
    1726:	8a 85       	ldd	r24, Y+10	; 0x0a
    1728:	9b 85       	ldd	r25, Y+11	; 0x0b
    172a:	bc 01       	movw	r22, r24
    172c:	6e 5f       	subi	r22, 0xFE	; 254
    172e:	7f 4f       	sbci	r23, 0xFF	; 255
    1730:	2e 85       	ldd	r18, Y+14	; 0x0e
    1732:	3f 85       	ldd	r19, Y+15	; 0x0f
    1734:	8e 81       	ldd	r24, Y+6	; 0x06
    1736:	9f 81       	ldd	r25, Y+7	; 0x07
    1738:	28 2b       	or	r18, r24
    173a:	39 2b       	or	r19, r25
    173c:	4a 89       	ldd	r20, Y+18	; 0x12
    173e:	5b 89       	ldd	r21, Y+19	; 0x13
    1740:	cb 01       	movw	r24, r22
    1742:	b9 01       	movw	r22, r18
    1744:	0e 94 2b 22 	call	0x4456	; 0x4456 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
    1748:	19 86       	std	Y+9, r1	; 0x09
    174a:	18 86       	std	Y+8, r1	; 0x08

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    174c:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <xTaskResumeAll>
    1750:	8c 83       	std	Y+4, r24	; 0x04

	if( xTicksToWait != ( TickType_t ) 0 )
    1752:	8a 89       	ldd	r24, Y+18	; 0x12
    1754:	9b 89       	ldd	r25, Y+19	; 0x13
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	09 f4       	brne	.+2      	; 0x175c <xEventGroupWaitBits+0xf6>
    175a:	3b c0       	rjmp	.+118    	; 0x17d2 <xEventGroupWaitBits+0x16c>
	{
		if( xAlreadyYielded == pdFALSE )
    175c:	8c 81       	ldd	r24, Y+4	; 0x04
    175e:	88 23       	and	r24, r24
    1760:	11 f4       	brne	.+4      	; 0x1766 <xEventGroupWaitBits+0x100>
		{
			portYIELD_WITHIN_API();
    1762:	0e 94 2e 12 	call	0x245c	; 0x245c <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    1766:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <uxTaskResetEventItemValue>
    176a:	99 87       	std	Y+9, r25	; 0x09
    176c:	88 87       	std	Y+8, r24	; 0x08

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    176e:	88 85       	ldd	r24, Y+8	; 0x08
    1770:	99 85       	ldd	r25, Y+9	; 0x09
    1772:	80 70       	andi	r24, 0x00	; 0
    1774:	92 70       	andi	r25, 0x02	; 2
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	39 f5       	brne	.+78     	; 0x17c8 <xEventGroupWaitBits+0x162>
		{
			taskENTER_CRITICAL();
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	0f 92       	push	r0
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    1780:	ea 85       	ldd	r30, Y+10	; 0x0a
    1782:	fb 85       	ldd	r31, Y+11	; 0x0b
    1784:	80 81       	ld	r24, Z
    1786:	91 81       	ldd	r25, Z+1	; 0x01
    1788:	99 87       	std	Y+9, r25	; 0x09
    178a:	88 87       	std	Y+8, r24	; 0x08

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
    178c:	88 85       	ldd	r24, Y+8	; 0x08
    178e:	99 85       	ldd	r25, Y+9	; 0x09
    1790:	2e 85       	ldd	r18, Y+14	; 0x0e
    1792:	3f 85       	ldd	r19, Y+15	; 0x0f
    1794:	b9 01       	movw	r22, r18
    1796:	49 89       	ldd	r20, Y+17	; 0x11
    1798:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <prvTestWaitCondition>
    179c:	88 23       	and	r24, r24
    179e:	89 f0       	breq	.+34     	; 0x17c2 <xEventGroupWaitBits+0x15c>
				{
					if( xClearOnExit != pdFALSE )
    17a0:	88 89       	ldd	r24, Y+16	; 0x10
    17a2:	88 23       	and	r24, r24
    17a4:	71 f0       	breq	.+28     	; 0x17c2 <xEventGroupWaitBits+0x15c>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    17a6:	ea 85       	ldd	r30, Y+10	; 0x0a
    17a8:	fb 85       	ldd	r31, Y+11	; 0x0b
    17aa:	20 81       	ld	r18, Z
    17ac:	31 81       	ldd	r19, Z+1	; 0x01
    17ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    17b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    17b2:	80 95       	com	r24
    17b4:	90 95       	com	r25
    17b6:	82 23       	and	r24, r18
    17b8:	93 23       	and	r25, r19
    17ba:	ea 85       	ldd	r30, Y+10	; 0x0a
    17bc:	fb 85       	ldd	r31, Y+11	; 0x0b
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	80 83       	st	Z, r24
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    17c2:	0f 90       	pop	r0
    17c4:	0f be       	out	0x3f, r0	; 63

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
    17c6:	1b 82       	std	Y+3, r1	; 0x03
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    17c8:	88 85       	ldd	r24, Y+8	; 0x08
    17ca:	99 85       	ldd	r25, Y+9	; 0x09
    17cc:	90 70       	andi	r25, 0x00	; 0
    17ce:	99 87       	std	Y+9, r25	; 0x09
    17d0:	88 87       	std	Y+8, r24	; 0x08
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
    17d2:	88 85       	ldd	r24, Y+8	; 0x08
    17d4:	99 85       	ldd	r25, Y+9	; 0x09
}
    17d6:	63 96       	adiw	r28, 0x13	; 19
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	1f 91       	pop	r17
    17e8:	0f 91       	pop	r16
    17ea:	08 95       	ret

000017ec <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
    17f4:	28 97       	sbiw	r28, 0x08	; 8
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	9e 83       	std	Y+6, r25	; 0x06
    1802:	8d 83       	std	Y+5, r24	; 0x05
    1804:	78 87       	std	Y+8, r23	; 0x08
    1806:	6f 83       	std	Y+7, r22	; 0x07
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    1808:	8d 81       	ldd	r24, Y+5	; 0x05
    180a:	9e 81       	ldd	r25, Y+6	; 0x06
    180c:	9c 83       	std	Y+4, r25	; 0x04
    180e:	8b 83       	std	Y+3, r24	; 0x03
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	0f 92       	push	r0
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
    1816:	eb 81       	ldd	r30, Y+3	; 0x03
    1818:	fc 81       	ldd	r31, Y+4	; 0x04
    181a:	80 81       	ld	r24, Z
    181c:	91 81       	ldd	r25, Z+1	; 0x01
    181e:	9a 83       	std	Y+2, r25	; 0x02
    1820:	89 83       	std	Y+1, r24	; 0x01

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    1822:	eb 81       	ldd	r30, Y+3	; 0x03
    1824:	fc 81       	ldd	r31, Y+4	; 0x04
    1826:	20 81       	ld	r18, Z
    1828:	31 81       	ldd	r19, Z+1	; 0x01
    182a:	8f 81       	ldd	r24, Y+7	; 0x07
    182c:	98 85       	ldd	r25, Y+8	; 0x08
    182e:	80 95       	com	r24
    1830:	90 95       	com	r25
    1832:	82 23       	and	r24, r18
    1834:	93 23       	and	r25, r19
    1836:	eb 81       	ldd	r30, Y+3	; 0x03
    1838:	fc 81       	ldd	r31, Y+4	; 0x04
    183a:	91 83       	std	Z+1, r25	; 0x01
    183c:	80 83       	st	Z, r24
	}
	taskEXIT_CRITICAL();
    183e:	0f 90       	pop	r0
    1840:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1846:	28 96       	adiw	r28, 0x08	; 8
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	08 95       	ret

00001858 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
    1858:	df 93       	push	r29
    185a:	cf 93       	push	r28
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	27 97       	sbiw	r28, 0x07	; 7
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	9f 83       	std	Y+7, r25	; 0x07
    186e:	8e 83       	std	Y+6, r24	; 0x06
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    1870:	8e 81       	ldd	r24, Y+6	; 0x06
    1872:	9f 81       	ldd	r25, Y+7	; 0x07
    1874:	9c 83       	std	Y+4, r25	; 0x04
    1876:	8b 83       	std	Y+3, r24	; 0x03
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1878:	1d 82       	std	Y+5, r1	; 0x05
	{
		uxReturn = pxEventBits->uxEventBits;
    187a:	eb 81       	ldd	r30, Y+3	; 0x03
    187c:	fc 81       	ldd	r31, Y+4	; 0x04
    187e:	80 81       	ld	r24, Z
    1880:	91 81       	ldd	r25, Z+1	; 0x01
    1882:	9a 83       	std	Y+2, r25	; 0x02
    1884:	89 83       	std	Y+1, r24	; 0x01
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	9a 81       	ldd	r25, Y+2	; 0x02
}
    188a:	27 96       	adiw	r28, 0x07	; 7
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	65 97       	sbiw	r28, 0x15	; 21
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	cd bf       	out	0x3d, r28	; 61
    18b0:	9b 8b       	std	Y+19, r25	; 0x13
    18b2:	8a 8b       	std	Y+18, r24	; 0x12
    18b4:	7d 8b       	std	Y+21, r23	; 0x15
    18b6:	6c 8b       	std	Y+20, r22	; 0x14
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    18b8:	19 86       	std	Y+9, r1	; 0x09
    18ba:	18 86       	std	Y+8, r1	; 0x08
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    18bc:	8a 89       	ldd	r24, Y+18	; 0x12
    18be:	9b 89       	ldd	r25, Y+19	; 0x13
    18c0:	9b 83       	std	Y+3, r25	; 0x03
    18c2:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xMatchFound = pdFALSE;
    18c4:	19 82       	std	Y+1, r1	; 0x01
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	9b 81       	ldd	r25, Y+3	; 0x03
    18ca:	02 96       	adiw	r24, 0x02	; 2
    18cc:	9b 87       	std	Y+11, r25	; 0x0b
    18ce:	8a 87       	std	Y+10, r24	; 0x0a
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    18d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    18d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    18d4:	03 96       	adiw	r24, 0x03	; 3
    18d6:	9d 87       	std	Y+13, r25	; 0x0d
    18d8:	8c 87       	std	Y+12, r24	; 0x0c
	vTaskSuspendAll();
    18da:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
    18de:	ea 85       	ldd	r30, Y+10	; 0x0a
    18e0:	fb 85       	ldd	r31, Y+11	; 0x0b
    18e2:	85 81       	ldd	r24, Z+5	; 0x05
    18e4:	96 81       	ldd	r25, Z+6	; 0x06
    18e6:	99 8b       	std	Y+17, r25	; 0x11
    18e8:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
    18ea:	ea 81       	ldd	r30, Y+2	; 0x02
    18ec:	fb 81       	ldd	r31, Y+3	; 0x03
    18ee:	20 81       	ld	r18, Z
    18f0:	31 81       	ldd	r19, Z+1	; 0x01
    18f2:	8c 89       	ldd	r24, Y+20	; 0x14
    18f4:	9d 89       	ldd	r25, Y+21	; 0x15
    18f6:	82 2b       	or	r24, r18
    18f8:	93 2b       	or	r25, r19
    18fa:	ea 81       	ldd	r30, Y+2	; 0x02
    18fc:	fb 81       	ldd	r31, Y+3	; 0x03
    18fe:	91 83       	std	Z+1, r25	; 0x01
    1900:	80 83       	st	Z, r24
    1902:	59 c0       	rjmp	.+178    	; 0x19b6 <xEventGroupSetBits+0x11a>

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
		{
			pxNext = listGET_NEXT( pxListItem );
    1904:	e8 89       	ldd	r30, Y+16	; 0x10
    1906:	f9 89       	ldd	r31, Y+17	; 0x11
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	9f 87       	std	Y+15, r25	; 0x0f
    190e:	8e 87       	std	Y+14, r24	; 0x0e
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    1910:	e8 89       	ldd	r30, Y+16	; 0x10
    1912:	f9 89       	ldd	r31, Y+17	; 0x11
    1914:	80 81       	ld	r24, Z
    1916:	91 81       	ldd	r25, Z+1	; 0x01
    1918:	9f 83       	std	Y+7, r25	; 0x07
    191a:	8e 83       	std	Y+6, r24	; 0x06
			xMatchFound = pdFALSE;
    191c:	19 82       	std	Y+1, r1	; 0x01

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
    191e:	8e 81       	ldd	r24, Y+6	; 0x06
    1920:	9f 81       	ldd	r25, Y+7	; 0x07
    1922:	80 70       	andi	r24, 0x00	; 0
    1924:	9d 83       	std	Y+5, r25	; 0x05
    1926:	8c 83       	std	Y+4, r24	; 0x04
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    1928:	8e 81       	ldd	r24, Y+6	; 0x06
    192a:	9f 81       	ldd	r25, Y+7	; 0x07
    192c:	90 70       	andi	r25, 0x00	; 0
    192e:	9f 83       	std	Y+7, r25	; 0x07
    1930:	8e 83       	std	Y+6, r24	; 0x06

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    1932:	8c 81       	ldd	r24, Y+4	; 0x04
    1934:	9d 81       	ldd	r25, Y+5	; 0x05
    1936:	80 70       	andi	r24, 0x00	; 0
    1938:	94 70       	andi	r25, 0x04	; 4
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	69 f4       	brne	.+26     	; 0x1958 <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    193e:	ea 81       	ldd	r30, Y+2	; 0x02
    1940:	fb 81       	ldd	r31, Y+3	; 0x03
    1942:	20 81       	ld	r18, Z
    1944:	31 81       	ldd	r19, Z+1	; 0x01
    1946:	8e 81       	ldd	r24, Y+6	; 0x06
    1948:	9f 81       	ldd	r25, Y+7	; 0x07
    194a:	82 23       	and	r24, r18
    194c:	93 23       	and	r25, r19
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	91 f0       	breq	.+36     	; 0x1976 <xEventGroupSetBits+0xda>
				{
					xMatchFound = pdTRUE;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	0f c0       	rjmp	.+30     	; 0x1976 <xEventGroupSetBits+0xda>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    1958:	ea 81       	ldd	r30, Y+2	; 0x02
    195a:	fb 81       	ldd	r31, Y+3	; 0x03
    195c:	20 81       	ld	r18, Z
    195e:	31 81       	ldd	r19, Z+1	; 0x01
    1960:	8e 81       	ldd	r24, Y+6	; 0x06
    1962:	9f 81       	ldd	r25, Y+7	; 0x07
    1964:	28 23       	and	r18, r24
    1966:	39 23       	and	r19, r25
    1968:	8e 81       	ldd	r24, Y+6	; 0x06
    196a:	9f 81       	ldd	r25, Y+7	; 0x07
    196c:	28 17       	cp	r18, r24
    196e:	39 07       	cpc	r19, r25
    1970:	11 f4       	brne	.+4      	; 0x1976 <xEventGroupSetBits+0xda>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	88 23       	and	r24, r24
    197a:	c9 f0       	breq	.+50     	; 0x19ae <xEventGroupSetBits+0x112>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    197c:	8c 81       	ldd	r24, Y+4	; 0x04
    197e:	9d 81       	ldd	r25, Y+5	; 0x05
    1980:	80 70       	andi	r24, 0x00	; 0
    1982:	91 70       	andi	r25, 0x01	; 1
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	41 f0       	breq	.+16     	; 0x1998 <xEventGroupSetBits+0xfc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
    1988:	88 85       	ldd	r24, Y+8	; 0x08
    198a:	99 85       	ldd	r25, Y+9	; 0x09
    198c:	2e 81       	ldd	r18, Y+6	; 0x06
    198e:	3f 81       	ldd	r19, Y+7	; 0x07
    1990:	82 2b       	or	r24, r18
    1992:	93 2b       	or	r25, r19
    1994:	99 87       	std	Y+9, r25	; 0x09
    1996:	88 87       	std	Y+8, r24	; 0x08
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    1998:	ea 81       	ldd	r30, Y+2	; 0x02
    199a:	fb 81       	ldd	r31, Y+3	; 0x03
    199c:	80 81       	ld	r24, Z
    199e:	91 81       	ldd	r25, Z+1	; 0x01
    19a0:	9c 01       	movw	r18, r24
    19a2:	32 60       	ori	r19, 0x02	; 2
    19a4:	88 89       	ldd	r24, Y+16	; 0x10
    19a6:	99 89       	ldd	r25, Y+17	; 0x11
    19a8:	b9 01       	movw	r22, r18
    19aa:	0e 94 c6 22 	call	0x458c	; 0x458c <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
    19ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    19b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    19b2:	99 8b       	std	Y+17, r25	; 0x11
    19b4:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
    19b6:	28 89       	ldd	r18, Y+16	; 0x10
    19b8:	39 89       	ldd	r19, Y+17	; 0x11
    19ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    19bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    19be:	28 17       	cp	r18, r24
    19c0:	39 07       	cpc	r19, r25
    19c2:	09 f0       	breq	.+2      	; 0x19c6 <xEventGroupSetBits+0x12a>
    19c4:	9f cf       	rjmp	.-194    	; 0x1904 <xEventGroupSetBits+0x68>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    19c6:	ea 81       	ldd	r30, Y+2	; 0x02
    19c8:	fb 81       	ldd	r31, Y+3	; 0x03
    19ca:	20 81       	ld	r18, Z
    19cc:	31 81       	ldd	r19, Z+1	; 0x01
    19ce:	88 85       	ldd	r24, Y+8	; 0x08
    19d0:	99 85       	ldd	r25, Y+9	; 0x09
    19d2:	80 95       	com	r24
    19d4:	90 95       	com	r25
    19d6:	82 23       	and	r24, r18
    19d8:	93 23       	and	r25, r19
    19da:	ea 81       	ldd	r30, Y+2	; 0x02
    19dc:	fb 81       	ldd	r31, Y+3	; 0x03
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	80 83       	st	Z, r24
	}
	( void ) xTaskResumeAll();
    19e2:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
    19e6:	ea 81       	ldd	r30, Y+2	; 0x02
    19e8:	fb 81       	ldd	r31, Y+3	; 0x03
    19ea:	80 81       	ld	r24, Z
    19ec:	91 81       	ldd	r25, Z+1	; 0x01
}
    19ee:	65 96       	adiw	r28, 0x15	; 21
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <vEventGroupDelete+0x6>
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <vEventGroupDelete+0x8>
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <vEventGroupDelete+0xa>
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	9e 83       	std	Y+6, r25	; 0x06
    1a10:	8d 83       	std	Y+5, r24	; 0x05
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    1a12:	8d 81       	ldd	r24, Y+5	; 0x05
    1a14:	9e 81       	ldd	r25, Y+6	; 0x06
    1a16:	9c 83       	std	Y+4, r25	; 0x04
    1a18:	8b 83       	std	Y+3, r24	; 0x03
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1e:	02 96       	adiw	r24, 0x02	; 2
    1a20:	9a 83       	std	Y+2, r25	; 0x02
    1a22:	89 83       	std	Y+1, r24	; 0x01

	vTaskSuspendAll();
    1a24:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <vTaskSuspendAll>
    1a28:	08 c0       	rjmp	.+16     	; 0x1a3a <vEventGroupDelete+0x3a>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
    1a2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a2e:	85 81       	ldd	r24, Z+5	; 0x05
    1a30:	96 81       	ldd	r25, Z+6	; 0x06
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	72 e0       	ldi	r23, 0x02	; 2
    1a36:	0e 94 c6 22 	call	0x458c	; 0x458c <xTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    1a3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a3e:	80 81       	ld	r24, Z
    1a40:	88 23       	and	r24, r24
    1a42:	99 f7       	brne	.-26     	; 0x1a2a <vEventGroupDelete+0x2a>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	9c 81       	ldd	r25, Y+4	; 0x04
    1a48:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
    1a4c:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <xTaskResumeAll>
}
    1a50:	26 96       	adiw	r28, 0x06	; 6
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	f8 94       	cli
    1a56:	de bf       	out	0x3e, r29	; 62
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	cd bf       	out	0x3d, r28	; 61
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	00 d0       	rcall	.+0      	; 0x1a68 <vEventGroupSetBitsCallback+0x6>
    1a68:	00 d0       	rcall	.+0      	; 0x1a6a <vEventGroupSetBitsCallback+0x8>
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <vEventGroupSetBitsCallback+0xa>
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	9a 83       	std	Y+2, r25	; 0x02
    1a72:	89 83       	std	Y+1, r24	; 0x01
    1a74:	4b 83       	std	Y+3, r20	; 0x03
    1a76:	5c 83       	std	Y+4, r21	; 0x04
    1a78:	6d 83       	std	Y+5, r22	; 0x05
    1a7a:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
    1a7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	9a 81       	ldd	r25, Y+2	; 0x02
    1a84:	b9 01       	movw	r22, r18
    1a86:	0e 94 4e 0c 	call	0x189c	; 0x189c <xEventGroupSetBits>
}
    1a8a:	26 96       	adiw	r28, 0x06	; 6
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <vEventGroupClearBitsCallback+0x6>
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <vEventGroupClearBitsCallback+0x8>
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <vEventGroupClearBitsCallback+0xa>
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	9a 83       	std	Y+2, r25	; 0x02
    1aac:	89 83       	std	Y+1, r24	; 0x01
    1aae:	4b 83       	std	Y+3, r20	; 0x03
    1ab0:	5c 83       	std	Y+4, r21	; 0x04
    1ab2:	6d 83       	std	Y+5, r22	; 0x05
    1ab4:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
    1ab6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	9a 81       	ldd	r25, Y+2	; 0x02
    1abe:	b9 01       	movw	r22, r18
    1ac0:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <xEventGroupClearBits>
}
    1ac4:	26 96       	adiw	r28, 0x06	; 6
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	00 d0       	rcall	.+0      	; 0x1adc <prvTestWaitCondition+0x6>
    1adc:	00 d0       	rcall	.+0      	; 0x1ade <prvTestWaitCondition+0x8>
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <prvTestWaitCondition+0xa>
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	9b 83       	std	Y+3, r25	; 0x03
    1ae6:	8a 83       	std	Y+2, r24	; 0x02
    1ae8:	7d 83       	std	Y+5, r23	; 0x05
    1aea:	6c 83       	std	Y+4, r22	; 0x04
    1aec:	4e 83       	std	Y+6, r20	; 0x06
BaseType_t xWaitConditionMet = pdFALSE;
    1aee:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
    1af0:	8e 81       	ldd	r24, Y+6	; 0x06
    1af2:	88 23       	and	r24, r24
    1af4:	59 f4       	brne	.+22     	; 0x1b0c <prvTestWaitCondition+0x36>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	9b 81       	ldd	r25, Y+3	; 0x03
    1afa:	2c 81       	ldd	r18, Y+4	; 0x04
    1afc:	3d 81       	ldd	r19, Y+5	; 0x05
    1afe:	82 23       	and	r24, r18
    1b00:	93 23       	and	r25, r19
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	81 f0       	breq	.+32     	; 0x1b26 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	0d c0       	rjmp	.+26     	; 0x1b26 <prvTestWaitCondition+0x50>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1b0c:	2a 81       	ldd	r18, Y+2	; 0x02
    1b0e:	3b 81       	ldd	r19, Y+3	; 0x03
    1b10:	8c 81       	ldd	r24, Y+4	; 0x04
    1b12:	9d 81       	ldd	r25, Y+5	; 0x05
    1b14:	28 23       	and	r18, r24
    1b16:	39 23       	and	r19, r25
    1b18:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1c:	28 17       	cp	r18, r24
    1b1e:	39 07       	cpc	r19, r25
    1b20:	11 f4       	brne	.+4      	; 0x1b26 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b28:	26 96       	adiw	r28, 0x06	; 6
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	de bf       	out	0x3e, r29	; 62
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	cd bf       	out	0x3d, r28	; 61
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	08 95       	ret

00001b3a <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1b3a:	df 93       	push	r29
    1b3c:	cf 93       	push	r28
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	2e 97       	sbiw	r28, 0x0e	; 14
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	9e 87       	std	Y+14, r25	; 0x0e
    1b50:	8d 87       	std	Y+13, r24	; 0x0d
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    1b52:	1e 82       	std	Y+6, r1	; 0x06
    1b54:	1d 82       	std	Y+5, r1	; 0x05

	vTaskSuspendAll();
    1b56:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    1b5a:	80 91 76 00 	lds	r24, 0x0076
    1b5e:	88 23       	and	r24, r24
    1b60:	29 f4       	brne	.+10     	; 0x1b6c <pvPortMalloc+0x32>
		{
			prvHeapInit();
    1b62:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	80 93 76 00 	sts	0x0076, r24
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    1b6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	51 f0       	breq	.+20     	; 0x1b88 <pvPortMalloc+0x4e>
		{
			xWantedSize += heapSTRUCT_SIZE;
    1b74:	80 91 73 00 	lds	r24, 0x0073
    1b78:	90 91 74 00 	lds	r25, 0x0074
    1b7c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b7e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b80:	82 0f       	add	r24, r18
    1b82:	93 1f       	adc	r25, r19
    1b84:	9e 87       	std	Y+14, r25	; 0x0e
    1b86:	8d 87       	std	Y+13, r24	; 0x0d
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    1b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8c:	00 97       	sbiw	r24, 0x00	; 0
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <pvPortMalloc+0x58>
    1b90:	af c0       	rjmp	.+350    	; 0x1cf0 <pvPortMalloc+0x1b6>
    1b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b96:	23 e0       	ldi	r18, 0x03	; 3
    1b98:	8f 31       	cpi	r24, 0x1F	; 31
    1b9a:	92 07       	cpc	r25, r18
    1b9c:	08 f0       	brcs	.+2      	; 0x1ba0 <pvPortMalloc+0x66>
    1b9e:	a8 c0       	rjmp	.+336    	; 0x1cf0 <pvPortMalloc+0x1b6>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    1ba0:	87 e9       	ldi	r24, 0x97	; 151
    1ba2:	93 e0       	ldi	r25, 0x03	; 3
    1ba4:	9a 87       	std	Y+10, r25	; 0x0a
    1ba6:	89 87       	std	Y+9, r24	; 0x09
			pxBlock = xStart.pxNextFreeBlock;
    1ba8:	80 91 97 03 	lds	r24, 0x0397
    1bac:	90 91 98 03 	lds	r25, 0x0398
    1bb0:	9c 87       	std	Y+12, r25	; 0x0c
    1bb2:	8b 87       	std	Y+11, r24	; 0x0b
    1bb4:	0a c0       	rjmp	.+20     	; 0x1bca <pvPortMalloc+0x90>
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
			{
				pxPreviousBlock = pxBlock;
    1bb6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bb8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bba:	9a 87       	std	Y+10, r25	; 0x0a
    1bbc:	89 87       	std	Y+9, r24	; 0x09
				pxBlock = pxBlock->pxNextFreeBlock;
    1bbe:	eb 85       	ldd	r30, Y+11	; 0x0b
    1bc0:	fc 85       	ldd	r31, Y+12	; 0x0c
    1bc2:	80 81       	ld	r24, Z
    1bc4:	91 81       	ldd	r25, Z+1	; 0x01
    1bc6:	9c 87       	std	Y+12, r25	; 0x0c
    1bc8:	8b 87       	std	Y+11, r24	; 0x0b
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1bca:	eb 85       	ldd	r30, Y+11	; 0x0b
    1bcc:	fc 85       	ldd	r31, Y+12	; 0x0c
    1bce:	22 81       	ldd	r18, Z+2	; 0x02
    1bd0:	33 81       	ldd	r19, Z+3	; 0x03
    1bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd6:	28 17       	cp	r18, r24
    1bd8:	39 07       	cpc	r19, r25
    1bda:	30 f4       	brcc	.+12     	; 0x1be8 <pvPortMalloc+0xae>
    1bdc:	eb 85       	ldd	r30, Y+11	; 0x0b
    1bde:	fc 85       	ldd	r31, Y+12	; 0x0c
    1be0:	80 81       	ld	r24, Z
    1be2:	91 81       	ldd	r25, Z+1	; 0x01
    1be4:	00 97       	sbiw	r24, 0x00	; 0
    1be6:	39 f7       	brne	.-50     	; 0x1bb6 <pvPortMalloc+0x7c>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    1be8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bea:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bec:	43 e0       	ldi	r20, 0x03	; 3
    1bee:	8b 39       	cpi	r24, 0x9B	; 155
    1bf0:	94 07       	cpc	r25, r20
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <pvPortMalloc+0xbc>
    1bf4:	7d c0       	rjmp	.+250    	; 0x1cf0 <pvPortMalloc+0x1b6>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    1bf6:	e9 85       	ldd	r30, Y+9	; 0x09
    1bf8:	fa 85       	ldd	r31, Y+10	; 0x0a
    1bfa:	20 81       	ld	r18, Z
    1bfc:	31 81       	ldd	r19, Z+1	; 0x01
    1bfe:	80 91 73 00 	lds	r24, 0x0073
    1c02:	90 91 74 00 	lds	r25, 0x0074
    1c06:	82 0f       	add	r24, r18
    1c08:	93 1f       	adc	r25, r19
    1c0a:	9e 83       	std	Y+6, r25	; 0x06
    1c0c:	8d 83       	std	Y+5, r24	; 0x05

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1c0e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1c10:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c12:	80 81       	ld	r24, Z
    1c14:	91 81       	ldd	r25, Z+1	; 0x01
    1c16:	e9 85       	ldd	r30, Y+9	; 0x09
    1c18:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c1a:	91 83       	std	Z+1, r25	; 0x01
    1c1c:	80 83       	st	Z, r24

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1c1e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1c20:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c22:	22 81       	ldd	r18, Z+2	; 0x02
    1c24:	33 81       	ldd	r19, Z+3	; 0x03
    1c26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2a:	28 1b       	sub	r18, r24
    1c2c:	39 0b       	sbc	r19, r25
    1c2e:	80 91 73 00 	lds	r24, 0x0073
    1c32:	90 91 74 00 	lds	r25, 0x0074
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	82 17       	cp	r24, r18
    1c3c:	93 07       	cpc	r25, r19
    1c3e:	08 f0       	brcs	.+2      	; 0x1c42 <pvPortMalloc+0x108>
    1c40:	47 c0       	rjmp	.+142    	; 0x1cd0 <pvPortMalloc+0x196>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1c42:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c44:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4a:	82 0f       	add	r24, r18
    1c4c:	93 1f       	adc	r25, r19
    1c4e:	98 87       	std	Y+8, r25	; 0x08
    1c50:	8f 83       	std	Y+7, r24	; 0x07

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1c52:	eb 85       	ldd	r30, Y+11	; 0x0b
    1c54:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c56:	22 81       	ldd	r18, Z+2	; 0x02
    1c58:	33 81       	ldd	r19, Z+3	; 0x03
    1c5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c5e:	a9 01       	movw	r20, r18
    1c60:	48 1b       	sub	r20, r24
    1c62:	59 0b       	sbc	r21, r25
    1c64:	ca 01       	movw	r24, r20
    1c66:	ef 81       	ldd	r30, Y+7	; 0x07
    1c68:	f8 85       	ldd	r31, Y+8	; 0x08
    1c6a:	93 83       	std	Z+3, r25	; 0x03
    1c6c:	82 83       	std	Z+2, r24	; 0x02
					pxBlock->xBlockSize = xWantedSize;
    1c6e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1c70:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c76:	93 83       	std	Z+3, r25	; 0x03
    1c78:	82 83       	std	Z+2, r24	; 0x02

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    1c7a:	ef 81       	ldd	r30, Y+7	; 0x07
    1c7c:	f8 85       	ldd	r31, Y+8	; 0x08
    1c7e:	82 81       	ldd	r24, Z+2	; 0x02
    1c80:	93 81       	ldd	r25, Z+3	; 0x03
    1c82:	9a 83       	std	Y+2, r25	; 0x02
    1c84:	89 83       	std	Y+1, r24	; 0x01
    1c86:	87 e9       	ldi	r24, 0x97	; 151
    1c88:	93 e0       	ldi	r25, 0x03	; 3
    1c8a:	9c 83       	std	Y+4, r25	; 0x04
    1c8c:	8b 83       	std	Y+3, r24	; 0x03
    1c8e:	06 c0       	rjmp	.+12     	; 0x1c9c <pvPortMalloc+0x162>
    1c90:	eb 81       	ldd	r30, Y+3	; 0x03
    1c92:	fc 81       	ldd	r31, Y+4	; 0x04
    1c94:	80 81       	ld	r24, Z
    1c96:	91 81       	ldd	r25, Z+1	; 0x01
    1c98:	9c 83       	std	Y+4, r25	; 0x04
    1c9a:	8b 83       	std	Y+3, r24	; 0x03
    1c9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1c9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1ca0:	01 90       	ld	r0, Z+
    1ca2:	f0 81       	ld	r31, Z
    1ca4:	e0 2d       	mov	r30, r0
    1ca6:	22 81       	ldd	r18, Z+2	; 0x02
    1ca8:	33 81       	ldd	r19, Z+3	; 0x03
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	9a 81       	ldd	r25, Y+2	; 0x02
    1cae:	28 17       	cp	r18, r24
    1cb0:	39 07       	cpc	r19, r25
    1cb2:	70 f3       	brcs	.-36     	; 0x1c90 <pvPortMalloc+0x156>
    1cb4:	eb 81       	ldd	r30, Y+3	; 0x03
    1cb6:	fc 81       	ldd	r31, Y+4	; 0x04
    1cb8:	80 81       	ld	r24, Z
    1cba:	91 81       	ldd	r25, Z+1	; 0x01
    1cbc:	ef 81       	ldd	r30, Y+7	; 0x07
    1cbe:	f8 85       	ldd	r31, Y+8	; 0x08
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	80 83       	st	Z, r24
    1cc4:	eb 81       	ldd	r30, Y+3	; 0x03
    1cc6:	fc 81       	ldd	r31, Y+4	; 0x04
    1cc8:	8f 81       	ldd	r24, Y+7	; 0x07
    1cca:	98 85       	ldd	r25, Y+8	; 0x08
    1ccc:	91 83       	std	Z+1, r25	; 0x01
    1cce:	80 83       	st	Z, r24
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
    1cd0:	20 91 71 00 	lds	r18, 0x0071
    1cd4:	30 91 72 00 	lds	r19, 0x0072
    1cd8:	eb 85       	ldd	r30, Y+11	; 0x0b
    1cda:	fc 85       	ldd	r31, Y+12	; 0x0c
    1cdc:	82 81       	ldd	r24, Z+2	; 0x02
    1cde:	93 81       	ldd	r25, Z+3	; 0x03
    1ce0:	a9 01       	movw	r20, r18
    1ce2:	48 1b       	sub	r20, r24
    1ce4:	59 0b       	sbc	r21, r25
    1ce6:	ca 01       	movw	r24, r20
    1ce8:	90 93 72 00 	sts	0x0072, r25
    1cec:	80 93 71 00 	sts	0x0071, r24
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1cf0:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    1cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf6:	9e 81       	ldd	r25, Y+6	; 0x06
}
    1cf8:	2e 96       	adiw	r28, 0x0e	; 14
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	cd bf       	out	0x3d, r28	; 61
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	08 95       	ret

00001d0a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	2a 97       	sbiw	r28, 0x0a	; 10
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	f8 94       	cli
    1d18:	de bf       	out	0x3e, r29	; 62
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	cd bf       	out	0x3d, r28	; 61
    1d1e:	9a 87       	std	Y+10, r25	; 0x0a
    1d20:	89 87       	std	Y+9, r24	; 0x09
uint8_t *puc = ( uint8_t * ) pv;
    1d22:	89 85       	ldd	r24, Y+9	; 0x09
    1d24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d26:	98 87       	std	Y+8, r25	; 0x08
    1d28:	8f 83       	std	Y+7, r24	; 0x07
BlockLink_t *pxLink;

	if( pv != NULL )
    1d2a:	89 85       	ldd	r24, Y+9	; 0x09
    1d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <vPortFree+0x2a>
    1d32:	4f c0       	rjmp	.+158    	; 0x1dd2 <vPortFree+0xc8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    1d34:	80 91 73 00 	lds	r24, 0x0073
    1d38:	90 91 74 00 	lds	r25, 0x0074
    1d3c:	22 27       	eor	r18, r18
    1d3e:	33 27       	eor	r19, r19
    1d40:	28 1b       	sub	r18, r24
    1d42:	39 0b       	sbc	r19, r25
    1d44:	8f 81       	ldd	r24, Y+7	; 0x07
    1d46:	98 85       	ldd	r25, Y+8	; 0x08
    1d48:	82 0f       	add	r24, r18
    1d4a:	93 1f       	adc	r25, r19
    1d4c:	98 87       	std	Y+8, r25	; 0x08
    1d4e:	8f 83       	std	Y+7, r24	; 0x07

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
    1d50:	8f 81       	ldd	r24, Y+7	; 0x07
    1d52:	98 85       	ldd	r25, Y+8	; 0x08
    1d54:	9e 83       	std	Y+6, r25	; 0x06
    1d56:	8d 83       	std	Y+5, r24	; 0x05

		vTaskSuspendAll();
    1d58:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1d5c:	ed 81       	ldd	r30, Y+5	; 0x05
    1d5e:	fe 81       	ldd	r31, Y+6	; 0x06
    1d60:	82 81       	ldd	r24, Z+2	; 0x02
    1d62:	93 81       	ldd	r25, Z+3	; 0x03
    1d64:	9a 83       	std	Y+2, r25	; 0x02
    1d66:	89 83       	std	Y+1, r24	; 0x01
    1d68:	87 e9       	ldi	r24, 0x97	; 151
    1d6a:	93 e0       	ldi	r25, 0x03	; 3
    1d6c:	9c 83       	std	Y+4, r25	; 0x04
    1d6e:	8b 83       	std	Y+3, r24	; 0x03
    1d70:	06 c0       	rjmp	.+12     	; 0x1d7e <vPortFree+0x74>
    1d72:	eb 81       	ldd	r30, Y+3	; 0x03
    1d74:	fc 81       	ldd	r31, Y+4	; 0x04
    1d76:	80 81       	ld	r24, Z
    1d78:	91 81       	ldd	r25, Z+1	; 0x01
    1d7a:	9c 83       	std	Y+4, r25	; 0x04
    1d7c:	8b 83       	std	Y+3, r24	; 0x03
    1d7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d80:	fc 81       	ldd	r31, Y+4	; 0x04
    1d82:	01 90       	ld	r0, Z+
    1d84:	f0 81       	ld	r31, Z
    1d86:	e0 2d       	mov	r30, r0
    1d88:	22 81       	ldd	r18, Z+2	; 0x02
    1d8a:	33 81       	ldd	r19, Z+3	; 0x03
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d90:	28 17       	cp	r18, r24
    1d92:	39 07       	cpc	r19, r25
    1d94:	70 f3       	brcs	.-36     	; 0x1d72 <vPortFree+0x68>
    1d96:	eb 81       	ldd	r30, Y+3	; 0x03
    1d98:	fc 81       	ldd	r31, Y+4	; 0x04
    1d9a:	80 81       	ld	r24, Z
    1d9c:	91 81       	ldd	r25, Z+1	; 0x01
    1d9e:	ed 81       	ldd	r30, Y+5	; 0x05
    1da0:	fe 81       	ldd	r31, Y+6	; 0x06
    1da2:	91 83       	std	Z+1, r25	; 0x01
    1da4:	80 83       	st	Z, r24
    1da6:	eb 81       	ldd	r30, Y+3	; 0x03
    1da8:	fc 81       	ldd	r31, Y+4	; 0x04
    1daa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dac:	9e 81       	ldd	r25, Y+6	; 0x06
    1dae:	91 83       	std	Z+1, r25	; 0x01
    1db0:	80 83       	st	Z, r24
			xFreeBytesRemaining += pxLink->xBlockSize;
    1db2:	ed 81       	ldd	r30, Y+5	; 0x05
    1db4:	fe 81       	ldd	r31, Y+6	; 0x06
    1db6:	22 81       	ldd	r18, Z+2	; 0x02
    1db8:	33 81       	ldd	r19, Z+3	; 0x03
    1dba:	80 91 71 00 	lds	r24, 0x0071
    1dbe:	90 91 72 00 	lds	r25, 0x0072
    1dc2:	82 0f       	add	r24, r18
    1dc4:	93 1f       	adc	r25, r19
    1dc6:	90 93 72 00 	sts	0x0072, r25
    1dca:	80 93 71 00 	sts	0x0071, r24
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
    1dce:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <xTaskResumeAll>
	}
}
    1dd2:	2a 96       	adiw	r28, 0x0a	; 10
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	de bf       	out	0x3e, r29	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
	return xFreeBytesRemaining;
    1dec:	80 91 71 00 	lds	r24, 0x0071
    1df0:	90 91 72 00 	lds	r25, 0x0072
}
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
	/* This just exists to keep the linker quiet. */
}
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	08 95       	ret

00001e08 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	00 d0       	rcall	.+0      	; 0x1e0e <prvHeapInit+0x6>
    1e0e:	00 d0       	rcall	.+0      	; 0x1e10 <prvHeapInit+0x8>
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1e14:	88 e7       	ldi	r24, 0x78	; 120
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	9a 83       	std	Y+2, r25	; 0x02
    1e1a:	89 83       	std	Y+1, r24	; 0x01

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e20:	90 93 98 03 	sts	0x0398, r25
    1e24:	80 93 97 03 	sts	0x0397, r24
	xStart.xBlockSize = ( size_t ) 0;
    1e28:	10 92 9a 03 	sts	0x039A, r1
    1e2c:	10 92 99 03 	sts	0x0399, r1

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    1e30:	8f e1       	ldi	r24, 0x1F	; 31
    1e32:	93 e0       	ldi	r25, 0x03	; 3
    1e34:	90 93 9e 03 	sts	0x039E, r25
    1e38:	80 93 9d 03 	sts	0x039D, r24
	xEnd.pxNextFreeBlock = NULL;
    1e3c:	10 92 9c 03 	sts	0x039C, r1
    1e40:	10 92 9b 03 	sts	0x039B, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	9a 81       	ldd	r25, Y+2	; 0x02
    1e48:	9c 83       	std	Y+4, r25	; 0x04
    1e4a:	8b 83       	std	Y+3, r24	; 0x03
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    1e4c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e4e:	fc 81       	ldd	r31, Y+4	; 0x04
    1e50:	8f e1       	ldi	r24, 0x1F	; 31
    1e52:	93 e0       	ldi	r25, 0x03	; 3
    1e54:	93 83       	std	Z+3, r25	; 0x03
    1e56:	82 83       	std	Z+2, r24	; 0x02
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    1e58:	eb 81       	ldd	r30, Y+3	; 0x03
    1e5a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e5c:	8b e9       	ldi	r24, 0x9B	; 155
    1e5e:	93 e0       	ldi	r25, 0x03	; 3
    1e60:	91 83       	std	Z+1, r25	; 0x01
    1e62:	80 83       	st	Z, r24
}
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <vListInitialise+0x6>
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	9a 83       	std	Y+2, r25	; 0x02
    1e7e:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	9a 81       	ldd	r25, Y+2	; 0x02
    1e84:	03 96       	adiw	r24, 0x03	; 3
    1e86:	e9 81       	ldd	r30, Y+1	; 0x01
    1e88:	fa 81       	ldd	r31, Y+2	; 0x02
    1e8a:	92 83       	std	Z+2, r25	; 0x02
    1e8c:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1e8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e90:	fa 81       	ldd	r31, Y+2	; 0x02
    1e92:	8f ef       	ldi	r24, 0xFF	; 255
    1e94:	9f ef       	ldi	r25, 0xFF	; 255
    1e96:	94 83       	std	Z+4, r25	; 0x04
    1e98:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9e:	03 96       	adiw	r24, 0x03	; 3
    1ea0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea4:	96 83       	std	Z+6, r25	; 0x06
    1ea6:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1eac:	03 96       	adiw	r24, 0x03	; 3
    1eae:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb2:	90 87       	std	Z+8, r25	; 0x08
    1eb4:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1eb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eba:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <vListInitialiseItem+0x6>
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	9a 83       	std	Y+2, r25	; 0x02
    1ed2:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1ed4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed8:	11 86       	std	Z+9, r1	; 0x09
    1eda:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	08 95       	ret

00001ee6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	00 d0       	rcall	.+0      	; 0x1eec <vListInsertEnd+0x6>
    1eec:	00 d0       	rcall	.+0      	; 0x1eee <vListInsertEnd+0x8>
    1eee:	00 d0       	rcall	.+0      	; 0x1ef0 <vListInsertEnd+0xa>
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	9c 83       	std	Y+4, r25	; 0x04
    1ef6:	8b 83       	std	Y+3, r24	; 0x03
    1ef8:	7e 83       	std	Y+6, r23	; 0x06
    1efa:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    1efc:	eb 81       	ldd	r30, Y+3	; 0x03
    1efe:	fc 81       	ldd	r31, Y+4	; 0x04
    1f00:	81 81       	ldd	r24, Z+1	; 0x01
    1f02:	92 81       	ldd	r25, Z+2	; 0x02
    1f04:	9a 83       	std	Y+2, r25	; 0x02
    1f06:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1f08:	ed 81       	ldd	r30, Y+5	; 0x05
    1f0a:	fe 81       	ldd	r31, Y+6	; 0x06
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f10:	93 83       	std	Z+3, r25	; 0x03
    1f12:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1f14:	e9 81       	ldd	r30, Y+1	; 0x01
    1f16:	fa 81       	ldd	r31, Y+2	; 0x02
    1f18:	84 81       	ldd	r24, Z+4	; 0x04
    1f1a:	95 81       	ldd	r25, Z+5	; 0x05
    1f1c:	ed 81       	ldd	r30, Y+5	; 0x05
    1f1e:	fe 81       	ldd	r31, Y+6	; 0x06
    1f20:	95 83       	std	Z+5, r25	; 0x05
    1f22:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1f24:	e9 81       	ldd	r30, Y+1	; 0x01
    1f26:	fa 81       	ldd	r31, Y+2	; 0x02
    1f28:	04 80       	ldd	r0, Z+4	; 0x04
    1f2a:	f5 81       	ldd	r31, Z+5	; 0x05
    1f2c:	e0 2d       	mov	r30, r0
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	93 83       	std	Z+3, r25	; 0x03
    1f34:	82 83       	std	Z+2, r24	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    1f36:	e9 81       	ldd	r30, Y+1	; 0x01
    1f38:	fa 81       	ldd	r31, Y+2	; 0x02
    1f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3e:	95 83       	std	Z+5, r25	; 0x05
    1f40:	84 83       	std	Z+4, r24	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1f42:	ed 81       	ldd	r30, Y+5	; 0x05
    1f44:	fe 81       	ldd	r31, Y+6	; 0x06
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4a:	91 87       	std	Z+9, r25	; 0x09
    1f4c:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1f4e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f50:	fc 81       	ldd	r31, Y+4	; 0x04
    1f52:	80 81       	ld	r24, Z
    1f54:	8f 5f       	subi	r24, 0xFF	; 255
    1f56:	eb 81       	ldd	r30, Y+3	; 0x03
    1f58:	fc 81       	ldd	r31, Y+4	; 0x04
    1f5a:	80 83       	st	Z, r24
}
    1f5c:	26 96       	adiw	r28, 0x06	; 6
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	f8 94       	cli
    1f62:	de bf       	out	0x3e, r29	; 62
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	28 97       	sbiw	r28, 0x08	; 8
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	9e 83       	std	Y+6, r25	; 0x06
    1f84:	8d 83       	std	Y+5, r24	; 0x05
    1f86:	78 87       	std	Y+8, r23	; 0x08
    1f88:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1f8a:	ef 81       	ldd	r30, Y+7	; 0x07
    1f8c:	f8 85       	ldd	r31, Y+8	; 0x08
    1f8e:	80 81       	ld	r24, Z
    1f90:	91 81       	ldd	r25, Z+1	; 0x01
    1f92:	9a 83       	std	Y+2, r25	; 0x02
    1f94:	89 83       	std	Y+1, r24	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9a:	2f ef       	ldi	r18, 0xFF	; 255
    1f9c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f9e:	92 07       	cpc	r25, r18
    1fa0:	39 f4       	brne	.+14     	; 0x1fb0 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1fa2:	ed 81       	ldd	r30, Y+5	; 0x05
    1fa4:	fe 81       	ldd	r31, Y+6	; 0x06
    1fa6:	87 81       	ldd	r24, Z+7	; 0x07
    1fa8:	90 85       	ldd	r25, Z+8	; 0x08
    1faa:	9c 83       	std	Y+4, r25	; 0x04
    1fac:	8b 83       	std	Y+3, r24	; 0x03
    1fae:	18 c0       	rjmp	.+48     	; 0x1fe0 <vListInsert+0x72>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb4:	03 96       	adiw	r24, 0x03	; 3
    1fb6:	9c 83       	std	Y+4, r25	; 0x04
    1fb8:	8b 83       	std	Y+3, r24	; 0x03
    1fba:	06 c0       	rjmp	.+12     	; 0x1fc8 <vListInsert+0x5a>
    1fbc:	eb 81       	ldd	r30, Y+3	; 0x03
    1fbe:	fc 81       	ldd	r31, Y+4	; 0x04
    1fc0:	82 81       	ldd	r24, Z+2	; 0x02
    1fc2:	93 81       	ldd	r25, Z+3	; 0x03
    1fc4:	9c 83       	std	Y+4, r25	; 0x04
    1fc6:	8b 83       	std	Y+3, r24	; 0x03
    1fc8:	eb 81       	ldd	r30, Y+3	; 0x03
    1fca:	fc 81       	ldd	r31, Y+4	; 0x04
    1fcc:	02 80       	ldd	r0, Z+2	; 0x02
    1fce:	f3 81       	ldd	r31, Z+3	; 0x03
    1fd0:	e0 2d       	mov	r30, r0
    1fd2:	20 81       	ld	r18, Z
    1fd4:	31 81       	ldd	r19, Z+1	; 0x01
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fda:	82 17       	cp	r24, r18
    1fdc:	93 07       	cpc	r25, r19
    1fde:	70 f7       	brcc	.-36     	; 0x1fbc <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1fe0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe4:	82 81       	ldd	r24, Z+2	; 0x02
    1fe6:	93 81       	ldd	r25, Z+3	; 0x03
    1fe8:	ef 81       	ldd	r30, Y+7	; 0x07
    1fea:	f8 85       	ldd	r31, Y+8	; 0x08
    1fec:	93 83       	std	Z+3, r25	; 0x03
    1fee:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1ff0:	ef 81       	ldd	r30, Y+7	; 0x07
    1ff2:	f8 85       	ldd	r31, Y+8	; 0x08
    1ff4:	02 80       	ldd	r0, Z+2	; 0x02
    1ff6:	f3 81       	ldd	r31, Z+3	; 0x03
    1ff8:	e0 2d       	mov	r30, r0
    1ffa:	8f 81       	ldd	r24, Y+7	; 0x07
    1ffc:	98 85       	ldd	r25, Y+8	; 0x08
    1ffe:	95 83       	std	Z+5, r25	; 0x05
    2000:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    2002:	ef 81       	ldd	r30, Y+7	; 0x07
    2004:	f8 85       	ldd	r31, Y+8	; 0x08
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	9c 81       	ldd	r25, Y+4	; 0x04
    200a:	95 83       	std	Z+5, r25	; 0x05
    200c:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = pxNewListItem;
    200e:	eb 81       	ldd	r30, Y+3	; 0x03
    2010:	fc 81       	ldd	r31, Y+4	; 0x04
    2012:	8f 81       	ldd	r24, Y+7	; 0x07
    2014:	98 85       	ldd	r25, Y+8	; 0x08
    2016:	93 83       	std	Z+3, r25	; 0x03
    2018:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    201a:	ef 81       	ldd	r30, Y+7	; 0x07
    201c:	f8 85       	ldd	r31, Y+8	; 0x08
    201e:	8d 81       	ldd	r24, Y+5	; 0x05
    2020:	9e 81       	ldd	r25, Y+6	; 0x06
    2022:	91 87       	std	Z+9, r25	; 0x09
    2024:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    2026:	ed 81       	ldd	r30, Y+5	; 0x05
    2028:	fe 81       	ldd	r31, Y+6	; 0x06
    202a:	80 81       	ld	r24, Z
    202c:	8f 5f       	subi	r24, 0xFF	; 255
    202e:	ed 81       	ldd	r30, Y+5	; 0x05
    2030:	fe 81       	ldd	r31, Y+6	; 0x06
    2032:	80 83       	st	Z, r24
}
    2034:	28 96       	adiw	r28, 0x08	; 8
    2036:	0f b6       	in	r0, 0x3f	; 63
    2038:	f8 94       	cli
    203a:	de bf       	out	0x3e, r29	; 62
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	cd bf       	out	0x3d, r28	; 61
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	00 d0       	rcall	.+0      	; 0x204c <uxListRemove+0x6>
    204c:	00 d0       	rcall	.+0      	; 0x204e <uxListRemove+0x8>
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	9c 83       	std	Y+4, r25	; 0x04
    2054:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    2056:	eb 81       	ldd	r30, Y+3	; 0x03
    2058:	fc 81       	ldd	r31, Y+4	; 0x04
    205a:	80 85       	ldd	r24, Z+8	; 0x08
    205c:	91 85       	ldd	r25, Z+9	; 0x09
    205e:	9a 83       	std	Y+2, r25	; 0x02
    2060:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2062:	eb 81       	ldd	r30, Y+3	; 0x03
    2064:	fc 81       	ldd	r31, Y+4	; 0x04
    2066:	a2 81       	ldd	r26, Z+2	; 0x02
    2068:	b3 81       	ldd	r27, Z+3	; 0x03
    206a:	eb 81       	ldd	r30, Y+3	; 0x03
    206c:	fc 81       	ldd	r31, Y+4	; 0x04
    206e:	84 81       	ldd	r24, Z+4	; 0x04
    2070:	95 81       	ldd	r25, Z+5	; 0x05
    2072:	15 96       	adiw	r26, 0x05	; 5
    2074:	9c 93       	st	X, r25
    2076:	8e 93       	st	-X, r24
    2078:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    207a:	eb 81       	ldd	r30, Y+3	; 0x03
    207c:	fc 81       	ldd	r31, Y+4	; 0x04
    207e:	a4 81       	ldd	r26, Z+4	; 0x04
    2080:	b5 81       	ldd	r27, Z+5	; 0x05
    2082:	eb 81       	ldd	r30, Y+3	; 0x03
    2084:	fc 81       	ldd	r31, Y+4	; 0x04
    2086:	82 81       	ldd	r24, Z+2	; 0x02
    2088:	93 81       	ldd	r25, Z+3	; 0x03
    208a:	13 96       	adiw	r26, 0x03	; 3
    208c:	9c 93       	st	X, r25
    208e:	8e 93       	st	-X, r24
    2090:	12 97       	sbiw	r26, 0x02	; 2

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2092:	e9 81       	ldd	r30, Y+1	; 0x01
    2094:	fa 81       	ldd	r31, Y+2	; 0x02
    2096:	21 81       	ldd	r18, Z+1	; 0x01
    2098:	32 81       	ldd	r19, Z+2	; 0x02
    209a:	8b 81       	ldd	r24, Y+3	; 0x03
    209c:	9c 81       	ldd	r25, Y+4	; 0x04
    209e:	28 17       	cp	r18, r24
    20a0:	39 07       	cpc	r19, r25
    20a2:	41 f4       	brne	.+16     	; 0x20b4 <uxListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    20a4:	eb 81       	ldd	r30, Y+3	; 0x03
    20a6:	fc 81       	ldd	r31, Y+4	; 0x04
    20a8:	84 81       	ldd	r24, Z+4	; 0x04
    20aa:	95 81       	ldd	r25, Z+5	; 0x05
    20ac:	e9 81       	ldd	r30, Y+1	; 0x01
    20ae:	fa 81       	ldd	r31, Y+2	; 0x02
    20b0:	92 83       	std	Z+2, r25	; 0x02
    20b2:	81 83       	std	Z+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    20b4:	eb 81       	ldd	r30, Y+3	; 0x03
    20b6:	fc 81       	ldd	r31, Y+4	; 0x04
    20b8:	11 86       	std	Z+9, r1	; 0x09
    20ba:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    20bc:	e9 81       	ldd	r30, Y+1	; 0x01
    20be:	fa 81       	ldd	r31, Y+2	; 0x02
    20c0:	80 81       	ld	r24, Z
    20c2:	81 50       	subi	r24, 0x01	; 1
    20c4:	e9 81       	ldd	r30, Y+1	; 0x01
    20c6:	fa 81       	ldd	r31, Y+2	; 0x02
    20c8:	80 83       	st	Z, r24

	return pxList->uxNumberOfItems;
    20ca:	e9 81       	ldd	r30, Y+1	; 0x01
    20cc:	fa 81       	ldd	r31, Y+2	; 0x02
    20ce:	80 81       	ld	r24, Z
}
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	08 95       	ret

000020de <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	28 97       	sbiw	r28, 0x08	; 8
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	9c 83       	std	Y+4, r25	; 0x04
    20f4:	8b 83       	std	Y+3, r24	; 0x03
    20f6:	7e 83       	std	Y+6, r23	; 0x06
    20f8:	6d 83       	std	Y+5, r22	; 0x05
    20fa:	58 87       	std	Y+8, r21	; 0x08
    20fc:	4f 83       	std	Y+7, r20	; 0x07
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    20fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2100:	fc 81       	ldd	r31, Y+4	; 0x04
    2102:	81 e1       	ldi	r24, 0x11	; 17
    2104:	80 83       	st	Z, r24
	pxTopOfStack--;
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	9c 81       	ldd	r25, Y+4	; 0x04
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	9c 83       	std	Y+4, r25	; 0x04
    210e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    2110:	eb 81       	ldd	r30, Y+3	; 0x03
    2112:	fc 81       	ldd	r31, Y+4	; 0x04
    2114:	82 e2       	ldi	r24, 0x22	; 34
    2116:	80 83       	st	Z, r24
	pxTopOfStack--;
    2118:	8b 81       	ldd	r24, Y+3	; 0x03
    211a:	9c 81       	ldd	r25, Y+4	; 0x04
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	9c 83       	std	Y+4, r25	; 0x04
    2120:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    2122:	eb 81       	ldd	r30, Y+3	; 0x03
    2124:	fc 81       	ldd	r31, Y+4	; 0x04
    2126:	83 e3       	ldi	r24, 0x33	; 51
    2128:	80 83       	st	Z, r24
	pxTopOfStack--;
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	9c 81       	ldd	r25, Y+4	; 0x04
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	9c 83       	std	Y+4, r25	; 0x04
    2132:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
    2134:	8d 81       	ldd	r24, Y+5	; 0x05
    2136:	9e 81       	ldd	r25, Y+6	; 0x06
    2138:	9a 83       	std	Y+2, r25	; 0x02
    213a:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	eb 81       	ldd	r30, Y+3	; 0x03
    2140:	fc 81       	ldd	r31, Y+4	; 0x04
    2142:	80 83       	st	Z, r24
	pxTopOfStack--;
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	9c 83       	std	Y+4, r25	; 0x04
    214c:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	9a 81       	ldd	r25, Y+2	; 0x02
    2152:	89 2f       	mov	r24, r25
    2154:	99 27       	eor	r25, r25
    2156:	9a 83       	std	Y+2, r25	; 0x02
    2158:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	eb 81       	ldd	r30, Y+3	; 0x03
    215e:	fc 81       	ldd	r31, Y+4	; 0x04
    2160:	80 83       	st	Z, r24
	pxTopOfStack--;
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	9c 81       	ldd	r25, Y+4	; 0x04
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	9c 83       	std	Y+4, r25	; 0x04
    216a:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    216c:	eb 81       	ldd	r30, Y+3	; 0x03
    216e:	fc 81       	ldd	r31, Y+4	; 0x04
    2170:	10 82       	st	Z, r1
	pxTopOfStack--;
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	9c 81       	ldd	r25, Y+4	; 0x04
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	9c 83       	std	Y+4, r25	; 0x04
    217a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    217c:	eb 81       	ldd	r30, Y+3	; 0x03
    217e:	fc 81       	ldd	r31, Y+4	; 0x04
    2180:	80 e8       	ldi	r24, 0x80	; 128
    2182:	80 83       	st	Z, r24
	pxTopOfStack--;
    2184:	8b 81       	ldd	r24, Y+3	; 0x03
    2186:	9c 81       	ldd	r25, Y+4	; 0x04
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	9c 83       	std	Y+4, r25	; 0x04
    218c:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    218e:	eb 81       	ldd	r30, Y+3	; 0x03
    2190:	fc 81       	ldd	r31, Y+4	; 0x04
    2192:	10 82       	st	Z, r1
	pxTopOfStack--;
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	9c 81       	ldd	r25, Y+4	; 0x04
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	9c 83       	std	Y+4, r25	; 0x04
    219c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    219e:	eb 81       	ldd	r30, Y+3	; 0x03
    21a0:	fc 81       	ldd	r31, Y+4	; 0x04
    21a2:	82 e0       	ldi	r24, 0x02	; 2
    21a4:	80 83       	st	Z, r24
	pxTopOfStack--;
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	9c 81       	ldd	r25, Y+4	; 0x04
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	9c 83       	std	Y+4, r25	; 0x04
    21ae:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    21b0:	eb 81       	ldd	r30, Y+3	; 0x03
    21b2:	fc 81       	ldd	r31, Y+4	; 0x04
    21b4:	83 e0       	ldi	r24, 0x03	; 3
    21b6:	80 83       	st	Z, r24
	pxTopOfStack--;
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	9c 81       	ldd	r25, Y+4	; 0x04
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	9c 83       	std	Y+4, r25	; 0x04
    21c0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    21c2:	eb 81       	ldd	r30, Y+3	; 0x03
    21c4:	fc 81       	ldd	r31, Y+4	; 0x04
    21c6:	84 e0       	ldi	r24, 0x04	; 4
    21c8:	80 83       	st	Z, r24
	pxTopOfStack--;
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	9c 81       	ldd	r25, Y+4	; 0x04
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	9c 83       	std	Y+4, r25	; 0x04
    21d2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    21d4:	eb 81       	ldd	r30, Y+3	; 0x03
    21d6:	fc 81       	ldd	r31, Y+4	; 0x04
    21d8:	85 e0       	ldi	r24, 0x05	; 5
    21da:	80 83       	st	Z, r24
	pxTopOfStack--;
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	9c 81       	ldd	r25, Y+4	; 0x04
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	9c 83       	std	Y+4, r25	; 0x04
    21e4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    21e6:	eb 81       	ldd	r30, Y+3	; 0x03
    21e8:	fc 81       	ldd	r31, Y+4	; 0x04
    21ea:	86 e0       	ldi	r24, 0x06	; 6
    21ec:	80 83       	st	Z, r24
	pxTopOfStack--;
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	9c 81       	ldd	r25, Y+4	; 0x04
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	9c 83       	std	Y+4, r25	; 0x04
    21f6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    21f8:	eb 81       	ldd	r30, Y+3	; 0x03
    21fa:	fc 81       	ldd	r31, Y+4	; 0x04
    21fc:	87 e0       	ldi	r24, 0x07	; 7
    21fe:	80 83       	st	Z, r24
	pxTopOfStack--;
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	9c 81       	ldd	r25, Y+4	; 0x04
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	9c 83       	std	Y+4, r25	; 0x04
    2208:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    220a:	eb 81       	ldd	r30, Y+3	; 0x03
    220c:	fc 81       	ldd	r31, Y+4	; 0x04
    220e:	88 e0       	ldi	r24, 0x08	; 8
    2210:	80 83       	st	Z, r24
	pxTopOfStack--;
    2212:	8b 81       	ldd	r24, Y+3	; 0x03
    2214:	9c 81       	ldd	r25, Y+4	; 0x04
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	9c 83       	std	Y+4, r25	; 0x04
    221a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    221c:	eb 81       	ldd	r30, Y+3	; 0x03
    221e:	fc 81       	ldd	r31, Y+4	; 0x04
    2220:	89 e0       	ldi	r24, 0x09	; 9
    2222:	80 83       	st	Z, r24
	pxTopOfStack--;
    2224:	8b 81       	ldd	r24, Y+3	; 0x03
    2226:	9c 81       	ldd	r25, Y+4	; 0x04
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	9c 83       	std	Y+4, r25	; 0x04
    222c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    222e:	eb 81       	ldd	r30, Y+3	; 0x03
    2230:	fc 81       	ldd	r31, Y+4	; 0x04
    2232:	80 e1       	ldi	r24, 0x10	; 16
    2234:	80 83       	st	Z, r24
	pxTopOfStack--;
    2236:	8b 81       	ldd	r24, Y+3	; 0x03
    2238:	9c 81       	ldd	r25, Y+4	; 0x04
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	9c 83       	std	Y+4, r25	; 0x04
    223e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    2240:	eb 81       	ldd	r30, Y+3	; 0x03
    2242:	fc 81       	ldd	r31, Y+4	; 0x04
    2244:	81 e1       	ldi	r24, 0x11	; 17
    2246:	80 83       	st	Z, r24
	pxTopOfStack--;
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	9c 81       	ldd	r25, Y+4	; 0x04
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	9c 83       	std	Y+4, r25	; 0x04
    2250:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    2252:	eb 81       	ldd	r30, Y+3	; 0x03
    2254:	fc 81       	ldd	r31, Y+4	; 0x04
    2256:	82 e1       	ldi	r24, 0x12	; 18
    2258:	80 83       	st	Z, r24
	pxTopOfStack--;
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	9c 81       	ldd	r25, Y+4	; 0x04
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	9c 83       	std	Y+4, r25	; 0x04
    2262:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    2264:	eb 81       	ldd	r30, Y+3	; 0x03
    2266:	fc 81       	ldd	r31, Y+4	; 0x04
    2268:	83 e1       	ldi	r24, 0x13	; 19
    226a:	80 83       	st	Z, r24
	pxTopOfStack--;
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	9c 81       	ldd	r25, Y+4	; 0x04
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	9c 83       	std	Y+4, r25	; 0x04
    2274:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    2276:	eb 81       	ldd	r30, Y+3	; 0x03
    2278:	fc 81       	ldd	r31, Y+4	; 0x04
    227a:	84 e1       	ldi	r24, 0x14	; 20
    227c:	80 83       	st	Z, r24
	pxTopOfStack--;
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	9c 81       	ldd	r25, Y+4	; 0x04
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	9c 83       	std	Y+4, r25	; 0x04
    2286:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    2288:	eb 81       	ldd	r30, Y+3	; 0x03
    228a:	fc 81       	ldd	r31, Y+4	; 0x04
    228c:	85 e1       	ldi	r24, 0x15	; 21
    228e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	9c 81       	ldd	r25, Y+4	; 0x04
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	9c 83       	std	Y+4, r25	; 0x04
    2298:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    229a:	eb 81       	ldd	r30, Y+3	; 0x03
    229c:	fc 81       	ldd	r31, Y+4	; 0x04
    229e:	86 e1       	ldi	r24, 0x16	; 22
    22a0:	80 83       	st	Z, r24
	pxTopOfStack--;
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	9c 81       	ldd	r25, Y+4	; 0x04
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	9c 83       	std	Y+4, r25	; 0x04
    22aa:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    22ac:	eb 81       	ldd	r30, Y+3	; 0x03
    22ae:	fc 81       	ldd	r31, Y+4	; 0x04
    22b0:	87 e1       	ldi	r24, 0x17	; 23
    22b2:	80 83       	st	Z, r24
	pxTopOfStack--;
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	9c 81       	ldd	r25, Y+4	; 0x04
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	9c 83       	std	Y+4, r25	; 0x04
    22bc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    22be:	eb 81       	ldd	r30, Y+3	; 0x03
    22c0:	fc 81       	ldd	r31, Y+4	; 0x04
    22c2:	88 e1       	ldi	r24, 0x18	; 24
    22c4:	80 83       	st	Z, r24
	pxTopOfStack--;
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	9c 83       	std	Y+4, r25	; 0x04
    22ce:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    22d0:	eb 81       	ldd	r30, Y+3	; 0x03
    22d2:	fc 81       	ldd	r31, Y+4	; 0x04
    22d4:	89 e1       	ldi	r24, 0x19	; 25
    22d6:	80 83       	st	Z, r24
	pxTopOfStack--;
    22d8:	8b 81       	ldd	r24, Y+3	; 0x03
    22da:	9c 81       	ldd	r25, Y+4	; 0x04
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	9c 83       	std	Y+4, r25	; 0x04
    22e0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    22e2:	eb 81       	ldd	r30, Y+3	; 0x03
    22e4:	fc 81       	ldd	r31, Y+4	; 0x04
    22e6:	80 e2       	ldi	r24, 0x20	; 32
    22e8:	80 83       	st	Z, r24
	pxTopOfStack--;
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	9c 81       	ldd	r25, Y+4	; 0x04
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	9c 83       	std	Y+4, r25	; 0x04
    22f2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    22f4:	eb 81       	ldd	r30, Y+3	; 0x03
    22f6:	fc 81       	ldd	r31, Y+4	; 0x04
    22f8:	81 e2       	ldi	r24, 0x21	; 33
    22fa:	80 83       	st	Z, r24
	pxTopOfStack--;
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	9c 83       	std	Y+4, r25	; 0x04
    2304:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    2306:	eb 81       	ldd	r30, Y+3	; 0x03
    2308:	fc 81       	ldd	r31, Y+4	; 0x04
    230a:	82 e2       	ldi	r24, 0x22	; 34
    230c:	80 83       	st	Z, r24
	pxTopOfStack--;
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	9c 81       	ldd	r25, Y+4	; 0x04
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	9c 83       	std	Y+4, r25	; 0x04
    2316:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    2318:	eb 81       	ldd	r30, Y+3	; 0x03
    231a:	fc 81       	ldd	r31, Y+4	; 0x04
    231c:	83 e2       	ldi	r24, 0x23	; 35
    231e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	9c 81       	ldd	r25, Y+4	; 0x04
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	9c 83       	std	Y+4, r25	; 0x04
    2328:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
    232a:	8f 81       	ldd	r24, Y+7	; 0x07
    232c:	98 85       	ldd	r25, Y+8	; 0x08
    232e:	9a 83       	std	Y+2, r25	; 0x02
    2330:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	eb 81       	ldd	r30, Y+3	; 0x03
    2336:	fc 81       	ldd	r31, Y+4	; 0x04
    2338:	80 83       	st	Z, r24
	pxTopOfStack--;
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	9c 81       	ldd	r25, Y+4	; 0x04
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	9c 83       	std	Y+4, r25	; 0x04
    2342:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	9a 81       	ldd	r25, Y+2	; 0x02
    2348:	89 2f       	mov	r24, r25
    234a:	99 27       	eor	r25, r25
    234c:	9a 83       	std	Y+2, r25	; 0x02
    234e:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	eb 81       	ldd	r30, Y+3	; 0x03
    2354:	fc 81       	ldd	r31, Y+4	; 0x04
    2356:	80 83       	st	Z, r24
	pxTopOfStack--;
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	9c 81       	ldd	r25, Y+4	; 0x04
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	9c 83       	std	Y+4, r25	; 0x04
    2360:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    2362:	eb 81       	ldd	r30, Y+3	; 0x03
    2364:	fc 81       	ldd	r31, Y+4	; 0x04
    2366:	86 e2       	ldi	r24, 0x26	; 38
    2368:	80 83       	st	Z, r24
	pxTopOfStack--;
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
    236c:	9c 81       	ldd	r25, Y+4	; 0x04
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	9c 83       	std	Y+4, r25	; 0x04
    2372:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    2374:	eb 81       	ldd	r30, Y+3	; 0x03
    2376:	fc 81       	ldd	r31, Y+4	; 0x04
    2378:	87 e2       	ldi	r24, 0x27	; 39
    237a:	80 83       	st	Z, r24
	pxTopOfStack--;
    237c:	8b 81       	ldd	r24, Y+3	; 0x03
    237e:	9c 81       	ldd	r25, Y+4	; 0x04
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	9c 83       	std	Y+4, r25	; 0x04
    2384:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    2386:	eb 81       	ldd	r30, Y+3	; 0x03
    2388:	fc 81       	ldd	r31, Y+4	; 0x04
    238a:	88 e2       	ldi	r24, 0x28	; 40
    238c:	80 83       	st	Z, r24
	pxTopOfStack--;
    238e:	8b 81       	ldd	r24, Y+3	; 0x03
    2390:	9c 81       	ldd	r25, Y+4	; 0x04
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	9c 83       	std	Y+4, r25	; 0x04
    2396:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    2398:	eb 81       	ldd	r30, Y+3	; 0x03
    239a:	fc 81       	ldd	r31, Y+4	; 0x04
    239c:	89 e2       	ldi	r24, 0x29	; 41
    239e:	80 83       	st	Z, r24
	pxTopOfStack--;
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	9c 81       	ldd	r25, Y+4	; 0x04
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	9c 83       	std	Y+4, r25	; 0x04
    23a8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    23aa:	eb 81       	ldd	r30, Y+3	; 0x03
    23ac:	fc 81       	ldd	r31, Y+4	; 0x04
    23ae:	80 e3       	ldi	r24, 0x30	; 48
    23b0:	80 83       	st	Z, r24
	pxTopOfStack--;
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	9c 81       	ldd	r25, Y+4	; 0x04
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	9c 83       	std	Y+4, r25	; 0x04
    23ba:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    23bc:	eb 81       	ldd	r30, Y+3	; 0x03
    23be:	fc 81       	ldd	r31, Y+4	; 0x04
    23c0:	81 e3       	ldi	r24, 0x31	; 49
    23c2:	80 83       	st	Z, r24
	pxTopOfStack--;
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	9c 81       	ldd	r25, Y+4	; 0x04
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	9c 83       	std	Y+4, r25	; 0x04
    23cc:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	9c 81       	ldd	r25, Y+4	; 0x04
}
    23d2:	28 96       	adiw	r28, 0x08	; 8
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	08 95       	ret

000023e4 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    23ec:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    23f0:	a0 91 9f 03 	lds	r26, 0x039F
    23f4:	b0 91 a0 03 	lds	r27, 0x03A0
    23f8:	cd 91       	ld	r28, X+
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	dd 91       	ld	r29, X+
    23fe:	de bf       	out	0x3e, r29	; 62
    2400:	ff 91       	pop	r31
    2402:	ef 91       	pop	r30
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
    2408:	bf 91       	pop	r27
    240a:	af 91       	pop	r26
    240c:	9f 91       	pop	r25
    240e:	8f 91       	pop	r24
    2410:	7f 91       	pop	r23
    2412:	6f 91       	pop	r22
    2414:	5f 91       	pop	r21
    2416:	4f 91       	pop	r20
    2418:	3f 91       	pop	r19
    241a:	2f 91       	pop	r18
    241c:	1f 91       	pop	r17
    241e:	0f 91       	pop	r16
    2420:	ff 90       	pop	r15
    2422:	ef 90       	pop	r14
    2424:	df 90       	pop	r13
    2426:	cf 90       	pop	r12
    2428:	bf 90       	pop	r11
    242a:	af 90       	pop	r10
    242c:	9f 90       	pop	r9
    242e:	8f 90       	pop	r8
    2430:	7f 90       	pop	r7
    2432:	6f 90       	pop	r6
    2434:	5f 90       	pop	r5
    2436:	4f 90       	pop	r4
    2438:	3f 90       	pop	r3
    243a:	2f 90       	pop	r2
    243c:	1f 90       	pop	r1
    243e:	0f 90       	pop	r0
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    2444:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    2446:	81 e0       	ldi	r24, 0x01	; 1
}
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	08 95       	ret

0000245c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    245c:	0f 92       	push	r0
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	0f 92       	push	r0
    2464:	1f 92       	push	r1
    2466:	11 24       	eor	r1, r1
    2468:	2f 92       	push	r2
    246a:	3f 92       	push	r3
    246c:	4f 92       	push	r4
    246e:	5f 92       	push	r5
    2470:	6f 92       	push	r6
    2472:	7f 92       	push	r7
    2474:	8f 92       	push	r8
    2476:	9f 92       	push	r9
    2478:	af 92       	push	r10
    247a:	bf 92       	push	r11
    247c:	cf 92       	push	r12
    247e:	df 92       	push	r13
    2480:	ef 92       	push	r14
    2482:	ff 92       	push	r15
    2484:	0f 93       	push	r16
    2486:	1f 93       	push	r17
    2488:	2f 93       	push	r18
    248a:	3f 93       	push	r19
    248c:	4f 93       	push	r20
    248e:	5f 93       	push	r21
    2490:	6f 93       	push	r22
    2492:	7f 93       	push	r23
    2494:	8f 93       	push	r24
    2496:	9f 93       	push	r25
    2498:	af 93       	push	r26
    249a:	bf 93       	push	r27
    249c:	cf 93       	push	r28
    249e:	df 93       	push	r29
    24a0:	ef 93       	push	r30
    24a2:	ff 93       	push	r31
    24a4:	a0 91 9f 03 	lds	r26, 0x039F
    24a8:	b0 91 a0 03 	lds	r27, 0x03A0
    24ac:	0d b6       	in	r0, 0x3d	; 61
    24ae:	0d 92       	st	X+, r0
    24b0:	0e b6       	in	r0, 0x3e	; 62
    24b2:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    24b4:	0e 94 9c 21 	call	0x4338	; 0x4338 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    24b8:	a0 91 9f 03 	lds	r26, 0x039F
    24bc:	b0 91 a0 03 	lds	r27, 0x03A0
    24c0:	cd 91       	ld	r28, X+
    24c2:	cd bf       	out	0x3d, r28	; 61
    24c4:	dd 91       	ld	r29, X+
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	ff 91       	pop	r31
    24ca:	ef 91       	pop	r30
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	bf 91       	pop	r27
    24d2:	af 91       	pop	r26
    24d4:	9f 91       	pop	r25
    24d6:	8f 91       	pop	r24
    24d8:	7f 91       	pop	r23
    24da:	6f 91       	pop	r22
    24dc:	5f 91       	pop	r21
    24de:	4f 91       	pop	r20
    24e0:	3f 91       	pop	r19
    24e2:	2f 91       	pop	r18
    24e4:	1f 91       	pop	r17
    24e6:	0f 91       	pop	r16
    24e8:	ff 90       	pop	r15
    24ea:	ef 90       	pop	r14
    24ec:	df 90       	pop	r13
    24ee:	cf 90       	pop	r12
    24f0:	bf 90       	pop	r11
    24f2:	af 90       	pop	r10
    24f4:	9f 90       	pop	r9
    24f6:	8f 90       	pop	r8
    24f8:	7f 90       	pop	r7
    24fa:	6f 90       	pop	r6
    24fc:	5f 90       	pop	r5
    24fe:	4f 90       	pop	r4
    2500:	3f 90       	pop	r3
    2502:	2f 90       	pop	r2
    2504:	1f 90       	pop	r1
    2506:	0f 90       	pop	r0
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	0f 90       	pop	r0

	asm volatile ( "ret" );
    250c:	08 95       	ret

0000250e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    250e:	0f 92       	push	r0
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	f8 94       	cli
    2514:	0f 92       	push	r0
    2516:	1f 92       	push	r1
    2518:	11 24       	eor	r1, r1
    251a:	2f 92       	push	r2
    251c:	3f 92       	push	r3
    251e:	4f 92       	push	r4
    2520:	5f 92       	push	r5
    2522:	6f 92       	push	r6
    2524:	7f 92       	push	r7
    2526:	8f 92       	push	r8
    2528:	9f 92       	push	r9
    252a:	af 92       	push	r10
    252c:	bf 92       	push	r11
    252e:	cf 92       	push	r12
    2530:	df 92       	push	r13
    2532:	ef 92       	push	r14
    2534:	ff 92       	push	r15
    2536:	0f 93       	push	r16
    2538:	1f 93       	push	r17
    253a:	2f 93       	push	r18
    253c:	3f 93       	push	r19
    253e:	4f 93       	push	r20
    2540:	5f 93       	push	r21
    2542:	6f 93       	push	r22
    2544:	7f 93       	push	r23
    2546:	8f 93       	push	r24
    2548:	9f 93       	push	r25
    254a:	af 93       	push	r26
    254c:	bf 93       	push	r27
    254e:	cf 93       	push	r28
    2550:	df 93       	push	r29
    2552:	ef 93       	push	r30
    2554:	ff 93       	push	r31
    2556:	a0 91 9f 03 	lds	r26, 0x039F
    255a:	b0 91 a0 03 	lds	r27, 0x03A0
    255e:	0d b6       	in	r0, 0x3d	; 61
    2560:	0d 92       	st	X+, r0
    2562:	0e b6       	in	r0, 0x3e	; 62
    2564:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    2566:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <xTaskIncrementTick>
    256a:	88 23       	and	r24, r24
    256c:	11 f0       	breq	.+4      	; 0x2572 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    256e:	0e 94 9c 21 	call	0x4338	; 0x4338 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    2572:	a0 91 9f 03 	lds	r26, 0x039F
    2576:	b0 91 a0 03 	lds	r27, 0x03A0
    257a:	cd 91       	ld	r28, X+
    257c:	cd bf       	out	0x3d, r28	; 61
    257e:	dd 91       	ld	r29, X+
    2580:	de bf       	out	0x3e, r29	; 62
    2582:	ff 91       	pop	r31
    2584:	ef 91       	pop	r30
    2586:	df 91       	pop	r29
    2588:	cf 91       	pop	r28
    258a:	bf 91       	pop	r27
    258c:	af 91       	pop	r26
    258e:	9f 91       	pop	r25
    2590:	8f 91       	pop	r24
    2592:	7f 91       	pop	r23
    2594:	6f 91       	pop	r22
    2596:	5f 91       	pop	r21
    2598:	4f 91       	pop	r20
    259a:	3f 91       	pop	r19
    259c:	2f 91       	pop	r18
    259e:	1f 91       	pop	r17
    25a0:	0f 91       	pop	r16
    25a2:	ff 90       	pop	r15
    25a4:	ef 90       	pop	r14
    25a6:	df 90       	pop	r13
    25a8:	cf 90       	pop	r12
    25aa:	bf 90       	pop	r11
    25ac:	af 90       	pop	r10
    25ae:	9f 90       	pop	r9
    25b0:	8f 90       	pop	r8
    25b2:	7f 90       	pop	r7
    25b4:	6f 90       	pop	r6
    25b6:	5f 90       	pop	r5
    25b8:	4f 90       	pop	r4
    25ba:	3f 90       	pop	r3
    25bc:	2f 90       	pop	r2
    25be:	1f 90       	pop	r1
    25c0:	0f 90       	pop	r0
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	0f 90       	pop	r0

	asm volatile ( "ret" );
    25c6:	08 95       	ret

000025c8 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <prvSetupTimerInterrupt+0x6>
    25ce:	00 d0       	rcall	.+0      	; 0x25d0 <prvSetupTimerInterrupt+0x8>
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <prvSetupTimerInterrupt+0xa>
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    25d6:	80 e4       	ldi	r24, 0x40	; 64
    25d8:	9f e1       	ldi	r25, 0x1F	; 31
    25da:	a0 e0       	ldi	r26, 0x00	; 0
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	8b 83       	std	Y+3, r24	; 0x03
    25e0:	9c 83       	std	Y+4, r25	; 0x04
    25e2:	ad 83       	std	Y+5, r26	; 0x05
    25e4:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ea:	ad 81       	ldd	r26, Y+5	; 0x05
    25ec:	be 81       	ldd	r27, Y+6	; 0x06
    25ee:	68 94       	set
    25f0:	15 f8       	bld	r1, 5
    25f2:	b6 95       	lsr	r27
    25f4:	a7 95       	ror	r26
    25f6:	97 95       	ror	r25
    25f8:	87 95       	ror	r24
    25fa:	16 94       	lsr	r1
    25fc:	d1 f7       	brne	.-12     	; 0x25f2 <prvSetupTimerInterrupt+0x2a>
    25fe:	8b 83       	std	Y+3, r24	; 0x03
    2600:	9c 83       	std	Y+4, r25	; 0x04
    2602:	ad 83       	std	Y+5, r26	; 0x05
    2604:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    2606:	8b 81       	ldd	r24, Y+3	; 0x03
    2608:	9c 81       	ldd	r25, Y+4	; 0x04
    260a:	ad 81       	ldd	r26, Y+5	; 0x05
    260c:	be 81       	ldd	r27, Y+6	; 0x06
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	a1 09       	sbc	r26, r1
    2612:	b1 09       	sbc	r27, r1
    2614:	8b 83       	std	Y+3, r24	; 0x03
    2616:	9c 83       	std	Y+4, r25	; 0x04
    2618:	ad 83       	std	Y+5, r26	; 0x05
    261a:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	9c 81       	ldd	r25, Y+4	; 0x04
    2624:	ad 81       	ldd	r26, Y+5	; 0x05
    2626:	be 81       	ldd	r27, Y+6	; 0x06
    2628:	89 2f       	mov	r24, r25
    262a:	9a 2f       	mov	r25, r26
    262c:	ab 2f       	mov	r26, r27
    262e:	bb 27       	eor	r27, r27
    2630:	8b 83       	std	Y+3, r24	; 0x03
    2632:	9c 83       	std	Y+4, r25	; 0x04
    2634:	ad 83       	std	Y+5, r26	; 0x05
    2636:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    2638:	8b 81       	ldd	r24, Y+3	; 0x03
    263a:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    263c:	eb e4       	ldi	r30, 0x4B	; 75
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	8a 81       	ldd	r24, Y+2	; 0x02
    2642:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    2644:	ea e4       	ldi	r30, 0x4A	; 74
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    264c:	8b e0       	ldi	r24, 0x0B	; 11
    264e:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    2650:	ee e4       	ldi	r30, 0x4E	; 78
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    2658:	e9 e5       	ldi	r30, 0x59	; 89
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	80 61       	ori	r24, 0x10	; 16
    2664:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    2666:	e9 e5       	ldi	r30, 0x59	; 89
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	80 83       	st	Z, r24
}
    266e:	26 96       	adiw	r28, 0x06	; 6
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	08 95       	ret

00002680 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    2680:	0e 94 87 12 	call	0x250e	; 0x250e <vPortYieldFromTick>
		asm volatile ( "reti" );
    2684:	18 95       	reti

00002686 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    2686:	df 93       	push	r29
    2688:	cf 93       	push	r28
    268a:	00 d0       	rcall	.+0      	; 0x268c <xQueueGenericReset+0x6>
    268c:	00 d0       	rcall	.+0      	; 0x268e <xQueueGenericReset+0x8>
    268e:	0f 92       	push	r0
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	9c 83       	std	Y+4, r25	; 0x04
    2696:	8b 83       	std	Y+3, r24	; 0x03
    2698:	6d 83       	std	Y+5, r22	; 0x05
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    269a:	8b 81       	ldd	r24, Y+3	; 0x03
    269c:	9c 81       	ldd	r25, Y+4	; 0x04
    269e:	9a 83       	std	Y+2, r25	; 0x02
    26a0:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	f8 94       	cli
    26a6:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    26a8:	e9 81       	ldd	r30, Y+1	; 0x01
    26aa:	fa 81       	ldd	r31, Y+2	; 0x02
    26ac:	40 81       	ld	r20, Z
    26ae:	51 81       	ldd	r21, Z+1	; 0x01
    26b0:	e9 81       	ldd	r30, Y+1	; 0x01
    26b2:	fa 81       	ldd	r31, Y+2	; 0x02
    26b4:	83 8d       	ldd	r24, Z+27	; 0x1b
    26b6:	28 2f       	mov	r18, r24
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	e9 81       	ldd	r30, Y+1	; 0x01
    26bc:	fa 81       	ldd	r31, Y+2	; 0x02
    26be:	84 8d       	ldd	r24, Z+28	; 0x1c
    26c0:	88 2f       	mov	r24, r24
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	bc 01       	movw	r22, r24
    26c6:	26 9f       	mul	r18, r22
    26c8:	c0 01       	movw	r24, r0
    26ca:	27 9f       	mul	r18, r23
    26cc:	90 0d       	add	r25, r0
    26ce:	36 9f       	mul	r19, r22
    26d0:	90 0d       	add	r25, r0
    26d2:	11 24       	eor	r1, r1
    26d4:	84 0f       	add	r24, r20
    26d6:	95 1f       	adc	r25, r21
    26d8:	e9 81       	ldd	r30, Y+1	; 0x01
    26da:	fa 81       	ldd	r31, Y+2	; 0x02
    26dc:	93 83       	std	Z+3, r25	; 0x03
    26de:	82 83       	std	Z+2, r24	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    26e0:	e9 81       	ldd	r30, Y+1	; 0x01
    26e2:	fa 81       	ldd	r31, Y+2	; 0x02
    26e4:	12 8e       	std	Z+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    26e6:	e9 81       	ldd	r30, Y+1	; 0x01
    26e8:	fa 81       	ldd	r31, Y+2	; 0x02
    26ea:	80 81       	ld	r24, Z
    26ec:	91 81       	ldd	r25, Z+1	; 0x01
    26ee:	e9 81       	ldd	r30, Y+1	; 0x01
    26f0:	fa 81       	ldd	r31, Y+2	; 0x02
    26f2:	95 83       	std	Z+5, r25	; 0x05
    26f4:	84 83       	std	Z+4, r24	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    26f6:	e9 81       	ldd	r30, Y+1	; 0x01
    26f8:	fa 81       	ldd	r31, Y+2	; 0x02
    26fa:	40 81       	ld	r20, Z
    26fc:	51 81       	ldd	r21, Z+1	; 0x01
    26fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2700:	fa 81       	ldd	r31, Y+2	; 0x02
    2702:	83 8d       	ldd	r24, Z+27	; 0x1b
    2704:	88 2f       	mov	r24, r24
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	9c 01       	movw	r18, r24
    270a:	21 50       	subi	r18, 0x01	; 1
    270c:	30 40       	sbci	r19, 0x00	; 0
    270e:	e9 81       	ldd	r30, Y+1	; 0x01
    2710:	fa 81       	ldd	r31, Y+2	; 0x02
    2712:	84 8d       	ldd	r24, Z+28	; 0x1c
    2714:	88 2f       	mov	r24, r24
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	bc 01       	movw	r22, r24
    271a:	26 9f       	mul	r18, r22
    271c:	c0 01       	movw	r24, r0
    271e:	27 9f       	mul	r18, r23
    2720:	90 0d       	add	r25, r0
    2722:	36 9f       	mul	r19, r22
    2724:	90 0d       	add	r25, r0
    2726:	11 24       	eor	r1, r1
    2728:	84 0f       	add	r24, r20
    272a:	95 1f       	adc	r25, r21
    272c:	e9 81       	ldd	r30, Y+1	; 0x01
    272e:	fa 81       	ldd	r31, Y+2	; 0x02
    2730:	97 83       	std	Z+7, r25	; 0x07
    2732:	86 83       	std	Z+6, r24	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
    2734:	e9 81       	ldd	r30, Y+1	; 0x01
    2736:	fa 81       	ldd	r31, Y+2	; 0x02
    2738:	8f ef       	ldi	r24, 0xFF	; 255
    273a:	85 8f       	std	Z+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
    273c:	e9 81       	ldd	r30, Y+1	; 0x01
    273e:	fa 81       	ldd	r31, Y+2	; 0x02
    2740:	8f ef       	ldi	r24, 0xFF	; 255
    2742:	86 8f       	std	Z+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    2744:	8d 81       	ldd	r24, Y+5	; 0x05
    2746:	88 23       	and	r24, r24
    2748:	79 f4       	brne	.+30     	; 0x2768 <xQueueGenericReset+0xe2>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    274a:	e9 81       	ldd	r30, Y+1	; 0x01
    274c:	fa 81       	ldd	r31, Y+2	; 0x02
    274e:	80 85       	ldd	r24, Z+8	; 0x08
    2750:	88 23       	and	r24, r24
    2752:	a1 f0       	breq	.+40     	; 0x277c <xQueueGenericReset+0xf6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	9a 81       	ldd	r25, Y+2	; 0x02
    2758:	08 96       	adiw	r24, 0x08	; 8
    275a:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <xTaskRemoveFromEventList>
    275e:	88 23       	and	r24, r24
    2760:	69 f0       	breq	.+26     	; 0x277c <xQueueGenericReset+0xf6>
				{
					queueYIELD_IF_USING_PREEMPTION();
    2762:	0e 94 2e 12 	call	0x245c	; 0x245c <vPortYield>
    2766:	0a c0       	rjmp	.+20     	; 0x277c <xQueueGenericReset+0xf6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	9a 81       	ldd	r25, Y+2	; 0x02
    276c:	08 96       	adiw	r24, 0x08	; 8
    276e:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    2772:	89 81       	ldd	r24, Y+1	; 0x01
    2774:	9a 81       	ldd	r25, Y+2	; 0x02
    2776:	41 96       	adiw	r24, 0x11	; 17
    2778:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    277c:	0f 90       	pop	r0
    277e:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    2780:	81 e0       	ldi	r24, 0x01	; 1
}
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	cf 91       	pop	r28
    278e:	df 91       	pop	r29
    2790:	08 95       	ret

00002792 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    2792:	0f 93       	push	r16
    2794:	1f 93       	push	r17
    2796:	df 93       	push	r29
    2798:	cf 93       	push	r28
    279a:	cd b7       	in	r28, 0x3d	; 61
    279c:	de b7       	in	r29, 0x3e	; 62
    279e:	29 97       	sbiw	r28, 0x09	; 9
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	f8 94       	cli
    27a4:	de bf       	out	0x3e, r29	; 62
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	cd bf       	out	0x3d, r28	; 61
    27aa:	8f 83       	std	Y+7, r24	; 0x07
    27ac:	68 87       	std	Y+8, r22	; 0x08
    27ae:	49 87       	std	Y+9, r20	; 0x09
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    27b0:	88 85       	ldd	r24, Y+8	; 0x08
    27b2:	88 23       	and	r24, r24
    27b4:	19 f4       	brne	.+6      	; 0x27bc <xQueueGenericCreate+0x2a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    27b6:	1c 82       	std	Y+4, r1	; 0x04
    27b8:	1b 82       	std	Y+3, r1	; 0x03
    27ba:	10 c0       	rjmp	.+32     	; 0x27dc <xQueueGenericCreate+0x4a>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    27bc:	8f 81       	ldd	r24, Y+7	; 0x07
    27be:	28 2f       	mov	r18, r24
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	88 85       	ldd	r24, Y+8	; 0x08
    27c4:	88 2f       	mov	r24, r24
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	ac 01       	movw	r20, r24
    27ca:	24 9f       	mul	r18, r20
    27cc:	c0 01       	movw	r24, r0
    27ce:	25 9f       	mul	r18, r21
    27d0:	90 0d       	add	r25, r0
    27d2:	34 9f       	mul	r19, r20
    27d4:	90 0d       	add	r25, r0
    27d6:	11 24       	eor	r1, r1
    27d8:	9c 83       	std	Y+4, r25	; 0x04
    27da:	8b 83       	std	Y+3, r24	; 0x03
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	9c 81       	ldd	r25, Y+4	; 0x04
    27e0:	4f 96       	adiw	r24, 0x1f	; 31
    27e2:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <pvPortMalloc>
    27e6:	9e 83       	std	Y+6, r25	; 0x06
    27e8:	8d 83       	std	Y+5, r24	; 0x05

		if( pxNewQueue != NULL )
    27ea:	8d 81       	ldd	r24, Y+5	; 0x05
    27ec:	9e 81       	ldd	r25, Y+6	; 0x06
    27ee:	00 97       	sbiw	r24, 0x00	; 0
    27f0:	81 f0       	breq	.+32     	; 0x2812 <xQueueGenericCreate+0x80>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    27f2:	8d 81       	ldd	r24, Y+5	; 0x05
    27f4:	9e 81       	ldd	r25, Y+6	; 0x06
    27f6:	4f 96       	adiw	r24, 0x1f	; 31
    27f8:	9a 83       	std	Y+2, r25	; 0x02
    27fa:	89 83       	std	Y+1, r24	; 0x01
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    27fc:	29 81       	ldd	r18, Y+1	; 0x01
    27fe:	3a 81       	ldd	r19, Y+2	; 0x02
    2800:	ed 81       	ldd	r30, Y+5	; 0x05
    2802:	fe 81       	ldd	r31, Y+6	; 0x06
    2804:	8f 81       	ldd	r24, Y+7	; 0x07
    2806:	68 85       	ldd	r22, Y+8	; 0x08
    2808:	a9 01       	movw	r20, r18
    280a:	29 85       	ldd	r18, Y+9	; 0x09
    280c:	8f 01       	movw	r16, r30
    280e:	0e 94 16 14 	call	0x282c	; 0x282c <prvInitialiseNewQueue>
		}

		return pxNewQueue;
    2812:	8d 81       	ldd	r24, Y+5	; 0x05
    2814:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    2816:	29 96       	adiw	r28, 0x09	; 9
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	f8 94       	cli
    281c:	de bf       	out	0x3e, r29	; 62
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	cd bf       	out	0x3d, r28	; 61
    2822:	cf 91       	pop	r28
    2824:	df 91       	pop	r29
    2826:	1f 91       	pop	r17
    2828:	0f 91       	pop	r16
    282a:	08 95       	ret

0000282c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    282c:	0f 93       	push	r16
    282e:	1f 93       	push	r17
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	27 97       	sbiw	r28, 0x07	; 7
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	de bf       	out	0x3e, r29	; 62
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	cd bf       	out	0x3d, r28	; 61
    2844:	89 83       	std	Y+1, r24	; 0x01
    2846:	6a 83       	std	Y+2, r22	; 0x02
    2848:	5c 83       	std	Y+4, r21	; 0x04
    284a:	4b 83       	std	Y+3, r20	; 0x03
    284c:	2d 83       	std	Y+5, r18	; 0x05
    284e:	1f 83       	std	Y+7, r17	; 0x07
    2850:	0e 83       	std	Y+6, r16	; 0x06
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    2852:	8a 81       	ldd	r24, Y+2	; 0x02
    2854:	88 23       	and	r24, r24
    2856:	39 f4       	brne	.+14     	; 0x2866 <prvInitialiseNewQueue+0x3a>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    2858:	8e 81       	ldd	r24, Y+6	; 0x06
    285a:	9f 81       	ldd	r25, Y+7	; 0x07
    285c:	ee 81       	ldd	r30, Y+6	; 0x06
    285e:	ff 81       	ldd	r31, Y+7	; 0x07
    2860:	91 83       	std	Z+1, r25	; 0x01
    2862:	80 83       	st	Z, r24
    2864:	06 c0       	rjmp	.+12     	; 0x2872 <prvInitialiseNewQueue+0x46>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	9c 81       	ldd	r25, Y+4	; 0x04
    286a:	ee 81       	ldd	r30, Y+6	; 0x06
    286c:	ff 81       	ldd	r31, Y+7	; 0x07
    286e:	91 83       	std	Z+1, r25	; 0x01
    2870:	80 83       	st	Z, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    2872:	ee 81       	ldd	r30, Y+6	; 0x06
    2874:	ff 81       	ldd	r31, Y+7	; 0x07
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	83 8f       	std	Z+27, r24	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
    287a:	ee 81       	ldd	r30, Y+6	; 0x06
    287c:	ff 81       	ldd	r31, Y+7	; 0x07
    287e:	8a 81       	ldd	r24, Y+2	; 0x02
    2880:	84 8f       	std	Z+28, r24	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    2882:	8e 81       	ldd	r24, Y+6	; 0x06
    2884:	9f 81       	ldd	r25, Y+7	; 0x07
    2886:	61 e0       	ldi	r22, 0x01	; 1
    2888:	0e 94 43 13 	call	0x2686	; 0x2686 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    288c:	27 96       	adiw	r28, 0x07	; 7
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	de bf       	out	0x3e, r29	; 62
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	cd bf       	out	0x3d, r28	; 61
    2898:	cf 91       	pop	r28
    289a:	df 91       	pop	r29
    289c:	1f 91       	pop	r17
    289e:	0f 91       	pop	r16
    28a0:	08 95       	ret

000028a2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    28a2:	df 93       	push	r29
    28a4:	cf 93       	push	r28
    28a6:	00 d0       	rcall	.+0      	; 0x28a8 <prvInitialiseMutex+0x6>
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	9a 83       	std	Y+2, r25	; 0x02
    28ae:	89 83       	std	Y+1, r24	; 0x01
		if( pxNewQueue != NULL )
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	9a 81       	ldd	r25, Y+2	; 0x02
    28b4:	00 97       	sbiw	r24, 0x00	; 0
    28b6:	a1 f0       	breq	.+40     	; 0x28e0 <prvInitialiseMutex+0x3e>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    28b8:	e9 81       	ldd	r30, Y+1	; 0x01
    28ba:	fa 81       	ldd	r31, Y+2	; 0x02
    28bc:	13 82       	std	Z+3, r1	; 0x03
    28be:	12 82       	std	Z+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    28c0:	e9 81       	ldd	r30, Y+1	; 0x01
    28c2:	fa 81       	ldd	r31, Y+2	; 0x02
    28c4:	11 82       	std	Z+1, r1	; 0x01
    28c6:	10 82       	st	Z, r1

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    28c8:	e9 81       	ldd	r30, Y+1	; 0x01
    28ca:	fa 81       	ldd	r31, Y+2	; 0x02
    28cc:	16 82       	std	Z+6, r1	; 0x06

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	9a 81       	ldd	r25, Y+2	; 0x02
    28d2:	60 e0       	ldi	r22, 0x00	; 0
    28d4:	70 e0       	ldi	r23, 0x00	; 0
    28d6:	40 e0       	ldi	r20, 0x00	; 0
    28d8:	50 e0       	ldi	r21, 0x00	; 0
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	0e 94 95 14 	call	0x292a	; 0x292a <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	cf 91       	pop	r28
    28e6:	df 91       	pop	r29
    28e8:	08 95       	ret

000028ea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	00 d0       	rcall	.+0      	; 0x28f0 <xQueueCreateMutex+0x6>
    28f0:	00 d0       	rcall	.+0      	; 0x28f2 <xQueueCreateMutex+0x8>
    28f2:	0f 92       	push	r0
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	8d 83       	std	Y+5, r24	; 0x05
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	8a 83       	std	Y+2, r24	; 0x02
    28fe:	19 82       	std	Y+1, r1	; 0x01

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	69 81       	ldd	r22, Y+1	; 0x01
    2904:	4d 81       	ldd	r20, Y+5	; 0x05
    2906:	0e 94 c9 13 	call	0x2792	; 0x2792 <xQueueGenericCreate>
    290a:	9c 83       	std	Y+4, r25	; 0x04
    290c:	8b 83       	std	Y+3, r24	; 0x03
		prvInitialiseMutex( pxNewQueue );
    290e:	8b 81       	ldd	r24, Y+3	; 0x03
    2910:	9c 81       	ldd	r25, Y+4	; 0x04
    2912:	0e 94 51 14 	call	0x28a2	; 0x28a2 <prvInitialiseMutex>

		return pxNewQueue;
    2916:	8b 81       	ldd	r24, Y+3	; 0x03
    2918:	9c 81       	ldd	r25, Y+4	; 0x04
	}
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	0f 90       	pop	r0
    2922:	0f 90       	pop	r0
    2924:	cf 91       	pop	r28
    2926:	df 91       	pop	r29
    2928:	08 95       	ret

0000292a <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    292a:	df 93       	push	r29
    292c:	cf 93       	push	r28
    292e:	cd b7       	in	r28, 0x3d	; 61
    2930:	de b7       	in	r29, 0x3e	; 62
    2932:	2f 97       	sbiw	r28, 0x0f	; 15
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	99 87       	std	Y+9, r25	; 0x09
    2940:	88 87       	std	Y+8, r24	; 0x08
    2942:	7b 87       	std	Y+11, r23	; 0x0b
    2944:	6a 87       	std	Y+10, r22	; 0x0a
    2946:	5d 87       	std	Y+13, r21	; 0x0d
    2948:	4c 87       	std	Y+12, r20	; 0x0c
    294a:	2e 87       	std	Y+14, r18	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    294c:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    294e:	88 85       	ldd	r24, Y+8	; 0x08
    2950:	99 85       	ldd	r25, Y+9	; 0x09
    2952:	9a 83       	std	Y+2, r25	; 0x02
    2954:	89 83       	std	Y+1, r24	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2956:	0f b6       	in	r0, 0x3f	; 63
    2958:	f8 94       	cli
    295a:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    295c:	e9 81       	ldd	r30, Y+1	; 0x01
    295e:	fa 81       	ldd	r31, Y+2	; 0x02
    2960:	92 8d       	ldd	r25, Z+26	; 0x1a
    2962:	e9 81       	ldd	r30, Y+1	; 0x01
    2964:	fa 81       	ldd	r31, Y+2	; 0x02
    2966:	83 8d       	ldd	r24, Z+27	; 0x1b
    2968:	98 17       	cp	r25, r24
    296a:	18 f0       	brcs	.+6      	; 0x2972 <xQueueGenericSend+0x48>
    296c:	8e 85       	ldd	r24, Y+14	; 0x0e
    296e:	82 30       	cpi	r24, 0x02	; 2
    2970:	11 f5       	brne	.+68     	; 0x29b6 <xQueueGenericSend+0x8c>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	9a 81       	ldd	r25, Y+2	; 0x02
    2976:	2a 85       	ldd	r18, Y+10	; 0x0a
    2978:	3b 85       	ldd	r19, Y+11	; 0x0b
    297a:	b9 01       	movw	r22, r18
    297c:	4e 85       	ldd	r20, Y+14	; 0x0e
    297e:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <prvCopyDataToQueue>
    2982:	8b 83       	std	Y+3, r24	; 0x03
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2984:	e9 81       	ldd	r30, Y+1	; 0x01
    2986:	fa 81       	ldd	r31, Y+2	; 0x02
    2988:	81 89       	ldd	r24, Z+17	; 0x11
    298a:	88 23       	and	r24, r24
    298c:	51 f0       	breq	.+20     	; 0x29a2 <xQueueGenericSend+0x78>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	9a 81       	ldd	r25, Y+2	; 0x02
    2992:	41 96       	adiw	r24, 0x11	; 17
    2994:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <xTaskRemoveFromEventList>
    2998:	88 23       	and	r24, r24
    299a:	41 f0       	breq	.+16     	; 0x29ac <xQueueGenericSend+0x82>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    299c:	0e 94 2e 12 	call	0x245c	; 0x245c <vPortYield>
    29a0:	05 c0       	rjmp	.+10     	; 0x29ac <xQueueGenericSend+0x82>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    29a2:	8b 81       	ldd	r24, Y+3	; 0x03
    29a4:	88 23       	and	r24, r24
    29a6:	11 f0       	breq	.+4      	; 0x29ac <xQueueGenericSend+0x82>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    29a8:	0e 94 2e 12 	call	0x245c	; 0x245c <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    29ac:	0f 90       	pop	r0
    29ae:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	8f 87       	std	Y+15, r24	; 0x0f
    29b4:	5c c0       	rjmp	.+184    	; 0x2a6e <xQueueGenericSend+0x144>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    29b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    29b8:	9d 85       	ldd	r25, Y+13	; 0x0d
    29ba:	00 97       	sbiw	r24, 0x00	; 0
    29bc:	21 f4       	brne	.+8      	; 0x29c6 <xQueueGenericSend+0x9c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    29be:	0f 90       	pop	r0
    29c0:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    29c2:	1f 86       	std	Y+15, r1	; 0x0f
    29c4:	54 c0       	rjmp	.+168    	; 0x2a6e <xQueueGenericSend+0x144>
				}
				else if( xEntryTimeSet == pdFALSE )
    29c6:	8c 81       	ldd	r24, Y+4	; 0x04
    29c8:	88 23       	and	r24, r24
    29ca:	31 f4       	brne	.+12     	; 0x29d8 <xQueueGenericSend+0xae>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    29cc:	ce 01       	movw	r24, r28
    29ce:	05 96       	adiw	r24, 0x05	; 5
    29d0:	0e 94 2b 23 	call	0x4656	; 0x4656 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    29d8:	0f 90       	pop	r0
    29da:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    29dc:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	0f 92       	push	r0
    29e6:	e9 81       	ldd	r30, Y+1	; 0x01
    29e8:	fa 81       	ldd	r31, Y+2	; 0x02
    29ea:	85 8d       	ldd	r24, Z+29	; 0x1d
    29ec:	8f 3f       	cpi	r24, 0xFF	; 255
    29ee:	19 f4       	brne	.+6      	; 0x29f6 <xQueueGenericSend+0xcc>
    29f0:	e9 81       	ldd	r30, Y+1	; 0x01
    29f2:	fa 81       	ldd	r31, Y+2	; 0x02
    29f4:	15 8e       	std	Z+29, r1	; 0x1d
    29f6:	e9 81       	ldd	r30, Y+1	; 0x01
    29f8:	fa 81       	ldd	r31, Y+2	; 0x02
    29fa:	86 8d       	ldd	r24, Z+30	; 0x1e
    29fc:	8f 3f       	cpi	r24, 0xFF	; 255
    29fe:	19 f4       	brne	.+6      	; 0x2a06 <xQueueGenericSend+0xdc>
    2a00:	e9 81       	ldd	r30, Y+1	; 0x01
    2a02:	fa 81       	ldd	r31, Y+2	; 0x02
    2a04:	16 8e       	std	Z+30, r1	; 0x1e
    2a06:	0f 90       	pop	r0
    2a08:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2a0a:	ce 01       	movw	r24, r28
    2a0c:	05 96       	adiw	r24, 0x05	; 5
    2a0e:	9e 01       	movw	r18, r28
    2a10:	24 5f       	subi	r18, 0xF4	; 244
    2a12:	3f 4f       	sbci	r19, 0xFF	; 255
    2a14:	b9 01       	movw	r22, r18
    2a16:	0e 94 44 23 	call	0x4688	; 0x4688 <xTaskCheckForTimeOut>
    2a1a:	88 23       	and	r24, r24
    2a1c:	09 f5       	brne	.+66     	; 0x2a60 <xQueueGenericSend+0x136>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2a1e:	89 81       	ldd	r24, Y+1	; 0x01
    2a20:	9a 81       	ldd	r25, Y+2	; 0x02
    2a22:	0e 94 54 19 	call	0x32a8	; 0x32a8 <prvIsQueueFull>
    2a26:	88 23       	and	r24, r24
    2a28:	a1 f0       	breq	.+40     	; 0x2a52 <xQueueGenericSend+0x128>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2a2a:	89 81       	ldd	r24, Y+1	; 0x01
    2a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2e:	08 96       	adiw	r24, 0x08	; 8
    2a30:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a32:	3d 85       	ldd	r19, Y+13	; 0x0d
    2a34:	b9 01       	movw	r22, r18
    2a36:	0e 94 09 22 	call	0x4412	; 0x4412 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3e:	0e 94 cc 18 	call	0x3198	; 0x3198 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2a42:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <xTaskResumeAll>
    2a46:	88 23       	and	r24, r24
    2a48:	09 f0       	breq	.+2      	; 0x2a4c <xQueueGenericSend+0x122>
    2a4a:	85 cf       	rjmp	.-246    	; 0x2956 <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
    2a4c:	0e 94 2e 12 	call	0x245c	; 0x245c <vPortYield>
    2a50:	82 cf       	rjmp	.-252    	; 0x2956 <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	9a 81       	ldd	r25, Y+2	; 0x02
    2a56:	0e 94 cc 18 	call	0x3198	; 0x3198 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2a5a:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <xTaskResumeAll>
    2a5e:	7b cf       	rjmp	.-266    	; 0x2956 <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	9a 81       	ldd	r25, Y+2	; 0x02
    2a64:	0e 94 cc 18 	call	0x3198	; 0x3198 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2a68:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2a6c:	1f 86       	std	Y+15, r1	; 0x0f
    2a6e:	8f 85       	ldd	r24, Y+15	; 0x0f
		}
	}
}
    2a70:	2f 96       	adiw	r28, 0x0f	; 15
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	f8 94       	cli
    2a76:	de bf       	out	0x3e, r29	; 62
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	cd bf       	out	0x3d, r28	; 61
    2a7c:	cf 91       	pop	r28
    2a7e:	df 91       	pop	r29
    2a80:	08 95       	ret

00002a82 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	2c 97       	sbiw	r28, 0x0c	; 12
    2a8c:	0f b6       	in	r0, 0x3f	; 63
    2a8e:	f8 94       	cli
    2a90:	de bf       	out	0x3e, r29	; 62
    2a92:	0f be       	out	0x3f, r0	; 63
    2a94:	cd bf       	out	0x3d, r28	; 61
    2a96:	9f 83       	std	Y+7, r25	; 0x07
    2a98:	8e 83       	std	Y+6, r24	; 0x06
    2a9a:	79 87       	std	Y+9, r23	; 0x09
    2a9c:	68 87       	std	Y+8, r22	; 0x08
    2a9e:	5b 87       	std	Y+11, r21	; 0x0b
    2aa0:	4a 87       	std	Y+10, r20	; 0x0a
    2aa2:	2c 87       	std	Y+12, r18	; 0x0c
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2aa4:	8e 81       	ldd	r24, Y+6	; 0x06
    2aa6:	9f 81       	ldd	r25, Y+7	; 0x07
    2aa8:	9b 83       	std	Y+3, r25	; 0x03
    2aaa:	8a 83       	std	Y+2, r24	; 0x02
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2aac:	1c 82       	std	Y+4, r1	; 0x04
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2aae:	ea 81       	ldd	r30, Y+2	; 0x02
    2ab0:	fb 81       	ldd	r31, Y+3	; 0x03
    2ab2:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ab4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ab6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ab8:	83 8d       	ldd	r24, Z+27	; 0x1b
    2aba:	98 17       	cp	r25, r24
    2abc:	18 f0       	brcs	.+6      	; 0x2ac4 <xQueueGenericSendFromISR+0x42>
    2abe:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ac0:	82 30       	cpi	r24, 0x02	; 2
    2ac2:	61 f5       	brne	.+88     	; 0x2b1c <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    2ac4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ac6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ac8:	86 8d       	ldd	r24, Z+30	; 0x1e
    2aca:	89 83       	std	Y+1, r24	; 0x01
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2acc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ace:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad0:	28 85       	ldd	r18, Y+8	; 0x08
    2ad2:	39 85       	ldd	r19, Y+9	; 0x09
    2ad4:	b9 01       	movw	r22, r18
    2ad6:	4c 85       	ldd	r20, Y+12	; 0x0c
    2ad8:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
    2ade:	8f 3f       	cpi	r24, 0xFF	; 255
    2ae0:	a9 f4       	brne	.+42     	; 0x2b0c <xQueueGenericSendFromISR+0x8a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2ae2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ae4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ae6:	81 89       	ldd	r24, Z+17	; 0x11
    2ae8:	88 23       	and	r24, r24
    2aea:	a9 f0       	breq	.+42     	; 0x2b16 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	9b 81       	ldd	r25, Y+3	; 0x03
    2af0:	41 96       	adiw	r24, 0x11	; 17
    2af2:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <xTaskRemoveFromEventList>
    2af6:	88 23       	and	r24, r24
    2af8:	71 f0       	breq	.+28     	; 0x2b16 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2afa:	8a 85       	ldd	r24, Y+10	; 0x0a
    2afc:	9b 85       	ldd	r25, Y+11	; 0x0b
    2afe:	00 97       	sbiw	r24, 0x00	; 0
    2b00:	51 f0       	breq	.+20     	; 0x2b16 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2b02:	ea 85       	ldd	r30, Y+10	; 0x0a
    2b04:	fb 85       	ldd	r31, Y+11	; 0x0b
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	80 83       	st	Z, r24
    2b0a:	05 c0       	rjmp	.+10     	; 0x2b16 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	8f 5f       	subi	r24, 0xFF	; 255
    2b10:	ea 81       	ldd	r30, Y+2	; 0x02
    2b12:	fb 81       	ldd	r31, Y+3	; 0x03
    2b14:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	8d 83       	std	Y+5, r24	; 0x05
    2b1a:	01 c0       	rjmp	.+2      	; 0x2b1e <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2b1c:	1d 82       	std	Y+5, r1	; 0x05
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2b1e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2b20:	2c 96       	adiw	r28, 0x0c	; 12
    2b22:	0f b6       	in	r0, 0x3f	; 63
    2b24:	f8 94       	cli
    2b26:	de bf       	out	0x3e, r29	; 62
    2b28:	0f be       	out	0x3f, r0	; 63
    2b2a:	cd bf       	out	0x3d, r28	; 61
    2b2c:	cf 91       	pop	r28
    2b2e:	df 91       	pop	r29
    2b30:	08 95       	ret

00002b32 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    2b32:	df 93       	push	r29
    2b34:	cf 93       	push	r28
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
    2b3a:	2a 97       	sbiw	r28, 0x0a	; 10
    2b3c:	0f b6       	in	r0, 0x3f	; 63
    2b3e:	f8 94       	cli
    2b40:	de bf       	out	0x3e, r29	; 62
    2b42:	0f be       	out	0x3f, r0	; 63
    2b44:	cd bf       	out	0x3d, r28	; 61
    2b46:	98 87       	std	Y+8, r25	; 0x08
    2b48:	8f 83       	std	Y+7, r24	; 0x07
    2b4a:	7a 87       	std	Y+10, r23	; 0x0a
    2b4c:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2b4e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b50:	98 85       	ldd	r25, Y+8	; 0x08
    2b52:	9c 83       	std	Y+4, r25	; 0x04
    2b54:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2b56:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2b58:	eb 81       	ldd	r30, Y+3	; 0x03
    2b5a:	fc 81       	ldd	r31, Y+4	; 0x04
    2b5c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b5e:	8a 83       	std	Y+2, r24	; 0x02

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    2b60:	eb 81       	ldd	r30, Y+3	; 0x03
    2b62:	fc 81       	ldd	r31, Y+4	; 0x04
    2b64:	93 8d       	ldd	r25, Z+27	; 0x1b
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	89 17       	cp	r24, r25
    2b6a:	48 f5       	brcc	.+82     	; 0x2bbe <xQueueGiveFromISR+0x8c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    2b6c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b6e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b70:	86 8d       	ldd	r24, Z+30	; 0x1e
    2b72:	89 83       	std	Y+1, r24	; 0x01
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    2b74:	8a 81       	ldd	r24, Y+2	; 0x02
    2b76:	8f 5f       	subi	r24, 0xFF	; 255
    2b78:	eb 81       	ldd	r30, Y+3	; 0x03
    2b7a:	fc 81       	ldd	r31, Y+4	; 0x04
    2b7c:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    2b7e:	89 81       	ldd	r24, Y+1	; 0x01
    2b80:	8f 3f       	cpi	r24, 0xFF	; 255
    2b82:	a9 f4       	brne	.+42     	; 0x2bae <xQueueGiveFromISR+0x7c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2b84:	eb 81       	ldd	r30, Y+3	; 0x03
    2b86:	fc 81       	ldd	r31, Y+4	; 0x04
    2b88:	81 89       	ldd	r24, Z+17	; 0x11
    2b8a:	88 23       	and	r24, r24
    2b8c:	a9 f0       	breq	.+42     	; 0x2bb8 <xQueueGiveFromISR+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b90:	9c 81       	ldd	r25, Y+4	; 0x04
    2b92:	41 96       	adiw	r24, 0x11	; 17
    2b94:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <xTaskRemoveFromEventList>
    2b98:	88 23       	and	r24, r24
    2b9a:	71 f0       	breq	.+28     	; 0x2bb8 <xQueueGiveFromISR+0x86>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2b9c:	89 85       	ldd	r24, Y+9	; 0x09
    2b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba0:	00 97       	sbiw	r24, 0x00	; 0
    2ba2:	51 f0       	breq	.+20     	; 0x2bb8 <xQueueGiveFromISR+0x86>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2ba4:	e9 85       	ldd	r30, Y+9	; 0x09
    2ba6:	fa 85       	ldd	r31, Y+10	; 0x0a
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	80 83       	st	Z, r24
    2bac:	05 c0       	rjmp	.+10     	; 0x2bb8 <xQueueGiveFromISR+0x86>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    2bae:	89 81       	ldd	r24, Y+1	; 0x01
    2bb0:	8f 5f       	subi	r24, 0xFF	; 255
    2bb2:	eb 81       	ldd	r30, Y+3	; 0x03
    2bb4:	fc 81       	ldd	r31, Y+4	; 0x04
    2bb6:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	8e 83       	std	Y+6, r24	; 0x06
    2bbc:	01 c0       	rjmp	.+2      	; 0x2bc0 <xQueueGiveFromISR+0x8e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2bbe:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2bc0:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2bc2:	2a 96       	adiw	r28, 0x0a	; 10
    2bc4:	0f b6       	in	r0, 0x3f	; 63
    2bc6:	f8 94       	cli
    2bc8:	de bf       	out	0x3e, r29	; 62
    2bca:	0f be       	out	0x3f, r0	; 63
    2bcc:	cd bf       	out	0x3d, r28	; 61
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	08 95       	ret

00002bd4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    2bd4:	df 93       	push	r29
    2bd6:	cf 93       	push	r28
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	61 97       	sbiw	r28, 0x11	; 17
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	de bf       	out	0x3e, r29	; 62
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	cd bf       	out	0x3d, r28	; 61
    2be8:	9b 87       	std	Y+11, r25	; 0x0b
    2bea:	8a 87       	std	Y+10, r24	; 0x0a
    2bec:	7d 87       	std	Y+13, r23	; 0x0d
    2bee:	6c 87       	std	Y+12, r22	; 0x0c
    2bf0:	5f 87       	std	Y+15, r21	; 0x0f
    2bf2:	4e 87       	std	Y+14, r20	; 0x0e
    2bf4:	28 8b       	std	Y+16, r18	; 0x10
BaseType_t xEntryTimeSet = pdFALSE;
    2bf6:	1e 82       	std	Y+6, r1	; 0x06
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2bf8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bfa:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bfc:	9b 83       	std	Y+3, r25	; 0x03
    2bfe:	8a 83       	std	Y+2, r24	; 0x02
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	f8 94       	cli
    2c04:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2c06:	ea 81       	ldd	r30, Y+2	; 0x02
    2c08:	fb 81       	ldd	r31, Y+3	; 0x03
    2c0a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c0c:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	88 23       	and	r24, r24
    2c12:	09 f4       	brne	.+2      	; 0x2c16 <xQueueGenericReceive+0x42>
    2c14:	49 c0       	rjmp	.+146    	; 0x2ca8 <xQueueGenericReceive+0xd4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    2c16:	ea 81       	ldd	r30, Y+2	; 0x02
    2c18:	fb 81       	ldd	r31, Y+3	; 0x03
    2c1a:	86 81       	ldd	r24, Z+6	; 0x06
    2c1c:	97 81       	ldd	r25, Z+7	; 0x07
    2c1e:	9d 83       	std	Y+5, r25	; 0x05
    2c20:	8c 83       	std	Y+4, r24	; 0x04

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2c22:	8a 81       	ldd	r24, Y+2	; 0x02
    2c24:	9b 81       	ldd	r25, Y+3	; 0x03
    2c26:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c28:	3d 85       	ldd	r19, Y+13	; 0x0d
    2c2a:	b9 01       	movw	r22, r18
    2c2c:	0e 94 85 18 	call	0x310a	; 0x310a <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2c30:	88 89       	ldd	r24, Y+16	; 0x10
    2c32:	88 23       	and	r24, r24
    2c34:	01 f5       	brne	.+64     	; 0x2c76 <xQueueGenericReceive+0xa2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    2c36:	89 81       	ldd	r24, Y+1	; 0x01
    2c38:	81 50       	subi	r24, 0x01	; 1
    2c3a:	ea 81       	ldd	r30, Y+2	; 0x02
    2c3c:	fb 81       	ldd	r31, Y+3	; 0x03
    2c3e:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2c40:	ea 81       	ldd	r30, Y+2	; 0x02
    2c42:	fb 81       	ldd	r31, Y+3	; 0x03
    2c44:	80 81       	ld	r24, Z
    2c46:	91 81       	ldd	r25, Z+1	; 0x01
    2c48:	00 97       	sbiw	r24, 0x00	; 0
    2c4a:	31 f4       	brne	.+12     	; 0x2c58 <xQueueGenericReceive+0x84>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    2c4c:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <pvTaskIncrementMutexHeldCount>
    2c50:	ea 81       	ldd	r30, Y+2	; 0x02
    2c52:	fb 81       	ldd	r31, Y+3	; 0x03
    2c54:	93 83       	std	Z+3, r25	; 0x03
    2c56:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2c58:	ea 81       	ldd	r30, Y+2	; 0x02
    2c5a:	fb 81       	ldd	r31, Y+3	; 0x03
    2c5c:	80 85       	ldd	r24, Z+8	; 0x08
    2c5e:	88 23       	and	r24, r24
    2c60:	f1 f0       	breq	.+60     	; 0x2c9e <xQueueGenericReceive+0xca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2c62:	8a 81       	ldd	r24, Y+2	; 0x02
    2c64:	9b 81       	ldd	r25, Y+3	; 0x03
    2c66:	08 96       	adiw	r24, 0x08	; 8
    2c68:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <xTaskRemoveFromEventList>
    2c6c:	88 23       	and	r24, r24
    2c6e:	b9 f0       	breq	.+46     	; 0x2c9e <xQueueGenericReceive+0xca>
						{
							queueYIELD_IF_USING_PREEMPTION();
    2c70:	0e 94 2e 12 	call	0x245c	; 0x245c <vPortYield>
    2c74:	14 c0       	rjmp	.+40     	; 0x2c9e <xQueueGenericReceive+0xca>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    2c76:	ea 81       	ldd	r30, Y+2	; 0x02
    2c78:	fb 81       	ldd	r31, Y+3	; 0x03
    2c7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c7c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c7e:	97 83       	std	Z+7, r25	; 0x07
    2c80:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2c82:	ea 81       	ldd	r30, Y+2	; 0x02
    2c84:	fb 81       	ldd	r31, Y+3	; 0x03
    2c86:	81 89       	ldd	r24, Z+17	; 0x11
    2c88:	88 23       	and	r24, r24
    2c8a:	49 f0       	breq	.+18     	; 0x2c9e <xQueueGenericReceive+0xca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c90:	41 96       	adiw	r24, 0x11	; 17
    2c92:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <xTaskRemoveFromEventList>
    2c96:	88 23       	and	r24, r24
    2c98:	11 f0       	breq	.+4      	; 0x2c9e <xQueueGenericReceive+0xca>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    2c9a:	0e 94 2e 12 	call	0x245c	; 0x245c <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    2c9e:	0f 90       	pop	r0
    2ca0:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	89 8b       	std	Y+17, r24	; 0x11
    2ca6:	74 c0       	rjmp	.+232    	; 0x2d90 <xQueueGenericReceive+0x1bc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    2ca8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2caa:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cac:	00 97       	sbiw	r24, 0x00	; 0
    2cae:	21 f4       	brne	.+8      	; 0x2cb8 <xQueueGenericReceive+0xe4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2cb0:	0f 90       	pop	r0
    2cb2:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2cb4:	19 8a       	std	Y+17, r1	; 0x11
    2cb6:	6c c0       	rjmp	.+216    	; 0x2d90 <xQueueGenericReceive+0x1bc>
				}
				else if( xEntryTimeSet == pdFALSE )
    2cb8:	8e 81       	ldd	r24, Y+6	; 0x06
    2cba:	88 23       	and	r24, r24
    2cbc:	31 f4       	brne	.+12     	; 0x2cca <xQueueGenericReceive+0xf6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2cbe:	ce 01       	movw	r24, r28
    2cc0:	07 96       	adiw	r24, 0x07	; 7
    2cc2:	0e 94 2b 23 	call	0x4656	; 0x4656 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	8e 83       	std	Y+6, r24	; 0x06
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    2cca:	0f 90       	pop	r0
    2ccc:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2cce:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2cd2:	0f b6       	in	r0, 0x3f	; 63
    2cd4:	f8 94       	cli
    2cd6:	0f 92       	push	r0
    2cd8:	ea 81       	ldd	r30, Y+2	; 0x02
    2cda:	fb 81       	ldd	r31, Y+3	; 0x03
    2cdc:	85 8d       	ldd	r24, Z+29	; 0x1d
    2cde:	8f 3f       	cpi	r24, 0xFF	; 255
    2ce0:	19 f4       	brne	.+6      	; 0x2ce8 <xQueueGenericReceive+0x114>
    2ce2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ce4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ce6:	15 8e       	std	Z+29, r1	; 0x1d
    2ce8:	ea 81       	ldd	r30, Y+2	; 0x02
    2cea:	fb 81       	ldd	r31, Y+3	; 0x03
    2cec:	86 8d       	ldd	r24, Z+30	; 0x1e
    2cee:	8f 3f       	cpi	r24, 0xFF	; 255
    2cf0:	19 f4       	brne	.+6      	; 0x2cf8 <xQueueGenericReceive+0x124>
    2cf2:	ea 81       	ldd	r30, Y+2	; 0x02
    2cf4:	fb 81       	ldd	r31, Y+3	; 0x03
    2cf6:	16 8e       	std	Z+30, r1	; 0x1e
    2cf8:	0f 90       	pop	r0
    2cfa:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2cfc:	ce 01       	movw	r24, r28
    2cfe:	07 96       	adiw	r24, 0x07	; 7
    2d00:	9e 01       	movw	r18, r28
    2d02:	22 5f       	subi	r18, 0xF2	; 242
    2d04:	3f 4f       	sbci	r19, 0xFF	; 255
    2d06:	b9 01       	movw	r22, r18
    2d08:	0e 94 44 23 	call	0x4688	; 0x4688 <xTaskCheckForTimeOut>
    2d0c:	88 23       	and	r24, r24
    2d0e:	91 f5       	brne	.+100    	; 0x2d74 <xQueueGenericReceive+0x1a0>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2d10:	8a 81       	ldd	r24, Y+2	; 0x02
    2d12:	9b 81       	ldd	r25, Y+3	; 0x03
    2d14:	0e 94 1f 19 	call	0x323e	; 0x323e <prvIsQueueEmpty>
    2d18:	88 23       	and	r24, r24
    2d1a:	29 f1       	breq	.+74     	; 0x2d66 <xQueueGenericReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2d1c:	ea 81       	ldd	r30, Y+2	; 0x02
    2d1e:	fb 81       	ldd	r31, Y+3	; 0x03
    2d20:	80 81       	ld	r24, Z
    2d22:	91 81       	ldd	r25, Z+1	; 0x01
    2d24:	00 97       	sbiw	r24, 0x00	; 0
    2d26:	59 f4       	brne	.+22     	; 0x2d3e <xQueueGenericReceive+0x16a>
					{
						taskENTER_CRITICAL();
    2d28:	0f b6       	in	r0, 0x3f	; 63
    2d2a:	f8 94       	cli
    2d2c:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2d2e:	ea 81       	ldd	r30, Y+2	; 0x02
    2d30:	fb 81       	ldd	r31, Y+3	; 0x03
    2d32:	82 81       	ldd	r24, Z+2	; 0x02
    2d34:	93 81       	ldd	r25, Z+3	; 0x03
    2d36:	0e 94 9e 24 	call	0x493c	; 0x493c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    2d3a:	0f 90       	pop	r0
    2d3c:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d40:	9b 81       	ldd	r25, Y+3	; 0x03
    2d42:	41 96       	adiw	r24, 0x11	; 17
    2d44:	2e 85       	ldd	r18, Y+14	; 0x0e
    2d46:	3f 85       	ldd	r19, Y+15	; 0x0f
    2d48:	b9 01       	movw	r22, r18
    2d4a:	0e 94 09 22 	call	0x4412	; 0x4412 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d50:	9b 81       	ldd	r25, Y+3	; 0x03
    2d52:	0e 94 cc 18 	call	0x3198	; 0x3198 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2d56:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <xTaskResumeAll>
    2d5a:	88 23       	and	r24, r24
    2d5c:	09 f0       	breq	.+2      	; 0x2d60 <xQueueGenericReceive+0x18c>
    2d5e:	50 cf       	rjmp	.-352    	; 0x2c00 <xQueueGenericReceive+0x2c>
				{
					portYIELD_WITHIN_API();
    2d60:	0e 94 2e 12 	call	0x245c	; 0x245c <vPortYield>
    2d64:	4d cf       	rjmp	.-358    	; 0x2c00 <xQueueGenericReceive+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2d66:	8a 81       	ldd	r24, Y+2	; 0x02
    2d68:	9b 81       	ldd	r25, Y+3	; 0x03
    2d6a:	0e 94 cc 18 	call	0x3198	; 0x3198 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2d6e:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <xTaskResumeAll>
    2d72:	46 cf       	rjmp	.-372    	; 0x2c00 <xQueueGenericReceive+0x2c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2d74:	8a 81       	ldd	r24, Y+2	; 0x02
    2d76:	9b 81       	ldd	r25, Y+3	; 0x03
    2d78:	0e 94 cc 18 	call	0x3198	; 0x3198 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2d7c:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2d80:	8a 81       	ldd	r24, Y+2	; 0x02
    2d82:	9b 81       	ldd	r25, Y+3	; 0x03
    2d84:	0e 94 1f 19 	call	0x323e	; 0x323e <prvIsQueueEmpty>
    2d88:	88 23       	and	r24, r24
    2d8a:	09 f4       	brne	.+2      	; 0x2d8e <xQueueGenericReceive+0x1ba>
    2d8c:	39 cf       	rjmp	.-398    	; 0x2c00 <xQueueGenericReceive+0x2c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    2d8e:	19 8a       	std	Y+17, r1	; 0x11
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    2d90:	89 89       	ldd	r24, Y+17	; 0x11
}
    2d92:	61 96       	adiw	r28, 0x11	; 17
    2d94:	0f b6       	in	r0, 0x3f	; 63
    2d96:	f8 94       	cli
    2d98:	de bf       	out	0x3e, r29	; 62
    2d9a:	0f be       	out	0x3f, r0	; 63
    2d9c:	cd bf       	out	0x3d, r28	; 61
    2d9e:	cf 91       	pop	r28
    2da0:	df 91       	pop	r29
    2da2:	08 95       	ret

00002da4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    2da4:	df 93       	push	r29
    2da6:	cf 93       	push	r28
    2da8:	cd b7       	in	r28, 0x3d	; 61
    2daa:	de b7       	in	r29, 0x3e	; 62
    2dac:	2c 97       	sbiw	r28, 0x0c	; 12
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	f8 94       	cli
    2db2:	de bf       	out	0x3e, r29	; 62
    2db4:	0f be       	out	0x3f, r0	; 63
    2db6:	cd bf       	out	0x3d, r28	; 61
    2db8:	98 87       	std	Y+8, r25	; 0x08
    2dba:	8f 83       	std	Y+7, r24	; 0x07
    2dbc:	7a 87       	std	Y+10, r23	; 0x0a
    2dbe:	69 87       	std	Y+9, r22	; 0x09
    2dc0:	5c 87       	std	Y+12, r21	; 0x0c
    2dc2:	4b 87       	std	Y+11, r20	; 0x0b
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2dc4:	8f 81       	ldd	r24, Y+7	; 0x07
    2dc6:	98 85       	ldd	r25, Y+8	; 0x08
    2dc8:	9c 83       	std	Y+4, r25	; 0x04
    2dca:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2dcc:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2dce:	eb 81       	ldd	r30, Y+3	; 0x03
    2dd0:	fc 81       	ldd	r31, Y+4	; 0x04
    2dd2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2dd4:	8a 83       	std	Y+2, r24	; 0x02

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    2dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd8:	88 23       	and	r24, r24
    2dda:	81 f1       	breq	.+96     	; 0x2e3c <xQueueReceiveFromISR+0x98>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    2ddc:	eb 81       	ldd	r30, Y+3	; 0x03
    2dde:	fc 81       	ldd	r31, Y+4	; 0x04
    2de0:	85 8d       	ldd	r24, Z+29	; 0x1d
    2de2:	89 83       	std	Y+1, r24	; 0x01

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2de4:	8b 81       	ldd	r24, Y+3	; 0x03
    2de6:	9c 81       	ldd	r25, Y+4	; 0x04
    2de8:	29 85       	ldd	r18, Y+9	; 0x09
    2dea:	3a 85       	ldd	r19, Y+10	; 0x0a
    2dec:	b9 01       	movw	r22, r18
    2dee:	0e 94 85 18 	call	0x310a	; 0x310a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    2df2:	8a 81       	ldd	r24, Y+2	; 0x02
    2df4:	81 50       	subi	r24, 0x01	; 1
    2df6:	eb 81       	ldd	r30, Y+3	; 0x03
    2df8:	fc 81       	ldd	r31, Y+4	; 0x04
    2dfa:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	8f 3f       	cpi	r24, 0xFF	; 255
    2e00:	a9 f4       	brne	.+42     	; 0x2e2c <xQueueReceiveFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2e02:	eb 81       	ldd	r30, Y+3	; 0x03
    2e04:	fc 81       	ldd	r31, Y+4	; 0x04
    2e06:	80 85       	ldd	r24, Z+8	; 0x08
    2e08:	88 23       	and	r24, r24
    2e0a:	a9 f0       	breq	.+42     	; 0x2e36 <xQueueReceiveFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e10:	08 96       	adiw	r24, 0x08	; 8
    2e12:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <xTaskRemoveFromEventList>
    2e16:	88 23       	and	r24, r24
    2e18:	71 f0       	breq	.+28     	; 0x2e36 <xQueueReceiveFromISR+0x92>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    2e1a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e1c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e1e:	00 97       	sbiw	r24, 0x00	; 0
    2e20:	51 f0       	breq	.+20     	; 0x2e36 <xQueueReceiveFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    2e22:	eb 85       	ldd	r30, Y+11	; 0x0b
    2e24:	fc 85       	ldd	r31, Y+12	; 0x0c
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	80 83       	st	Z, r24
    2e2a:	05 c0       	rjmp	.+10     	; 0x2e36 <xQueueReceiveFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	8f 5f       	subi	r24, 0xFF	; 255
    2e30:	eb 81       	ldd	r30, Y+3	; 0x03
    2e32:	fc 81       	ldd	r31, Y+4	; 0x04
    2e34:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	8e 83       	std	Y+6, r24	; 0x06
    2e3a:	01 c0       	rjmp	.+2      	; 0x2e3e <xQueueReceiveFromISR+0x9a>
		}
		else
		{
			xReturn = pdFAIL;
    2e3c:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2e3e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2e40:	2c 96       	adiw	r28, 0x0c	; 12
    2e42:	0f b6       	in	r0, 0x3f	; 63
    2e44:	f8 94       	cli
    2e46:	de bf       	out	0x3e, r29	; 62
    2e48:	0f be       	out	0x3f, r0	; 63
    2e4a:	cd bf       	out	0x3d, r28	; 61
    2e4c:	cf 91       	pop	r28
    2e4e:	df 91       	pop	r29
    2e50:	08 95       	ret

00002e52 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    2e52:	df 93       	push	r29
    2e54:	cf 93       	push	r28
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
    2e5a:	2a 97       	sbiw	r28, 0x0a	; 10
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	cd bf       	out	0x3d, r28	; 61
    2e66:	98 87       	std	Y+8, r25	; 0x08
    2e68:	8f 83       	std	Y+7, r24	; 0x07
    2e6a:	7a 87       	std	Y+10, r23	; 0x0a
    2e6c:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2e6e:	8f 81       	ldd	r24, Y+7	; 0x07
    2e70:	98 85       	ldd	r25, Y+8	; 0x08
    2e72:	9a 83       	std	Y+2, r25	; 0x02
    2e74:	89 83       	std	Y+1, r24	; 0x01
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2e76:	1d 82       	std	Y+5, r1	; 0x05
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2e78:	e9 81       	ldd	r30, Y+1	; 0x01
    2e7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e7c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e7e:	88 23       	and	r24, r24
    2e80:	b1 f0       	breq	.+44     	; 0x2eae <xQueuePeekFromISR+0x5c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    2e82:	e9 81       	ldd	r30, Y+1	; 0x01
    2e84:	fa 81       	ldd	r31, Y+2	; 0x02
    2e86:	86 81       	ldd	r24, Z+6	; 0x06
    2e88:	97 81       	ldd	r25, Z+7	; 0x07
    2e8a:	9c 83       	std	Y+4, r25	; 0x04
    2e8c:	8b 83       	std	Y+3, r24	; 0x03
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2e8e:	89 81       	ldd	r24, Y+1	; 0x01
    2e90:	9a 81       	ldd	r25, Y+2	; 0x02
    2e92:	29 85       	ldd	r18, Y+9	; 0x09
    2e94:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e96:	b9 01       	movw	r22, r18
    2e98:	0e 94 85 18 	call	0x310a	; 0x310a <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    2e9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea4:	97 83       	std	Z+7, r25	; 0x07
    2ea6:	86 83       	std	Z+6, r24	; 0x06

			xReturn = pdPASS;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	8e 83       	std	Y+6, r24	; 0x06
    2eac:	01 c0       	rjmp	.+2      	; 0x2eb0 <xQueuePeekFromISR+0x5e>
		}
		else
		{
			xReturn = pdFAIL;
    2eae:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2eb0:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2eb2:	2a 96       	adiw	r28, 0x0a	; 10
    2eb4:	0f b6       	in	r0, 0x3f	; 63
    2eb6:	f8 94       	cli
    2eb8:	de bf       	out	0x3e, r29	; 62
    2eba:	0f be       	out	0x3f, r0	; 63
    2ebc:	cd bf       	out	0x3d, r28	; 61
    2ebe:	cf 91       	pop	r28
    2ec0:	df 91       	pop	r29
    2ec2:	08 95       	ret

00002ec4 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    2ec4:	df 93       	push	r29
    2ec6:	cf 93       	push	r28
    2ec8:	00 d0       	rcall	.+0      	; 0x2eca <uxQueueMessagesWaiting+0x6>
    2eca:	0f 92       	push	r0
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	9b 83       	std	Y+3, r25	; 0x03
    2ed2:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	f8 94       	cli
    2ed8:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    2eda:	ea 81       	ldd	r30, Y+2	; 0x02
    2edc:	fb 81       	ldd	r31, Y+3	; 0x03
    2ede:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ee0:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    2ee2:	0f 90       	pop	r0
    2ee4:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    2ee6:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	cf 91       	pop	r28
    2ef0:	df 91       	pop	r29
    2ef2:	08 95       	ret

00002ef4 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    2ef4:	df 93       	push	r29
    2ef6:	cf 93       	push	r28
    2ef8:	00 d0       	rcall	.+0      	; 0x2efa <uxQueueSpacesAvailable+0x6>
    2efa:	00 d0       	rcall	.+0      	; 0x2efc <uxQueueSpacesAvailable+0x8>
    2efc:	0f 92       	push	r0
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	9d 83       	std	Y+5, r25	; 0x05
    2f04:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    2f06:	8c 81       	ldd	r24, Y+4	; 0x04
    2f08:	9d 81       	ldd	r25, Y+5	; 0x05
    2f0a:	9a 83       	std	Y+2, r25	; 0x02
    2f0c:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2f0e:	0f b6       	in	r0, 0x3f	; 63
    2f10:	f8 94       	cli
    2f12:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    2f14:	e9 81       	ldd	r30, Y+1	; 0x01
    2f16:	fa 81       	ldd	r31, Y+2	; 0x02
    2f18:	93 8d       	ldd	r25, Z+27	; 0x1b
    2f1a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f1c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f1e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f20:	29 2f       	mov	r18, r25
    2f22:	28 1b       	sub	r18, r24
    2f24:	82 2f       	mov	r24, r18
    2f26:	8b 83       	std	Y+3, r24	; 0x03
	}
	taskEXIT_CRITICAL();
    2f28:	0f 90       	pop	r0
    2f2a:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    2f2c:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2f2e:	0f 90       	pop	r0
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	0f 90       	pop	r0
    2f36:	0f 90       	pop	r0
    2f38:	cf 91       	pop	r28
    2f3a:	df 91       	pop	r29
    2f3c:	08 95       	ret

00002f3e <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    2f3e:	df 93       	push	r29
    2f40:	cf 93       	push	r28
    2f42:	00 d0       	rcall	.+0      	; 0x2f44 <uxQueueMessagesWaitingFromISR+0x6>
    2f44:	0f 92       	push	r0
    2f46:	cd b7       	in	r28, 0x3d	; 61
    2f48:	de b7       	in	r29, 0x3e	; 62
    2f4a:	9b 83       	std	Y+3, r25	; 0x03
    2f4c:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    2f4e:	ea 81       	ldd	r30, Y+2	; 0x02
    2f50:	fb 81       	ldd	r31, Y+3	; 0x03
    2f52:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f54:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    2f56:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	0f 90       	pop	r0
    2f5e:	cf 91       	pop	r28
    2f60:	df 91       	pop	r29
    2f62:	08 95       	ret

00002f64 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    2f64:	df 93       	push	r29
    2f66:	cf 93       	push	r28
    2f68:	00 d0       	rcall	.+0      	; 0x2f6a <vQueueDelete+0x6>
    2f6a:	00 d0       	rcall	.+0      	; 0x2f6c <vQueueDelete+0x8>
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	9c 83       	std	Y+4, r25	; 0x04
    2f72:	8b 83       	std	Y+3, r24	; 0x03
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2f74:	8b 81       	ldd	r24, Y+3	; 0x03
    2f76:	9c 81       	ldd	r25, Y+4	; 0x04
    2f78:	9a 83       	std	Y+2, r25	; 0x02
    2f7a:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
    2f7c:	89 81       	ldd	r24, Y+1	; 0x01
    2f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f80:	0e 94 14 1a 	call	0x3428	; 0x3428 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    2f84:	89 81       	ldd	r24, Y+1	; 0x01
    2f86:	9a 81       	ldd	r25, Y+2	; 0x02
    2f88:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    2f8c:	0f 90       	pop	r0
    2f8e:	0f 90       	pop	r0
    2f90:	0f 90       	pop	r0
    2f92:	0f 90       	pop	r0
    2f94:	cf 91       	pop	r28
    2f96:	df 91       	pop	r29
    2f98:	08 95       	ret

00002f9a <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    2f9a:	df 93       	push	r29
    2f9c:	cf 93       	push	r28
    2f9e:	cd b7       	in	r28, 0x3d	; 61
    2fa0:	de b7       	in	r29, 0x3e	; 62
    2fa2:	27 97       	sbiw	r28, 0x07	; 7
    2fa4:	0f b6       	in	r0, 0x3f	; 63
    2fa6:	f8 94       	cli
    2fa8:	de bf       	out	0x3e, r29	; 62
    2faa:	0f be       	out	0x3f, r0	; 63
    2fac:	cd bf       	out	0x3d, r28	; 61
    2fae:	9c 83       	std	Y+4, r25	; 0x04
    2fb0:	8b 83       	std	Y+3, r24	; 0x03
    2fb2:	7e 83       	std	Y+6, r23	; 0x06
    2fb4:	6d 83       	std	Y+5, r22	; 0x05
    2fb6:	4f 83       	std	Y+7, r20	; 0x07
BaseType_t xReturn = pdFALSE;
    2fb8:	1a 82       	std	Y+2, r1	; 0x02
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2fba:	eb 81       	ldd	r30, Y+3	; 0x03
    2fbc:	fc 81       	ldd	r31, Y+4	; 0x04
    2fbe:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fc0:	89 83       	std	Y+1, r24	; 0x01

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    2fc2:	eb 81       	ldd	r30, Y+3	; 0x03
    2fc4:	fc 81       	ldd	r31, Y+4	; 0x04
    2fc6:	84 8d       	ldd	r24, Z+28	; 0x1c
    2fc8:	88 23       	and	r24, r24
    2fca:	99 f4       	brne	.+38     	; 0x2ff2 <prvCopyDataToQueue+0x58>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2fcc:	eb 81       	ldd	r30, Y+3	; 0x03
    2fce:	fc 81       	ldd	r31, Y+4	; 0x04
    2fd0:	80 81       	ld	r24, Z
    2fd2:	91 81       	ldd	r25, Z+1	; 0x01
    2fd4:	00 97       	sbiw	r24, 0x00	; 0
    2fd6:	09 f0       	breq	.+2      	; 0x2fda <prvCopyDataToQueue+0x40>
    2fd8:	89 c0       	rjmp	.+274    	; 0x30ec <prvCopyDataToQueue+0x152>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    2fda:	eb 81       	ldd	r30, Y+3	; 0x03
    2fdc:	fc 81       	ldd	r31, Y+4	; 0x04
    2fde:	82 81       	ldd	r24, Z+2	; 0x02
    2fe0:	93 81       	ldd	r25, Z+3	; 0x03
    2fe2:	0e 94 29 25 	call	0x4a52	; 0x4a52 <xTaskPriorityDisinherit>
    2fe6:	8a 83       	std	Y+2, r24	; 0x02
				pxQueue->pxMutexHolder = NULL;
    2fe8:	eb 81       	ldd	r30, Y+3	; 0x03
    2fea:	fc 81       	ldd	r31, Y+4	; 0x04
    2fec:	13 82       	std	Z+3, r1	; 0x03
    2fee:	12 82       	std	Z+2, r1	; 0x02
    2ff0:	7d c0       	rjmp	.+250    	; 0x30ec <prvCopyDataToQueue+0x152>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    2ff2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ff4:	88 23       	and	r24, r24
    2ff6:	99 f5       	brne	.+102    	; 0x305e <prvCopyDataToQueue+0xc4>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    2ff8:	eb 81       	ldd	r30, Y+3	; 0x03
    2ffa:	fc 81       	ldd	r31, Y+4	; 0x04
    2ffc:	64 81       	ldd	r22, Z+4	; 0x04
    2ffe:	75 81       	ldd	r23, Z+5	; 0x05
    3000:	eb 81       	ldd	r30, Y+3	; 0x03
    3002:	fc 81       	ldd	r31, Y+4	; 0x04
    3004:	84 8d       	ldd	r24, Z+28	; 0x1c
    3006:	48 2f       	mov	r20, r24
    3008:	50 e0       	ldi	r21, 0x00	; 0
    300a:	2d 81       	ldd	r18, Y+5	; 0x05
    300c:	3e 81       	ldd	r19, Y+6	; 0x06
    300e:	cb 01       	movw	r24, r22
    3010:	b9 01       	movw	r22, r18
    3012:	0e 94 37 2a 	call	0x546e	; 0x546e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3016:	eb 81       	ldd	r30, Y+3	; 0x03
    3018:	fc 81       	ldd	r31, Y+4	; 0x04
    301a:	24 81       	ldd	r18, Z+4	; 0x04
    301c:	35 81       	ldd	r19, Z+5	; 0x05
    301e:	eb 81       	ldd	r30, Y+3	; 0x03
    3020:	fc 81       	ldd	r31, Y+4	; 0x04
    3022:	84 8d       	ldd	r24, Z+28	; 0x1c
    3024:	88 2f       	mov	r24, r24
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	82 0f       	add	r24, r18
    302a:	93 1f       	adc	r25, r19
    302c:	eb 81       	ldd	r30, Y+3	; 0x03
    302e:	fc 81       	ldd	r31, Y+4	; 0x04
    3030:	95 83       	std	Z+5, r25	; 0x05
    3032:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    3034:	eb 81       	ldd	r30, Y+3	; 0x03
    3036:	fc 81       	ldd	r31, Y+4	; 0x04
    3038:	24 81       	ldd	r18, Z+4	; 0x04
    303a:	35 81       	ldd	r19, Z+5	; 0x05
    303c:	eb 81       	ldd	r30, Y+3	; 0x03
    303e:	fc 81       	ldd	r31, Y+4	; 0x04
    3040:	82 81       	ldd	r24, Z+2	; 0x02
    3042:	93 81       	ldd	r25, Z+3	; 0x03
    3044:	28 17       	cp	r18, r24
    3046:	39 07       	cpc	r19, r25
    3048:	08 f4       	brcc	.+2      	; 0x304c <prvCopyDataToQueue+0xb2>
    304a:	50 c0       	rjmp	.+160    	; 0x30ec <prvCopyDataToQueue+0x152>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    304c:	eb 81       	ldd	r30, Y+3	; 0x03
    304e:	fc 81       	ldd	r31, Y+4	; 0x04
    3050:	80 81       	ld	r24, Z
    3052:	91 81       	ldd	r25, Z+1	; 0x01
    3054:	eb 81       	ldd	r30, Y+3	; 0x03
    3056:	fc 81       	ldd	r31, Y+4	; 0x04
    3058:	95 83       	std	Z+5, r25	; 0x05
    305a:	84 83       	std	Z+4, r24	; 0x04
    305c:	47 c0       	rjmp	.+142    	; 0x30ec <prvCopyDataToQueue+0x152>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    305e:	eb 81       	ldd	r30, Y+3	; 0x03
    3060:	fc 81       	ldd	r31, Y+4	; 0x04
    3062:	66 81       	ldd	r22, Z+6	; 0x06
    3064:	77 81       	ldd	r23, Z+7	; 0x07
    3066:	eb 81       	ldd	r30, Y+3	; 0x03
    3068:	fc 81       	ldd	r31, Y+4	; 0x04
    306a:	84 8d       	ldd	r24, Z+28	; 0x1c
    306c:	48 2f       	mov	r20, r24
    306e:	50 e0       	ldi	r21, 0x00	; 0
    3070:	2d 81       	ldd	r18, Y+5	; 0x05
    3072:	3e 81       	ldd	r19, Y+6	; 0x06
    3074:	cb 01       	movw	r24, r22
    3076:	b9 01       	movw	r22, r18
    3078:	0e 94 37 2a 	call	0x546e	; 0x546e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    307c:	eb 81       	ldd	r30, Y+3	; 0x03
    307e:	fc 81       	ldd	r31, Y+4	; 0x04
    3080:	26 81       	ldd	r18, Z+6	; 0x06
    3082:	37 81       	ldd	r19, Z+7	; 0x07
    3084:	eb 81       	ldd	r30, Y+3	; 0x03
    3086:	fc 81       	ldd	r31, Y+4	; 0x04
    3088:	84 8d       	ldd	r24, Z+28	; 0x1c
    308a:	88 2f       	mov	r24, r24
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	90 95       	com	r25
    3090:	81 95       	neg	r24
    3092:	9f 4f       	sbci	r25, 0xFF	; 255
    3094:	82 0f       	add	r24, r18
    3096:	93 1f       	adc	r25, r19
    3098:	eb 81       	ldd	r30, Y+3	; 0x03
    309a:	fc 81       	ldd	r31, Y+4	; 0x04
    309c:	97 83       	std	Z+7, r25	; 0x07
    309e:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    30a0:	eb 81       	ldd	r30, Y+3	; 0x03
    30a2:	fc 81       	ldd	r31, Y+4	; 0x04
    30a4:	26 81       	ldd	r18, Z+6	; 0x06
    30a6:	37 81       	ldd	r19, Z+7	; 0x07
    30a8:	eb 81       	ldd	r30, Y+3	; 0x03
    30aa:	fc 81       	ldd	r31, Y+4	; 0x04
    30ac:	80 81       	ld	r24, Z
    30ae:	91 81       	ldd	r25, Z+1	; 0x01
    30b0:	28 17       	cp	r18, r24
    30b2:	39 07       	cpc	r19, r25
    30b4:	90 f4       	brcc	.+36     	; 0x30da <prvCopyDataToQueue+0x140>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    30b6:	eb 81       	ldd	r30, Y+3	; 0x03
    30b8:	fc 81       	ldd	r31, Y+4	; 0x04
    30ba:	22 81       	ldd	r18, Z+2	; 0x02
    30bc:	33 81       	ldd	r19, Z+3	; 0x03
    30be:	eb 81       	ldd	r30, Y+3	; 0x03
    30c0:	fc 81       	ldd	r31, Y+4	; 0x04
    30c2:	84 8d       	ldd	r24, Z+28	; 0x1c
    30c4:	88 2f       	mov	r24, r24
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	90 95       	com	r25
    30ca:	81 95       	neg	r24
    30cc:	9f 4f       	sbci	r25, 0xFF	; 255
    30ce:	82 0f       	add	r24, r18
    30d0:	93 1f       	adc	r25, r19
    30d2:	eb 81       	ldd	r30, Y+3	; 0x03
    30d4:	fc 81       	ldd	r31, Y+4	; 0x04
    30d6:	97 83       	std	Z+7, r25	; 0x07
    30d8:	86 83       	std	Z+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    30da:	8f 81       	ldd	r24, Y+7	; 0x07
    30dc:	82 30       	cpi	r24, 0x02	; 2
    30de:	31 f4       	brne	.+12     	; 0x30ec <prvCopyDataToQueue+0x152>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    30e0:	89 81       	ldd	r24, Y+1	; 0x01
    30e2:	88 23       	and	r24, r24
    30e4:	19 f0       	breq	.+6      	; 0x30ec <prvCopyDataToQueue+0x152>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
    30e8:	81 50       	subi	r24, 0x01	; 1
    30ea:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    30ec:	89 81       	ldd	r24, Y+1	; 0x01
    30ee:	8f 5f       	subi	r24, 0xFF	; 255
    30f0:	eb 81       	ldd	r30, Y+3	; 0x03
    30f2:	fc 81       	ldd	r31, Y+4	; 0x04
    30f4:	82 8f       	std	Z+26, r24	; 0x1a

	return xReturn;
    30f6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    30f8:	27 96       	adiw	r28, 0x07	; 7
    30fa:	0f b6       	in	r0, 0x3f	; 63
    30fc:	f8 94       	cli
    30fe:	de bf       	out	0x3e, r29	; 62
    3100:	0f be       	out	0x3f, r0	; 63
    3102:	cd bf       	out	0x3d, r28	; 61
    3104:	cf 91       	pop	r28
    3106:	df 91       	pop	r29
    3108:	08 95       	ret

0000310a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    310a:	df 93       	push	r29
    310c:	cf 93       	push	r28
    310e:	00 d0       	rcall	.+0      	; 0x3110 <prvCopyDataFromQueue+0x6>
    3110:	00 d0       	rcall	.+0      	; 0x3112 <prvCopyDataFromQueue+0x8>
    3112:	cd b7       	in	r28, 0x3d	; 61
    3114:	de b7       	in	r29, 0x3e	; 62
    3116:	9a 83       	std	Y+2, r25	; 0x02
    3118:	89 83       	std	Y+1, r24	; 0x01
    311a:	7c 83       	std	Y+4, r23	; 0x04
    311c:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    311e:	e9 81       	ldd	r30, Y+1	; 0x01
    3120:	fa 81       	ldd	r31, Y+2	; 0x02
    3122:	84 8d       	ldd	r24, Z+28	; 0x1c
    3124:	88 23       	and	r24, r24
    3126:	89 f1       	breq	.+98     	; 0x318a <prvCopyDataFromQueue+0x80>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    3128:	e9 81       	ldd	r30, Y+1	; 0x01
    312a:	fa 81       	ldd	r31, Y+2	; 0x02
    312c:	26 81       	ldd	r18, Z+6	; 0x06
    312e:	37 81       	ldd	r19, Z+7	; 0x07
    3130:	e9 81       	ldd	r30, Y+1	; 0x01
    3132:	fa 81       	ldd	r31, Y+2	; 0x02
    3134:	84 8d       	ldd	r24, Z+28	; 0x1c
    3136:	88 2f       	mov	r24, r24
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	82 0f       	add	r24, r18
    313c:	93 1f       	adc	r25, r19
    313e:	e9 81       	ldd	r30, Y+1	; 0x01
    3140:	fa 81       	ldd	r31, Y+2	; 0x02
    3142:	97 83       	std	Z+7, r25	; 0x07
    3144:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    3146:	e9 81       	ldd	r30, Y+1	; 0x01
    3148:	fa 81       	ldd	r31, Y+2	; 0x02
    314a:	26 81       	ldd	r18, Z+6	; 0x06
    314c:	37 81       	ldd	r19, Z+7	; 0x07
    314e:	e9 81       	ldd	r30, Y+1	; 0x01
    3150:	fa 81       	ldd	r31, Y+2	; 0x02
    3152:	82 81       	ldd	r24, Z+2	; 0x02
    3154:	93 81       	ldd	r25, Z+3	; 0x03
    3156:	28 17       	cp	r18, r24
    3158:	39 07       	cpc	r19, r25
    315a:	40 f0       	brcs	.+16     	; 0x316c <prvCopyDataFromQueue+0x62>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    315c:	e9 81       	ldd	r30, Y+1	; 0x01
    315e:	fa 81       	ldd	r31, Y+2	; 0x02
    3160:	80 81       	ld	r24, Z
    3162:	91 81       	ldd	r25, Z+1	; 0x01
    3164:	e9 81       	ldd	r30, Y+1	; 0x01
    3166:	fa 81       	ldd	r31, Y+2	; 0x02
    3168:	97 83       	std	Z+7, r25	; 0x07
    316a:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    316c:	e9 81       	ldd	r30, Y+1	; 0x01
    316e:	fa 81       	ldd	r31, Y+2	; 0x02
    3170:	46 81       	ldd	r20, Z+6	; 0x06
    3172:	57 81       	ldd	r21, Z+7	; 0x07
    3174:	e9 81       	ldd	r30, Y+1	; 0x01
    3176:	fa 81       	ldd	r31, Y+2	; 0x02
    3178:	84 8d       	ldd	r24, Z+28	; 0x1c
    317a:	28 2f       	mov	r18, r24
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	8b 81       	ldd	r24, Y+3	; 0x03
    3180:	9c 81       	ldd	r25, Y+4	; 0x04
    3182:	ba 01       	movw	r22, r20
    3184:	a9 01       	movw	r20, r18
    3186:	0e 94 37 2a 	call	0x546e	; 0x546e <memcpy>
	}
}
    318a:	0f 90       	pop	r0
    318c:	0f 90       	pop	r0
    318e:	0f 90       	pop	r0
    3190:	0f 90       	pop	r0
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	08 95       	ret

00003198 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    3198:	df 93       	push	r29
    319a:	cf 93       	push	r28
    319c:	00 d0       	rcall	.+0      	; 0x319e <prvUnlockQueue+0x6>
    319e:	00 d0       	rcall	.+0      	; 0x31a0 <prvUnlockQueue+0x8>
    31a0:	cd b7       	in	r28, 0x3d	; 61
    31a2:	de b7       	in	r29, 0x3e	; 62
    31a4:	9c 83       	std	Y+4, r25	; 0x04
    31a6:	8b 83       	std	Y+3, r24	; 0x03

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	f8 94       	cli
    31ac:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
    31ae:	eb 81       	ldd	r30, Y+3	; 0x03
    31b0:	fc 81       	ldd	r31, Y+4	; 0x04
    31b2:	86 8d       	ldd	r24, Z+30	; 0x1e
    31b4:	8a 83       	std	Y+2, r24	; 0x02
    31b6:	11 c0       	rjmp	.+34     	; 0x31da <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    31b8:	eb 81       	ldd	r30, Y+3	; 0x03
    31ba:	fc 81       	ldd	r31, Y+4	; 0x04
    31bc:	81 89       	ldd	r24, Z+17	; 0x11
    31be:	88 23       	and	r24, r24
    31c0:	79 f0       	breq	.+30     	; 0x31e0 <prvUnlockQueue+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    31c2:	8b 81       	ldd	r24, Y+3	; 0x03
    31c4:	9c 81       	ldd	r25, Y+4	; 0x04
    31c6:	41 96       	adiw	r24, 0x11	; 17
    31c8:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <xTaskRemoveFromEventList>
    31cc:	88 23       	and	r24, r24
    31ce:	11 f0       	breq	.+4      	; 0x31d4 <prvUnlockQueue+0x3c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    31d0:	0e 94 b1 23 	call	0x4762	; 0x4762 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    31d4:	8a 81       	ldd	r24, Y+2	; 0x02
    31d6:	81 50       	subi	r24, 0x01	; 1
    31d8:	8a 83       	std	Y+2, r24	; 0x02
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    31da:	8a 81       	ldd	r24, Y+2	; 0x02
    31dc:	18 16       	cp	r1, r24
    31de:	64 f3       	brlt	.-40     	; 0x31b8 <prvUnlockQueue+0x20>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    31e0:	eb 81       	ldd	r30, Y+3	; 0x03
    31e2:	fc 81       	ldd	r31, Y+4	; 0x04
    31e4:	8f ef       	ldi	r24, 0xFF	; 255
    31e6:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    31e8:	0f 90       	pop	r0
    31ea:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    31ec:	0f b6       	in	r0, 0x3f	; 63
    31ee:	f8 94       	cli
    31f0:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
    31f2:	eb 81       	ldd	r30, Y+3	; 0x03
    31f4:	fc 81       	ldd	r31, Y+4	; 0x04
    31f6:	85 8d       	ldd	r24, Z+29	; 0x1d
    31f8:	89 83       	std	Y+1, r24	; 0x01
    31fa:	11 c0       	rjmp	.+34     	; 0x321e <prvUnlockQueue+0x86>

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    31fc:	eb 81       	ldd	r30, Y+3	; 0x03
    31fe:	fc 81       	ldd	r31, Y+4	; 0x04
    3200:	80 85       	ldd	r24, Z+8	; 0x08
    3202:	88 23       	and	r24, r24
    3204:	79 f0       	breq	.+30     	; 0x3224 <prvUnlockQueue+0x8c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3206:	8b 81       	ldd	r24, Y+3	; 0x03
    3208:	9c 81       	ldd	r25, Y+4	; 0x04
    320a:	08 96       	adiw	r24, 0x08	; 8
    320c:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <xTaskRemoveFromEventList>
    3210:	88 23       	and	r24, r24
    3212:	11 f0       	breq	.+4      	; 0x3218 <prvUnlockQueue+0x80>
				{
					vTaskMissedYield();
    3214:	0e 94 b1 23 	call	0x4762	; 0x4762 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	81 50       	subi	r24, 0x01	; 1
    321c:	89 83       	std	Y+1, r24	; 0x01
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    321e:	89 81       	ldd	r24, Y+1	; 0x01
    3220:	18 16       	cp	r1, r24
    3222:	64 f3       	brlt	.-40     	; 0x31fc <prvUnlockQueue+0x64>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    3224:	eb 81       	ldd	r30, Y+3	; 0x03
    3226:	fc 81       	ldd	r31, Y+4	; 0x04
    3228:	8f ef       	ldi	r24, 0xFF	; 255
    322a:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    322c:	0f 90       	pop	r0
    322e:	0f be       	out	0x3f, r0	; 63
}
    3230:	0f 90       	pop	r0
    3232:	0f 90       	pop	r0
    3234:	0f 90       	pop	r0
    3236:	0f 90       	pop	r0
    3238:	cf 91       	pop	r28
    323a:	df 91       	pop	r29
    323c:	08 95       	ret

0000323e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    323e:	df 93       	push	r29
    3240:	cf 93       	push	r28
    3242:	00 d0       	rcall	.+0      	; 0x3244 <prvIsQueueEmpty+0x6>
    3244:	0f 92       	push	r0
    3246:	cd b7       	in	r28, 0x3d	; 61
    3248:	de b7       	in	r29, 0x3e	; 62
    324a:	9b 83       	std	Y+3, r25	; 0x03
    324c:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    324e:	0f b6       	in	r0, 0x3f	; 63
    3250:	f8 94       	cli
    3252:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    3254:	ea 81       	ldd	r30, Y+2	; 0x02
    3256:	fb 81       	ldd	r31, Y+3	; 0x03
    3258:	82 8d       	ldd	r24, Z+26	; 0x1a
    325a:	88 23       	and	r24, r24
    325c:	19 f4       	brne	.+6      	; 0x3264 <prvIsQueueEmpty+0x26>
		{
			xReturn = pdTRUE;
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	89 83       	std	Y+1, r24	; 0x01
    3262:	01 c0       	rjmp	.+2      	; 0x3266 <prvIsQueueEmpty+0x28>
		}
		else
		{
			xReturn = pdFALSE;
    3264:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    3266:	0f 90       	pop	r0
    3268:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    326a:	89 81       	ldd	r24, Y+1	; 0x01
}
    326c:	0f 90       	pop	r0
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	cf 91       	pop	r28
    3274:	df 91       	pop	r29
    3276:	08 95       	ret

00003278 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    3278:	df 93       	push	r29
    327a:	cf 93       	push	r28
    327c:	00 d0       	rcall	.+0      	; 0x327e <xQueueIsQueueEmptyFromISR+0x6>
    327e:	0f 92       	push	r0
    3280:	cd b7       	in	r28, 0x3d	; 61
    3282:	de b7       	in	r29, 0x3e	; 62
    3284:	9b 83       	std	Y+3, r25	; 0x03
    3286:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    3288:	ea 81       	ldd	r30, Y+2	; 0x02
    328a:	fb 81       	ldd	r31, Y+3	; 0x03
    328c:	82 8d       	ldd	r24, Z+26	; 0x1a
    328e:	88 23       	and	r24, r24
    3290:	19 f4       	brne	.+6      	; 0x3298 <xQueueIsQueueEmptyFromISR+0x20>
	{
		xReturn = pdTRUE;
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	89 83       	std	Y+1, r24	; 0x01
    3296:	01 c0       	rjmp	.+2      	; 0x329a <xQueueIsQueueEmptyFromISR+0x22>
	}
	else
	{
		xReturn = pdFALSE;
    3298:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    329a:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    329c:	0f 90       	pop	r0
    329e:	0f 90       	pop	r0
    32a0:	0f 90       	pop	r0
    32a2:	cf 91       	pop	r28
    32a4:	df 91       	pop	r29
    32a6:	08 95       	ret

000032a8 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    32a8:	df 93       	push	r29
    32aa:	cf 93       	push	r28
    32ac:	00 d0       	rcall	.+0      	; 0x32ae <prvIsQueueFull+0x6>
    32ae:	0f 92       	push	r0
    32b0:	cd b7       	in	r28, 0x3d	; 61
    32b2:	de b7       	in	r29, 0x3e	; 62
    32b4:	9b 83       	std	Y+3, r25	; 0x03
    32b6:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    32b8:	0f b6       	in	r0, 0x3f	; 63
    32ba:	f8 94       	cli
    32bc:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    32be:	ea 81       	ldd	r30, Y+2	; 0x02
    32c0:	fb 81       	ldd	r31, Y+3	; 0x03
    32c2:	92 8d       	ldd	r25, Z+26	; 0x1a
    32c4:	ea 81       	ldd	r30, Y+2	; 0x02
    32c6:	fb 81       	ldd	r31, Y+3	; 0x03
    32c8:	83 8d       	ldd	r24, Z+27	; 0x1b
    32ca:	98 17       	cp	r25, r24
    32cc:	19 f4       	brne	.+6      	; 0x32d4 <prvIsQueueFull+0x2c>
		{
			xReturn = pdTRUE;
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	89 83       	std	Y+1, r24	; 0x01
    32d2:	01 c0       	rjmp	.+2      	; 0x32d6 <prvIsQueueFull+0x2e>
		}
		else
		{
			xReturn = pdFALSE;
    32d4:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    32d6:	0f 90       	pop	r0
    32d8:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    32da:	89 81       	ldd	r24, Y+1	; 0x01
}
    32dc:	0f 90       	pop	r0
    32de:	0f 90       	pop	r0
    32e0:	0f 90       	pop	r0
    32e2:	cf 91       	pop	r28
    32e4:	df 91       	pop	r29
    32e6:	08 95       	ret

000032e8 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    32e8:	df 93       	push	r29
    32ea:	cf 93       	push	r28
    32ec:	00 d0       	rcall	.+0      	; 0x32ee <xQueueIsQueueFullFromISR+0x6>
    32ee:	0f 92       	push	r0
    32f0:	cd b7       	in	r28, 0x3d	; 61
    32f2:	de b7       	in	r29, 0x3e	; 62
    32f4:	9b 83       	std	Y+3, r25	; 0x03
    32f6:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    32f8:	ea 81       	ldd	r30, Y+2	; 0x02
    32fa:	fb 81       	ldd	r31, Y+3	; 0x03
    32fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    32fe:	ea 81       	ldd	r30, Y+2	; 0x02
    3300:	fb 81       	ldd	r31, Y+3	; 0x03
    3302:	83 8d       	ldd	r24, Z+27	; 0x1b
    3304:	98 17       	cp	r25, r24
    3306:	19 f4       	brne	.+6      	; 0x330e <xQueueIsQueueFullFromISR+0x26>
	{
		xReturn = pdTRUE;
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	89 83       	std	Y+1, r24	; 0x01
    330c:	01 c0       	rjmp	.+2      	; 0x3310 <xQueueIsQueueFullFromISR+0x28>
	}
	else
	{
		xReturn = pdFALSE;
    330e:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    3310:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    3312:	0f 90       	pop	r0
    3314:	0f 90       	pop	r0
    3316:	0f 90       	pop	r0
    3318:	cf 91       	pop	r28
    331a:	df 91       	pop	r29
    331c:	08 95       	ret

0000331e <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    331e:	df 93       	push	r29
    3320:	cf 93       	push	r28
    3322:	00 d0       	rcall	.+0      	; 0x3324 <vQueueAddToRegistry+0x6>
    3324:	00 d0       	rcall	.+0      	; 0x3326 <vQueueAddToRegistry+0x8>
    3326:	0f 92       	push	r0
    3328:	cd b7       	in	r28, 0x3d	; 61
    332a:	de b7       	in	r29, 0x3e	; 62
    332c:	9b 83       	std	Y+3, r25	; 0x03
    332e:	8a 83       	std	Y+2, r24	; 0x02
    3330:	7d 83       	std	Y+5, r23	; 0x05
    3332:	6c 83       	std	Y+4, r22	; 0x04
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    3334:	19 82       	std	Y+1, r1	; 0x01
    3336:	2f c0       	rjmp	.+94     	; 0x3396 <vQueueAddToRegistry+0x78>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    3338:	89 81       	ldd	r24, Y+1	; 0x01
    333a:	88 2f       	mov	r24, r24
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	88 0f       	add	r24, r24
    3340:	99 1f       	adc	r25, r25
    3342:	88 0f       	add	r24, r24
    3344:	99 1f       	adc	r25, r25
    3346:	fc 01       	movw	r30, r24
    3348:	ee 5e       	subi	r30, 0xEE	; 238
    334a:	fb 4f       	sbci	r31, 0xFB	; 251
    334c:	80 81       	ld	r24, Z
    334e:	91 81       	ldd	r25, Z+1	; 0x01
    3350:	00 97       	sbiw	r24, 0x00	; 0
    3352:	f1 f4       	brne	.+60     	; 0x3390 <vQueueAddToRegistry+0x72>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    3354:	89 81       	ldd	r24, Y+1	; 0x01
    3356:	88 2f       	mov	r24, r24
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	88 0f       	add	r24, r24
    335c:	99 1f       	adc	r25, r25
    335e:	88 0f       	add	r24, r24
    3360:	99 1f       	adc	r25, r25
    3362:	fc 01       	movw	r30, r24
    3364:	ee 5e       	subi	r30, 0xEE	; 238
    3366:	fb 4f       	sbci	r31, 0xFB	; 251
    3368:	8c 81       	ldd	r24, Y+4	; 0x04
    336a:	9d 81       	ldd	r25, Y+5	; 0x05
    336c:	91 83       	std	Z+1, r25	; 0x01
    336e:	80 83       	st	Z, r24
				xQueueRegistry[ ux ].xHandle = xQueue;
    3370:	89 81       	ldd	r24, Y+1	; 0x01
    3372:	88 2f       	mov	r24, r24
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	88 0f       	add	r24, r24
    3378:	99 1f       	adc	r25, r25
    337a:	01 96       	adiw	r24, 0x01	; 1
    337c:	88 0f       	add	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	fc 01       	movw	r30, r24
    3382:	ee 5e       	subi	r30, 0xEE	; 238
    3384:	fb 4f       	sbci	r31, 0xFB	; 251
    3386:	8a 81       	ldd	r24, Y+2	; 0x02
    3388:	9b 81       	ldd	r25, Y+3	; 0x03
    338a:	91 83       	std	Z+1, r25	; 0x01
    338c:	80 83       	st	Z, r24
    338e:	06 c0       	rjmp	.+12     	; 0x339c <vQueueAddToRegistry+0x7e>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    3390:	89 81       	ldd	r24, Y+1	; 0x01
    3392:	8f 5f       	subi	r24, 0xFF	; 255
    3394:	89 83       	std	Y+1, r24	; 0x01
    3396:	89 81       	ldd	r24, Y+1	; 0x01
    3398:	88 30       	cpi	r24, 0x08	; 8
    339a:	70 f2       	brcs	.-100    	; 0x3338 <vQueueAddToRegistry+0x1a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    339c:	0f 90       	pop	r0
    339e:	0f 90       	pop	r0
    33a0:	0f 90       	pop	r0
    33a2:	0f 90       	pop	r0
    33a4:	0f 90       	pop	r0
    33a6:	cf 91       	pop	r28
    33a8:	df 91       	pop	r29
    33aa:	08 95       	ret

000033ac <pcQueueGetName>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    33ac:	df 93       	push	r29
    33ae:	cf 93       	push	r28
    33b0:	00 d0       	rcall	.+0      	; 0x33b2 <pcQueueGetName+0x6>
    33b2:	00 d0       	rcall	.+0      	; 0x33b4 <pcQueueGetName+0x8>
    33b4:	0f 92       	push	r0
    33b6:	cd b7       	in	r28, 0x3d	; 61
    33b8:	de b7       	in	r29, 0x3e	; 62
    33ba:	9d 83       	std	Y+5, r25	; 0x05
    33bc:	8c 83       	std	Y+4, r24	; 0x04
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    33be:	1a 82       	std	Y+2, r1	; 0x02
    33c0:	19 82       	std	Y+1, r1	; 0x01

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    33c2:	1b 82       	std	Y+3, r1	; 0x03
    33c4:	24 c0       	rjmp	.+72     	; 0x340e <pcQueueGetName+0x62>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    33c6:	8b 81       	ldd	r24, Y+3	; 0x03
    33c8:	88 2f       	mov	r24, r24
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	88 0f       	add	r24, r24
    33ce:	99 1f       	adc	r25, r25
    33d0:	01 96       	adiw	r24, 0x01	; 1
    33d2:	88 0f       	add	r24, r24
    33d4:	99 1f       	adc	r25, r25
    33d6:	fc 01       	movw	r30, r24
    33d8:	ee 5e       	subi	r30, 0xEE	; 238
    33da:	fb 4f       	sbci	r31, 0xFB	; 251
    33dc:	20 81       	ld	r18, Z
    33de:	31 81       	ldd	r19, Z+1	; 0x01
    33e0:	8c 81       	ldd	r24, Y+4	; 0x04
    33e2:	9d 81       	ldd	r25, Y+5	; 0x05
    33e4:	28 17       	cp	r18, r24
    33e6:	39 07       	cpc	r19, r25
    33e8:	79 f4       	brne	.+30     	; 0x3408 <pcQueueGetName+0x5c>
			{
				pcReturn = xQueueRegistry[ ux ].pcQueueName;
    33ea:	8b 81       	ldd	r24, Y+3	; 0x03
    33ec:	88 2f       	mov	r24, r24
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	88 0f       	add	r24, r24
    33f2:	99 1f       	adc	r25, r25
    33f4:	88 0f       	add	r24, r24
    33f6:	99 1f       	adc	r25, r25
    33f8:	fc 01       	movw	r30, r24
    33fa:	ee 5e       	subi	r30, 0xEE	; 238
    33fc:	fb 4f       	sbci	r31, 0xFB	; 251
    33fe:	80 81       	ld	r24, Z
    3400:	91 81       	ldd	r25, Z+1	; 0x01
    3402:	9a 83       	std	Y+2, r25	; 0x02
    3404:	89 83       	std	Y+1, r24	; 0x01
    3406:	06 c0       	rjmp	.+12     	; 0x3414 <pcQueueGetName+0x68>
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    3408:	8b 81       	ldd	r24, Y+3	; 0x03
    340a:	8f 5f       	subi	r24, 0xFF	; 255
    340c:	8b 83       	std	Y+3, r24	; 0x03
    340e:	8b 81       	ldd	r24, Y+3	; 0x03
    3410:	88 30       	cpi	r24, 0x08	; 8
    3412:	c8 f2       	brcs	.-78     	; 0x33c6 <pcQueueGetName+0x1a>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return pcReturn;
    3414:	89 81       	ldd	r24, Y+1	; 0x01
    3416:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    3418:	0f 90       	pop	r0
    341a:	0f 90       	pop	r0
    341c:	0f 90       	pop	r0
    341e:	0f 90       	pop	r0
    3420:	0f 90       	pop	r0
    3422:	cf 91       	pop	r28
    3424:	df 91       	pop	r29
    3426:	08 95       	ret

00003428 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
    3428:	df 93       	push	r29
    342a:	cf 93       	push	r28
    342c:	00 d0       	rcall	.+0      	; 0x342e <vQueueUnregisterQueue+0x6>
    342e:	0f 92       	push	r0
    3430:	cd b7       	in	r28, 0x3d	; 61
    3432:	de b7       	in	r29, 0x3e	; 62
    3434:	9b 83       	std	Y+3, r25	; 0x03
    3436:	8a 83       	std	Y+2, r24	; 0x02
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    3438:	19 82       	std	Y+1, r1	; 0x01
    343a:	2f c0       	rjmp	.+94     	; 0x349a <vQueueUnregisterQueue+0x72>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    343c:	89 81       	ldd	r24, Y+1	; 0x01
    343e:	88 2f       	mov	r24, r24
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	88 0f       	add	r24, r24
    3444:	99 1f       	adc	r25, r25
    3446:	01 96       	adiw	r24, 0x01	; 1
    3448:	88 0f       	add	r24, r24
    344a:	99 1f       	adc	r25, r25
    344c:	fc 01       	movw	r30, r24
    344e:	ee 5e       	subi	r30, 0xEE	; 238
    3450:	fb 4f       	sbci	r31, 0xFB	; 251
    3452:	20 81       	ld	r18, Z
    3454:	31 81       	ldd	r19, Z+1	; 0x01
    3456:	8a 81       	ldd	r24, Y+2	; 0x02
    3458:	9b 81       	ldd	r25, Y+3	; 0x03
    345a:	28 17       	cp	r18, r24
    345c:	39 07       	cpc	r19, r25
    345e:	d1 f4       	brne	.+52     	; 0x3494 <vQueueUnregisterQueue+0x6c>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
    3460:	89 81       	ldd	r24, Y+1	; 0x01
    3462:	88 2f       	mov	r24, r24
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	88 0f       	add	r24, r24
    3468:	99 1f       	adc	r25, r25
    346a:	88 0f       	add	r24, r24
    346c:	99 1f       	adc	r25, r25
    346e:	fc 01       	movw	r30, r24
    3470:	ee 5e       	subi	r30, 0xEE	; 238
    3472:	fb 4f       	sbci	r31, 0xFB	; 251
    3474:	11 82       	std	Z+1, r1	; 0x01
    3476:	10 82       	st	Z, r1

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
    3478:	89 81       	ldd	r24, Y+1	; 0x01
    347a:	88 2f       	mov	r24, r24
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	88 0f       	add	r24, r24
    3480:	99 1f       	adc	r25, r25
    3482:	01 96       	adiw	r24, 0x01	; 1
    3484:	88 0f       	add	r24, r24
    3486:	99 1f       	adc	r25, r25
    3488:	fc 01       	movw	r30, r24
    348a:	ee 5e       	subi	r30, 0xEE	; 238
    348c:	fb 4f       	sbci	r31, 0xFB	; 251
    348e:	11 82       	std	Z+1, r1	; 0x01
    3490:	10 82       	st	Z, r1
    3492:	06 c0       	rjmp	.+12     	; 0x34a0 <vQueueUnregisterQueue+0x78>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    3494:	89 81       	ldd	r24, Y+1	; 0x01
    3496:	8f 5f       	subi	r24, 0xFF	; 255
    3498:	89 83       	std	Y+1, r24	; 0x01
    349a:	89 81       	ldd	r24, Y+1	; 0x01
    349c:	88 30       	cpi	r24, 0x08	; 8
    349e:	70 f2       	brcs	.-100    	; 0x343c <vQueueUnregisterQueue+0x14>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    34a0:	0f 90       	pop	r0
    34a2:	0f 90       	pop	r0
    34a4:	0f 90       	pop	r0
    34a6:	cf 91       	pop	r28
    34a8:	df 91       	pop	r29
    34aa:	08 95       	ret

000034ac <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    34ac:	8f 92       	push	r8
    34ae:	9f 92       	push	r9
    34b0:	af 92       	push	r10
    34b2:	bf 92       	push	r11
    34b4:	cf 92       	push	r12
    34b6:	df 92       	push	r13
    34b8:	ef 92       	push	r14
    34ba:	ff 92       	push	r15
    34bc:	0f 93       	push	r16
    34be:	1f 93       	push	r17
    34c0:	df 93       	push	r29
    34c2:	cf 93       	push	r28
    34c4:	cd b7       	in	r28, 0x3d	; 61
    34c6:	de b7       	in	r29, 0x3e	; 62
    34c8:	60 97       	sbiw	r28, 0x10	; 16
    34ca:	0f b6       	in	r0, 0x3f	; 63
    34cc:	f8 94       	cli
    34ce:	de bf       	out	0x3e, r29	; 62
    34d0:	0f be       	out	0x3f, r0	; 63
    34d2:	cd bf       	out	0x3d, r28	; 61
    34d4:	9f 83       	std	Y+7, r25	; 0x07
    34d6:	8e 83       	std	Y+6, r24	; 0x06
    34d8:	79 87       	std	Y+9, r23	; 0x09
    34da:	68 87       	std	Y+8, r22	; 0x08
    34dc:	5b 87       	std	Y+11, r21	; 0x0b
    34de:	4a 87       	std	Y+10, r20	; 0x0a
    34e0:	3d 87       	std	Y+13, r19	; 0x0d
    34e2:	2c 87       	std	Y+12, r18	; 0x0c
    34e4:	0e 87       	std	Y+14, r16	; 0x0e
    34e6:	f8 8a       	std	Y+16, r15	; 0x10
    34e8:	ef 86       	std	Y+15, r14	; 0x0f
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    34ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    34ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    34ee:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <pvPortMalloc>
    34f2:	9a 83       	std	Y+2, r25	; 0x02
    34f4:	89 83       	std	Y+1, r24	; 0x01

			if( pxStack != NULL )
    34f6:	89 81       	ldd	r24, Y+1	; 0x01
    34f8:	9a 81       	ldd	r25, Y+2	; 0x02
    34fa:	00 97       	sbiw	r24, 0x00	; 0
    34fc:	b1 f0       	breq	.+44     	; 0x352a <xTaskCreate+0x7e>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    34fe:	8a e2       	ldi	r24, 0x2A	; 42
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <pvPortMalloc>
    3506:	9d 83       	std	Y+5, r25	; 0x05
    3508:	8c 83       	std	Y+4, r24	; 0x04

				if( pxNewTCB != NULL )
    350a:	8c 81       	ldd	r24, Y+4	; 0x04
    350c:	9d 81       	ldd	r25, Y+5	; 0x05
    350e:	00 97       	sbiw	r24, 0x00	; 0
    3510:	39 f0       	breq	.+14     	; 0x3520 <xTaskCreate+0x74>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    3512:	ec 81       	ldd	r30, Y+4	; 0x04
    3514:	fd 81       	ldd	r31, Y+5	; 0x05
    3516:	89 81       	ldd	r24, Y+1	; 0x01
    3518:	9a 81       	ldd	r25, Y+2	; 0x02
    351a:	90 8f       	std	Z+24, r25	; 0x18
    351c:	87 8b       	std	Z+23, r24	; 0x17
    351e:	07 c0       	rjmp	.+14     	; 0x352e <xTaskCreate+0x82>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    3520:	89 81       	ldd	r24, Y+1	; 0x01
    3522:	9a 81       	ldd	r25, Y+2	; 0x02
    3524:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <vPortFree>
    3528:	02 c0       	rjmp	.+4      	; 0x352e <xTaskCreate+0x82>
				}
			}
			else
			{
				pxNewTCB = NULL;
    352a:	1d 82       	std	Y+5, r1	; 0x05
    352c:	1c 82       	std	Y+4, r1	; 0x04
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    352e:	8c 81       	ldd	r24, Y+4	; 0x04
    3530:	9d 81       	ldd	r25, Y+5	; 0x05
    3532:	00 97       	sbiw	r24, 0x00	; 0
    3534:	e9 f0       	breq	.+58     	; 0x3570 <xTaskCreate+0xc4>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    3536:	8a 85       	ldd	r24, Y+10	; 0x0a
    3538:	9b 85       	ldd	r25, Y+11	; 0x0b
    353a:	9c 01       	movw	r18, r24
    353c:	40 e0       	ldi	r20, 0x00	; 0
    353e:	50 e0       	ldi	r21, 0x00	; 0
    3540:	8e 81       	ldd	r24, Y+6	; 0x06
    3542:	9f 81       	ldd	r25, Y+7	; 0x07
    3544:	68 85       	ldd	r22, Y+8	; 0x08
    3546:	79 85       	ldd	r23, Y+9	; 0x09
    3548:	ec 85       	ldd	r30, Y+12	; 0x0c
    354a:	fd 85       	ldd	r31, Y+13	; 0x0d
    354c:	af 85       	ldd	r26, Y+15	; 0x0f
    354e:	b8 89       	ldd	r27, Y+16	; 0x10
    3550:	ac 80       	ldd	r10, Y+4	; 0x04
    3552:	bd 80       	ldd	r11, Y+5	; 0x05
    3554:	8f 01       	movw	r16, r30
    3556:	ee 84       	ldd	r14, Y+14	; 0x0e
    3558:	6d 01       	movw	r12, r26
    355a:	88 24       	eor	r8, r8
    355c:	99 24       	eor	r9, r9
    355e:	0e 94 ce 1a 	call	0x359c	; 0x359c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    3562:	8c 81       	ldd	r24, Y+4	; 0x04
    3564:	9d 81       	ldd	r25, Y+5	; 0x05
    3566:	0e 94 89 1b 	call	0x3712	; 0x3712 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    356a:	81 e0       	ldi	r24, 0x01	; 1
    356c:	8b 83       	std	Y+3, r24	; 0x03
    356e:	02 c0       	rjmp	.+4      	; 0x3574 <xTaskCreate+0xc8>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3570:	8f ef       	ldi	r24, 0xFF	; 255
    3572:	8b 83       	std	Y+3, r24	; 0x03
		}

		return xReturn;
    3574:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    3576:	60 96       	adiw	r28, 0x10	; 16
    3578:	0f b6       	in	r0, 0x3f	; 63
    357a:	f8 94       	cli
    357c:	de bf       	out	0x3e, r29	; 62
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	cd bf       	out	0x3d, r28	; 61
    3582:	cf 91       	pop	r28
    3584:	df 91       	pop	r29
    3586:	1f 91       	pop	r17
    3588:	0f 91       	pop	r16
    358a:	ff 90       	pop	r15
    358c:	ef 90       	pop	r14
    358e:	df 90       	pop	r13
    3590:	cf 90       	pop	r12
    3592:	bf 90       	pop	r11
    3594:	af 90       	pop	r10
    3596:	9f 90       	pop	r9
    3598:	8f 90       	pop	r8
    359a:	08 95       	ret

0000359c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    359c:	8f 92       	push	r8
    359e:	9f 92       	push	r9
    35a0:	af 92       	push	r10
    35a2:	bf 92       	push	r11
    35a4:	cf 92       	push	r12
    35a6:	df 92       	push	r13
    35a8:	ef 92       	push	r14
    35aa:	0f 93       	push	r16
    35ac:	1f 93       	push	r17
    35ae:	df 93       	push	r29
    35b0:	cf 93       	push	r28
    35b2:	cd b7       	in	r28, 0x3d	; 61
    35b4:	de b7       	in	r29, 0x3e	; 62
    35b6:	64 97       	sbiw	r28, 0x14	; 20
    35b8:	0f b6       	in	r0, 0x3f	; 63
    35ba:	f8 94       	cli
    35bc:	de bf       	out	0x3e, r29	; 62
    35be:	0f be       	out	0x3f, r0	; 63
    35c0:	cd bf       	out	0x3d, r28	; 61
    35c2:	9d 83       	std	Y+5, r25	; 0x05
    35c4:	8c 83       	std	Y+4, r24	; 0x04
    35c6:	7f 83       	std	Y+7, r23	; 0x07
    35c8:	6e 83       	std	Y+6, r22	; 0x06
    35ca:	28 87       	std	Y+8, r18	; 0x08
    35cc:	39 87       	std	Y+9, r19	; 0x09
    35ce:	4a 87       	std	Y+10, r20	; 0x0a
    35d0:	5b 87       	std	Y+11, r21	; 0x0b
    35d2:	1d 87       	std	Y+13, r17	; 0x0d
    35d4:	0c 87       	std	Y+12, r16	; 0x0c
    35d6:	ee 86       	std	Y+14, r14	; 0x0e
    35d8:	d8 8a       	std	Y+16, r13	; 0x10
    35da:	cf 86       	std	Y+15, r12	; 0x0f
    35dc:	ba 8a       	std	Y+18, r11	; 0x12
    35de:	a9 8a       	std	Y+17, r10	; 0x11
    35e0:	9c 8a       	std	Y+20, r9	; 0x14
    35e2:	8b 8a       	std	Y+19, r8	; 0x13
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    35e4:	e9 89       	ldd	r30, Y+17	; 0x11
    35e6:	fa 89       	ldd	r31, Y+18	; 0x12
    35e8:	27 89       	ldd	r18, Z+23	; 0x17
    35ea:	30 8d       	ldd	r19, Z+24	; 0x18
    35ec:	88 85       	ldd	r24, Y+8	; 0x08
    35ee:	99 85       	ldd	r25, Y+9	; 0x09
    35f0:	01 97       	sbiw	r24, 0x01	; 1
    35f2:	82 0f       	add	r24, r18
    35f4:	93 1f       	adc	r25, r19
    35f6:	9b 83       	std	Y+3, r25	; 0x03
    35f8:	8a 83       	std	Y+2, r24	; 0x02
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    35fa:	19 82       	std	Y+1, r1	; 0x01
    35fc:	21 c0       	rjmp	.+66     	; 0x3640 <prvInitialiseNewTask+0xa4>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    35fe:	89 81       	ldd	r24, Y+1	; 0x01
    3600:	48 2f       	mov	r20, r24
    3602:	50 e0       	ldi	r21, 0x00	; 0
    3604:	89 81       	ldd	r24, Y+1	; 0x01
    3606:	28 2f       	mov	r18, r24
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	8e 81       	ldd	r24, Y+6	; 0x06
    360c:	9f 81       	ldd	r25, Y+7	; 0x07
    360e:	fc 01       	movw	r30, r24
    3610:	e2 0f       	add	r30, r18
    3612:	f3 1f       	adc	r31, r19
    3614:	20 81       	ld	r18, Z
    3616:	89 89       	ldd	r24, Y+17	; 0x11
    3618:	9a 89       	ldd	r25, Y+18	; 0x12
    361a:	84 0f       	add	r24, r20
    361c:	95 1f       	adc	r25, r21
    361e:	fc 01       	movw	r30, r24
    3620:	79 96       	adiw	r30, 0x19	; 25
    3622:	20 83       	st	Z, r18

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    3624:	89 81       	ldd	r24, Y+1	; 0x01
    3626:	28 2f       	mov	r18, r24
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	8e 81       	ldd	r24, Y+6	; 0x06
    362c:	9f 81       	ldd	r25, Y+7	; 0x07
    362e:	fc 01       	movw	r30, r24
    3630:	e2 0f       	add	r30, r18
    3632:	f3 1f       	adc	r31, r19
    3634:	80 81       	ld	r24, Z
    3636:	88 23       	and	r24, r24
    3638:	31 f0       	breq	.+12     	; 0x3646 <prvInitialiseNewTask+0xaa>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	8f 5f       	subi	r24, 0xFF	; 255
    363e:	89 83       	std	Y+1, r24	; 0x01
    3640:	89 81       	ldd	r24, Y+1	; 0x01
    3642:	8a 30       	cpi	r24, 0x0A	; 10
    3644:	e0 f2       	brcs	.-72     	; 0x35fe <prvInitialiseNewTask+0x62>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    3646:	e9 89       	ldd	r30, Y+17	; 0x11
    3648:	fa 89       	ldd	r31, Y+18	; 0x12
    364a:	12 a2       	std	Z+34, r1	; 0x22

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    364c:	8e 85       	ldd	r24, Y+14	; 0x0e
    364e:	85 30       	cpi	r24, 0x05	; 5
    3650:	10 f0       	brcs	.+4      	; 0x3656 <prvInitialiseNewTask+0xba>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    3652:	84 e0       	ldi	r24, 0x04	; 4
    3654:	8e 87       	std	Y+14, r24	; 0x0e
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    3656:	e9 89       	ldd	r30, Y+17	; 0x11
    3658:	fa 89       	ldd	r31, Y+18	; 0x12
    365a:	8e 85       	ldd	r24, Y+14	; 0x0e
    365c:	86 8b       	std	Z+22, r24	; 0x16
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    365e:	e9 89       	ldd	r30, Y+17	; 0x11
    3660:	fa 89       	ldd	r31, Y+18	; 0x12
    3662:	8e 85       	ldd	r24, Y+14	; 0x0e
    3664:	83 a3       	std	Z+35, r24	; 0x23
		pxNewTCB->uxMutexesHeld = 0;
    3666:	e9 89       	ldd	r30, Y+17	; 0x11
    3668:	fa 89       	ldd	r31, Y+18	; 0x12
    366a:	14 a2       	std	Z+36, r1	; 0x24
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    366c:	89 89       	ldd	r24, Y+17	; 0x11
    366e:	9a 89       	ldd	r25, Y+18	; 0x12
    3670:	02 96       	adiw	r24, 0x02	; 2
    3672:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    3676:	89 89       	ldd	r24, Y+17	; 0x11
    3678:	9a 89       	ldd	r25, Y+18	; 0x12
    367a:	0c 96       	adiw	r24, 0x0c	; 12
    367c:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    3680:	e9 89       	ldd	r30, Y+17	; 0x11
    3682:	fa 89       	ldd	r31, Y+18	; 0x12
    3684:	89 89       	ldd	r24, Y+17	; 0x11
    3686:	9a 89       	ldd	r25, Y+18	; 0x12
    3688:	91 87       	std	Z+9, r25	; 0x09
    368a:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    368c:	8e 85       	ldd	r24, Y+14	; 0x0e
    368e:	28 2f       	mov	r18, r24
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	85 e0       	ldi	r24, 0x05	; 5
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	82 1b       	sub	r24, r18
    3698:	93 0b       	sbc	r25, r19
    369a:	e9 89       	ldd	r30, Y+17	; 0x11
    369c:	fa 89       	ldd	r31, Y+18	; 0x12
    369e:	95 87       	std	Z+13, r25	; 0x0d
    36a0:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    36a2:	e9 89       	ldd	r30, Y+17	; 0x11
    36a4:	fa 89       	ldd	r31, Y+18	; 0x12
    36a6:	89 89       	ldd	r24, Y+17	; 0x11
    36a8:	9a 89       	ldd	r25, Y+18	; 0x12
    36aa:	93 8b       	std	Z+19, r25	; 0x13
    36ac:	82 8b       	std	Z+18, r24	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    36ae:	e9 89       	ldd	r30, Y+17	; 0x11
    36b0:	fa 89       	ldd	r31, Y+18	; 0x12
    36b2:	15 a2       	std	Z+37, r1	; 0x25
    36b4:	16 a2       	std	Z+38, r1	; 0x26
    36b6:	17 a2       	std	Z+39, r1	; 0x27
    36b8:	10 a6       	std	Z+40, r1	; 0x28
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    36ba:	e9 89       	ldd	r30, Y+17	; 0x11
    36bc:	fa 89       	ldd	r31, Y+18	; 0x12
    36be:	11 a6       	std	Z+41, r1	; 0x29
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    36c0:	8a 81       	ldd	r24, Y+2	; 0x02
    36c2:	9b 81       	ldd	r25, Y+3	; 0x03
    36c4:	2c 81       	ldd	r18, Y+4	; 0x04
    36c6:	3d 81       	ldd	r19, Y+5	; 0x05
    36c8:	4c 85       	ldd	r20, Y+12	; 0x0c
    36ca:	5d 85       	ldd	r21, Y+13	; 0x0d
    36cc:	b9 01       	movw	r22, r18
    36ce:	0e 94 6f 10 	call	0x20de	; 0x20de <pxPortInitialiseStack>
    36d2:	e9 89       	ldd	r30, Y+17	; 0x11
    36d4:	fa 89       	ldd	r31, Y+18	; 0x12
    36d6:	91 83       	std	Z+1, r25	; 0x01
    36d8:	80 83       	st	Z, r24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    36da:	8f 85       	ldd	r24, Y+15	; 0x0f
    36dc:	98 89       	ldd	r25, Y+16	; 0x10
    36de:	00 97       	sbiw	r24, 0x00	; 0
    36e0:	31 f0       	breq	.+12     	; 0x36ee <prvInitialiseNewTask+0x152>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    36e2:	ef 85       	ldd	r30, Y+15	; 0x0f
    36e4:	f8 89       	ldd	r31, Y+16	; 0x10
    36e6:	89 89       	ldd	r24, Y+17	; 0x11
    36e8:	9a 89       	ldd	r25, Y+18	; 0x12
    36ea:	91 83       	std	Z+1, r25	; 0x01
    36ec:	80 83       	st	Z, r24
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    36ee:	64 96       	adiw	r28, 0x14	; 20
    36f0:	0f b6       	in	r0, 0x3f	; 63
    36f2:	f8 94       	cli
    36f4:	de bf       	out	0x3e, r29	; 62
    36f6:	0f be       	out	0x3f, r0	; 63
    36f8:	cd bf       	out	0x3d, r28	; 61
    36fa:	cf 91       	pop	r28
    36fc:	df 91       	pop	r29
    36fe:	1f 91       	pop	r17
    3700:	0f 91       	pop	r16
    3702:	ef 90       	pop	r14
    3704:	df 90       	pop	r13
    3706:	cf 90       	pop	r12
    3708:	bf 90       	pop	r11
    370a:	af 90       	pop	r10
    370c:	9f 90       	pop	r9
    370e:	8f 90       	pop	r8
    3710:	08 95       	ret

00003712 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    3712:	df 93       	push	r29
    3714:	cf 93       	push	r28
    3716:	00 d0       	rcall	.+0      	; 0x3718 <prvAddNewTaskToReadyList+0x6>
    3718:	cd b7       	in	r28, 0x3d	; 61
    371a:	de b7       	in	r29, 0x3e	; 62
    371c:	9a 83       	std	Y+2, r25	; 0x02
    371e:	89 83       	std	Y+1, r24	; 0x01
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    3720:	0f b6       	in	r0, 0x3f	; 63
    3722:	f8 94       	cli
    3724:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    3726:	80 91 a2 03 	lds	r24, 0x03A2
    372a:	8f 5f       	subi	r24, 0xFF	; 255
    372c:	80 93 a2 03 	sts	0x03A2, r24
		if( pxCurrentTCB == NULL )
    3730:	80 91 9f 03 	lds	r24, 0x039F
    3734:	90 91 a0 03 	lds	r25, 0x03A0
    3738:	00 97       	sbiw	r24, 0x00	; 0
    373a:	69 f4       	brne	.+26     	; 0x3756 <prvAddNewTaskToReadyList+0x44>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    373c:	89 81       	ldd	r24, Y+1	; 0x01
    373e:	9a 81       	ldd	r25, Y+2	; 0x02
    3740:	90 93 a0 03 	sts	0x03A0, r25
    3744:	80 93 9f 03 	sts	0x039F, r24

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    3748:	80 91 a2 03 	lds	r24, 0x03A2
    374c:	81 30       	cpi	r24, 0x01	; 1
    374e:	b9 f4       	brne	.+46     	; 0x377e <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    3750:	0e 94 cb 23 	call	0x4796	; 0x4796 <prvInitialiseTaskLists>
    3754:	14 c0       	rjmp	.+40     	; 0x377e <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    3756:	80 91 a6 03 	lds	r24, 0x03A6
    375a:	88 23       	and	r24, r24
    375c:	81 f4       	brne	.+32     	; 0x377e <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    375e:	e0 91 9f 03 	lds	r30, 0x039F
    3762:	f0 91 a0 03 	lds	r31, 0x03A0
    3766:	96 89       	ldd	r25, Z+22	; 0x16
    3768:	e9 81       	ldd	r30, Y+1	; 0x01
    376a:	fa 81       	ldd	r31, Y+2	; 0x02
    376c:	86 89       	ldd	r24, Z+22	; 0x16
    376e:	89 17       	cp	r24, r25
    3770:	30 f0       	brcs	.+12     	; 0x377e <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
    3772:	89 81       	ldd	r24, Y+1	; 0x01
    3774:	9a 81       	ldd	r25, Y+2	; 0x02
    3776:	90 93 a0 03 	sts	0x03A0, r25
    377a:	80 93 9f 03 	sts	0x039F, r24
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    377e:	80 91 aa 03 	lds	r24, 0x03AA
    3782:	8f 5f       	subi	r24, 0xFF	; 255
    3784:	80 93 aa 03 	sts	0x03AA, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    3788:	e9 81       	ldd	r30, Y+1	; 0x01
    378a:	fa 81       	ldd	r31, Y+2	; 0x02
    378c:	96 89       	ldd	r25, Z+22	; 0x16
    378e:	80 91 a5 03 	lds	r24, 0x03A5
    3792:	89 17       	cp	r24, r25
    3794:	28 f4       	brcc	.+10     	; 0x37a0 <prvAddNewTaskToReadyList+0x8e>
    3796:	e9 81       	ldd	r30, Y+1	; 0x01
    3798:	fa 81       	ldd	r31, Y+2	; 0x02
    379a:	86 89       	ldd	r24, Z+22	; 0x16
    379c:	80 93 a5 03 	sts	0x03A5, r24
    37a0:	e9 81       	ldd	r30, Y+1	; 0x01
    37a2:	fa 81       	ldd	r31, Y+2	; 0x02
    37a4:	86 89       	ldd	r24, Z+22	; 0x16
    37a6:	28 2f       	mov	r18, r24
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	c9 01       	movw	r24, r18
    37ac:	88 0f       	add	r24, r24
    37ae:	99 1f       	adc	r25, r25
    37b0:	88 0f       	add	r24, r24
    37b2:	99 1f       	adc	r25, r25
    37b4:	88 0f       	add	r24, r24
    37b6:	99 1f       	adc	r25, r25
    37b8:	82 0f       	add	r24, r18
    37ba:	93 1f       	adc	r25, r19
    37bc:	ac 01       	movw	r20, r24
    37be:	40 55       	subi	r20, 0x50	; 80
    37c0:	5c 4f       	sbci	r21, 0xFC	; 252
    37c2:	89 81       	ldd	r24, Y+1	; 0x01
    37c4:	9a 81       	ldd	r25, Y+2	; 0x02
    37c6:	9c 01       	movw	r18, r24
    37c8:	2e 5f       	subi	r18, 0xFE	; 254
    37ca:	3f 4f       	sbci	r19, 0xFF	; 255
    37cc:	ca 01       	movw	r24, r20
    37ce:	b9 01       	movw	r22, r18
    37d0:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    37d4:	0f 90       	pop	r0
    37d6:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    37d8:	80 91 a6 03 	lds	r24, 0x03A6
    37dc:	88 23       	and	r24, r24
    37de:	61 f0       	breq	.+24     	; 0x37f8 <prvAddNewTaskToReadyList+0xe6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    37e0:	e0 91 9f 03 	lds	r30, 0x039F
    37e4:	f0 91 a0 03 	lds	r31, 0x03A0
    37e8:	96 89       	ldd	r25, Z+22	; 0x16
    37ea:	e9 81       	ldd	r30, Y+1	; 0x01
    37ec:	fa 81       	ldd	r31, Y+2	; 0x02
    37ee:	86 89       	ldd	r24, Z+22	; 0x16
    37f0:	98 17       	cp	r25, r24
    37f2:	10 f4       	brcc	.+4      	; 0x37f8 <prvAddNewTaskToReadyList+0xe6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    37f4:	0e 94 2e 12 	call	0x245c	; 0x245c <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    37f8:	0f 90       	pop	r0
    37fa:	0f 90       	pop	r0
    37fc:	cf 91       	pop	r28
    37fe:	df 91       	pop	r29
    3800:	08 95       	ret

00003802 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    3802:	df 93       	push	r29
    3804:	cf 93       	push	r28
    3806:	00 d0       	rcall	.+0      	; 0x3808 <vTaskDelete+0x6>
    3808:	00 d0       	rcall	.+0      	; 0x380a <vTaskDelete+0x8>
    380a:	00 d0       	rcall	.+0      	; 0x380c <vTaskDelete+0xa>
    380c:	cd b7       	in	r28, 0x3d	; 61
    380e:	de b7       	in	r29, 0x3e	; 62
    3810:	9c 83       	std	Y+4, r25	; 0x04
    3812:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    3814:	0f b6       	in	r0, 0x3f	; 63
    3816:	f8 94       	cli
    3818:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    381a:	8b 81       	ldd	r24, Y+3	; 0x03
    381c:	9c 81       	ldd	r25, Y+4	; 0x04
    381e:	00 97       	sbiw	r24, 0x00	; 0
    3820:	39 f4       	brne	.+14     	; 0x3830 <vTaskDelete+0x2e>
    3822:	80 91 9f 03 	lds	r24, 0x039F
    3826:	90 91 a0 03 	lds	r25, 0x03A0
    382a:	9e 83       	std	Y+6, r25	; 0x06
    382c:	8d 83       	std	Y+5, r24	; 0x05
    382e:	04 c0       	rjmp	.+8      	; 0x3838 <vTaskDelete+0x36>
    3830:	8b 81       	ldd	r24, Y+3	; 0x03
    3832:	9c 81       	ldd	r25, Y+4	; 0x04
    3834:	9e 83       	std	Y+6, r25	; 0x06
    3836:	8d 83       	std	Y+5, r24	; 0x05
    3838:	8d 81       	ldd	r24, Y+5	; 0x05
    383a:	9e 81       	ldd	r25, Y+6	; 0x06
    383c:	9a 83       	std	Y+2, r25	; 0x02
    383e:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3840:	89 81       	ldd	r24, Y+1	; 0x01
    3842:	9a 81       	ldd	r25, Y+2	; 0x02
    3844:	02 96       	adiw	r24, 0x02	; 2
    3846:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    384a:	e9 81       	ldd	r30, Y+1	; 0x01
    384c:	fa 81       	ldd	r31, Y+2	; 0x02
    384e:	84 89       	ldd	r24, Z+20	; 0x14
    3850:	95 89       	ldd	r25, Z+21	; 0x15
    3852:	00 97       	sbiw	r24, 0x00	; 0
    3854:	29 f0       	breq	.+10     	; 0x3860 <vTaskDelete+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3856:	89 81       	ldd	r24, Y+1	; 0x01
    3858:	9a 81       	ldd	r25, Y+2	; 0x02
    385a:	0c 96       	adiw	r24, 0x0c	; 12
    385c:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    3860:	80 91 aa 03 	lds	r24, 0x03AA
    3864:	8f 5f       	subi	r24, 0xFF	; 255
    3866:	80 93 aa 03 	sts	0x03AA, r24

			if( pxTCB == pxCurrentTCB )
    386a:	20 91 9f 03 	lds	r18, 0x039F
    386e:	30 91 a0 03 	lds	r19, 0x03A0
    3872:	89 81       	ldd	r24, Y+1	; 0x01
    3874:	9a 81       	ldd	r25, Y+2	; 0x02
    3876:	82 17       	cp	r24, r18
    3878:	93 07       	cpc	r25, r19
    387a:	81 f4       	brne	.+32     	; 0x389c <vTaskDelete+0x9a>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    387c:	89 81       	ldd	r24, Y+1	; 0x01
    387e:	9a 81       	ldd	r25, Y+2	; 0x02
    3880:	9c 01       	movw	r18, r24
    3882:	2e 5f       	subi	r18, 0xFE	; 254
    3884:	3f 4f       	sbci	r19, 0xFF	; 255
    3886:	8c ef       	ldi	r24, 0xFC	; 252
    3888:	93 e0       	ldi	r25, 0x03	; 3
    388a:	b9 01       	movw	r22, r18
    388c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    3890:	80 91 a1 03 	lds	r24, 0x03A1
    3894:	8f 5f       	subi	r24, 0xFF	; 255
    3896:	80 93 a1 03 	sts	0x03A1, r24
    389a:	0b c0       	rjmp	.+22     	; 0x38b2 <vTaskDelete+0xb0>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    389c:	80 91 a2 03 	lds	r24, 0x03A2
    38a0:	81 50       	subi	r24, 0x01	; 1
    38a2:	80 93 a2 03 	sts	0x03A2, r24
				prvDeleteTCB( pxTCB );
    38a6:	89 81       	ldd	r24, Y+1	; 0x01
    38a8:	9a 81       	ldd	r25, Y+2	; 0x02
    38aa:	0e 94 4b 24 	call	0x4896	; 0x4896 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    38ae:	0e 94 61 24 	call	0x48c2	; 0x48c2 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    38b2:	0f 90       	pop	r0
    38b4:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    38b6:	80 91 a6 03 	lds	r24, 0x03A6
    38ba:	88 23       	and	r24, r24
    38bc:	59 f0       	breq	.+22     	; 0x38d4 <vTaskDelete+0xd2>
		{
			if( pxTCB == pxCurrentTCB )
    38be:	20 91 9f 03 	lds	r18, 0x039F
    38c2:	30 91 a0 03 	lds	r19, 0x03A0
    38c6:	89 81       	ldd	r24, Y+1	; 0x01
    38c8:	9a 81       	ldd	r25, Y+2	; 0x02
    38ca:	82 17       	cp	r24, r18
    38cc:	93 07       	cpc	r25, r19
    38ce:	11 f4       	brne	.+4      	; 0x38d4 <vTaskDelete+0xd2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    38d0:	0e 94 2e 12 	call	0x245c	; 0x245c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    38d4:	26 96       	adiw	r28, 0x06	; 6
    38d6:	0f b6       	in	r0, 0x3f	; 63
    38d8:	f8 94       	cli
    38da:	de bf       	out	0x3e, r29	; 62
    38dc:	0f be       	out	0x3f, r0	; 63
    38de:	cd bf       	out	0x3d, r28	; 61
    38e0:	cf 91       	pop	r28
    38e2:	df 91       	pop	r29
    38e4:	08 95       	ret

000038e6 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    38e6:	df 93       	push	r29
    38e8:	cf 93       	push	r28
    38ea:	cd b7       	in	r28, 0x3d	; 61
    38ec:	de b7       	in	r29, 0x3e	; 62
    38ee:	2a 97       	sbiw	r28, 0x0a	; 10
    38f0:	0f b6       	in	r0, 0x3f	; 63
    38f2:	f8 94       	cli
    38f4:	de bf       	out	0x3e, r29	; 62
    38f6:	0f be       	out	0x3f, r0	; 63
    38f8:	cd bf       	out	0x3d, r28	; 61
    38fa:	98 87       	std	Y+8, r25	; 0x08
    38fc:	8f 83       	std	Y+7, r24	; 0x07
    38fe:	7a 87       	std	Y+10, r23	; 0x0a
    3900:	69 87       	std	Y+9, r22	; 0x09
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    3902:	1b 82       	std	Y+3, r1	; 0x03

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    3904:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    3908:	80 91 a3 03 	lds	r24, 0x03A3
    390c:	90 91 a4 03 	lds	r25, 0x03A4
    3910:	9a 83       	std	Y+2, r25	; 0x02
    3912:	89 83       	std	Y+1, r24	; 0x01

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3914:	ef 81       	ldd	r30, Y+7	; 0x07
    3916:	f8 85       	ldd	r31, Y+8	; 0x08
    3918:	20 81       	ld	r18, Z
    391a:	31 81       	ldd	r19, Z+1	; 0x01
    391c:	89 85       	ldd	r24, Y+9	; 0x09
    391e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3920:	82 0f       	add	r24, r18
    3922:	93 1f       	adc	r25, r19
    3924:	9e 83       	std	Y+6, r25	; 0x06
    3926:	8d 83       	std	Y+5, r24	; 0x05

			if( xConstTickCount < *pxPreviousWakeTime )
    3928:	ef 81       	ldd	r30, Y+7	; 0x07
    392a:	f8 85       	ldd	r31, Y+8	; 0x08
    392c:	20 81       	ld	r18, Z
    392e:	31 81       	ldd	r19, Z+1	; 0x01
    3930:	89 81       	ldd	r24, Y+1	; 0x01
    3932:	9a 81       	ldd	r25, Y+2	; 0x02
    3934:	82 17       	cp	r24, r18
    3936:	93 07       	cpc	r25, r19
    3938:	98 f4       	brcc	.+38     	; 0x3960 <vTaskDelayUntil+0x7a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    393a:	ef 81       	ldd	r30, Y+7	; 0x07
    393c:	f8 85       	ldd	r31, Y+8	; 0x08
    393e:	20 81       	ld	r18, Z
    3940:	31 81       	ldd	r19, Z+1	; 0x01
    3942:	8d 81       	ldd	r24, Y+5	; 0x05
    3944:	9e 81       	ldd	r25, Y+6	; 0x06
    3946:	82 17       	cp	r24, r18
    3948:	93 07       	cpc	r25, r19
    394a:	e0 f4       	brcc	.+56     	; 0x3984 <vTaskDelayUntil+0x9e>
    394c:	2d 81       	ldd	r18, Y+5	; 0x05
    394e:	3e 81       	ldd	r19, Y+6	; 0x06
    3950:	89 81       	ldd	r24, Y+1	; 0x01
    3952:	9a 81       	ldd	r25, Y+2	; 0x02
    3954:	82 17       	cp	r24, r18
    3956:	93 07       	cpc	r25, r19
    3958:	a8 f4       	brcc	.+42     	; 0x3984 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	8b 83       	std	Y+3, r24	; 0x03
    395e:	12 c0       	rjmp	.+36     	; 0x3984 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    3960:	ef 81       	ldd	r30, Y+7	; 0x07
    3962:	f8 85       	ldd	r31, Y+8	; 0x08
    3964:	20 81       	ld	r18, Z
    3966:	31 81       	ldd	r19, Z+1	; 0x01
    3968:	8d 81       	ldd	r24, Y+5	; 0x05
    396a:	9e 81       	ldd	r25, Y+6	; 0x06
    396c:	82 17       	cp	r24, r18
    396e:	93 07       	cpc	r25, r19
    3970:	38 f0       	brcs	.+14     	; 0x3980 <vTaskDelayUntil+0x9a>
    3972:	2d 81       	ldd	r18, Y+5	; 0x05
    3974:	3e 81       	ldd	r19, Y+6	; 0x06
    3976:	89 81       	ldd	r24, Y+1	; 0x01
    3978:	9a 81       	ldd	r25, Y+2	; 0x02
    397a:	82 17       	cp	r24, r18
    397c:	93 07       	cpc	r25, r19
    397e:	10 f4       	brcc	.+4      	; 0x3984 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	8b 83       	std	Y+3, r24	; 0x03
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3984:	ef 81       	ldd	r30, Y+7	; 0x07
    3986:	f8 85       	ldd	r31, Y+8	; 0x08
    3988:	8d 81       	ldd	r24, Y+5	; 0x05
    398a:	9e 81       	ldd	r25, Y+6	; 0x06
    398c:	91 83       	std	Z+1, r25	; 0x01
    398e:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    3990:	8b 81       	ldd	r24, Y+3	; 0x03
    3992:	88 23       	and	r24, r24
    3994:	49 f0       	breq	.+18     	; 0x39a8 <vTaskDelayUntil+0xc2>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    3996:	8d 81       	ldd	r24, Y+5	; 0x05
    3998:	9e 81       	ldd	r25, Y+6	; 0x06
    399a:	29 81       	ldd	r18, Y+1	; 0x01
    399c:	3a 81       	ldd	r19, Y+2	; 0x02
    399e:	82 1b       	sub	r24, r18
    39a0:	93 0b       	sbc	r25, r19
    39a2:	60 e0       	ldi	r22, 0x00	; 0
    39a4:	0e 94 84 29 	call	0x5308	; 0x5308 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    39a8:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <xTaskResumeAll>
    39ac:	8c 83       	std	Y+4, r24	; 0x04

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    39ae:	8c 81       	ldd	r24, Y+4	; 0x04
    39b0:	88 23       	and	r24, r24
    39b2:	11 f4       	brne	.+4      	; 0x39b8 <vTaskDelayUntil+0xd2>
		{
			portYIELD_WITHIN_API();
    39b4:	0e 94 2e 12 	call	0x245c	; 0x245c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    39b8:	2a 96       	adiw	r28, 0x0a	; 10
    39ba:	0f b6       	in	r0, 0x3f	; 63
    39bc:	f8 94       	cli
    39be:	de bf       	out	0x3e, r29	; 62
    39c0:	0f be       	out	0x3f, r0	; 63
    39c2:	cd bf       	out	0x3d, r28	; 61
    39c4:	cf 91       	pop	r28
    39c6:	df 91       	pop	r29
    39c8:	08 95       	ret

000039ca <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    39ca:	df 93       	push	r29
    39cc:	cf 93       	push	r28
    39ce:	00 d0       	rcall	.+0      	; 0x39d0 <vTaskDelay+0x6>
    39d0:	0f 92       	push	r0
    39d2:	cd b7       	in	r28, 0x3d	; 61
    39d4:	de b7       	in	r29, 0x3e	; 62
    39d6:	9b 83       	std	Y+3, r25	; 0x03
    39d8:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xAlreadyYielded = pdFALSE;
    39da:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    39dc:	8a 81       	ldd	r24, Y+2	; 0x02
    39de:	9b 81       	ldd	r25, Y+3	; 0x03
    39e0:	00 97       	sbiw	r24, 0x00	; 0
    39e2:	51 f0       	breq	.+20     	; 0x39f8 <vTaskDelay+0x2e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    39e4:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    39e8:	8a 81       	ldd	r24, Y+2	; 0x02
    39ea:	9b 81       	ldd	r25, Y+3	; 0x03
    39ec:	60 e0       	ldi	r22, 0x00	; 0
    39ee:	0e 94 84 29 	call	0x5308	; 0x5308 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    39f2:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <xTaskResumeAll>
    39f6:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    39f8:	89 81       	ldd	r24, Y+1	; 0x01
    39fa:	88 23       	and	r24, r24
    39fc:	11 f4       	brne	.+4      	; 0x3a02 <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    39fe:	0e 94 2e 12 	call	0x245c	; 0x245c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3a02:	0f 90       	pop	r0
    3a04:	0f 90       	pop	r0
    3a06:	0f 90       	pop	r0
    3a08:	cf 91       	pop	r28
    3a0a:	df 91       	pop	r29
    3a0c:	08 95       	ret

00003a0e <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
    3a0e:	df 93       	push	r29
    3a10:	cf 93       	push	r28
    3a12:	cd b7       	in	r28, 0x3d	; 61
    3a14:	de b7       	in	r29, 0x3e	; 62
    3a16:	27 97       	sbiw	r28, 0x07	; 7
    3a18:	0f b6       	in	r0, 0x3f	; 63
    3a1a:	f8 94       	cli
    3a1c:	de bf       	out	0x3e, r29	; 62
    3a1e:	0f be       	out	0x3f, r0	; 63
    3a20:	cd bf       	out	0x3d, r28	; 61
    3a22:	9d 83       	std	Y+5, r25	; 0x05
    3a24:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
    3a26:	0f b6       	in	r0, 0x3f	; 63
    3a28:	f8 94       	cli
    3a2a:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    3a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a2e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a30:	00 97       	sbiw	r24, 0x00	; 0
    3a32:	39 f4       	brne	.+14     	; 0x3a42 <uxTaskPriorityGet+0x34>
    3a34:	80 91 9f 03 	lds	r24, 0x039F
    3a38:	90 91 a0 03 	lds	r25, 0x03A0
    3a3c:	9f 83       	std	Y+7, r25	; 0x07
    3a3e:	8e 83       	std	Y+6, r24	; 0x06
    3a40:	04 c0       	rjmp	.+8      	; 0x3a4a <uxTaskPriorityGet+0x3c>
    3a42:	8c 81       	ldd	r24, Y+4	; 0x04
    3a44:	9d 81       	ldd	r25, Y+5	; 0x05
    3a46:	9f 83       	std	Y+7, r25	; 0x07
    3a48:	8e 83       	std	Y+6, r24	; 0x06
    3a4a:	8e 81       	ldd	r24, Y+6	; 0x06
    3a4c:	9f 81       	ldd	r25, Y+7	; 0x07
    3a4e:	9b 83       	std	Y+3, r25	; 0x03
    3a50:	8a 83       	std	Y+2, r24	; 0x02
			uxReturn = pxTCB->uxPriority;
    3a52:	ea 81       	ldd	r30, Y+2	; 0x02
    3a54:	fb 81       	ldd	r31, Y+3	; 0x03
    3a56:	86 89       	ldd	r24, Z+22	; 0x16
    3a58:	89 83       	std	Y+1, r24	; 0x01
		}
		taskEXIT_CRITICAL();
    3a5a:	0f 90       	pop	r0
    3a5c:	0f be       	out	0x3f, r0	; 63

		return uxReturn;
    3a5e:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3a60:	27 96       	adiw	r28, 0x07	; 7
    3a62:	0f b6       	in	r0, 0x3f	; 63
    3a64:	f8 94       	cli
    3a66:	de bf       	out	0x3e, r29	; 62
    3a68:	0f be       	out	0x3f, r0	; 63
    3a6a:	cd bf       	out	0x3d, r28	; 61
    3a6c:	cf 91       	pop	r28
    3a6e:	df 91       	pop	r29
    3a70:	08 95       	ret

00003a72 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
    3a72:	df 93       	push	r29
    3a74:	cf 93       	push	r28
    3a76:	cd b7       	in	r28, 0x3d	; 61
    3a78:	de b7       	in	r29, 0x3e	; 62
    3a7a:	28 97       	sbiw	r28, 0x08	; 8
    3a7c:	0f b6       	in	r0, 0x3f	; 63
    3a7e:	f8 94       	cli
    3a80:	de bf       	out	0x3e, r29	; 62
    3a82:	0f be       	out	0x3f, r0	; 63
    3a84:	cd bf       	out	0x3d, r28	; 61
    3a86:	9e 83       	std	Y+6, r25	; 0x06
    3a88:	8d 83       	std	Y+5, r24	; 0x05
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
    3a8a:	19 82       	std	Y+1, r1	; 0x01
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    3a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a90:	00 97       	sbiw	r24, 0x00	; 0
    3a92:	39 f4       	brne	.+14     	; 0x3aa2 <uxTaskPriorityGetFromISR+0x30>
    3a94:	80 91 9f 03 	lds	r24, 0x039F
    3a98:	90 91 a0 03 	lds	r25, 0x03A0
    3a9c:	98 87       	std	Y+8, r25	; 0x08
    3a9e:	8f 83       	std	Y+7, r24	; 0x07
    3aa0:	04 c0       	rjmp	.+8      	; 0x3aaa <uxTaskPriorityGetFromISR+0x38>
    3aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa6:	98 87       	std	Y+8, r25	; 0x08
    3aa8:	8f 83       	std	Y+7, r24	; 0x07
    3aaa:	8f 81       	ldd	r24, Y+7	; 0x07
    3aac:	98 85       	ldd	r25, Y+8	; 0x08
    3aae:	9c 83       	std	Y+4, r25	; 0x04
    3ab0:	8b 83       	std	Y+3, r24	; 0x03
			uxReturn = pxTCB->uxPriority;
    3ab2:	eb 81       	ldd	r30, Y+3	; 0x03
    3ab4:	fc 81       	ldd	r31, Y+4	; 0x04
    3ab6:	86 89       	ldd	r24, Z+22	; 0x16
    3ab8:	8a 83       	std	Y+2, r24	; 0x02
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
    3aba:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    3abc:	28 96       	adiw	r28, 0x08	; 8
    3abe:	0f b6       	in	r0, 0x3f	; 63
    3ac0:	f8 94       	cli
    3ac2:	de bf       	out	0x3e, r29	; 62
    3ac4:	0f be       	out	0x3f, r0	; 63
    3ac6:	cd bf       	out	0x3d, r28	; 61
    3ac8:	cf 91       	pop	r28
    3aca:	df 91       	pop	r29
    3acc:	08 95       	ret

00003ace <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    3ace:	df 93       	push	r29
    3ad0:	cf 93       	push	r28
    3ad2:	cd b7       	in	r28, 0x3d	; 61
    3ad4:	de b7       	in	r29, 0x3e	; 62
    3ad6:	2a 97       	sbiw	r28, 0x0a	; 10
    3ad8:	0f b6       	in	r0, 0x3f	; 63
    3ada:	f8 94       	cli
    3adc:	de bf       	out	0x3e, r29	; 62
    3ade:	0f be       	out	0x3f, r0	; 63
    3ae0:	cd bf       	out	0x3d, r28	; 61
    3ae2:	9f 83       	std	Y+7, r25	; 0x07
    3ae4:	8e 83       	std	Y+6, r24	; 0x06
    3ae6:	68 87       	std	Y+8, r22	; 0x08
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    3ae8:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    3aea:	88 85       	ldd	r24, Y+8	; 0x08
    3aec:	85 30       	cpi	r24, 0x05	; 5
    3aee:	10 f0       	brcs	.+4      	; 0x3af4 <vTaskPrioritySet+0x26>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    3af0:	84 e0       	ldi	r24, 0x04	; 4
    3af2:	88 87       	std	Y+8, r24	; 0x08
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    3af4:	0f b6       	in	r0, 0x3f	; 63
    3af6:	f8 94       	cli
    3af8:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    3afa:	8e 81       	ldd	r24, Y+6	; 0x06
    3afc:	9f 81       	ldd	r25, Y+7	; 0x07
    3afe:	00 97       	sbiw	r24, 0x00	; 0
    3b00:	39 f4       	brne	.+14     	; 0x3b10 <vTaskPrioritySet+0x42>
    3b02:	80 91 9f 03 	lds	r24, 0x039F
    3b06:	90 91 a0 03 	lds	r25, 0x03A0
    3b0a:	9a 87       	std	Y+10, r25	; 0x0a
    3b0c:	89 87       	std	Y+9, r24	; 0x09
    3b0e:	04 c0       	rjmp	.+8      	; 0x3b18 <vTaskPrioritySet+0x4a>
    3b10:	8e 81       	ldd	r24, Y+6	; 0x06
    3b12:	9f 81       	ldd	r25, Y+7	; 0x07
    3b14:	9a 87       	std	Y+10, r25	; 0x0a
    3b16:	89 87       	std	Y+9, r24	; 0x09
    3b18:	89 85       	ldd	r24, Y+9	; 0x09
    3b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b1c:	9d 83       	std	Y+5, r25	; 0x05
    3b1e:	8c 83       	std	Y+4, r24	; 0x04

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    3b20:	ec 81       	ldd	r30, Y+4	; 0x04
    3b22:	fd 81       	ldd	r31, Y+5	; 0x05
    3b24:	83 a1       	ldd	r24, Z+35	; 0x23
    3b26:	8b 83       	std	Y+3, r24	; 0x03
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    3b28:	9b 81       	ldd	r25, Y+3	; 0x03
    3b2a:	88 85       	ldd	r24, Y+8	; 0x08
    3b2c:	98 17       	cp	r25, r24
    3b2e:	09 f4       	brne	.+2      	; 0x3b32 <vTaskPrioritySet+0x64>
    3b30:	8d c0       	rjmp	.+282    	; 0x3c4c <vTaskPrioritySet+0x17e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    3b32:	98 85       	ldd	r25, Y+8	; 0x08
    3b34:	8b 81       	ldd	r24, Y+3	; 0x03
    3b36:	89 17       	cp	r24, r25
    3b38:	a0 f4       	brcc	.+40     	; 0x3b62 <vTaskPrioritySet+0x94>
				{
					if( pxTCB != pxCurrentTCB )
    3b3a:	20 91 9f 03 	lds	r18, 0x039F
    3b3e:	30 91 a0 03 	lds	r19, 0x03A0
    3b42:	8c 81       	ldd	r24, Y+4	; 0x04
    3b44:	9d 81       	ldd	r25, Y+5	; 0x05
    3b46:	82 17       	cp	r24, r18
    3b48:	93 07       	cpc	r25, r19
    3b4a:	b1 f0       	breq	.+44     	; 0x3b78 <vTaskPrioritySet+0xaa>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    3b4c:	e0 91 9f 03 	lds	r30, 0x039F
    3b50:	f0 91 a0 03 	lds	r31, 0x03A0
    3b54:	96 89       	ldd	r25, Z+22	; 0x16
    3b56:	88 85       	ldd	r24, Y+8	; 0x08
    3b58:	89 17       	cp	r24, r25
    3b5a:	70 f0       	brcs	.+28     	; 0x3b78 <vTaskPrioritySet+0xaa>
						{
							xYieldRequired = pdTRUE;
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	89 83       	std	Y+1, r24	; 0x01
    3b60:	0b c0       	rjmp	.+22     	; 0x3b78 <vTaskPrioritySet+0xaa>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    3b62:	20 91 9f 03 	lds	r18, 0x039F
    3b66:	30 91 a0 03 	lds	r19, 0x03A0
    3b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b6c:	9d 81       	ldd	r25, Y+5	; 0x05
    3b6e:	82 17       	cp	r24, r18
    3b70:	93 07       	cpc	r25, r19
    3b72:	11 f4       	brne	.+4      	; 0x3b78 <vTaskPrioritySet+0xaa>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	89 83       	std	Y+1, r24	; 0x01
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    3b78:	ec 81       	ldd	r30, Y+4	; 0x04
    3b7a:	fd 81       	ldd	r31, Y+5	; 0x05
    3b7c:	86 89       	ldd	r24, Z+22	; 0x16
    3b7e:	8a 83       	std	Y+2, r24	; 0x02

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    3b80:	ec 81       	ldd	r30, Y+4	; 0x04
    3b82:	fd 81       	ldd	r31, Y+5	; 0x05
    3b84:	93 a1       	ldd	r25, Z+35	; 0x23
    3b86:	ec 81       	ldd	r30, Y+4	; 0x04
    3b88:	fd 81       	ldd	r31, Y+5	; 0x05
    3b8a:	86 89       	ldd	r24, Z+22	; 0x16
    3b8c:	98 17       	cp	r25, r24
    3b8e:	21 f4       	brne	.+8      	; 0x3b98 <vTaskPrioritySet+0xca>
					{
						pxTCB->uxPriority = uxNewPriority;
    3b90:	ec 81       	ldd	r30, Y+4	; 0x04
    3b92:	fd 81       	ldd	r31, Y+5	; 0x05
    3b94:	88 85       	ldd	r24, Y+8	; 0x08
    3b96:	86 8b       	std	Z+22, r24	; 0x16
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    3b98:	ec 81       	ldd	r30, Y+4	; 0x04
    3b9a:	fd 81       	ldd	r31, Y+5	; 0x05
    3b9c:	88 85       	ldd	r24, Y+8	; 0x08
    3b9e:	83 a3       	std	Z+35, r24	; 0x23
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3ba0:	ec 81       	ldd	r30, Y+4	; 0x04
    3ba2:	fd 81       	ldd	r31, Y+5	; 0x05
    3ba4:	84 85       	ldd	r24, Z+12	; 0x0c
    3ba6:	95 85       	ldd	r25, Z+13	; 0x0d
    3ba8:	99 23       	and	r25, r25
    3baa:	5c f0       	brlt	.+22     	; 0x3bc2 <vTaskPrioritySet+0xf4>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3bac:	88 85       	ldd	r24, Y+8	; 0x08
    3bae:	28 2f       	mov	r18, r24
    3bb0:	30 e0       	ldi	r19, 0x00	; 0
    3bb2:	85 e0       	ldi	r24, 0x05	; 5
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	82 1b       	sub	r24, r18
    3bb8:	93 0b       	sbc	r25, r19
    3bba:	ec 81       	ldd	r30, Y+4	; 0x04
    3bbc:	fd 81       	ldd	r31, Y+5	; 0x05
    3bbe:	95 87       	std	Z+13, r25	; 0x0d
    3bc0:	84 87       	std	Z+12, r24	; 0x0c

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    3bc2:	ec 81       	ldd	r30, Y+4	; 0x04
    3bc4:	fd 81       	ldd	r31, Y+5	; 0x05
    3bc6:	42 85       	ldd	r20, Z+10	; 0x0a
    3bc8:	53 85       	ldd	r21, Z+11	; 0x0b
    3bca:	8a 81       	ldd	r24, Y+2	; 0x02
    3bcc:	28 2f       	mov	r18, r24
    3bce:	30 e0       	ldi	r19, 0x00	; 0
    3bd0:	c9 01       	movw	r24, r18
    3bd2:	88 0f       	add	r24, r24
    3bd4:	99 1f       	adc	r25, r25
    3bd6:	88 0f       	add	r24, r24
    3bd8:	99 1f       	adc	r25, r25
    3bda:	88 0f       	add	r24, r24
    3bdc:	99 1f       	adc	r25, r25
    3bde:	82 0f       	add	r24, r18
    3be0:	93 1f       	adc	r25, r19
    3be2:	80 55       	subi	r24, 0x50	; 80
    3be4:	9c 4f       	sbci	r25, 0xFC	; 252
    3be6:	48 17       	cp	r20, r24
    3be8:	59 07       	cpc	r21, r25
    3bea:	59 f5       	brne	.+86     	; 0x3c42 <vTaskPrioritySet+0x174>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3bec:	8c 81       	ldd	r24, Y+4	; 0x04
    3bee:	9d 81       	ldd	r25, Y+5	; 0x05
    3bf0:	02 96       	adiw	r24, 0x02	; 2
    3bf2:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    3bf6:	ec 81       	ldd	r30, Y+4	; 0x04
    3bf8:	fd 81       	ldd	r31, Y+5	; 0x05
    3bfa:	96 89       	ldd	r25, Z+22	; 0x16
    3bfc:	80 91 a5 03 	lds	r24, 0x03A5
    3c00:	89 17       	cp	r24, r25
    3c02:	28 f4       	brcc	.+10     	; 0x3c0e <vTaskPrioritySet+0x140>
    3c04:	ec 81       	ldd	r30, Y+4	; 0x04
    3c06:	fd 81       	ldd	r31, Y+5	; 0x05
    3c08:	86 89       	ldd	r24, Z+22	; 0x16
    3c0a:	80 93 a5 03 	sts	0x03A5, r24
    3c0e:	ec 81       	ldd	r30, Y+4	; 0x04
    3c10:	fd 81       	ldd	r31, Y+5	; 0x05
    3c12:	86 89       	ldd	r24, Z+22	; 0x16
    3c14:	28 2f       	mov	r18, r24
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	c9 01       	movw	r24, r18
    3c1a:	88 0f       	add	r24, r24
    3c1c:	99 1f       	adc	r25, r25
    3c1e:	88 0f       	add	r24, r24
    3c20:	99 1f       	adc	r25, r25
    3c22:	88 0f       	add	r24, r24
    3c24:	99 1f       	adc	r25, r25
    3c26:	82 0f       	add	r24, r18
    3c28:	93 1f       	adc	r25, r19
    3c2a:	ac 01       	movw	r20, r24
    3c2c:	40 55       	subi	r20, 0x50	; 80
    3c2e:	5c 4f       	sbci	r21, 0xFC	; 252
    3c30:	8c 81       	ldd	r24, Y+4	; 0x04
    3c32:	9d 81       	ldd	r25, Y+5	; 0x05
    3c34:	9c 01       	movw	r18, r24
    3c36:	2e 5f       	subi	r18, 0xFE	; 254
    3c38:	3f 4f       	sbci	r19, 0xFF	; 255
    3c3a:	ca 01       	movw	r24, r20
    3c3c:	b9 01       	movw	r22, r18
    3c3e:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
    3c42:	89 81       	ldd	r24, Y+1	; 0x01
    3c44:	88 23       	and	r24, r24
    3c46:	11 f0       	breq	.+4      	; 0x3c4c <vTaskPrioritySet+0x17e>
				{
					taskYIELD_IF_USING_PREEMPTION();
    3c48:	0e 94 2e 12 	call	0x245c	; 0x245c <vPortYield>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    3c4c:	0f 90       	pop	r0
    3c4e:	0f be       	out	0x3f, r0	; 63
	}
    3c50:	2a 96       	adiw	r28, 0x0a	; 10
    3c52:	0f b6       	in	r0, 0x3f	; 63
    3c54:	f8 94       	cli
    3c56:	de bf       	out	0x3e, r29	; 62
    3c58:	0f be       	out	0x3f, r0	; 63
    3c5a:	cd bf       	out	0x3d, r28	; 61
    3c5c:	cf 91       	pop	r28
    3c5e:	df 91       	pop	r29
    3c60:	08 95       	ret

00003c62 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    3c62:	df 93       	push	r29
    3c64:	cf 93       	push	r28
    3c66:	00 d0       	rcall	.+0      	; 0x3c68 <vTaskSuspend+0x6>
    3c68:	00 d0       	rcall	.+0      	; 0x3c6a <vTaskSuspend+0x8>
    3c6a:	00 d0       	rcall	.+0      	; 0x3c6c <vTaskSuspend+0xa>
    3c6c:	cd b7       	in	r28, 0x3d	; 61
    3c6e:	de b7       	in	r29, 0x3e	; 62
    3c70:	9c 83       	std	Y+4, r25	; 0x04
    3c72:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    3c74:	0f b6       	in	r0, 0x3f	; 63
    3c76:	f8 94       	cli
    3c78:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    3c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c7e:	00 97       	sbiw	r24, 0x00	; 0
    3c80:	39 f4       	brne	.+14     	; 0x3c90 <vTaskSuspend+0x2e>
    3c82:	80 91 9f 03 	lds	r24, 0x039F
    3c86:	90 91 a0 03 	lds	r25, 0x03A0
    3c8a:	9e 83       	std	Y+6, r25	; 0x06
    3c8c:	8d 83       	std	Y+5, r24	; 0x05
    3c8e:	04 c0       	rjmp	.+8      	; 0x3c98 <vTaskSuspend+0x36>
    3c90:	8b 81       	ldd	r24, Y+3	; 0x03
    3c92:	9c 81       	ldd	r25, Y+4	; 0x04
    3c94:	9e 83       	std	Y+6, r25	; 0x06
    3c96:	8d 83       	std	Y+5, r24	; 0x05
    3c98:	8d 81       	ldd	r24, Y+5	; 0x05
    3c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c9c:	9a 83       	std	Y+2, r25	; 0x02
    3c9e:	89 83       	std	Y+1, r24	; 0x01

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3ca0:	89 81       	ldd	r24, Y+1	; 0x01
    3ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca4:	02 96       	adiw	r24, 0x02	; 2
    3ca6:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3caa:	e9 81       	ldd	r30, Y+1	; 0x01
    3cac:	fa 81       	ldd	r31, Y+2	; 0x02
    3cae:	84 89       	ldd	r24, Z+20	; 0x14
    3cb0:	95 89       	ldd	r25, Z+21	; 0x15
    3cb2:	00 97       	sbiw	r24, 0x00	; 0
    3cb4:	29 f0       	breq	.+10     	; 0x3cc0 <vTaskSuspend+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3cb6:	89 81       	ldd	r24, Y+1	; 0x01
    3cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cba:	0c 96       	adiw	r24, 0x0c	; 12
    3cbc:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    3cc0:	89 81       	ldd	r24, Y+1	; 0x01
    3cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc4:	9c 01       	movw	r18, r24
    3cc6:	2e 5f       	subi	r18, 0xFE	; 254
    3cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cca:	85 e0       	ldi	r24, 0x05	; 5
    3ccc:	94 e0       	ldi	r25, 0x04	; 4
    3cce:	b9 01       	movw	r22, r18
    3cd0:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    3cd4:	0f 90       	pop	r0
    3cd6:	0f be       	out	0x3f, r0	; 63

		if( xSchedulerRunning != pdFALSE )
    3cd8:	80 91 a6 03 	lds	r24, 0x03A6
    3cdc:	88 23       	and	r24, r24
    3cde:	39 f0       	breq	.+14     	; 0x3cee <vTaskSuspend+0x8c>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    3ce0:	0f b6       	in	r0, 0x3f	; 63
    3ce2:	f8 94       	cli
    3ce4:	0f 92       	push	r0
			{
				prvResetNextTaskUnblockTime();
    3ce6:	0e 94 61 24 	call	0x48c2	; 0x48c2 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    3cea:	0f 90       	pop	r0
    3cec:	0f be       	out	0x3f, r0	; 63
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    3cee:	20 91 9f 03 	lds	r18, 0x039F
    3cf2:	30 91 a0 03 	lds	r19, 0x03A0
    3cf6:	89 81       	ldd	r24, Y+1	; 0x01
    3cf8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cfa:	82 17       	cp	r24, r18
    3cfc:	93 07       	cpc	r25, r19
    3cfe:	a1 f4       	brne	.+40     	; 0x3d28 <vTaskSuspend+0xc6>
		{
			if( xSchedulerRunning != pdFALSE )
    3d00:	80 91 a6 03 	lds	r24, 0x03A6
    3d04:	88 23       	and	r24, r24
    3d06:	19 f0       	breq	.+6      	; 0x3d0e <vTaskSuspend+0xac>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    3d08:	0e 94 2e 12 	call	0x245c	; 0x245c <vPortYield>
    3d0c:	0d c0       	rjmp	.+26     	; 0x3d28 <vTaskSuspend+0xc6>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    3d0e:	90 91 05 04 	lds	r25, 0x0405
    3d12:	80 91 a2 03 	lds	r24, 0x03A2
    3d16:	98 17       	cp	r25, r24
    3d18:	29 f4       	brne	.+10     	; 0x3d24 <vTaskSuspend+0xc2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    3d1a:	10 92 a0 03 	sts	0x03A0, r1
    3d1e:	10 92 9f 03 	sts	0x039F, r1
    3d22:	02 c0       	rjmp	.+4      	; 0x3d28 <vTaskSuspend+0xc6>
				}
				else
				{
					vTaskSwitchContext();
    3d24:	0e 94 9c 21 	call	0x4338	; 0x4338 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3d28:	26 96       	adiw	r28, 0x06	; 6
    3d2a:	0f b6       	in	r0, 0x3f	; 63
    3d2c:	f8 94       	cli
    3d2e:	de bf       	out	0x3e, r29	; 62
    3d30:	0f be       	out	0x3f, r0	; 63
    3d32:	cd bf       	out	0x3d, r28	; 61
    3d34:	cf 91       	pop	r28
    3d36:	df 91       	pop	r29
    3d38:	08 95       	ret

00003d3a <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    3d3a:	df 93       	push	r29
    3d3c:	cf 93       	push	r28
    3d3e:	00 d0       	rcall	.+0      	; 0x3d40 <prvTaskIsTaskSuspended+0x6>
    3d40:	00 d0       	rcall	.+0      	; 0x3d42 <prvTaskIsTaskSuspended+0x8>
    3d42:	0f 92       	push	r0
    3d44:	cd b7       	in	r28, 0x3d	; 61
    3d46:	de b7       	in	r29, 0x3e	; 62
    3d48:	9d 83       	std	Y+5, r25	; 0x05
    3d4a:	8c 83       	std	Y+4, r24	; 0x04
	BaseType_t xReturn = pdFALSE;
    3d4c:	1b 82       	std	Y+3, r1	; 0x03
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
    3d4e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d50:	9d 81       	ldd	r25, Y+5	; 0x05
    3d52:	9a 83       	std	Y+2, r25	; 0x02
    3d54:	89 83       	std	Y+1, r24	; 0x01

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    3d56:	e9 81       	ldd	r30, Y+1	; 0x01
    3d58:	fa 81       	ldd	r31, Y+2	; 0x02
    3d5a:	82 85       	ldd	r24, Z+10	; 0x0a
    3d5c:	93 85       	ldd	r25, Z+11	; 0x0b
    3d5e:	24 e0       	ldi	r18, 0x04	; 4
    3d60:	85 30       	cpi	r24, 0x05	; 5
    3d62:	92 07       	cpc	r25, r18
    3d64:	81 f4       	brne	.+32     	; 0x3d86 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    3d66:	e9 81       	ldd	r30, Y+1	; 0x01
    3d68:	fa 81       	ldd	r31, Y+2	; 0x02
    3d6a:	84 89       	ldd	r24, Z+20	; 0x14
    3d6c:	95 89       	ldd	r25, Z+21	; 0x15
    3d6e:	23 e0       	ldi	r18, 0x03	; 3
    3d70:	83 3f       	cpi	r24, 0xF3	; 243
    3d72:	92 07       	cpc	r25, r18
    3d74:	41 f0       	breq	.+16     	; 0x3d86 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
    3d76:	e9 81       	ldd	r30, Y+1	; 0x01
    3d78:	fa 81       	ldd	r31, Y+2	; 0x02
    3d7a:	84 89       	ldd	r24, Z+20	; 0x14
    3d7c:	95 89       	ldd	r25, Z+21	; 0x15
    3d7e:	00 97       	sbiw	r24, 0x00	; 0
    3d80:	11 f4       	brne	.+4      	; 0x3d86 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
    3d82:	81 e0       	ldi	r24, 0x01	; 1
    3d84:	8b 83       	std	Y+3, r24	; 0x03
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    3d86:	8b 81       	ldd	r24, Y+3	; 0x03
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    3d88:	0f 90       	pop	r0
    3d8a:	0f 90       	pop	r0
    3d8c:	0f 90       	pop	r0
    3d8e:	0f 90       	pop	r0
    3d90:	0f 90       	pop	r0
    3d92:	cf 91       	pop	r28
    3d94:	df 91       	pop	r29
    3d96:	08 95       	ret

00003d98 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    3d98:	df 93       	push	r29
    3d9a:	cf 93       	push	r28
    3d9c:	00 d0       	rcall	.+0      	; 0x3d9e <vTaskResume+0x6>
    3d9e:	00 d0       	rcall	.+0      	; 0x3da0 <vTaskResume+0x8>
    3da0:	cd b7       	in	r28, 0x3d	; 61
    3da2:	de b7       	in	r29, 0x3e	; 62
    3da4:	9c 83       	std	Y+4, r25	; 0x04
    3da6:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    3da8:	8b 81       	ldd	r24, Y+3	; 0x03
    3daa:	9c 81       	ldd	r25, Y+4	; 0x04
    3dac:	9a 83       	std	Y+2, r25	; 0x02
    3dae:	89 83       	std	Y+1, r24	; 0x01
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    3db0:	89 81       	ldd	r24, Y+1	; 0x01
    3db2:	9a 81       	ldd	r25, Y+2	; 0x02
    3db4:	00 97       	sbiw	r24, 0x00	; 0
    3db6:	09 f4       	brne	.+2      	; 0x3dba <vTaskResume+0x22>
    3db8:	4c c0       	rjmp	.+152    	; 0x3e52 <vTaskResume+0xba>
    3dba:	20 91 9f 03 	lds	r18, 0x039F
    3dbe:	30 91 a0 03 	lds	r19, 0x03A0
    3dc2:	89 81       	ldd	r24, Y+1	; 0x01
    3dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    3dc6:	82 17       	cp	r24, r18
    3dc8:	93 07       	cpc	r25, r19
    3dca:	09 f4       	brne	.+2      	; 0x3dce <vTaskResume+0x36>
    3dcc:	42 c0       	rjmp	.+132    	; 0x3e52 <vTaskResume+0xba>
		{
			taskENTER_CRITICAL();
    3dce:	0f b6       	in	r0, 0x3f	; 63
    3dd0:	f8 94       	cli
    3dd2:	0f 92       	push	r0
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    3dd4:	89 81       	ldd	r24, Y+1	; 0x01
    3dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3dd8:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <prvTaskIsTaskSuspended>
    3ddc:	88 23       	and	r24, r24
    3dde:	b9 f1       	breq	.+110    	; 0x3e4e <vTaskResume+0xb6>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    3de0:	89 81       	ldd	r24, Y+1	; 0x01
    3de2:	9a 81       	ldd	r25, Y+2	; 0x02
    3de4:	02 96       	adiw	r24, 0x02	; 2
    3de6:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3dea:	e9 81       	ldd	r30, Y+1	; 0x01
    3dec:	fa 81       	ldd	r31, Y+2	; 0x02
    3dee:	96 89       	ldd	r25, Z+22	; 0x16
    3df0:	80 91 a5 03 	lds	r24, 0x03A5
    3df4:	89 17       	cp	r24, r25
    3df6:	28 f4       	brcc	.+10     	; 0x3e02 <vTaskResume+0x6a>
    3df8:	e9 81       	ldd	r30, Y+1	; 0x01
    3dfa:	fa 81       	ldd	r31, Y+2	; 0x02
    3dfc:	86 89       	ldd	r24, Z+22	; 0x16
    3dfe:	80 93 a5 03 	sts	0x03A5, r24
    3e02:	e9 81       	ldd	r30, Y+1	; 0x01
    3e04:	fa 81       	ldd	r31, Y+2	; 0x02
    3e06:	86 89       	ldd	r24, Z+22	; 0x16
    3e08:	28 2f       	mov	r18, r24
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	c9 01       	movw	r24, r18
    3e0e:	88 0f       	add	r24, r24
    3e10:	99 1f       	adc	r25, r25
    3e12:	88 0f       	add	r24, r24
    3e14:	99 1f       	adc	r25, r25
    3e16:	88 0f       	add	r24, r24
    3e18:	99 1f       	adc	r25, r25
    3e1a:	82 0f       	add	r24, r18
    3e1c:	93 1f       	adc	r25, r19
    3e1e:	ac 01       	movw	r20, r24
    3e20:	40 55       	subi	r20, 0x50	; 80
    3e22:	5c 4f       	sbci	r21, 0xFC	; 252
    3e24:	89 81       	ldd	r24, Y+1	; 0x01
    3e26:	9a 81       	ldd	r25, Y+2	; 0x02
    3e28:	9c 01       	movw	r18, r24
    3e2a:	2e 5f       	subi	r18, 0xFE	; 254
    3e2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e2e:	ca 01       	movw	r24, r20
    3e30:	b9 01       	movw	r22, r18
    3e32:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3e36:	e9 81       	ldd	r30, Y+1	; 0x01
    3e38:	fa 81       	ldd	r31, Y+2	; 0x02
    3e3a:	96 89       	ldd	r25, Z+22	; 0x16
    3e3c:	e0 91 9f 03 	lds	r30, 0x039F
    3e40:	f0 91 a0 03 	lds	r31, 0x03A0
    3e44:	86 89       	ldd	r24, Z+22	; 0x16
    3e46:	98 17       	cp	r25, r24
    3e48:	10 f0       	brcs	.+4      	; 0x3e4e <vTaskResume+0xb6>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    3e4a:	0e 94 2e 12 	call	0x245c	; 0x245c <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    3e4e:	0f 90       	pop	r0
    3e50:	0f be       	out	0x3f, r0	; 63
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3e52:	0f 90       	pop	r0
    3e54:	0f 90       	pop	r0
    3e56:	0f 90       	pop	r0
    3e58:	0f 90       	pop	r0
    3e5a:	cf 91       	pop	r28
    3e5c:	df 91       	pop	r29
    3e5e:	08 95       	ret

00003e60 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    3e60:	df 93       	push	r29
    3e62:	cf 93       	push	r28
    3e64:	00 d0       	rcall	.+0      	; 0x3e66 <xTaskResumeFromISR+0x6>
    3e66:	00 d0       	rcall	.+0      	; 0x3e68 <xTaskResumeFromISR+0x8>
    3e68:	00 d0       	rcall	.+0      	; 0x3e6a <xTaskResumeFromISR+0xa>
    3e6a:	cd b7       	in	r28, 0x3d	; 61
    3e6c:	de b7       	in	r29, 0x3e	; 62
    3e6e:	9e 83       	std	Y+6, r25	; 0x06
    3e70:	8d 83       	std	Y+5, r24	; 0x05
	BaseType_t xYieldRequired = pdFALSE;
    3e72:	1c 82       	std	Y+4, r1	; 0x04
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    3e74:	8d 81       	ldd	r24, Y+5	; 0x05
    3e76:	9e 81       	ldd	r25, Y+6	; 0x06
    3e78:	9b 83       	std	Y+3, r25	; 0x03
    3e7a:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3e7c:	19 82       	std	Y+1, r1	; 0x01
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    3e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e80:	9b 81       	ldd	r25, Y+3	; 0x03
    3e82:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <prvTaskIsTaskSuspended>
    3e86:	88 23       	and	r24, r24
    3e88:	09 f4       	brne	.+2      	; 0x3e8c <xTaskResumeFromISR+0x2c>
    3e8a:	46 c0       	rjmp	.+140    	; 0x3f18 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3e8c:	80 91 af 03 	lds	r24, 0x03AF
    3e90:	88 23       	and	r24, r24
    3e92:	c1 f5       	brne	.+112    	; 0x3f04 <xTaskResumeFromISR+0xa4>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3e94:	ea 81       	ldd	r30, Y+2	; 0x02
    3e96:	fb 81       	ldd	r31, Y+3	; 0x03
    3e98:	96 89       	ldd	r25, Z+22	; 0x16
    3e9a:	e0 91 9f 03 	lds	r30, 0x039F
    3e9e:	f0 91 a0 03 	lds	r31, 0x03A0
    3ea2:	86 89       	ldd	r24, Z+22	; 0x16
    3ea4:	98 17       	cp	r25, r24
    3ea6:	10 f0       	brcs	.+4      	; 0x3eac <xTaskResumeFromISR+0x4c>
					{
						xYieldRequired = pdTRUE;
    3ea8:	81 e0       	ldi	r24, 0x01	; 1
    3eaa:	8c 83       	std	Y+4, r24	; 0x04
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3eac:	8a 81       	ldd	r24, Y+2	; 0x02
    3eae:	9b 81       	ldd	r25, Y+3	; 0x03
    3eb0:	02 96       	adiw	r24, 0x02	; 2
    3eb2:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3eb6:	ea 81       	ldd	r30, Y+2	; 0x02
    3eb8:	fb 81       	ldd	r31, Y+3	; 0x03
    3eba:	96 89       	ldd	r25, Z+22	; 0x16
    3ebc:	80 91 a5 03 	lds	r24, 0x03A5
    3ec0:	89 17       	cp	r24, r25
    3ec2:	28 f4       	brcc	.+10     	; 0x3ece <xTaskResumeFromISR+0x6e>
    3ec4:	ea 81       	ldd	r30, Y+2	; 0x02
    3ec6:	fb 81       	ldd	r31, Y+3	; 0x03
    3ec8:	86 89       	ldd	r24, Z+22	; 0x16
    3eca:	80 93 a5 03 	sts	0x03A5, r24
    3ece:	ea 81       	ldd	r30, Y+2	; 0x02
    3ed0:	fb 81       	ldd	r31, Y+3	; 0x03
    3ed2:	86 89       	ldd	r24, Z+22	; 0x16
    3ed4:	28 2f       	mov	r18, r24
    3ed6:	30 e0       	ldi	r19, 0x00	; 0
    3ed8:	c9 01       	movw	r24, r18
    3eda:	88 0f       	add	r24, r24
    3edc:	99 1f       	adc	r25, r25
    3ede:	88 0f       	add	r24, r24
    3ee0:	99 1f       	adc	r25, r25
    3ee2:	88 0f       	add	r24, r24
    3ee4:	99 1f       	adc	r25, r25
    3ee6:	82 0f       	add	r24, r18
    3ee8:	93 1f       	adc	r25, r19
    3eea:	ac 01       	movw	r20, r24
    3eec:	40 55       	subi	r20, 0x50	; 80
    3eee:	5c 4f       	sbci	r21, 0xFC	; 252
    3ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ef2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ef4:	9c 01       	movw	r18, r24
    3ef6:	2e 5f       	subi	r18, 0xFE	; 254
    3ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    3efa:	ca 01       	movw	r24, r20
    3efc:	b9 01       	movw	r22, r18
    3efe:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <vListInsertEnd>
    3f02:	0a c0       	rjmp	.+20     	; 0x3f18 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3f04:	8a 81       	ldd	r24, Y+2	; 0x02
    3f06:	9b 81       	ldd	r25, Y+3	; 0x03
    3f08:	9c 01       	movw	r18, r24
    3f0a:	24 5f       	subi	r18, 0xF4	; 244
    3f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f0e:	83 ef       	ldi	r24, 0xF3	; 243
    3f10:	93 e0       	ldi	r25, 0x03	; 3
    3f12:	b9 01       	movw	r22, r18
    3f14:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
    3f18:	8c 81       	ldd	r24, Y+4	; 0x04
	}
    3f1a:	26 96       	adiw	r28, 0x06	; 6
    3f1c:	0f b6       	in	r0, 0x3f	; 63
    3f1e:	f8 94       	cli
    3f20:	de bf       	out	0x3e, r29	; 62
    3f22:	0f be       	out	0x3f, r0	; 63
    3f24:	cd bf       	out	0x3d, r28	; 61
    3f26:	cf 91       	pop	r28
    3f28:	df 91       	pop	r29
    3f2a:	08 95       	ret

00003f2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    3f2c:	ef 92       	push	r14
    3f2e:	ff 92       	push	r15
    3f30:	0f 93       	push	r16
    3f32:	df 93       	push	r29
    3f34:	cf 93       	push	r28
    3f36:	0f 92       	push	r0
    3f38:	cd b7       	in	r28, 0x3d	; 61
    3f3a:	de b7       	in	r29, 0x3e	; 62
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    3f3c:	8b eb       	ldi	r24, 0xBB	; 187
    3f3e:	93 e2       	ldi	r25, 0x23	; 35
    3f40:	24 e6       	ldi	r18, 0x64	; 100
    3f42:	30 e0       	ldi	r19, 0x00	; 0
    3f44:	ed ea       	ldi	r30, 0xAD	; 173
    3f46:	f3 e0       	ldi	r31, 0x03	; 3
    3f48:	b9 01       	movw	r22, r18
    3f4a:	48 ec       	ldi	r20, 0xC8	; 200
    3f4c:	50 e0       	ldi	r21, 0x00	; 0
    3f4e:	20 e0       	ldi	r18, 0x00	; 0
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	00 e0       	ldi	r16, 0x00	; 0
    3f54:	7f 01       	movw	r14, r30
    3f56:	0e 94 56 1a 	call	0x34ac	; 0x34ac <xTaskCreate>
    3f5a:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    3f5c:	89 81       	ldd	r24, Y+1	; 0x01
    3f5e:	81 30       	cpi	r24, 0x01	; 1
    3f60:	81 f4       	brne	.+32     	; 0x3f82 <vTaskStartScheduler+0x56>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    3f62:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    3f64:	8f ef       	ldi	r24, 0xFF	; 255
    3f66:	9f ef       	ldi	r25, 0xFF	; 255
    3f68:	90 93 ac 03 	sts	0x03AC, r25
    3f6c:	80 93 ab 03 	sts	0x03AB, r24
		xSchedulerRunning = pdTRUE;
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	80 93 a6 03 	sts	0x03A6, r24
		xTickCount = ( TickType_t ) 0U;
    3f76:	10 92 a4 03 	sts	0x03A4, r1
    3f7a:	10 92 a3 03 	sts	0x03A3, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    3f7e:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    3f82:	0f 90       	pop	r0
    3f84:	cf 91       	pop	r28
    3f86:	df 91       	pop	r29
    3f88:	0f 91       	pop	r16
    3f8a:	ff 90       	pop	r15
    3f8c:	ef 90       	pop	r14
    3f8e:	08 95       	ret

00003f90 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3f90:	df 93       	push	r29
    3f92:	cf 93       	push	r28
    3f94:	cd b7       	in	r28, 0x3d	; 61
    3f96:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3f98:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    3f9a:	10 92 a6 03 	sts	0x03A6, r1
	vPortEndScheduler();
    3f9e:	0e 94 27 12 	call	0x244e	; 0x244e <vPortEndScheduler>
}
    3fa2:	cf 91       	pop	r28
    3fa4:	df 91       	pop	r29
    3fa6:	08 95       	ret

00003fa8 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3fa8:	df 93       	push	r29
    3faa:	cf 93       	push	r28
    3fac:	cd b7       	in	r28, 0x3d	; 61
    3fae:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    3fb0:	80 91 af 03 	lds	r24, 0x03AF
    3fb4:	8f 5f       	subi	r24, 0xFF	; 255
    3fb6:	80 93 af 03 	sts	0x03AF, r24
}
    3fba:	cf 91       	pop	r28
    3fbc:	df 91       	pop	r29
    3fbe:	08 95       	ret

00003fc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    3fc0:	df 93       	push	r29
    3fc2:	cf 93       	push	r28
    3fc4:	00 d0       	rcall	.+0      	; 0x3fc6 <xTaskResumeAll+0x6>
    3fc6:	00 d0       	rcall	.+0      	; 0x3fc8 <xTaskResumeAll+0x8>
    3fc8:	cd b7       	in	r28, 0x3d	; 61
    3fca:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB = NULL;
    3fcc:	1c 82       	std	Y+4, r1	; 0x04
    3fce:	1b 82       	std	Y+3, r1	; 0x03
BaseType_t xAlreadyYielded = pdFALSE;
    3fd0:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3fd2:	0f b6       	in	r0, 0x3f	; 63
    3fd4:	f8 94       	cli
    3fd6:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    3fd8:	80 91 af 03 	lds	r24, 0x03AF
    3fdc:	81 50       	subi	r24, 0x01	; 1
    3fde:	80 93 af 03 	sts	0x03AF, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3fe2:	80 91 af 03 	lds	r24, 0x03AF
    3fe6:	88 23       	and	r24, r24
    3fe8:	09 f0       	breq	.+2      	; 0x3fec <xTaskResumeAll+0x2c>
    3fea:	73 c0       	rjmp	.+230    	; 0x40d2 <xTaskResumeAll+0x112>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    3fec:	80 91 a2 03 	lds	r24, 0x03A2
    3ff0:	88 23       	and	r24, r24
    3ff2:	09 f4       	brne	.+2      	; 0x3ff6 <xTaskResumeAll+0x36>
    3ff4:	6e c0       	rjmp	.+220    	; 0x40d2 <xTaskResumeAll+0x112>
    3ff6:	45 c0       	rjmp	.+138    	; 0x4082 <xTaskResumeAll+0xc2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3ff8:	e0 91 f8 03 	lds	r30, 0x03F8
    3ffc:	f0 91 f9 03 	lds	r31, 0x03F9
    4000:	86 81       	ldd	r24, Z+6	; 0x06
    4002:	97 81       	ldd	r25, Z+7	; 0x07
    4004:	9c 83       	std	Y+4, r25	; 0x04
    4006:	8b 83       	std	Y+3, r24	; 0x03
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4008:	8b 81       	ldd	r24, Y+3	; 0x03
    400a:	9c 81       	ldd	r25, Y+4	; 0x04
    400c:	0c 96       	adiw	r24, 0x0c	; 12
    400e:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4012:	8b 81       	ldd	r24, Y+3	; 0x03
    4014:	9c 81       	ldd	r25, Y+4	; 0x04
    4016:	02 96       	adiw	r24, 0x02	; 2
    4018:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    401c:	eb 81       	ldd	r30, Y+3	; 0x03
    401e:	fc 81       	ldd	r31, Y+4	; 0x04
    4020:	96 89       	ldd	r25, Z+22	; 0x16
    4022:	80 91 a5 03 	lds	r24, 0x03A5
    4026:	89 17       	cp	r24, r25
    4028:	28 f4       	brcc	.+10     	; 0x4034 <xTaskResumeAll+0x74>
    402a:	eb 81       	ldd	r30, Y+3	; 0x03
    402c:	fc 81       	ldd	r31, Y+4	; 0x04
    402e:	86 89       	ldd	r24, Z+22	; 0x16
    4030:	80 93 a5 03 	sts	0x03A5, r24
    4034:	eb 81       	ldd	r30, Y+3	; 0x03
    4036:	fc 81       	ldd	r31, Y+4	; 0x04
    4038:	86 89       	ldd	r24, Z+22	; 0x16
    403a:	28 2f       	mov	r18, r24
    403c:	30 e0       	ldi	r19, 0x00	; 0
    403e:	c9 01       	movw	r24, r18
    4040:	88 0f       	add	r24, r24
    4042:	99 1f       	adc	r25, r25
    4044:	88 0f       	add	r24, r24
    4046:	99 1f       	adc	r25, r25
    4048:	88 0f       	add	r24, r24
    404a:	99 1f       	adc	r25, r25
    404c:	82 0f       	add	r24, r18
    404e:	93 1f       	adc	r25, r19
    4050:	ac 01       	movw	r20, r24
    4052:	40 55       	subi	r20, 0x50	; 80
    4054:	5c 4f       	sbci	r21, 0xFC	; 252
    4056:	8b 81       	ldd	r24, Y+3	; 0x03
    4058:	9c 81       	ldd	r25, Y+4	; 0x04
    405a:	9c 01       	movw	r18, r24
    405c:	2e 5f       	subi	r18, 0xFE	; 254
    405e:	3f 4f       	sbci	r19, 0xFF	; 255
    4060:	ca 01       	movw	r24, r20
    4062:	b9 01       	movw	r22, r18
    4064:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4068:	eb 81       	ldd	r30, Y+3	; 0x03
    406a:	fc 81       	ldd	r31, Y+4	; 0x04
    406c:	96 89       	ldd	r25, Z+22	; 0x16
    406e:	e0 91 9f 03 	lds	r30, 0x039F
    4072:	f0 91 a0 03 	lds	r31, 0x03A0
    4076:	86 89       	ldd	r24, Z+22	; 0x16
    4078:	98 17       	cp	r25, r24
    407a:	18 f0       	brcs	.+6      	; 0x4082 <xTaskResumeAll+0xc2>
					{
						xYieldPending = pdTRUE;
    407c:	81 e0       	ldi	r24, 0x01	; 1
    407e:	80 93 a8 03 	sts	0x03A8, r24
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    4082:	80 91 f3 03 	lds	r24, 0x03F3
    4086:	88 23       	and	r24, r24
    4088:	09 f0       	breq	.+2      	; 0x408c <xTaskResumeAll+0xcc>
    408a:	b6 cf       	rjmp	.-148    	; 0x3ff8 <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    408c:	8b 81       	ldd	r24, Y+3	; 0x03
    408e:	9c 81       	ldd	r25, Y+4	; 0x04
    4090:	00 97       	sbiw	r24, 0x00	; 0
    4092:	11 f0       	breq	.+4      	; 0x4098 <xTaskResumeAll+0xd8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    4094:	0e 94 61 24 	call	0x48c2	; 0x48c2 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    4098:	80 91 a7 03 	lds	r24, 0x03A7
    409c:	89 83       	std	Y+1, r24	; 0x01

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    409e:	89 81       	ldd	r24, Y+1	; 0x01
    40a0:	88 23       	and	r24, r24
    40a2:	79 f0       	breq	.+30     	; 0x40c2 <xTaskResumeAll+0x102>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    40a4:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <xTaskIncrementTick>
    40a8:	88 23       	and	r24, r24
    40aa:	19 f0       	breq	.+6      	; 0x40b2 <xTaskResumeAll+0xf2>
							{
								xYieldPending = pdTRUE;
    40ac:	81 e0       	ldi	r24, 0x01	; 1
    40ae:	80 93 a8 03 	sts	0x03A8, r24
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    40b2:	89 81       	ldd	r24, Y+1	; 0x01
    40b4:	81 50       	subi	r24, 0x01	; 1
    40b6:	89 83       	std	Y+1, r24	; 0x01
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    40b8:	89 81       	ldd	r24, Y+1	; 0x01
    40ba:	88 23       	and	r24, r24
    40bc:	99 f7       	brne	.-26     	; 0x40a4 <xTaskResumeAll+0xe4>

						uxPendedTicks = 0;
    40be:	10 92 a7 03 	sts	0x03A7, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    40c2:	80 91 a8 03 	lds	r24, 0x03A8
    40c6:	88 23       	and	r24, r24
    40c8:	21 f0       	breq	.+8      	; 0x40d2 <xTaskResumeAll+0x112>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    40ca:	81 e0       	ldi	r24, 0x01	; 1
    40cc:	8a 83       	std	Y+2, r24	; 0x02
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    40ce:	0e 94 2e 12 	call	0x245c	; 0x245c <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    40d2:	0f 90       	pop	r0
    40d4:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    40d6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    40d8:	0f 90       	pop	r0
    40da:	0f 90       	pop	r0
    40dc:	0f 90       	pop	r0
    40de:	0f 90       	pop	r0
    40e0:	cf 91       	pop	r28
    40e2:	df 91       	pop	r29
    40e4:	08 95       	ret

000040e6 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    40e6:	df 93       	push	r29
    40e8:	cf 93       	push	r28
    40ea:	00 d0       	rcall	.+0      	; 0x40ec <xTaskGetTickCount+0x6>
    40ec:	cd b7       	in	r28, 0x3d	; 61
    40ee:	de b7       	in	r29, 0x3e	; 62
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    40f0:	0f b6       	in	r0, 0x3f	; 63
    40f2:	f8 94       	cli
    40f4:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    40f6:	80 91 a3 03 	lds	r24, 0x03A3
    40fa:	90 91 a4 03 	lds	r25, 0x03A4
    40fe:	9a 83       	std	Y+2, r25	; 0x02
    4100:	89 83       	std	Y+1, r24	; 0x01
	}
	portTICK_TYPE_EXIT_CRITICAL();
    4102:	0f 90       	pop	r0
    4104:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    4106:	89 81       	ldd	r24, Y+1	; 0x01
    4108:	9a 81       	ldd	r25, Y+2	; 0x02
}
    410a:	0f 90       	pop	r0
    410c:	0f 90       	pop	r0
    410e:	cf 91       	pop	r28
    4110:	df 91       	pop	r29
    4112:	08 95       	ret

00004114 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    4114:	df 93       	push	r29
    4116:	cf 93       	push	r28
    4118:	00 d0       	rcall	.+0      	; 0x411a <xTaskGetTickCountFromISR+0x6>
    411a:	0f 92       	push	r0
    411c:	cd b7       	in	r28, 0x3d	; 61
    411e:	de b7       	in	r29, 0x3e	; 62
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    4120:	19 82       	std	Y+1, r1	; 0x01
	{
		xReturn = xTickCount;
    4122:	80 91 a3 03 	lds	r24, 0x03A3
    4126:	90 91 a4 03 	lds	r25, 0x03A4
    412a:	9b 83       	std	Y+3, r25	; 0x03
    412c:	8a 83       	std	Y+2, r24	; 0x02
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    412e:	8a 81       	ldd	r24, Y+2	; 0x02
    4130:	9b 81       	ldd	r25, Y+3	; 0x03
}
    4132:	0f 90       	pop	r0
    4134:	0f 90       	pop	r0
    4136:	0f 90       	pop	r0
    4138:	cf 91       	pop	r28
    413a:	df 91       	pop	r29
    413c:	08 95       	ret

0000413e <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    413e:	df 93       	push	r29
    4140:	cf 93       	push	r28
    4142:	cd b7       	in	r28, 0x3d	; 61
    4144:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    4146:	80 91 a2 03 	lds	r24, 0x03A2
}
    414a:	cf 91       	pop	r28
    414c:	df 91       	pop	r29
    414e:	08 95       	ret

00004150 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    4150:	df 93       	push	r29
    4152:	cf 93       	push	r28
    4154:	00 d0       	rcall	.+0      	; 0x4156 <pcTaskGetName+0x6>
    4156:	00 d0       	rcall	.+0      	; 0x4158 <pcTaskGetName+0x8>
    4158:	00 d0       	rcall	.+0      	; 0x415a <pcTaskGetName+0xa>
    415a:	cd b7       	in	r28, 0x3d	; 61
    415c:	de b7       	in	r29, 0x3e	; 62
    415e:	9c 83       	std	Y+4, r25	; 0x04
    4160:	8b 83       	std	Y+3, r24	; 0x03
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    4162:	8b 81       	ldd	r24, Y+3	; 0x03
    4164:	9c 81       	ldd	r25, Y+4	; 0x04
    4166:	00 97       	sbiw	r24, 0x00	; 0
    4168:	39 f4       	brne	.+14     	; 0x4178 <pcTaskGetName+0x28>
    416a:	80 91 9f 03 	lds	r24, 0x039F
    416e:	90 91 a0 03 	lds	r25, 0x03A0
    4172:	9e 83       	std	Y+6, r25	; 0x06
    4174:	8d 83       	std	Y+5, r24	; 0x05
    4176:	04 c0       	rjmp	.+8      	; 0x4180 <pcTaskGetName+0x30>
    4178:	8b 81       	ldd	r24, Y+3	; 0x03
    417a:	9c 81       	ldd	r25, Y+4	; 0x04
    417c:	9e 83       	std	Y+6, r25	; 0x06
    417e:	8d 83       	std	Y+5, r24	; 0x05
    4180:	8d 81       	ldd	r24, Y+5	; 0x05
    4182:	9e 81       	ldd	r25, Y+6	; 0x06
    4184:	9a 83       	std	Y+2, r25	; 0x02
    4186:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    4188:	89 81       	ldd	r24, Y+1	; 0x01
    418a:	9a 81       	ldd	r25, Y+2	; 0x02
    418c:	49 96       	adiw	r24, 0x19	; 25
}
    418e:	26 96       	adiw	r28, 0x06	; 6
    4190:	0f b6       	in	r0, 0x3f	; 63
    4192:	f8 94       	cli
    4194:	de bf       	out	0x3e, r29	; 62
    4196:	0f be       	out	0x3f, r0	; 63
    4198:	cd bf       	out	0x3d, r28	; 61
    419a:	cf 91       	pop	r28
    419c:	df 91       	pop	r29
    419e:	08 95       	ret

000041a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    41a0:	df 93       	push	r29
    41a2:	cf 93       	push	r28
    41a4:	cd b7       	in	r28, 0x3d	; 61
    41a6:	de b7       	in	r29, 0x3e	; 62
    41a8:	29 97       	sbiw	r28, 0x09	; 9
    41aa:	0f b6       	in	r0, 0x3f	; 63
    41ac:	f8 94       	cli
    41ae:	de bf       	out	0x3e, r29	; 62
    41b0:	0f be       	out	0x3f, r0	; 63
    41b2:	cd bf       	out	0x3d, r28	; 61
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    41b4:	1d 82       	std	Y+5, r1	; 0x05

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    41b6:	80 91 af 03 	lds	r24, 0x03AF
    41ba:	88 23       	and	r24, r24
    41bc:	09 f0       	breq	.+2      	; 0x41c0 <xTaskIncrementTick+0x20>
    41be:	a7 c0       	rjmp	.+334    	; 0x430e <xTaskIncrementTick+0x16e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    41c0:	80 91 a3 03 	lds	r24, 0x03A3
    41c4:	90 91 a4 03 	lds	r25, 0x03A4
    41c8:	01 96       	adiw	r24, 0x01	; 1
    41ca:	9c 83       	std	Y+4, r25	; 0x04
    41cc:	8b 83       	std	Y+3, r24	; 0x03

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    41ce:	8b 81       	ldd	r24, Y+3	; 0x03
    41d0:	9c 81       	ldd	r25, Y+4	; 0x04
    41d2:	90 93 a4 03 	sts	0x03A4, r25
    41d6:	80 93 a3 03 	sts	0x03A3, r24

		if( xConstTickCount == ( TickType_t ) 0U )
    41da:	8b 81       	ldd	r24, Y+3	; 0x03
    41dc:	9c 81       	ldd	r25, Y+4	; 0x04
    41de:	00 97       	sbiw	r24, 0x00	; 0
    41e0:	d9 f4       	brne	.+54     	; 0x4218 <xTaskIncrementTick+0x78>
		{
			taskSWITCH_DELAYED_LISTS();
    41e2:	80 91 ef 03 	lds	r24, 0x03EF
    41e6:	90 91 f0 03 	lds	r25, 0x03F0
    41ea:	9a 83       	std	Y+2, r25	; 0x02
    41ec:	89 83       	std	Y+1, r24	; 0x01
    41ee:	80 91 f1 03 	lds	r24, 0x03F1
    41f2:	90 91 f2 03 	lds	r25, 0x03F2
    41f6:	90 93 f0 03 	sts	0x03F0, r25
    41fa:	80 93 ef 03 	sts	0x03EF, r24
    41fe:	89 81       	ldd	r24, Y+1	; 0x01
    4200:	9a 81       	ldd	r25, Y+2	; 0x02
    4202:	90 93 f2 03 	sts	0x03F2, r25
    4206:	80 93 f1 03 	sts	0x03F1, r24
    420a:	80 91 a9 03 	lds	r24, 0x03A9
    420e:	8f 5f       	subi	r24, 0xFF	; 255
    4210:	80 93 a9 03 	sts	0x03A9, r24
    4214:	0e 94 61 24 	call	0x48c2	; 0x48c2 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    4218:	20 91 ab 03 	lds	r18, 0x03AB
    421c:	30 91 ac 03 	lds	r19, 0x03AC
    4220:	8b 81       	ldd	r24, Y+3	; 0x03
    4222:	9c 81       	ldd	r25, Y+4	; 0x04
    4224:	82 17       	cp	r24, r18
    4226:	93 07       	cpc	r25, r19
    4228:	08 f4       	brcc	.+2      	; 0x422c <xTaskIncrementTick+0x8c>
    422a:	76 c0       	rjmp	.+236    	; 0x4318 <xTaskIncrementTick+0x178>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    422c:	e0 91 ef 03 	lds	r30, 0x03EF
    4230:	f0 91 f0 03 	lds	r31, 0x03F0
    4234:	80 81       	ld	r24, Z
    4236:	88 23       	and	r24, r24
    4238:	39 f4       	brne	.+14     	; 0x4248 <xTaskIncrementTick+0xa8>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    423a:	8f ef       	ldi	r24, 0xFF	; 255
    423c:	9f ef       	ldi	r25, 0xFF	; 255
    423e:	90 93 ac 03 	sts	0x03AC, r25
    4242:	80 93 ab 03 	sts	0x03AB, r24
    4246:	68 c0       	rjmp	.+208    	; 0x4318 <xTaskIncrementTick+0x178>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4248:	e0 91 ef 03 	lds	r30, 0x03EF
    424c:	f0 91 f0 03 	lds	r31, 0x03F0
    4250:	05 80       	ldd	r0, Z+5	; 0x05
    4252:	f6 81       	ldd	r31, Z+6	; 0x06
    4254:	e0 2d       	mov	r30, r0
    4256:	86 81       	ldd	r24, Z+6	; 0x06
    4258:	97 81       	ldd	r25, Z+7	; 0x07
    425a:	99 87       	std	Y+9, r25	; 0x09
    425c:	88 87       	std	Y+8, r24	; 0x08
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    425e:	e8 85       	ldd	r30, Y+8	; 0x08
    4260:	f9 85       	ldd	r31, Y+9	; 0x09
    4262:	82 81       	ldd	r24, Z+2	; 0x02
    4264:	93 81       	ldd	r25, Z+3	; 0x03
    4266:	9f 83       	std	Y+7, r25	; 0x07
    4268:	8e 83       	std	Y+6, r24	; 0x06

					if( xConstTickCount < xItemValue )
    426a:	2b 81       	ldd	r18, Y+3	; 0x03
    426c:	3c 81       	ldd	r19, Y+4	; 0x04
    426e:	8e 81       	ldd	r24, Y+6	; 0x06
    4270:	9f 81       	ldd	r25, Y+7	; 0x07
    4272:	28 17       	cp	r18, r24
    4274:	39 07       	cpc	r19, r25
    4276:	38 f4       	brcc	.+14     	; 0x4286 <xTaskIncrementTick+0xe6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    4278:	8e 81       	ldd	r24, Y+6	; 0x06
    427a:	9f 81       	ldd	r25, Y+7	; 0x07
    427c:	90 93 ac 03 	sts	0x03AC, r25
    4280:	80 93 ab 03 	sts	0x03AB, r24
    4284:	49 c0       	rjmp	.+146    	; 0x4318 <xTaskIncrementTick+0x178>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4286:	88 85       	ldd	r24, Y+8	; 0x08
    4288:	99 85       	ldd	r25, Y+9	; 0x09
    428a:	02 96       	adiw	r24, 0x02	; 2
    428c:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    4290:	e8 85       	ldd	r30, Y+8	; 0x08
    4292:	f9 85       	ldd	r31, Y+9	; 0x09
    4294:	84 89       	ldd	r24, Z+20	; 0x14
    4296:	95 89       	ldd	r25, Z+21	; 0x15
    4298:	00 97       	sbiw	r24, 0x00	; 0
    429a:	29 f0       	breq	.+10     	; 0x42a6 <xTaskIncrementTick+0x106>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    429c:	88 85       	ldd	r24, Y+8	; 0x08
    429e:	99 85       	ldd	r25, Y+9	; 0x09
    42a0:	0c 96       	adiw	r24, 0x0c	; 12
    42a2:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    42a6:	e8 85       	ldd	r30, Y+8	; 0x08
    42a8:	f9 85       	ldd	r31, Y+9	; 0x09
    42aa:	96 89       	ldd	r25, Z+22	; 0x16
    42ac:	80 91 a5 03 	lds	r24, 0x03A5
    42b0:	89 17       	cp	r24, r25
    42b2:	28 f4       	brcc	.+10     	; 0x42be <xTaskIncrementTick+0x11e>
    42b4:	e8 85       	ldd	r30, Y+8	; 0x08
    42b6:	f9 85       	ldd	r31, Y+9	; 0x09
    42b8:	86 89       	ldd	r24, Z+22	; 0x16
    42ba:	80 93 a5 03 	sts	0x03A5, r24
    42be:	e8 85       	ldd	r30, Y+8	; 0x08
    42c0:	f9 85       	ldd	r31, Y+9	; 0x09
    42c2:	86 89       	ldd	r24, Z+22	; 0x16
    42c4:	28 2f       	mov	r18, r24
    42c6:	30 e0       	ldi	r19, 0x00	; 0
    42c8:	c9 01       	movw	r24, r18
    42ca:	88 0f       	add	r24, r24
    42cc:	99 1f       	adc	r25, r25
    42ce:	88 0f       	add	r24, r24
    42d0:	99 1f       	adc	r25, r25
    42d2:	88 0f       	add	r24, r24
    42d4:	99 1f       	adc	r25, r25
    42d6:	82 0f       	add	r24, r18
    42d8:	93 1f       	adc	r25, r19
    42da:	ac 01       	movw	r20, r24
    42dc:	40 55       	subi	r20, 0x50	; 80
    42de:	5c 4f       	sbci	r21, 0xFC	; 252
    42e0:	88 85       	ldd	r24, Y+8	; 0x08
    42e2:	99 85       	ldd	r25, Y+9	; 0x09
    42e4:	9c 01       	movw	r18, r24
    42e6:	2e 5f       	subi	r18, 0xFE	; 254
    42e8:	3f 4f       	sbci	r19, 0xFF	; 255
    42ea:	ca 01       	movw	r24, r20
    42ec:	b9 01       	movw	r22, r18
    42ee:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    42f2:	e8 85       	ldd	r30, Y+8	; 0x08
    42f4:	f9 85       	ldd	r31, Y+9	; 0x09
    42f6:	96 89       	ldd	r25, Z+22	; 0x16
    42f8:	e0 91 9f 03 	lds	r30, 0x039F
    42fc:	f0 91 a0 03 	lds	r31, 0x03A0
    4300:	86 89       	ldd	r24, Z+22	; 0x16
    4302:	98 17       	cp	r25, r24
    4304:	08 f4       	brcc	.+2      	; 0x4308 <xTaskIncrementTick+0x168>
    4306:	92 cf       	rjmp	.-220    	; 0x422c <xTaskIncrementTick+0x8c>
						{
							xSwitchRequired = pdTRUE;
    4308:	81 e0       	ldi	r24, 0x01	; 1
    430a:	8d 83       	std	Y+5, r24	; 0x05
    430c:	8f cf       	rjmp	.-226    	; 0x422c <xTaskIncrementTick+0x8c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    430e:	80 91 a7 03 	lds	r24, 0x03A7
    4312:	8f 5f       	subi	r24, 0xFF	; 255
    4314:	80 93 a7 03 	sts	0x03A7, r24
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    4318:	80 91 a8 03 	lds	r24, 0x03A8
    431c:	88 23       	and	r24, r24
    431e:	11 f0       	breq	.+4      	; 0x4324 <xTaskIncrementTick+0x184>
		{
			xSwitchRequired = pdTRUE;
    4320:	81 e0       	ldi	r24, 0x01	; 1
    4322:	8d 83       	std	Y+5, r24	; 0x05
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    4324:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4326:	29 96       	adiw	r28, 0x09	; 9
    4328:	0f b6       	in	r0, 0x3f	; 63
    432a:	f8 94       	cli
    432c:	de bf       	out	0x3e, r29	; 62
    432e:	0f be       	out	0x3f, r0	; 63
    4330:	cd bf       	out	0x3d, r28	; 61
    4332:	cf 91       	pop	r28
    4334:	df 91       	pop	r29
    4336:	08 95       	ret

00004338 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    4338:	df 93       	push	r29
    433a:	cf 93       	push	r28
    433c:	00 d0       	rcall	.+0      	; 0x433e <vTaskSwitchContext+0x6>
    433e:	0f 92       	push	r0
    4340:	cd b7       	in	r28, 0x3d	; 61
    4342:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    4344:	80 91 af 03 	lds	r24, 0x03AF
    4348:	88 23       	and	r24, r24
    434a:	21 f0       	breq	.+8      	; 0x4354 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	80 93 a8 03 	sts	0x03A8, r24
    4352:	59 c0       	rjmp	.+178    	; 0x4406 <vTaskSwitchContext+0xce>
	}
	else
	{
		xYieldPending = pdFALSE;
    4354:	10 92 a8 03 	sts	0x03A8, r1
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    4358:	80 91 a5 03 	lds	r24, 0x03A5
    435c:	8b 83       	std	Y+3, r24	; 0x03
    435e:	03 c0       	rjmp	.+6      	; 0x4366 <vTaskSwitchContext+0x2e>
    4360:	8b 81       	ldd	r24, Y+3	; 0x03
    4362:	81 50       	subi	r24, 0x01	; 1
    4364:	8b 83       	std	Y+3, r24	; 0x03
    4366:	8b 81       	ldd	r24, Y+3	; 0x03
    4368:	28 2f       	mov	r18, r24
    436a:	30 e0       	ldi	r19, 0x00	; 0
    436c:	c9 01       	movw	r24, r18
    436e:	88 0f       	add	r24, r24
    4370:	99 1f       	adc	r25, r25
    4372:	88 0f       	add	r24, r24
    4374:	99 1f       	adc	r25, r25
    4376:	88 0f       	add	r24, r24
    4378:	99 1f       	adc	r25, r25
    437a:	82 0f       	add	r24, r18
    437c:	93 1f       	adc	r25, r19
    437e:	fc 01       	movw	r30, r24
    4380:	e0 55       	subi	r30, 0x50	; 80
    4382:	fc 4f       	sbci	r31, 0xFC	; 252
    4384:	80 81       	ld	r24, Z
    4386:	88 23       	and	r24, r24
    4388:	59 f3       	breq	.-42     	; 0x4360 <vTaskSwitchContext+0x28>
    438a:	8b 81       	ldd	r24, Y+3	; 0x03
    438c:	28 2f       	mov	r18, r24
    438e:	30 e0       	ldi	r19, 0x00	; 0
    4390:	c9 01       	movw	r24, r18
    4392:	88 0f       	add	r24, r24
    4394:	99 1f       	adc	r25, r25
    4396:	88 0f       	add	r24, r24
    4398:	99 1f       	adc	r25, r25
    439a:	88 0f       	add	r24, r24
    439c:	99 1f       	adc	r25, r25
    439e:	82 0f       	add	r24, r18
    43a0:	93 1f       	adc	r25, r19
    43a2:	80 55       	subi	r24, 0x50	; 80
    43a4:	9c 4f       	sbci	r25, 0xFC	; 252
    43a6:	9a 83       	std	Y+2, r25	; 0x02
    43a8:	89 83       	std	Y+1, r24	; 0x01
    43aa:	e9 81       	ldd	r30, Y+1	; 0x01
    43ac:	fa 81       	ldd	r31, Y+2	; 0x02
    43ae:	01 80       	ldd	r0, Z+1	; 0x01
    43b0:	f2 81       	ldd	r31, Z+2	; 0x02
    43b2:	e0 2d       	mov	r30, r0
    43b4:	82 81       	ldd	r24, Z+2	; 0x02
    43b6:	93 81       	ldd	r25, Z+3	; 0x03
    43b8:	e9 81       	ldd	r30, Y+1	; 0x01
    43ba:	fa 81       	ldd	r31, Y+2	; 0x02
    43bc:	92 83       	std	Z+2, r25	; 0x02
    43be:	81 83       	std	Z+1, r24	; 0x01
    43c0:	e9 81       	ldd	r30, Y+1	; 0x01
    43c2:	fa 81       	ldd	r31, Y+2	; 0x02
    43c4:	21 81       	ldd	r18, Z+1	; 0x01
    43c6:	32 81       	ldd	r19, Z+2	; 0x02
    43c8:	89 81       	ldd	r24, Y+1	; 0x01
    43ca:	9a 81       	ldd	r25, Y+2	; 0x02
    43cc:	03 96       	adiw	r24, 0x03	; 3
    43ce:	28 17       	cp	r18, r24
    43d0:	39 07       	cpc	r19, r25
    43d2:	59 f4       	brne	.+22     	; 0x43ea <vTaskSwitchContext+0xb2>
    43d4:	e9 81       	ldd	r30, Y+1	; 0x01
    43d6:	fa 81       	ldd	r31, Y+2	; 0x02
    43d8:	01 80       	ldd	r0, Z+1	; 0x01
    43da:	f2 81       	ldd	r31, Z+2	; 0x02
    43dc:	e0 2d       	mov	r30, r0
    43de:	82 81       	ldd	r24, Z+2	; 0x02
    43e0:	93 81       	ldd	r25, Z+3	; 0x03
    43e2:	e9 81       	ldd	r30, Y+1	; 0x01
    43e4:	fa 81       	ldd	r31, Y+2	; 0x02
    43e6:	92 83       	std	Z+2, r25	; 0x02
    43e8:	81 83       	std	Z+1, r24	; 0x01
    43ea:	e9 81       	ldd	r30, Y+1	; 0x01
    43ec:	fa 81       	ldd	r31, Y+2	; 0x02
    43ee:	01 80       	ldd	r0, Z+1	; 0x01
    43f0:	f2 81       	ldd	r31, Z+2	; 0x02
    43f2:	e0 2d       	mov	r30, r0
    43f4:	86 81       	ldd	r24, Z+6	; 0x06
    43f6:	97 81       	ldd	r25, Z+7	; 0x07
    43f8:	90 93 a0 03 	sts	0x03A0, r25
    43fc:	80 93 9f 03 	sts	0x039F, r24
    4400:	8b 81       	ldd	r24, Y+3	; 0x03
    4402:	80 93 a5 03 	sts	0x03A5, r24
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    4406:	0f 90       	pop	r0
    4408:	0f 90       	pop	r0
    440a:	0f 90       	pop	r0
    440c:	cf 91       	pop	r28
    440e:	df 91       	pop	r29
    4410:	08 95       	ret

00004412 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    4412:	df 93       	push	r29
    4414:	cf 93       	push	r28
    4416:	00 d0       	rcall	.+0      	; 0x4418 <vTaskPlaceOnEventList+0x6>
    4418:	00 d0       	rcall	.+0      	; 0x441a <vTaskPlaceOnEventList+0x8>
    441a:	cd b7       	in	r28, 0x3d	; 61
    441c:	de b7       	in	r29, 0x3e	; 62
    441e:	9a 83       	std	Y+2, r25	; 0x02
    4420:	89 83       	std	Y+1, r24	; 0x01
    4422:	7c 83       	std	Y+4, r23	; 0x04
    4424:	6b 83       	std	Y+3, r22	; 0x03

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    4426:	80 91 9f 03 	lds	r24, 0x039F
    442a:	90 91 a0 03 	lds	r25, 0x03A0
    442e:	9c 01       	movw	r18, r24
    4430:	24 5f       	subi	r18, 0xF4	; 244
    4432:	3f 4f       	sbci	r19, 0xFF	; 255
    4434:	89 81       	ldd	r24, Y+1	; 0x01
    4436:	9a 81       	ldd	r25, Y+2	; 0x02
    4438:	b9 01       	movw	r22, r18
    443a:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    443e:	8b 81       	ldd	r24, Y+3	; 0x03
    4440:	9c 81       	ldd	r25, Y+4	; 0x04
    4442:	61 e0       	ldi	r22, 0x01	; 1
    4444:	0e 94 84 29 	call	0x5308	; 0x5308 <prvAddCurrentTaskToDelayedList>
}
    4448:	0f 90       	pop	r0
    444a:	0f 90       	pop	r0
    444c:	0f 90       	pop	r0
    444e:	0f 90       	pop	r0
    4450:	cf 91       	pop	r28
    4452:	df 91       	pop	r29
    4454:	08 95       	ret

00004456 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    4456:	df 93       	push	r29
    4458:	cf 93       	push	r28
    445a:	00 d0       	rcall	.+0      	; 0x445c <vTaskPlaceOnUnorderedEventList+0x6>
    445c:	00 d0       	rcall	.+0      	; 0x445e <vTaskPlaceOnUnorderedEventList+0x8>
    445e:	00 d0       	rcall	.+0      	; 0x4460 <vTaskPlaceOnUnorderedEventList+0xa>
    4460:	cd b7       	in	r28, 0x3d	; 61
    4462:	de b7       	in	r29, 0x3e	; 62
    4464:	9a 83       	std	Y+2, r25	; 0x02
    4466:	89 83       	std	Y+1, r24	; 0x01
    4468:	7c 83       	std	Y+4, r23	; 0x04
    446a:	6b 83       	std	Y+3, r22	; 0x03
    446c:	5e 83       	std	Y+6, r21	; 0x06
    446e:	4d 83       	std	Y+5, r20	; 0x05
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    4470:	e0 91 9f 03 	lds	r30, 0x039F
    4474:	f0 91 a0 03 	lds	r31, 0x03A0
    4478:	8b 81       	ldd	r24, Y+3	; 0x03
    447a:	9c 81       	ldd	r25, Y+4	; 0x04
    447c:	90 68       	ori	r25, 0x80	; 128
    447e:	95 87       	std	Z+13, r25	; 0x0d
    4480:	84 87       	std	Z+12, r24	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    4482:	80 91 9f 03 	lds	r24, 0x039F
    4486:	90 91 a0 03 	lds	r25, 0x03A0
    448a:	9c 01       	movw	r18, r24
    448c:	24 5f       	subi	r18, 0xF4	; 244
    448e:	3f 4f       	sbci	r19, 0xFF	; 255
    4490:	89 81       	ldd	r24, Y+1	; 0x01
    4492:	9a 81       	ldd	r25, Y+2	; 0x02
    4494:	b9 01       	movw	r22, r18
    4496:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    449a:	8d 81       	ldd	r24, Y+5	; 0x05
    449c:	9e 81       	ldd	r25, Y+6	; 0x06
    449e:	61 e0       	ldi	r22, 0x01	; 1
    44a0:	0e 94 84 29 	call	0x5308	; 0x5308 <prvAddCurrentTaskToDelayedList>
}
    44a4:	26 96       	adiw	r28, 0x06	; 6
    44a6:	0f b6       	in	r0, 0x3f	; 63
    44a8:	f8 94       	cli
    44aa:	de bf       	out	0x3e, r29	; 62
    44ac:	0f be       	out	0x3f, r0	; 63
    44ae:	cd bf       	out	0x3d, r28	; 61
    44b0:	cf 91       	pop	r28
    44b2:	df 91       	pop	r29
    44b4:	08 95       	ret

000044b6 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    44b6:	df 93       	push	r29
    44b8:	cf 93       	push	r28
    44ba:	00 d0       	rcall	.+0      	; 0x44bc <xTaskRemoveFromEventList+0x6>
    44bc:	00 d0       	rcall	.+0      	; 0x44be <xTaskRemoveFromEventList+0x8>
    44be:	0f 92       	push	r0
    44c0:	cd b7       	in	r28, 0x3d	; 61
    44c2:	de b7       	in	r29, 0x3e	; 62
    44c4:	9d 83       	std	Y+5, r25	; 0x05
    44c6:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    44c8:	ec 81       	ldd	r30, Y+4	; 0x04
    44ca:	fd 81       	ldd	r31, Y+5	; 0x05
    44cc:	05 80       	ldd	r0, Z+5	; 0x05
    44ce:	f6 81       	ldd	r31, Z+6	; 0x06
    44d0:	e0 2d       	mov	r30, r0
    44d2:	86 81       	ldd	r24, Z+6	; 0x06
    44d4:	97 81       	ldd	r25, Z+7	; 0x07
    44d6:	9b 83       	std	Y+3, r25	; 0x03
    44d8:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    44da:	8a 81       	ldd	r24, Y+2	; 0x02
    44dc:	9b 81       	ldd	r25, Y+3	; 0x03
    44de:	0c 96       	adiw	r24, 0x0c	; 12
    44e0:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    44e4:	80 91 af 03 	lds	r24, 0x03AF
    44e8:	88 23       	and	r24, r24
    44ea:	61 f5       	brne	.+88     	; 0x4544 <xTaskRemoveFromEventList+0x8e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    44ec:	8a 81       	ldd	r24, Y+2	; 0x02
    44ee:	9b 81       	ldd	r25, Y+3	; 0x03
    44f0:	02 96       	adiw	r24, 0x02	; 2
    44f2:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    44f6:	ea 81       	ldd	r30, Y+2	; 0x02
    44f8:	fb 81       	ldd	r31, Y+3	; 0x03
    44fa:	96 89       	ldd	r25, Z+22	; 0x16
    44fc:	80 91 a5 03 	lds	r24, 0x03A5
    4500:	89 17       	cp	r24, r25
    4502:	28 f4       	brcc	.+10     	; 0x450e <xTaskRemoveFromEventList+0x58>
    4504:	ea 81       	ldd	r30, Y+2	; 0x02
    4506:	fb 81       	ldd	r31, Y+3	; 0x03
    4508:	86 89       	ldd	r24, Z+22	; 0x16
    450a:	80 93 a5 03 	sts	0x03A5, r24
    450e:	ea 81       	ldd	r30, Y+2	; 0x02
    4510:	fb 81       	ldd	r31, Y+3	; 0x03
    4512:	86 89       	ldd	r24, Z+22	; 0x16
    4514:	28 2f       	mov	r18, r24
    4516:	30 e0       	ldi	r19, 0x00	; 0
    4518:	c9 01       	movw	r24, r18
    451a:	88 0f       	add	r24, r24
    451c:	99 1f       	adc	r25, r25
    451e:	88 0f       	add	r24, r24
    4520:	99 1f       	adc	r25, r25
    4522:	88 0f       	add	r24, r24
    4524:	99 1f       	adc	r25, r25
    4526:	82 0f       	add	r24, r18
    4528:	93 1f       	adc	r25, r19
    452a:	ac 01       	movw	r20, r24
    452c:	40 55       	subi	r20, 0x50	; 80
    452e:	5c 4f       	sbci	r21, 0xFC	; 252
    4530:	8a 81       	ldd	r24, Y+2	; 0x02
    4532:	9b 81       	ldd	r25, Y+3	; 0x03
    4534:	9c 01       	movw	r18, r24
    4536:	2e 5f       	subi	r18, 0xFE	; 254
    4538:	3f 4f       	sbci	r19, 0xFF	; 255
    453a:	ca 01       	movw	r24, r20
    453c:	b9 01       	movw	r22, r18
    453e:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <vListInsertEnd>
    4542:	0a c0       	rjmp	.+20     	; 0x4558 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    4544:	8a 81       	ldd	r24, Y+2	; 0x02
    4546:	9b 81       	ldd	r25, Y+3	; 0x03
    4548:	9c 01       	movw	r18, r24
    454a:	24 5f       	subi	r18, 0xF4	; 244
    454c:	3f 4f       	sbci	r19, 0xFF	; 255
    454e:	83 ef       	ldi	r24, 0xF3	; 243
    4550:	93 e0       	ldi	r25, 0x03	; 3
    4552:	b9 01       	movw	r22, r18
    4554:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    4558:	ea 81       	ldd	r30, Y+2	; 0x02
    455a:	fb 81       	ldd	r31, Y+3	; 0x03
    455c:	96 89       	ldd	r25, Z+22	; 0x16
    455e:	e0 91 9f 03 	lds	r30, 0x039F
    4562:	f0 91 a0 03 	lds	r31, 0x03A0
    4566:	86 89       	ldd	r24, Z+22	; 0x16
    4568:	89 17       	cp	r24, r25
    456a:	30 f4       	brcc	.+12     	; 0x4578 <xTaskRemoveFromEventList+0xc2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    456c:	81 e0       	ldi	r24, 0x01	; 1
    456e:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    4570:	81 e0       	ldi	r24, 0x01	; 1
    4572:	80 93 a8 03 	sts	0x03A8, r24
    4576:	01 c0       	rjmp	.+2      	; 0x457a <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		xReturn = pdFALSE;
    4578:	19 82       	std	Y+1, r1	; 0x01
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    457a:	89 81       	ldd	r24, Y+1	; 0x01
}
    457c:	0f 90       	pop	r0
    457e:	0f 90       	pop	r0
    4580:	0f 90       	pop	r0
    4582:	0f 90       	pop	r0
    4584:	0f 90       	pop	r0
    4586:	cf 91       	pop	r28
    4588:	df 91       	pop	r29
    458a:	08 95       	ret

0000458c <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    458c:	df 93       	push	r29
    458e:	cf 93       	push	r28
    4590:	cd b7       	in	r28, 0x3d	; 61
    4592:	de b7       	in	r29, 0x3e	; 62
    4594:	27 97       	sbiw	r28, 0x07	; 7
    4596:	0f b6       	in	r0, 0x3f	; 63
    4598:	f8 94       	cli
    459a:	de bf       	out	0x3e, r29	; 62
    459c:	0f be       	out	0x3f, r0	; 63
    459e:	cd bf       	out	0x3d, r28	; 61
    45a0:	9d 83       	std	Y+5, r25	; 0x05
    45a2:	8c 83       	std	Y+4, r24	; 0x04
    45a4:	7f 83       	std	Y+7, r23	; 0x07
    45a6:	6e 83       	std	Y+6, r22	; 0x06
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    45a8:	8e 81       	ldd	r24, Y+6	; 0x06
    45aa:	9f 81       	ldd	r25, Y+7	; 0x07
    45ac:	90 68       	ori	r25, 0x80	; 128
    45ae:	ec 81       	ldd	r30, Y+4	; 0x04
    45b0:	fd 81       	ldd	r31, Y+5	; 0x05
    45b2:	91 83       	std	Z+1, r25	; 0x01
    45b4:	80 83       	st	Z, r24

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    45b6:	ec 81       	ldd	r30, Y+4	; 0x04
    45b8:	fd 81       	ldd	r31, Y+5	; 0x05
    45ba:	86 81       	ldd	r24, Z+6	; 0x06
    45bc:	97 81       	ldd	r25, Z+7	; 0x07
    45be:	9b 83       	std	Y+3, r25	; 0x03
    45c0:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    45c2:	8c 81       	ldd	r24, Y+4	; 0x04
    45c4:	9d 81       	ldd	r25, Y+5	; 0x05
    45c6:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    45ca:	8a 81       	ldd	r24, Y+2	; 0x02
    45cc:	9b 81       	ldd	r25, Y+3	; 0x03
    45ce:	02 96       	adiw	r24, 0x02	; 2
    45d0:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    45d4:	ea 81       	ldd	r30, Y+2	; 0x02
    45d6:	fb 81       	ldd	r31, Y+3	; 0x03
    45d8:	96 89       	ldd	r25, Z+22	; 0x16
    45da:	80 91 a5 03 	lds	r24, 0x03A5
    45de:	89 17       	cp	r24, r25
    45e0:	28 f4       	brcc	.+10     	; 0x45ec <xTaskRemoveFromUnorderedEventList+0x60>
    45e2:	ea 81       	ldd	r30, Y+2	; 0x02
    45e4:	fb 81       	ldd	r31, Y+3	; 0x03
    45e6:	86 89       	ldd	r24, Z+22	; 0x16
    45e8:	80 93 a5 03 	sts	0x03A5, r24
    45ec:	ea 81       	ldd	r30, Y+2	; 0x02
    45ee:	fb 81       	ldd	r31, Y+3	; 0x03
    45f0:	86 89       	ldd	r24, Z+22	; 0x16
    45f2:	28 2f       	mov	r18, r24
    45f4:	30 e0       	ldi	r19, 0x00	; 0
    45f6:	c9 01       	movw	r24, r18
    45f8:	88 0f       	add	r24, r24
    45fa:	99 1f       	adc	r25, r25
    45fc:	88 0f       	add	r24, r24
    45fe:	99 1f       	adc	r25, r25
    4600:	88 0f       	add	r24, r24
    4602:	99 1f       	adc	r25, r25
    4604:	82 0f       	add	r24, r18
    4606:	93 1f       	adc	r25, r19
    4608:	ac 01       	movw	r20, r24
    460a:	40 55       	subi	r20, 0x50	; 80
    460c:	5c 4f       	sbci	r21, 0xFC	; 252
    460e:	8a 81       	ldd	r24, Y+2	; 0x02
    4610:	9b 81       	ldd	r25, Y+3	; 0x03
    4612:	9c 01       	movw	r18, r24
    4614:	2e 5f       	subi	r18, 0xFE	; 254
    4616:	3f 4f       	sbci	r19, 0xFF	; 255
    4618:	ca 01       	movw	r24, r20
    461a:	b9 01       	movw	r22, r18
    461c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    4620:	ea 81       	ldd	r30, Y+2	; 0x02
    4622:	fb 81       	ldd	r31, Y+3	; 0x03
    4624:	96 89       	ldd	r25, Z+22	; 0x16
    4626:	e0 91 9f 03 	lds	r30, 0x039F
    462a:	f0 91 a0 03 	lds	r31, 0x03A0
    462e:	86 89       	ldd	r24, Z+22	; 0x16
    4630:	89 17       	cp	r24, r25
    4632:	30 f4       	brcc	.+12     	; 0x4640 <xTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    4634:	81 e0       	ldi	r24, 0x01	; 1
    4636:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    4638:	81 e0       	ldi	r24, 0x01	; 1
    463a:	80 93 a8 03 	sts	0x03A8, r24
    463e:	01 c0       	rjmp	.+2      	; 0x4642 <xTaskRemoveFromUnorderedEventList+0xb6>
	}
	else
	{
		xReturn = pdFALSE;
    4640:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    4642:	89 81       	ldd	r24, Y+1	; 0x01
}
    4644:	27 96       	adiw	r28, 0x07	; 7
    4646:	0f b6       	in	r0, 0x3f	; 63
    4648:	f8 94       	cli
    464a:	de bf       	out	0x3e, r29	; 62
    464c:	0f be       	out	0x3f, r0	; 63
    464e:	cd bf       	out	0x3d, r28	; 61
    4650:	cf 91       	pop	r28
    4652:	df 91       	pop	r29
    4654:	08 95       	ret

00004656 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    4656:	df 93       	push	r29
    4658:	cf 93       	push	r28
    465a:	00 d0       	rcall	.+0      	; 0x465c <vTaskSetTimeOutState+0x6>
    465c:	cd b7       	in	r28, 0x3d	; 61
    465e:	de b7       	in	r29, 0x3e	; 62
    4660:	9a 83       	std	Y+2, r25	; 0x02
    4662:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4664:	80 91 a9 03 	lds	r24, 0x03A9
    4668:	e9 81       	ldd	r30, Y+1	; 0x01
    466a:	fa 81       	ldd	r31, Y+2	; 0x02
    466c:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    466e:	80 91 a3 03 	lds	r24, 0x03A3
    4672:	90 91 a4 03 	lds	r25, 0x03A4
    4676:	e9 81       	ldd	r30, Y+1	; 0x01
    4678:	fa 81       	ldd	r31, Y+2	; 0x02
    467a:	92 83       	std	Z+2, r25	; 0x02
    467c:	81 83       	std	Z+1, r24	; 0x01
}
    467e:	0f 90       	pop	r0
    4680:	0f 90       	pop	r0
    4682:	cf 91       	pop	r28
    4684:	df 91       	pop	r29
    4686:	08 95       	ret

00004688 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    4688:	df 93       	push	r29
    468a:	cf 93       	push	r28
    468c:	cd b7       	in	r28, 0x3d	; 61
    468e:	de b7       	in	r29, 0x3e	; 62
    4690:	27 97       	sbiw	r28, 0x07	; 7
    4692:	0f b6       	in	r0, 0x3f	; 63
    4694:	f8 94       	cli
    4696:	de bf       	out	0x3e, r29	; 62
    4698:	0f be       	out	0x3f, r0	; 63
    469a:	cd bf       	out	0x3d, r28	; 61
    469c:	9d 83       	std	Y+5, r25	; 0x05
    469e:	8c 83       	std	Y+4, r24	; 0x04
    46a0:	7f 83       	std	Y+7, r23	; 0x07
    46a2:	6e 83       	std	Y+6, r22	; 0x06
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    46a4:	0f b6       	in	r0, 0x3f	; 63
    46a6:	f8 94       	cli
    46a8:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    46aa:	80 91 a3 03 	lds	r24, 0x03A3
    46ae:	90 91 a4 03 	lds	r25, 0x03A4
    46b2:	9a 83       	std	Y+2, r25	; 0x02
    46b4:	89 83       	std	Y+1, r24	; 0x01
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    46b6:	ee 81       	ldd	r30, Y+6	; 0x06
    46b8:	ff 81       	ldd	r31, Y+7	; 0x07
    46ba:	80 81       	ld	r24, Z
    46bc:	91 81       	ldd	r25, Z+1	; 0x01
    46be:	2f ef       	ldi	r18, 0xFF	; 255
    46c0:	8f 3f       	cpi	r24, 0xFF	; 255
    46c2:	92 07       	cpc	r25, r18
    46c4:	11 f4       	brne	.+4      	; 0x46ca <xTaskCheckForTimeOut+0x42>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    46c6:	1b 82       	std	Y+3, r1	; 0x03
    46c8:	40 c0       	rjmp	.+128    	; 0x474a <xTaskCheckForTimeOut+0xc2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    46ca:	ec 81       	ldd	r30, Y+4	; 0x04
    46cc:	fd 81       	ldd	r31, Y+5	; 0x05
    46ce:	90 81       	ld	r25, Z
    46d0:	80 91 a9 03 	lds	r24, 0x03A9
    46d4:	98 17       	cp	r25, r24
    46d6:	61 f0       	breq	.+24     	; 0x46f0 <xTaskCheckForTimeOut+0x68>
    46d8:	ec 81       	ldd	r30, Y+4	; 0x04
    46da:	fd 81       	ldd	r31, Y+5	; 0x05
    46dc:	21 81       	ldd	r18, Z+1	; 0x01
    46de:	32 81       	ldd	r19, Z+2	; 0x02
    46e0:	89 81       	ldd	r24, Y+1	; 0x01
    46e2:	9a 81       	ldd	r25, Y+2	; 0x02
    46e4:	82 17       	cp	r24, r18
    46e6:	93 07       	cpc	r25, r19
    46e8:	18 f0       	brcs	.+6      	; 0x46f0 <xTaskCheckForTimeOut+0x68>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    46ea:	81 e0       	ldi	r24, 0x01	; 1
    46ec:	8b 83       	std	Y+3, r24	; 0x03
    46ee:	2d c0       	rjmp	.+90     	; 0x474a <xTaskCheckForTimeOut+0xc2>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    46f0:	ec 81       	ldd	r30, Y+4	; 0x04
    46f2:	fd 81       	ldd	r31, Y+5	; 0x05
    46f4:	21 81       	ldd	r18, Z+1	; 0x01
    46f6:	32 81       	ldd	r19, Z+2	; 0x02
    46f8:	89 81       	ldd	r24, Y+1	; 0x01
    46fa:	9a 81       	ldd	r25, Y+2	; 0x02
    46fc:	ac 01       	movw	r20, r24
    46fe:	42 1b       	sub	r20, r18
    4700:	53 0b       	sbc	r21, r19
    4702:	9a 01       	movw	r18, r20
    4704:	ee 81       	ldd	r30, Y+6	; 0x06
    4706:	ff 81       	ldd	r31, Y+7	; 0x07
    4708:	80 81       	ld	r24, Z
    470a:	91 81       	ldd	r25, Z+1	; 0x01
    470c:	28 17       	cp	r18, r24
    470e:	39 07       	cpc	r19, r25
    4710:	d0 f4       	brcc	.+52     	; 0x4746 <xTaskCheckForTimeOut+0xbe>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    4712:	ee 81       	ldd	r30, Y+6	; 0x06
    4714:	ff 81       	ldd	r31, Y+7	; 0x07
    4716:	40 81       	ld	r20, Z
    4718:	51 81       	ldd	r21, Z+1	; 0x01
    471a:	ec 81       	ldd	r30, Y+4	; 0x04
    471c:	fd 81       	ldd	r31, Y+5	; 0x05
    471e:	21 81       	ldd	r18, Z+1	; 0x01
    4720:	32 81       	ldd	r19, Z+2	; 0x02
    4722:	89 81       	ldd	r24, Y+1	; 0x01
    4724:	9a 81       	ldd	r25, Y+2	; 0x02
    4726:	b9 01       	movw	r22, r18
    4728:	68 1b       	sub	r22, r24
    472a:	79 0b       	sbc	r23, r25
    472c:	cb 01       	movw	r24, r22
    472e:	84 0f       	add	r24, r20
    4730:	95 1f       	adc	r25, r21
    4732:	ee 81       	ldd	r30, Y+6	; 0x06
    4734:	ff 81       	ldd	r31, Y+7	; 0x07
    4736:	91 83       	std	Z+1, r25	; 0x01
    4738:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    473a:	8c 81       	ldd	r24, Y+4	; 0x04
    473c:	9d 81       	ldd	r25, Y+5	; 0x05
    473e:	0e 94 2b 23 	call	0x4656	; 0x4656 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    4742:	1b 82       	std	Y+3, r1	; 0x03
    4744:	02 c0       	rjmp	.+4      	; 0x474a <xTaskCheckForTimeOut+0xc2>
		}
		else
		{
			xReturn = pdTRUE;
    4746:	81 e0       	ldi	r24, 0x01	; 1
    4748:	8b 83       	std	Y+3, r24	; 0x03
		}
	}
	taskEXIT_CRITICAL();
    474a:	0f 90       	pop	r0
    474c:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    474e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4750:	27 96       	adiw	r28, 0x07	; 7
    4752:	0f b6       	in	r0, 0x3f	; 63
    4754:	f8 94       	cli
    4756:	de bf       	out	0x3e, r29	; 62
    4758:	0f be       	out	0x3f, r0	; 63
    475a:	cd bf       	out	0x3d, r28	; 61
    475c:	cf 91       	pop	r28
    475e:	df 91       	pop	r29
    4760:	08 95       	ret

00004762 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    4762:	df 93       	push	r29
    4764:	cf 93       	push	r28
    4766:	cd b7       	in	r28, 0x3d	; 61
    4768:	de b7       	in	r29, 0x3e	; 62
	xYieldPending = pdTRUE;
    476a:	81 e0       	ldi	r24, 0x01	; 1
    476c:	80 93 a8 03 	sts	0x03A8, r24
}
    4770:	cf 91       	pop	r28
    4772:	df 91       	pop	r29
    4774:	08 95       	ret

00004776 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    4776:	df 93       	push	r29
    4778:	cf 93       	push	r28
    477a:	00 d0       	rcall	.+0      	; 0x477c <prvIdleTask+0x6>
    477c:	cd b7       	in	r28, 0x3d	; 61
    477e:	de b7       	in	r29, 0x3e	; 62
    4780:	9a 83       	std	Y+2, r25	; 0x02
    4782:	89 83       	std	Y+1, r24	; 0x01

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    4784:	0e 94 0c 24 	call	0x4818	; 0x4818 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    4788:	80 91 b0 03 	lds	r24, 0x03B0
    478c:	82 30       	cpi	r24, 0x02	; 2
    478e:	d0 f3       	brcs	.-12     	; 0x4784 <prvIdleTask+0xe>
			{
				taskYIELD();
    4790:	0e 94 2e 12 	call	0x245c	; 0x245c <vPortYield>
    4794:	f7 cf       	rjmp	.-18     	; 0x4784 <prvIdleTask+0xe>

00004796 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    4796:	df 93       	push	r29
    4798:	cf 93       	push	r28
    479a:	0f 92       	push	r0
    479c:	cd b7       	in	r28, 0x3d	; 61
    479e:	de b7       	in	r29, 0x3e	; 62
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    47a0:	19 82       	std	Y+1, r1	; 0x01
    47a2:	13 c0       	rjmp	.+38     	; 0x47ca <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    47a4:	89 81       	ldd	r24, Y+1	; 0x01
    47a6:	28 2f       	mov	r18, r24
    47a8:	30 e0       	ldi	r19, 0x00	; 0
    47aa:	c9 01       	movw	r24, r18
    47ac:	88 0f       	add	r24, r24
    47ae:	99 1f       	adc	r25, r25
    47b0:	88 0f       	add	r24, r24
    47b2:	99 1f       	adc	r25, r25
    47b4:	88 0f       	add	r24, r24
    47b6:	99 1f       	adc	r25, r25
    47b8:	82 0f       	add	r24, r18
    47ba:	93 1f       	adc	r25, r19
    47bc:	80 55       	subi	r24, 0x50	; 80
    47be:	9c 4f       	sbci	r25, 0xFC	; 252
    47c0:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    47c4:	89 81       	ldd	r24, Y+1	; 0x01
    47c6:	8f 5f       	subi	r24, 0xFF	; 255
    47c8:	89 83       	std	Y+1, r24	; 0x01
    47ca:	89 81       	ldd	r24, Y+1	; 0x01
    47cc:	85 30       	cpi	r24, 0x05	; 5
    47ce:	50 f3       	brcs	.-44     	; 0x47a4 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    47d0:	8d ed       	ldi	r24, 0xDD	; 221
    47d2:	93 e0       	ldi	r25, 0x03	; 3
    47d4:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    47d8:	86 ee       	ldi	r24, 0xE6	; 230
    47da:	93 e0       	ldi	r25, 0x03	; 3
    47dc:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    47e0:	83 ef       	ldi	r24, 0xF3	; 243
    47e2:	93 e0       	ldi	r25, 0x03	; 3
    47e4:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    47e8:	8c ef       	ldi	r24, 0xFC	; 252
    47ea:	93 e0       	ldi	r25, 0x03	; 3
    47ec:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    47f0:	85 e0       	ldi	r24, 0x05	; 5
    47f2:	94 e0       	ldi	r25, 0x04	; 4
    47f4:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    47f8:	8d ed       	ldi	r24, 0xDD	; 221
    47fa:	93 e0       	ldi	r25, 0x03	; 3
    47fc:	90 93 f0 03 	sts	0x03F0, r25
    4800:	80 93 ef 03 	sts	0x03EF, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    4804:	86 ee       	ldi	r24, 0xE6	; 230
    4806:	93 e0       	ldi	r25, 0x03	; 3
    4808:	90 93 f2 03 	sts	0x03F2, r25
    480c:	80 93 f1 03 	sts	0x03F1, r24
}
    4810:	0f 90       	pop	r0
    4812:	cf 91       	pop	r28
    4814:	df 91       	pop	r29
    4816:	08 95       	ret

00004818 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    4818:	df 93       	push	r29
    481a:	cf 93       	push	r28
    481c:	00 d0       	rcall	.+0      	; 0x481e <prvCheckTasksWaitingTermination+0x6>
    481e:	0f 92       	push	r0
    4820:	cd b7       	in	r28, 0x3d	; 61
    4822:	de b7       	in	r29, 0x3e	; 62
    4824:	2e c0       	rjmp	.+92     	; 0x4882 <prvCheckTasksWaitingTermination+0x6a>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    4826:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    482a:	80 91 fc 03 	lds	r24, 0x03FC
    482e:	1b 82       	std	Y+3, r1	; 0x03
    4830:	88 23       	and	r24, r24
    4832:	11 f4       	brne	.+4      	; 0x4838 <prvCheckTasksWaitingTermination+0x20>
    4834:	81 e0       	ldi	r24, 0x01	; 1
    4836:	8b 83       	std	Y+3, r24	; 0x03
			}
			( void ) xTaskResumeAll();
    4838:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    483c:	8b 81       	ldd	r24, Y+3	; 0x03
    483e:	88 23       	and	r24, r24
    4840:	01 f5       	brne	.+64     	; 0x4882 <prvCheckTasksWaitingTermination+0x6a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    4842:	0f b6       	in	r0, 0x3f	; 63
    4844:	f8 94       	cli
    4846:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    4848:	e0 91 01 04 	lds	r30, 0x0401
    484c:	f0 91 02 04 	lds	r31, 0x0402
    4850:	86 81       	ldd	r24, Z+6	; 0x06
    4852:	97 81       	ldd	r25, Z+7	; 0x07
    4854:	9a 83       	std	Y+2, r25	; 0x02
    4856:	89 83       	std	Y+1, r24	; 0x01
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4858:	89 81       	ldd	r24, Y+1	; 0x01
    485a:	9a 81       	ldd	r25, Y+2	; 0x02
    485c:	02 96       	adiw	r24, 0x02	; 2
    485e:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>
					--uxCurrentNumberOfTasks;
    4862:	80 91 a2 03 	lds	r24, 0x03A2
    4866:	81 50       	subi	r24, 0x01	; 1
    4868:	80 93 a2 03 	sts	0x03A2, r24
					--uxDeletedTasksWaitingCleanUp;
    486c:	80 91 a1 03 	lds	r24, 0x03A1
    4870:	81 50       	subi	r24, 0x01	; 1
    4872:	80 93 a1 03 	sts	0x03A1, r24
				}
				taskEXIT_CRITICAL();
    4876:	0f 90       	pop	r0
    4878:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    487a:	89 81       	ldd	r24, Y+1	; 0x01
    487c:	9a 81       	ldd	r25, Y+2	; 0x02
    487e:	0e 94 4b 24 	call	0x4896	; 0x4896 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    4882:	80 91 a1 03 	lds	r24, 0x03A1
    4886:	88 23       	and	r24, r24
    4888:	71 f6       	brne	.-100    	; 0x4826 <prvCheckTasksWaitingTermination+0xe>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    488a:	0f 90       	pop	r0
    488c:	0f 90       	pop	r0
    488e:	0f 90       	pop	r0
    4890:	cf 91       	pop	r28
    4892:	df 91       	pop	r29
    4894:	08 95       	ret

00004896 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    4896:	df 93       	push	r29
    4898:	cf 93       	push	r28
    489a:	00 d0       	rcall	.+0      	; 0x489c <prvDeleteTCB+0x6>
    489c:	cd b7       	in	r28, 0x3d	; 61
    489e:	de b7       	in	r29, 0x3e	; 62
    48a0:	9a 83       	std	Y+2, r25	; 0x02
    48a2:	89 83       	std	Y+1, r24	; 0x01

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    48a4:	e9 81       	ldd	r30, Y+1	; 0x01
    48a6:	fa 81       	ldd	r31, Y+2	; 0x02
    48a8:	87 89       	ldd	r24, Z+23	; 0x17
    48aa:	90 8d       	ldd	r25, Z+24	; 0x18
    48ac:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <vPortFree>
			vPortFree( pxTCB );
    48b0:	89 81       	ldd	r24, Y+1	; 0x01
    48b2:	9a 81       	ldd	r25, Y+2	; 0x02
    48b4:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    48b8:	0f 90       	pop	r0
    48ba:	0f 90       	pop	r0
    48bc:	cf 91       	pop	r28
    48be:	df 91       	pop	r29
    48c0:	08 95       	ret

000048c2 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    48c2:	df 93       	push	r29
    48c4:	cf 93       	push	r28
    48c6:	00 d0       	rcall	.+0      	; 0x48c8 <prvResetNextTaskUnblockTime+0x6>
    48c8:	cd b7       	in	r28, 0x3d	; 61
    48ca:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    48cc:	e0 91 ef 03 	lds	r30, 0x03EF
    48d0:	f0 91 f0 03 	lds	r31, 0x03F0
    48d4:	80 81       	ld	r24, Z
    48d6:	88 23       	and	r24, r24
    48d8:	39 f4       	brne	.+14     	; 0x48e8 <prvResetNextTaskUnblockTime+0x26>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    48da:	8f ef       	ldi	r24, 0xFF	; 255
    48dc:	9f ef       	ldi	r25, 0xFF	; 255
    48de:	90 93 ac 03 	sts	0x03AC, r25
    48e2:	80 93 ab 03 	sts	0x03AB, r24
    48e6:	13 c0       	rjmp	.+38     	; 0x490e <prvResetNextTaskUnblockTime+0x4c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    48e8:	e0 91 ef 03 	lds	r30, 0x03EF
    48ec:	f0 91 f0 03 	lds	r31, 0x03F0
    48f0:	05 80       	ldd	r0, Z+5	; 0x05
    48f2:	f6 81       	ldd	r31, Z+6	; 0x06
    48f4:	e0 2d       	mov	r30, r0
    48f6:	86 81       	ldd	r24, Z+6	; 0x06
    48f8:	97 81       	ldd	r25, Z+7	; 0x07
    48fa:	9a 83       	std	Y+2, r25	; 0x02
    48fc:	89 83       	std	Y+1, r24	; 0x01
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    48fe:	e9 81       	ldd	r30, Y+1	; 0x01
    4900:	fa 81       	ldd	r31, Y+2	; 0x02
    4902:	82 81       	ldd	r24, Z+2	; 0x02
    4904:	93 81       	ldd	r25, Z+3	; 0x03
    4906:	90 93 ac 03 	sts	0x03AC, r25
    490a:	80 93 ab 03 	sts	0x03AB, r24
	}
}
    490e:	0f 90       	pop	r0
    4910:	0f 90       	pop	r0
    4912:	cf 91       	pop	r28
    4914:	df 91       	pop	r29
    4916:	08 95       	ret

00004918 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    4918:	df 93       	push	r29
    491a:	cf 93       	push	r28
    491c:	00 d0       	rcall	.+0      	; 0x491e <xTaskGetCurrentTaskHandle+0x6>
    491e:	cd b7       	in	r28, 0x3d	; 61
    4920:	de b7       	in	r29, 0x3e	; 62
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    4922:	80 91 9f 03 	lds	r24, 0x039F
    4926:	90 91 a0 03 	lds	r25, 0x03A0
    492a:	9a 83       	std	Y+2, r25	; 0x02
    492c:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
    492e:	89 81       	ldd	r24, Y+1	; 0x01
    4930:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    4932:	0f 90       	pop	r0
    4934:	0f 90       	pop	r0
    4936:	cf 91       	pop	r28
    4938:	df 91       	pop	r29
    493a:	08 95       	ret

0000493c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    493c:	df 93       	push	r29
    493e:	cf 93       	push	r28
    4940:	00 d0       	rcall	.+0      	; 0x4942 <vTaskPriorityInherit+0x6>
    4942:	00 d0       	rcall	.+0      	; 0x4944 <vTaskPriorityInherit+0x8>
    4944:	cd b7       	in	r28, 0x3d	; 61
    4946:	de b7       	in	r29, 0x3e	; 62
    4948:	9c 83       	std	Y+4, r25	; 0x04
    494a:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    494c:	8b 81       	ldd	r24, Y+3	; 0x03
    494e:	9c 81       	ldd	r25, Y+4	; 0x04
    4950:	9a 83       	std	Y+2, r25	; 0x02
    4952:	89 83       	std	Y+1, r24	; 0x01

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    4954:	8b 81       	ldd	r24, Y+3	; 0x03
    4956:	9c 81       	ldd	r25, Y+4	; 0x04
    4958:	00 97       	sbiw	r24, 0x00	; 0
    495a:	09 f4       	brne	.+2      	; 0x495e <vTaskPriorityInherit+0x22>
    495c:	73 c0       	rjmp	.+230    	; 0x4a44 <vTaskPriorityInherit+0x108>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    495e:	e9 81       	ldd	r30, Y+1	; 0x01
    4960:	fa 81       	ldd	r31, Y+2	; 0x02
    4962:	96 89       	ldd	r25, Z+22	; 0x16
    4964:	e0 91 9f 03 	lds	r30, 0x039F
    4968:	f0 91 a0 03 	lds	r31, 0x03A0
    496c:	86 89       	ldd	r24, Z+22	; 0x16
    496e:	98 17       	cp	r25, r24
    4970:	08 f0       	brcs	.+2      	; 0x4974 <vTaskPriorityInherit+0x38>
    4972:	68 c0       	rjmp	.+208    	; 0x4a44 <vTaskPriorityInherit+0x108>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    4974:	e9 81       	ldd	r30, Y+1	; 0x01
    4976:	fa 81       	ldd	r31, Y+2	; 0x02
    4978:	84 85       	ldd	r24, Z+12	; 0x0c
    497a:	95 85       	ldd	r25, Z+13	; 0x0d
    497c:	99 23       	and	r25, r25
    497e:	7c f0       	brlt	.+30     	; 0x499e <vTaskPriorityInherit+0x62>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4980:	e0 91 9f 03 	lds	r30, 0x039F
    4984:	f0 91 a0 03 	lds	r31, 0x03A0
    4988:	86 89       	ldd	r24, Z+22	; 0x16
    498a:	28 2f       	mov	r18, r24
    498c:	30 e0       	ldi	r19, 0x00	; 0
    498e:	85 e0       	ldi	r24, 0x05	; 5
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	82 1b       	sub	r24, r18
    4994:	93 0b       	sbc	r25, r19
    4996:	e9 81       	ldd	r30, Y+1	; 0x01
    4998:	fa 81       	ldd	r31, Y+2	; 0x02
    499a:	95 87       	std	Z+13, r25	; 0x0d
    499c:	84 87       	std	Z+12, r24	; 0x0c
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    499e:	e9 81       	ldd	r30, Y+1	; 0x01
    49a0:	fa 81       	ldd	r31, Y+2	; 0x02
    49a2:	42 85       	ldd	r20, Z+10	; 0x0a
    49a4:	53 85       	ldd	r21, Z+11	; 0x0b
    49a6:	e9 81       	ldd	r30, Y+1	; 0x01
    49a8:	fa 81       	ldd	r31, Y+2	; 0x02
    49aa:	86 89       	ldd	r24, Z+22	; 0x16
    49ac:	28 2f       	mov	r18, r24
    49ae:	30 e0       	ldi	r19, 0x00	; 0
    49b0:	c9 01       	movw	r24, r18
    49b2:	88 0f       	add	r24, r24
    49b4:	99 1f       	adc	r25, r25
    49b6:	88 0f       	add	r24, r24
    49b8:	99 1f       	adc	r25, r25
    49ba:	88 0f       	add	r24, r24
    49bc:	99 1f       	adc	r25, r25
    49be:	82 0f       	add	r24, r18
    49c0:	93 1f       	adc	r25, r19
    49c2:	80 55       	subi	r24, 0x50	; 80
    49c4:	9c 4f       	sbci	r25, 0xFC	; 252
    49c6:	48 17       	cp	r20, r24
    49c8:	59 07       	cpc	r21, r25
    49ca:	a1 f5       	brne	.+104    	; 0x4a34 <vTaskPriorityInherit+0xf8>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    49cc:	89 81       	ldd	r24, Y+1	; 0x01
    49ce:	9a 81       	ldd	r25, Y+2	; 0x02
    49d0:	02 96       	adiw	r24, 0x02	; 2
    49d2:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    49d6:	e0 91 9f 03 	lds	r30, 0x039F
    49da:	f0 91 a0 03 	lds	r31, 0x03A0
    49de:	86 89       	ldd	r24, Z+22	; 0x16
    49e0:	e9 81       	ldd	r30, Y+1	; 0x01
    49e2:	fa 81       	ldd	r31, Y+2	; 0x02
    49e4:	86 8b       	std	Z+22, r24	; 0x16
					prvAddTaskToReadyList( pxTCB );
    49e6:	e9 81       	ldd	r30, Y+1	; 0x01
    49e8:	fa 81       	ldd	r31, Y+2	; 0x02
    49ea:	96 89       	ldd	r25, Z+22	; 0x16
    49ec:	80 91 a5 03 	lds	r24, 0x03A5
    49f0:	89 17       	cp	r24, r25
    49f2:	28 f4       	brcc	.+10     	; 0x49fe <vTaskPriorityInherit+0xc2>
    49f4:	e9 81       	ldd	r30, Y+1	; 0x01
    49f6:	fa 81       	ldd	r31, Y+2	; 0x02
    49f8:	86 89       	ldd	r24, Z+22	; 0x16
    49fa:	80 93 a5 03 	sts	0x03A5, r24
    49fe:	e9 81       	ldd	r30, Y+1	; 0x01
    4a00:	fa 81       	ldd	r31, Y+2	; 0x02
    4a02:	86 89       	ldd	r24, Z+22	; 0x16
    4a04:	28 2f       	mov	r18, r24
    4a06:	30 e0       	ldi	r19, 0x00	; 0
    4a08:	c9 01       	movw	r24, r18
    4a0a:	88 0f       	add	r24, r24
    4a0c:	99 1f       	adc	r25, r25
    4a0e:	88 0f       	add	r24, r24
    4a10:	99 1f       	adc	r25, r25
    4a12:	88 0f       	add	r24, r24
    4a14:	99 1f       	adc	r25, r25
    4a16:	82 0f       	add	r24, r18
    4a18:	93 1f       	adc	r25, r19
    4a1a:	ac 01       	movw	r20, r24
    4a1c:	40 55       	subi	r20, 0x50	; 80
    4a1e:	5c 4f       	sbci	r21, 0xFC	; 252
    4a20:	89 81       	ldd	r24, Y+1	; 0x01
    4a22:	9a 81       	ldd	r25, Y+2	; 0x02
    4a24:	9c 01       	movw	r18, r24
    4a26:	2e 5f       	subi	r18, 0xFE	; 254
    4a28:	3f 4f       	sbci	r19, 0xFF	; 255
    4a2a:	ca 01       	movw	r24, r20
    4a2c:	b9 01       	movw	r22, r18
    4a2e:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <vListInsertEnd>
    4a32:	08 c0       	rjmp	.+16     	; 0x4a44 <vTaskPriorityInherit+0x108>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4a34:	e0 91 9f 03 	lds	r30, 0x039F
    4a38:	f0 91 a0 03 	lds	r31, 0x03A0
    4a3c:	86 89       	ldd	r24, Z+22	; 0x16
    4a3e:	e9 81       	ldd	r30, Y+1	; 0x01
    4a40:	fa 81       	ldd	r31, Y+2	; 0x02
    4a42:	86 8b       	std	Z+22, r24	; 0x16
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4a44:	0f 90       	pop	r0
    4a46:	0f 90       	pop	r0
    4a48:	0f 90       	pop	r0
    4a4a:	0f 90       	pop	r0
    4a4c:	cf 91       	pop	r28
    4a4e:	df 91       	pop	r29
    4a50:	08 95       	ret

00004a52 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    4a52:	df 93       	push	r29
    4a54:	cf 93       	push	r28
    4a56:	00 d0       	rcall	.+0      	; 0x4a58 <xTaskPriorityDisinherit+0x6>
    4a58:	00 d0       	rcall	.+0      	; 0x4a5a <xTaskPriorityDisinherit+0x8>
    4a5a:	0f 92       	push	r0
    4a5c:	cd b7       	in	r28, 0x3d	; 61
    4a5e:	de b7       	in	r29, 0x3e	; 62
    4a60:	9d 83       	std	Y+5, r25	; 0x05
    4a62:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    4a64:	8c 81       	ldd	r24, Y+4	; 0x04
    4a66:	9d 81       	ldd	r25, Y+5	; 0x05
    4a68:	9b 83       	std	Y+3, r25	; 0x03
    4a6a:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xReturn = pdFALSE;
    4a6c:	19 82       	std	Y+1, r1	; 0x01

		if( pxMutexHolder != NULL )
    4a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    4a70:	9d 81       	ldd	r25, Y+5	; 0x05
    4a72:	00 97       	sbiw	r24, 0x00	; 0
    4a74:	09 f4       	brne	.+2      	; 0x4a78 <xTaskPriorityDisinherit+0x26>
    4a76:	56 c0       	rjmp	.+172    	; 0x4b24 <xTaskPriorityDisinherit+0xd2>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    4a78:	ea 81       	ldd	r30, Y+2	; 0x02
    4a7a:	fb 81       	ldd	r31, Y+3	; 0x03
    4a7c:	84 a1       	ldd	r24, Z+36	; 0x24
    4a7e:	81 50       	subi	r24, 0x01	; 1
    4a80:	ea 81       	ldd	r30, Y+2	; 0x02
    4a82:	fb 81       	ldd	r31, Y+3	; 0x03
    4a84:	84 a3       	std	Z+36, r24	; 0x24

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    4a86:	ea 81       	ldd	r30, Y+2	; 0x02
    4a88:	fb 81       	ldd	r31, Y+3	; 0x03
    4a8a:	96 89       	ldd	r25, Z+22	; 0x16
    4a8c:	ea 81       	ldd	r30, Y+2	; 0x02
    4a8e:	fb 81       	ldd	r31, Y+3	; 0x03
    4a90:	83 a1       	ldd	r24, Z+35	; 0x23
    4a92:	98 17       	cp	r25, r24
    4a94:	09 f4       	brne	.+2      	; 0x4a98 <xTaskPriorityDisinherit+0x46>
    4a96:	46 c0       	rjmp	.+140    	; 0x4b24 <xTaskPriorityDisinherit+0xd2>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    4a98:	ea 81       	ldd	r30, Y+2	; 0x02
    4a9a:	fb 81       	ldd	r31, Y+3	; 0x03
    4a9c:	84 a1       	ldd	r24, Z+36	; 0x24
    4a9e:	88 23       	and	r24, r24
    4aa0:	09 f0       	breq	.+2      	; 0x4aa4 <xTaskPriorityDisinherit+0x52>
    4aa2:	40 c0       	rjmp	.+128    	; 0x4b24 <xTaskPriorityDisinherit+0xd2>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    4aa6:	9b 81       	ldd	r25, Y+3	; 0x03
    4aa8:	02 96       	adiw	r24, 0x02	; 2
    4aaa:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    4aae:	ea 81       	ldd	r30, Y+2	; 0x02
    4ab0:	fb 81       	ldd	r31, Y+3	; 0x03
    4ab2:	83 a1       	ldd	r24, Z+35	; 0x23
    4ab4:	ea 81       	ldd	r30, Y+2	; 0x02
    4ab6:	fb 81       	ldd	r31, Y+3	; 0x03
    4ab8:	86 8b       	std	Z+22, r24	; 0x16

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4aba:	ea 81       	ldd	r30, Y+2	; 0x02
    4abc:	fb 81       	ldd	r31, Y+3	; 0x03
    4abe:	86 89       	ldd	r24, Z+22	; 0x16
    4ac0:	28 2f       	mov	r18, r24
    4ac2:	30 e0       	ldi	r19, 0x00	; 0
    4ac4:	85 e0       	ldi	r24, 0x05	; 5
    4ac6:	90 e0       	ldi	r25, 0x00	; 0
    4ac8:	82 1b       	sub	r24, r18
    4aca:	93 0b       	sbc	r25, r19
    4acc:	ea 81       	ldd	r30, Y+2	; 0x02
    4ace:	fb 81       	ldd	r31, Y+3	; 0x03
    4ad0:	95 87       	std	Z+13, r25	; 0x0d
    4ad2:	84 87       	std	Z+12, r24	; 0x0c
					prvAddTaskToReadyList( pxTCB );
    4ad4:	ea 81       	ldd	r30, Y+2	; 0x02
    4ad6:	fb 81       	ldd	r31, Y+3	; 0x03
    4ad8:	96 89       	ldd	r25, Z+22	; 0x16
    4ada:	80 91 a5 03 	lds	r24, 0x03A5
    4ade:	89 17       	cp	r24, r25
    4ae0:	28 f4       	brcc	.+10     	; 0x4aec <xTaskPriorityDisinherit+0x9a>
    4ae2:	ea 81       	ldd	r30, Y+2	; 0x02
    4ae4:	fb 81       	ldd	r31, Y+3	; 0x03
    4ae6:	86 89       	ldd	r24, Z+22	; 0x16
    4ae8:	80 93 a5 03 	sts	0x03A5, r24
    4aec:	ea 81       	ldd	r30, Y+2	; 0x02
    4aee:	fb 81       	ldd	r31, Y+3	; 0x03
    4af0:	86 89       	ldd	r24, Z+22	; 0x16
    4af2:	28 2f       	mov	r18, r24
    4af4:	30 e0       	ldi	r19, 0x00	; 0
    4af6:	c9 01       	movw	r24, r18
    4af8:	88 0f       	add	r24, r24
    4afa:	99 1f       	adc	r25, r25
    4afc:	88 0f       	add	r24, r24
    4afe:	99 1f       	adc	r25, r25
    4b00:	88 0f       	add	r24, r24
    4b02:	99 1f       	adc	r25, r25
    4b04:	82 0f       	add	r24, r18
    4b06:	93 1f       	adc	r25, r19
    4b08:	ac 01       	movw	r20, r24
    4b0a:	40 55       	subi	r20, 0x50	; 80
    4b0c:	5c 4f       	sbci	r21, 0xFC	; 252
    4b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b10:	9b 81       	ldd	r25, Y+3	; 0x03
    4b12:	9c 01       	movw	r18, r24
    4b14:	2e 5f       	subi	r18, 0xFE	; 254
    4b16:	3f 4f       	sbci	r19, 0xFF	; 255
    4b18:	ca 01       	movw	r24, r20
    4b1a:	b9 01       	movw	r22, r18
    4b1c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    4b20:	81 e0       	ldi	r24, 0x01	; 1
    4b22:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    4b24:	89 81       	ldd	r24, Y+1	; 0x01
	}
    4b26:	0f 90       	pop	r0
    4b28:	0f 90       	pop	r0
    4b2a:	0f 90       	pop	r0
    4b2c:	0f 90       	pop	r0
    4b2e:	0f 90       	pop	r0
    4b30:	cf 91       	pop	r28
    4b32:	df 91       	pop	r29
    4b34:	08 95       	ret

00004b36 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    4b36:	df 93       	push	r29
    4b38:	cf 93       	push	r28
    4b3a:	00 d0       	rcall	.+0      	; 0x4b3c <uxTaskResetEventItemValue+0x6>
    4b3c:	cd b7       	in	r28, 0x3d	; 61
    4b3e:	de b7       	in	r29, 0x3e	; 62
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    4b40:	e0 91 9f 03 	lds	r30, 0x039F
    4b44:	f0 91 a0 03 	lds	r31, 0x03A0
    4b48:	84 85       	ldd	r24, Z+12	; 0x0c
    4b4a:	95 85       	ldd	r25, Z+13	; 0x0d
    4b4c:	9a 83       	std	Y+2, r25	; 0x02
    4b4e:	89 83       	std	Y+1, r24	; 0x01

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4b50:	a0 91 9f 03 	lds	r26, 0x039F
    4b54:	b0 91 a0 03 	lds	r27, 0x03A0
    4b58:	e0 91 9f 03 	lds	r30, 0x039F
    4b5c:	f0 91 a0 03 	lds	r31, 0x03A0
    4b60:	86 89       	ldd	r24, Z+22	; 0x16
    4b62:	28 2f       	mov	r18, r24
    4b64:	30 e0       	ldi	r19, 0x00	; 0
    4b66:	85 e0       	ldi	r24, 0x05	; 5
    4b68:	90 e0       	ldi	r25, 0x00	; 0
    4b6a:	82 1b       	sub	r24, r18
    4b6c:	93 0b       	sbc	r25, r19
    4b6e:	1d 96       	adiw	r26, 0x0d	; 13
    4b70:	9c 93       	st	X, r25
    4b72:	8e 93       	st	-X, r24
    4b74:	1c 97       	sbiw	r26, 0x0c	; 12

	return uxReturn;
    4b76:	89 81       	ldd	r24, Y+1	; 0x01
    4b78:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4b7a:	0f 90       	pop	r0
    4b7c:	0f 90       	pop	r0
    4b7e:	cf 91       	pop	r28
    4b80:	df 91       	pop	r29
    4b82:	08 95       	ret

00004b84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    4b84:	df 93       	push	r29
    4b86:	cf 93       	push	r28
    4b88:	cd b7       	in	r28, 0x3d	; 61
    4b8a:	de b7       	in	r29, 0x3e	; 62
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    4b8c:	80 91 9f 03 	lds	r24, 0x039F
    4b90:	90 91 a0 03 	lds	r25, 0x03A0
    4b94:	00 97       	sbiw	r24, 0x00	; 0
    4b96:	39 f0       	breq	.+14     	; 0x4ba6 <pvTaskIncrementMutexHeldCount+0x22>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    4b98:	e0 91 9f 03 	lds	r30, 0x039F
    4b9c:	f0 91 a0 03 	lds	r31, 0x03A0
    4ba0:	84 a1       	ldd	r24, Z+36	; 0x24
    4ba2:	8f 5f       	subi	r24, 0xFF	; 255
    4ba4:	84 a3       	std	Z+36, r24	; 0x24
		}

		return pxCurrentTCB;
    4ba6:	80 91 9f 03 	lds	r24, 0x039F
    4baa:	90 91 a0 03 	lds	r25, 0x03A0
	}
    4bae:	cf 91       	pop	r28
    4bb0:	df 91       	pop	r29
    4bb2:	08 95       	ret

00004bb4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    4bb4:	df 93       	push	r29
    4bb6:	cf 93       	push	r28
    4bb8:	cd b7       	in	r28, 0x3d	; 61
    4bba:	de b7       	in	r29, 0x3e	; 62
    4bbc:	27 97       	sbiw	r28, 0x07	; 7
    4bbe:	0f b6       	in	r0, 0x3f	; 63
    4bc0:	f8 94       	cli
    4bc2:	de bf       	out	0x3e, r29	; 62
    4bc4:	0f be       	out	0x3f, r0	; 63
    4bc6:	cd bf       	out	0x3d, r28	; 61
    4bc8:	8d 83       	std	Y+5, r24	; 0x05
    4bca:	7f 83       	std	Y+7, r23	; 0x07
    4bcc:	6e 83       	std	Y+6, r22	; 0x06
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    4bce:	0f b6       	in	r0, 0x3f	; 63
    4bd0:	f8 94       	cli
    4bd2:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    4bd4:	e0 91 9f 03 	lds	r30, 0x039F
    4bd8:	f0 91 a0 03 	lds	r31, 0x03A0
    4bdc:	85 a1       	ldd	r24, Z+37	; 0x25
    4bde:	96 a1       	ldd	r25, Z+38	; 0x26
    4be0:	a7 a1       	ldd	r26, Z+39	; 0x27
    4be2:	b0 a5       	ldd	r27, Z+40	; 0x28
    4be4:	00 97       	sbiw	r24, 0x00	; 0
    4be6:	a1 05       	cpc	r26, r1
    4be8:	b1 05       	cpc	r27, r1
    4bea:	89 f4       	brne	.+34     	; 0x4c0e <ulTaskNotifyTake+0x5a>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    4bec:	e0 91 9f 03 	lds	r30, 0x039F
    4bf0:	f0 91 a0 03 	lds	r31, 0x03A0
    4bf4:	81 e0       	ldi	r24, 0x01	; 1
    4bf6:	81 a7       	std	Z+41, r24	; 0x29

				if( xTicksToWait > ( TickType_t ) 0 )
    4bf8:	8e 81       	ldd	r24, Y+6	; 0x06
    4bfa:	9f 81       	ldd	r25, Y+7	; 0x07
    4bfc:	00 97       	sbiw	r24, 0x00	; 0
    4bfe:	39 f0       	breq	.+14     	; 0x4c0e <ulTaskNotifyTake+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    4c00:	8e 81       	ldd	r24, Y+6	; 0x06
    4c02:	9f 81       	ldd	r25, Y+7	; 0x07
    4c04:	61 e0       	ldi	r22, 0x01	; 1
    4c06:	0e 94 84 29 	call	0x5308	; 0x5308 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    4c0a:	0e 94 2e 12 	call	0x245c	; 0x245c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4c0e:	0f 90       	pop	r0
    4c10:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    4c12:	0f b6       	in	r0, 0x3f	; 63
    4c14:	f8 94       	cli
    4c16:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    4c18:	e0 91 9f 03 	lds	r30, 0x039F
    4c1c:	f0 91 a0 03 	lds	r31, 0x03A0
    4c20:	85 a1       	ldd	r24, Z+37	; 0x25
    4c22:	96 a1       	ldd	r25, Z+38	; 0x26
    4c24:	a7 a1       	ldd	r26, Z+39	; 0x27
    4c26:	b0 a5       	ldd	r27, Z+40	; 0x28
    4c28:	89 83       	std	Y+1, r24	; 0x01
    4c2a:	9a 83       	std	Y+2, r25	; 0x02
    4c2c:	ab 83       	std	Y+3, r26	; 0x03
    4c2e:	bc 83       	std	Y+4, r27	; 0x04

			if( ulReturn != 0UL )
    4c30:	89 81       	ldd	r24, Y+1	; 0x01
    4c32:	9a 81       	ldd	r25, Y+2	; 0x02
    4c34:	ab 81       	ldd	r26, Y+3	; 0x03
    4c36:	bc 81       	ldd	r27, Y+4	; 0x04
    4c38:	00 97       	sbiw	r24, 0x00	; 0
    4c3a:	a1 05       	cpc	r26, r1
    4c3c:	b1 05       	cpc	r27, r1
    4c3e:	d9 f0       	breq	.+54     	; 0x4c76 <ulTaskNotifyTake+0xc2>
			{
				if( xClearCountOnExit != pdFALSE )
    4c40:	8d 81       	ldd	r24, Y+5	; 0x05
    4c42:	88 23       	and	r24, r24
    4c44:	49 f0       	breq	.+18     	; 0x4c58 <ulTaskNotifyTake+0xa4>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    4c46:	e0 91 9f 03 	lds	r30, 0x039F
    4c4a:	f0 91 a0 03 	lds	r31, 0x03A0
    4c4e:	15 a2       	std	Z+37, r1	; 0x25
    4c50:	16 a2       	std	Z+38, r1	; 0x26
    4c52:	17 a2       	std	Z+39, r1	; 0x27
    4c54:	10 a6       	std	Z+40, r1	; 0x28
    4c56:	0f c0       	rjmp	.+30     	; 0x4c76 <ulTaskNotifyTake+0xc2>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
    4c58:	e0 91 9f 03 	lds	r30, 0x039F
    4c5c:	f0 91 a0 03 	lds	r31, 0x03A0
    4c60:	89 81       	ldd	r24, Y+1	; 0x01
    4c62:	9a 81       	ldd	r25, Y+2	; 0x02
    4c64:	ab 81       	ldd	r26, Y+3	; 0x03
    4c66:	bc 81       	ldd	r27, Y+4	; 0x04
    4c68:	01 97       	sbiw	r24, 0x01	; 1
    4c6a:	a1 09       	sbc	r26, r1
    4c6c:	b1 09       	sbc	r27, r1
    4c6e:	85 a3       	std	Z+37, r24	; 0x25
    4c70:	96 a3       	std	Z+38, r25	; 0x26
    4c72:	a7 a3       	std	Z+39, r26	; 0x27
    4c74:	b0 a7       	std	Z+40, r27	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4c76:	e0 91 9f 03 	lds	r30, 0x039F
    4c7a:	f0 91 a0 03 	lds	r31, 0x03A0
    4c7e:	11 a6       	std	Z+41, r1	; 0x29
		}
		taskEXIT_CRITICAL();
    4c80:	0f 90       	pop	r0
    4c82:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
    4c84:	89 81       	ldd	r24, Y+1	; 0x01
    4c86:	9a 81       	ldd	r25, Y+2	; 0x02
    4c88:	ab 81       	ldd	r26, Y+3	; 0x03
    4c8a:	bc 81       	ldd	r27, Y+4	; 0x04
	}
    4c8c:	bc 01       	movw	r22, r24
    4c8e:	cd 01       	movw	r24, r26
    4c90:	27 96       	adiw	r28, 0x07	; 7
    4c92:	0f b6       	in	r0, 0x3f	; 63
    4c94:	f8 94       	cli
    4c96:	de bf       	out	0x3e, r29	; 62
    4c98:	0f be       	out	0x3f, r0	; 63
    4c9a:	cd bf       	out	0x3d, r28	; 61
    4c9c:	cf 91       	pop	r28
    4c9e:	df 91       	pop	r29
    4ca0:	08 95       	ret

00004ca2 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    4ca2:	ef 92       	push	r14
    4ca4:	ff 92       	push	r15
    4ca6:	0f 93       	push	r16
    4ca8:	1f 93       	push	r17
    4caa:	df 93       	push	r29
    4cac:	cf 93       	push	r28
    4cae:	cd b7       	in	r28, 0x3d	; 61
    4cb0:	de b7       	in	r29, 0x3e	; 62
    4cb2:	2d 97       	sbiw	r28, 0x0d	; 13
    4cb4:	0f b6       	in	r0, 0x3f	; 63
    4cb6:	f8 94       	cli
    4cb8:	de bf       	out	0x3e, r29	; 62
    4cba:	0f be       	out	0x3f, r0	; 63
    4cbc:	cd bf       	out	0x3d, r28	; 61
    4cbe:	6a 83       	std	Y+2, r22	; 0x02
    4cc0:	7b 83       	std	Y+3, r23	; 0x03
    4cc2:	8c 83       	std	Y+4, r24	; 0x04
    4cc4:	9d 83       	std	Y+5, r25	; 0x05
    4cc6:	2e 83       	std	Y+6, r18	; 0x06
    4cc8:	3f 83       	std	Y+7, r19	; 0x07
    4cca:	48 87       	std	Y+8, r20	; 0x08
    4ccc:	59 87       	std	Y+9, r21	; 0x09
    4cce:	1b 87       	std	Y+11, r17	; 0x0b
    4cd0:	0a 87       	std	Y+10, r16	; 0x0a
    4cd2:	fd 86       	std	Y+13, r15	; 0x0d
    4cd4:	ec 86       	std	Y+12, r14	; 0x0c
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    4cd6:	0f b6       	in	r0, 0x3f	; 63
    4cd8:	f8 94       	cli
    4cda:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    4cdc:	e0 91 9f 03 	lds	r30, 0x039F
    4ce0:	f0 91 a0 03 	lds	r31, 0x03A0
    4ce4:	81 a5       	ldd	r24, Z+41	; 0x29
    4ce6:	82 30       	cpi	r24, 0x02	; 2
    4ce8:	49 f1       	breq	.+82     	; 0x4d3c <xTaskNotifyWait+0x9a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    4cea:	e0 91 9f 03 	lds	r30, 0x039F
    4cee:	f0 91 a0 03 	lds	r31, 0x03A0
    4cf2:	25 a1       	ldd	r18, Z+37	; 0x25
    4cf4:	36 a1       	ldd	r19, Z+38	; 0x26
    4cf6:	47 a1       	ldd	r20, Z+39	; 0x27
    4cf8:	50 a5       	ldd	r21, Z+40	; 0x28
    4cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    4cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    4cfe:	ac 81       	ldd	r26, Y+4	; 0x04
    4d00:	bd 81       	ldd	r27, Y+5	; 0x05
    4d02:	80 95       	com	r24
    4d04:	90 95       	com	r25
    4d06:	a0 95       	com	r26
    4d08:	b0 95       	com	r27
    4d0a:	82 23       	and	r24, r18
    4d0c:	93 23       	and	r25, r19
    4d0e:	a4 23       	and	r26, r20
    4d10:	b5 23       	and	r27, r21
    4d12:	85 a3       	std	Z+37, r24	; 0x25
    4d14:	96 a3       	std	Z+38, r25	; 0x26
    4d16:	a7 a3       	std	Z+39, r26	; 0x27
    4d18:	b0 a7       	std	Z+40, r27	; 0x28

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    4d1a:	e0 91 9f 03 	lds	r30, 0x039F
    4d1e:	f0 91 a0 03 	lds	r31, 0x03A0
    4d22:	81 e0       	ldi	r24, 0x01	; 1
    4d24:	81 a7       	std	Z+41, r24	; 0x29

				if( xTicksToWait > ( TickType_t ) 0 )
    4d26:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d28:	9d 85       	ldd	r25, Y+13	; 0x0d
    4d2a:	00 97       	sbiw	r24, 0x00	; 0
    4d2c:	39 f0       	breq	.+14     	; 0x4d3c <xTaskNotifyWait+0x9a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    4d2e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d30:	9d 85       	ldd	r25, Y+13	; 0x0d
    4d32:	61 e0       	ldi	r22, 0x01	; 1
    4d34:	0e 94 84 29 	call	0x5308	; 0x5308 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    4d38:	0e 94 2e 12 	call	0x245c	; 0x245c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4d3c:	0f 90       	pop	r0
    4d3e:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    4d40:	0f b6       	in	r0, 0x3f	; 63
    4d42:	f8 94       	cli
    4d44:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    4d46:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d48:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d4a:	00 97       	sbiw	r24, 0x00	; 0
    4d4c:	71 f0       	breq	.+28     	; 0x4d6a <xTaskNotifyWait+0xc8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    4d4e:	e0 91 9f 03 	lds	r30, 0x039F
    4d52:	f0 91 a0 03 	lds	r31, 0x03A0
    4d56:	85 a1       	ldd	r24, Z+37	; 0x25
    4d58:	96 a1       	ldd	r25, Z+38	; 0x26
    4d5a:	a7 a1       	ldd	r26, Z+39	; 0x27
    4d5c:	b0 a5       	ldd	r27, Z+40	; 0x28
    4d5e:	ea 85       	ldd	r30, Y+10	; 0x0a
    4d60:	fb 85       	ldd	r31, Y+11	; 0x0b
    4d62:	80 83       	st	Z, r24
    4d64:	91 83       	std	Z+1, r25	; 0x01
    4d66:	a2 83       	std	Z+2, r26	; 0x02
    4d68:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    4d6a:	e0 91 9f 03 	lds	r30, 0x039F
    4d6e:	f0 91 a0 03 	lds	r31, 0x03A0
    4d72:	81 a5       	ldd	r24, Z+41	; 0x29
    4d74:	81 30       	cpi	r24, 0x01	; 1
    4d76:	11 f4       	brne	.+4      	; 0x4d7c <xTaskNotifyWait+0xda>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    4d78:	19 82       	std	Y+1, r1	; 0x01
    4d7a:	1a c0       	rjmp	.+52     	; 0x4db0 <xTaskNotifyWait+0x10e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    4d7c:	e0 91 9f 03 	lds	r30, 0x039F
    4d80:	f0 91 a0 03 	lds	r31, 0x03A0
    4d84:	25 a1       	ldd	r18, Z+37	; 0x25
    4d86:	36 a1       	ldd	r19, Z+38	; 0x26
    4d88:	47 a1       	ldd	r20, Z+39	; 0x27
    4d8a:	50 a5       	ldd	r21, Z+40	; 0x28
    4d8c:	8e 81       	ldd	r24, Y+6	; 0x06
    4d8e:	9f 81       	ldd	r25, Y+7	; 0x07
    4d90:	a8 85       	ldd	r26, Y+8	; 0x08
    4d92:	b9 85       	ldd	r27, Y+9	; 0x09
    4d94:	80 95       	com	r24
    4d96:	90 95       	com	r25
    4d98:	a0 95       	com	r26
    4d9a:	b0 95       	com	r27
    4d9c:	82 23       	and	r24, r18
    4d9e:	93 23       	and	r25, r19
    4da0:	a4 23       	and	r26, r20
    4da2:	b5 23       	and	r27, r21
    4da4:	85 a3       	std	Z+37, r24	; 0x25
    4da6:	96 a3       	std	Z+38, r25	; 0x26
    4da8:	a7 a3       	std	Z+39, r26	; 0x27
    4daa:	b0 a7       	std	Z+40, r27	; 0x28
				xReturn = pdTRUE;
    4dac:	81 e0       	ldi	r24, 0x01	; 1
    4dae:	89 83       	std	Y+1, r24	; 0x01
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4db0:	e0 91 9f 03 	lds	r30, 0x039F
    4db4:	f0 91 a0 03 	lds	r31, 0x03A0
    4db8:	11 a6       	std	Z+41, r1	; 0x29
		}
		taskEXIT_CRITICAL();
    4dba:	0f 90       	pop	r0
    4dbc:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    4dbe:	89 81       	ldd	r24, Y+1	; 0x01
	}
    4dc0:	2d 96       	adiw	r28, 0x0d	; 13
    4dc2:	0f b6       	in	r0, 0x3f	; 63
    4dc4:	f8 94       	cli
    4dc6:	de bf       	out	0x3e, r29	; 62
    4dc8:	0f be       	out	0x3f, r0	; 63
    4dca:	cd bf       	out	0x3d, r28	; 61
    4dcc:	cf 91       	pop	r28
    4dce:	df 91       	pop	r29
    4dd0:	1f 91       	pop	r17
    4dd2:	0f 91       	pop	r16
    4dd4:	ff 90       	pop	r15
    4dd6:	ef 90       	pop	r14
    4dd8:	08 95       	ret

00004dda <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    4dda:	0f 93       	push	r16
    4ddc:	1f 93       	push	r17
    4dde:	df 93       	push	r29
    4de0:	cf 93       	push	r28
    4de2:	cd b7       	in	r28, 0x3d	; 61
    4de4:	de b7       	in	r29, 0x3e	; 62
    4de6:	2f 97       	sbiw	r28, 0x0f	; 15
    4de8:	0f b6       	in	r0, 0x3f	; 63
    4dea:	f8 94       	cli
    4dec:	de bf       	out	0x3e, r29	; 62
    4dee:	0f be       	out	0x3f, r0	; 63
    4df0:	cd bf       	out	0x3d, r28	; 61
    4df2:	9e 83       	std	Y+6, r25	; 0x06
    4df4:	8d 83       	std	Y+5, r24	; 0x05
    4df6:	4f 83       	std	Y+7, r20	; 0x07
    4df8:	58 87       	std	Y+8, r21	; 0x08
    4dfa:	69 87       	std	Y+9, r22	; 0x09
    4dfc:	7a 87       	std	Y+10, r23	; 0x0a
    4dfe:	2b 87       	std	Y+11, r18	; 0x0b
    4e00:	1d 87       	std	Y+13, r17	; 0x0d
    4e02:	0c 87       	std	Y+12, r16	; 0x0c
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    4e04:	81 e0       	ldi	r24, 0x01	; 1
    4e06:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
    4e08:	8d 81       	ldd	r24, Y+5	; 0x05
    4e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    4e0c:	9c 83       	std	Y+4, r25	; 0x04
    4e0e:	8b 83       	std	Y+3, r24	; 0x03

		taskENTER_CRITICAL();
    4e10:	0f b6       	in	r0, 0x3f	; 63
    4e12:	f8 94       	cli
    4e14:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    4e16:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e18:	9d 85       	ldd	r25, Y+13	; 0x0d
    4e1a:	00 97       	sbiw	r24, 0x00	; 0
    4e1c:	61 f0       	breq	.+24     	; 0x4e36 <xTaskGenericNotify+0x5c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    4e1e:	eb 81       	ldd	r30, Y+3	; 0x03
    4e20:	fc 81       	ldd	r31, Y+4	; 0x04
    4e22:	85 a1       	ldd	r24, Z+37	; 0x25
    4e24:	96 a1       	ldd	r25, Z+38	; 0x26
    4e26:	a7 a1       	ldd	r26, Z+39	; 0x27
    4e28:	b0 a5       	ldd	r27, Z+40	; 0x28
    4e2a:	ec 85       	ldd	r30, Y+12	; 0x0c
    4e2c:	fd 85       	ldd	r31, Y+13	; 0x0d
    4e2e:	80 83       	st	Z, r24
    4e30:	91 83       	std	Z+1, r25	; 0x01
    4e32:	a2 83       	std	Z+2, r26	; 0x02
    4e34:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    4e36:	eb 81       	ldd	r30, Y+3	; 0x03
    4e38:	fc 81       	ldd	r31, Y+4	; 0x04
    4e3a:	81 a5       	ldd	r24, Z+41	; 0x29
    4e3c:	89 83       	std	Y+1, r24	; 0x01

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    4e3e:	eb 81       	ldd	r30, Y+3	; 0x03
    4e40:	fc 81       	ldd	r31, Y+4	; 0x04
    4e42:	82 e0       	ldi	r24, 0x02	; 2
    4e44:	81 a7       	std	Z+41, r24	; 0x29

			switch( eAction )
    4e46:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e48:	28 2f       	mov	r18, r24
    4e4a:	30 e0       	ldi	r19, 0x00	; 0
    4e4c:	3f 87       	std	Y+15, r19	; 0x0f
    4e4e:	2e 87       	std	Y+14, r18	; 0x0e
    4e50:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e52:	9f 85       	ldd	r25, Y+15	; 0x0f
    4e54:	82 30       	cpi	r24, 0x02	; 2
    4e56:	91 05       	cpc	r25, r1
    4e58:	59 f1       	breq	.+86     	; 0x4eb0 <xTaskGenericNotify+0xd6>
    4e5a:	2e 85       	ldd	r18, Y+14	; 0x0e
    4e5c:	3f 85       	ldd	r19, Y+15	; 0x0f
    4e5e:	23 30       	cpi	r18, 0x03	; 3
    4e60:	31 05       	cpc	r19, r1
    4e62:	34 f4       	brge	.+12     	; 0x4e70 <xTaskGenericNotify+0x96>
    4e64:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e66:	9f 85       	ldd	r25, Y+15	; 0x0f
    4e68:	81 30       	cpi	r24, 0x01	; 1
    4e6a:	91 05       	cpc	r25, r1
    4e6c:	61 f0       	breq	.+24     	; 0x4e86 <xTaskGenericNotify+0xac>
    4e6e:	4a c0       	rjmp	.+148    	; 0x4f04 <xTaskGenericNotify+0x12a>
    4e70:	2e 85       	ldd	r18, Y+14	; 0x0e
    4e72:	3f 85       	ldd	r19, Y+15	; 0x0f
    4e74:	23 30       	cpi	r18, 0x03	; 3
    4e76:	31 05       	cpc	r19, r1
    4e78:	59 f1       	breq	.+86     	; 0x4ed0 <xTaskGenericNotify+0xf6>
    4e7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    4e7e:	84 30       	cpi	r24, 0x04	; 4
    4e80:	91 05       	cpc	r25, r1
    4e82:	89 f1       	breq	.+98     	; 0x4ee6 <xTaskGenericNotify+0x10c>
    4e84:	3f c0       	rjmp	.+126    	; 0x4f04 <xTaskGenericNotify+0x12a>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    4e86:	eb 81       	ldd	r30, Y+3	; 0x03
    4e88:	fc 81       	ldd	r31, Y+4	; 0x04
    4e8a:	25 a1       	ldd	r18, Z+37	; 0x25
    4e8c:	36 a1       	ldd	r19, Z+38	; 0x26
    4e8e:	47 a1       	ldd	r20, Z+39	; 0x27
    4e90:	50 a5       	ldd	r21, Z+40	; 0x28
    4e92:	8f 81       	ldd	r24, Y+7	; 0x07
    4e94:	98 85       	ldd	r25, Y+8	; 0x08
    4e96:	a9 85       	ldd	r26, Y+9	; 0x09
    4e98:	ba 85       	ldd	r27, Y+10	; 0x0a
    4e9a:	82 2b       	or	r24, r18
    4e9c:	93 2b       	or	r25, r19
    4e9e:	a4 2b       	or	r26, r20
    4ea0:	b5 2b       	or	r27, r21
    4ea2:	eb 81       	ldd	r30, Y+3	; 0x03
    4ea4:	fc 81       	ldd	r31, Y+4	; 0x04
    4ea6:	85 a3       	std	Z+37, r24	; 0x25
    4ea8:	96 a3       	std	Z+38, r25	; 0x26
    4eaa:	a7 a3       	std	Z+39, r26	; 0x27
    4eac:	b0 a7       	std	Z+40, r27	; 0x28
    4eae:	2a c0       	rjmp	.+84     	; 0x4f04 <xTaskGenericNotify+0x12a>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    4eb0:	eb 81       	ldd	r30, Y+3	; 0x03
    4eb2:	fc 81       	ldd	r31, Y+4	; 0x04
    4eb4:	85 a1       	ldd	r24, Z+37	; 0x25
    4eb6:	96 a1       	ldd	r25, Z+38	; 0x26
    4eb8:	a7 a1       	ldd	r26, Z+39	; 0x27
    4eba:	b0 a5       	ldd	r27, Z+40	; 0x28
    4ebc:	01 96       	adiw	r24, 0x01	; 1
    4ebe:	a1 1d       	adc	r26, r1
    4ec0:	b1 1d       	adc	r27, r1
    4ec2:	eb 81       	ldd	r30, Y+3	; 0x03
    4ec4:	fc 81       	ldd	r31, Y+4	; 0x04
    4ec6:	85 a3       	std	Z+37, r24	; 0x25
    4ec8:	96 a3       	std	Z+38, r25	; 0x26
    4eca:	a7 a3       	std	Z+39, r26	; 0x27
    4ecc:	b0 a7       	std	Z+40, r27	; 0x28
    4ece:	1a c0       	rjmp	.+52     	; 0x4f04 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    4ed0:	eb 81       	ldd	r30, Y+3	; 0x03
    4ed2:	fc 81       	ldd	r31, Y+4	; 0x04
    4ed4:	8f 81       	ldd	r24, Y+7	; 0x07
    4ed6:	98 85       	ldd	r25, Y+8	; 0x08
    4ed8:	a9 85       	ldd	r26, Y+9	; 0x09
    4eda:	ba 85       	ldd	r27, Y+10	; 0x0a
    4edc:	85 a3       	std	Z+37, r24	; 0x25
    4ede:	96 a3       	std	Z+38, r25	; 0x26
    4ee0:	a7 a3       	std	Z+39, r26	; 0x27
    4ee2:	b0 a7       	std	Z+40, r27	; 0x28
    4ee4:	0f c0       	rjmp	.+30     	; 0x4f04 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    4ee6:	89 81       	ldd	r24, Y+1	; 0x01
    4ee8:	82 30       	cpi	r24, 0x02	; 2
    4eea:	59 f0       	breq	.+22     	; 0x4f02 <xTaskGenericNotify+0x128>
					{
						pxTCB->ulNotifiedValue = ulValue;
    4eec:	eb 81       	ldd	r30, Y+3	; 0x03
    4eee:	fc 81       	ldd	r31, Y+4	; 0x04
    4ef0:	8f 81       	ldd	r24, Y+7	; 0x07
    4ef2:	98 85       	ldd	r25, Y+8	; 0x08
    4ef4:	a9 85       	ldd	r26, Y+9	; 0x09
    4ef6:	ba 85       	ldd	r27, Y+10	; 0x0a
    4ef8:	85 a3       	std	Z+37, r24	; 0x25
    4efa:	96 a3       	std	Z+38, r25	; 0x26
    4efc:	a7 a3       	std	Z+39, r26	; 0x27
    4efe:	b0 a7       	std	Z+40, r27	; 0x28
    4f00:	01 c0       	rjmp	.+2      	; 0x4f04 <xTaskGenericNotify+0x12a>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    4f02:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    4f04:	89 81       	ldd	r24, Y+1	; 0x01
    4f06:	81 30       	cpi	r24, 0x01	; 1
    4f08:	b9 f5       	brne	.+110    	; 0x4f78 <xTaskGenericNotify+0x19e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    4f0e:	02 96       	adiw	r24, 0x02	; 2
    4f10:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    4f14:	eb 81       	ldd	r30, Y+3	; 0x03
    4f16:	fc 81       	ldd	r31, Y+4	; 0x04
    4f18:	96 89       	ldd	r25, Z+22	; 0x16
    4f1a:	80 91 a5 03 	lds	r24, 0x03A5
    4f1e:	89 17       	cp	r24, r25
    4f20:	28 f4       	brcc	.+10     	; 0x4f2c <xTaskGenericNotify+0x152>
    4f22:	eb 81       	ldd	r30, Y+3	; 0x03
    4f24:	fc 81       	ldd	r31, Y+4	; 0x04
    4f26:	86 89       	ldd	r24, Z+22	; 0x16
    4f28:	80 93 a5 03 	sts	0x03A5, r24
    4f2c:	eb 81       	ldd	r30, Y+3	; 0x03
    4f2e:	fc 81       	ldd	r31, Y+4	; 0x04
    4f30:	86 89       	ldd	r24, Z+22	; 0x16
    4f32:	28 2f       	mov	r18, r24
    4f34:	30 e0       	ldi	r19, 0x00	; 0
    4f36:	c9 01       	movw	r24, r18
    4f38:	88 0f       	add	r24, r24
    4f3a:	99 1f       	adc	r25, r25
    4f3c:	88 0f       	add	r24, r24
    4f3e:	99 1f       	adc	r25, r25
    4f40:	88 0f       	add	r24, r24
    4f42:	99 1f       	adc	r25, r25
    4f44:	82 0f       	add	r24, r18
    4f46:	93 1f       	adc	r25, r19
    4f48:	ac 01       	movw	r20, r24
    4f4a:	40 55       	subi	r20, 0x50	; 80
    4f4c:	5c 4f       	sbci	r21, 0xFC	; 252
    4f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f50:	9c 81       	ldd	r25, Y+4	; 0x04
    4f52:	9c 01       	movw	r18, r24
    4f54:	2e 5f       	subi	r18, 0xFE	; 254
    4f56:	3f 4f       	sbci	r19, 0xFF	; 255
    4f58:	ca 01       	movw	r24, r20
    4f5a:	b9 01       	movw	r22, r18
    4f5c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4f60:	eb 81       	ldd	r30, Y+3	; 0x03
    4f62:	fc 81       	ldd	r31, Y+4	; 0x04
    4f64:	96 89       	ldd	r25, Z+22	; 0x16
    4f66:	e0 91 9f 03 	lds	r30, 0x039F
    4f6a:	f0 91 a0 03 	lds	r31, 0x03A0
    4f6e:	86 89       	ldd	r24, Z+22	; 0x16
    4f70:	89 17       	cp	r24, r25
    4f72:	10 f4       	brcc	.+4      	; 0x4f78 <xTaskGenericNotify+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    4f74:	0e 94 2e 12 	call	0x245c	; 0x245c <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4f78:	0f 90       	pop	r0
    4f7a:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    4f7c:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    4f7e:	2f 96       	adiw	r28, 0x0f	; 15
    4f80:	0f b6       	in	r0, 0x3f	; 63
    4f82:	f8 94       	cli
    4f84:	de bf       	out	0x3e, r29	; 62
    4f86:	0f be       	out	0x3f, r0	; 63
    4f88:	cd bf       	out	0x3d, r28	; 61
    4f8a:	cf 91       	pop	r28
    4f8c:	df 91       	pop	r29
    4f8e:	1f 91       	pop	r17
    4f90:	0f 91       	pop	r16
    4f92:	08 95       	ret

00004f94 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    4f94:	ef 92       	push	r14
    4f96:	ff 92       	push	r15
    4f98:	0f 93       	push	r16
    4f9a:	1f 93       	push	r17
    4f9c:	df 93       	push	r29
    4f9e:	cf 93       	push	r28
    4fa0:	cd b7       	in	r28, 0x3d	; 61
    4fa2:	de b7       	in	r29, 0x3e	; 62
    4fa4:	62 97       	sbiw	r28, 0x12	; 18
    4fa6:	0f b6       	in	r0, 0x3f	; 63
    4fa8:	f8 94       	cli
    4faa:	de bf       	out	0x3e, r29	; 62
    4fac:	0f be       	out	0x3f, r0	; 63
    4fae:	cd bf       	out	0x3d, r28	; 61
    4fb0:	9f 83       	std	Y+7, r25	; 0x07
    4fb2:	8e 83       	std	Y+6, r24	; 0x06
    4fb4:	48 87       	std	Y+8, r20	; 0x08
    4fb6:	59 87       	std	Y+9, r21	; 0x09
    4fb8:	6a 87       	std	Y+10, r22	; 0x0a
    4fba:	7b 87       	std	Y+11, r23	; 0x0b
    4fbc:	2c 87       	std	Y+12, r18	; 0x0c
    4fbe:	1e 87       	std	Y+14, r17	; 0x0e
    4fc0:	0d 87       	std	Y+13, r16	; 0x0d
    4fc2:	f8 8a       	std	Y+16, r15	; 0x10
    4fc4:	ef 86       	std	Y+15, r14	; 0x0f
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    4fc6:	81 e0       	ldi	r24, 0x01	; 1
    4fc8:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    4fca:	8e 81       	ldd	r24, Y+6	; 0x06
    4fcc:	9f 81       	ldd	r25, Y+7	; 0x07
    4fce:	9d 83       	std	Y+5, r25	; 0x05
    4fd0:	8c 83       	std	Y+4, r24	; 0x04

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4fd2:	19 82       	std	Y+1, r1	; 0x01
		{
			if( pulPreviousNotificationValue != NULL )
    4fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fd8:	00 97       	sbiw	r24, 0x00	; 0
    4fda:	61 f0       	breq	.+24     	; 0x4ff4 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    4fdc:	ec 81       	ldd	r30, Y+4	; 0x04
    4fde:	fd 81       	ldd	r31, Y+5	; 0x05
    4fe0:	85 a1       	ldd	r24, Z+37	; 0x25
    4fe2:	96 a1       	ldd	r25, Z+38	; 0x26
    4fe4:	a7 a1       	ldd	r26, Z+39	; 0x27
    4fe6:	b0 a5       	ldd	r27, Z+40	; 0x28
    4fe8:	ed 85       	ldd	r30, Y+13	; 0x0d
    4fea:	fe 85       	ldd	r31, Y+14	; 0x0e
    4fec:	80 83       	st	Z, r24
    4fee:	91 83       	std	Z+1, r25	; 0x01
    4ff0:	a2 83       	std	Z+2, r26	; 0x02
    4ff2:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    4ff4:	ec 81       	ldd	r30, Y+4	; 0x04
    4ff6:	fd 81       	ldd	r31, Y+5	; 0x05
    4ff8:	81 a5       	ldd	r24, Z+41	; 0x29
    4ffa:	8b 83       	std	Y+3, r24	; 0x03
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    4ffc:	ec 81       	ldd	r30, Y+4	; 0x04
    4ffe:	fd 81       	ldd	r31, Y+5	; 0x05
    5000:	82 e0       	ldi	r24, 0x02	; 2
    5002:	81 a7       	std	Z+41, r24	; 0x29

			switch( eAction )
    5004:	8c 85       	ldd	r24, Y+12	; 0x0c
    5006:	28 2f       	mov	r18, r24
    5008:	30 e0       	ldi	r19, 0x00	; 0
    500a:	3a 8b       	std	Y+18, r19	; 0x12
    500c:	29 8b       	std	Y+17, r18	; 0x11
    500e:	89 89       	ldd	r24, Y+17	; 0x11
    5010:	9a 89       	ldd	r25, Y+18	; 0x12
    5012:	82 30       	cpi	r24, 0x02	; 2
    5014:	91 05       	cpc	r25, r1
    5016:	59 f1       	breq	.+86     	; 0x506e <xTaskGenericNotifyFromISR+0xda>
    5018:	29 89       	ldd	r18, Y+17	; 0x11
    501a:	3a 89       	ldd	r19, Y+18	; 0x12
    501c:	23 30       	cpi	r18, 0x03	; 3
    501e:	31 05       	cpc	r19, r1
    5020:	34 f4       	brge	.+12     	; 0x502e <xTaskGenericNotifyFromISR+0x9a>
    5022:	89 89       	ldd	r24, Y+17	; 0x11
    5024:	9a 89       	ldd	r25, Y+18	; 0x12
    5026:	81 30       	cpi	r24, 0x01	; 1
    5028:	91 05       	cpc	r25, r1
    502a:	61 f0       	breq	.+24     	; 0x5044 <xTaskGenericNotifyFromISR+0xb0>
    502c:	4a c0       	rjmp	.+148    	; 0x50c2 <xTaskGenericNotifyFromISR+0x12e>
    502e:	29 89       	ldd	r18, Y+17	; 0x11
    5030:	3a 89       	ldd	r19, Y+18	; 0x12
    5032:	23 30       	cpi	r18, 0x03	; 3
    5034:	31 05       	cpc	r19, r1
    5036:	59 f1       	breq	.+86     	; 0x508e <xTaskGenericNotifyFromISR+0xfa>
    5038:	89 89       	ldd	r24, Y+17	; 0x11
    503a:	9a 89       	ldd	r25, Y+18	; 0x12
    503c:	84 30       	cpi	r24, 0x04	; 4
    503e:	91 05       	cpc	r25, r1
    5040:	89 f1       	breq	.+98     	; 0x50a4 <xTaskGenericNotifyFromISR+0x110>
    5042:	3f c0       	rjmp	.+126    	; 0x50c2 <xTaskGenericNotifyFromISR+0x12e>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    5044:	ec 81       	ldd	r30, Y+4	; 0x04
    5046:	fd 81       	ldd	r31, Y+5	; 0x05
    5048:	25 a1       	ldd	r18, Z+37	; 0x25
    504a:	36 a1       	ldd	r19, Z+38	; 0x26
    504c:	47 a1       	ldd	r20, Z+39	; 0x27
    504e:	50 a5       	ldd	r21, Z+40	; 0x28
    5050:	88 85       	ldd	r24, Y+8	; 0x08
    5052:	99 85       	ldd	r25, Y+9	; 0x09
    5054:	aa 85       	ldd	r26, Y+10	; 0x0a
    5056:	bb 85       	ldd	r27, Y+11	; 0x0b
    5058:	82 2b       	or	r24, r18
    505a:	93 2b       	or	r25, r19
    505c:	a4 2b       	or	r26, r20
    505e:	b5 2b       	or	r27, r21
    5060:	ec 81       	ldd	r30, Y+4	; 0x04
    5062:	fd 81       	ldd	r31, Y+5	; 0x05
    5064:	85 a3       	std	Z+37, r24	; 0x25
    5066:	96 a3       	std	Z+38, r25	; 0x26
    5068:	a7 a3       	std	Z+39, r26	; 0x27
    506a:	b0 a7       	std	Z+40, r27	; 0x28
    506c:	2a c0       	rjmp	.+84     	; 0x50c2 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    506e:	ec 81       	ldd	r30, Y+4	; 0x04
    5070:	fd 81       	ldd	r31, Y+5	; 0x05
    5072:	85 a1       	ldd	r24, Z+37	; 0x25
    5074:	96 a1       	ldd	r25, Z+38	; 0x26
    5076:	a7 a1       	ldd	r26, Z+39	; 0x27
    5078:	b0 a5       	ldd	r27, Z+40	; 0x28
    507a:	01 96       	adiw	r24, 0x01	; 1
    507c:	a1 1d       	adc	r26, r1
    507e:	b1 1d       	adc	r27, r1
    5080:	ec 81       	ldd	r30, Y+4	; 0x04
    5082:	fd 81       	ldd	r31, Y+5	; 0x05
    5084:	85 a3       	std	Z+37, r24	; 0x25
    5086:	96 a3       	std	Z+38, r25	; 0x26
    5088:	a7 a3       	std	Z+39, r26	; 0x27
    508a:	b0 a7       	std	Z+40, r27	; 0x28
    508c:	1a c0       	rjmp	.+52     	; 0x50c2 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    508e:	ec 81       	ldd	r30, Y+4	; 0x04
    5090:	fd 81       	ldd	r31, Y+5	; 0x05
    5092:	88 85       	ldd	r24, Y+8	; 0x08
    5094:	99 85       	ldd	r25, Y+9	; 0x09
    5096:	aa 85       	ldd	r26, Y+10	; 0x0a
    5098:	bb 85       	ldd	r27, Y+11	; 0x0b
    509a:	85 a3       	std	Z+37, r24	; 0x25
    509c:	96 a3       	std	Z+38, r25	; 0x26
    509e:	a7 a3       	std	Z+39, r26	; 0x27
    50a0:	b0 a7       	std	Z+40, r27	; 0x28
    50a2:	0f c0       	rjmp	.+30     	; 0x50c2 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    50a4:	8b 81       	ldd	r24, Y+3	; 0x03
    50a6:	82 30       	cpi	r24, 0x02	; 2
    50a8:	59 f0       	breq	.+22     	; 0x50c0 <xTaskGenericNotifyFromISR+0x12c>
					{
						pxTCB->ulNotifiedValue = ulValue;
    50aa:	ec 81       	ldd	r30, Y+4	; 0x04
    50ac:	fd 81       	ldd	r31, Y+5	; 0x05
    50ae:	88 85       	ldd	r24, Y+8	; 0x08
    50b0:	99 85       	ldd	r25, Y+9	; 0x09
    50b2:	aa 85       	ldd	r26, Y+10	; 0x0a
    50b4:	bb 85       	ldd	r27, Y+11	; 0x0b
    50b6:	85 a3       	std	Z+37, r24	; 0x25
    50b8:	96 a3       	std	Z+38, r25	; 0x26
    50ba:	a7 a3       	std	Z+39, r26	; 0x27
    50bc:	b0 a7       	std	Z+40, r27	; 0x28
    50be:	01 c0       	rjmp	.+2      	; 0x50c2 <xTaskGenericNotifyFromISR+0x12e>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    50c0:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    50c2:	8b 81       	ldd	r24, Y+3	; 0x03
    50c4:	81 30       	cpi	r24, 0x01	; 1
    50c6:	09 f0       	breq	.+2      	; 0x50ca <xTaskGenericNotifyFromISR+0x136>
    50c8:	50 c0       	rjmp	.+160    	; 0x516a <xTaskGenericNotifyFromISR+0x1d6>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    50ca:	80 91 af 03 	lds	r24, 0x03AF
    50ce:	88 23       	and	r24, r24
    50d0:	61 f5       	brne	.+88     	; 0x512a <xTaskGenericNotifyFromISR+0x196>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    50d2:	8c 81       	ldd	r24, Y+4	; 0x04
    50d4:	9d 81       	ldd	r25, Y+5	; 0x05
    50d6:	02 96       	adiw	r24, 0x02	; 2
    50d8:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    50dc:	ec 81       	ldd	r30, Y+4	; 0x04
    50de:	fd 81       	ldd	r31, Y+5	; 0x05
    50e0:	96 89       	ldd	r25, Z+22	; 0x16
    50e2:	80 91 a5 03 	lds	r24, 0x03A5
    50e6:	89 17       	cp	r24, r25
    50e8:	28 f4       	brcc	.+10     	; 0x50f4 <xTaskGenericNotifyFromISR+0x160>
    50ea:	ec 81       	ldd	r30, Y+4	; 0x04
    50ec:	fd 81       	ldd	r31, Y+5	; 0x05
    50ee:	86 89       	ldd	r24, Z+22	; 0x16
    50f0:	80 93 a5 03 	sts	0x03A5, r24
    50f4:	ec 81       	ldd	r30, Y+4	; 0x04
    50f6:	fd 81       	ldd	r31, Y+5	; 0x05
    50f8:	86 89       	ldd	r24, Z+22	; 0x16
    50fa:	28 2f       	mov	r18, r24
    50fc:	30 e0       	ldi	r19, 0x00	; 0
    50fe:	c9 01       	movw	r24, r18
    5100:	88 0f       	add	r24, r24
    5102:	99 1f       	adc	r25, r25
    5104:	88 0f       	add	r24, r24
    5106:	99 1f       	adc	r25, r25
    5108:	88 0f       	add	r24, r24
    510a:	99 1f       	adc	r25, r25
    510c:	82 0f       	add	r24, r18
    510e:	93 1f       	adc	r25, r19
    5110:	ac 01       	movw	r20, r24
    5112:	40 55       	subi	r20, 0x50	; 80
    5114:	5c 4f       	sbci	r21, 0xFC	; 252
    5116:	8c 81       	ldd	r24, Y+4	; 0x04
    5118:	9d 81       	ldd	r25, Y+5	; 0x05
    511a:	9c 01       	movw	r18, r24
    511c:	2e 5f       	subi	r18, 0xFE	; 254
    511e:	3f 4f       	sbci	r19, 0xFF	; 255
    5120:	ca 01       	movw	r24, r20
    5122:	b9 01       	movw	r22, r18
    5124:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <vListInsertEnd>
    5128:	0a c0       	rjmp	.+20     	; 0x513e <xTaskGenericNotifyFromISR+0x1aa>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    512a:	8c 81       	ldd	r24, Y+4	; 0x04
    512c:	9d 81       	ldd	r25, Y+5	; 0x05
    512e:	9c 01       	movw	r18, r24
    5130:	24 5f       	subi	r18, 0xF4	; 244
    5132:	3f 4f       	sbci	r19, 0xFF	; 255
    5134:	83 ef       	ldi	r24, 0xF3	; 243
    5136:	93 e0       	ldi	r25, 0x03	; 3
    5138:	b9 01       	movw	r22, r18
    513a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    513e:	ec 81       	ldd	r30, Y+4	; 0x04
    5140:	fd 81       	ldd	r31, Y+5	; 0x05
    5142:	96 89       	ldd	r25, Z+22	; 0x16
    5144:	e0 91 9f 03 	lds	r30, 0x039F
    5148:	f0 91 a0 03 	lds	r31, 0x03A0
    514c:	86 89       	ldd	r24, Z+22	; 0x16
    514e:	89 17       	cp	r24, r25
    5150:	60 f4       	brcc	.+24     	; 0x516a <xTaskGenericNotifyFromISR+0x1d6>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    5152:	8f 85       	ldd	r24, Y+15	; 0x0f
    5154:	98 89       	ldd	r25, Y+16	; 0x10
    5156:	00 97       	sbiw	r24, 0x00	; 0
    5158:	29 f0       	breq	.+10     	; 0x5164 <xTaskGenericNotifyFromISR+0x1d0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    515a:	ef 85       	ldd	r30, Y+15	; 0x0f
    515c:	f8 89       	ldd	r31, Y+16	; 0x10
    515e:	81 e0       	ldi	r24, 0x01	; 1
    5160:	80 83       	st	Z, r24
    5162:	03 c0       	rjmp	.+6      	; 0x516a <xTaskGenericNotifyFromISR+0x1d6>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    5164:	81 e0       	ldi	r24, 0x01	; 1
    5166:	80 93 a8 03 	sts	0x03A8, r24
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    516a:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    516c:	62 96       	adiw	r28, 0x12	; 18
    516e:	0f b6       	in	r0, 0x3f	; 63
    5170:	f8 94       	cli
    5172:	de bf       	out	0x3e, r29	; 62
    5174:	0f be       	out	0x3f, r0	; 63
    5176:	cd bf       	out	0x3d, r28	; 61
    5178:	cf 91       	pop	r28
    517a:	df 91       	pop	r29
    517c:	1f 91       	pop	r17
    517e:	0f 91       	pop	r16
    5180:	ff 90       	pop	r15
    5182:	ef 90       	pop	r14
    5184:	08 95       	ret

00005186 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    5186:	df 93       	push	r29
    5188:	cf 93       	push	r28
    518a:	cd b7       	in	r28, 0x3d	; 61
    518c:	de b7       	in	r29, 0x3e	; 62
    518e:	28 97       	sbiw	r28, 0x08	; 8
    5190:	0f b6       	in	r0, 0x3f	; 63
    5192:	f8 94       	cli
    5194:	de bf       	out	0x3e, r29	; 62
    5196:	0f be       	out	0x3f, r0	; 63
    5198:	cd bf       	out	0x3d, r28	; 61
    519a:	9e 83       	std	Y+6, r25	; 0x06
    519c:	8d 83       	std	Y+5, r24	; 0x05
    519e:	78 87       	std	Y+8, r23	; 0x08
    51a0:	6f 83       	std	Y+7, r22	; 0x07
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    51a2:	8d 81       	ldd	r24, Y+5	; 0x05
    51a4:	9e 81       	ldd	r25, Y+6	; 0x06
    51a6:	9c 83       	std	Y+4, r25	; 0x04
    51a8:	8b 83       	std	Y+3, r24	; 0x03

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    51aa:	19 82       	std	Y+1, r1	; 0x01
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    51ac:	eb 81       	ldd	r30, Y+3	; 0x03
    51ae:	fc 81       	ldd	r31, Y+4	; 0x04
    51b0:	81 a5       	ldd	r24, Z+41	; 0x29
    51b2:	8a 83       	std	Y+2, r24	; 0x02
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    51b4:	eb 81       	ldd	r30, Y+3	; 0x03
    51b6:	fc 81       	ldd	r31, Y+4	; 0x04
    51b8:	82 e0       	ldi	r24, 0x02	; 2
    51ba:	81 a7       	std	Z+41, r24	; 0x29

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    51bc:	eb 81       	ldd	r30, Y+3	; 0x03
    51be:	fc 81       	ldd	r31, Y+4	; 0x04
    51c0:	85 a1       	ldd	r24, Z+37	; 0x25
    51c2:	96 a1       	ldd	r25, Z+38	; 0x26
    51c4:	a7 a1       	ldd	r26, Z+39	; 0x27
    51c6:	b0 a5       	ldd	r27, Z+40	; 0x28
    51c8:	01 96       	adiw	r24, 0x01	; 1
    51ca:	a1 1d       	adc	r26, r1
    51cc:	b1 1d       	adc	r27, r1
    51ce:	eb 81       	ldd	r30, Y+3	; 0x03
    51d0:	fc 81       	ldd	r31, Y+4	; 0x04
    51d2:	85 a3       	std	Z+37, r24	; 0x25
    51d4:	96 a3       	std	Z+38, r25	; 0x26
    51d6:	a7 a3       	std	Z+39, r26	; 0x27
    51d8:	b0 a7       	std	Z+40, r27	; 0x28

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    51da:	8a 81       	ldd	r24, Y+2	; 0x02
    51dc:	81 30       	cpi	r24, 0x01	; 1
    51de:	09 f0       	breq	.+2      	; 0x51e2 <vTaskNotifyGiveFromISR+0x5c>
    51e0:	50 c0       	rjmp	.+160    	; 0x5282 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    51e2:	80 91 af 03 	lds	r24, 0x03AF
    51e6:	88 23       	and	r24, r24
    51e8:	61 f5       	brne	.+88     	; 0x5242 <vTaskNotifyGiveFromISR+0xbc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    51ea:	8b 81       	ldd	r24, Y+3	; 0x03
    51ec:	9c 81       	ldd	r25, Y+4	; 0x04
    51ee:	02 96       	adiw	r24, 0x02	; 2
    51f0:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    51f4:	eb 81       	ldd	r30, Y+3	; 0x03
    51f6:	fc 81       	ldd	r31, Y+4	; 0x04
    51f8:	96 89       	ldd	r25, Z+22	; 0x16
    51fa:	80 91 a5 03 	lds	r24, 0x03A5
    51fe:	89 17       	cp	r24, r25
    5200:	28 f4       	brcc	.+10     	; 0x520c <vTaskNotifyGiveFromISR+0x86>
    5202:	eb 81       	ldd	r30, Y+3	; 0x03
    5204:	fc 81       	ldd	r31, Y+4	; 0x04
    5206:	86 89       	ldd	r24, Z+22	; 0x16
    5208:	80 93 a5 03 	sts	0x03A5, r24
    520c:	eb 81       	ldd	r30, Y+3	; 0x03
    520e:	fc 81       	ldd	r31, Y+4	; 0x04
    5210:	86 89       	ldd	r24, Z+22	; 0x16
    5212:	28 2f       	mov	r18, r24
    5214:	30 e0       	ldi	r19, 0x00	; 0
    5216:	c9 01       	movw	r24, r18
    5218:	88 0f       	add	r24, r24
    521a:	99 1f       	adc	r25, r25
    521c:	88 0f       	add	r24, r24
    521e:	99 1f       	adc	r25, r25
    5220:	88 0f       	add	r24, r24
    5222:	99 1f       	adc	r25, r25
    5224:	82 0f       	add	r24, r18
    5226:	93 1f       	adc	r25, r19
    5228:	ac 01       	movw	r20, r24
    522a:	40 55       	subi	r20, 0x50	; 80
    522c:	5c 4f       	sbci	r21, 0xFC	; 252
    522e:	8b 81       	ldd	r24, Y+3	; 0x03
    5230:	9c 81       	ldd	r25, Y+4	; 0x04
    5232:	9c 01       	movw	r18, r24
    5234:	2e 5f       	subi	r18, 0xFE	; 254
    5236:	3f 4f       	sbci	r19, 0xFF	; 255
    5238:	ca 01       	movw	r24, r20
    523a:	b9 01       	movw	r22, r18
    523c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <vListInsertEnd>
    5240:	0a c0       	rjmp	.+20     	; 0x5256 <vTaskNotifyGiveFromISR+0xd0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    5242:	8b 81       	ldd	r24, Y+3	; 0x03
    5244:	9c 81       	ldd	r25, Y+4	; 0x04
    5246:	9c 01       	movw	r18, r24
    5248:	24 5f       	subi	r18, 0xF4	; 244
    524a:	3f 4f       	sbci	r19, 0xFF	; 255
    524c:	83 ef       	ldi	r24, 0xF3	; 243
    524e:	93 e0       	ldi	r25, 0x03	; 3
    5250:	b9 01       	movw	r22, r18
    5252:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    5256:	eb 81       	ldd	r30, Y+3	; 0x03
    5258:	fc 81       	ldd	r31, Y+4	; 0x04
    525a:	96 89       	ldd	r25, Z+22	; 0x16
    525c:	e0 91 9f 03 	lds	r30, 0x039F
    5260:	f0 91 a0 03 	lds	r31, 0x03A0
    5264:	86 89       	ldd	r24, Z+22	; 0x16
    5266:	89 17       	cp	r24, r25
    5268:	60 f4       	brcc	.+24     	; 0x5282 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    526a:	8f 81       	ldd	r24, Y+7	; 0x07
    526c:	98 85       	ldd	r25, Y+8	; 0x08
    526e:	00 97       	sbiw	r24, 0x00	; 0
    5270:	29 f0       	breq	.+10     	; 0x527c <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    5272:	ef 81       	ldd	r30, Y+7	; 0x07
    5274:	f8 85       	ldd	r31, Y+8	; 0x08
    5276:	81 e0       	ldi	r24, 0x01	; 1
    5278:	80 83       	st	Z, r24
    527a:	03 c0       	rjmp	.+6      	; 0x5282 <vTaskNotifyGiveFromISR+0xfc>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    527c:	81 e0       	ldi	r24, 0x01	; 1
    527e:	80 93 a8 03 	sts	0x03A8, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    5282:	28 96       	adiw	r28, 0x08	; 8
    5284:	0f b6       	in	r0, 0x3f	; 63
    5286:	f8 94       	cli
    5288:	de bf       	out	0x3e, r29	; 62
    528a:	0f be       	out	0x3f, r0	; 63
    528c:	cd bf       	out	0x3d, r28	; 61
    528e:	cf 91       	pop	r28
    5290:	df 91       	pop	r29
    5292:	08 95       	ret

00005294 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
    5294:	df 93       	push	r29
    5296:	cf 93       	push	r28
    5298:	cd b7       	in	r28, 0x3d	; 61
    529a:	de b7       	in	r29, 0x3e	; 62
    529c:	27 97       	sbiw	r28, 0x07	; 7
    529e:	0f b6       	in	r0, 0x3f	; 63
    52a0:	f8 94       	cli
    52a2:	de bf       	out	0x3e, r29	; 62
    52a4:	0f be       	out	0x3f, r0	; 63
    52a6:	cd bf       	out	0x3d, r28	; 61
    52a8:	9d 83       	std	Y+5, r25	; 0x05
    52aa:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    52ac:	8c 81       	ldd	r24, Y+4	; 0x04
    52ae:	9d 81       	ldd	r25, Y+5	; 0x05
    52b0:	00 97       	sbiw	r24, 0x00	; 0
    52b2:	39 f4       	brne	.+14     	; 0x52c2 <xTaskNotifyStateClear+0x2e>
    52b4:	80 91 9f 03 	lds	r24, 0x039F
    52b8:	90 91 a0 03 	lds	r25, 0x03A0
    52bc:	9f 83       	std	Y+7, r25	; 0x07
    52be:	8e 83       	std	Y+6, r24	; 0x06
    52c0:	04 c0       	rjmp	.+8      	; 0x52ca <xTaskNotifyStateClear+0x36>
    52c2:	8c 81       	ldd	r24, Y+4	; 0x04
    52c4:	9d 81       	ldd	r25, Y+5	; 0x05
    52c6:	9f 83       	std	Y+7, r25	; 0x07
    52c8:	8e 83       	std	Y+6, r24	; 0x06
    52ca:	8e 81       	ldd	r24, Y+6	; 0x06
    52cc:	9f 81       	ldd	r25, Y+7	; 0x07
    52ce:	9b 83       	std	Y+3, r25	; 0x03
    52d0:	8a 83       	std	Y+2, r24	; 0x02

		taskENTER_CRITICAL();
    52d2:	0f b6       	in	r0, 0x3f	; 63
    52d4:	f8 94       	cli
    52d6:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    52d8:	ea 81       	ldd	r30, Y+2	; 0x02
    52da:	fb 81       	ldd	r31, Y+3	; 0x03
    52dc:	81 a5       	ldd	r24, Z+41	; 0x29
    52de:	82 30       	cpi	r24, 0x02	; 2
    52e0:	31 f4       	brne	.+12     	; 0x52ee <xTaskNotifyStateClear+0x5a>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    52e2:	ea 81       	ldd	r30, Y+2	; 0x02
    52e4:	fb 81       	ldd	r31, Y+3	; 0x03
    52e6:	11 a6       	std	Z+41, r1	; 0x29
				xReturn = pdPASS;
    52e8:	81 e0       	ldi	r24, 0x01	; 1
    52ea:	89 83       	std	Y+1, r24	; 0x01
    52ec:	01 c0       	rjmp	.+2      	; 0x52f0 <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
    52ee:	19 82       	std	Y+1, r1	; 0x01
			}
		}
		taskEXIT_CRITICAL();
    52f0:	0f 90       	pop	r0
    52f2:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    52f4:	89 81       	ldd	r24, Y+1	; 0x01
	}
    52f6:	27 96       	adiw	r28, 0x07	; 7
    52f8:	0f b6       	in	r0, 0x3f	; 63
    52fa:	f8 94       	cli
    52fc:	de bf       	out	0x3e, r29	; 62
    52fe:	0f be       	out	0x3f, r0	; 63
    5300:	cd bf       	out	0x3d, r28	; 61
    5302:	cf 91       	pop	r28
    5304:	df 91       	pop	r29
    5306:	08 95       	ret

00005308 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    5308:	df 93       	push	r29
    530a:	cf 93       	push	r28
    530c:	cd b7       	in	r28, 0x3d	; 61
    530e:	de b7       	in	r29, 0x3e	; 62
    5310:	27 97       	sbiw	r28, 0x07	; 7
    5312:	0f b6       	in	r0, 0x3f	; 63
    5314:	f8 94       	cli
    5316:	de bf       	out	0x3e, r29	; 62
    5318:	0f be       	out	0x3f, r0	; 63
    531a:	cd bf       	out	0x3d, r28	; 61
    531c:	9e 83       	std	Y+6, r25	; 0x06
    531e:	8d 83       	std	Y+5, r24	; 0x05
    5320:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    5322:	80 91 a3 03 	lds	r24, 0x03A3
    5326:	90 91 a4 03 	lds	r25, 0x03A4
    532a:	9a 83       	std	Y+2, r25	; 0x02
    532c:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    532e:	80 91 9f 03 	lds	r24, 0x039F
    5332:	90 91 a0 03 	lds	r25, 0x03A0
    5336:	02 96       	adiw	r24, 0x02	; 2
    5338:	0e 94 23 10 	call	0x2046	; 0x2046 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    533c:	8d 81       	ldd	r24, Y+5	; 0x05
    533e:	9e 81       	ldd	r25, Y+6	; 0x06
    5340:	2f ef       	ldi	r18, 0xFF	; 255
    5342:	8f 3f       	cpi	r24, 0xFF	; 255
    5344:	92 07       	cpc	r25, r18
    5346:	81 f4       	brne	.+32     	; 0x5368 <prvAddCurrentTaskToDelayedList+0x60>
    5348:	8f 81       	ldd	r24, Y+7	; 0x07
    534a:	88 23       	and	r24, r24
    534c:	69 f0       	breq	.+26     	; 0x5368 <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    534e:	80 91 9f 03 	lds	r24, 0x039F
    5352:	90 91 a0 03 	lds	r25, 0x03A0
    5356:	9c 01       	movw	r18, r24
    5358:	2e 5f       	subi	r18, 0xFE	; 254
    535a:	3f 4f       	sbci	r19, 0xFF	; 255
    535c:	85 e0       	ldi	r24, 0x05	; 5
    535e:	94 e0       	ldi	r25, 0x04	; 4
    5360:	b9 01       	movw	r22, r18
    5362:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <vListInsertEnd>
    5366:	43 c0       	rjmp	.+134    	; 0x53ee <prvAddCurrentTaskToDelayedList+0xe6>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    5368:	29 81       	ldd	r18, Y+1	; 0x01
    536a:	3a 81       	ldd	r19, Y+2	; 0x02
    536c:	8d 81       	ldd	r24, Y+5	; 0x05
    536e:	9e 81       	ldd	r25, Y+6	; 0x06
    5370:	82 0f       	add	r24, r18
    5372:	93 1f       	adc	r25, r19
    5374:	9c 83       	std	Y+4, r25	; 0x04
    5376:	8b 83       	std	Y+3, r24	; 0x03

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    5378:	e0 91 9f 03 	lds	r30, 0x039F
    537c:	f0 91 a0 03 	lds	r31, 0x03A0
    5380:	8b 81       	ldd	r24, Y+3	; 0x03
    5382:	9c 81       	ldd	r25, Y+4	; 0x04
    5384:	93 83       	std	Z+3, r25	; 0x03
    5386:	82 83       	std	Z+2, r24	; 0x02

			if( xTimeToWake < xConstTickCount )
    5388:	2b 81       	ldd	r18, Y+3	; 0x03
    538a:	3c 81       	ldd	r19, Y+4	; 0x04
    538c:	89 81       	ldd	r24, Y+1	; 0x01
    538e:	9a 81       	ldd	r25, Y+2	; 0x02
    5390:	28 17       	cp	r18, r24
    5392:	39 07       	cpc	r19, r25
    5394:	70 f4       	brcc	.+28     	; 0x53b2 <prvAddCurrentTaskToDelayedList+0xaa>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    5396:	80 91 f1 03 	lds	r24, 0x03F1
    539a:	90 91 f2 03 	lds	r25, 0x03F2
    539e:	20 91 9f 03 	lds	r18, 0x039F
    53a2:	30 91 a0 03 	lds	r19, 0x03A0
    53a6:	2e 5f       	subi	r18, 0xFE	; 254
    53a8:	3f 4f       	sbci	r19, 0xFF	; 255
    53aa:	b9 01       	movw	r22, r18
    53ac:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <vListInsert>
    53b0:	1e c0       	rjmp	.+60     	; 0x53ee <prvAddCurrentTaskToDelayedList+0xe6>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    53b2:	40 91 ef 03 	lds	r20, 0x03EF
    53b6:	50 91 f0 03 	lds	r21, 0x03F0
    53ba:	80 91 9f 03 	lds	r24, 0x039F
    53be:	90 91 a0 03 	lds	r25, 0x03A0
    53c2:	9c 01       	movw	r18, r24
    53c4:	2e 5f       	subi	r18, 0xFE	; 254
    53c6:	3f 4f       	sbci	r19, 0xFF	; 255
    53c8:	ca 01       	movw	r24, r20
    53ca:	b9 01       	movw	r22, r18
    53cc:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    53d0:	20 91 ab 03 	lds	r18, 0x03AB
    53d4:	30 91 ac 03 	lds	r19, 0x03AC
    53d8:	8b 81       	ldd	r24, Y+3	; 0x03
    53da:	9c 81       	ldd	r25, Y+4	; 0x04
    53dc:	82 17       	cp	r24, r18
    53de:	93 07       	cpc	r25, r19
    53e0:	30 f4       	brcc	.+12     	; 0x53ee <prvAddCurrentTaskToDelayedList+0xe6>
				{
					xNextTaskUnblockTime = xTimeToWake;
    53e2:	8b 81       	ldd	r24, Y+3	; 0x03
    53e4:	9c 81       	ldd	r25, Y+4	; 0x04
    53e6:	90 93 ac 03 	sts	0x03AC, r25
    53ea:	80 93 ab 03 	sts	0x03AB, r24

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    53ee:	27 96       	adiw	r28, 0x07	; 7
    53f0:	0f b6       	in	r0, 0x3f	; 63
    53f2:	f8 94       	cli
    53f4:	de bf       	out	0x3e, r29	; 62
    53f6:	0f be       	out	0x3f, r0	; 63
    53f8:	cd bf       	out	0x3d, r28	; 61
    53fa:	cf 91       	pop	r28
    53fc:	df 91       	pop	r29
    53fe:	08 95       	ret

00005400 <__prologue_saves__>:
    5400:	2f 92       	push	r2
    5402:	3f 92       	push	r3
    5404:	4f 92       	push	r4
    5406:	5f 92       	push	r5
    5408:	6f 92       	push	r6
    540a:	7f 92       	push	r7
    540c:	8f 92       	push	r8
    540e:	9f 92       	push	r9
    5410:	af 92       	push	r10
    5412:	bf 92       	push	r11
    5414:	cf 92       	push	r12
    5416:	df 92       	push	r13
    5418:	ef 92       	push	r14
    541a:	ff 92       	push	r15
    541c:	0f 93       	push	r16
    541e:	1f 93       	push	r17
    5420:	cf 93       	push	r28
    5422:	df 93       	push	r29
    5424:	cd b7       	in	r28, 0x3d	; 61
    5426:	de b7       	in	r29, 0x3e	; 62
    5428:	ca 1b       	sub	r28, r26
    542a:	db 0b       	sbc	r29, r27
    542c:	0f b6       	in	r0, 0x3f	; 63
    542e:	f8 94       	cli
    5430:	de bf       	out	0x3e, r29	; 62
    5432:	0f be       	out	0x3f, r0	; 63
    5434:	cd bf       	out	0x3d, r28	; 61
    5436:	09 94       	ijmp

00005438 <__epilogue_restores__>:
    5438:	2a 88       	ldd	r2, Y+18	; 0x12
    543a:	39 88       	ldd	r3, Y+17	; 0x11
    543c:	48 88       	ldd	r4, Y+16	; 0x10
    543e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5440:	6e 84       	ldd	r6, Y+14	; 0x0e
    5442:	7d 84       	ldd	r7, Y+13	; 0x0d
    5444:	8c 84       	ldd	r8, Y+12	; 0x0c
    5446:	9b 84       	ldd	r9, Y+11	; 0x0b
    5448:	aa 84       	ldd	r10, Y+10	; 0x0a
    544a:	b9 84       	ldd	r11, Y+9	; 0x09
    544c:	c8 84       	ldd	r12, Y+8	; 0x08
    544e:	df 80       	ldd	r13, Y+7	; 0x07
    5450:	ee 80       	ldd	r14, Y+6	; 0x06
    5452:	fd 80       	ldd	r15, Y+5	; 0x05
    5454:	0c 81       	ldd	r16, Y+4	; 0x04
    5456:	1b 81       	ldd	r17, Y+3	; 0x03
    5458:	aa 81       	ldd	r26, Y+2	; 0x02
    545a:	b9 81       	ldd	r27, Y+1	; 0x01
    545c:	ce 0f       	add	r28, r30
    545e:	d1 1d       	adc	r29, r1
    5460:	0f b6       	in	r0, 0x3f	; 63
    5462:	f8 94       	cli
    5464:	de bf       	out	0x3e, r29	; 62
    5466:	0f be       	out	0x3f, r0	; 63
    5468:	cd bf       	out	0x3d, r28	; 61
    546a:	ed 01       	movw	r28, r26
    546c:	08 95       	ret

0000546e <memcpy>:
    546e:	fb 01       	movw	r30, r22
    5470:	dc 01       	movw	r26, r24
    5472:	02 c0       	rjmp	.+4      	; 0x5478 <memcpy+0xa>
    5474:	01 90       	ld	r0, Z+
    5476:	0d 92       	st	X+, r0
    5478:	41 50       	subi	r20, 0x01	; 1
    547a:	50 40       	sbci	r21, 0x00	; 0
    547c:	d8 f7       	brcc	.-10     	; 0x5474 <memcpy+0x6>
    547e:	08 95       	ret

00005480 <_exit>:
    5480:	f8 94       	cli

00005482 <__stop_program>:
    5482:	ff cf       	rjmp	.-2      	; 0x5482 <__stop_program>
