
RTC_OLD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000479a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00800060  0000479a  0000482e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800116  00800116  000048e4  2**0
                  ALLOC
  3 .stab         000036c0  00000000  00000000  000048e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c92  00000000  00000000  00007fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008d76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ab2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ba1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c7c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c928  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cbb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d383  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 07 21 	jmp	0x420e	; 0x420e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 31       	cpi	r26, 0x16	; 22
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e1       	ldi	r26, 0x16	; 22
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 31       	cpi	r26, 0x1F	; 31
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fe 11 	call	0x23fc	; 0x23fc <main>
      8a:	0c 94 cb 23 	jmp	0x4796	; 0x4796 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 94 23 	jmp	0x4728	; 0x4728 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ef       	ldi	r26, 0xF2	; 242
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b0 23 	jmp	0x4760	; 0x4760 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a0 23 	jmp	0x4740	; 0x4740 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bc 23 	jmp	0x4778	; 0x4778 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a0 23 	jmp	0x4740	; 0x4740 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bc 23 	jmp	0x4778	; 0x4778 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 94 23 	jmp	0x4728	; 0x4728 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 ef       	ldi	r24, 0xF2	; 242
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b0 23 	jmp	0x4760	; 0x4760 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a0 23 	jmp	0x4740	; 0x4740 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 bc 23 	jmp	0x4778	; 0x4778 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a0 23 	jmp	0x4740	; 0x4740 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 bc 23 	jmp	0x4778	; 0x4778 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a0 23 	jmp	0x4740	; 0x4740 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 bc 23 	jmp	0x4778	; 0x4778 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a4 23 	jmp	0x4748	; 0x4748 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c0 23 	jmp	0x4780	; 0x4780 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_vsetPINDir>:
#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_vsetPINDir+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_vsetPINDir+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	82 34       	cpi	r24, 0x42	; 66
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <DIO_vsetPINDir+0x2a>
     b6e:	44 c0       	rjmp	.+136    	; 0xbf8 <DIO_vsetPINDir+0xb2>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	23 34       	cpi	r18, 0x43	; 67
     b76:	31 05       	cpc	r19, r1
     b78:	34 f4       	brge	.+12     	; 0xb86 <DIO_vsetPINDir+0x40>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	81 34       	cpi	r24, 0x41	; 65
     b80:	91 05       	cpc	r25, r1
     b82:	71 f0       	breq	.+28     	; 0xba0 <DIO_vsetPINDir+0x5a>
     b84:	bc c0       	rjmp	.+376    	; 0xcfe <DIO_vsetPINDir+0x1b8>
     b86:	2c 81       	ldd	r18, Y+4	; 0x04
     b88:	3d 81       	ldd	r19, Y+5	; 0x05
     b8a:	23 34       	cpi	r18, 0x43	; 67
     b8c:	31 05       	cpc	r19, r1
     b8e:	09 f4       	brne	.+2      	; 0xb92 <DIO_vsetPINDir+0x4c>
     b90:	5f c0       	rjmp	.+190    	; 0xc50 <DIO_vsetPINDir+0x10a>
     b92:	8c 81       	ldd	r24, Y+4	; 0x04
     b94:	9d 81       	ldd	r25, Y+5	; 0x05
     b96:	84 34       	cpi	r24, 0x44	; 68
     b98:	91 05       	cpc	r25, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <DIO_vsetPINDir+0x58>
     b9c:	85 c0       	rjmp	.+266    	; 0xca8 <DIO_vsetPINDir+0x162>
     b9e:	af c0       	rjmp	.+350    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	{
		
		
		case 'A':
		if(direction==1)
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	a1 f4       	brne	.+40     	; 0xbce <DIO_vsetPINDir+0x88>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
     ba6:	aa e3       	ldi	r26, 0x3A	; 58
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e3       	ldi	r30, 0x3A	; 58
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_vsetPINDir+0x7e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_vsetPINDir+0x7a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	98 c0       	rjmp	.+304    	; 0xcfe <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
     bce:	aa e3       	ldi	r26, 0x3A	; 58
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	ea e3       	ldi	r30, 0x3A	; 58
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_vsetPINDir+0xa6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_vsetPINDir+0xa2>
     bf0:	80 95       	com	r24
     bf2:	84 23       	and	r24, r20
     bf4:	8c 93       	st	X, r24
     bf6:	83 c0       	rjmp	.+262    	; 0xcfe <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'B':
		if(direction==1)
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	a1 f4       	brne	.+40     	; 0xc26 <DIO_vsetPINDir+0xe0>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
     bfe:	a7 e3       	ldi	r26, 0x37	; 55
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e7 e3       	ldi	r30, 0x37	; 55
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	48 2f       	mov	r20, r24
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	02 2e       	mov	r0, r18
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <DIO_vsetPINDir+0xd6>
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	0a 94       	dec	r0
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <DIO_vsetPINDir+0xd2>
     c20:	84 2b       	or	r24, r20
     c22:	8c 93       	st	X, r24
     c24:	6c c0       	rjmp	.+216    	; 0xcfe <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
     c26:	a7 e3       	ldi	r26, 0x37	; 55
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e7 e3       	ldi	r30, 0x37	; 55
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	48 2f       	mov	r20, r24
     c32:	8a 81       	ldd	r24, Y+2	; 0x02
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	02 2e       	mov	r0, r18
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_vsetPINDir+0xfe>
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <DIO_vsetPINDir+0xfa>
     c48:	80 95       	com	r24
     c4a:	84 23       	and	r24, r20
     c4c:	8c 93       	st	X, r24
     c4e:	57 c0       	rjmp	.+174    	; 0xcfe <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'C':
		if(direction==1)
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	a1 f4       	brne	.+40     	; 0xc7e <DIO_vsetPINDir+0x138>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
     c56:	a4 e3       	ldi	r26, 0x34	; 52
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e4 e3       	ldi	r30, 0x34	; 52
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	48 2f       	mov	r20, r24
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 2e       	mov	r0, r18
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <DIO_vsetPINDir+0x12e>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	0a 94       	dec	r0
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <DIO_vsetPINDir+0x12a>
     c78:	84 2b       	or	r24, r20
     c7a:	8c 93       	st	X, r24
     c7c:	40 c0       	rjmp	.+128    	; 0xcfe <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
     c7e:	a4 e3       	ldi	r26, 0x34	; 52
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e4 e3       	ldi	r30, 0x34	; 52
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	48 2f       	mov	r20, r24
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	02 2e       	mov	r0, r18
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <DIO_vsetPINDir+0x156>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	0a 94       	dec	r0
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <DIO_vsetPINDir+0x152>
     ca0:	80 95       	com	r24
     ca2:	84 23       	and	r24, r20
     ca4:	8c 93       	st	X, r24
     ca6:	2b c0       	rjmp	.+86     	; 0xcfe <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'D':
		if(direction==1)
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	a1 f4       	brne	.+40     	; 0xcd6 <DIO_vsetPINDir+0x190>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
     cae:	a1 e3       	ldi	r26, 0x31	; 49
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e1 e3       	ldi	r30, 0x31	; 49
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	48 2f       	mov	r20, r24
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 2e       	mov	r0, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <DIO_vsetPINDir+0x186>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	0a 94       	dec	r0
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <DIO_vsetPINDir+0x182>
     cd0:	84 2b       	or	r24, r20
     cd2:	8c 93       	st	X, r24
     cd4:	14 c0       	rjmp	.+40     	; 0xcfe <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
     cd6:	a1 e3       	ldi	r26, 0x31	; 49
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e1 e3       	ldi	r30, 0x31	; 49
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 2e       	mov	r0, r18
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <DIO_vsetPINDir+0x1ae>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <DIO_vsetPINDir+0x1aa>
     cf8:	80 95       	com	r24
     cfa:	84 23       	and	r24, r20
     cfc:	8c 93       	st	X, r24
		}
		break;
		default: 
		break;
	}
}
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <DIO_write>:


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <DIO_write+0x6>
     d14:	00 d0       	rcall	.+0      	; 0xd16 <DIO_write+0x8>
     d16:	0f 92       	push	r0
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	89 83       	std	Y+1, r24	; 0x01
     d1e:	6a 83       	std	Y+2, r22	; 0x02
     d20:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	3d 83       	std	Y+5, r19	; 0x05
     d2a:	2c 83       	std	Y+4, r18	; 0x04
     d2c:	8c 81       	ldd	r24, Y+4	; 0x04
     d2e:	9d 81       	ldd	r25, Y+5	; 0x05
     d30:	82 34       	cpi	r24, 0x42	; 66
     d32:	91 05       	cpc	r25, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <DIO_write+0x2a>
     d36:	44 c0       	rjmp	.+136    	; 0xdc0 <DIO_write+0xb2>
     d38:	2c 81       	ldd	r18, Y+4	; 0x04
     d3a:	3d 81       	ldd	r19, Y+5	; 0x05
     d3c:	23 34       	cpi	r18, 0x43	; 67
     d3e:	31 05       	cpc	r19, r1
     d40:	34 f4       	brge	.+12     	; 0xd4e <DIO_write+0x40>
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	9d 81       	ldd	r25, Y+5	; 0x05
     d46:	81 34       	cpi	r24, 0x41	; 65
     d48:	91 05       	cpc	r25, r1
     d4a:	71 f0       	breq	.+28     	; 0xd68 <DIO_write+0x5a>
     d4c:	bc c0       	rjmp	.+376    	; 0xec6 <DIO_write+0x1b8>
     d4e:	2c 81       	ldd	r18, Y+4	; 0x04
     d50:	3d 81       	ldd	r19, Y+5	; 0x05
     d52:	23 34       	cpi	r18, 0x43	; 67
     d54:	31 05       	cpc	r19, r1
     d56:	09 f4       	brne	.+2      	; 0xd5a <DIO_write+0x4c>
     d58:	5f c0       	rjmp	.+190    	; 0xe18 <DIO_write+0x10a>
     d5a:	8c 81       	ldd	r24, Y+4	; 0x04
     d5c:	9d 81       	ldd	r25, Y+5	; 0x05
     d5e:	84 34       	cpi	r24, 0x44	; 68
     d60:	91 05       	cpc	r25, r1
     d62:	09 f4       	brne	.+2      	; 0xd66 <DIO_write+0x58>
     d64:	85 c0       	rjmp	.+266    	; 0xe70 <DIO_write+0x162>
     d66:	af c0       	rjmp	.+350    	; 0xec6 <DIO_write+0x1b8>
	{
		case 'A' :
		
		if(outputvalue==1)
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	a1 f4       	brne	.+40     	; 0xd96 <DIO_write+0x88>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
     d6e:	ab e3       	ldi	r26, 0x3B	; 59
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	eb e3       	ldi	r30, 0x3B	; 59
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 2e       	mov	r0, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <DIO_write+0x7e>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <DIO_write+0x7a>
     d90:	84 2b       	or	r24, r20
     d92:	8c 93       	st	X, r24
     d94:	98 c0       	rjmp	.+304    	; 0xec6 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
     d96:	ab e3       	ldi	r26, 0x3B	; 59
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	eb e3       	ldi	r30, 0x3B	; 59
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <DIO_write+0xa6>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <DIO_write+0xa2>
     db8:	80 95       	com	r24
     dba:	84 23       	and	r24, r20
     dbc:	8c 93       	st	X, r24
     dbe:	83 c0       	rjmp	.+262    	; 0xec6 <DIO_write+0x1b8>
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	a1 f4       	brne	.+40     	; 0xdee <DIO_write+0xe0>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
     dc6:	a8 e3       	ldi	r26, 0x38	; 56
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e3       	ldi	r30, 0x38	; 56
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	48 2f       	mov	r20, r24
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 2e       	mov	r0, r18
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <DIO_write+0xd6>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	0a 94       	dec	r0
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <DIO_write+0xd2>
     de8:	84 2b       	or	r24, r20
     dea:	8c 93       	st	X, r24
     dec:	6c c0       	rjmp	.+216    	; 0xec6 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
     dee:	a8 e3       	ldi	r26, 0x38	; 56
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e8 e3       	ldi	r30, 0x38	; 56
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	48 2f       	mov	r20, r24
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 2e       	mov	r0, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_write+0xfe>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_write+0xfa>
     e10:	80 95       	com	r24
     e12:	84 23       	and	r24, r20
     e14:	8c 93       	st	X, r24
     e16:	57 c0       	rjmp	.+174    	; 0xec6 <DIO_write+0x1b8>
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	a1 f4       	brne	.+40     	; 0xe46 <DIO_write+0x138>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
     e1e:	a5 e3       	ldi	r26, 0x35	; 53
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e5 e3       	ldi	r30, 0x35	; 53
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_write+0x12e>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_write+0x12a>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	40 c0       	rjmp	.+128    	; 0xec6 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
     e46:	a5 e3       	ldi	r26, 0x35	; 53
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e5 e3       	ldi	r30, 0x35	; 53
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <DIO_write+0x156>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <DIO_write+0x152>
     e68:	80 95       	com	r24
     e6a:	84 23       	and	r24, r20
     e6c:	8c 93       	st	X, r24
     e6e:	2b c0       	rjmp	.+86     	; 0xec6 <DIO_write+0x1b8>
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	a1 f4       	brne	.+40     	; 0xe9e <DIO_write+0x190>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
     e76:	a2 e3       	ldi	r26, 0x32	; 50
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e2 e3       	ldi	r30, 0x32	; 50
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_write+0x186>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_write+0x182>
     e98:	84 2b       	or	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	14 c0       	rjmp	.+40     	; 0xec6 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
     e9e:	a2 e3       	ldi	r26, 0x32	; 50
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e2 e3       	ldi	r30, 0x32	; 50
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DIO_write+0x1ae>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <DIO_write+0x1aa>
     ec0:	80 95       	com	r24
     ec2:	84 23       	and	r24, r20
     ec4:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	00 d0       	rcall	.+0      	; 0xedc <DIO_u8read+0x6>
     edc:	00 d0       	rcall	.+0      	; 0xede <DIO_u8read+0x8>
     ede:	0f 92       	push	r0
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	8a 83       	std	Y+2, r24	; 0x02
     ee6:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char return_value=0;
     ee8:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	3d 83       	std	Y+5, r19	; 0x05
     ef2:	2c 83       	std	Y+4, r18	; 0x04
     ef4:	4c 81       	ldd	r20, Y+4	; 0x04
     ef6:	5d 81       	ldd	r21, Y+5	; 0x05
     ef8:	42 34       	cpi	r20, 0x42	; 66
     efa:	51 05       	cpc	r21, r1
     efc:	b1 f1       	breq	.+108    	; 0xf6a <DIO_u8read+0x94>
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	9d 81       	ldd	r25, Y+5	; 0x05
     f02:	83 34       	cpi	r24, 0x43	; 67
     f04:	91 05       	cpc	r25, r1
     f06:	34 f4       	brge	.+12     	; 0xf14 <DIO_u8read+0x3e>
     f08:	2c 81       	ldd	r18, Y+4	; 0x04
     f0a:	3d 81       	ldd	r19, Y+5	; 0x05
     f0c:	21 34       	cpi	r18, 0x41	; 65
     f0e:	31 05       	cpc	r19, r1
     f10:	71 f0       	breq	.+28     	; 0xf2e <DIO_u8read+0x58>
     f12:	84 c0       	rjmp	.+264    	; 0x101c <DIO_u8read+0x146>
     f14:	4c 81       	ldd	r20, Y+4	; 0x04
     f16:	5d 81       	ldd	r21, Y+5	; 0x05
     f18:	43 34       	cpi	r20, 0x43	; 67
     f1a:	51 05       	cpc	r21, r1
     f1c:	09 f4       	brne	.+2      	; 0xf20 <DIO_u8read+0x4a>
     f1e:	43 c0       	rjmp	.+134    	; 0xfa6 <DIO_u8read+0xd0>
     f20:	8c 81       	ldd	r24, Y+4	; 0x04
     f22:	9d 81       	ldd	r25, Y+5	; 0x05
     f24:	84 34       	cpi	r24, 0x44	; 68
     f26:	91 05       	cpc	r25, r1
     f28:	09 f4       	brne	.+2      	; 0xf2c <DIO_u8read+0x56>
     f2a:	5b c0       	rjmp	.+182    	; 0xfe2 <DIO_u8read+0x10c>
     f2c:	77 c0       	rjmp	.+238    	; 0x101c <DIO_u8read+0x146>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
     f2e:	e9 e3       	ldi	r30, 0x39	; 57
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	50 e0       	ldi	r21, 0x00	; 0
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_u8read+0x72>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	2a 95       	dec	r18
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_u8read+0x6e>
     f4c:	9a 01       	movw	r18, r20
     f4e:	28 23       	and	r18, r24
     f50:	39 23       	and	r19, r25
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	88 2f       	mov	r24, r24
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	a9 01       	movw	r20, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_u8read+0x8a>
     f5c:	55 95       	asr	r21
     f5e:	47 95       	ror	r20
     f60:	8a 95       	dec	r24
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_u8read+0x86>
     f64:	ca 01       	movw	r24, r20
     f66:	89 83       	std	Y+1, r24	; 0x01
     f68:	59 c0       	rjmp	.+178    	; 0x101c <DIO_u8read+0x146>
		break;
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
     f6a:	e6 e3       	ldi	r30, 0x36	; 54
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <DIO_u8read+0xae>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	2a 95       	dec	r18
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <DIO_u8read+0xaa>
     f88:	9a 01       	movw	r18, r20
     f8a:	28 23       	and	r18, r24
     f8c:	39 23       	and	r19, r25
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	a9 01       	movw	r20, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <DIO_u8read+0xc6>
     f98:	55 95       	asr	r21
     f9a:	47 95       	ror	r20
     f9c:	8a 95       	dec	r24
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <DIO_u8read+0xc2>
     fa0:	ca 01       	movw	r24, r20
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	3b c0       	rjmp	.+118    	; 0x101c <DIO_u8read+0x146>
		break;
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
     fa6:	e3 e3       	ldi	r30, 0x33	; 51
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <DIO_u8read+0xea>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	2a 95       	dec	r18
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <DIO_u8read+0xe6>
     fc4:	9a 01       	movw	r18, r20
     fc6:	28 23       	and	r18, r24
     fc8:	39 23       	and	r19, r25
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	88 2f       	mov	r24, r24
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	a9 01       	movw	r20, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <DIO_u8read+0x102>
     fd4:	55 95       	asr	r21
     fd6:	47 95       	ror	r20
     fd8:	8a 95       	dec	r24
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <DIO_u8read+0xfe>
     fdc:	ca 01       	movw	r24, r20
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	1d c0       	rjmp	.+58     	; 0x101c <DIO_u8read+0x146>
		break;
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
     fe2:	e0 e3       	ldi	r30, 0x30	; 48
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_u8read+0x126>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	2a 95       	dec	r18
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_u8read+0x122>
    1000:	9a 01       	movw	r18, r20
    1002:	28 23       	and	r18, r24
    1004:	39 23       	and	r19, r25
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	88 2f       	mov	r24, r24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	a9 01       	movw	r20, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_u8read+0x13e>
    1010:	55 95       	asr	r21
    1012:	47 95       	ror	r20
    1014:	8a 95       	dec	r24
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_u8read+0x13a>
    1018:	ca 01       	movw	r24, r20
    101a:	89 83       	std	Y+1, r24	; 0x01
		break;
		default: 
		break;
	}
	return return_value ;
    101c:	89 81       	ldd	r24, Y+1	; 0x01
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	00 d0       	rcall	.+0      	; 0x1034 <DIO_toggle+0x6>
    1034:	00 d0       	rcall	.+0      	; 0x1036 <DIO_toggle+0x8>
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	82 34       	cpi	r24, 0x42	; 66
    104e:	91 05       	cpc	r25, r1
    1050:	51 f1       	breq	.+84     	; 0x10a6 <DIO_toggle+0x78>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	23 34       	cpi	r18, 0x43	; 67
    1058:	31 05       	cpc	r19, r1
    105a:	34 f4       	brge	.+12     	; 0x1068 <DIO_toggle+0x3a>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	81 34       	cpi	r24, 0x41	; 65
    1062:	91 05       	cpc	r25, r1
    1064:	61 f0       	breq	.+24     	; 0x107e <DIO_toggle+0x50>
    1066:	5a c0       	rjmp	.+180    	; 0x111c <DIO_toggle+0xee>
    1068:	2b 81       	ldd	r18, Y+3	; 0x03
    106a:	3c 81       	ldd	r19, Y+4	; 0x04
    106c:	23 34       	cpi	r18, 0x43	; 67
    106e:	31 05       	cpc	r19, r1
    1070:	71 f1       	breq	.+92     	; 0x10ce <DIO_toggle+0xa0>
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	84 34       	cpi	r24, 0x44	; 68
    1078:	91 05       	cpc	r25, r1
    107a:	e9 f1       	breq	.+122    	; 0x10f6 <DIO_toggle+0xc8>
    107c:	4f c0       	rjmp	.+158    	; 0x111c <DIO_toggle+0xee>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
    107e:	ab e3       	ldi	r26, 0x3B	; 59
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	eb e3       	ldi	r30, 0x3B	; 59
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 2e       	mov	r0, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <DIO_toggle+0x6e>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <DIO_toggle+0x6a>
    10a0:	84 27       	eor	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	3b c0       	rjmp	.+118    	; 0x111c <DIO_toggle+0xee>
		break;
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
    10a6:	a8 e3       	ldi	r26, 0x38	; 56
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 e3       	ldi	r30, 0x38	; 56
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <DIO_toggle+0x96>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <DIO_toggle+0x92>
    10c8:	84 27       	eor	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	27 c0       	rjmp	.+78     	; 0x111c <DIO_toggle+0xee>
		break;
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
    10ce:	a5 e3       	ldi	r26, 0x35	; 53
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e5 e3       	ldi	r30, 0x35	; 53
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <DIO_toggle+0xbe>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <DIO_toggle+0xba>
    10f0:	84 27       	eor	r24, r20
    10f2:	8c 93       	st	X, r24
    10f4:	13 c0       	rjmp	.+38     	; 0x111c <DIO_toggle+0xee>
		break;
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
    10f6:	a2 e3       	ldi	r26, 0x32	; 50
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e2 e3       	ldi	r30, 0x32	; 50
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	48 2f       	mov	r20, r24
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 2e       	mov	r0, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_toggle+0xe6>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_toggle+0xe2>
    1118:	84 27       	eor	r24, r20
    111a:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <DIO_set_port_direction>:
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	00 d0       	rcall	.+0      	; 0x1130 <DIO_set_port_direction+0x6>
    1130:	00 d0       	rcall	.+0      	; 0x1132 <DIO_set_port_direction+0x8>
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	3c 83       	std	Y+4, r19	; 0x04
    1142:	2b 83       	std	Y+3, r18	; 0x03
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	9c 81       	ldd	r25, Y+4	; 0x04
    1148:	82 34       	cpi	r24, 0x42	; 66
    114a:	91 05       	cpc	r25, r1
    114c:	d9 f0       	breq	.+54     	; 0x1184 <DIO_set_port_direction+0x5a>
    114e:	2b 81       	ldd	r18, Y+3	; 0x03
    1150:	3c 81       	ldd	r19, Y+4	; 0x04
    1152:	23 34       	cpi	r18, 0x43	; 67
    1154:	31 05       	cpc	r19, r1
    1156:	34 f4       	brge	.+12     	; 0x1164 <DIO_set_port_direction+0x3a>
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 34       	cpi	r24, 0x41	; 65
    115e:	91 05       	cpc	r25, r1
    1160:	61 f0       	breq	.+24     	; 0x117a <DIO_set_port_direction+0x50>
    1162:	1e c0       	rjmp	.+60     	; 0x11a0 <DIO_set_port_direction+0x76>
    1164:	2b 81       	ldd	r18, Y+3	; 0x03
    1166:	3c 81       	ldd	r19, Y+4	; 0x04
    1168:	23 34       	cpi	r18, 0x43	; 67
    116a:	31 05       	cpc	r19, r1
    116c:	81 f0       	breq	.+32     	; 0x118e <DIO_set_port_direction+0x64>
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	84 34       	cpi	r24, 0x44	; 68
    1174:	91 05       	cpc	r25, r1
    1176:	81 f0       	breq	.+32     	; 0x1198 <DIO_set_port_direction+0x6e>
    1178:	13 c0       	rjmp	.+38     	; 0x11a0 <DIO_set_port_direction+0x76>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
    117a:	ea e3       	ldi	r30, 0x3A	; 58
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	80 83       	st	Z, r24
    1182:	0e c0       	rjmp	.+28     	; 0x11a0 <DIO_set_port_direction+0x76>
		break ;
		case 'B':
		DDRB=direction; //set the direction of port B
    1184:	e7 e3       	ldi	r30, 0x37	; 55
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	80 83       	st	Z, r24
    118c:	09 c0       	rjmp	.+18     	; 0x11a0 <DIO_set_port_direction+0x76>
		break ;
		case 'C' :
		DDRC=direction; //set the direction of port C
    118e:	e4 e3       	ldi	r30, 0x34	; 52
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	80 83       	st	Z, r24
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <DIO_set_port_direction+0x76>
		break ;
		case 'D':
		DDRD=direction; //set the direction of port D
    1198:	e1 e3       	ldi	r30, 0x31	; 49
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	80 83       	st	Z, r24
		break ;
		default:
		break ;
	}
	
}
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <DIO_write_port>:
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <DIO_write_port+0x6>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <DIO_write_port+0x8>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	3c 83       	std	Y+4, r19	; 0x04
    11c6:	2b 83       	std	Y+3, r18	; 0x03
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	82 34       	cpi	r24, 0x42	; 66
    11ce:	91 05       	cpc	r25, r1
    11d0:	d9 f0       	breq	.+54     	; 0x1208 <DIO_write_port+0x5a>
    11d2:	2b 81       	ldd	r18, Y+3	; 0x03
    11d4:	3c 81       	ldd	r19, Y+4	; 0x04
    11d6:	23 34       	cpi	r18, 0x43	; 67
    11d8:	31 05       	cpc	r19, r1
    11da:	34 f4       	brge	.+12     	; 0x11e8 <DIO_write_port+0x3a>
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	81 34       	cpi	r24, 0x41	; 65
    11e2:	91 05       	cpc	r25, r1
    11e4:	61 f0       	breq	.+24     	; 0x11fe <DIO_write_port+0x50>
    11e6:	1e c0       	rjmp	.+60     	; 0x1224 <DIO_write_port+0x76>
    11e8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ea:	3c 81       	ldd	r19, Y+4	; 0x04
    11ec:	23 34       	cpi	r18, 0x43	; 67
    11ee:	31 05       	cpc	r19, r1
    11f0:	81 f0       	breq	.+32     	; 0x1212 <DIO_write_port+0x64>
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	84 34       	cpi	r24, 0x44	; 68
    11f8:	91 05       	cpc	r25, r1
    11fa:	81 f0       	breq	.+32     	; 0x121c <DIO_write_port+0x6e>
    11fc:	13 c0       	rjmp	.+38     	; 0x1224 <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
    11fe:	eb e3       	ldi	r30, 0x3B	; 59
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	80 83       	st	Z, r24
    1206:	0e c0       	rjmp	.+28     	; 0x1224 <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
    1208:	e8 e3       	ldi	r30, 0x38	; 56
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	80 83       	st	Z, r24
    1210:	09 c0       	rjmp	.+18     	; 0x1224 <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
    1212:	e5 e3       	ldi	r30, 0x35	; 53
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	80 83       	st	Z, r24
    121a:	04 c0       	rjmp	.+8      	; 0x1224 <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
    121c:	e2 e3       	ldi	r30, 0x32	; 50
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	80 83       	st	Z, r24
		break ;
		default:
		 break ;
	}
}
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <DIO_read_port>:

unsigned char DIO_read_port(unsigned char portname)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	00 d0       	rcall	.+0      	; 0x1238 <DIO_read_port+0x6>
    1238:	00 d0       	rcall	.+0      	; 0x123a <DIO_read_port+0x8>
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char return_val=0;
    1240:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	3c 83       	std	Y+4, r19	; 0x04
    124a:	2b 83       	std	Y+3, r18	; 0x03
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	9c 81       	ldd	r25, Y+4	; 0x04
    1250:	82 34       	cpi	r24, 0x42	; 66
    1252:	91 05       	cpc	r25, r1
    1254:	d9 f0       	breq	.+54     	; 0x128c <DIO_read_port+0x5a>
    1256:	2b 81       	ldd	r18, Y+3	; 0x03
    1258:	3c 81       	ldd	r19, Y+4	; 0x04
    125a:	23 34       	cpi	r18, 0x43	; 67
    125c:	31 05       	cpc	r19, r1
    125e:	34 f4       	brge	.+12     	; 0x126c <DIO_read_port+0x3a>
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	81 34       	cpi	r24, 0x41	; 65
    1266:	91 05       	cpc	r25, r1
    1268:	61 f0       	breq	.+24     	; 0x1282 <DIO_read_port+0x50>
    126a:	1e c0       	rjmp	.+60     	; 0x12a8 <DIO_read_port+0x76>
    126c:	2b 81       	ldd	r18, Y+3	; 0x03
    126e:	3c 81       	ldd	r19, Y+4	; 0x04
    1270:	23 34       	cpi	r18, 0x43	; 67
    1272:	31 05       	cpc	r19, r1
    1274:	81 f0       	breq	.+32     	; 0x1296 <DIO_read_port+0x64>
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	84 34       	cpi	r24, 0x44	; 68
    127c:	91 05       	cpc	r25, r1
    127e:	81 f0       	breq	.+32     	; 0x12a0 <DIO_read_port+0x6e>
    1280:	13 c0       	rjmp	.+38     	; 0x12a8 <DIO_read_port+0x76>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
    1282:	e9 e3       	ldi	r30, 0x39	; 57
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	0e c0       	rjmp	.+28     	; 0x12a8 <DIO_read_port+0x76>
		break ;
		case 'B':
		return_val=PINB; // read the value of port B 
    128c:	e6 e3       	ldi	r30, 0x36	; 54
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	09 c0       	rjmp	.+18     	; 0x12a8 <DIO_read_port+0x76>
		break ;
		case 'C' :
		return_val=PINC; // read the value of port C 
    1296:	e3 e3       	ldi	r30, 0x33	; 51
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	04 c0       	rjmp	.+8      	; 0x12a8 <DIO_read_port+0x76>
		break ;
		case 'D':
		return_val=PIND; // read the value of port D 
    12a0:	e0 e3       	ldi	r30, 0x30	; 48
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	89 83       	std	Y+1, r24	; 0x01
		break ;
		default:
		break ;
	}
	return return_val;
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	00 d0       	rcall	.+0      	; 0x12be <DIO_vconnectpullup+0x6>
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <DIO_vconnectpullup+0x8>
    12c0:	0f 92       	push	r0
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	6a 83       	std	Y+2, r22	; 0x02
    12ca:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	3d 83       	std	Y+5, r19	; 0x05
    12d4:	2c 83       	std	Y+4, r18	; 0x04
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	82 34       	cpi	r24, 0x42	; 66
    12dc:	91 05       	cpc	r25, r1
    12de:	09 f4       	brne	.+2      	; 0x12e2 <DIO_vconnectpullup+0x2a>
    12e0:	44 c0       	rjmp	.+136    	; 0x136a <DIO_vconnectpullup+0xb2>
    12e2:	2c 81       	ldd	r18, Y+4	; 0x04
    12e4:	3d 81       	ldd	r19, Y+5	; 0x05
    12e6:	23 34       	cpi	r18, 0x43	; 67
    12e8:	31 05       	cpc	r19, r1
    12ea:	34 f4       	brge	.+12     	; 0x12f8 <DIO_vconnectpullup+0x40>
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
    12ee:	9d 81       	ldd	r25, Y+5	; 0x05
    12f0:	81 34       	cpi	r24, 0x41	; 65
    12f2:	91 05       	cpc	r25, r1
    12f4:	71 f0       	breq	.+28     	; 0x1312 <DIO_vconnectpullup+0x5a>
    12f6:	bc c0       	rjmp	.+376    	; 0x1470 <DIO_vconnectpullup+0x1b8>
    12f8:	2c 81       	ldd	r18, Y+4	; 0x04
    12fa:	3d 81       	ldd	r19, Y+5	; 0x05
    12fc:	23 34       	cpi	r18, 0x43	; 67
    12fe:	31 05       	cpc	r19, r1
    1300:	09 f4       	brne	.+2      	; 0x1304 <DIO_vconnectpullup+0x4c>
    1302:	5f c0       	rjmp	.+190    	; 0x13c2 <DIO_vconnectpullup+0x10a>
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	9d 81       	ldd	r25, Y+5	; 0x05
    1308:	84 34       	cpi	r24, 0x44	; 68
    130a:	91 05       	cpc	r25, r1
    130c:	09 f4       	brne	.+2      	; 0x1310 <DIO_vconnectpullup+0x58>
    130e:	85 c0       	rjmp	.+266    	; 0x141a <DIO_vconnectpullup+0x162>
    1310:	af c0       	rjmp	.+350    	; 0x1470 <DIO_vconnectpullup+0x1b8>
	{
		case 'A':
		if(connect_pullup==1)
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	a1 f4       	brne	.+40     	; 0x1340 <DIO_vconnectpullup+0x88>
		{
			SET_BIT(PORTA,pinnumber);
    1318:	ab e3       	ldi	r26, 0x3B	; 59
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	eb e3       	ldi	r30, 0x3B	; 59
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	48 2f       	mov	r20, r24
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	02 2e       	mov	r0, r18
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <DIO_vconnectpullup+0x7e>
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	0a 94       	dec	r0
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <DIO_vconnectpullup+0x7a>
    133a:	84 2b       	or	r24, r20
    133c:	8c 93       	st	X, r24
    133e:	98 c0       	rjmp	.+304    	; 0x1470 <DIO_vconnectpullup+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
    1340:	ab e3       	ldi	r26, 0x3B	; 59
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	eb e3       	ldi	r30, 0x3B	; 59
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <DIO_vconnectpullup+0xa6>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <DIO_vconnectpullup+0xa2>
    1362:	80 95       	com	r24
    1364:	84 23       	and	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	83 c0       	rjmp	.+262    	; 0x1470 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'B':
		if(connect_pullup==1)
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	a1 f4       	brne	.+40     	; 0x1398 <DIO_vconnectpullup+0xe0>
		{
			SET_BIT(PORTB,pinnumber);
    1370:	a8 e3       	ldi	r26, 0x38	; 56
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e8 e3       	ldi	r30, 0x38	; 56
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	48 2f       	mov	r20, r24
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 2e       	mov	r0, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <DIO_vconnectpullup+0xd6>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	0a 94       	dec	r0
    1390:	e2 f7       	brpl	.-8      	; 0x138a <DIO_vconnectpullup+0xd2>
    1392:	84 2b       	or	r24, r20
    1394:	8c 93       	st	X, r24
    1396:	6c c0       	rjmp	.+216    	; 0x1470 <DIO_vconnectpullup+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
    1398:	a8 e3       	ldi	r26, 0x38	; 56
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e8 e3       	ldi	r30, 0x38	; 56
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	48 2f       	mov	r20, r24
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 2e       	mov	r0, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <DIO_vconnectpullup+0xfe>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	0a 94       	dec	r0
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <DIO_vconnectpullup+0xfa>
    13ba:	80 95       	com	r24
    13bc:	84 23       	and	r24, r20
    13be:	8c 93       	st	X, r24
    13c0:	57 c0       	rjmp	.+174    	; 0x1470 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'C':
		if(connect_pullup==1)
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	a1 f4       	brne	.+40     	; 0x13f0 <DIO_vconnectpullup+0x138>
		{
			SET_BIT(PORTC,pinnumber);
    13c8:	a5 e3       	ldi	r26, 0x35	; 53
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e5 e3       	ldi	r30, 0x35	; 53
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	48 2f       	mov	r20, r24
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	02 2e       	mov	r0, r18
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <DIO_vconnectpullup+0x12e>
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	0a 94       	dec	r0
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <DIO_vconnectpullup+0x12a>
    13ea:	84 2b       	or	r24, r20
    13ec:	8c 93       	st	X, r24
    13ee:	40 c0       	rjmp	.+128    	; 0x1470 <DIO_vconnectpullup+0x1b8>
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
    13f0:	a5 e3       	ldi	r26, 0x35	; 53
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e5 e3       	ldi	r30, 0x35	; 53
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_vconnectpullup+0x156>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_vconnectpullup+0x152>
    1412:	80 95       	com	r24
    1414:	84 23       	and	r24, r20
    1416:	8c 93       	st	X, r24
    1418:	2b c0       	rjmp	.+86     	; 0x1470 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'D':
		if(connect_pullup==1)
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	a1 f4       	brne	.+40     	; 0x1448 <DIO_vconnectpullup+0x190>
		{
			SET_BIT(PORTD,pinnumber);
    1420:	a2 e3       	ldi	r26, 0x32	; 50
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e2 e3       	ldi	r30, 0x32	; 50
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 2e       	mov	r0, r18
    1438:	02 c0       	rjmp	.+4      	; 0x143e <DIO_vconnectpullup+0x186>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	0a 94       	dec	r0
    1440:	e2 f7       	brpl	.-8      	; 0x143a <DIO_vconnectpullup+0x182>
    1442:	84 2b       	or	r24, r20
    1444:	8c 93       	st	X, r24
    1446:	14 c0       	rjmp	.+40     	; 0x1470 <DIO_vconnectpullup+0x1b8>
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
    1448:	a2 e3       	ldi	r26, 0x32	; 50
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e2 e3       	ldi	r30, 0x32	; 50
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	48 2f       	mov	r20, r24
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 2e       	mov	r0, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <DIO_vconnectpullup+0x1ae>
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	0a 94       	dec	r0
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <DIO_vconnectpullup+0x1aa>
    146a:	80 95       	com	r24
    146c:	84 23       	and	r24, r20
    146e:	8c 93       	st	X, r24
		}
		break;
		
	}
}
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <write_low_nibble>:

void write_low_nibble(unsigned char portname,unsigned char value)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	00 d0       	rcall	.+0      	; 0x1486 <write_low_nibble+0x6>
    1486:	00 d0       	rcall	.+0      	; 0x1488 <write_low_nibble+0x8>
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	89 83       	std	Y+1, r24	; 0x01
    148e:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	8f 70       	andi	r24, 0x0F	; 15
    1494:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	3c 83       	std	Y+4, r19	; 0x04
    149e:	2b 83       	std	Y+3, r18	; 0x03
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	82 34       	cpi	r24, 0x42	; 66
    14a6:	91 05       	cpc	r25, r1
    14a8:	31 f1       	breq	.+76     	; 0x14f6 <write_low_nibble+0x76>
    14aa:	2b 81       	ldd	r18, Y+3	; 0x03
    14ac:	3c 81       	ldd	r19, Y+4	; 0x04
    14ae:	23 34       	cpi	r18, 0x43	; 67
    14b0:	31 05       	cpc	r19, r1
    14b2:	34 f4       	brge	.+12     	; 0x14c0 <write_low_nibble+0x40>
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	81 34       	cpi	r24, 0x41	; 65
    14ba:	91 05       	cpc	r25, r1
    14bc:	61 f0       	breq	.+24     	; 0x14d6 <write_low_nibble+0x56>
    14be:	4a c0       	rjmp	.+148    	; 0x1554 <write_low_nibble+0xd4>
    14c0:	2b 81       	ldd	r18, Y+3	; 0x03
    14c2:	3c 81       	ldd	r19, Y+4	; 0x04
    14c4:	23 34       	cpi	r18, 0x43	; 67
    14c6:	31 05       	cpc	r19, r1
    14c8:	31 f1       	breq	.+76     	; 0x1516 <write_low_nibble+0x96>
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	9c 81       	ldd	r25, Y+4	; 0x04
    14ce:	84 34       	cpi	r24, 0x44	; 68
    14d0:	91 05       	cpc	r25, r1
    14d2:	89 f1       	breq	.+98     	; 0x1536 <write_low_nibble+0xb6>
    14d4:	3f c0       	rjmp	.+126    	; 0x1554 <write_low_nibble+0xd4>
	{
		case 'A':
		PORTA&=0xf0;
    14d6:	ab e3       	ldi	r26, 0x3B	; 59
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	eb e3       	ldi	r30, 0x3B	; 59
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	80 7f       	andi	r24, 0xF0	; 240
    14e2:	8c 93       	st	X, r24
		PORTA |= value;
    14e4:	ab e3       	ldi	r26, 0x3B	; 59
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	eb e3       	ldi	r30, 0x3B	; 59
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	90 81       	ld	r25, Z
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	89 2b       	or	r24, r25
    14f2:	8c 93       	st	X, r24
    14f4:	2f c0       	rjmp	.+94     	; 0x1554 <write_low_nibble+0xd4>
		break;
		case 'B':
		PORTB&=0xf0;
    14f6:	a8 e3       	ldi	r26, 0x38	; 56
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e8 e3       	ldi	r30, 0x38	; 56
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	80 7f       	andi	r24, 0xF0	; 240
    1502:	8c 93       	st	X, r24
		PORTB |= value;
    1504:	a8 e3       	ldi	r26, 0x38	; 56
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e8 e3       	ldi	r30, 0x38	; 56
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	90 81       	ld	r25, Z
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	89 2b       	or	r24, r25
    1512:	8c 93       	st	X, r24
    1514:	1f c0       	rjmp	.+62     	; 0x1554 <write_low_nibble+0xd4>
		break;
		case 'C':
		PORTC&=0xf0;
    1516:	a5 e3       	ldi	r26, 0x35	; 53
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e5 e3       	ldi	r30, 0x35	; 53
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	80 7f       	andi	r24, 0xF0	; 240
    1522:	8c 93       	st	X, r24
		PORTC |= value;
    1524:	a5 e3       	ldi	r26, 0x35	; 53
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e5 e3       	ldi	r30, 0x35	; 53
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	90 81       	ld	r25, Z
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	89 2b       	or	r24, r25
    1532:	8c 93       	st	X, r24
    1534:	0f c0       	rjmp	.+30     	; 0x1554 <write_low_nibble+0xd4>
		break;
		case 'D':
		PORTD&=0xf0;
    1536:	a2 e3       	ldi	r26, 0x32	; 50
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e2 e3       	ldi	r30, 0x32	; 50
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 7f       	andi	r24, 0xF0	; 240
    1542:	8c 93       	st	X, r24
		PORTD|=value;
    1544:	a2 e3       	ldi	r26, 0x32	; 50
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e2 e3       	ldi	r30, 0x32	; 50
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	90 81       	ld	r25, Z
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	89 2b       	or	r24, r25
    1552:	8c 93       	st	X, r24
		break;
	}
}
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <write_high_nibble>:

void write_high_nibble(unsigned char portname,unsigned char value)
{
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	00 d0       	rcall	.+0      	; 0x1568 <write_high_nibble+0x6>
    1568:	00 d0       	rcall	.+0      	; 0x156a <write_high_nibble+0x8>
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	82 95       	swap	r24
    1576:	80 7f       	andi	r24, 0xF0	; 240
    1578:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	3c 83       	std	Y+4, r19	; 0x04
    1582:	2b 83       	std	Y+3, r18	; 0x03
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	9c 81       	ldd	r25, Y+4	; 0x04
    1588:	82 34       	cpi	r24, 0x42	; 66
    158a:	91 05       	cpc	r25, r1
    158c:	31 f1       	breq	.+76     	; 0x15da <write_high_nibble+0x78>
    158e:	2b 81       	ldd	r18, Y+3	; 0x03
    1590:	3c 81       	ldd	r19, Y+4	; 0x04
    1592:	23 34       	cpi	r18, 0x43	; 67
    1594:	31 05       	cpc	r19, r1
    1596:	34 f4       	brge	.+12     	; 0x15a4 <write_high_nibble+0x42>
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	9c 81       	ldd	r25, Y+4	; 0x04
    159c:	81 34       	cpi	r24, 0x41	; 65
    159e:	91 05       	cpc	r25, r1
    15a0:	61 f0       	breq	.+24     	; 0x15ba <write_high_nibble+0x58>
    15a2:	4a c0       	rjmp	.+148    	; 0x1638 <write_high_nibble+0xd6>
    15a4:	2b 81       	ldd	r18, Y+3	; 0x03
    15a6:	3c 81       	ldd	r19, Y+4	; 0x04
    15a8:	23 34       	cpi	r18, 0x43	; 67
    15aa:	31 05       	cpc	r19, r1
    15ac:	31 f1       	breq	.+76     	; 0x15fa <write_high_nibble+0x98>
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	84 34       	cpi	r24, 0x44	; 68
    15b4:	91 05       	cpc	r25, r1
    15b6:	89 f1       	breq	.+98     	; 0x161a <write_high_nibble+0xb8>
    15b8:	3f c0       	rjmp	.+126    	; 0x1638 <write_high_nibble+0xd6>
	{
		case 'A':
		PORTA&=0x0f;
    15ba:	ab e3       	ldi	r26, 0x3B	; 59
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	eb e3       	ldi	r30, 0x3B	; 59
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	8f 70       	andi	r24, 0x0F	; 15
    15c6:	8c 93       	st	X, r24
		PORTA|=value;
    15c8:	ab e3       	ldi	r26, 0x3B	; 59
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	eb e3       	ldi	r30, 0x3B	; 59
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	90 81       	ld	r25, Z
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	89 2b       	or	r24, r25
    15d6:	8c 93       	st	X, r24
    15d8:	2f c0       	rjmp	.+94     	; 0x1638 <write_high_nibble+0xd6>
		break;
		case 'B':
		PORTB&=0x0f;
    15da:	a8 e3       	ldi	r26, 0x38	; 56
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e8 e3       	ldi	r30, 0x38	; 56
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	8f 70       	andi	r24, 0x0F	; 15
    15e6:	8c 93       	st	X, r24
		PORTB|=value;
    15e8:	a8 e3       	ldi	r26, 0x38	; 56
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e8 e3       	ldi	r30, 0x38	; 56
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	90 81       	ld	r25, Z
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	89 2b       	or	r24, r25
    15f6:	8c 93       	st	X, r24
    15f8:	1f c0       	rjmp	.+62     	; 0x1638 <write_high_nibble+0xd6>
		break;
		case 'C':
		PORTC&=0x0f;
    15fa:	a5 e3       	ldi	r26, 0x35	; 53
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e5 e3       	ldi	r30, 0x35	; 53
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	8f 70       	andi	r24, 0x0F	; 15
    1606:	8c 93       	st	X, r24
		PORTC|=value;
    1608:	a5 e3       	ldi	r26, 0x35	; 53
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e5 e3       	ldi	r30, 0x35	; 53
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	90 81       	ld	r25, Z
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	89 2b       	or	r24, r25
    1616:	8c 93       	st	X, r24
    1618:	0f c0       	rjmp	.+30     	; 0x1638 <write_high_nibble+0xd6>
		break;
		case 'D':
		PORTD&=0x0f;
    161a:	a2 e3       	ldi	r26, 0x32	; 50
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e2 e3       	ldi	r30, 0x32	; 50
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	8f 70       	andi	r24, 0x0F	; 15
    1626:	8c 93       	st	X, r24
		PORTD|=value;
    1628:	a2 e3       	ldi	r26, 0x32	; 50
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e2 e3       	ldi	r30, 0x32	; 50
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	90 81       	ld	r25, Z
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	89 2b       	or	r24, r25
    1636:	8c 93       	st	X, r24
		break;
	}
}
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <LCD_vInit>:
#include "LCD.h"
#define  F_CPU 8000000UL 
#include <util/delay.h>

void LCD_vInit(void)
{
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	c4 55       	subi	r28, 0x54	; 84
    1654:	d0 40       	sbci	r29, 0x00	; 0
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	fe 01       	movw	r30, r28
    1662:	ef 5a       	subi	r30, 0xAF	; 175
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	a8 e4       	ldi	r26, 0x48	; 72
    166c:	b3 e4       	ldi	r27, 0x43	; 67
    166e:	80 83       	st	Z, r24
    1670:	91 83       	std	Z+1, r25	; 0x01
    1672:	a2 83       	std	Z+2, r26	; 0x02
    1674:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1676:	8e 01       	movw	r16, r28
    1678:	03 5b       	subi	r16, 0xB3	; 179
    167a:	1f 4f       	sbci	r17, 0xFF	; 255
    167c:	fe 01       	movw	r30, r28
    167e:	ef 5a       	subi	r30, 0xAF	; 175
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	60 81       	ld	r22, Z
    1684:	71 81       	ldd	r23, Z+1	; 0x01
    1686:	82 81       	ldd	r24, Z+2	; 0x02
    1688:	93 81       	ldd	r25, Z+3	; 0x03
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	4a ef       	ldi	r20, 0xFA	; 250
    1690:	54 e4       	ldi	r21, 0x44	; 68
    1692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	f8 01       	movw	r30, r16
    169c:	80 83       	st	Z, r24
    169e:	91 83       	std	Z+1, r25	; 0x01
    16a0:	a2 83       	std	Z+2, r26	; 0x02
    16a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16a4:	fe 01       	movw	r30, r28
    16a6:	e3 5b       	subi	r30, 0xB3	; 179
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	60 81       	ld	r22, Z
    16ac:	71 81       	ldd	r23, Z+1	; 0x01
    16ae:	82 81       	ldd	r24, Z+2	; 0x02
    16b0:	93 81       	ldd	r25, Z+3	; 0x03
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e8       	ldi	r20, 0x80	; 128
    16b8:	5f e3       	ldi	r21, 0x3F	; 63
    16ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16be:	88 23       	and	r24, r24
    16c0:	44 f4       	brge	.+16     	; 0x16d2 <LCD_vInit+0x8c>
		__ticks = 1;
    16c2:	fe 01       	movw	r30, r28
    16c4:	e5 5b       	subi	r30, 0xB5	; 181
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	91 83       	std	Z+1, r25	; 0x01
    16ce:	80 83       	st	Z, r24
    16d0:	64 c0       	rjmp	.+200    	; 0x179a <LCD_vInit+0x154>
	else if (__tmp > 65535)
    16d2:	fe 01       	movw	r30, r28
    16d4:	e3 5b       	subi	r30, 0xB3	; 179
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	60 81       	ld	r22, Z
    16da:	71 81       	ldd	r23, Z+1	; 0x01
    16dc:	82 81       	ldd	r24, Z+2	; 0x02
    16de:	93 81       	ldd	r25, Z+3	; 0x03
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	3f ef       	ldi	r19, 0xFF	; 255
    16e4:	4f e7       	ldi	r20, 0x7F	; 127
    16e6:	57 e4       	ldi	r21, 0x47	; 71
    16e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ec:	18 16       	cp	r1, r24
    16ee:	0c f0       	brlt	.+2      	; 0x16f2 <LCD_vInit+0xac>
    16f0:	43 c0       	rjmp	.+134    	; 0x1778 <LCD_vInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f2:	fe 01       	movw	r30, r28
    16f4:	ef 5a       	subi	r30, 0xAF	; 175
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	60 81       	ld	r22, Z
    16fa:	71 81       	ldd	r23, Z+1	; 0x01
    16fc:	82 81       	ldd	r24, Z+2	; 0x02
    16fe:	93 81       	ldd	r25, Z+3	; 0x03
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e2       	ldi	r20, 0x20	; 32
    1706:	51 e4       	ldi	r21, 0x41	; 65
    1708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	8e 01       	movw	r16, r28
    1712:	05 5b       	subi	r16, 0xB5	; 181
    1714:	1f 4f       	sbci	r17, 0xFF	; 255
    1716:	bc 01       	movw	r22, r24
    1718:	cd 01       	movw	r24, r26
    171a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	f8 01       	movw	r30, r16
    1724:	91 83       	std	Z+1, r25	; 0x01
    1726:	80 83       	st	Z, r24
    1728:	1f c0       	rjmp	.+62     	; 0x1768 <LCD_vInit+0x122>
    172a:	fe 01       	movw	r30, r28
    172c:	e7 5b       	subi	r30, 0xB7	; 183
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	88 ec       	ldi	r24, 0xC8	; 200
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	91 83       	std	Z+1, r25	; 0x01
    1736:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1738:	fe 01       	movw	r30, r28
    173a:	e7 5b       	subi	r30, 0xB7	; 183
    173c:	ff 4f       	sbci	r31, 0xFF	; 255
    173e:	80 81       	ld	r24, Z
    1740:	91 81       	ldd	r25, Z+1	; 0x01
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	f1 f7       	brne	.-4      	; 0x1742 <LCD_vInit+0xfc>
    1746:	fe 01       	movw	r30, r28
    1748:	e7 5b       	subi	r30, 0xB7	; 183
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	91 83       	std	Z+1, r25	; 0x01
    174e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1750:	de 01       	movw	r26, r28
    1752:	a5 5b       	subi	r26, 0xB5	; 181
    1754:	bf 4f       	sbci	r27, 0xFF	; 255
    1756:	fe 01       	movw	r30, r28
    1758:	e5 5b       	subi	r30, 0xB5	; 181
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	80 81       	ld	r24, Z
    175e:	91 81       	ldd	r25, Z+1	; 0x01
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	11 96       	adiw	r26, 0x01	; 1
    1764:	9c 93       	st	X, r25
    1766:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1768:	fe 01       	movw	r30, r28
    176a:	e5 5b       	subi	r30, 0xB5	; 181
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	80 81       	ld	r24, Z
    1770:	91 81       	ldd	r25, Z+1	; 0x01
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	d1 f6       	brne	.-76     	; 0x172a <LCD_vInit+0xe4>
    1776:	27 c0       	rjmp	.+78     	; 0x17c6 <LCD_vInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1778:	8e 01       	movw	r16, r28
    177a:	05 5b       	subi	r16, 0xB5	; 181
    177c:	1f 4f       	sbci	r17, 0xFF	; 255
    177e:	fe 01       	movw	r30, r28
    1780:	e3 5b       	subi	r30, 0xB3	; 179
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	60 81       	ld	r22, Z
    1786:	71 81       	ldd	r23, Z+1	; 0x01
    1788:	82 81       	ldd	r24, Z+2	; 0x02
    178a:	93 81       	ldd	r25, Z+3	; 0x03
    178c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	f8 01       	movw	r30, r16
    1796:	91 83       	std	Z+1, r25	; 0x01
    1798:	80 83       	st	Z, r24
    179a:	de 01       	movw	r26, r28
    179c:	a9 5b       	subi	r26, 0xB9	; 185
    179e:	bf 4f       	sbci	r27, 0xFF	; 255
    17a0:	fe 01       	movw	r30, r28
    17a2:	e5 5b       	subi	r30, 0xB5	; 181
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	80 81       	ld	r24, Z
    17a8:	91 81       	ldd	r25, Z+1	; 0x01
    17aa:	8d 93       	st	X+, r24
    17ac:	9c 93       	st	X, r25
    17ae:	fe 01       	movw	r30, r28
    17b0:	e9 5b       	subi	r30, 0xB9	; 185
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
    17b4:	80 81       	ld	r24, Z
    17b6:	91 81       	ldd	r25, Z+1	; 0x01
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	f1 f7       	brne	.-4      	; 0x17b8 <LCD_vInit+0x172>
    17bc:	fe 01       	movw	r30, r28
    17be:	e9 5b       	subi	r30, 0xB9	; 185
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	91 83       	std	Z+1, r25	; 0x01
    17c4:	80 83       	st	Z, r24
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1); 
	
	#elif defined four_bits_mode
	DIO_vsetPINDir('A',4,1);
    17c6:	81 e4       	ldi	r24, 0x41	; 65
    17c8:	64 e0       	ldi	r22, 0x04	; 4
    17ca:	41 e0       	ldi	r20, 0x01	; 1
    17cc:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
    17d0:	81 e4       	ldi	r24, 0x41	; 65
    17d2:	65 e0       	ldi	r22, 0x05	; 5
    17d4:	41 e0       	ldi	r20, 0x01	; 1
    17d6:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
    17da:	81 e4       	ldi	r24, 0x41	; 65
    17dc:	66 e0       	ldi	r22, 0x06	; 6
    17de:	41 e0       	ldi	r20, 0x01	; 1
    17e0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
    17e4:	81 e4       	ldi	r24, 0x41	; 65
    17e6:	67 e0       	ldi	r22, 0x07	; 7
    17e8:	41 e0       	ldi	r20, 0x01	; 1
    17ea:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',EN,1);
    17ee:	81 e4       	ldi	r24, 0x41	; 65
    17f0:	60 e0       	ldi	r22, 0x00	; 0
    17f2:	41 e0       	ldi	r20, 0x01	; 1
    17f4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',RW,1);
    17f8:	81 e4       	ldi	r24, 0x41	; 65
    17fa:	61 e0       	ldi	r22, 0x01	; 1
    17fc:	41 e0       	ldi	r20, 0x01	; 1
    17fe:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',RS,1);
    1802:	81 e4       	ldi	r24, 0x41	; 65
    1804:	62 e0       	ldi	r22, 0x02	; 2
    1806:	41 e0       	ldi	r20, 0x01	; 1
    1808:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
   	DIO_write('A',RW,0);
    180c:	81 e4       	ldi	r24, 0x41	; 65
    180e:	61 e0       	ldi	r22, 0x01	; 1
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
	LCD_vSend_cmd(RETURN_HOME); //return home
    1816:	82 e0       	ldi	r24, 0x02	; 2
    1818:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_vSend_cmd>
    181c:	fe 01       	movw	r30, r28
    181e:	ed 5b       	subi	r30, 0xBD	; 189
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	a0 e2       	ldi	r26, 0x20	; 32
    1828:	b1 e4       	ldi	r27, 0x41	; 65
    182a:	80 83       	st	Z, r24
    182c:	91 83       	std	Z+1, r25	; 0x01
    182e:	a2 83       	std	Z+2, r26	; 0x02
    1830:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1832:	8e 01       	movw	r16, r28
    1834:	01 5c       	subi	r16, 0xC1	; 193
    1836:	1f 4f       	sbci	r17, 0xFF	; 255
    1838:	fe 01       	movw	r30, r28
    183a:	ed 5b       	subi	r30, 0xBD	; 189
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	4a ef       	ldi	r20, 0xFA	; 250
    184c:	54 e4       	ldi	r21, 0x44	; 68
    184e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	f8 01       	movw	r30, r16
    1858:	80 83       	st	Z, r24
    185a:	91 83       	std	Z+1, r25	; 0x01
    185c:	a2 83       	std	Z+2, r26	; 0x02
    185e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1860:	fe 01       	movw	r30, r28
    1862:	ff 96       	adiw	r30, 0x3f	; 63
    1864:	60 81       	ld	r22, Z
    1866:	71 81       	ldd	r23, Z+1	; 0x01
    1868:	82 81       	ldd	r24, Z+2	; 0x02
    186a:	93 81       	ldd	r25, Z+3	; 0x03
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e8       	ldi	r20, 0x80	; 128
    1872:	5f e3       	ldi	r21, 0x3F	; 63
    1874:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1878:	88 23       	and	r24, r24
    187a:	2c f4       	brge	.+10     	; 0x1886 <LCD_vInit+0x240>
		__ticks = 1;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	9e af       	std	Y+62, r25	; 0x3e
    1882:	8d af       	std	Y+61, r24	; 0x3d
    1884:	46 c0       	rjmp	.+140    	; 0x1912 <LCD_vInit+0x2cc>
	else if (__tmp > 65535)
    1886:	fe 01       	movw	r30, r28
    1888:	ff 96       	adiw	r30, 0x3f	; 63
    188a:	60 81       	ld	r22, Z
    188c:	71 81       	ldd	r23, Z+1	; 0x01
    188e:	82 81       	ldd	r24, Z+2	; 0x02
    1890:	93 81       	ldd	r25, Z+3	; 0x03
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	3f ef       	ldi	r19, 0xFF	; 255
    1896:	4f e7       	ldi	r20, 0x7F	; 127
    1898:	57 e4       	ldi	r21, 0x47	; 71
    189a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    189e:	18 16       	cp	r1, r24
    18a0:	64 f5       	brge	.+88     	; 0x18fa <LCD_vInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a2:	fe 01       	movw	r30, r28
    18a4:	ed 5b       	subi	r30, 0xBD	; 189
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	60 81       	ld	r22, Z
    18aa:	71 81       	ldd	r23, Z+1	; 0x01
    18ac:	82 81       	ldd	r24, Z+2	; 0x02
    18ae:	93 81       	ldd	r25, Z+3	; 0x03
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e2       	ldi	r20, 0x20	; 32
    18b6:	51 e4       	ldi	r21, 0x41	; 65
    18b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	bc 01       	movw	r22, r24
    18c2:	cd 01       	movw	r24, r26
    18c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	9e af       	std	Y+62, r25	; 0x3e
    18ce:	8d af       	std	Y+61, r24	; 0x3d
    18d0:	0f c0       	rjmp	.+30     	; 0x18f0 <LCD_vInit+0x2aa>
    18d2:	88 ec       	ldi	r24, 0xC8	; 200
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	9c af       	std	Y+60, r25	; 0x3c
    18d8:	8b af       	std	Y+59, r24	; 0x3b
    18da:	8b ad       	ldd	r24, Y+59	; 0x3b
    18dc:	9c ad       	ldd	r25, Y+60	; 0x3c
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	f1 f7       	brne	.-4      	; 0x18de <LCD_vInit+0x298>
    18e2:	9c af       	std	Y+60, r25	; 0x3c
    18e4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    18e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	9e af       	std	Y+62, r25	; 0x3e
    18ee:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    18f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    18f4:	00 97       	sbiw	r24, 0x00	; 0
    18f6:	69 f7       	brne	.-38     	; 0x18d2 <LCD_vInit+0x28c>
    18f8:	16 c0       	rjmp	.+44     	; 0x1926 <LCD_vInit+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18fa:	fe 01       	movw	r30, r28
    18fc:	ff 96       	adiw	r30, 0x3f	; 63
    18fe:	60 81       	ld	r22, Z
    1900:	71 81       	ldd	r23, Z+1	; 0x01
    1902:	82 81       	ldd	r24, Z+2	; 0x02
    1904:	93 81       	ldd	r25, Z+3	; 0x03
    1906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	9e af       	std	Y+62, r25	; 0x3e
    1910:	8d af       	std	Y+61, r24	; 0x3d
    1912:	8d ad       	ldd	r24, Y+61	; 0x3d
    1914:	9e ad       	ldd	r25, Y+62	; 0x3e
    1916:	9a af       	std	Y+58, r25	; 0x3a
    1918:	89 af       	std	Y+57, r24	; 0x39
    191a:	89 ad       	ldd	r24, Y+57	; 0x39
    191c:	9a ad       	ldd	r25, Y+58	; 0x3a
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <LCD_vInit+0x2d8>
    1922:	9a af       	std	Y+58, r25	; 0x3a
    1924:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS); //4bit mode
    1926:	88 e2       	ldi	r24, 0x28	; 40
    1928:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_vSend_cmd>
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	a0 e8       	ldi	r26, 0x80	; 128
    1932:	bf e3       	ldi	r27, 0x3F	; 63
    1934:	8d ab       	std	Y+53, r24	; 0x35
    1936:	9e ab       	std	Y+54, r25	; 0x36
    1938:	af ab       	std	Y+55, r26	; 0x37
    193a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    193c:	6d a9       	ldd	r22, Y+53	; 0x35
    193e:	7e a9       	ldd	r23, Y+54	; 0x36
    1940:	8f a9       	ldd	r24, Y+55	; 0x37
    1942:	98 ad       	ldd	r25, Y+56	; 0x38
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	4a ef       	ldi	r20, 0xFA	; 250
    194a:	54 e4       	ldi	r21, 0x44	; 68
    194c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	89 ab       	std	Y+49, r24	; 0x31
    1956:	9a ab       	std	Y+50, r25	; 0x32
    1958:	ab ab       	std	Y+51, r26	; 0x33
    195a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    195c:	69 a9       	ldd	r22, Y+49	; 0x31
    195e:	7a a9       	ldd	r23, Y+50	; 0x32
    1960:	8b a9       	ldd	r24, Y+51	; 0x33
    1962:	9c a9       	ldd	r25, Y+52	; 0x34
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	40 e8       	ldi	r20, 0x80	; 128
    196a:	5f e3       	ldi	r21, 0x3F	; 63
    196c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1970:	88 23       	and	r24, r24
    1972:	2c f4       	brge	.+10     	; 0x197e <LCD_vInit+0x338>
		__ticks = 1;
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	98 ab       	std	Y+48, r25	; 0x30
    197a:	8f a7       	std	Y+47, r24	; 0x2f
    197c:	3f c0       	rjmp	.+126    	; 0x19fc <LCD_vInit+0x3b6>
	else if (__tmp > 65535)
    197e:	69 a9       	ldd	r22, Y+49	; 0x31
    1980:	7a a9       	ldd	r23, Y+50	; 0x32
    1982:	8b a9       	ldd	r24, Y+51	; 0x33
    1984:	9c a9       	ldd	r25, Y+52	; 0x34
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	3f ef       	ldi	r19, 0xFF	; 255
    198a:	4f e7       	ldi	r20, 0x7F	; 127
    198c:	57 e4       	ldi	r21, 0x47	; 71
    198e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1992:	18 16       	cp	r1, r24
    1994:	4c f5       	brge	.+82     	; 0x19e8 <LCD_vInit+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1996:	6d a9       	ldd	r22, Y+53	; 0x35
    1998:	7e a9       	ldd	r23, Y+54	; 0x36
    199a:	8f a9       	ldd	r24, Y+55	; 0x37
    199c:	98 ad       	ldd	r25, Y+56	; 0x38
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	40 e2       	ldi	r20, 0x20	; 32
    19a4:	51 e4       	ldi	r21, 0x41	; 65
    19a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	bc 01       	movw	r22, r24
    19b0:	cd 01       	movw	r24, r26
    19b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	98 ab       	std	Y+48, r25	; 0x30
    19bc:	8f a7       	std	Y+47, r24	; 0x2f
    19be:	0f c0       	rjmp	.+30     	; 0x19de <LCD_vInit+0x398>
    19c0:	88 ec       	ldi	r24, 0xC8	; 200
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	9e a7       	std	Y+46, r25	; 0x2e
    19c6:	8d a7       	std	Y+45, r24	; 0x2d
    19c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    19ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <LCD_vInit+0x386>
    19d0:	9e a7       	std	Y+46, r25	; 0x2e
    19d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    19d6:	98 a9       	ldd	r25, Y+48	; 0x30
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	98 ab       	std	Y+48, r25	; 0x30
    19dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19de:	8f a5       	ldd	r24, Y+47	; 0x2f
    19e0:	98 a9       	ldd	r25, Y+48	; 0x30
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	69 f7       	brne	.-38     	; 0x19c0 <LCD_vInit+0x37a>
    19e6:	14 c0       	rjmp	.+40     	; 0x1a10 <LCD_vInit+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e8:	69 a9       	ldd	r22, Y+49	; 0x31
    19ea:	7a a9       	ldd	r23, Y+50	; 0x32
    19ec:	8b a9       	ldd	r24, Y+51	; 0x33
    19ee:	9c a9       	ldd	r25, Y+52	; 0x34
    19f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	98 ab       	std	Y+48, r25	; 0x30
    19fa:	8f a7       	std	Y+47, r24	; 0x2f
    19fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    19fe:	98 a9       	ldd	r25, Y+48	; 0x30
    1a00:	9c a7       	std	Y+44, r25	; 0x2c
    1a02:	8b a7       	std	Y+43, r24	; 0x2b
    1a04:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a06:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	f1 f7       	brne	.-4      	; 0x1a08 <LCD_vInit+0x3c2>
    1a0c:	9c a7       	std	Y+44, r25	; 0x2c
    1a0e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
    1a10:	8e e0       	ldi	r24, 0x0E	; 14
    1a12:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_vSend_cmd>
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	a0 e8       	ldi	r26, 0x80	; 128
    1a1c:	bf e3       	ldi	r27, 0x3F	; 63
    1a1e:	8f a3       	std	Y+39, r24	; 0x27
    1a20:	98 a7       	std	Y+40, r25	; 0x28
    1a22:	a9 a7       	std	Y+41, r26	; 0x29
    1a24:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a26:	6f a1       	ldd	r22, Y+39	; 0x27
    1a28:	78 a5       	ldd	r23, Y+40	; 0x28
    1a2a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	4a ef       	ldi	r20, 0xFA	; 250
    1a34:	54 e4       	ldi	r21, 0x44	; 68
    1a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	8b a3       	std	Y+35, r24	; 0x23
    1a40:	9c a3       	std	Y+36, r25	; 0x24
    1a42:	ad a3       	std	Y+37, r26	; 0x25
    1a44:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a46:	6b a1       	ldd	r22, Y+35	; 0x23
    1a48:	7c a1       	ldd	r23, Y+36	; 0x24
    1a4a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a4c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e8       	ldi	r20, 0x80	; 128
    1a54:	5f e3       	ldi	r21, 0x3F	; 63
    1a56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a5a:	88 23       	and	r24, r24
    1a5c:	2c f4       	brge	.+10     	; 0x1a68 <LCD_vInit+0x422>
		__ticks = 1;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	9a a3       	std	Y+34, r25	; 0x22
    1a64:	89 a3       	std	Y+33, r24	; 0x21
    1a66:	3f c0       	rjmp	.+126    	; 0x1ae6 <LCD_vInit+0x4a0>
	else if (__tmp > 65535)
    1a68:	6b a1       	ldd	r22, Y+35	; 0x23
    1a6a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a6c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a6e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	3f ef       	ldi	r19, 0xFF	; 255
    1a74:	4f e7       	ldi	r20, 0x7F	; 127
    1a76:	57 e4       	ldi	r21, 0x47	; 71
    1a78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a7c:	18 16       	cp	r1, r24
    1a7e:	4c f5       	brge	.+82     	; 0x1ad2 <LCD_vInit+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a80:	6f a1       	ldd	r22, Y+39	; 0x27
    1a82:	78 a5       	ldd	r23, Y+40	; 0x28
    1a84:	89 a5       	ldd	r24, Y+41	; 0x29
    1a86:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e2       	ldi	r20, 0x20	; 32
    1a8e:	51 e4       	ldi	r21, 0x41	; 65
    1a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	9a a3       	std	Y+34, r25	; 0x22
    1aa6:	89 a3       	std	Y+33, r24	; 0x21
    1aa8:	0f c0       	rjmp	.+30     	; 0x1ac8 <LCD_vInit+0x482>
    1aaa:	88 ec       	ldi	r24, 0xC8	; 200
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	98 a3       	std	Y+32, r25	; 0x20
    1ab0:	8f 8f       	std	Y+31, r24	; 0x1f
    1ab2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ab4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <LCD_vInit+0x470>
    1aba:	98 a3       	std	Y+32, r25	; 0x20
    1abc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abe:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	9a a3       	std	Y+34, r25	; 0x22
    1ac6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac8:	89 a1       	ldd	r24, Y+33	; 0x21
    1aca:	9a a1       	ldd	r25, Y+34	; 0x22
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	69 f7       	brne	.-38     	; 0x1aaa <LCD_vInit+0x464>
    1ad0:	14 c0       	rjmp	.+40     	; 0x1afa <LCD_vInit+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad8:	9e a1       	ldd	r25, Y+38	; 0x26
    1ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	9a a3       	std	Y+34, r25	; 0x22
    1ae4:	89 a3       	std	Y+33, r24	; 0x21
    1ae6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae8:	9a a1       	ldd	r25, Y+34	; 0x22
    1aea:	9e 8f       	std	Y+30, r25	; 0x1e
    1aec:	8d 8f       	std	Y+29, r24	; 0x1d
    1aee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1af0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <LCD_vInit+0x4ac>
    1af6:	9e 8f       	std	Y+30, r25	; 0x1e
    1af8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_vSend_cmd>
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a0 e2       	ldi	r26, 0x20	; 32
    1b06:	b1 e4       	ldi	r27, 0x41	; 65
    1b08:	89 8f       	std	Y+25, r24	; 0x19
    1b0a:	9a 8f       	std	Y+26, r25	; 0x1a
    1b0c:	ab 8f       	std	Y+27, r26	; 0x1b
    1b0e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b10:	69 8d       	ldd	r22, Y+25	; 0x19
    1b12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	4a ef       	ldi	r20, 0xFA	; 250
    1b1e:	54 e4       	ldi	r21, 0x44	; 68
    1b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	8d 8b       	std	Y+21, r24	; 0x15
    1b2a:	9e 8b       	std	Y+22, r25	; 0x16
    1b2c:	af 8b       	std	Y+23, r26	; 0x17
    1b2e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b30:	6d 89       	ldd	r22, Y+21	; 0x15
    1b32:	7e 89       	ldd	r23, Y+22	; 0x16
    1b34:	8f 89       	ldd	r24, Y+23	; 0x17
    1b36:	98 8d       	ldd	r25, Y+24	; 0x18
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e8       	ldi	r20, 0x80	; 128
    1b3e:	5f e3       	ldi	r21, 0x3F	; 63
    1b40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b44:	88 23       	and	r24, r24
    1b46:	2c f4       	brge	.+10     	; 0x1b52 <LCD_vInit+0x50c>
		__ticks = 1;
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	9c 8b       	std	Y+20, r25	; 0x14
    1b4e:	8b 8b       	std	Y+19, r24	; 0x13
    1b50:	3f c0       	rjmp	.+126    	; 0x1bd0 <LCD_vInit+0x58a>
	else if (__tmp > 65535)
    1b52:	6d 89       	ldd	r22, Y+21	; 0x15
    1b54:	7e 89       	ldd	r23, Y+22	; 0x16
    1b56:	8f 89       	ldd	r24, Y+23	; 0x17
    1b58:	98 8d       	ldd	r25, Y+24	; 0x18
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	3f ef       	ldi	r19, 0xFF	; 255
    1b5e:	4f e7       	ldi	r20, 0x7F	; 127
    1b60:	57 e4       	ldi	r21, 0x47	; 71
    1b62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b66:	18 16       	cp	r1, r24
    1b68:	4c f5       	brge	.+82     	; 0x1bbc <LCD_vInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	40 e2       	ldi	r20, 0x20	; 32
    1b78:	51 e4       	ldi	r21, 0x41	; 65
    1b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	bc 01       	movw	r22, r24
    1b84:	cd 01       	movw	r24, r26
    1b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	9c 8b       	std	Y+20, r25	; 0x14
    1b90:	8b 8b       	std	Y+19, r24	; 0x13
    1b92:	0f c0       	rjmp	.+30     	; 0x1bb2 <LCD_vInit+0x56c>
    1b94:	88 ec       	ldi	r24, 0xC8	; 200
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	9a 8b       	std	Y+18, r25	; 0x12
    1b9a:	89 8b       	std	Y+17, r24	; 0x11
    1b9c:	89 89       	ldd	r24, Y+17	; 0x11
    1b9e:	9a 89       	ldd	r25, Y+18	; 0x12
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <LCD_vInit+0x55a>
    1ba4:	9a 8b       	std	Y+18, r25	; 0x12
    1ba6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba8:	8b 89       	ldd	r24, Y+19	; 0x13
    1baa:	9c 89       	ldd	r25, Y+20	; 0x14
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	9c 8b       	std	Y+20, r25	; 0x14
    1bb0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	69 f7       	brne	.-38     	; 0x1b94 <LCD_vInit+0x54e>
    1bba:	14 c0       	rjmp	.+40     	; 0x1be4 <LCD_vInit+0x59e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1bbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	9c 8b       	std	Y+20, r25	; 0x14
    1bce:	8b 8b       	std	Y+19, r24	; 0x13
    1bd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd4:	98 8b       	std	Y+16, r25	; 0x10
    1bd6:	8f 87       	std	Y+15, r24	; 0x0f
    1bd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bda:	98 89       	ldd	r25, Y+16	; 0x10
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <LCD_vInit+0x596>
    1be0:	98 8b       	std	Y+16, r25	; 0x10
    1be2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
    1be4:	86 e0       	ldi	r24, 0x06	; 6
    1be6:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_vSend_cmd>
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	a0 e8       	ldi	r26, 0x80	; 128
    1bf0:	bf e3       	ldi	r27, 0x3F	; 63
    1bf2:	8b 87       	std	Y+11, r24	; 0x0b
    1bf4:	9c 87       	std	Y+12, r25	; 0x0c
    1bf6:	ad 87       	std	Y+13, r26	; 0x0d
    1bf8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	4a ef       	ldi	r20, 0xFA	; 250
    1c08:	54 e4       	ldi	r21, 0x44	; 68
    1c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	8f 83       	std	Y+7, r24	; 0x07
    1c14:	98 87       	std	Y+8, r25	; 0x08
    1c16:	a9 87       	std	Y+9, r26	; 0x09
    1c18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1c:	78 85       	ldd	r23, Y+8	; 0x08
    1c1e:	89 85       	ldd	r24, Y+9	; 0x09
    1c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 e8       	ldi	r20, 0x80	; 128
    1c28:	5f e3       	ldi	r21, 0x3F	; 63
    1c2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c2e:	88 23       	and	r24, r24
    1c30:	2c f4       	brge	.+10     	; 0x1c3c <LCD_vInit+0x5f6>
		__ticks = 1;
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	9e 83       	std	Y+6, r25	; 0x06
    1c38:	8d 83       	std	Y+5, r24	; 0x05
    1c3a:	3f c0       	rjmp	.+126    	; 0x1cba <LCD_vInit+0x674>
	else if (__tmp > 65535)
    1c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3e:	78 85       	ldd	r23, Y+8	; 0x08
    1c40:	89 85       	ldd	r24, Y+9	; 0x09
    1c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	3f ef       	ldi	r19, 0xFF	; 255
    1c48:	4f e7       	ldi	r20, 0x7F	; 127
    1c4a:	57 e4       	ldi	r21, 0x47	; 71
    1c4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c50:	18 16       	cp	r1, r24
    1c52:	4c f5       	brge	.+82     	; 0x1ca6 <LCD_vInit+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e2       	ldi	r20, 0x20	; 32
    1c62:	51 e4       	ldi	r21, 0x41	; 65
    1c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	bc 01       	movw	r22, r24
    1c6e:	cd 01       	movw	r24, r26
    1c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	9e 83       	std	Y+6, r25	; 0x06
    1c7a:	8d 83       	std	Y+5, r24	; 0x05
    1c7c:	0f c0       	rjmp	.+30     	; 0x1c9c <LCD_vInit+0x656>
    1c7e:	88 ec       	ldi	r24, 0xC8	; 200
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	9c 83       	std	Y+4, r25	; 0x04
    1c84:	8b 83       	std	Y+3, r24	; 0x03
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <LCD_vInit+0x644>
    1c8e:	9c 83       	std	Y+4, r25	; 0x04
    1c90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c92:	8d 81       	ldd	r24, Y+5	; 0x05
    1c94:	9e 81       	ldd	r25, Y+6	; 0x06
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	9e 83       	std	Y+6, r25	; 0x06
    1c9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	69 f7       	brne	.-38     	; 0x1c7e <LCD_vInit+0x638>
    1ca4:	14 c0       	rjmp	.+40     	; 0x1cce <LCD_vInit+0x688>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca8:	78 85       	ldd	r23, Y+8	; 0x08
    1caa:	89 85       	ldd	r24, Y+9	; 0x09
    1cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	9e 83       	std	Y+6, r25	; 0x06
    1cb8:	8d 83       	std	Y+5, r24	; 0x05
    1cba:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbe:	9a 83       	std	Y+2, r25	; 0x02
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <LCD_vInit+0x680>
    1cca:	9a 83       	std	Y+2, r25	; 0x02
    1ccc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	#endif
}
    1cce:	cc 5a       	subi	r28, 0xAC	; 172
    1cd0:	df 4f       	sbci	r29, 0xFF	; 255
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	de bf       	out	0x3e, r29	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	cd bf       	out	0x3d, r28	; 61
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	1f 91       	pop	r17
    1ce2:	0f 91       	pop	r16
    1ce4:	08 95       	ret

00001ce6 <send_falling_edge>:


static void send_falling_edge(void)
{
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	6c 97       	sbiw	r28, 0x1c	; 28
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
	DIO_write('A',EN,1);
    1cfa:	81 e4       	ldi	r24, 0x41	; 65
    1cfc:	60 e0       	ldi	r22, 0x00	; 0
    1cfe:	41 e0       	ldi	r20, 0x01	; 1
    1d00:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	a0 e0       	ldi	r26, 0x00	; 0
    1d0a:	b0 e4       	ldi	r27, 0x40	; 64
    1d0c:	89 8f       	std	Y+25, r24	; 0x19
    1d0e:	9a 8f       	std	Y+26, r25	; 0x1a
    1d10:	ab 8f       	std	Y+27, r26	; 0x1b
    1d12:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d14:	69 8d       	ldd	r22, Y+25	; 0x19
    1d16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	4a ef       	ldi	r20, 0xFA	; 250
    1d22:	54 e4       	ldi	r21, 0x44	; 68
    1d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	8d 8b       	std	Y+21, r24	; 0x15
    1d2e:	9e 8b       	std	Y+22, r25	; 0x16
    1d30:	af 8b       	std	Y+23, r26	; 0x17
    1d32:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d34:	6d 89       	ldd	r22, Y+21	; 0x15
    1d36:	7e 89       	ldd	r23, Y+22	; 0x16
    1d38:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e8       	ldi	r20, 0x80	; 128
    1d42:	5f e3       	ldi	r21, 0x3F	; 63
    1d44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d48:	88 23       	and	r24, r24
    1d4a:	2c f4       	brge	.+10     	; 0x1d56 <send_falling_edge+0x70>
		__ticks = 1;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	9c 8b       	std	Y+20, r25	; 0x14
    1d52:	8b 8b       	std	Y+19, r24	; 0x13
    1d54:	3f c0       	rjmp	.+126    	; 0x1dd4 <send_falling_edge+0xee>
	else if (__tmp > 65535)
    1d56:	6d 89       	ldd	r22, Y+21	; 0x15
    1d58:	7e 89       	ldd	r23, Y+22	; 0x16
    1d5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	3f ef       	ldi	r19, 0xFF	; 255
    1d62:	4f e7       	ldi	r20, 0x7F	; 127
    1d64:	57 e4       	ldi	r21, 0x47	; 71
    1d66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d6a:	18 16       	cp	r1, r24
    1d6c:	4c f5       	brge	.+82     	; 0x1dc0 <send_falling_edge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e2       	ldi	r20, 0x20	; 32
    1d7c:	51 e4       	ldi	r21, 0x41	; 65
    1d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	bc 01       	movw	r22, r24
    1d88:	cd 01       	movw	r24, r26
    1d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	9c 8b       	std	Y+20, r25	; 0x14
    1d94:	8b 8b       	std	Y+19, r24	; 0x13
    1d96:	0f c0       	rjmp	.+30     	; 0x1db6 <send_falling_edge+0xd0>
    1d98:	88 ec       	ldi	r24, 0xC8	; 200
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	9a 8b       	std	Y+18, r25	; 0x12
    1d9e:	89 8b       	std	Y+17, r24	; 0x11
    1da0:	89 89       	ldd	r24, Y+17	; 0x11
    1da2:	9a 89       	ldd	r25, Y+18	; 0x12
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <send_falling_edge+0xbe>
    1da8:	9a 8b       	std	Y+18, r25	; 0x12
    1daa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dac:	8b 89       	ldd	r24, Y+19	; 0x13
    1dae:	9c 89       	ldd	r25, Y+20	; 0x14
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	9c 8b       	std	Y+20, r25	; 0x14
    1db4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db6:	8b 89       	ldd	r24, Y+19	; 0x13
    1db8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	69 f7       	brne	.-38     	; 0x1d98 <send_falling_edge+0xb2>
    1dbe:	14 c0       	rjmp	.+40     	; 0x1de8 <send_falling_edge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc0:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc2:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc4:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc6:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	9c 8b       	std	Y+20, r25	; 0x14
    1dd2:	8b 8b       	std	Y+19, r24	; 0x13
    1dd4:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd6:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd8:	98 8b       	std	Y+16, r25	; 0x10
    1dda:	8f 87       	std	Y+15, r24	; 0x0f
    1ddc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dde:	98 89       	ldd	r25, Y+16	; 0x10
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <send_falling_edge+0xfa>
    1de4:	98 8b       	std	Y+16, r25	; 0x10
    1de6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_write('A',EN,0);
    1de8:	81 e4       	ldi	r24, 0x41	; 65
    1dea:	60 e0       	ldi	r22, 0x00	; 0
    1dec:	40 e0       	ldi	r20, 0x00	; 0
    1dee:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	a0 e0       	ldi	r26, 0x00	; 0
    1df8:	b0 e4       	ldi	r27, 0x40	; 64
    1dfa:	8b 87       	std	Y+11, r24	; 0x0b
    1dfc:	9c 87       	std	Y+12, r25	; 0x0c
    1dfe:	ad 87       	std	Y+13, r26	; 0x0d
    1e00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	4a ef       	ldi	r20, 0xFA	; 250
    1e10:	54 e4       	ldi	r21, 0x44	; 68
    1e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	8f 83       	std	Y+7, r24	; 0x07
    1e1c:	98 87       	std	Y+8, r25	; 0x08
    1e1e:	a9 87       	std	Y+9, r26	; 0x09
    1e20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e22:	6f 81       	ldd	r22, Y+7	; 0x07
    1e24:	78 85       	ldd	r23, Y+8	; 0x08
    1e26:	89 85       	ldd	r24, Y+9	; 0x09
    1e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e8       	ldi	r20, 0x80	; 128
    1e30:	5f e3       	ldi	r21, 0x3F	; 63
    1e32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e36:	88 23       	and	r24, r24
    1e38:	2c f4       	brge	.+10     	; 0x1e44 <send_falling_edge+0x15e>
		__ticks = 1;
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	9e 83       	std	Y+6, r25	; 0x06
    1e40:	8d 83       	std	Y+5, r24	; 0x05
    1e42:	3f c0       	rjmp	.+126    	; 0x1ec2 <send_falling_edge+0x1dc>
	else if (__tmp > 65535)
    1e44:	6f 81       	ldd	r22, Y+7	; 0x07
    1e46:	78 85       	ldd	r23, Y+8	; 0x08
    1e48:	89 85       	ldd	r24, Y+9	; 0x09
    1e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	3f ef       	ldi	r19, 0xFF	; 255
    1e50:	4f e7       	ldi	r20, 0x7F	; 127
    1e52:	57 e4       	ldi	r21, 0x47	; 71
    1e54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e58:	18 16       	cp	r1, r24
    1e5a:	4c f5       	brge	.+82     	; 0x1eae <send_falling_edge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e2       	ldi	r20, 0x20	; 32
    1e6a:	51 e4       	ldi	r21, 0x41	; 65
    1e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	bc 01       	movw	r22, r24
    1e76:	cd 01       	movw	r24, r26
    1e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	9e 83       	std	Y+6, r25	; 0x06
    1e82:	8d 83       	std	Y+5, r24	; 0x05
    1e84:	0f c0       	rjmp	.+30     	; 0x1ea4 <send_falling_edge+0x1be>
    1e86:	88 ec       	ldi	r24, 0xC8	; 200
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	9c 83       	std	Y+4, r25	; 0x04
    1e8c:	8b 83       	std	Y+3, r24	; 0x03
    1e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e90:	9c 81       	ldd	r25, Y+4	; 0x04
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	f1 f7       	brne	.-4      	; 0x1e92 <send_falling_edge+0x1ac>
    1e96:	9c 83       	std	Y+4, r25	; 0x04
    1e98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	9e 83       	std	Y+6, r25	; 0x06
    1ea2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	69 f7       	brne	.-38     	; 0x1e86 <send_falling_edge+0x1a0>
    1eac:	14 c0       	rjmp	.+40     	; 0x1ed6 <send_falling_edge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eae:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb0:	78 85       	ldd	r23, Y+8	; 0x08
    1eb2:	89 85       	ldd	r24, Y+9	; 0x09
    1eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	9e 83       	std	Y+6, r25	; 0x06
    1ec0:	8d 83       	std	Y+5, r24	; 0x05
    1ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec6:	9a 83       	std	Y+2, r25	; 0x02
    1ec8:	89 83       	std	Y+1, r24	; 0x01
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	f1 f7       	brne	.-4      	; 0x1ece <send_falling_edge+0x1e8>
    1ed2:	9a 83       	std	Y+2, r25	; 0x02
    1ed4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1ed6:	6c 96       	adiw	r28, 0x1c	; 28
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	2f 97       	sbiw	r28, 0x0f	; 15
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_write_port('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',cmd>>4);
    1efe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f00:	98 2f       	mov	r25, r24
    1f02:	92 95       	swap	r25
    1f04:	9f 70       	andi	r25, 0x0F	; 15
    1f06:	81 e4       	ldi	r24, 0x41	; 65
    1f08:	69 2f       	mov	r22, r25
    1f0a:	0e 94 b1 0a 	call	0x1562	; 0x1562 <write_high_nibble>
	DIO_write('A',RS,0);
    1f0e:	81 e4       	ldi	r24, 0x41	; 65
    1f10:	62 e0       	ldi	r22, 0x02	; 2
    1f12:	40 e0       	ldi	r20, 0x00	; 0
    1f14:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
	send_falling_edge();
    1f18:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <send_falling_edge>
	write_high_nibble('A',cmd);
    1f1c:	81 e4       	ldi	r24, 0x41	; 65
    1f1e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f20:	0e 94 b1 0a 	call	0x1562	; 0x1562 <write_high_nibble>
	DIO_write('A',RS,0);
    1f24:	81 e4       	ldi	r24, 0x41	; 65
    1f26:	62 e0       	ldi	r22, 0x02	; 2
    1f28:	40 e0       	ldi	r20, 0x00	; 0
    1f2a:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
	send_falling_edge();
    1f2e:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <send_falling_edge>
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	a0 e8       	ldi	r26, 0x80	; 128
    1f38:	bf e3       	ldi	r27, 0x3F	; 63
    1f3a:	8b 87       	std	Y+11, r24	; 0x0b
    1f3c:	9c 87       	std	Y+12, r25	; 0x0c
    1f3e:	ad 87       	std	Y+13, r26	; 0x0d
    1f40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	4a ef       	ldi	r20, 0xFA	; 250
    1f50:	54 e4       	ldi	r21, 0x44	; 68
    1f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	8f 83       	std	Y+7, r24	; 0x07
    1f5c:	98 87       	std	Y+8, r25	; 0x08
    1f5e:	a9 87       	std	Y+9, r26	; 0x09
    1f60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f62:	6f 81       	ldd	r22, Y+7	; 0x07
    1f64:	78 85       	ldd	r23, Y+8	; 0x08
    1f66:	89 85       	ldd	r24, Y+9	; 0x09
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e8       	ldi	r20, 0x80	; 128
    1f70:	5f e3       	ldi	r21, 0x3F	; 63
    1f72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f76:	88 23       	and	r24, r24
    1f78:	2c f4       	brge	.+10     	; 0x1f84 <LCD_vSend_cmd+0x9c>
		__ticks = 1;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	9e 83       	std	Y+6, r25	; 0x06
    1f80:	8d 83       	std	Y+5, r24	; 0x05
    1f82:	3f c0       	rjmp	.+126    	; 0x2002 <LCD_vSend_cmd+0x11a>
	else if (__tmp > 65535)
    1f84:	6f 81       	ldd	r22, Y+7	; 0x07
    1f86:	78 85       	ldd	r23, Y+8	; 0x08
    1f88:	89 85       	ldd	r24, Y+9	; 0x09
    1f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	3f ef       	ldi	r19, 0xFF	; 255
    1f90:	4f e7       	ldi	r20, 0x7F	; 127
    1f92:	57 e4       	ldi	r21, 0x47	; 71
    1f94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f98:	18 16       	cp	r1, r24
    1f9a:	4c f5       	brge	.+82     	; 0x1fee <LCD_vSend_cmd+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e2       	ldi	r20, 0x20	; 32
    1faa:	51 e4       	ldi	r21, 0x41	; 65
    1fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	bc 01       	movw	r22, r24
    1fb6:	cd 01       	movw	r24, r26
    1fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	9e 83       	std	Y+6, r25	; 0x06
    1fc2:	8d 83       	std	Y+5, r24	; 0x05
    1fc4:	0f c0       	rjmp	.+30     	; 0x1fe4 <LCD_vSend_cmd+0xfc>
    1fc6:	88 ec       	ldi	r24, 0xC8	; 200
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	9c 83       	std	Y+4, r25	; 0x04
    1fcc:	8b 83       	std	Y+3, r24	; 0x03
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	f1 f7       	brne	.-4      	; 0x1fd2 <LCD_vSend_cmd+0xea>
    1fd6:	9c 83       	std	Y+4, r25	; 0x04
    1fd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fda:	8d 81       	ldd	r24, Y+5	; 0x05
    1fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	9e 83       	std	Y+6, r25	; 0x06
    1fe2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe8:	00 97       	sbiw	r24, 0x00	; 0
    1fea:	69 f7       	brne	.-38     	; 0x1fc6 <LCD_vSend_cmd+0xde>
    1fec:	14 c0       	rjmp	.+40     	; 0x2016 <LCD_vSend_cmd+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fee:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff0:	78 85       	ldd	r23, Y+8	; 0x08
    1ff2:	89 85       	ldd	r24, Y+9	; 0x09
    1ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	9e 83       	std	Y+6, r25	; 0x06
    2000:	8d 83       	std	Y+5, r24	; 0x05
    2002:	8d 81       	ldd	r24, Y+5	; 0x05
    2004:	9e 81       	ldd	r25, Y+6	; 0x06
    2006:	9a 83       	std	Y+2, r25	; 0x02
    2008:	89 83       	std	Y+1, r24	; 0x01
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	9a 81       	ldd	r25, Y+2	; 0x02
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	f1 f7       	brne	.-4      	; 0x200e <LCD_vSend_cmd+0x126>
    2012:	9a 83       	std	Y+2, r25	; 0x02
    2014:	89 83       	std	Y+1, r24	; 0x01
	#endif
	_delay_ms(1);
}
    2016:	2f 96       	adiw	r28, 0x0f	; 15
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <LCD_vSend_char>:

void LCD_vSend_char(char data)
{
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	2f 97       	sbiw	r28, 0x0f	; 15
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_write_port('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',data>>4);
    203e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2040:	98 2f       	mov	r25, r24
    2042:	92 95       	swap	r25
    2044:	9f 70       	andi	r25, 0x0F	; 15
    2046:	81 e4       	ldi	r24, 0x41	; 65
    2048:	69 2f       	mov	r22, r25
    204a:	0e 94 b1 0a 	call	0x1562	; 0x1562 <write_high_nibble>
	DIO_write('A',RS,1);
    204e:	81 e4       	ldi	r24, 0x41	; 65
    2050:	62 e0       	ldi	r22, 0x02	; 2
    2052:	41 e0       	ldi	r20, 0x01	; 1
    2054:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
	send_falling_edge();
    2058:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <send_falling_edge>
	write_high_nibble('A',data);
    205c:	81 e4       	ldi	r24, 0x41	; 65
    205e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2060:	0e 94 b1 0a 	call	0x1562	; 0x1562 <write_high_nibble>
	DIO_write('A',RS,1);
    2064:	81 e4       	ldi	r24, 0x41	; 65
    2066:	62 e0       	ldi	r22, 0x02	; 2
    2068:	41 e0       	ldi	r20, 0x01	; 1
    206a:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
	send_falling_edge();
    206e:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <send_falling_edge>
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	a0 e8       	ldi	r26, 0x80	; 128
    2078:	bf e3       	ldi	r27, 0x3F	; 63
    207a:	8b 87       	std	Y+11, r24	; 0x0b
    207c:	9c 87       	std	Y+12, r25	; 0x0c
    207e:	ad 87       	std	Y+13, r26	; 0x0d
    2080:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2082:	6b 85       	ldd	r22, Y+11	; 0x0b
    2084:	7c 85       	ldd	r23, Y+12	; 0x0c
    2086:	8d 85       	ldd	r24, Y+13	; 0x0d
    2088:	9e 85       	ldd	r25, Y+14	; 0x0e
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	4a ef       	ldi	r20, 0xFA	; 250
    2090:	54 e4       	ldi	r21, 0x44	; 68
    2092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	8f 83       	std	Y+7, r24	; 0x07
    209c:	98 87       	std	Y+8, r25	; 0x08
    209e:	a9 87       	std	Y+9, r26	; 0x09
    20a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20a2:	6f 81       	ldd	r22, Y+7	; 0x07
    20a4:	78 85       	ldd	r23, Y+8	; 0x08
    20a6:	89 85       	ldd	r24, Y+9	; 0x09
    20a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e8       	ldi	r20, 0x80	; 128
    20b0:	5f e3       	ldi	r21, 0x3F	; 63
    20b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b6:	88 23       	and	r24, r24
    20b8:	2c f4       	brge	.+10     	; 0x20c4 <LCD_vSend_char+0x9c>
		__ticks = 1;
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	9e 83       	std	Y+6, r25	; 0x06
    20c0:	8d 83       	std	Y+5, r24	; 0x05
    20c2:	3f c0       	rjmp	.+126    	; 0x2142 <LCD_vSend_char+0x11a>
	else if (__tmp > 65535)
    20c4:	6f 81       	ldd	r22, Y+7	; 0x07
    20c6:	78 85       	ldd	r23, Y+8	; 0x08
    20c8:	89 85       	ldd	r24, Y+9	; 0x09
    20ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	3f ef       	ldi	r19, 0xFF	; 255
    20d0:	4f e7       	ldi	r20, 0x7F	; 127
    20d2:	57 e4       	ldi	r21, 0x47	; 71
    20d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d8:	18 16       	cp	r1, r24
    20da:	4c f5       	brge	.+82     	; 0x212e <LCD_vSend_char+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20de:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e2       	ldi	r20, 0x20	; 32
    20ea:	51 e4       	ldi	r21, 0x41	; 65
    20ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	bc 01       	movw	r22, r24
    20f6:	cd 01       	movw	r24, r26
    20f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	9e 83       	std	Y+6, r25	; 0x06
    2102:	8d 83       	std	Y+5, r24	; 0x05
    2104:	0f c0       	rjmp	.+30     	; 0x2124 <LCD_vSend_char+0xfc>
    2106:	88 ec       	ldi	r24, 0xC8	; 200
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9c 83       	std	Y+4, r25	; 0x04
    210c:	8b 83       	std	Y+3, r24	; 0x03
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	9c 81       	ldd	r25, Y+4	; 0x04
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	f1 f7       	brne	.-4      	; 0x2112 <LCD_vSend_char+0xea>
    2116:	9c 83       	std	Y+4, r25	; 0x04
    2118:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	9e 81       	ldd	r25, Y+6	; 0x06
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	9e 83       	std	Y+6, r25	; 0x06
    2122:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2124:	8d 81       	ldd	r24, Y+5	; 0x05
    2126:	9e 81       	ldd	r25, Y+6	; 0x06
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	69 f7       	brne	.-38     	; 0x2106 <LCD_vSend_char+0xde>
    212c:	14 c0       	rjmp	.+40     	; 0x2156 <LCD_vSend_char+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212e:	6f 81       	ldd	r22, Y+7	; 0x07
    2130:	78 85       	ldd	r23, Y+8	; 0x08
    2132:	89 85       	ldd	r24, Y+9	; 0x09
    2134:	9a 85       	ldd	r25, Y+10	; 0x0a
    2136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	9e 83       	std	Y+6, r25	; 0x06
    2140:	8d 83       	std	Y+5, r24	; 0x05
    2142:	8d 81       	ldd	r24, Y+5	; 0x05
    2144:	9e 81       	ldd	r25, Y+6	; 0x06
    2146:	9a 83       	std	Y+2, r25	; 0x02
    2148:	89 83       	std	Y+1, r24	; 0x01
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	9a 81       	ldd	r25, Y+2	; 0x02
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	f1 f7       	brne	.-4      	; 0x214e <LCD_vSend_char+0x126>
    2152:	9a 83       	std	Y+2, r25	; 0x02
    2154:	89 83       	std	Y+1, r24	; 0x01
	#endif
	_delay_ms(1);
}
    2156:	2f 96       	adiw	r28, 0x0f	; 15
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61
    2162:	cf 91       	pop	r28
    2164:	df 91       	pop	r29
    2166:	08 95       	ret

00002168 <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
    2168:	df 93       	push	r29
    216a:	cf 93       	push	r28
    216c:	00 d0       	rcall	.+0      	; 0x216e <LCD_vSend_string+0x6>
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	9a 83       	std	Y+2, r25	; 0x02
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	0a c0       	rjmp	.+20     	; 0x218c <LCD_vSend_string+0x24>
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
    2178:	e9 81       	ldd	r30, Y+1	; 0x01
    217a:	fa 81       	ldd	r31, Y+2	; 0x02
    217c:	80 81       	ld	r24, Z
    217e:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
		data++;
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	9a 81       	ldd	r25, Y+2	; 0x02
    2186:	01 96       	adiw	r24, 0x01	; 1
    2188:	9a 83       	std	Y+2, r25	; 0x02
    218a:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
    218c:	e9 81       	ldd	r30, Y+1	; 0x01
    218e:	fa 81       	ldd	r31, Y+2	; 0x02
    2190:	80 81       	ld	r24, Z
    2192:	88 23       	and	r24, r24
    2194:	89 f7       	brne	.-30     	; 0x2178 <LCD_vSend_string+0x10>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	cf 91       	pop	r28
    219c:	df 91       	pop	r29
    219e:	08 95       	ret

000021a0 <LCD_clearscreen>:
void LCD_clearscreen()
{
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	2e 97       	sbiw	r28, 0x0e	; 14
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
	LCD_vSend_cmd(CLR_SCREEN);
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_vSend_cmd>
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	a0 e2       	ldi	r26, 0x20	; 32
    21c0:	b1 e4       	ldi	r27, 0x41	; 65
    21c2:	8b 87       	std	Y+11, r24	; 0x0b
    21c4:	9c 87       	std	Y+12, r25	; 0x0c
    21c6:	ad 87       	std	Y+13, r26	; 0x0d
    21c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    21cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	4a ef       	ldi	r20, 0xFA	; 250
    21d8:	54 e4       	ldi	r21, 0x44	; 68
    21da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	8f 83       	std	Y+7, r24	; 0x07
    21e4:	98 87       	std	Y+8, r25	; 0x08
    21e6:	a9 87       	std	Y+9, r26	; 0x09
    21e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ea:	6f 81       	ldd	r22, Y+7	; 0x07
    21ec:	78 85       	ldd	r23, Y+8	; 0x08
    21ee:	89 85       	ldd	r24, Y+9	; 0x09
    21f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e8       	ldi	r20, 0x80	; 128
    21f8:	5f e3       	ldi	r21, 0x3F	; 63
    21fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21fe:	88 23       	and	r24, r24
    2200:	2c f4       	brge	.+10     	; 0x220c <LCD_clearscreen+0x6c>
		__ticks = 1;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	9e 83       	std	Y+6, r25	; 0x06
    2208:	8d 83       	std	Y+5, r24	; 0x05
    220a:	3f c0       	rjmp	.+126    	; 0x228a <LCD_clearscreen+0xea>
	else if (__tmp > 65535)
    220c:	6f 81       	ldd	r22, Y+7	; 0x07
    220e:	78 85       	ldd	r23, Y+8	; 0x08
    2210:	89 85       	ldd	r24, Y+9	; 0x09
    2212:	9a 85       	ldd	r25, Y+10	; 0x0a
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	3f ef       	ldi	r19, 0xFF	; 255
    2218:	4f e7       	ldi	r20, 0x7F	; 127
    221a:	57 e4       	ldi	r21, 0x47	; 71
    221c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2220:	18 16       	cp	r1, r24
    2222:	4c f5       	brge	.+82     	; 0x2276 <LCD_clearscreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2224:	6b 85       	ldd	r22, Y+11	; 0x0b
    2226:	7c 85       	ldd	r23, Y+12	; 0x0c
    2228:	8d 85       	ldd	r24, Y+13	; 0x0d
    222a:	9e 85       	ldd	r25, Y+14	; 0x0e
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e2       	ldi	r20, 0x20	; 32
    2232:	51 e4       	ldi	r21, 0x41	; 65
    2234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	bc 01       	movw	r22, r24
    223e:	cd 01       	movw	r24, r26
    2240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	9e 83       	std	Y+6, r25	; 0x06
    224a:	8d 83       	std	Y+5, r24	; 0x05
    224c:	0f c0       	rjmp	.+30     	; 0x226c <LCD_clearscreen+0xcc>
    224e:	88 ec       	ldi	r24, 0xC8	; 200
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	9c 83       	std	Y+4, r25	; 0x04
    2254:	8b 83       	std	Y+3, r24	; 0x03
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	9c 81       	ldd	r25, Y+4	; 0x04
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	f1 f7       	brne	.-4      	; 0x225a <LCD_clearscreen+0xba>
    225e:	9c 83       	std	Y+4, r25	; 0x04
    2260:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2262:	8d 81       	ldd	r24, Y+5	; 0x05
    2264:	9e 81       	ldd	r25, Y+6	; 0x06
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	9e 83       	std	Y+6, r25	; 0x06
    226a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226c:	8d 81       	ldd	r24, Y+5	; 0x05
    226e:	9e 81       	ldd	r25, Y+6	; 0x06
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	69 f7       	brne	.-38     	; 0x224e <LCD_clearscreen+0xae>
    2274:	14 c0       	rjmp	.+40     	; 0x229e <LCD_clearscreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2276:	6f 81       	ldd	r22, Y+7	; 0x07
    2278:	78 85       	ldd	r23, Y+8	; 0x08
    227a:	89 85       	ldd	r24, Y+9	; 0x09
    227c:	9a 85       	ldd	r25, Y+10	; 0x0a
    227e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	9e 83       	std	Y+6, r25	; 0x06
    2288:	8d 83       	std	Y+5, r24	; 0x05
    228a:	8d 81       	ldd	r24, Y+5	; 0x05
    228c:	9e 81       	ldd	r25, Y+6	; 0x06
    228e:	9a 83       	std	Y+2, r25	; 0x02
    2290:	89 83       	std	Y+1, r24	; 0x01
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	9a 81       	ldd	r25, Y+2	; 0x02
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	f1 f7       	brne	.-4      	; 0x2296 <LCD_clearscreen+0xf6>
    229a:	9a 83       	std	Y+2, r25	; 0x02
    229c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    229e:	2e 96       	adiw	r28, 0x0e	; 14
    22a0:	0f b6       	in	r0, 0x3f	; 63
    22a2:	f8 94       	cli
    22a4:	de bf       	out	0x3e, r29	; 62
    22a6:	0f be       	out	0x3f, r0	; 63
    22a8:	cd bf       	out	0x3d, r28	; 61
    22aa:	cf 91       	pop	r28
    22ac:	df 91       	pop	r29
    22ae:	08 95       	ret

000022b0 <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
    22b0:	df 93       	push	r29
    22b2:	cf 93       	push	r28
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	61 97       	sbiw	r28, 0x11	; 17
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	f8 94       	cli
    22be:	de bf       	out	0x3e, r29	; 62
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	cd bf       	out	0x3d, r28	; 61
    22c4:	88 8b       	std	Y+16, r24	; 0x10
    22c6:	69 8b       	std	Y+17, r22	; 0x11
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
    22c8:	88 89       	ldd	r24, Y+16	; 0x10
    22ca:	83 30       	cpi	r24, 0x03	; 3
    22cc:	48 f4       	brcc	.+18     	; 0x22e0 <LCD_movecursor+0x30>
    22ce:	88 89       	ldd	r24, Y+16	; 0x10
    22d0:	88 23       	and	r24, r24
    22d2:	31 f0       	breq	.+12     	; 0x22e0 <LCD_movecursor+0x30>
    22d4:	89 89       	ldd	r24, Y+17	; 0x11
    22d6:	81 31       	cpi	r24, 0x11	; 17
    22d8:	18 f4       	brcc	.+6      	; 0x22e0 <LCD_movecursor+0x30>
    22da:	89 89       	ldd	r24, Y+17	; 0x11
    22dc:	88 23       	and	r24, r24
    22de:	19 f4       	brne	.+6      	; 0x22e6 <LCD_movecursor+0x36>
	{
		data=0x80;
    22e0:	80 e8       	ldi	r24, 0x80	; 128
    22e2:	8f 87       	std	Y+15, r24	; 0x0f
    22e4:	0d c0       	rjmp	.+26     	; 0x2300 <LCD_movecursor+0x50>
	}
	else if(row==1)
    22e6:	88 89       	ldd	r24, Y+16	; 0x10
    22e8:	81 30       	cpi	r24, 0x01	; 1
    22ea:	21 f4       	brne	.+8      	; 0x22f4 <LCD_movecursor+0x44>
	{
		data=0x80+coloumn-1 ;
    22ec:	89 89       	ldd	r24, Y+17	; 0x11
    22ee:	81 58       	subi	r24, 0x81	; 129
    22f0:	8f 87       	std	Y+15, r24	; 0x0f
    22f2:	06 c0       	rjmp	.+12     	; 0x2300 <LCD_movecursor+0x50>
	}
	else if (row==2)
    22f4:	88 89       	ldd	r24, Y+16	; 0x10
    22f6:	82 30       	cpi	r24, 0x02	; 2
    22f8:	19 f4       	brne	.+6      	; 0x2300 <LCD_movecursor+0x50>
	{
		data=0xc0+coloumn-1;
    22fa:	89 89       	ldd	r24, Y+17	; 0x11
    22fc:	81 54       	subi	r24, 0x41	; 65
    22fe:	8f 87       	std	Y+15, r24	; 0x0f
	}
	LCD_vSend_cmd(data);
    2300:	8f 85       	ldd	r24, Y+15	; 0x0f
    2302:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <LCD_vSend_cmd>
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	a0 e8       	ldi	r26, 0x80	; 128
    230c:	bf e3       	ldi	r27, 0x3F	; 63
    230e:	8b 87       	std	Y+11, r24	; 0x0b
    2310:	9c 87       	std	Y+12, r25	; 0x0c
    2312:	ad 87       	std	Y+13, r26	; 0x0d
    2314:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2316:	6b 85       	ldd	r22, Y+11	; 0x0b
    2318:	7c 85       	ldd	r23, Y+12	; 0x0c
    231a:	8d 85       	ldd	r24, Y+13	; 0x0d
    231c:	9e 85       	ldd	r25, Y+14	; 0x0e
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	4a ef       	ldi	r20, 0xFA	; 250
    2324:	54 e4       	ldi	r21, 0x44	; 68
    2326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	8f 83       	std	Y+7, r24	; 0x07
    2330:	98 87       	std	Y+8, r25	; 0x08
    2332:	a9 87       	std	Y+9, r26	; 0x09
    2334:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2336:	6f 81       	ldd	r22, Y+7	; 0x07
    2338:	78 85       	ldd	r23, Y+8	; 0x08
    233a:	89 85       	ldd	r24, Y+9	; 0x09
    233c:	9a 85       	ldd	r25, Y+10	; 0x0a
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e8       	ldi	r20, 0x80	; 128
    2344:	5f e3       	ldi	r21, 0x3F	; 63
    2346:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    234a:	88 23       	and	r24, r24
    234c:	2c f4       	brge	.+10     	; 0x2358 <LCD_movecursor+0xa8>
		__ticks = 1;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9e 83       	std	Y+6, r25	; 0x06
    2354:	8d 83       	std	Y+5, r24	; 0x05
    2356:	3f c0       	rjmp	.+126    	; 0x23d6 <LCD_movecursor+0x126>
	else if (__tmp > 65535)
    2358:	6f 81       	ldd	r22, Y+7	; 0x07
    235a:	78 85       	ldd	r23, Y+8	; 0x08
    235c:	89 85       	ldd	r24, Y+9	; 0x09
    235e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	3f ef       	ldi	r19, 0xFF	; 255
    2364:	4f e7       	ldi	r20, 0x7F	; 127
    2366:	57 e4       	ldi	r21, 0x47	; 71
    2368:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    236c:	18 16       	cp	r1, r24
    236e:	4c f5       	brge	.+82     	; 0x23c2 <LCD_movecursor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2370:	6b 85       	ldd	r22, Y+11	; 0x0b
    2372:	7c 85       	ldd	r23, Y+12	; 0x0c
    2374:	8d 85       	ldd	r24, Y+13	; 0x0d
    2376:	9e 85       	ldd	r25, Y+14	; 0x0e
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e2       	ldi	r20, 0x20	; 32
    237e:	51 e4       	ldi	r21, 0x41	; 65
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	bc 01       	movw	r22, r24
    238a:	cd 01       	movw	r24, r26
    238c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	9e 83       	std	Y+6, r25	; 0x06
    2396:	8d 83       	std	Y+5, r24	; 0x05
    2398:	0f c0       	rjmp	.+30     	; 0x23b8 <LCD_movecursor+0x108>
    239a:	88 ec       	ldi	r24, 0xC8	; 200
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	9c 83       	std	Y+4, r25	; 0x04
    23a0:	8b 83       	std	Y+3, r24	; 0x03
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	9c 81       	ldd	r25, Y+4	; 0x04
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <LCD_movecursor+0xf6>
    23aa:	9c 83       	std	Y+4, r25	; 0x04
    23ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ae:	8d 81       	ldd	r24, Y+5	; 0x05
    23b0:	9e 81       	ldd	r25, Y+6	; 0x06
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	9e 83       	std	Y+6, r25	; 0x06
    23b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ba:	9e 81       	ldd	r25, Y+6	; 0x06
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	69 f7       	brne	.-38     	; 0x239a <LCD_movecursor+0xea>
    23c0:	14 c0       	rjmp	.+40     	; 0x23ea <LCD_movecursor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c2:	6f 81       	ldd	r22, Y+7	; 0x07
    23c4:	78 85       	ldd	r23, Y+8	; 0x08
    23c6:	89 85       	ldd	r24, Y+9	; 0x09
    23c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	9e 83       	std	Y+6, r25	; 0x06
    23d4:	8d 83       	std	Y+5, r24	; 0x05
    23d6:	8d 81       	ldd	r24, Y+5	; 0x05
    23d8:	9e 81       	ldd	r25, Y+6	; 0x06
    23da:	9a 83       	std	Y+2, r25	; 0x02
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	9a 81       	ldd	r25, Y+2	; 0x02
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <LCD_movecursor+0x132>
    23e6:	9a 83       	std	Y+2, r25	; 0x02
    23e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    23ea:	61 96       	adiw	r28, 0x11	; 17
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	08 95       	ret

000023fc <main>:
void select_mode();

//===================================================================/

int main(void)
{
    23fc:	0f 93       	push	r16
    23fe:	1f 93       	push	r17
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
    2408:	c4 56       	subi	r28, 0x64	; 100
    240a:	d0 40       	sbci	r29, 0x00	; 0
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	cd bf       	out	0x3d, r28	; 61
	mode = '1';
    2416:	81 e3       	ldi	r24, 0x31	; 49
    2418:	80 93 1c 01 	sts	0x011C, r24
	keypad_vInit();
    241c:	0e 94 87 21 	call	0x430e	; 0x430e <keypad_vInit>
	LCD_vInit();
    2420:	0e 94 23 0b 	call	0x1646	; 0x1646 <LCD_vInit>
	seven_seg_vinit('B');
    2424:	82 e4       	ldi	r24, 0x42	; 66
    2426:	0e 94 4d 22 	call	0x449a	; 0x449a <seven_seg_vinit>
	SET_BIT   (DDRC,0);
    242a:	a4 e3       	ldi	r26, 0x34	; 52
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	e4 e3       	ldi	r30, 0x34	; 52
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	81 60       	ori	r24, 0x01	; 1
    2436:	8c 93       	st	X, r24
	SET_BIT   (DDRC,1);
    2438:	a4 e3       	ldi	r26, 0x34	; 52
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	e4 e3       	ldi	r30, 0x34	; 52
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	82 60       	ori	r24, 0x02	; 2
    2444:	8c 93       	st	X, r24
	SET_BIT   (DDRC,2);
    2446:	a4 e3       	ldi	r26, 0x34	; 52
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	e4 e3       	ldi	r30, 0x34	; 52
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	84 60       	ori	r24, 0x04	; 4
    2452:	8c 93       	st	X, r24
	SET_BIT   (DDRC,3);
    2454:	a4 e3       	ldi	r26, 0x34	; 52
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	e4 e3       	ldi	r30, 0x34	; 52
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	88 60       	ori	r24, 0x08	; 8
    2460:	8c 93       	st	X, r24
	SET_BIT   (DDRC,4);
    2462:	a4 e3       	ldi	r26, 0x34	; 52
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e4 e3       	ldi	r30, 0x34	; 52
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	80 61       	ori	r24, 0x10	; 16
    246e:	8c 93       	st	X, r24
	SET_BIT   (DDRC,5);
    2470:	a4 e3       	ldi	r26, 0x34	; 52
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	e4 e3       	ldi	r30, 0x34	; 52
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	80 62       	ori	r24, 0x20	; 32
    247c:	8c 93       	st	X, r24
	SET_BIT   (DDRA, 3);
    247e:	aa e3       	ldi	r26, 0x3A	; 58
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	ea e3       	ldi	r30, 0x3A	; 58
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	88 60       	ori	r24, 0x08	; 8
    248a:	8c 93       	st	X, r24
	CLR_BIT   (PORTA, 3);
    248c:	ab e3       	ldi	r26, 0x3B	; 59
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	eb e3       	ldi	r30, 0x3B	; 59
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	87 7f       	andi	r24, 0xF7	; 247
    2498:	8c 93       	st	X, r24
	LCD_vSend_string("1 - set time");
    249a:	80 e6       	ldi	r24, 0x60	; 96
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
	LCD_movecursor(2,1);
    24a2:	82 e0       	ldi	r24, 0x02	; 2
    24a4:	61 e0       	ldi	r22, 0x01	; 1
    24a6:	0e 94 58 11 	call	0x22b0	; 0x22b0 <LCD_movecursor>
	LCD_vSend_string("2 - select mode");
    24aa:	8d e6       	ldi	r24, 0x6D	; 109
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
	timer2_overflow_init_interrupt();
    24b2:	0e 94 9d 22 	call	0x453a	; 0x453a <timer2_overflow_init_interrupt>
	while(1)
	{
		value = keypad_u8check_press();
    24b6:	0e 94 ca 21 	call	0x4394	; 0x4394 <keypad_u8check_press>
    24ba:	80 93 1e 01 	sts	0x011E, r24
		if (value != NOTPRESSED)
    24be:	80 91 1e 01 	lds	r24, 0x011E
    24c2:	8f 3f       	cpi	r24, 0xFF	; 255
    24c4:	09 f4       	brne	.+2      	; 0x24c8 <main+0xcc>
    24c6:	e4 c0       	rjmp	.+456    	; 0x2690 <main+0x294>
		{
			switch(value)
    24c8:	80 91 1e 01 	lds	r24, 0x011E
    24cc:	28 2f       	mov	r18, r24
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	a5 96       	adiw	r28, 0x25	; 37
    24d2:	3f af       	std	Y+63, r19	; 0x3f
    24d4:	2e af       	std	Y+62, r18	; 0x3e
    24d6:	a5 97       	sbiw	r28, 0x25	; 37
    24d8:	a5 96       	adiw	r28, 0x25	; 37
    24da:	8e ad       	ldd	r24, Y+62	; 0x3e
    24dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    24de:	a5 97       	sbiw	r28, 0x25	; 37
    24e0:	81 33       	cpi	r24, 0x31	; 49
    24e2:	91 05       	cpc	r25, r1
    24e4:	41 f0       	breq	.+16     	; 0x24f6 <main+0xfa>
    24e6:	a5 96       	adiw	r28, 0x25	; 37
    24e8:	ee ad       	ldd	r30, Y+62	; 0x3e
    24ea:	ff ad       	ldd	r31, Y+63	; 0x3f
    24ec:	a5 97       	sbiw	r28, 0x25	; 37
    24ee:	e2 33       	cpi	r30, 0x32	; 50
    24f0:	f1 05       	cpc	r31, r1
    24f2:	21 f0       	breq	.+8      	; 0x24fc <main+0x100>
    24f4:	06 c0       	rjmp	.+12     	; 0x2502 <main+0x106>
			{
			case '1':
				Set_Time();
    24f6:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <Set_Time>
    24fa:	ca c0       	rjmp	.+404    	; 0x2690 <main+0x294>
				break;
			case '2':
				select_mode();
    24fc:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <select_mode>
    2500:	c7 c0       	rjmp	.+398    	; 0x2690 <main+0x294>
				break;
			default:
				LCD_clearscreen();
    2502:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <LCD_clearscreen>
				LCD_vSend_string("wrong choice");
    2506:	8d e7       	ldi	r24, 0x7D	; 125
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
    250e:	fe 01       	movw	r30, r28
    2510:	e1 5a       	subi	r30, 0xA1	; 161
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	aa e7       	ldi	r26, 0x7A	; 122
    251a:	b4 e4       	ldi	r27, 0x44	; 68
    251c:	80 83       	st	Z, r24
    251e:	91 83       	std	Z+1, r25	; 0x01
    2520:	a2 83       	std	Z+2, r26	; 0x02
    2522:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2524:	8e 01       	movw	r16, r28
    2526:	05 5a       	subi	r16, 0xA5	; 165
    2528:	1f 4f       	sbci	r17, 0xFF	; 255
    252a:	fe 01       	movw	r30, r28
    252c:	e1 5a       	subi	r30, 0xA1	; 161
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	60 81       	ld	r22, Z
    2532:	71 81       	ldd	r23, Z+1	; 0x01
    2534:	82 81       	ldd	r24, Z+2	; 0x02
    2536:	93 81       	ldd	r25, Z+3	; 0x03
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	4a ef       	ldi	r20, 0xFA	; 250
    253e:	54 e4       	ldi	r21, 0x44	; 68
    2540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	f8 01       	movw	r30, r16
    254a:	80 83       	st	Z, r24
    254c:	91 83       	std	Z+1, r25	; 0x01
    254e:	a2 83       	std	Z+2, r26	; 0x02
    2550:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2552:	fe 01       	movw	r30, r28
    2554:	e5 5a       	subi	r30, 0xA5	; 165
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	60 81       	ld	r22, Z
    255a:	71 81       	ldd	r23, Z+1	; 0x01
    255c:	82 81       	ldd	r24, Z+2	; 0x02
    255e:	93 81       	ldd	r25, Z+3	; 0x03
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e8       	ldi	r20, 0x80	; 128
    2566:	5f e3       	ldi	r21, 0x3F	; 63
    2568:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    256c:	88 23       	and	r24, r24
    256e:	44 f4       	brge	.+16     	; 0x2580 <main+0x184>
		__ticks = 1;
    2570:	fe 01       	movw	r30, r28
    2572:	e7 5a       	subi	r30, 0xA7	; 167
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	91 83       	std	Z+1, r25	; 0x01
    257c:	80 83       	st	Z, r24
    257e:	64 c0       	rjmp	.+200    	; 0x2648 <main+0x24c>
	else if (__tmp > 65535)
    2580:	fe 01       	movw	r30, r28
    2582:	e5 5a       	subi	r30, 0xA5	; 165
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	60 81       	ld	r22, Z
    2588:	71 81       	ldd	r23, Z+1	; 0x01
    258a:	82 81       	ldd	r24, Z+2	; 0x02
    258c:	93 81       	ldd	r25, Z+3	; 0x03
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	3f ef       	ldi	r19, 0xFF	; 255
    2592:	4f e7       	ldi	r20, 0x7F	; 127
    2594:	57 e4       	ldi	r21, 0x47	; 71
    2596:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    259a:	18 16       	cp	r1, r24
    259c:	0c f0       	brlt	.+2      	; 0x25a0 <main+0x1a4>
    259e:	43 c0       	rjmp	.+134    	; 0x2626 <main+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a0:	fe 01       	movw	r30, r28
    25a2:	e1 5a       	subi	r30, 0xA1	; 161
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	60 81       	ld	r22, Z
    25a8:	71 81       	ldd	r23, Z+1	; 0x01
    25aa:	82 81       	ldd	r24, Z+2	; 0x02
    25ac:	93 81       	ldd	r25, Z+3	; 0x03
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e2       	ldi	r20, 0x20	; 32
    25b4:	51 e4       	ldi	r21, 0x41	; 65
    25b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	8e 01       	movw	r16, r28
    25c0:	07 5a       	subi	r16, 0xA7	; 167
    25c2:	1f 4f       	sbci	r17, 0xFF	; 255
    25c4:	bc 01       	movw	r22, r24
    25c6:	cd 01       	movw	r24, r26
    25c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	f8 01       	movw	r30, r16
    25d2:	91 83       	std	Z+1, r25	; 0x01
    25d4:	80 83       	st	Z, r24
    25d6:	1f c0       	rjmp	.+62     	; 0x2616 <main+0x21a>
    25d8:	fe 01       	movw	r30, r28
    25da:	e9 5a       	subi	r30, 0xA9	; 169
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	88 ec       	ldi	r24, 0xC8	; 200
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	91 83       	std	Z+1, r25	; 0x01
    25e4:	80 83       	st	Z, r24
    25e6:	fe 01       	movw	r30, r28
    25e8:	e9 5a       	subi	r30, 0xA9	; 169
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	80 81       	ld	r24, Z
    25ee:	91 81       	ldd	r25, Z+1	; 0x01
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	f1 f7       	brne	.-4      	; 0x25f0 <main+0x1f4>
    25f4:	fe 01       	movw	r30, r28
    25f6:	e9 5a       	subi	r30, 0xA9	; 169
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	91 83       	std	Z+1, r25	; 0x01
    25fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fe:	de 01       	movw	r26, r28
    2600:	a7 5a       	subi	r26, 0xA7	; 167
    2602:	bf 4f       	sbci	r27, 0xFF	; 255
    2604:	fe 01       	movw	r30, r28
    2606:	e7 5a       	subi	r30, 0xA7	; 167
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	80 81       	ld	r24, Z
    260c:	91 81       	ldd	r25, Z+1	; 0x01
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	11 96       	adiw	r26, 0x01	; 1
    2612:	9c 93       	st	X, r25
    2614:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2616:	fe 01       	movw	r30, r28
    2618:	e7 5a       	subi	r30, 0xA7	; 167
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	80 81       	ld	r24, Z
    261e:	91 81       	ldd	r25, Z+1	; 0x01
    2620:	00 97       	sbiw	r24, 0x00	; 0
    2622:	d1 f6       	brne	.-76     	; 0x25d8 <main+0x1dc>
    2624:	27 c0       	rjmp	.+78     	; 0x2674 <main+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2626:	8e 01       	movw	r16, r28
    2628:	07 5a       	subi	r16, 0xA7	; 167
    262a:	1f 4f       	sbci	r17, 0xFF	; 255
    262c:	fe 01       	movw	r30, r28
    262e:	e5 5a       	subi	r30, 0xA5	; 165
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	60 81       	ld	r22, Z
    2634:	71 81       	ldd	r23, Z+1	; 0x01
    2636:	82 81       	ldd	r24, Z+2	; 0x02
    2638:	93 81       	ldd	r25, Z+3	; 0x03
    263a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	f8 01       	movw	r30, r16
    2644:	91 83       	std	Z+1, r25	; 0x01
    2646:	80 83       	st	Z, r24
    2648:	de 01       	movw	r26, r28
    264a:	ab 5a       	subi	r26, 0xAB	; 171
    264c:	bf 4f       	sbci	r27, 0xFF	; 255
    264e:	fe 01       	movw	r30, r28
    2650:	e7 5a       	subi	r30, 0xA7	; 167
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	80 81       	ld	r24, Z
    2656:	91 81       	ldd	r25, Z+1	; 0x01
    2658:	8d 93       	st	X+, r24
    265a:	9c 93       	st	X, r25
    265c:	fe 01       	movw	r30, r28
    265e:	eb 5a       	subi	r30, 0xAB	; 171
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	80 81       	ld	r24, Z
    2664:	91 81       	ldd	r25, Z+1	; 0x01
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	f1 f7       	brne	.-4      	; 0x2666 <main+0x26a>
    266a:	fe 01       	movw	r30, r28
    266c:	eb 5a       	subi	r30, 0xAB	; 171
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	91 83       	std	Z+1, r25	; 0x01
    2672:	80 83       	st	Z, r24
				_delay_ms(1000);
				LCD_clearscreen();
    2674:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <LCD_clearscreen>
				LCD_vSend_string("1 - set time");
    2678:	80 e6       	ldi	r24, 0x60	; 96
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
				LCD_movecursor(2,1);
    2680:	82 e0       	ldi	r24, 0x02	; 2
    2682:	61 e0       	ldi	r22, 0x01	; 1
    2684:	0e 94 58 11 	call	0x22b0	; 0x22b0 <LCD_movecursor>
				LCD_vSend_string("2 - select mode");
    2688:	8d e6       	ldi	r24, 0x6D	; 109
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
				break;
			}
		}
		SET_BIT(PORTC,5);
    2690:	a5 e3       	ldi	r26, 0x35	; 53
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	e5 e3       	ldi	r30, 0x35	; 53
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	80 62       	ori	r24, 0x20	; 32
    269c:	8c 93       	st	X, r24
		CLR_BIT(PORTC,0);
    269e:	a5 e3       	ldi	r26, 0x35	; 53
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	e5 e3       	ldi	r30, 0x35	; 53
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	8e 7f       	andi	r24, 0xFE	; 254
    26aa:	8c 93       	st	X, r24
		seven_seg_write('B',seconds_counter%10);
    26ac:	80 91 16 01 	lds	r24, 0x0116
    26b0:	9a e0       	ldi	r25, 0x0A	; 10
    26b2:	69 2f       	mov	r22, r25
    26b4:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    26b8:	89 2f       	mov	r24, r25
    26ba:	98 2f       	mov	r25, r24
    26bc:	82 e4       	ldi	r24, 0x42	; 66
    26be:	69 2f       	mov	r22, r25
    26c0:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <seven_seg_write>
    26c4:	fe 01       	movw	r30, r28
    26c6:	ef 5a       	subi	r30, 0xAF	; 175
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	a0 ea       	ldi	r26, 0xA0	; 160
    26d0:	b0 e4       	ldi	r27, 0x40	; 64
    26d2:	80 83       	st	Z, r24
    26d4:	91 83       	std	Z+1, r25	; 0x01
    26d6:	a2 83       	std	Z+2, r26	; 0x02
    26d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26da:	8e 01       	movw	r16, r28
    26dc:	03 5b       	subi	r16, 0xB3	; 179
    26de:	1f 4f       	sbci	r17, 0xFF	; 255
    26e0:	fe 01       	movw	r30, r28
    26e2:	ef 5a       	subi	r30, 0xAF	; 175
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	60 81       	ld	r22, Z
    26e8:	71 81       	ldd	r23, Z+1	; 0x01
    26ea:	82 81       	ldd	r24, Z+2	; 0x02
    26ec:	93 81       	ldd	r25, Z+3	; 0x03
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	4a ef       	ldi	r20, 0xFA	; 250
    26f4:	54 e4       	ldi	r21, 0x44	; 68
    26f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	f8 01       	movw	r30, r16
    2700:	80 83       	st	Z, r24
    2702:	91 83       	std	Z+1, r25	; 0x01
    2704:	a2 83       	std	Z+2, r26	; 0x02
    2706:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2708:	fe 01       	movw	r30, r28
    270a:	e3 5b       	subi	r30, 0xB3	; 179
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	60 81       	ld	r22, Z
    2710:	71 81       	ldd	r23, Z+1	; 0x01
    2712:	82 81       	ldd	r24, Z+2	; 0x02
    2714:	93 81       	ldd	r25, Z+3	; 0x03
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	40 e8       	ldi	r20, 0x80	; 128
    271c:	5f e3       	ldi	r21, 0x3F	; 63
    271e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2722:	88 23       	and	r24, r24
    2724:	44 f4       	brge	.+16     	; 0x2736 <main+0x33a>
		__ticks = 1;
    2726:	fe 01       	movw	r30, r28
    2728:	e5 5b       	subi	r30, 0xB5	; 181
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	91 83       	std	Z+1, r25	; 0x01
    2732:	80 83       	st	Z, r24
    2734:	64 c0       	rjmp	.+200    	; 0x27fe <main+0x402>
	else if (__tmp > 65535)
    2736:	fe 01       	movw	r30, r28
    2738:	e3 5b       	subi	r30, 0xB3	; 179
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	60 81       	ld	r22, Z
    273e:	71 81       	ldd	r23, Z+1	; 0x01
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	93 81       	ldd	r25, Z+3	; 0x03
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	3f ef       	ldi	r19, 0xFF	; 255
    2748:	4f e7       	ldi	r20, 0x7F	; 127
    274a:	57 e4       	ldi	r21, 0x47	; 71
    274c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2750:	18 16       	cp	r1, r24
    2752:	0c f0       	brlt	.+2      	; 0x2756 <main+0x35a>
    2754:	43 c0       	rjmp	.+134    	; 0x27dc <main+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2756:	fe 01       	movw	r30, r28
    2758:	ef 5a       	subi	r30, 0xAF	; 175
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	60 81       	ld	r22, Z
    275e:	71 81       	ldd	r23, Z+1	; 0x01
    2760:	82 81       	ldd	r24, Z+2	; 0x02
    2762:	93 81       	ldd	r25, Z+3	; 0x03
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e2       	ldi	r20, 0x20	; 32
    276a:	51 e4       	ldi	r21, 0x41	; 65
    276c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	8e 01       	movw	r16, r28
    2776:	05 5b       	subi	r16, 0xB5	; 181
    2778:	1f 4f       	sbci	r17, 0xFF	; 255
    277a:	bc 01       	movw	r22, r24
    277c:	cd 01       	movw	r24, r26
    277e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	f8 01       	movw	r30, r16
    2788:	91 83       	std	Z+1, r25	; 0x01
    278a:	80 83       	st	Z, r24
    278c:	1f c0       	rjmp	.+62     	; 0x27cc <main+0x3d0>
    278e:	fe 01       	movw	r30, r28
    2790:	e7 5b       	subi	r30, 0xB7	; 183
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	88 ec       	ldi	r24, 0xC8	; 200
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	91 83       	std	Z+1, r25	; 0x01
    279a:	80 83       	st	Z, r24
    279c:	fe 01       	movw	r30, r28
    279e:	e7 5b       	subi	r30, 0xB7	; 183
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	80 81       	ld	r24, Z
    27a4:	91 81       	ldd	r25, Z+1	; 0x01
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	f1 f7       	brne	.-4      	; 0x27a6 <main+0x3aa>
    27aa:	fe 01       	movw	r30, r28
    27ac:	e7 5b       	subi	r30, 0xB7	; 183
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	91 83       	std	Z+1, r25	; 0x01
    27b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b4:	de 01       	movw	r26, r28
    27b6:	a5 5b       	subi	r26, 0xB5	; 181
    27b8:	bf 4f       	sbci	r27, 0xFF	; 255
    27ba:	fe 01       	movw	r30, r28
    27bc:	e5 5b       	subi	r30, 0xB5	; 181
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	80 81       	ld	r24, Z
    27c2:	91 81       	ldd	r25, Z+1	; 0x01
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	11 96       	adiw	r26, 0x01	; 1
    27c8:	9c 93       	st	X, r25
    27ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27cc:	fe 01       	movw	r30, r28
    27ce:	e5 5b       	subi	r30, 0xB5	; 181
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	80 81       	ld	r24, Z
    27d4:	91 81       	ldd	r25, Z+1	; 0x01
    27d6:	00 97       	sbiw	r24, 0x00	; 0
    27d8:	d1 f6       	brne	.-76     	; 0x278e <main+0x392>
    27da:	27 c0       	rjmp	.+78     	; 0x282a <main+0x42e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27dc:	8e 01       	movw	r16, r28
    27de:	05 5b       	subi	r16, 0xB5	; 181
    27e0:	1f 4f       	sbci	r17, 0xFF	; 255
    27e2:	fe 01       	movw	r30, r28
    27e4:	e3 5b       	subi	r30, 0xB3	; 179
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	60 81       	ld	r22, Z
    27ea:	71 81       	ldd	r23, Z+1	; 0x01
    27ec:	82 81       	ldd	r24, Z+2	; 0x02
    27ee:	93 81       	ldd	r25, Z+3	; 0x03
    27f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	f8 01       	movw	r30, r16
    27fa:	91 83       	std	Z+1, r25	; 0x01
    27fc:	80 83       	st	Z, r24
    27fe:	de 01       	movw	r26, r28
    2800:	a9 5b       	subi	r26, 0xB9	; 185
    2802:	bf 4f       	sbci	r27, 0xFF	; 255
    2804:	fe 01       	movw	r30, r28
    2806:	e5 5b       	subi	r30, 0xB5	; 181
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	80 81       	ld	r24, Z
    280c:	91 81       	ldd	r25, Z+1	; 0x01
    280e:	8d 93       	st	X+, r24
    2810:	9c 93       	st	X, r25
    2812:	fe 01       	movw	r30, r28
    2814:	e9 5b       	subi	r30, 0xB9	; 185
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	80 81       	ld	r24, Z
    281a:	91 81       	ldd	r25, Z+1	; 0x01
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	f1 f7       	brne	.-4      	; 0x281c <main+0x420>
    2820:	fe 01       	movw	r30, r28
    2822:	e9 5b       	subi	r30, 0xB9	; 185
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	91 83       	std	Z+1, r25	; 0x01
    2828:	80 83       	st	Z, r24
		_delay_ms(5);

		SET_BIT(PORTC,0);
    282a:	a5 e3       	ldi	r26, 0x35	; 53
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	e5 e3       	ldi	r30, 0x35	; 53
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	81 60       	ori	r24, 0x01	; 1
    2836:	8c 93       	st	X, r24
		CLR_BIT(PORTC,1);
    2838:	a5 e3       	ldi	r26, 0x35	; 53
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	e5 e3       	ldi	r30, 0x35	; 53
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	8d 7f       	andi	r24, 0xFD	; 253
    2844:	8c 93       	st	X, r24
		seven_seg_write('B',seconds_counter/10);
    2846:	80 91 16 01 	lds	r24, 0x0116
    284a:	9a e0       	ldi	r25, 0x0A	; 10
    284c:	69 2f       	mov	r22, r25
    284e:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    2852:	98 2f       	mov	r25, r24
    2854:	82 e4       	ldi	r24, 0x42	; 66
    2856:	69 2f       	mov	r22, r25
    2858:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <seven_seg_write>
    285c:	fe 01       	movw	r30, r28
    285e:	ed 5b       	subi	r30, 0xBD	; 189
    2860:	ff 4f       	sbci	r31, 0xFF	; 255
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	a0 ea       	ldi	r26, 0xA0	; 160
    2868:	b0 e4       	ldi	r27, 0x40	; 64
    286a:	80 83       	st	Z, r24
    286c:	91 83       	std	Z+1, r25	; 0x01
    286e:	a2 83       	std	Z+2, r26	; 0x02
    2870:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2872:	8e 01       	movw	r16, r28
    2874:	01 5c       	subi	r16, 0xC1	; 193
    2876:	1f 4f       	sbci	r17, 0xFF	; 255
    2878:	fe 01       	movw	r30, r28
    287a:	ed 5b       	subi	r30, 0xBD	; 189
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	60 81       	ld	r22, Z
    2880:	71 81       	ldd	r23, Z+1	; 0x01
    2882:	82 81       	ldd	r24, Z+2	; 0x02
    2884:	93 81       	ldd	r25, Z+3	; 0x03
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	4a ef       	ldi	r20, 0xFA	; 250
    288c:	54 e4       	ldi	r21, 0x44	; 68
    288e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	f8 01       	movw	r30, r16
    2898:	80 83       	st	Z, r24
    289a:	91 83       	std	Z+1, r25	; 0x01
    289c:	a2 83       	std	Z+2, r26	; 0x02
    289e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28a0:	fe 01       	movw	r30, r28
    28a2:	ff 96       	adiw	r30, 0x3f	; 63
    28a4:	60 81       	ld	r22, Z
    28a6:	71 81       	ldd	r23, Z+1	; 0x01
    28a8:	82 81       	ldd	r24, Z+2	; 0x02
    28aa:	93 81       	ldd	r25, Z+3	; 0x03
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e8       	ldi	r20, 0x80	; 128
    28b2:	5f e3       	ldi	r21, 0x3F	; 63
    28b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28b8:	88 23       	and	r24, r24
    28ba:	2c f4       	brge	.+10     	; 0x28c6 <main+0x4ca>
		__ticks = 1;
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	9e af       	std	Y+62, r25	; 0x3e
    28c2:	8d af       	std	Y+61, r24	; 0x3d
    28c4:	46 c0       	rjmp	.+140    	; 0x2952 <main+0x556>
	else if (__tmp > 65535)
    28c6:	fe 01       	movw	r30, r28
    28c8:	ff 96       	adiw	r30, 0x3f	; 63
    28ca:	60 81       	ld	r22, Z
    28cc:	71 81       	ldd	r23, Z+1	; 0x01
    28ce:	82 81       	ldd	r24, Z+2	; 0x02
    28d0:	93 81       	ldd	r25, Z+3	; 0x03
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	3f ef       	ldi	r19, 0xFF	; 255
    28d6:	4f e7       	ldi	r20, 0x7F	; 127
    28d8:	57 e4       	ldi	r21, 0x47	; 71
    28da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28de:	18 16       	cp	r1, r24
    28e0:	64 f5       	brge	.+88     	; 0x293a <main+0x53e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e2:	fe 01       	movw	r30, r28
    28e4:	ed 5b       	subi	r30, 0xBD	; 189
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	60 81       	ld	r22, Z
    28ea:	71 81       	ldd	r23, Z+1	; 0x01
    28ec:	82 81       	ldd	r24, Z+2	; 0x02
    28ee:	93 81       	ldd	r25, Z+3	; 0x03
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	40 e2       	ldi	r20, 0x20	; 32
    28f6:	51 e4       	ldi	r21, 0x41	; 65
    28f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	bc 01       	movw	r22, r24
    2902:	cd 01       	movw	r24, r26
    2904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	9e af       	std	Y+62, r25	; 0x3e
    290e:	8d af       	std	Y+61, r24	; 0x3d
    2910:	0f c0       	rjmp	.+30     	; 0x2930 <main+0x534>
    2912:	88 ec       	ldi	r24, 0xC8	; 200
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	9c af       	std	Y+60, r25	; 0x3c
    2918:	8b af       	std	Y+59, r24	; 0x3b
    291a:	8b ad       	ldd	r24, Y+59	; 0x3b
    291c:	9c ad       	ldd	r25, Y+60	; 0x3c
    291e:	01 97       	sbiw	r24, 0x01	; 1
    2920:	f1 f7       	brne	.-4      	; 0x291e <main+0x522>
    2922:	9c af       	std	Y+60, r25	; 0x3c
    2924:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2926:	8d ad       	ldd	r24, Y+61	; 0x3d
    2928:	9e ad       	ldd	r25, Y+62	; 0x3e
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	9e af       	std	Y+62, r25	; 0x3e
    292e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2930:	8d ad       	ldd	r24, Y+61	; 0x3d
    2932:	9e ad       	ldd	r25, Y+62	; 0x3e
    2934:	00 97       	sbiw	r24, 0x00	; 0
    2936:	69 f7       	brne	.-38     	; 0x2912 <main+0x516>
    2938:	16 c0       	rjmp	.+44     	; 0x2966 <main+0x56a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293a:	fe 01       	movw	r30, r28
    293c:	ff 96       	adiw	r30, 0x3f	; 63
    293e:	60 81       	ld	r22, Z
    2940:	71 81       	ldd	r23, Z+1	; 0x01
    2942:	82 81       	ldd	r24, Z+2	; 0x02
    2944:	93 81       	ldd	r25, Z+3	; 0x03
    2946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	9e af       	std	Y+62, r25	; 0x3e
    2950:	8d af       	std	Y+61, r24	; 0x3d
    2952:	8d ad       	ldd	r24, Y+61	; 0x3d
    2954:	9e ad       	ldd	r25, Y+62	; 0x3e
    2956:	9a af       	std	Y+58, r25	; 0x3a
    2958:	89 af       	std	Y+57, r24	; 0x39
    295a:	89 ad       	ldd	r24, Y+57	; 0x39
    295c:	9a ad       	ldd	r25, Y+58	; 0x3a
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	f1 f7       	brne	.-4      	; 0x295e <main+0x562>
    2962:	9a af       	std	Y+58, r25	; 0x3a
    2964:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(5);

		SET_BIT(PORTC,1);
    2966:	a5 e3       	ldi	r26, 0x35	; 53
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	e5 e3       	ldi	r30, 0x35	; 53
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	80 81       	ld	r24, Z
    2970:	82 60       	ori	r24, 0x02	; 2
    2972:	8c 93       	st	X, r24
		CLR_BIT(PORTC,2);
    2974:	a5 e3       	ldi	r26, 0x35	; 53
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	e5 e3       	ldi	r30, 0x35	; 53
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	8b 7f       	andi	r24, 0xFB	; 251
    2980:	8c 93       	st	X, r24
		seven_seg_write('B',minutes_counter%10);
    2982:	80 91 19 01 	lds	r24, 0x0119
    2986:	9a e0       	ldi	r25, 0x0A	; 10
    2988:	69 2f       	mov	r22, r25
    298a:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    298e:	89 2f       	mov	r24, r25
    2990:	98 2f       	mov	r25, r24
    2992:	82 e4       	ldi	r24, 0x42	; 66
    2994:	69 2f       	mov	r22, r25
    2996:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <seven_seg_write>
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	a0 ea       	ldi	r26, 0xA0	; 160
    29a0:	b0 e4       	ldi	r27, 0x40	; 64
    29a2:	8d ab       	std	Y+53, r24	; 0x35
    29a4:	9e ab       	std	Y+54, r25	; 0x36
    29a6:	af ab       	std	Y+55, r26	; 0x37
    29a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29aa:	6d a9       	ldd	r22, Y+53	; 0x35
    29ac:	7e a9       	ldd	r23, Y+54	; 0x36
    29ae:	8f a9       	ldd	r24, Y+55	; 0x37
    29b0:	98 ad       	ldd	r25, Y+56	; 0x38
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	4a ef       	ldi	r20, 0xFA	; 250
    29b8:	54 e4       	ldi	r21, 0x44	; 68
    29ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	89 ab       	std	Y+49, r24	; 0x31
    29c4:	9a ab       	std	Y+50, r25	; 0x32
    29c6:	ab ab       	std	Y+51, r26	; 0x33
    29c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29ca:	69 a9       	ldd	r22, Y+49	; 0x31
    29cc:	7a a9       	ldd	r23, Y+50	; 0x32
    29ce:	8b a9       	ldd	r24, Y+51	; 0x33
    29d0:	9c a9       	ldd	r25, Y+52	; 0x34
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e8       	ldi	r20, 0x80	; 128
    29d8:	5f e3       	ldi	r21, 0x3F	; 63
    29da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29de:	88 23       	and	r24, r24
    29e0:	2c f4       	brge	.+10     	; 0x29ec <main+0x5f0>
		__ticks = 1;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	98 ab       	std	Y+48, r25	; 0x30
    29e8:	8f a7       	std	Y+47, r24	; 0x2f
    29ea:	3f c0       	rjmp	.+126    	; 0x2a6a <main+0x66e>
	else if (__tmp > 65535)
    29ec:	69 a9       	ldd	r22, Y+49	; 0x31
    29ee:	7a a9       	ldd	r23, Y+50	; 0x32
    29f0:	8b a9       	ldd	r24, Y+51	; 0x33
    29f2:	9c a9       	ldd	r25, Y+52	; 0x34
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	3f ef       	ldi	r19, 0xFF	; 255
    29f8:	4f e7       	ldi	r20, 0x7F	; 127
    29fa:	57 e4       	ldi	r21, 0x47	; 71
    29fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a00:	18 16       	cp	r1, r24
    2a02:	4c f5       	brge	.+82     	; 0x2a56 <main+0x65a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a04:	6d a9       	ldd	r22, Y+53	; 0x35
    2a06:	7e a9       	ldd	r23, Y+54	; 0x36
    2a08:	8f a9       	ldd	r24, Y+55	; 0x37
    2a0a:	98 ad       	ldd	r25, Y+56	; 0x38
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 e2       	ldi	r20, 0x20	; 32
    2a12:	51 e4       	ldi	r21, 0x41	; 65
    2a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	bc 01       	movw	r22, r24
    2a1e:	cd 01       	movw	r24, r26
    2a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	98 ab       	std	Y+48, r25	; 0x30
    2a2a:	8f a7       	std	Y+47, r24	; 0x2f
    2a2c:	0f c0       	rjmp	.+30     	; 0x2a4c <main+0x650>
    2a2e:	88 ec       	ldi	r24, 0xC8	; 200
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	9e a7       	std	Y+46, r25	; 0x2e
    2a34:	8d a7       	std	Y+45, r24	; 0x2d
    2a36:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a38:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	f1 f7       	brne	.-4      	; 0x2a3a <main+0x63e>
    2a3e:	9e a7       	std	Y+46, r25	; 0x2e
    2a40:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a42:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a44:	98 a9       	ldd	r25, Y+48	; 0x30
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	98 ab       	std	Y+48, r25	; 0x30
    2a4a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a4e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	69 f7       	brne	.-38     	; 0x2a2e <main+0x632>
    2a54:	14 c0       	rjmp	.+40     	; 0x2a7e <main+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a56:	69 a9       	ldd	r22, Y+49	; 0x31
    2a58:	7a a9       	ldd	r23, Y+50	; 0x32
    2a5a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a5c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	98 ab       	std	Y+48, r25	; 0x30
    2a68:	8f a7       	std	Y+47, r24	; 0x2f
    2a6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a6c:	98 a9       	ldd	r25, Y+48	; 0x30
    2a6e:	9c a7       	std	Y+44, r25	; 0x2c
    2a70:	8b a7       	std	Y+43, r24	; 0x2b
    2a72:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a74:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	f1 f7       	brne	.-4      	; 0x2a76 <main+0x67a>
    2a7a:	9c a7       	std	Y+44, r25	; 0x2c
    2a7c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(5);

		SET_BIT(PORTC,2);
    2a7e:	a5 e3       	ldi	r26, 0x35	; 53
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	e5 e3       	ldi	r30, 0x35	; 53
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	80 81       	ld	r24, Z
    2a88:	84 60       	ori	r24, 0x04	; 4
    2a8a:	8c 93       	st	X, r24
		CLR_BIT(PORTC,3);
    2a8c:	a5 e3       	ldi	r26, 0x35	; 53
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	e5 e3       	ldi	r30, 0x35	; 53
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	87 7f       	andi	r24, 0xF7	; 247
    2a98:	8c 93       	st	X, r24
		seven_seg_write('B',minutes_counter/10);
    2a9a:	80 91 19 01 	lds	r24, 0x0119
    2a9e:	9a e0       	ldi	r25, 0x0A	; 10
    2aa0:	69 2f       	mov	r22, r25
    2aa2:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    2aa6:	98 2f       	mov	r25, r24
    2aa8:	82 e4       	ldi	r24, 0x42	; 66
    2aaa:	69 2f       	mov	r22, r25
    2aac:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <seven_seg_write>
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	a0 ea       	ldi	r26, 0xA0	; 160
    2ab6:	b0 e4       	ldi	r27, 0x40	; 64
    2ab8:	8f a3       	std	Y+39, r24	; 0x27
    2aba:	98 a7       	std	Y+40, r25	; 0x28
    2abc:	a9 a7       	std	Y+41, r26	; 0x29
    2abe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ac0:	6f a1       	ldd	r22, Y+39	; 0x27
    2ac2:	78 a5       	ldd	r23, Y+40	; 0x28
    2ac4:	89 a5       	ldd	r24, Y+41	; 0x29
    2ac6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	4a ef       	ldi	r20, 0xFA	; 250
    2ace:	54 e4       	ldi	r21, 0x44	; 68
    2ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	8b a3       	std	Y+35, r24	; 0x23
    2ada:	9c a3       	std	Y+36, r25	; 0x24
    2adc:	ad a3       	std	Y+37, r26	; 0x25
    2ade:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ae0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ae2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ae4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ae6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	40 e8       	ldi	r20, 0x80	; 128
    2aee:	5f e3       	ldi	r21, 0x3F	; 63
    2af0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2af4:	88 23       	and	r24, r24
    2af6:	2c f4       	brge	.+10     	; 0x2b02 <main+0x706>
		__ticks = 1;
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	9a a3       	std	Y+34, r25	; 0x22
    2afe:	89 a3       	std	Y+33, r24	; 0x21
    2b00:	3f c0       	rjmp	.+126    	; 0x2b80 <main+0x784>
	else if (__tmp > 65535)
    2b02:	6b a1       	ldd	r22, Y+35	; 0x23
    2b04:	7c a1       	ldd	r23, Y+36	; 0x24
    2b06:	8d a1       	ldd	r24, Y+37	; 0x25
    2b08:	9e a1       	ldd	r25, Y+38	; 0x26
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	3f ef       	ldi	r19, 0xFF	; 255
    2b0e:	4f e7       	ldi	r20, 0x7F	; 127
    2b10:	57 e4       	ldi	r21, 0x47	; 71
    2b12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b16:	18 16       	cp	r1, r24
    2b18:	4c f5       	brge	.+82     	; 0x2b6c <main+0x770>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b1a:	6f a1       	ldd	r22, Y+39	; 0x27
    2b1c:	78 a5       	ldd	r23, Y+40	; 0x28
    2b1e:	89 a5       	ldd	r24, Y+41	; 0x29
    2b20:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	40 e2       	ldi	r20, 0x20	; 32
    2b28:	51 e4       	ldi	r21, 0x41	; 65
    2b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	cb 01       	movw	r24, r22
    2b32:	bc 01       	movw	r22, r24
    2b34:	cd 01       	movw	r24, r26
    2b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	9a a3       	std	Y+34, r25	; 0x22
    2b40:	89 a3       	std	Y+33, r24	; 0x21
    2b42:	0f c0       	rjmp	.+30     	; 0x2b62 <main+0x766>
    2b44:	88 ec       	ldi	r24, 0xC8	; 200
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	98 a3       	std	Y+32, r25	; 0x20
    2b4a:	8f 8f       	std	Y+31, r24	; 0x1f
    2b4c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b4e:	98 a1       	ldd	r25, Y+32	; 0x20
    2b50:	01 97       	sbiw	r24, 0x01	; 1
    2b52:	f1 f7       	brne	.-4      	; 0x2b50 <main+0x754>
    2b54:	98 a3       	std	Y+32, r25	; 0x20
    2b56:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b58:	89 a1       	ldd	r24, Y+33	; 0x21
    2b5a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	9a a3       	std	Y+34, r25	; 0x22
    2b60:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b62:	89 a1       	ldd	r24, Y+33	; 0x21
    2b64:	9a a1       	ldd	r25, Y+34	; 0x22
    2b66:	00 97       	sbiw	r24, 0x00	; 0
    2b68:	69 f7       	brne	.-38     	; 0x2b44 <main+0x748>
    2b6a:	14 c0       	rjmp	.+40     	; 0x2b94 <main+0x798>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b6c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b6e:	7c a1       	ldd	r23, Y+36	; 0x24
    2b70:	8d a1       	ldd	r24, Y+37	; 0x25
    2b72:	9e a1       	ldd	r25, Y+38	; 0x26
    2b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	9a a3       	std	Y+34, r25	; 0x22
    2b7e:	89 a3       	std	Y+33, r24	; 0x21
    2b80:	89 a1       	ldd	r24, Y+33	; 0x21
    2b82:	9a a1       	ldd	r25, Y+34	; 0x22
    2b84:	9e 8f       	std	Y+30, r25	; 0x1e
    2b86:	8d 8f       	std	Y+29, r24	; 0x1d
    2b88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	f1 f7       	brne	.-4      	; 0x2b8c <main+0x790>
    2b90:	9e 8f       	std	Y+30, r25	; 0x1e
    2b92:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);

		SET_BIT(PORTC,3);
    2b94:	a5 e3       	ldi	r26, 0x35	; 53
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	e5 e3       	ldi	r30, 0x35	; 53
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	88 60       	ori	r24, 0x08	; 8
    2ba0:	8c 93       	st	X, r24
		CLR_BIT(PORTC,4);
    2ba2:	a5 e3       	ldi	r26, 0x35	; 53
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	e5 e3       	ldi	r30, 0x35	; 53
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	80 81       	ld	r24, Z
    2bac:	8f 7e       	andi	r24, 0xEF	; 239
    2bae:	8c 93       	st	X, r24
		seven_seg_write('B',hours_counter%10);
    2bb0:	80 91 fa 00 	lds	r24, 0x00FA
    2bb4:	9a e0       	ldi	r25, 0x0A	; 10
    2bb6:	69 2f       	mov	r22, r25
    2bb8:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    2bbc:	89 2f       	mov	r24, r25
    2bbe:	98 2f       	mov	r25, r24
    2bc0:	82 e4       	ldi	r24, 0x42	; 66
    2bc2:	69 2f       	mov	r22, r25
    2bc4:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <seven_seg_write>
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	a0 ea       	ldi	r26, 0xA0	; 160
    2bce:	b0 e4       	ldi	r27, 0x40	; 64
    2bd0:	89 8f       	std	Y+25, r24	; 0x19
    2bd2:	9a 8f       	std	Y+26, r25	; 0x1a
    2bd4:	ab 8f       	std	Y+27, r26	; 0x1b
    2bd6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd8:	69 8d       	ldd	r22, Y+25	; 0x19
    2bda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	4a ef       	ldi	r20, 0xFA	; 250
    2be6:	54 e4       	ldi	r21, 0x44	; 68
    2be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	8d 8b       	std	Y+21, r24	; 0x15
    2bf2:	9e 8b       	std	Y+22, r25	; 0x16
    2bf4:	af 8b       	std	Y+23, r26	; 0x17
    2bf6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bf8:	6d 89       	ldd	r22, Y+21	; 0x15
    2bfa:	7e 89       	ldd	r23, Y+22	; 0x16
    2bfc:	8f 89       	ldd	r24, Y+23	; 0x17
    2bfe:	98 8d       	ldd	r25, Y+24	; 0x18
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	40 e8       	ldi	r20, 0x80	; 128
    2c06:	5f e3       	ldi	r21, 0x3F	; 63
    2c08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c0c:	88 23       	and	r24, r24
    2c0e:	2c f4       	brge	.+10     	; 0x2c1a <main+0x81e>
		__ticks = 1;
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	9c 8b       	std	Y+20, r25	; 0x14
    2c16:	8b 8b       	std	Y+19, r24	; 0x13
    2c18:	3f c0       	rjmp	.+126    	; 0x2c98 <main+0x89c>
	else if (__tmp > 65535)
    2c1a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c1c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c20:	98 8d       	ldd	r25, Y+24	; 0x18
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	3f ef       	ldi	r19, 0xFF	; 255
    2c26:	4f e7       	ldi	r20, 0x7F	; 127
    2c28:	57 e4       	ldi	r21, 0x47	; 71
    2c2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c2e:	18 16       	cp	r1, r24
    2c30:	4c f5       	brge	.+82     	; 0x2c84 <main+0x888>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c32:	69 8d       	ldd	r22, Y+25	; 0x19
    2c34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	40 e2       	ldi	r20, 0x20	; 32
    2c40:	51 e4       	ldi	r21, 0x41	; 65
    2c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	bc 01       	movw	r22, r24
    2c4c:	cd 01       	movw	r24, r26
    2c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	9c 8b       	std	Y+20, r25	; 0x14
    2c58:	8b 8b       	std	Y+19, r24	; 0x13
    2c5a:	0f c0       	rjmp	.+30     	; 0x2c7a <main+0x87e>
    2c5c:	88 ec       	ldi	r24, 0xC8	; 200
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	9a 8b       	std	Y+18, r25	; 0x12
    2c62:	89 8b       	std	Y+17, r24	; 0x11
    2c64:	89 89       	ldd	r24, Y+17	; 0x11
    2c66:	9a 89       	ldd	r25, Y+18	; 0x12
    2c68:	01 97       	sbiw	r24, 0x01	; 1
    2c6a:	f1 f7       	brne	.-4      	; 0x2c68 <main+0x86c>
    2c6c:	9a 8b       	std	Y+18, r25	; 0x12
    2c6e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c70:	8b 89       	ldd	r24, Y+19	; 0x13
    2c72:	9c 89       	ldd	r25, Y+20	; 0x14
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	9c 8b       	std	Y+20, r25	; 0x14
    2c78:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	69 f7       	brne	.-38     	; 0x2c5c <main+0x860>
    2c82:	14 c0       	rjmp	.+40     	; 0x2cac <main+0x8b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c84:	6d 89       	ldd	r22, Y+21	; 0x15
    2c86:	7e 89       	ldd	r23, Y+22	; 0x16
    2c88:	8f 89       	ldd	r24, Y+23	; 0x17
    2c8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	9c 8b       	std	Y+20, r25	; 0x14
    2c96:	8b 8b       	std	Y+19, r24	; 0x13
    2c98:	8b 89       	ldd	r24, Y+19	; 0x13
    2c9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c9c:	98 8b       	std	Y+16, r25	; 0x10
    2c9e:	8f 87       	std	Y+15, r24	; 0x0f
    2ca0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ca2:	98 89       	ldd	r25, Y+16	; 0x10
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	f1 f7       	brne	.-4      	; 0x2ca4 <main+0x8a8>
    2ca8:	98 8b       	std	Y+16, r25	; 0x10
    2caa:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);

		SET_BIT(PORTC,4);
    2cac:	a5 e3       	ldi	r26, 0x35	; 53
    2cae:	b0 e0       	ldi	r27, 0x00	; 0
    2cb0:	e5 e3       	ldi	r30, 0x35	; 53
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	80 81       	ld	r24, Z
    2cb6:	80 61       	ori	r24, 0x10	; 16
    2cb8:	8c 93       	st	X, r24
		CLR_BIT(PORTC,5);
    2cba:	a5 e3       	ldi	r26, 0x35	; 53
    2cbc:	b0 e0       	ldi	r27, 0x00	; 0
    2cbe:	e5 e3       	ldi	r30, 0x35	; 53
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
    2cc4:	8f 7d       	andi	r24, 0xDF	; 223
    2cc6:	8c 93       	st	X, r24
		seven_seg_write('B',hours_counter/10);
    2cc8:	80 91 fa 00 	lds	r24, 0x00FA
    2ccc:	9a e0       	ldi	r25, 0x0A	; 10
    2cce:	69 2f       	mov	r22, r25
    2cd0:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    2cd4:	98 2f       	mov	r25, r24
    2cd6:	82 e4       	ldi	r24, 0x42	; 66
    2cd8:	69 2f       	mov	r22, r25
    2cda:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <seven_seg_write>
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	a0 ea       	ldi	r26, 0xA0	; 160
    2ce4:	b0 e4       	ldi	r27, 0x40	; 64
    2ce6:	8b 87       	std	Y+11, r24	; 0x0b
    2ce8:	9c 87       	std	Y+12, r25	; 0x0c
    2cea:	ad 87       	std	Y+13, r26	; 0x0d
    2cec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	4a ef       	ldi	r20, 0xFA	; 250
    2cfc:	54 e4       	ldi	r21, 0x44	; 68
    2cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	8f 83       	std	Y+7, r24	; 0x07
    2d08:	98 87       	std	Y+8, r25	; 0x08
    2d0a:	a9 87       	std	Y+9, r26	; 0x09
    2d0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d10:	78 85       	ldd	r23, Y+8	; 0x08
    2d12:	89 85       	ldd	r24, Y+9	; 0x09
    2d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	40 e8       	ldi	r20, 0x80	; 128
    2d1c:	5f e3       	ldi	r21, 0x3F	; 63
    2d1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d22:	88 23       	and	r24, r24
    2d24:	2c f4       	brge	.+10     	; 0x2d30 <main+0x934>
		__ticks = 1;
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	9e 83       	std	Y+6, r25	; 0x06
    2d2c:	8d 83       	std	Y+5, r24	; 0x05
    2d2e:	3f c0       	rjmp	.+126    	; 0x2dae <main+0x9b2>
	else if (__tmp > 65535)
    2d30:	6f 81       	ldd	r22, Y+7	; 0x07
    2d32:	78 85       	ldd	r23, Y+8	; 0x08
    2d34:	89 85       	ldd	r24, Y+9	; 0x09
    2d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	3f ef       	ldi	r19, 0xFF	; 255
    2d3c:	4f e7       	ldi	r20, 0x7F	; 127
    2d3e:	57 e4       	ldi	r21, 0x47	; 71
    2d40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d44:	18 16       	cp	r1, r24
    2d46:	4c f5       	brge	.+82     	; 0x2d9a <main+0x99e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	40 e2       	ldi	r20, 0x20	; 32
    2d56:	51 e4       	ldi	r21, 0x41	; 65
    2d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	bc 01       	movw	r22, r24
    2d62:	cd 01       	movw	r24, r26
    2d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	9e 83       	std	Y+6, r25	; 0x06
    2d6e:	8d 83       	std	Y+5, r24	; 0x05
    2d70:	0f c0       	rjmp	.+30     	; 0x2d90 <main+0x994>
    2d72:	88 ec       	ldi	r24, 0xC8	; 200
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	9c 83       	std	Y+4, r25	; 0x04
    2d78:	8b 83       	std	Y+3, r24	; 0x03
    2d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	f1 f7       	brne	.-4      	; 0x2d7e <main+0x982>
    2d82:	9c 83       	std	Y+4, r25	; 0x04
    2d84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d86:	8d 81       	ldd	r24, Y+5	; 0x05
    2d88:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	9e 83       	std	Y+6, r25	; 0x06
    2d8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d90:	8d 81       	ldd	r24, Y+5	; 0x05
    2d92:	9e 81       	ldd	r25, Y+6	; 0x06
    2d94:	00 97       	sbiw	r24, 0x00	; 0
    2d96:	69 f7       	brne	.-38     	; 0x2d72 <main+0x976>
    2d98:	8e cb       	rjmp	.-2276   	; 0x24b6 <main+0xba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9c:	78 85       	ldd	r23, Y+8	; 0x08
    2d9e:	89 85       	ldd	r24, Y+9	; 0x09
    2da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	9e 83       	std	Y+6, r25	; 0x06
    2dac:	8d 83       	std	Y+5, r24	; 0x05
    2dae:	8d 81       	ldd	r24, Y+5	; 0x05
    2db0:	9e 81       	ldd	r25, Y+6	; 0x06
    2db2:	9a 83       	std	Y+2, r25	; 0x02
    2db4:	89 83       	std	Y+1, r24	; 0x01
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	f1 f7       	brne	.-4      	; 0x2dba <main+0x9be>
    2dbe:	9a 83       	std	Y+2, r25	; 0x02
    2dc0:	89 83       	std	Y+1, r24	; 0x01
    2dc2:	79 cb       	rjmp	.-2318   	; 0x24b6 <main+0xba>

00002dc4 <Set_Time>:
}

//===================================================================/

void Set_Time()
{
    2dc4:	0f 93       	push	r16
    2dc6:	1f 93       	push	r17
    2dc8:	df 93       	push	r29
    2dca:	cf 93       	push	r28
    2dcc:	cd b7       	in	r28, 0x3d	; 61
    2dce:	de b7       	in	r29, 0x3e	; 62
    2dd0:	ca 59       	subi	r28, 0x9A	; 154
    2dd2:	d0 40       	sbci	r29, 0x00	; 0
    2dd4:	0f b6       	in	r0, 0x3f	; 63
    2dd6:	f8 94       	cli
    2dd8:	de bf       	out	0x3e, r29	; 62
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	cd bf       	out	0x3d, r28	; 61
	mode_select:
	LCD_clearscreen();
    2dde:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <LCD_clearscreen>
	LCD_vSend_string("1 - 12-hour time");
    2de2:	8a e8       	ldi	r24, 0x8A	; 138
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
	LCD_movecursor(2, 1);
    2dea:	82 e0       	ldi	r24, 0x02	; 2
    2dec:	61 e0       	ldi	r22, 0x01	; 1
    2dee:	0e 94 58 11 	call	0x22b0	; 0x22b0 <LCD_movecursor>
	LCD_vSend_string("2 - 24-hour time");
    2df2:	8b e9       	ldi	r24, 0x9B	; 155
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
	do
	{
		mode = keypad_u8check_press();
    2dfa:	0e 94 ca 21 	call	0x4394	; 0x4394 <keypad_u8check_press>
    2dfe:	80 93 1c 01 	sts	0x011C, r24
	}while (mode == NOTPRESSED);
    2e02:	80 91 1c 01 	lds	r24, 0x011C
    2e06:	8f 3f       	cpi	r24, 0xFF	; 255
    2e08:	c1 f3       	breq	.-16     	; 0x2dfa <Set_Time+0x36>
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	e9 56       	subi	r30, 0x69	; 105
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	80 e0       	ldi	r24, 0x00	; 0
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	a6 e9       	ldi	r26, 0x96	; 150
    2e16:	b3 e4       	ldi	r27, 0x43	; 67
    2e18:	80 83       	st	Z, r24
    2e1a:	91 83       	std	Z+1, r25	; 0x01
    2e1c:	a2 83       	std	Z+2, r26	; 0x02
    2e1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e20:	8e 01       	movw	r16, r28
    2e22:	0d 56       	subi	r16, 0x6D	; 109
    2e24:	1f 4f       	sbci	r17, 0xFF	; 255
    2e26:	fe 01       	movw	r30, r28
    2e28:	e9 56       	subi	r30, 0x69	; 105
    2e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2c:	60 81       	ld	r22, Z
    2e2e:	71 81       	ldd	r23, Z+1	; 0x01
    2e30:	82 81       	ldd	r24, Z+2	; 0x02
    2e32:	93 81       	ldd	r25, Z+3	; 0x03
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	4a ef       	ldi	r20, 0xFA	; 250
    2e3a:	54 e4       	ldi	r21, 0x44	; 68
    2e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	f8 01       	movw	r30, r16
    2e46:	80 83       	st	Z, r24
    2e48:	91 83       	std	Z+1, r25	; 0x01
    2e4a:	a2 83       	std	Z+2, r26	; 0x02
    2e4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e4e:	fe 01       	movw	r30, r28
    2e50:	ed 56       	subi	r30, 0x6D	; 109
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	60 81       	ld	r22, Z
    2e56:	71 81       	ldd	r23, Z+1	; 0x01
    2e58:	82 81       	ldd	r24, Z+2	; 0x02
    2e5a:	93 81       	ldd	r25, Z+3	; 0x03
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	40 e8       	ldi	r20, 0x80	; 128
    2e62:	5f e3       	ldi	r21, 0x3F	; 63
    2e64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e68:	88 23       	and	r24, r24
    2e6a:	44 f4       	brge	.+16     	; 0x2e7c <Set_Time+0xb8>
		__ticks = 1;
    2e6c:	fe 01       	movw	r30, r28
    2e6e:	ef 56       	subi	r30, 0x6F	; 111
    2e70:	ff 4f       	sbci	r31, 0xFF	; 255
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	91 83       	std	Z+1, r25	; 0x01
    2e78:	80 83       	st	Z, r24
    2e7a:	64 c0       	rjmp	.+200    	; 0x2f44 <Set_Time+0x180>
	else if (__tmp > 65535)
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	ed 56       	subi	r30, 0x6D	; 109
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	60 81       	ld	r22, Z
    2e84:	71 81       	ldd	r23, Z+1	; 0x01
    2e86:	82 81       	ldd	r24, Z+2	; 0x02
    2e88:	93 81       	ldd	r25, Z+3	; 0x03
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	3f ef       	ldi	r19, 0xFF	; 255
    2e8e:	4f e7       	ldi	r20, 0x7F	; 127
    2e90:	57 e4       	ldi	r21, 0x47	; 71
    2e92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e96:	18 16       	cp	r1, r24
    2e98:	0c f0       	brlt	.+2      	; 0x2e9c <Set_Time+0xd8>
    2e9a:	43 c0       	rjmp	.+134    	; 0x2f22 <Set_Time+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	e9 56       	subi	r30, 0x69	; 105
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	60 81       	ld	r22, Z
    2ea4:	71 81       	ldd	r23, Z+1	; 0x01
    2ea6:	82 81       	ldd	r24, Z+2	; 0x02
    2ea8:	93 81       	ldd	r25, Z+3	; 0x03
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	40 e2       	ldi	r20, 0x20	; 32
    2eb0:	51 e4       	ldi	r21, 0x41	; 65
    2eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	8e 01       	movw	r16, r28
    2ebc:	0f 56       	subi	r16, 0x6F	; 111
    2ebe:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec0:	bc 01       	movw	r22, r24
    2ec2:	cd 01       	movw	r24, r26
    2ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	f8 01       	movw	r30, r16
    2ece:	91 83       	std	Z+1, r25	; 0x01
    2ed0:	80 83       	st	Z, r24
    2ed2:	1f c0       	rjmp	.+62     	; 0x2f12 <Set_Time+0x14e>
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	e1 57       	subi	r30, 0x71	; 113
    2ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eda:	88 ec       	ldi	r24, 0xC8	; 200
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	91 83       	std	Z+1, r25	; 0x01
    2ee0:	80 83       	st	Z, r24
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	e1 57       	subi	r30, 0x71	; 113
    2ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee8:	80 81       	ld	r24, Z
    2eea:	91 81       	ldd	r25, Z+1	; 0x01
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <Set_Time+0x128>
    2ef0:	fe 01       	movw	r30, r28
    2ef2:	e1 57       	subi	r30, 0x71	; 113
    2ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef6:	91 83       	std	Z+1, r25	; 0x01
    2ef8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2efa:	de 01       	movw	r26, r28
    2efc:	af 56       	subi	r26, 0x6F	; 111
    2efe:	bf 4f       	sbci	r27, 0xFF	; 255
    2f00:	fe 01       	movw	r30, r28
    2f02:	ef 56       	subi	r30, 0x6F	; 111
    2f04:	ff 4f       	sbci	r31, 0xFF	; 255
    2f06:	80 81       	ld	r24, Z
    2f08:	91 81       	ldd	r25, Z+1	; 0x01
    2f0a:	01 97       	sbiw	r24, 0x01	; 1
    2f0c:	11 96       	adiw	r26, 0x01	; 1
    2f0e:	9c 93       	st	X, r25
    2f10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f12:	fe 01       	movw	r30, r28
    2f14:	ef 56       	subi	r30, 0x6F	; 111
    2f16:	ff 4f       	sbci	r31, 0xFF	; 255
    2f18:	80 81       	ld	r24, Z
    2f1a:	91 81       	ldd	r25, Z+1	; 0x01
    2f1c:	00 97       	sbiw	r24, 0x00	; 0
    2f1e:	d1 f6       	brne	.-76     	; 0x2ed4 <Set_Time+0x110>
    2f20:	28 c0       	rjmp	.+80     	; 0x2f72 <Set_Time+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f22:	8e 01       	movw	r16, r28
    2f24:	0f 56       	subi	r16, 0x6F	; 111
    2f26:	1f 4f       	sbci	r17, 0xFF	; 255
    2f28:	fe 01       	movw	r30, r28
    2f2a:	ed 56       	subi	r30, 0x6D	; 109
    2f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2e:	60 81       	ld	r22, Z
    2f30:	71 81       	ldd	r23, Z+1	; 0x01
    2f32:	82 81       	ldd	r24, Z+2	; 0x02
    2f34:	93 81       	ldd	r25, Z+3	; 0x03
    2f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	f8 01       	movw	r30, r16
    2f40:	91 83       	std	Z+1, r25	; 0x01
    2f42:	80 83       	st	Z, r24
    2f44:	de 01       	movw	r26, r28
    2f46:	a3 57       	subi	r26, 0x73	; 115
    2f48:	bf 4f       	sbci	r27, 0xFF	; 255
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	ef 56       	subi	r30, 0x6F	; 111
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	80 81       	ld	r24, Z
    2f52:	91 81       	ldd	r25, Z+1	; 0x01
    2f54:	11 96       	adiw	r26, 0x01	; 1
    2f56:	9c 93       	st	X, r25
    2f58:	8e 93       	st	-X, r24
    2f5a:	fe 01       	movw	r30, r28
    2f5c:	e3 57       	subi	r30, 0x73	; 115
    2f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f60:	80 81       	ld	r24, Z
    2f62:	91 81       	ldd	r25, Z+1	; 0x01
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	f1 f7       	brne	.-4      	; 0x2f64 <Set_Time+0x1a0>
    2f68:	fe 01       	movw	r30, r28
    2f6a:	e3 57       	subi	r30, 0x73	; 115
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	91 83       	std	Z+1, r25	; 0x01
    2f70:	80 83       	st	Z, r24
	_delay_ms(300);

	if (mode != '1' && mode != '2')
    2f72:	80 91 1c 01 	lds	r24, 0x011C
    2f76:	81 33       	cpi	r24, 0x31	; 49
    2f78:	09 f4       	brne	.+2      	; 0x2f7c <Set_Time+0x1b8>
    2f7a:	c0 c0       	rjmp	.+384    	; 0x30fc <Set_Time+0x338>
    2f7c:	80 91 1c 01 	lds	r24, 0x011C
    2f80:	82 33       	cpi	r24, 0x32	; 50
    2f82:	09 f4       	brne	.+2      	; 0x2f86 <Set_Time+0x1c2>
    2f84:	bb c0       	rjmp	.+374    	; 0x30fc <Set_Time+0x338>
	{
		LCD_clearscreen();
    2f86:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <LCD_clearscreen>
		LCD_vSend_string("wrong choise");
    2f8a:	8c ea       	ldi	r24, 0xAC	; 172
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
    2f92:	fe 01       	movw	r30, r28
    2f94:	e7 57       	subi	r30, 0x77	; 119
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	80 e0       	ldi	r24, 0x00	; 0
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	a6 e9       	ldi	r26, 0x96	; 150
    2f9e:	b3 e4       	ldi	r27, 0x43	; 67
    2fa0:	80 83       	st	Z, r24
    2fa2:	91 83       	std	Z+1, r25	; 0x01
    2fa4:	a2 83       	std	Z+2, r26	; 0x02
    2fa6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fa8:	8e 01       	movw	r16, r28
    2faa:	0b 57       	subi	r16, 0x7B	; 123
    2fac:	1f 4f       	sbci	r17, 0xFF	; 255
    2fae:	fe 01       	movw	r30, r28
    2fb0:	e7 57       	subi	r30, 0x77	; 119
    2fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb4:	60 81       	ld	r22, Z
    2fb6:	71 81       	ldd	r23, Z+1	; 0x01
    2fb8:	82 81       	ldd	r24, Z+2	; 0x02
    2fba:	93 81       	ldd	r25, Z+3	; 0x03
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	4a ef       	ldi	r20, 0xFA	; 250
    2fc2:	54 e4       	ldi	r21, 0x44	; 68
    2fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	f8 01       	movw	r30, r16
    2fce:	80 83       	st	Z, r24
    2fd0:	91 83       	std	Z+1, r25	; 0x01
    2fd2:	a2 83       	std	Z+2, r26	; 0x02
    2fd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	eb 57       	subi	r30, 0x7B	; 123
    2fda:	ff 4f       	sbci	r31, 0xFF	; 255
    2fdc:	60 81       	ld	r22, Z
    2fde:	71 81       	ldd	r23, Z+1	; 0x01
    2fe0:	82 81       	ldd	r24, Z+2	; 0x02
    2fe2:	93 81       	ldd	r25, Z+3	; 0x03
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	40 e8       	ldi	r20, 0x80	; 128
    2fea:	5f e3       	ldi	r21, 0x3F	; 63
    2fec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ff0:	88 23       	and	r24, r24
    2ff2:	44 f4       	brge	.+16     	; 0x3004 <Set_Time+0x240>
		__ticks = 1;
    2ff4:	fe 01       	movw	r30, r28
    2ff6:	ed 57       	subi	r30, 0x7D	; 125
    2ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	91 83       	std	Z+1, r25	; 0x01
    3000:	80 83       	st	Z, r24
    3002:	64 c0       	rjmp	.+200    	; 0x30cc <Set_Time+0x308>
	else if (__tmp > 65535)
    3004:	fe 01       	movw	r30, r28
    3006:	eb 57       	subi	r30, 0x7B	; 123
    3008:	ff 4f       	sbci	r31, 0xFF	; 255
    300a:	60 81       	ld	r22, Z
    300c:	71 81       	ldd	r23, Z+1	; 0x01
    300e:	82 81       	ldd	r24, Z+2	; 0x02
    3010:	93 81       	ldd	r25, Z+3	; 0x03
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	3f ef       	ldi	r19, 0xFF	; 255
    3016:	4f e7       	ldi	r20, 0x7F	; 127
    3018:	57 e4       	ldi	r21, 0x47	; 71
    301a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    301e:	18 16       	cp	r1, r24
    3020:	0c f0       	brlt	.+2      	; 0x3024 <Set_Time+0x260>
    3022:	43 c0       	rjmp	.+134    	; 0x30aa <Set_Time+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3024:	fe 01       	movw	r30, r28
    3026:	e7 57       	subi	r30, 0x77	; 119
    3028:	ff 4f       	sbci	r31, 0xFF	; 255
    302a:	60 81       	ld	r22, Z
    302c:	71 81       	ldd	r23, Z+1	; 0x01
    302e:	82 81       	ldd	r24, Z+2	; 0x02
    3030:	93 81       	ldd	r25, Z+3	; 0x03
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	40 e2       	ldi	r20, 0x20	; 32
    3038:	51 e4       	ldi	r21, 0x41	; 65
    303a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	8e 01       	movw	r16, r28
    3044:	0d 57       	subi	r16, 0x7D	; 125
    3046:	1f 4f       	sbci	r17, 0xFF	; 255
    3048:	bc 01       	movw	r22, r24
    304a:	cd 01       	movw	r24, r26
    304c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	f8 01       	movw	r30, r16
    3056:	91 83       	std	Z+1, r25	; 0x01
    3058:	80 83       	st	Z, r24
    305a:	1f c0       	rjmp	.+62     	; 0x309a <Set_Time+0x2d6>
    305c:	fe 01       	movw	r30, r28
    305e:	ef 57       	subi	r30, 0x7F	; 127
    3060:	ff 4f       	sbci	r31, 0xFF	; 255
    3062:	88 ec       	ldi	r24, 0xC8	; 200
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	91 83       	std	Z+1, r25	; 0x01
    3068:	80 83       	st	Z, r24
    306a:	fe 01       	movw	r30, r28
    306c:	ef 57       	subi	r30, 0x7F	; 127
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	80 81       	ld	r24, Z
    3072:	91 81       	ldd	r25, Z+1	; 0x01
    3074:	01 97       	sbiw	r24, 0x01	; 1
    3076:	f1 f7       	brne	.-4      	; 0x3074 <Set_Time+0x2b0>
    3078:	fe 01       	movw	r30, r28
    307a:	ef 57       	subi	r30, 0x7F	; 127
    307c:	ff 4f       	sbci	r31, 0xFF	; 255
    307e:	91 83       	std	Z+1, r25	; 0x01
    3080:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3082:	de 01       	movw	r26, r28
    3084:	ad 57       	subi	r26, 0x7D	; 125
    3086:	bf 4f       	sbci	r27, 0xFF	; 255
    3088:	fe 01       	movw	r30, r28
    308a:	ed 57       	subi	r30, 0x7D	; 125
    308c:	ff 4f       	sbci	r31, 0xFF	; 255
    308e:	80 81       	ld	r24, Z
    3090:	91 81       	ldd	r25, Z+1	; 0x01
    3092:	01 97       	sbiw	r24, 0x01	; 1
    3094:	11 96       	adiw	r26, 0x01	; 1
    3096:	9c 93       	st	X, r25
    3098:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    309a:	fe 01       	movw	r30, r28
    309c:	ed 57       	subi	r30, 0x7D	; 125
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	80 81       	ld	r24, Z
    30a2:	91 81       	ldd	r25, Z+1	; 0x01
    30a4:	00 97       	sbiw	r24, 0x00	; 0
    30a6:	d1 f6       	brne	.-76     	; 0x305c <Set_Time+0x298>
    30a8:	9a ce       	rjmp	.-716    	; 0x2dde <Set_Time+0x1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30aa:	8e 01       	movw	r16, r28
    30ac:	0d 57       	subi	r16, 0x7D	; 125
    30ae:	1f 4f       	sbci	r17, 0xFF	; 255
    30b0:	fe 01       	movw	r30, r28
    30b2:	eb 57       	subi	r30, 0x7B	; 123
    30b4:	ff 4f       	sbci	r31, 0xFF	; 255
    30b6:	60 81       	ld	r22, Z
    30b8:	71 81       	ldd	r23, Z+1	; 0x01
    30ba:	82 81       	ldd	r24, Z+2	; 0x02
    30bc:	93 81       	ldd	r25, Z+3	; 0x03
    30be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	f8 01       	movw	r30, r16
    30c8:	91 83       	std	Z+1, r25	; 0x01
    30ca:	80 83       	st	Z, r24
    30cc:	de 01       	movw	r26, r28
    30ce:	a1 58       	subi	r26, 0x81	; 129
    30d0:	bf 4f       	sbci	r27, 0xFF	; 255
    30d2:	fe 01       	movw	r30, r28
    30d4:	ed 57       	subi	r30, 0x7D	; 125
    30d6:	ff 4f       	sbci	r31, 0xFF	; 255
    30d8:	80 81       	ld	r24, Z
    30da:	91 81       	ldd	r25, Z+1	; 0x01
    30dc:	11 96       	adiw	r26, 0x01	; 1
    30de:	9c 93       	st	X, r25
    30e0:	8e 93       	st	-X, r24
    30e2:	fe 01       	movw	r30, r28
    30e4:	e1 58       	subi	r30, 0x81	; 129
    30e6:	ff 4f       	sbci	r31, 0xFF	; 255
    30e8:	80 81       	ld	r24, Z
    30ea:	91 81       	ldd	r25, Z+1	; 0x01
    30ec:	01 97       	sbiw	r24, 0x01	; 1
    30ee:	f1 f7       	brne	.-4      	; 0x30ec <Set_Time+0x328>
    30f0:	fe 01       	movw	r30, r28
    30f2:	e1 58       	subi	r30, 0x81	; 129
    30f4:	ff 4f       	sbci	r31, 0xFF	; 255
    30f6:	91 83       	std	Z+1, r25	; 0x01
    30f8:	80 83       	st	Z, r24
    30fa:	71 ce       	rjmp	.-798    	; 0x2dde <Set_Time+0x1a>
		_delay_ms (300);
		goto mode_select;
	}

	LCD_clearscreen();
    30fc:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <LCD_clearscreen>
	LCD_vSend_char(hours_counter/10 +48);
    3100:	80 91 fa 00 	lds	r24, 0x00FA
    3104:	9a e0       	ldi	r25, 0x0A	; 10
    3106:	69 2f       	mov	r22, r25
    3108:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    310c:	80 5d       	subi	r24, 0xD0	; 208
    310e:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
	LCD_vSend_char(hours_counter%10 +48);
    3112:	80 91 fa 00 	lds	r24, 0x00FA
    3116:	9a e0       	ldi	r25, 0x0A	; 10
    3118:	69 2f       	mov	r22, r25
    311a:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    311e:	89 2f       	mov	r24, r25
    3120:	80 5d       	subi	r24, 0xD0	; 208
    3122:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
	LCD_vSend_string(" : ");
    3126:	89 eb       	ldi	r24, 0xB9	; 185
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
	LCD_vSend_char(minutes_counter/10 + 48);
    312e:	80 91 19 01 	lds	r24, 0x0119
    3132:	9a e0       	ldi	r25, 0x0A	; 10
    3134:	69 2f       	mov	r22, r25
    3136:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    313a:	80 5d       	subi	r24, 0xD0	; 208
    313c:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
	LCD_vSend_char(minutes_counter%10 + 48);
    3140:	80 91 19 01 	lds	r24, 0x0119
    3144:	9a e0       	ldi	r25, 0x0A	; 10
    3146:	69 2f       	mov	r22, r25
    3148:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    314c:	89 2f       	mov	r24, r25
    314e:	80 5d       	subi	r24, 0xD0	; 208
    3150:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
	LCD_vSend_string(" : ");
    3154:	89 eb       	ldi	r24, 0xB9	; 185
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
	LCD_vSend_char(seconds_counter/10 + 48);
    315c:	80 91 16 01 	lds	r24, 0x0116
    3160:	9a e0       	ldi	r25, 0x0A	; 10
    3162:	69 2f       	mov	r22, r25
    3164:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    3168:	80 5d       	subi	r24, 0xD0	; 208
    316a:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
	LCD_vSend_char(seconds_counter%10 + 48);
    316e:	80 91 16 01 	lds	r24, 0x0116
    3172:	9a e0       	ldi	r25, 0x0A	; 10
    3174:	69 2f       	mov	r22, r25
    3176:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    317a:	89 2f       	mov	r24, r25
    317c:	80 5d       	subi	r24, 0xD0	; 208
    317e:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
	LCD_vSend_char(' ');
    3182:	80 e2       	ldi	r24, 0x20	; 32
    3184:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>

	if (mode == '1')
    3188:	80 91 1c 01 	lds	r24, 0x011C
    318c:	81 33       	cpi	r24, 0x31	; 49
    318e:	79 f4       	brne	.+30     	; 0x31ae <Set_Time+0x3ea>
	{
		if (DIO_u8read('A', 3) == 1)
    3190:	81 e4       	ldi	r24, 0x41	; 65
    3192:	63 e0       	ldi	r22, 0x03	; 3
    3194:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8read>
    3198:	81 30       	cpi	r24, 0x01	; 1
    319a:	29 f4       	brne	.+10     	; 0x31a6 <Set_Time+0x3e2>
		{
			LCD_vSend_string("AM");
    319c:	8d eb       	ldi	r24, 0xBD	; 189
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
    31a4:	04 c0       	rjmp	.+8      	; 0x31ae <Set_Time+0x3ea>
		}
		else
		{
			LCD_vSend_string("PM");
    31a6:	80 ec       	ldi	r24, 0xC0	; 192
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
		}
	}
	LCD_movecursor(1,1);
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	61 e0       	ldi	r22, 0x01	; 1
    31b2:	0e 94 58 11 	call	0x22b0	; 0x22b0 <LCD_movecursor>
    31b6:	fe 01       	movw	r30, r28
    31b8:	e5 58       	subi	r30, 0x85	; 133
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	aa ef       	ldi	r26, 0xFA	; 250
    31c2:	b3 e4       	ldi	r27, 0x43	; 67
    31c4:	80 83       	st	Z, r24
    31c6:	91 83       	std	Z+1, r25	; 0x01
    31c8:	a2 83       	std	Z+2, r26	; 0x02
    31ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31cc:	8e 01       	movw	r16, r28
    31ce:	09 58       	subi	r16, 0x89	; 137
    31d0:	1f 4f       	sbci	r17, 0xFF	; 255
    31d2:	fe 01       	movw	r30, r28
    31d4:	e5 58       	subi	r30, 0x85	; 133
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	60 81       	ld	r22, Z
    31da:	71 81       	ldd	r23, Z+1	; 0x01
    31dc:	82 81       	ldd	r24, Z+2	; 0x02
    31de:	93 81       	ldd	r25, Z+3	; 0x03
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	4a ef       	ldi	r20, 0xFA	; 250
    31e6:	54 e4       	ldi	r21, 0x44	; 68
    31e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	f8 01       	movw	r30, r16
    31f2:	80 83       	st	Z, r24
    31f4:	91 83       	std	Z+1, r25	; 0x01
    31f6:	a2 83       	std	Z+2, r26	; 0x02
    31f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31fa:	fe 01       	movw	r30, r28
    31fc:	e9 58       	subi	r30, 0x89	; 137
    31fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3200:	60 81       	ld	r22, Z
    3202:	71 81       	ldd	r23, Z+1	; 0x01
    3204:	82 81       	ldd	r24, Z+2	; 0x02
    3206:	93 81       	ldd	r25, Z+3	; 0x03
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	40 e8       	ldi	r20, 0x80	; 128
    320e:	5f e3       	ldi	r21, 0x3F	; 63
    3210:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3214:	88 23       	and	r24, r24
    3216:	44 f4       	brge	.+16     	; 0x3228 <Set_Time+0x464>
		__ticks = 1;
    3218:	fe 01       	movw	r30, r28
    321a:	eb 58       	subi	r30, 0x8B	; 139
    321c:	ff 4f       	sbci	r31, 0xFF	; 255
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	91 83       	std	Z+1, r25	; 0x01
    3224:	80 83       	st	Z, r24
    3226:	64 c0       	rjmp	.+200    	; 0x32f0 <Set_Time+0x52c>
	else if (__tmp > 65535)
    3228:	fe 01       	movw	r30, r28
    322a:	e9 58       	subi	r30, 0x89	; 137
    322c:	ff 4f       	sbci	r31, 0xFF	; 255
    322e:	60 81       	ld	r22, Z
    3230:	71 81       	ldd	r23, Z+1	; 0x01
    3232:	82 81       	ldd	r24, Z+2	; 0x02
    3234:	93 81       	ldd	r25, Z+3	; 0x03
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	3f ef       	ldi	r19, 0xFF	; 255
    323a:	4f e7       	ldi	r20, 0x7F	; 127
    323c:	57 e4       	ldi	r21, 0x47	; 71
    323e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3242:	18 16       	cp	r1, r24
    3244:	0c f0       	brlt	.+2      	; 0x3248 <Set_Time+0x484>
    3246:	43 c0       	rjmp	.+134    	; 0x32ce <Set_Time+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3248:	fe 01       	movw	r30, r28
    324a:	e5 58       	subi	r30, 0x85	; 133
    324c:	ff 4f       	sbci	r31, 0xFF	; 255
    324e:	60 81       	ld	r22, Z
    3250:	71 81       	ldd	r23, Z+1	; 0x01
    3252:	82 81       	ldd	r24, Z+2	; 0x02
    3254:	93 81       	ldd	r25, Z+3	; 0x03
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	40 e2       	ldi	r20, 0x20	; 32
    325c:	51 e4       	ldi	r21, 0x41	; 65
    325e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	8e 01       	movw	r16, r28
    3268:	0b 58       	subi	r16, 0x8B	; 139
    326a:	1f 4f       	sbci	r17, 0xFF	; 255
    326c:	bc 01       	movw	r22, r24
    326e:	cd 01       	movw	r24, r26
    3270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	f8 01       	movw	r30, r16
    327a:	91 83       	std	Z+1, r25	; 0x01
    327c:	80 83       	st	Z, r24
    327e:	1f c0       	rjmp	.+62     	; 0x32be <Set_Time+0x4fa>
    3280:	fe 01       	movw	r30, r28
    3282:	ed 58       	subi	r30, 0x8D	; 141
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	88 ec       	ldi	r24, 0xC8	; 200
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	91 83       	std	Z+1, r25	; 0x01
    328c:	80 83       	st	Z, r24
    328e:	fe 01       	movw	r30, r28
    3290:	ed 58       	subi	r30, 0x8D	; 141
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	80 81       	ld	r24, Z
    3296:	91 81       	ldd	r25, Z+1	; 0x01
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	f1 f7       	brne	.-4      	; 0x3298 <Set_Time+0x4d4>
    329c:	fe 01       	movw	r30, r28
    329e:	ed 58       	subi	r30, 0x8D	; 141
    32a0:	ff 4f       	sbci	r31, 0xFF	; 255
    32a2:	91 83       	std	Z+1, r25	; 0x01
    32a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32a6:	de 01       	movw	r26, r28
    32a8:	ab 58       	subi	r26, 0x8B	; 139
    32aa:	bf 4f       	sbci	r27, 0xFF	; 255
    32ac:	fe 01       	movw	r30, r28
    32ae:	eb 58       	subi	r30, 0x8B	; 139
    32b0:	ff 4f       	sbci	r31, 0xFF	; 255
    32b2:	80 81       	ld	r24, Z
    32b4:	91 81       	ldd	r25, Z+1	; 0x01
    32b6:	01 97       	sbiw	r24, 0x01	; 1
    32b8:	11 96       	adiw	r26, 0x01	; 1
    32ba:	9c 93       	st	X, r25
    32bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32be:	fe 01       	movw	r30, r28
    32c0:	eb 58       	subi	r30, 0x8B	; 139
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	80 81       	ld	r24, Z
    32c6:	91 81       	ldd	r25, Z+1	; 0x01
    32c8:	00 97       	sbiw	r24, 0x00	; 0
    32ca:	d1 f6       	brne	.-76     	; 0x3280 <Set_Time+0x4bc>
    32cc:	27 c0       	rjmp	.+78     	; 0x331c <Set_Time+0x558>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ce:	8e 01       	movw	r16, r28
    32d0:	0b 58       	subi	r16, 0x8B	; 139
    32d2:	1f 4f       	sbci	r17, 0xFF	; 255
    32d4:	fe 01       	movw	r30, r28
    32d6:	e9 58       	subi	r30, 0x89	; 137
    32d8:	ff 4f       	sbci	r31, 0xFF	; 255
    32da:	60 81       	ld	r22, Z
    32dc:	71 81       	ldd	r23, Z+1	; 0x01
    32de:	82 81       	ldd	r24, Z+2	; 0x02
    32e0:	93 81       	ldd	r25, Z+3	; 0x03
    32e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	f8 01       	movw	r30, r16
    32ec:	91 83       	std	Z+1, r25	; 0x01
    32ee:	80 83       	st	Z, r24
    32f0:	de 01       	movw	r26, r28
    32f2:	af 58       	subi	r26, 0x8F	; 143
    32f4:	bf 4f       	sbci	r27, 0xFF	; 255
    32f6:	fe 01       	movw	r30, r28
    32f8:	eb 58       	subi	r30, 0x8B	; 139
    32fa:	ff 4f       	sbci	r31, 0xFF	; 255
    32fc:	80 81       	ld	r24, Z
    32fe:	91 81       	ldd	r25, Z+1	; 0x01
    3300:	8d 93       	st	X+, r24
    3302:	9c 93       	st	X, r25
    3304:	fe 01       	movw	r30, r28
    3306:	ef 58       	subi	r30, 0x8F	; 143
    3308:	ff 4f       	sbci	r31, 0xFF	; 255
    330a:	80 81       	ld	r24, Z
    330c:	91 81       	ldd	r25, Z+1	; 0x01
    330e:	01 97       	sbiw	r24, 0x01	; 1
    3310:	f1 f7       	brne	.-4      	; 0x330e <Set_Time+0x54a>
    3312:	fe 01       	movw	r30, r28
    3314:	ef 58       	subi	r30, 0x8F	; 143
    3316:	ff 4f       	sbci	r31, 0xFF	; 255
    3318:	91 83       	std	Z+1, r25	; 0x01
    331a:	80 83       	st	Z, r24
	_delay_ms(500);
	do
	{
		first_digit=keypad_u8check_press();
    331c:	0e 94 ca 21 	call	0x4394	; 0x4394 <keypad_u8check_press>
    3320:	80 93 1a 01 	sts	0x011A, r24
	} while (first_digit==NOTPRESSED);
    3324:	80 91 1a 01 	lds	r24, 0x011A
    3328:	8f 3f       	cpi	r24, 0xFF	; 255
    332a:	c1 f3       	breq	.-16     	; 0x331c <Set_Time+0x558>
	LCD_movecursor(1,1);
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	61 e0       	ldi	r22, 0x01	; 1
    3330:	0e 94 58 11 	call	0x22b0	; 0x22b0 <LCD_movecursor>
	LCD_vSend_char(first_digit);
    3334:	80 91 1a 01 	lds	r24, 0x011A
    3338:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
    333c:	fe 01       	movw	r30, r28
    333e:	e3 59       	subi	r30, 0x93	; 147
    3340:	ff 4f       	sbci	r31, 0xFF	; 255
    3342:	80 e0       	ldi	r24, 0x00	; 0
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	a6 e9       	ldi	r26, 0x96	; 150
    3348:	b3 e4       	ldi	r27, 0x43	; 67
    334a:	80 83       	st	Z, r24
    334c:	91 83       	std	Z+1, r25	; 0x01
    334e:	a2 83       	std	Z+2, r26	; 0x02
    3350:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3352:	8e 01       	movw	r16, r28
    3354:	07 59       	subi	r16, 0x97	; 151
    3356:	1f 4f       	sbci	r17, 0xFF	; 255
    3358:	fe 01       	movw	r30, r28
    335a:	e3 59       	subi	r30, 0x93	; 147
    335c:	ff 4f       	sbci	r31, 0xFF	; 255
    335e:	60 81       	ld	r22, Z
    3360:	71 81       	ldd	r23, Z+1	; 0x01
    3362:	82 81       	ldd	r24, Z+2	; 0x02
    3364:	93 81       	ldd	r25, Z+3	; 0x03
    3366:	20 e0       	ldi	r18, 0x00	; 0
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	4a ef       	ldi	r20, 0xFA	; 250
    336c:	54 e4       	ldi	r21, 0x44	; 68
    336e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3372:	dc 01       	movw	r26, r24
    3374:	cb 01       	movw	r24, r22
    3376:	f8 01       	movw	r30, r16
    3378:	80 83       	st	Z, r24
    337a:	91 83       	std	Z+1, r25	; 0x01
    337c:	a2 83       	std	Z+2, r26	; 0x02
    337e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3380:	fe 01       	movw	r30, r28
    3382:	e7 59       	subi	r30, 0x97	; 151
    3384:	ff 4f       	sbci	r31, 0xFF	; 255
    3386:	60 81       	ld	r22, Z
    3388:	71 81       	ldd	r23, Z+1	; 0x01
    338a:	82 81       	ldd	r24, Z+2	; 0x02
    338c:	93 81       	ldd	r25, Z+3	; 0x03
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	40 e8       	ldi	r20, 0x80	; 128
    3394:	5f e3       	ldi	r21, 0x3F	; 63
    3396:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    339a:	88 23       	and	r24, r24
    339c:	44 f4       	brge	.+16     	; 0x33ae <Set_Time+0x5ea>
		__ticks = 1;
    339e:	fe 01       	movw	r30, r28
    33a0:	e9 59       	subi	r30, 0x99	; 153
    33a2:	ff 4f       	sbci	r31, 0xFF	; 255
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	91 83       	std	Z+1, r25	; 0x01
    33aa:	80 83       	st	Z, r24
    33ac:	64 c0       	rjmp	.+200    	; 0x3476 <Set_Time+0x6b2>
	else if (__tmp > 65535)
    33ae:	fe 01       	movw	r30, r28
    33b0:	e7 59       	subi	r30, 0x97	; 151
    33b2:	ff 4f       	sbci	r31, 0xFF	; 255
    33b4:	60 81       	ld	r22, Z
    33b6:	71 81       	ldd	r23, Z+1	; 0x01
    33b8:	82 81       	ldd	r24, Z+2	; 0x02
    33ba:	93 81       	ldd	r25, Z+3	; 0x03
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	3f ef       	ldi	r19, 0xFF	; 255
    33c0:	4f e7       	ldi	r20, 0x7F	; 127
    33c2:	57 e4       	ldi	r21, 0x47	; 71
    33c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33c8:	18 16       	cp	r1, r24
    33ca:	0c f0       	brlt	.+2      	; 0x33ce <Set_Time+0x60a>
    33cc:	43 c0       	rjmp	.+134    	; 0x3454 <Set_Time+0x690>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ce:	fe 01       	movw	r30, r28
    33d0:	e3 59       	subi	r30, 0x93	; 147
    33d2:	ff 4f       	sbci	r31, 0xFF	; 255
    33d4:	60 81       	ld	r22, Z
    33d6:	71 81       	ldd	r23, Z+1	; 0x01
    33d8:	82 81       	ldd	r24, Z+2	; 0x02
    33da:	93 81       	ldd	r25, Z+3	; 0x03
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 e2       	ldi	r20, 0x20	; 32
    33e2:	51 e4       	ldi	r21, 0x41	; 65
    33e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	8e 01       	movw	r16, r28
    33ee:	09 59       	subi	r16, 0x99	; 153
    33f0:	1f 4f       	sbci	r17, 0xFF	; 255
    33f2:	bc 01       	movw	r22, r24
    33f4:	cd 01       	movw	r24, r26
    33f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	f8 01       	movw	r30, r16
    3400:	91 83       	std	Z+1, r25	; 0x01
    3402:	80 83       	st	Z, r24
    3404:	1f c0       	rjmp	.+62     	; 0x3444 <Set_Time+0x680>
    3406:	fe 01       	movw	r30, r28
    3408:	eb 59       	subi	r30, 0x9B	; 155
    340a:	ff 4f       	sbci	r31, 0xFF	; 255
    340c:	88 ec       	ldi	r24, 0xC8	; 200
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	91 83       	std	Z+1, r25	; 0x01
    3412:	80 83       	st	Z, r24
    3414:	fe 01       	movw	r30, r28
    3416:	eb 59       	subi	r30, 0x9B	; 155
    3418:	ff 4f       	sbci	r31, 0xFF	; 255
    341a:	80 81       	ld	r24, Z
    341c:	91 81       	ldd	r25, Z+1	; 0x01
    341e:	01 97       	sbiw	r24, 0x01	; 1
    3420:	f1 f7       	brne	.-4      	; 0x341e <Set_Time+0x65a>
    3422:	fe 01       	movw	r30, r28
    3424:	eb 59       	subi	r30, 0x9B	; 155
    3426:	ff 4f       	sbci	r31, 0xFF	; 255
    3428:	91 83       	std	Z+1, r25	; 0x01
    342a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    342c:	de 01       	movw	r26, r28
    342e:	a9 59       	subi	r26, 0x99	; 153
    3430:	bf 4f       	sbci	r27, 0xFF	; 255
    3432:	fe 01       	movw	r30, r28
    3434:	e9 59       	subi	r30, 0x99	; 153
    3436:	ff 4f       	sbci	r31, 0xFF	; 255
    3438:	80 81       	ld	r24, Z
    343a:	91 81       	ldd	r25, Z+1	; 0x01
    343c:	01 97       	sbiw	r24, 0x01	; 1
    343e:	11 96       	adiw	r26, 0x01	; 1
    3440:	9c 93       	st	X, r25
    3442:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3444:	fe 01       	movw	r30, r28
    3446:	e9 59       	subi	r30, 0x99	; 153
    3448:	ff 4f       	sbci	r31, 0xFF	; 255
    344a:	80 81       	ld	r24, Z
    344c:	91 81       	ldd	r25, Z+1	; 0x01
    344e:	00 97       	sbiw	r24, 0x00	; 0
    3450:	d1 f6       	brne	.-76     	; 0x3406 <Set_Time+0x642>
    3452:	27 c0       	rjmp	.+78     	; 0x34a2 <Set_Time+0x6de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3454:	8e 01       	movw	r16, r28
    3456:	09 59       	subi	r16, 0x99	; 153
    3458:	1f 4f       	sbci	r17, 0xFF	; 255
    345a:	fe 01       	movw	r30, r28
    345c:	e7 59       	subi	r30, 0x97	; 151
    345e:	ff 4f       	sbci	r31, 0xFF	; 255
    3460:	60 81       	ld	r22, Z
    3462:	71 81       	ldd	r23, Z+1	; 0x01
    3464:	82 81       	ldd	r24, Z+2	; 0x02
    3466:	93 81       	ldd	r25, Z+3	; 0x03
    3468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	f8 01       	movw	r30, r16
    3472:	91 83       	std	Z+1, r25	; 0x01
    3474:	80 83       	st	Z, r24
    3476:	de 01       	movw	r26, r28
    3478:	ad 59       	subi	r26, 0x9D	; 157
    347a:	bf 4f       	sbci	r27, 0xFF	; 255
    347c:	fe 01       	movw	r30, r28
    347e:	e9 59       	subi	r30, 0x99	; 153
    3480:	ff 4f       	sbci	r31, 0xFF	; 255
    3482:	80 81       	ld	r24, Z
    3484:	91 81       	ldd	r25, Z+1	; 0x01
    3486:	8d 93       	st	X+, r24
    3488:	9c 93       	st	X, r25
    348a:	fe 01       	movw	r30, r28
    348c:	ed 59       	subi	r30, 0x9D	; 157
    348e:	ff 4f       	sbci	r31, 0xFF	; 255
    3490:	80 81       	ld	r24, Z
    3492:	91 81       	ldd	r25, Z+1	; 0x01
    3494:	01 97       	sbiw	r24, 0x01	; 1
    3496:	f1 f7       	brne	.-4      	; 0x3494 <Set_Time+0x6d0>
    3498:	fe 01       	movw	r30, r28
    349a:	ed 59       	subi	r30, 0x9D	; 157
    349c:	ff 4f       	sbci	r31, 0xFF	; 255
    349e:	91 83       	std	Z+1, r25	; 0x01
    34a0:	80 83       	st	Z, r24
	_delay_ms(300);
	do
	{
		second_digit=keypad_u8check_press();
    34a2:	0e 94 ca 21 	call	0x4394	; 0x4394 <keypad_u8check_press>
    34a6:	80 93 1b 01 	sts	0x011B, r24
	} while (second_digit==NOTPRESSED);
    34aa:	80 91 1b 01 	lds	r24, 0x011B
    34ae:	8f 3f       	cpi	r24, 0xFF	; 255
    34b0:	c1 f3       	breq	.-16     	; 0x34a2 <Set_Time+0x6de>
	LCD_vSend_char(second_digit);
    34b2:	80 91 1b 01 	lds	r24, 0x011B
    34b6:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
    34ba:	fe 01       	movw	r30, r28
    34bc:	e1 5a       	subi	r30, 0xA1	; 161
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	a6 e9       	ldi	r26, 0x96	; 150
    34c6:	b3 e4       	ldi	r27, 0x43	; 67
    34c8:	80 83       	st	Z, r24
    34ca:	91 83       	std	Z+1, r25	; 0x01
    34cc:	a2 83       	std	Z+2, r26	; 0x02
    34ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34d0:	8e 01       	movw	r16, r28
    34d2:	05 5a       	subi	r16, 0xA5	; 165
    34d4:	1f 4f       	sbci	r17, 0xFF	; 255
    34d6:	fe 01       	movw	r30, r28
    34d8:	e1 5a       	subi	r30, 0xA1	; 161
    34da:	ff 4f       	sbci	r31, 0xFF	; 255
    34dc:	60 81       	ld	r22, Z
    34de:	71 81       	ldd	r23, Z+1	; 0x01
    34e0:	82 81       	ldd	r24, Z+2	; 0x02
    34e2:	93 81       	ldd	r25, Z+3	; 0x03
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	4a ef       	ldi	r20, 0xFA	; 250
    34ea:	54 e4       	ldi	r21, 0x44	; 68
    34ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f0:	dc 01       	movw	r26, r24
    34f2:	cb 01       	movw	r24, r22
    34f4:	f8 01       	movw	r30, r16
    34f6:	80 83       	st	Z, r24
    34f8:	91 83       	std	Z+1, r25	; 0x01
    34fa:	a2 83       	std	Z+2, r26	; 0x02
    34fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34fe:	fe 01       	movw	r30, r28
    3500:	e5 5a       	subi	r30, 0xA5	; 165
    3502:	ff 4f       	sbci	r31, 0xFF	; 255
    3504:	60 81       	ld	r22, Z
    3506:	71 81       	ldd	r23, Z+1	; 0x01
    3508:	82 81       	ldd	r24, Z+2	; 0x02
    350a:	93 81       	ldd	r25, Z+3	; 0x03
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	40 e8       	ldi	r20, 0x80	; 128
    3512:	5f e3       	ldi	r21, 0x3F	; 63
    3514:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3518:	88 23       	and	r24, r24
    351a:	44 f4       	brge	.+16     	; 0x352c <Set_Time+0x768>
		__ticks = 1;
    351c:	fe 01       	movw	r30, r28
    351e:	e7 5a       	subi	r30, 0xA7	; 167
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	91 83       	std	Z+1, r25	; 0x01
    3528:	80 83       	st	Z, r24
    352a:	64 c0       	rjmp	.+200    	; 0x35f4 <Set_Time+0x830>
	else if (__tmp > 65535)
    352c:	fe 01       	movw	r30, r28
    352e:	e5 5a       	subi	r30, 0xA5	; 165
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	60 81       	ld	r22, Z
    3534:	71 81       	ldd	r23, Z+1	; 0x01
    3536:	82 81       	ldd	r24, Z+2	; 0x02
    3538:	93 81       	ldd	r25, Z+3	; 0x03
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	3f ef       	ldi	r19, 0xFF	; 255
    353e:	4f e7       	ldi	r20, 0x7F	; 127
    3540:	57 e4       	ldi	r21, 0x47	; 71
    3542:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3546:	18 16       	cp	r1, r24
    3548:	0c f0       	brlt	.+2      	; 0x354c <Set_Time+0x788>
    354a:	43 c0       	rjmp	.+134    	; 0x35d2 <Set_Time+0x80e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    354c:	fe 01       	movw	r30, r28
    354e:	e1 5a       	subi	r30, 0xA1	; 161
    3550:	ff 4f       	sbci	r31, 0xFF	; 255
    3552:	60 81       	ld	r22, Z
    3554:	71 81       	ldd	r23, Z+1	; 0x01
    3556:	82 81       	ldd	r24, Z+2	; 0x02
    3558:	93 81       	ldd	r25, Z+3	; 0x03
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	40 e2       	ldi	r20, 0x20	; 32
    3560:	51 e4       	ldi	r21, 0x41	; 65
    3562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	8e 01       	movw	r16, r28
    356c:	07 5a       	subi	r16, 0xA7	; 167
    356e:	1f 4f       	sbci	r17, 0xFF	; 255
    3570:	bc 01       	movw	r22, r24
    3572:	cd 01       	movw	r24, r26
    3574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3578:	dc 01       	movw	r26, r24
    357a:	cb 01       	movw	r24, r22
    357c:	f8 01       	movw	r30, r16
    357e:	91 83       	std	Z+1, r25	; 0x01
    3580:	80 83       	st	Z, r24
    3582:	1f c0       	rjmp	.+62     	; 0x35c2 <Set_Time+0x7fe>
    3584:	fe 01       	movw	r30, r28
    3586:	e9 5a       	subi	r30, 0xA9	; 169
    3588:	ff 4f       	sbci	r31, 0xFF	; 255
    358a:	88 ec       	ldi	r24, 0xC8	; 200
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	91 83       	std	Z+1, r25	; 0x01
    3590:	80 83       	st	Z, r24
    3592:	fe 01       	movw	r30, r28
    3594:	e9 5a       	subi	r30, 0xA9	; 169
    3596:	ff 4f       	sbci	r31, 0xFF	; 255
    3598:	80 81       	ld	r24, Z
    359a:	91 81       	ldd	r25, Z+1	; 0x01
    359c:	01 97       	sbiw	r24, 0x01	; 1
    359e:	f1 f7       	brne	.-4      	; 0x359c <Set_Time+0x7d8>
    35a0:	fe 01       	movw	r30, r28
    35a2:	e9 5a       	subi	r30, 0xA9	; 169
    35a4:	ff 4f       	sbci	r31, 0xFF	; 255
    35a6:	91 83       	std	Z+1, r25	; 0x01
    35a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35aa:	de 01       	movw	r26, r28
    35ac:	a7 5a       	subi	r26, 0xA7	; 167
    35ae:	bf 4f       	sbci	r27, 0xFF	; 255
    35b0:	fe 01       	movw	r30, r28
    35b2:	e7 5a       	subi	r30, 0xA7	; 167
    35b4:	ff 4f       	sbci	r31, 0xFF	; 255
    35b6:	80 81       	ld	r24, Z
    35b8:	91 81       	ldd	r25, Z+1	; 0x01
    35ba:	01 97       	sbiw	r24, 0x01	; 1
    35bc:	11 96       	adiw	r26, 0x01	; 1
    35be:	9c 93       	st	X, r25
    35c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c2:	fe 01       	movw	r30, r28
    35c4:	e7 5a       	subi	r30, 0xA7	; 167
    35c6:	ff 4f       	sbci	r31, 0xFF	; 255
    35c8:	80 81       	ld	r24, Z
    35ca:	91 81       	ldd	r25, Z+1	; 0x01
    35cc:	00 97       	sbiw	r24, 0x00	; 0
    35ce:	d1 f6       	brne	.-76     	; 0x3584 <Set_Time+0x7c0>
    35d0:	28 c0       	rjmp	.+80     	; 0x3622 <Set_Time+0x85e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d2:	8e 01       	movw	r16, r28
    35d4:	07 5a       	subi	r16, 0xA7	; 167
    35d6:	1f 4f       	sbci	r17, 0xFF	; 255
    35d8:	fe 01       	movw	r30, r28
    35da:	e5 5a       	subi	r30, 0xA5	; 165
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	60 81       	ld	r22, Z
    35e0:	71 81       	ldd	r23, Z+1	; 0x01
    35e2:	82 81       	ldd	r24, Z+2	; 0x02
    35e4:	93 81       	ldd	r25, Z+3	; 0x03
    35e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ea:	dc 01       	movw	r26, r24
    35ec:	cb 01       	movw	r24, r22
    35ee:	f8 01       	movw	r30, r16
    35f0:	91 83       	std	Z+1, r25	; 0x01
    35f2:	80 83       	st	Z, r24
    35f4:	de 01       	movw	r26, r28
    35f6:	ab 5a       	subi	r26, 0xAB	; 171
    35f8:	bf 4f       	sbci	r27, 0xFF	; 255
    35fa:	fe 01       	movw	r30, r28
    35fc:	e7 5a       	subi	r30, 0xA7	; 167
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	80 81       	ld	r24, Z
    3602:	91 81       	ldd	r25, Z+1	; 0x01
    3604:	11 96       	adiw	r26, 0x01	; 1
    3606:	9c 93       	st	X, r25
    3608:	8e 93       	st	-X, r24
    360a:	fe 01       	movw	r30, r28
    360c:	eb 5a       	subi	r30, 0xAB	; 171
    360e:	ff 4f       	sbci	r31, 0xFF	; 255
    3610:	80 81       	ld	r24, Z
    3612:	91 81       	ldd	r25, Z+1	; 0x01
    3614:	01 97       	sbiw	r24, 0x01	; 1
    3616:	f1 f7       	brne	.-4      	; 0x3614 <Set_Time+0x850>
    3618:	fe 01       	movw	r30, r28
    361a:	eb 5a       	subi	r30, 0xAB	; 171
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	91 83       	std	Z+1, r25	; 0x01
    3620:	80 83       	st	Z, r24
	_delay_ms(300);
	hours_counter=(second_digit-48)+10*(first_digit-48);
    3622:	80 91 1a 01 	lds	r24, 0x011A
    3626:	88 2f       	mov	r24, r24
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	9c 01       	movw	r18, r24
    362c:	22 0f       	add	r18, r18
    362e:	33 1f       	adc	r19, r19
    3630:	c9 01       	movw	r24, r18
    3632:	88 0f       	add	r24, r24
    3634:	99 1f       	adc	r25, r25
    3636:	88 0f       	add	r24, r24
    3638:	99 1f       	adc	r25, r25
    363a:	82 0f       	add	r24, r18
    363c:	93 1f       	adc	r25, r19
    363e:	98 2f       	mov	r25, r24
    3640:	80 91 1b 01 	lds	r24, 0x011B
    3644:	89 0f       	add	r24, r25
    3646:	80 51       	subi	r24, 0x10	; 16
    3648:	80 93 fa 00 	sts	0x00FA, r24
	if (mode == '1')
    364c:	80 91 1c 01 	lds	r24, 0x011C
    3650:	81 33       	cpi	r24, 0x31	; 49
    3652:	19 f5       	brne	.+70     	; 0x369a <Set_Time+0x8d6>
	{
		if (hours_counter > 12 || hours_counter == 0)
    3654:	80 91 fa 00 	lds	r24, 0x00FA
    3658:	8d 30       	cpi	r24, 0x0D	; 13
    365a:	20 f4       	brcc	.+8      	; 0x3664 <Set_Time+0x8a0>
    365c:	80 91 fa 00 	lds	r24, 0x00FA
    3660:	88 23       	and	r24, r24
    3662:	e1 f5       	brne	.+120    	; 0x36dc <Set_Time+0x918>
		{
			hours_counter = 12;
    3664:	8c e0       	ldi	r24, 0x0C	; 12
    3666:	80 93 fa 00 	sts	0x00FA, r24
			LCD_movecursor(1, 1);
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	61 e0       	ldi	r22, 0x01	; 1
    366e:	0e 94 58 11 	call	0x22b0	; 0x22b0 <LCD_movecursor>
			LCD_vSend_char(hours_counter/10 +48);
    3672:	80 91 fa 00 	lds	r24, 0x00FA
    3676:	9a e0       	ldi	r25, 0x0A	; 10
    3678:	69 2f       	mov	r22, r25
    367a:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    367e:	80 5d       	subi	r24, 0xD0	; 208
    3680:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
			LCD_vSend_char(hours_counter%10 +48);
    3684:	80 91 fa 00 	lds	r24, 0x00FA
    3688:	9a e0       	ldi	r25, 0x0A	; 10
    368a:	69 2f       	mov	r22, r25
    368c:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    3690:	89 2f       	mov	r24, r25
    3692:	80 5d       	subi	r24, 0xD0	; 208
    3694:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
    3698:	21 c0       	rjmp	.+66     	; 0x36dc <Set_Time+0x918>
		}
	}
	else if (mode == '2')
    369a:	80 91 1c 01 	lds	r24, 0x011C
    369e:	82 33       	cpi	r24, 0x32	; 50
    36a0:	e9 f4       	brne	.+58     	; 0x36dc <Set_Time+0x918>
	{
		if (hours_counter  > 23)
    36a2:	80 91 fa 00 	lds	r24, 0x00FA
    36a6:	88 31       	cpi	r24, 0x18	; 24
    36a8:	c8 f0       	brcs	.+50     	; 0x36dc <Set_Time+0x918>
		{
			hours_counter = 0;
    36aa:	10 92 fa 00 	sts	0x00FA, r1
			LCD_movecursor(1, 1);
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	61 e0       	ldi	r22, 0x01	; 1
    36b2:	0e 94 58 11 	call	0x22b0	; 0x22b0 <LCD_movecursor>
			LCD_vSend_char(hours_counter/10 +48);
    36b6:	80 91 fa 00 	lds	r24, 0x00FA
    36ba:	9a e0       	ldi	r25, 0x0A	; 10
    36bc:	69 2f       	mov	r22, r25
    36be:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    36c2:	80 5d       	subi	r24, 0xD0	; 208
    36c4:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
			LCD_vSend_char(hours_counter%10 +48);
    36c8:	80 91 fa 00 	lds	r24, 0x00FA
    36cc:	9a e0       	ldi	r25, 0x0A	; 10
    36ce:	69 2f       	mov	r22, r25
    36d0:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    36d4:	89 2f       	mov	r24, r25
    36d6:	80 5d       	subi	r24, 0xD0	; 208
    36d8:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
	}
	else
	{

	}
	LCD_movecursor(1,6);
    36dc:	81 e0       	ldi	r24, 0x01	; 1
    36de:	66 e0       	ldi	r22, 0x06	; 6
    36e0:	0e 94 58 11 	call	0x22b0	; 0x22b0 <LCD_movecursor>
	do
	{
		first_digit=keypad_u8check_press();
    36e4:	0e 94 ca 21 	call	0x4394	; 0x4394 <keypad_u8check_press>
    36e8:	80 93 1a 01 	sts	0x011A, r24
	} while (first_digit==NOTPRESSED);
    36ec:	80 91 1a 01 	lds	r24, 0x011A
    36f0:	8f 3f       	cpi	r24, 0xFF	; 255
    36f2:	c1 f3       	breq	.-16     	; 0x36e4 <Set_Time+0x920>
	LCD_vSend_char(first_digit);
    36f4:	80 91 1a 01 	lds	r24, 0x011A
    36f8:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
    36fc:	fe 01       	movw	r30, r28
    36fe:	ef 5a       	subi	r30, 0xAF	; 175
    3700:	ff 4f       	sbci	r31, 0xFF	; 255
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	a6 e9       	ldi	r26, 0x96	; 150
    3708:	b3 e4       	ldi	r27, 0x43	; 67
    370a:	80 83       	st	Z, r24
    370c:	91 83       	std	Z+1, r25	; 0x01
    370e:	a2 83       	std	Z+2, r26	; 0x02
    3710:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3712:	8e 01       	movw	r16, r28
    3714:	03 5b       	subi	r16, 0xB3	; 179
    3716:	1f 4f       	sbci	r17, 0xFF	; 255
    3718:	fe 01       	movw	r30, r28
    371a:	ef 5a       	subi	r30, 0xAF	; 175
    371c:	ff 4f       	sbci	r31, 0xFF	; 255
    371e:	60 81       	ld	r22, Z
    3720:	71 81       	ldd	r23, Z+1	; 0x01
    3722:	82 81       	ldd	r24, Z+2	; 0x02
    3724:	93 81       	ldd	r25, Z+3	; 0x03
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	4a ef       	ldi	r20, 0xFA	; 250
    372c:	54 e4       	ldi	r21, 0x44	; 68
    372e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	f8 01       	movw	r30, r16
    3738:	80 83       	st	Z, r24
    373a:	91 83       	std	Z+1, r25	; 0x01
    373c:	a2 83       	std	Z+2, r26	; 0x02
    373e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3740:	fe 01       	movw	r30, r28
    3742:	e3 5b       	subi	r30, 0xB3	; 179
    3744:	ff 4f       	sbci	r31, 0xFF	; 255
    3746:	60 81       	ld	r22, Z
    3748:	71 81       	ldd	r23, Z+1	; 0x01
    374a:	82 81       	ldd	r24, Z+2	; 0x02
    374c:	93 81       	ldd	r25, Z+3	; 0x03
    374e:	20 e0       	ldi	r18, 0x00	; 0
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	40 e8       	ldi	r20, 0x80	; 128
    3754:	5f e3       	ldi	r21, 0x3F	; 63
    3756:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    375a:	88 23       	and	r24, r24
    375c:	44 f4       	brge	.+16     	; 0x376e <Set_Time+0x9aa>
		__ticks = 1;
    375e:	fe 01       	movw	r30, r28
    3760:	e5 5b       	subi	r30, 0xB5	; 181
    3762:	ff 4f       	sbci	r31, 0xFF	; 255
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	91 83       	std	Z+1, r25	; 0x01
    376a:	80 83       	st	Z, r24
    376c:	64 c0       	rjmp	.+200    	; 0x3836 <Set_Time+0xa72>
	else if (__tmp > 65535)
    376e:	fe 01       	movw	r30, r28
    3770:	e3 5b       	subi	r30, 0xB3	; 179
    3772:	ff 4f       	sbci	r31, 0xFF	; 255
    3774:	60 81       	ld	r22, Z
    3776:	71 81       	ldd	r23, Z+1	; 0x01
    3778:	82 81       	ldd	r24, Z+2	; 0x02
    377a:	93 81       	ldd	r25, Z+3	; 0x03
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	3f ef       	ldi	r19, 0xFF	; 255
    3780:	4f e7       	ldi	r20, 0x7F	; 127
    3782:	57 e4       	ldi	r21, 0x47	; 71
    3784:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3788:	18 16       	cp	r1, r24
    378a:	0c f0       	brlt	.+2      	; 0x378e <Set_Time+0x9ca>
    378c:	43 c0       	rjmp	.+134    	; 0x3814 <Set_Time+0xa50>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    378e:	fe 01       	movw	r30, r28
    3790:	ef 5a       	subi	r30, 0xAF	; 175
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	60 81       	ld	r22, Z
    3796:	71 81       	ldd	r23, Z+1	; 0x01
    3798:	82 81       	ldd	r24, Z+2	; 0x02
    379a:	93 81       	ldd	r25, Z+3	; 0x03
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	40 e2       	ldi	r20, 0x20	; 32
    37a2:	51 e4       	ldi	r21, 0x41	; 65
    37a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	8e 01       	movw	r16, r28
    37ae:	05 5b       	subi	r16, 0xB5	; 181
    37b0:	1f 4f       	sbci	r17, 0xFF	; 255
    37b2:	bc 01       	movw	r22, r24
    37b4:	cd 01       	movw	r24, r26
    37b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ba:	dc 01       	movw	r26, r24
    37bc:	cb 01       	movw	r24, r22
    37be:	f8 01       	movw	r30, r16
    37c0:	91 83       	std	Z+1, r25	; 0x01
    37c2:	80 83       	st	Z, r24
    37c4:	1f c0       	rjmp	.+62     	; 0x3804 <Set_Time+0xa40>
    37c6:	fe 01       	movw	r30, r28
    37c8:	e7 5b       	subi	r30, 0xB7	; 183
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	88 ec       	ldi	r24, 0xC8	; 200
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	91 83       	std	Z+1, r25	; 0x01
    37d2:	80 83       	st	Z, r24
    37d4:	fe 01       	movw	r30, r28
    37d6:	e7 5b       	subi	r30, 0xB7	; 183
    37d8:	ff 4f       	sbci	r31, 0xFF	; 255
    37da:	80 81       	ld	r24, Z
    37dc:	91 81       	ldd	r25, Z+1	; 0x01
    37de:	01 97       	sbiw	r24, 0x01	; 1
    37e0:	f1 f7       	brne	.-4      	; 0x37de <Set_Time+0xa1a>
    37e2:	fe 01       	movw	r30, r28
    37e4:	e7 5b       	subi	r30, 0xB7	; 183
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	91 83       	std	Z+1, r25	; 0x01
    37ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ec:	de 01       	movw	r26, r28
    37ee:	a5 5b       	subi	r26, 0xB5	; 181
    37f0:	bf 4f       	sbci	r27, 0xFF	; 255
    37f2:	fe 01       	movw	r30, r28
    37f4:	e5 5b       	subi	r30, 0xB5	; 181
    37f6:	ff 4f       	sbci	r31, 0xFF	; 255
    37f8:	80 81       	ld	r24, Z
    37fa:	91 81       	ldd	r25, Z+1	; 0x01
    37fc:	01 97       	sbiw	r24, 0x01	; 1
    37fe:	11 96       	adiw	r26, 0x01	; 1
    3800:	9c 93       	st	X, r25
    3802:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3804:	fe 01       	movw	r30, r28
    3806:	e5 5b       	subi	r30, 0xB5	; 181
    3808:	ff 4f       	sbci	r31, 0xFF	; 255
    380a:	80 81       	ld	r24, Z
    380c:	91 81       	ldd	r25, Z+1	; 0x01
    380e:	00 97       	sbiw	r24, 0x00	; 0
    3810:	d1 f6       	brne	.-76     	; 0x37c6 <Set_Time+0xa02>
    3812:	27 c0       	rjmp	.+78     	; 0x3862 <Set_Time+0xa9e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3814:	8e 01       	movw	r16, r28
    3816:	05 5b       	subi	r16, 0xB5	; 181
    3818:	1f 4f       	sbci	r17, 0xFF	; 255
    381a:	fe 01       	movw	r30, r28
    381c:	e3 5b       	subi	r30, 0xB3	; 179
    381e:	ff 4f       	sbci	r31, 0xFF	; 255
    3820:	60 81       	ld	r22, Z
    3822:	71 81       	ldd	r23, Z+1	; 0x01
    3824:	82 81       	ldd	r24, Z+2	; 0x02
    3826:	93 81       	ldd	r25, Z+3	; 0x03
    3828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    382c:	dc 01       	movw	r26, r24
    382e:	cb 01       	movw	r24, r22
    3830:	f8 01       	movw	r30, r16
    3832:	91 83       	std	Z+1, r25	; 0x01
    3834:	80 83       	st	Z, r24
    3836:	de 01       	movw	r26, r28
    3838:	a9 5b       	subi	r26, 0xB9	; 185
    383a:	bf 4f       	sbci	r27, 0xFF	; 255
    383c:	fe 01       	movw	r30, r28
    383e:	e5 5b       	subi	r30, 0xB5	; 181
    3840:	ff 4f       	sbci	r31, 0xFF	; 255
    3842:	80 81       	ld	r24, Z
    3844:	91 81       	ldd	r25, Z+1	; 0x01
    3846:	8d 93       	st	X+, r24
    3848:	9c 93       	st	X, r25
    384a:	fe 01       	movw	r30, r28
    384c:	e9 5b       	subi	r30, 0xB9	; 185
    384e:	ff 4f       	sbci	r31, 0xFF	; 255
    3850:	80 81       	ld	r24, Z
    3852:	91 81       	ldd	r25, Z+1	; 0x01
    3854:	01 97       	sbiw	r24, 0x01	; 1
    3856:	f1 f7       	brne	.-4      	; 0x3854 <Set_Time+0xa90>
    3858:	fe 01       	movw	r30, r28
    385a:	e9 5b       	subi	r30, 0xB9	; 185
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	91 83       	std	Z+1, r25	; 0x01
    3860:	80 83       	st	Z, r24
	_delay_ms(300);
	do
	{
		second_digit=keypad_u8check_press();
    3862:	0e 94 ca 21 	call	0x4394	; 0x4394 <keypad_u8check_press>
    3866:	80 93 1b 01 	sts	0x011B, r24

	} while (second_digit==NOTPRESSED);
    386a:	80 91 1b 01 	lds	r24, 0x011B
    386e:	8f 3f       	cpi	r24, 0xFF	; 255
    3870:	c1 f3       	breq	.-16     	; 0x3862 <Set_Time+0xa9e>
	LCD_vSend_char(second_digit);
    3872:	80 91 1b 01 	lds	r24, 0x011B
    3876:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
    387a:	fe 01       	movw	r30, r28
    387c:	ed 5b       	subi	r30, 0xBD	; 189
    387e:	ff 4f       	sbci	r31, 0xFF	; 255
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	a6 e9       	ldi	r26, 0x96	; 150
    3886:	b3 e4       	ldi	r27, 0x43	; 67
    3888:	80 83       	st	Z, r24
    388a:	91 83       	std	Z+1, r25	; 0x01
    388c:	a2 83       	std	Z+2, r26	; 0x02
    388e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3890:	8e 01       	movw	r16, r28
    3892:	01 5c       	subi	r16, 0xC1	; 193
    3894:	1f 4f       	sbci	r17, 0xFF	; 255
    3896:	fe 01       	movw	r30, r28
    3898:	ed 5b       	subi	r30, 0xBD	; 189
    389a:	ff 4f       	sbci	r31, 0xFF	; 255
    389c:	60 81       	ld	r22, Z
    389e:	71 81       	ldd	r23, Z+1	; 0x01
    38a0:	82 81       	ldd	r24, Z+2	; 0x02
    38a2:	93 81       	ldd	r25, Z+3	; 0x03
    38a4:	20 e0       	ldi	r18, 0x00	; 0
    38a6:	30 e0       	ldi	r19, 0x00	; 0
    38a8:	4a ef       	ldi	r20, 0xFA	; 250
    38aa:	54 e4       	ldi	r21, 0x44	; 68
    38ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b0:	dc 01       	movw	r26, r24
    38b2:	cb 01       	movw	r24, r22
    38b4:	f8 01       	movw	r30, r16
    38b6:	80 83       	st	Z, r24
    38b8:	91 83       	std	Z+1, r25	; 0x01
    38ba:	a2 83       	std	Z+2, r26	; 0x02
    38bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38be:	fe 01       	movw	r30, r28
    38c0:	ff 96       	adiw	r30, 0x3f	; 63
    38c2:	60 81       	ld	r22, Z
    38c4:	71 81       	ldd	r23, Z+1	; 0x01
    38c6:	82 81       	ldd	r24, Z+2	; 0x02
    38c8:	93 81       	ldd	r25, Z+3	; 0x03
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	40 e8       	ldi	r20, 0x80	; 128
    38d0:	5f e3       	ldi	r21, 0x3F	; 63
    38d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38d6:	88 23       	and	r24, r24
    38d8:	2c f4       	brge	.+10     	; 0x38e4 <Set_Time+0xb20>
		__ticks = 1;
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	9e af       	std	Y+62, r25	; 0x3e
    38e0:	8d af       	std	Y+61, r24	; 0x3d
    38e2:	46 c0       	rjmp	.+140    	; 0x3970 <Set_Time+0xbac>
	else if (__tmp > 65535)
    38e4:	fe 01       	movw	r30, r28
    38e6:	ff 96       	adiw	r30, 0x3f	; 63
    38e8:	60 81       	ld	r22, Z
    38ea:	71 81       	ldd	r23, Z+1	; 0x01
    38ec:	82 81       	ldd	r24, Z+2	; 0x02
    38ee:	93 81       	ldd	r25, Z+3	; 0x03
    38f0:	20 e0       	ldi	r18, 0x00	; 0
    38f2:	3f ef       	ldi	r19, 0xFF	; 255
    38f4:	4f e7       	ldi	r20, 0x7F	; 127
    38f6:	57 e4       	ldi	r21, 0x47	; 71
    38f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38fc:	18 16       	cp	r1, r24
    38fe:	64 f5       	brge	.+88     	; 0x3958 <Set_Time+0xb94>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3900:	fe 01       	movw	r30, r28
    3902:	ed 5b       	subi	r30, 0xBD	; 189
    3904:	ff 4f       	sbci	r31, 0xFF	; 255
    3906:	60 81       	ld	r22, Z
    3908:	71 81       	ldd	r23, Z+1	; 0x01
    390a:	82 81       	ldd	r24, Z+2	; 0x02
    390c:	93 81       	ldd	r25, Z+3	; 0x03
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	40 e2       	ldi	r20, 0x20	; 32
    3914:	51 e4       	ldi	r21, 0x41	; 65
    3916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391a:	dc 01       	movw	r26, r24
    391c:	cb 01       	movw	r24, r22
    391e:	bc 01       	movw	r22, r24
    3920:	cd 01       	movw	r24, r26
    3922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	9e af       	std	Y+62, r25	; 0x3e
    392c:	8d af       	std	Y+61, r24	; 0x3d
    392e:	0f c0       	rjmp	.+30     	; 0x394e <Set_Time+0xb8a>
    3930:	88 ec       	ldi	r24, 0xC8	; 200
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	9c af       	std	Y+60, r25	; 0x3c
    3936:	8b af       	std	Y+59, r24	; 0x3b
    3938:	8b ad       	ldd	r24, Y+59	; 0x3b
    393a:	9c ad       	ldd	r25, Y+60	; 0x3c
    393c:	01 97       	sbiw	r24, 0x01	; 1
    393e:	f1 f7       	brne	.-4      	; 0x393c <Set_Time+0xb78>
    3940:	9c af       	std	Y+60, r25	; 0x3c
    3942:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3944:	8d ad       	ldd	r24, Y+61	; 0x3d
    3946:	9e ad       	ldd	r25, Y+62	; 0x3e
    3948:	01 97       	sbiw	r24, 0x01	; 1
    394a:	9e af       	std	Y+62, r25	; 0x3e
    394c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    394e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3950:	9e ad       	ldd	r25, Y+62	; 0x3e
    3952:	00 97       	sbiw	r24, 0x00	; 0
    3954:	69 f7       	brne	.-38     	; 0x3930 <Set_Time+0xb6c>
    3956:	16 c0       	rjmp	.+44     	; 0x3984 <Set_Time+0xbc0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3958:	fe 01       	movw	r30, r28
    395a:	ff 96       	adiw	r30, 0x3f	; 63
    395c:	60 81       	ld	r22, Z
    395e:	71 81       	ldd	r23, Z+1	; 0x01
    3960:	82 81       	ldd	r24, Z+2	; 0x02
    3962:	93 81       	ldd	r25, Z+3	; 0x03
    3964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3968:	dc 01       	movw	r26, r24
    396a:	cb 01       	movw	r24, r22
    396c:	9e af       	std	Y+62, r25	; 0x3e
    396e:	8d af       	std	Y+61, r24	; 0x3d
    3970:	8d ad       	ldd	r24, Y+61	; 0x3d
    3972:	9e ad       	ldd	r25, Y+62	; 0x3e
    3974:	9a af       	std	Y+58, r25	; 0x3a
    3976:	89 af       	std	Y+57, r24	; 0x39
    3978:	89 ad       	ldd	r24, Y+57	; 0x39
    397a:	9a ad       	ldd	r25, Y+58	; 0x3a
    397c:	01 97       	sbiw	r24, 0x01	; 1
    397e:	f1 f7       	brne	.-4      	; 0x397c <Set_Time+0xbb8>
    3980:	9a af       	std	Y+58, r25	; 0x3a
    3982:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(300);
	minutes_counter=(second_digit-48)+10*(first_digit-48);
    3984:	80 91 1a 01 	lds	r24, 0x011A
    3988:	88 2f       	mov	r24, r24
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	9c 01       	movw	r18, r24
    398e:	22 0f       	add	r18, r18
    3990:	33 1f       	adc	r19, r19
    3992:	c9 01       	movw	r24, r18
    3994:	88 0f       	add	r24, r24
    3996:	99 1f       	adc	r25, r25
    3998:	88 0f       	add	r24, r24
    399a:	99 1f       	adc	r25, r25
    399c:	82 0f       	add	r24, r18
    399e:	93 1f       	adc	r25, r19
    39a0:	98 2f       	mov	r25, r24
    39a2:	80 91 1b 01 	lds	r24, 0x011B
    39a6:	89 0f       	add	r24, r25
    39a8:	80 51       	subi	r24, 0x10	; 16
    39aa:	80 93 19 01 	sts	0x0119, r24
	if (minutes_counter > 59)
    39ae:	80 91 19 01 	lds	r24, 0x0119
    39b2:	8c 33       	cpi	r24, 0x3C	; 60
    39b4:	c8 f0       	brcs	.+50     	; 0x39e8 <Set_Time+0xc24>
	{
		minutes_counter = 0;
    39b6:	10 92 19 01 	sts	0x0119, r1
		LCD_movecursor(1,6);
    39ba:	81 e0       	ldi	r24, 0x01	; 1
    39bc:	66 e0       	ldi	r22, 0x06	; 6
    39be:	0e 94 58 11 	call	0x22b0	; 0x22b0 <LCD_movecursor>
		LCD_vSend_char(minutes_counter/10 + 48);
    39c2:	80 91 19 01 	lds	r24, 0x0119
    39c6:	9a e0       	ldi	r25, 0x0A	; 10
    39c8:	69 2f       	mov	r22, r25
    39ca:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    39ce:	80 5d       	subi	r24, 0xD0	; 208
    39d0:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
		LCD_vSend_char(minutes_counter%10 + 48);
    39d4:	80 91 19 01 	lds	r24, 0x0119
    39d8:	9a e0       	ldi	r25, 0x0A	; 10
    39da:	69 2f       	mov	r22, r25
    39dc:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    39e0:	89 2f       	mov	r24, r25
    39e2:	80 5d       	subi	r24, 0xD0	; 208
    39e4:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
	}
	LCD_movecursor(1,11);
    39e8:	81 e0       	ldi	r24, 0x01	; 1
    39ea:	6b e0       	ldi	r22, 0x0B	; 11
    39ec:	0e 94 58 11 	call	0x22b0	; 0x22b0 <LCD_movecursor>
	do
	{
		first_digit=keypad_u8check_press();
    39f0:	0e 94 ca 21 	call	0x4394	; 0x4394 <keypad_u8check_press>
    39f4:	80 93 1a 01 	sts	0x011A, r24

	} while (first_digit==NOTPRESSED);
    39f8:	80 91 1a 01 	lds	r24, 0x011A
    39fc:	8f 3f       	cpi	r24, 0xFF	; 255
    39fe:	c1 f3       	breq	.-16     	; 0x39f0 <Set_Time+0xc2c>
	LCD_vSend_char(first_digit);
    3a00:	80 91 1a 01 	lds	r24, 0x011A
    3a04:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	a6 e9       	ldi	r26, 0x96	; 150
    3a0e:	b3 e4       	ldi	r27, 0x43	; 67
    3a10:	8d ab       	std	Y+53, r24	; 0x35
    3a12:	9e ab       	std	Y+54, r25	; 0x36
    3a14:	af ab       	std	Y+55, r26	; 0x37
    3a16:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a18:	6d a9       	ldd	r22, Y+53	; 0x35
    3a1a:	7e a9       	ldd	r23, Y+54	; 0x36
    3a1c:	8f a9       	ldd	r24, Y+55	; 0x37
    3a1e:	98 ad       	ldd	r25, Y+56	; 0x38
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	4a ef       	ldi	r20, 0xFA	; 250
    3a26:	54 e4       	ldi	r21, 0x44	; 68
    3a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2c:	dc 01       	movw	r26, r24
    3a2e:	cb 01       	movw	r24, r22
    3a30:	89 ab       	std	Y+49, r24	; 0x31
    3a32:	9a ab       	std	Y+50, r25	; 0x32
    3a34:	ab ab       	std	Y+51, r26	; 0x33
    3a36:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a38:	69 a9       	ldd	r22, Y+49	; 0x31
    3a3a:	7a a9       	ldd	r23, Y+50	; 0x32
    3a3c:	8b a9       	ldd	r24, Y+51	; 0x33
    3a3e:	9c a9       	ldd	r25, Y+52	; 0x34
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	40 e8       	ldi	r20, 0x80	; 128
    3a46:	5f e3       	ldi	r21, 0x3F	; 63
    3a48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a4c:	88 23       	and	r24, r24
    3a4e:	2c f4       	brge	.+10     	; 0x3a5a <Set_Time+0xc96>
		__ticks = 1;
    3a50:	81 e0       	ldi	r24, 0x01	; 1
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	98 ab       	std	Y+48, r25	; 0x30
    3a56:	8f a7       	std	Y+47, r24	; 0x2f
    3a58:	3f c0       	rjmp	.+126    	; 0x3ad8 <Set_Time+0xd14>
	else if (__tmp > 65535)
    3a5a:	69 a9       	ldd	r22, Y+49	; 0x31
    3a5c:	7a a9       	ldd	r23, Y+50	; 0x32
    3a5e:	8b a9       	ldd	r24, Y+51	; 0x33
    3a60:	9c a9       	ldd	r25, Y+52	; 0x34
    3a62:	20 e0       	ldi	r18, 0x00	; 0
    3a64:	3f ef       	ldi	r19, 0xFF	; 255
    3a66:	4f e7       	ldi	r20, 0x7F	; 127
    3a68:	57 e4       	ldi	r21, 0x47	; 71
    3a6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a6e:	18 16       	cp	r1, r24
    3a70:	4c f5       	brge	.+82     	; 0x3ac4 <Set_Time+0xd00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a72:	6d a9       	ldd	r22, Y+53	; 0x35
    3a74:	7e a9       	ldd	r23, Y+54	; 0x36
    3a76:	8f a9       	ldd	r24, Y+55	; 0x37
    3a78:	98 ad       	ldd	r25, Y+56	; 0x38
    3a7a:	20 e0       	ldi	r18, 0x00	; 0
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	40 e2       	ldi	r20, 0x20	; 32
    3a80:	51 e4       	ldi	r21, 0x41	; 65
    3a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a86:	dc 01       	movw	r26, r24
    3a88:	cb 01       	movw	r24, r22
    3a8a:	bc 01       	movw	r22, r24
    3a8c:	cd 01       	movw	r24, r26
    3a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a92:	dc 01       	movw	r26, r24
    3a94:	cb 01       	movw	r24, r22
    3a96:	98 ab       	std	Y+48, r25	; 0x30
    3a98:	8f a7       	std	Y+47, r24	; 0x2f
    3a9a:	0f c0       	rjmp	.+30     	; 0x3aba <Set_Time+0xcf6>
    3a9c:	88 ec       	ldi	r24, 0xC8	; 200
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	9e a7       	std	Y+46, r25	; 0x2e
    3aa2:	8d a7       	std	Y+45, r24	; 0x2d
    3aa4:	8d a5       	ldd	r24, Y+45	; 0x2d
    3aa6:	9e a5       	ldd	r25, Y+46	; 0x2e
    3aa8:	01 97       	sbiw	r24, 0x01	; 1
    3aaa:	f1 f7       	brne	.-4      	; 0x3aa8 <Set_Time+0xce4>
    3aac:	9e a7       	std	Y+46, r25	; 0x2e
    3aae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ab0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ab2:	98 a9       	ldd	r25, Y+48	; 0x30
    3ab4:	01 97       	sbiw	r24, 0x01	; 1
    3ab6:	98 ab       	std	Y+48, r25	; 0x30
    3ab8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aba:	8f a5       	ldd	r24, Y+47	; 0x2f
    3abc:	98 a9       	ldd	r25, Y+48	; 0x30
    3abe:	00 97       	sbiw	r24, 0x00	; 0
    3ac0:	69 f7       	brne	.-38     	; 0x3a9c <Set_Time+0xcd8>
    3ac2:	14 c0       	rjmp	.+40     	; 0x3aec <Set_Time+0xd28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac4:	69 a9       	ldd	r22, Y+49	; 0x31
    3ac6:	7a a9       	ldd	r23, Y+50	; 0x32
    3ac8:	8b a9       	ldd	r24, Y+51	; 0x33
    3aca:	9c a9       	ldd	r25, Y+52	; 0x34
    3acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad0:	dc 01       	movw	r26, r24
    3ad2:	cb 01       	movw	r24, r22
    3ad4:	98 ab       	std	Y+48, r25	; 0x30
    3ad6:	8f a7       	std	Y+47, r24	; 0x2f
    3ad8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ada:	98 a9       	ldd	r25, Y+48	; 0x30
    3adc:	9c a7       	std	Y+44, r25	; 0x2c
    3ade:	8b a7       	std	Y+43, r24	; 0x2b
    3ae0:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ae2:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ae4:	01 97       	sbiw	r24, 0x01	; 1
    3ae6:	f1 f7       	brne	.-4      	; 0x3ae4 <Set_Time+0xd20>
    3ae8:	9c a7       	std	Y+44, r25	; 0x2c
    3aea:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(300);
	do
	{
		second_digit=keypad_u8check_press();
    3aec:	0e 94 ca 21 	call	0x4394	; 0x4394 <keypad_u8check_press>
    3af0:	80 93 1b 01 	sts	0x011B, r24

	} while (second_digit==NOTPRESSED);
    3af4:	80 91 1b 01 	lds	r24, 0x011B
    3af8:	8f 3f       	cpi	r24, 0xFF	; 255
    3afa:	c1 f3       	breq	.-16     	; 0x3aec <Set_Time+0xd28>
	LCD_vSend_char(second_digit);
    3afc:	80 91 1b 01 	lds	r24, 0x011B
    3b00:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	a6 e9       	ldi	r26, 0x96	; 150
    3b0a:	b3 e4       	ldi	r27, 0x43	; 67
    3b0c:	8f a3       	std	Y+39, r24	; 0x27
    3b0e:	98 a7       	std	Y+40, r25	; 0x28
    3b10:	a9 a7       	std	Y+41, r26	; 0x29
    3b12:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b14:	6f a1       	ldd	r22, Y+39	; 0x27
    3b16:	78 a5       	ldd	r23, Y+40	; 0x28
    3b18:	89 a5       	ldd	r24, Y+41	; 0x29
    3b1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b1c:	20 e0       	ldi	r18, 0x00	; 0
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	4a ef       	ldi	r20, 0xFA	; 250
    3b22:	54 e4       	ldi	r21, 0x44	; 68
    3b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b28:	dc 01       	movw	r26, r24
    3b2a:	cb 01       	movw	r24, r22
    3b2c:	8b a3       	std	Y+35, r24	; 0x23
    3b2e:	9c a3       	std	Y+36, r25	; 0x24
    3b30:	ad a3       	std	Y+37, r26	; 0x25
    3b32:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b34:	6b a1       	ldd	r22, Y+35	; 0x23
    3b36:	7c a1       	ldd	r23, Y+36	; 0x24
    3b38:	8d a1       	ldd	r24, Y+37	; 0x25
    3b3a:	9e a1       	ldd	r25, Y+38	; 0x26
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	40 e8       	ldi	r20, 0x80	; 128
    3b42:	5f e3       	ldi	r21, 0x3F	; 63
    3b44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b48:	88 23       	and	r24, r24
    3b4a:	2c f4       	brge	.+10     	; 0x3b56 <Set_Time+0xd92>
		__ticks = 1;
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	9a a3       	std	Y+34, r25	; 0x22
    3b52:	89 a3       	std	Y+33, r24	; 0x21
    3b54:	3f c0       	rjmp	.+126    	; 0x3bd4 <Set_Time+0xe10>
	else if (__tmp > 65535)
    3b56:	6b a1       	ldd	r22, Y+35	; 0x23
    3b58:	7c a1       	ldd	r23, Y+36	; 0x24
    3b5a:	8d a1       	ldd	r24, Y+37	; 0x25
    3b5c:	9e a1       	ldd	r25, Y+38	; 0x26
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	3f ef       	ldi	r19, 0xFF	; 255
    3b62:	4f e7       	ldi	r20, 0x7F	; 127
    3b64:	57 e4       	ldi	r21, 0x47	; 71
    3b66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b6a:	18 16       	cp	r1, r24
    3b6c:	4c f5       	brge	.+82     	; 0x3bc0 <Set_Time+0xdfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b6e:	6f a1       	ldd	r22, Y+39	; 0x27
    3b70:	78 a5       	ldd	r23, Y+40	; 0x28
    3b72:	89 a5       	ldd	r24, Y+41	; 0x29
    3b74:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b76:	20 e0       	ldi	r18, 0x00	; 0
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	40 e2       	ldi	r20, 0x20	; 32
    3b7c:	51 e4       	ldi	r21, 0x41	; 65
    3b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b82:	dc 01       	movw	r26, r24
    3b84:	cb 01       	movw	r24, r22
    3b86:	bc 01       	movw	r22, r24
    3b88:	cd 01       	movw	r24, r26
    3b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b8e:	dc 01       	movw	r26, r24
    3b90:	cb 01       	movw	r24, r22
    3b92:	9a a3       	std	Y+34, r25	; 0x22
    3b94:	89 a3       	std	Y+33, r24	; 0x21
    3b96:	0f c0       	rjmp	.+30     	; 0x3bb6 <Set_Time+0xdf2>
    3b98:	88 ec       	ldi	r24, 0xC8	; 200
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	98 a3       	std	Y+32, r25	; 0x20
    3b9e:	8f 8f       	std	Y+31, r24	; 0x1f
    3ba0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ba2:	98 a1       	ldd	r25, Y+32	; 0x20
    3ba4:	01 97       	sbiw	r24, 0x01	; 1
    3ba6:	f1 f7       	brne	.-4      	; 0x3ba4 <Set_Time+0xde0>
    3ba8:	98 a3       	std	Y+32, r25	; 0x20
    3baa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bac:	89 a1       	ldd	r24, Y+33	; 0x21
    3bae:	9a a1       	ldd	r25, Y+34	; 0x22
    3bb0:	01 97       	sbiw	r24, 0x01	; 1
    3bb2:	9a a3       	std	Y+34, r25	; 0x22
    3bb4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bb6:	89 a1       	ldd	r24, Y+33	; 0x21
    3bb8:	9a a1       	ldd	r25, Y+34	; 0x22
    3bba:	00 97       	sbiw	r24, 0x00	; 0
    3bbc:	69 f7       	brne	.-38     	; 0x3b98 <Set_Time+0xdd4>
    3bbe:	14 c0       	rjmp	.+40     	; 0x3be8 <Set_Time+0xe24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bc0:	6b a1       	ldd	r22, Y+35	; 0x23
    3bc2:	7c a1       	ldd	r23, Y+36	; 0x24
    3bc4:	8d a1       	ldd	r24, Y+37	; 0x25
    3bc6:	9e a1       	ldd	r25, Y+38	; 0x26
    3bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bcc:	dc 01       	movw	r26, r24
    3bce:	cb 01       	movw	r24, r22
    3bd0:	9a a3       	std	Y+34, r25	; 0x22
    3bd2:	89 a3       	std	Y+33, r24	; 0x21
    3bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    3bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    3bd8:	9e 8f       	std	Y+30, r25	; 0x1e
    3bda:	8d 8f       	std	Y+29, r24	; 0x1d
    3bdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bde:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3be0:	01 97       	sbiw	r24, 0x01	; 1
    3be2:	f1 f7       	brne	.-4      	; 0x3be0 <Set_Time+0xe1c>
    3be4:	9e 8f       	std	Y+30, r25	; 0x1e
    3be6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(300);
	seconds_counter=(second_digit-48)+10*(first_digit-48);
    3be8:	80 91 1a 01 	lds	r24, 0x011A
    3bec:	88 2f       	mov	r24, r24
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	9c 01       	movw	r18, r24
    3bf2:	22 0f       	add	r18, r18
    3bf4:	33 1f       	adc	r19, r19
    3bf6:	c9 01       	movw	r24, r18
    3bf8:	88 0f       	add	r24, r24
    3bfa:	99 1f       	adc	r25, r25
    3bfc:	88 0f       	add	r24, r24
    3bfe:	99 1f       	adc	r25, r25
    3c00:	82 0f       	add	r24, r18
    3c02:	93 1f       	adc	r25, r19
    3c04:	98 2f       	mov	r25, r24
    3c06:	80 91 1b 01 	lds	r24, 0x011B
    3c0a:	89 0f       	add	r24, r25
    3c0c:	80 51       	subi	r24, 0x10	; 16
    3c0e:	80 93 16 01 	sts	0x0116, r24
	if (seconds_counter > 59)
    3c12:	80 91 16 01 	lds	r24, 0x0116
    3c16:	8c 33       	cpi	r24, 0x3C	; 60
    3c18:	c8 f0       	brcs	.+50     	; 0x3c4c <Set_Time+0xe88>
	{
		seconds_counter = 0;
    3c1a:	10 92 16 01 	sts	0x0116, r1
		LCD_movecursor(1,11);
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	6b e0       	ldi	r22, 0x0B	; 11
    3c22:	0e 94 58 11 	call	0x22b0	; 0x22b0 <LCD_movecursor>
		LCD_vSend_char(seconds_counter/10 + 48);
    3c26:	80 91 16 01 	lds	r24, 0x0116
    3c2a:	9a e0       	ldi	r25, 0x0A	; 10
    3c2c:	69 2f       	mov	r22, r25
    3c2e:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    3c32:	80 5d       	subi	r24, 0xD0	; 208
    3c34:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
		LCD_vSend_char(seconds_counter%10 + 48);
    3c38:	80 91 16 01 	lds	r24, 0x0116
    3c3c:	9a e0       	ldi	r25, 0x0A	; 10
    3c3e:	69 2f       	mov	r22, r25
    3c40:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    3c44:	89 2f       	mov	r24, r25
    3c46:	80 5d       	subi	r24, 0xD0	; 208
    3c48:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
	}
	if (mode == '1')
    3c4c:	80 91 1c 01 	lds	r24, 0x011C
    3c50:	81 33       	cpi	r24, 0x31	; 49
    3c52:	09 f0       	breq	.+2      	; 0x3c56 <Set_Time+0xe92>
    3c54:	69 c1       	rjmp	.+722    	; 0x3f28 <Set_Time+0x1164>
	{
		mode:
		LCD_movecursor(2, 1);
    3c56:	82 e0       	ldi	r24, 0x02	; 2
    3c58:	61 e0       	ldi	r22, 0x01	; 1
    3c5a:	0e 94 58 11 	call	0x22b0	; 0x22b0 <LCD_movecursor>
		LCD_vSend_string("1 : AM    2 : PM");
    3c5e:	83 ec       	ldi	r24, 0xC3	; 195
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    3c62:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
		do
		{
			day_time = keypad_u8check_press();
    3c66:	0e 94 ca 21 	call	0x4394	; 0x4394 <keypad_u8check_press>
    3c6a:	80 93 1d 01 	sts	0x011D, r24
		}while (day_time == NOTPRESSED);
    3c6e:	80 91 1d 01 	lds	r24, 0x011D
    3c72:	8f 3f       	cpi	r24, 0xFF	; 255
    3c74:	c1 f3       	breq	.-16     	; 0x3c66 <Set_Time+0xea2>
    3c76:	80 e0       	ldi	r24, 0x00	; 0
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	a6 e9       	ldi	r26, 0x96	; 150
    3c7c:	b3 e4       	ldi	r27, 0x43	; 67
    3c7e:	89 8f       	std	Y+25, r24	; 0x19
    3c80:	9a 8f       	std	Y+26, r25	; 0x1a
    3c82:	ab 8f       	std	Y+27, r26	; 0x1b
    3c84:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c86:	69 8d       	ldd	r22, Y+25	; 0x19
    3c88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c8e:	20 e0       	ldi	r18, 0x00	; 0
    3c90:	30 e0       	ldi	r19, 0x00	; 0
    3c92:	4a ef       	ldi	r20, 0xFA	; 250
    3c94:	54 e4       	ldi	r21, 0x44	; 68
    3c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c9a:	dc 01       	movw	r26, r24
    3c9c:	cb 01       	movw	r24, r22
    3c9e:	8d 8b       	std	Y+21, r24	; 0x15
    3ca0:	9e 8b       	std	Y+22, r25	; 0x16
    3ca2:	af 8b       	std	Y+23, r26	; 0x17
    3ca4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ca6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ca8:	7e 89       	ldd	r23, Y+22	; 0x16
    3caa:	8f 89       	ldd	r24, Y+23	; 0x17
    3cac:	98 8d       	ldd	r25, Y+24	; 0x18
    3cae:	20 e0       	ldi	r18, 0x00	; 0
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	40 e8       	ldi	r20, 0x80	; 128
    3cb4:	5f e3       	ldi	r21, 0x3F	; 63
    3cb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cba:	88 23       	and	r24, r24
    3cbc:	2c f4       	brge	.+10     	; 0x3cc8 <Set_Time+0xf04>
		__ticks = 1;
    3cbe:	81 e0       	ldi	r24, 0x01	; 1
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	9c 8b       	std	Y+20, r25	; 0x14
    3cc4:	8b 8b       	std	Y+19, r24	; 0x13
    3cc6:	3f c0       	rjmp	.+126    	; 0x3d46 <Set_Time+0xf82>
	else if (__tmp > 65535)
    3cc8:	6d 89       	ldd	r22, Y+21	; 0x15
    3cca:	7e 89       	ldd	r23, Y+22	; 0x16
    3ccc:	8f 89       	ldd	r24, Y+23	; 0x17
    3cce:	98 8d       	ldd	r25, Y+24	; 0x18
    3cd0:	20 e0       	ldi	r18, 0x00	; 0
    3cd2:	3f ef       	ldi	r19, 0xFF	; 255
    3cd4:	4f e7       	ldi	r20, 0x7F	; 127
    3cd6:	57 e4       	ldi	r21, 0x47	; 71
    3cd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cdc:	18 16       	cp	r1, r24
    3cde:	4c f5       	brge	.+82     	; 0x3d32 <Set_Time+0xf6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce0:	69 8d       	ldd	r22, Y+25	; 0x19
    3ce2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ce4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ce6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ce8:	20 e0       	ldi	r18, 0x00	; 0
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	40 e2       	ldi	r20, 0x20	; 32
    3cee:	51 e4       	ldi	r21, 0x41	; 65
    3cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	bc 01       	movw	r22, r24
    3cfa:	cd 01       	movw	r24, r26
    3cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d00:	dc 01       	movw	r26, r24
    3d02:	cb 01       	movw	r24, r22
    3d04:	9c 8b       	std	Y+20, r25	; 0x14
    3d06:	8b 8b       	std	Y+19, r24	; 0x13
    3d08:	0f c0       	rjmp	.+30     	; 0x3d28 <Set_Time+0xf64>
    3d0a:	88 ec       	ldi	r24, 0xC8	; 200
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	9a 8b       	std	Y+18, r25	; 0x12
    3d10:	89 8b       	std	Y+17, r24	; 0x11
    3d12:	89 89       	ldd	r24, Y+17	; 0x11
    3d14:	9a 89       	ldd	r25, Y+18	; 0x12
    3d16:	01 97       	sbiw	r24, 0x01	; 1
    3d18:	f1 f7       	brne	.-4      	; 0x3d16 <Set_Time+0xf52>
    3d1a:	9a 8b       	std	Y+18, r25	; 0x12
    3d1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d1e:	8b 89       	ldd	r24, Y+19	; 0x13
    3d20:	9c 89       	ldd	r25, Y+20	; 0x14
    3d22:	01 97       	sbiw	r24, 0x01	; 1
    3d24:	9c 8b       	std	Y+20, r25	; 0x14
    3d26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d28:	8b 89       	ldd	r24, Y+19	; 0x13
    3d2a:	9c 89       	ldd	r25, Y+20	; 0x14
    3d2c:	00 97       	sbiw	r24, 0x00	; 0
    3d2e:	69 f7       	brne	.-38     	; 0x3d0a <Set_Time+0xf46>
    3d30:	14 c0       	rjmp	.+40     	; 0x3d5a <Set_Time+0xf96>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d32:	6d 89       	ldd	r22, Y+21	; 0x15
    3d34:	7e 89       	ldd	r23, Y+22	; 0x16
    3d36:	8f 89       	ldd	r24, Y+23	; 0x17
    3d38:	98 8d       	ldd	r25, Y+24	; 0x18
    3d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d3e:	dc 01       	movw	r26, r24
    3d40:	cb 01       	movw	r24, r22
    3d42:	9c 8b       	std	Y+20, r25	; 0x14
    3d44:	8b 8b       	std	Y+19, r24	; 0x13
    3d46:	8b 89       	ldd	r24, Y+19	; 0x13
    3d48:	9c 89       	ldd	r25, Y+20	; 0x14
    3d4a:	98 8b       	std	Y+16, r25	; 0x10
    3d4c:	8f 87       	std	Y+15, r24	; 0x0f
    3d4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d50:	98 89       	ldd	r25, Y+16	; 0x10
    3d52:	01 97       	sbiw	r24, 0x01	; 1
    3d54:	f1 f7       	brne	.-4      	; 0x3d52 <Set_Time+0xf8e>
    3d56:	98 8b       	std	Y+16, r25	; 0x10
    3d58:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		if (day_time == '1')
    3d5a:	80 91 1d 01 	lds	r24, 0x011D
    3d5e:	81 33       	cpi	r24, 0x31	; 49
    3d60:	41 f4       	brne	.+16     	; 0x3d72 <Set_Time+0xfae>
		{
			SET_BIT(PORTA, 3);
    3d62:	ab e3       	ldi	r26, 0x3B	; 59
    3d64:	b0 e0       	ldi	r27, 0x00	; 0
    3d66:	eb e3       	ldi	r30, 0x3B	; 59
    3d68:	f0 e0       	ldi	r31, 0x00	; 0
    3d6a:	80 81       	ld	r24, Z
    3d6c:	88 60       	ori	r24, 0x08	; 8
    3d6e:	8c 93       	st	X, r24
    3d70:	db c0       	rjmp	.+438    	; 0x3f28 <Set_Time+0x1164>
		}
		else if (day_time == '2')
    3d72:	80 91 1d 01 	lds	r24, 0x011D
    3d76:	82 33       	cpi	r24, 0x32	; 50
    3d78:	41 f4       	brne	.+16     	; 0x3d8a <Set_Time+0xfc6>
		{
			CLR_BIT(PORTA, 3);
    3d7a:	ab e3       	ldi	r26, 0x3B	; 59
    3d7c:	b0 e0       	ldi	r27, 0x00	; 0
    3d7e:	eb e3       	ldi	r30, 0x3B	; 59
    3d80:	f0 e0       	ldi	r31, 0x00	; 0
    3d82:	80 81       	ld	r24, Z
    3d84:	87 7f       	andi	r24, 0xF7	; 247
    3d86:	8c 93       	st	X, r24
    3d88:	cf c0       	rjmp	.+414    	; 0x3f28 <Set_Time+0x1164>
		}
		else
		{
			LCD_clearscreen();
    3d8a:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <LCD_clearscreen>
			LCD_vSend_string("Wrong Choise");
    3d8e:	84 ed       	ldi	r24, 0xD4	; 212
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
    3d96:	80 e0       	ldi	r24, 0x00	; 0
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	aa ef       	ldi	r26, 0xFA	; 250
    3d9c:	b3 e4       	ldi	r27, 0x43	; 67
    3d9e:	8b 87       	std	Y+11, r24	; 0x0b
    3da0:	9c 87       	std	Y+12, r25	; 0x0c
    3da2:	ad 87       	std	Y+13, r26	; 0x0d
    3da4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3da6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3da8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3daa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dac:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dae:	20 e0       	ldi	r18, 0x00	; 0
    3db0:	30 e0       	ldi	r19, 0x00	; 0
    3db2:	4a ef       	ldi	r20, 0xFA	; 250
    3db4:	54 e4       	ldi	r21, 0x44	; 68
    3db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dba:	dc 01       	movw	r26, r24
    3dbc:	cb 01       	movw	r24, r22
    3dbe:	8f 83       	std	Y+7, r24	; 0x07
    3dc0:	98 87       	std	Y+8, r25	; 0x08
    3dc2:	a9 87       	std	Y+9, r26	; 0x09
    3dc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dc6:	6f 81       	ldd	r22, Y+7	; 0x07
    3dc8:	78 85       	ldd	r23, Y+8	; 0x08
    3dca:	89 85       	ldd	r24, Y+9	; 0x09
    3dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dce:	20 e0       	ldi	r18, 0x00	; 0
    3dd0:	30 e0       	ldi	r19, 0x00	; 0
    3dd2:	40 e8       	ldi	r20, 0x80	; 128
    3dd4:	5f e3       	ldi	r21, 0x3F	; 63
    3dd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3dda:	88 23       	and	r24, r24
    3ddc:	2c f4       	brge	.+10     	; 0x3de8 <Set_Time+0x1024>
		__ticks = 1;
    3dde:	81 e0       	ldi	r24, 0x01	; 1
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	9e 83       	std	Y+6, r25	; 0x06
    3de4:	8d 83       	std	Y+5, r24	; 0x05
    3de6:	3f c0       	rjmp	.+126    	; 0x3e66 <Set_Time+0x10a2>
	else if (__tmp > 65535)
    3de8:	6f 81       	ldd	r22, Y+7	; 0x07
    3dea:	78 85       	ldd	r23, Y+8	; 0x08
    3dec:	89 85       	ldd	r24, Y+9	; 0x09
    3dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    3df0:	20 e0       	ldi	r18, 0x00	; 0
    3df2:	3f ef       	ldi	r19, 0xFF	; 255
    3df4:	4f e7       	ldi	r20, 0x7F	; 127
    3df6:	57 e4       	ldi	r21, 0x47	; 71
    3df8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3dfc:	18 16       	cp	r1, r24
    3dfe:	4c f5       	brge	.+82     	; 0x3e52 <Set_Time+0x108e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e00:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e02:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e04:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e06:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	40 e2       	ldi	r20, 0x20	; 32
    3e0e:	51 e4       	ldi	r21, 0x41	; 65
    3e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e14:	dc 01       	movw	r26, r24
    3e16:	cb 01       	movw	r24, r22
    3e18:	bc 01       	movw	r22, r24
    3e1a:	cd 01       	movw	r24, r26
    3e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e20:	dc 01       	movw	r26, r24
    3e22:	cb 01       	movw	r24, r22
    3e24:	9e 83       	std	Y+6, r25	; 0x06
    3e26:	8d 83       	std	Y+5, r24	; 0x05
    3e28:	0f c0       	rjmp	.+30     	; 0x3e48 <Set_Time+0x1084>
    3e2a:	88 ec       	ldi	r24, 0xC8	; 200
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	9c 83       	std	Y+4, r25	; 0x04
    3e30:	8b 83       	std	Y+3, r24	; 0x03
    3e32:	8b 81       	ldd	r24, Y+3	; 0x03
    3e34:	9c 81       	ldd	r25, Y+4	; 0x04
    3e36:	01 97       	sbiw	r24, 0x01	; 1
    3e38:	f1 f7       	brne	.-4      	; 0x3e36 <Set_Time+0x1072>
    3e3a:	9c 83       	std	Y+4, r25	; 0x04
    3e3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e40:	9e 81       	ldd	r25, Y+6	; 0x06
    3e42:	01 97       	sbiw	r24, 0x01	; 1
    3e44:	9e 83       	std	Y+6, r25	; 0x06
    3e46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e48:	8d 81       	ldd	r24, Y+5	; 0x05
    3e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e4c:	00 97       	sbiw	r24, 0x00	; 0
    3e4e:	69 f7       	brne	.-38     	; 0x3e2a <Set_Time+0x1066>
    3e50:	14 c0       	rjmp	.+40     	; 0x3e7a <Set_Time+0x10b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e52:	6f 81       	ldd	r22, Y+7	; 0x07
    3e54:	78 85       	ldd	r23, Y+8	; 0x08
    3e56:	89 85       	ldd	r24, Y+9	; 0x09
    3e58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e5e:	dc 01       	movw	r26, r24
    3e60:	cb 01       	movw	r24, r22
    3e62:	9e 83       	std	Y+6, r25	; 0x06
    3e64:	8d 83       	std	Y+5, r24	; 0x05
    3e66:	8d 81       	ldd	r24, Y+5	; 0x05
    3e68:	9e 81       	ldd	r25, Y+6	; 0x06
    3e6a:	9a 83       	std	Y+2, r25	; 0x02
    3e6c:	89 83       	std	Y+1, r24	; 0x01
    3e6e:	89 81       	ldd	r24, Y+1	; 0x01
    3e70:	9a 81       	ldd	r25, Y+2	; 0x02
    3e72:	01 97       	sbiw	r24, 0x01	; 1
    3e74:	f1 f7       	brne	.-4      	; 0x3e72 <Set_Time+0x10ae>
    3e76:	9a 83       	std	Y+2, r25	; 0x02
    3e78:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			LCD_clearscreen();
    3e7a:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <LCD_clearscreen>
			LCD_movecursor(1, 1);
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	61 e0       	ldi	r22, 0x01	; 1
    3e82:	0e 94 58 11 	call	0x22b0	; 0x22b0 <LCD_movecursor>
			LCD_vSend_char(hours_counter/10 +48);
    3e86:	80 91 fa 00 	lds	r24, 0x00FA
    3e8a:	9a e0       	ldi	r25, 0x0A	; 10
    3e8c:	69 2f       	mov	r22, r25
    3e8e:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    3e92:	80 5d       	subi	r24, 0xD0	; 208
    3e94:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
			LCD_vSend_char(hours_counter%10 +48);
    3e98:	80 91 fa 00 	lds	r24, 0x00FA
    3e9c:	9a e0       	ldi	r25, 0x0A	; 10
    3e9e:	69 2f       	mov	r22, r25
    3ea0:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    3ea4:	89 2f       	mov	r24, r25
    3ea6:	80 5d       	subi	r24, 0xD0	; 208
    3ea8:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
			LCD_vSend_string(" : ");
    3eac:	89 eb       	ldi	r24, 0xB9	; 185
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
			LCD_vSend_char(minutes_counter/10 + 48);
    3eb4:	80 91 19 01 	lds	r24, 0x0119
    3eb8:	9a e0       	ldi	r25, 0x0A	; 10
    3eba:	69 2f       	mov	r22, r25
    3ebc:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    3ec0:	80 5d       	subi	r24, 0xD0	; 208
    3ec2:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
			LCD_vSend_char(minutes_counter%10 + 48);
    3ec6:	80 91 19 01 	lds	r24, 0x0119
    3eca:	9a e0       	ldi	r25, 0x0A	; 10
    3ecc:	69 2f       	mov	r22, r25
    3ece:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    3ed2:	89 2f       	mov	r24, r25
    3ed4:	80 5d       	subi	r24, 0xD0	; 208
    3ed6:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
			LCD_vSend_string(" : ");
    3eda:	89 eb       	ldi	r24, 0xB9	; 185
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
			LCD_vSend_char(seconds_counter/10 + 48);
    3ee2:	80 91 16 01 	lds	r24, 0x0116
    3ee6:	9a e0       	ldi	r25, 0x0A	; 10
    3ee8:	69 2f       	mov	r22, r25
    3eea:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    3eee:	80 5d       	subi	r24, 0xD0	; 208
    3ef0:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
			LCD_vSend_char(seconds_counter%10 + 48);
    3ef4:	80 91 16 01 	lds	r24, 0x0116
    3ef8:	9a e0       	ldi	r25, 0x0A	; 10
    3efa:	69 2f       	mov	r22, r25
    3efc:	0e 94 88 23 	call	0x4710	; 0x4710 <__udivmodqi4>
    3f00:	89 2f       	mov	r24, r25
    3f02:	80 5d       	subi	r24, 0xD0	; 208
    3f04:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_vSend_char>
			if (DIO_u8read('A', 3) == 1)
    3f08:	81 e4       	ldi	r24, 0x41	; 65
    3f0a:	63 e0       	ldi	r22, 0x03	; 3
    3f0c:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8read>
    3f10:	81 30       	cpi	r24, 0x01	; 1
    3f12:	29 f4       	brne	.+10     	; 0x3f1e <Set_Time+0x115a>
			{
				LCD_vSend_string(" AM");
    3f14:	81 ee       	ldi	r24, 0xE1	; 225
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
    3f1c:	9c ce       	rjmp	.-712    	; 0x3c56 <Set_Time+0xe92>
			}
			else
			{
				LCD_vSend_string("PM");
    3f1e:	80 ec       	ldi	r24, 0xC0	; 192
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
    3f26:	97 ce       	rjmp	.-722    	; 0x3c56 <Set_Time+0xe92>
	}
	else
	{

	}
	LCD_clearscreen();
    3f28:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <LCD_clearscreen>
	LCD_vSend_string("1 - set time");
    3f2c:	80 e6       	ldi	r24, 0x60	; 96
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
	LCD_movecursor(2,1);
    3f34:	82 e0       	ldi	r24, 0x02	; 2
    3f36:	61 e0       	ldi	r22, 0x01	; 1
    3f38:	0e 94 58 11 	call	0x22b0	; 0x22b0 <LCD_movecursor>
	LCD_vSend_string("2 - select mode");
    3f3c:	8d e6       	ldi	r24, 0x6D	; 109
    3f3e:	90 e0       	ldi	r25, 0x00	; 0
    3f40:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
}
    3f44:	c6 56       	subi	r28, 0x66	; 102
    3f46:	df 4f       	sbci	r29, 0xFF	; 255
    3f48:	0f b6       	in	r0, 0x3f	; 63
    3f4a:	f8 94       	cli
    3f4c:	de bf       	out	0x3e, r29	; 62
    3f4e:	0f be       	out	0x3f, r0	; 63
    3f50:	cd bf       	out	0x3d, r28	; 61
    3f52:	cf 91       	pop	r28
    3f54:	df 91       	pop	r29
    3f56:	1f 91       	pop	r17
    3f58:	0f 91       	pop	r16
    3f5a:	08 95       	ret

00003f5c <select_mode>:

//===================================================================/

void select_mode()
{
    3f5c:	df 93       	push	r29
    3f5e:	cf 93       	push	r28
    3f60:	cd b7       	in	r28, 0x3d	; 61
    3f62:	de b7       	in	r29, 0x3e	; 62
    3f64:	6c 97       	sbiw	r28, 0x1c	; 28
    3f66:	0f b6       	in	r0, 0x3f	; 63
    3f68:	f8 94       	cli
    3f6a:	de bf       	out	0x3e, r29	; 62
    3f6c:	0f be       	out	0x3f, r0	; 63
    3f6e:	cd bf       	out	0x3d, r28	; 61

	mode_choise:
	LCD_clearscreen();
    3f70:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <LCD_clearscreen>
	LCD_vSend_string("1 - 12-hour time");
    3f74:	8a e8       	ldi	r24, 0x8A	; 138
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
	LCD_movecursor(2, 1);
    3f7c:	82 e0       	ldi	r24, 0x02	; 2
    3f7e:	61 e0       	ldi	r22, 0x01	; 1
    3f80:	0e 94 58 11 	call	0x22b0	; 0x22b0 <LCD_movecursor>
	LCD_vSend_string("2 - 24-hour time");
    3f84:	8b e9       	ldi	r24, 0x9B	; 155
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>

	do
	{
		mode = keypad_u8check_press();
    3f8c:	0e 94 ca 21 	call	0x4394	; 0x4394 <keypad_u8check_press>
    3f90:	80 93 1c 01 	sts	0x011C, r24
	}while (mode == NOTPRESSED);
    3f94:	80 91 1c 01 	lds	r24, 0x011C
    3f98:	8f 3f       	cpi	r24, 0xFF	; 255
    3f9a:	c1 f3       	breq	.-16     	; 0x3f8c <select_mode+0x30>
    3f9c:	80 e0       	ldi	r24, 0x00	; 0
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	a6 e9       	ldi	r26, 0x96	; 150
    3fa2:	b3 e4       	ldi	r27, 0x43	; 67
    3fa4:	89 8f       	std	Y+25, r24	; 0x19
    3fa6:	9a 8f       	std	Y+26, r25	; 0x1a
    3fa8:	ab 8f       	std	Y+27, r26	; 0x1b
    3faa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fac:	69 8d       	ldd	r22, Y+25	; 0x19
    3fae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fb4:	20 e0       	ldi	r18, 0x00	; 0
    3fb6:	30 e0       	ldi	r19, 0x00	; 0
    3fb8:	4a ef       	ldi	r20, 0xFA	; 250
    3fba:	54 e4       	ldi	r21, 0x44	; 68
    3fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fc0:	dc 01       	movw	r26, r24
    3fc2:	cb 01       	movw	r24, r22
    3fc4:	8d 8b       	std	Y+21, r24	; 0x15
    3fc6:	9e 8b       	std	Y+22, r25	; 0x16
    3fc8:	af 8b       	std	Y+23, r26	; 0x17
    3fca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3fcc:	6d 89       	ldd	r22, Y+21	; 0x15
    3fce:	7e 89       	ldd	r23, Y+22	; 0x16
    3fd0:	8f 89       	ldd	r24, Y+23	; 0x17
    3fd2:	98 8d       	ldd	r25, Y+24	; 0x18
    3fd4:	20 e0       	ldi	r18, 0x00	; 0
    3fd6:	30 e0       	ldi	r19, 0x00	; 0
    3fd8:	40 e8       	ldi	r20, 0x80	; 128
    3fda:	5f e3       	ldi	r21, 0x3F	; 63
    3fdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fe0:	88 23       	and	r24, r24
    3fe2:	2c f4       	brge	.+10     	; 0x3fee <select_mode+0x92>
		__ticks = 1;
    3fe4:	81 e0       	ldi	r24, 0x01	; 1
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	9c 8b       	std	Y+20, r25	; 0x14
    3fea:	8b 8b       	std	Y+19, r24	; 0x13
    3fec:	3f c0       	rjmp	.+126    	; 0x406c <select_mode+0x110>
	else if (__tmp > 65535)
    3fee:	6d 89       	ldd	r22, Y+21	; 0x15
    3ff0:	7e 89       	ldd	r23, Y+22	; 0x16
    3ff2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ff4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ff6:	20 e0       	ldi	r18, 0x00	; 0
    3ff8:	3f ef       	ldi	r19, 0xFF	; 255
    3ffa:	4f e7       	ldi	r20, 0x7F	; 127
    3ffc:	57 e4       	ldi	r21, 0x47	; 71
    3ffe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4002:	18 16       	cp	r1, r24
    4004:	4c f5       	brge	.+82     	; 0x4058 <select_mode+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4006:	69 8d       	ldd	r22, Y+25	; 0x19
    4008:	7a 8d       	ldd	r23, Y+26	; 0x1a
    400a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    400c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    400e:	20 e0       	ldi	r18, 0x00	; 0
    4010:	30 e0       	ldi	r19, 0x00	; 0
    4012:	40 e2       	ldi	r20, 0x20	; 32
    4014:	51 e4       	ldi	r21, 0x41	; 65
    4016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    401a:	dc 01       	movw	r26, r24
    401c:	cb 01       	movw	r24, r22
    401e:	bc 01       	movw	r22, r24
    4020:	cd 01       	movw	r24, r26
    4022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4026:	dc 01       	movw	r26, r24
    4028:	cb 01       	movw	r24, r22
    402a:	9c 8b       	std	Y+20, r25	; 0x14
    402c:	8b 8b       	std	Y+19, r24	; 0x13
    402e:	0f c0       	rjmp	.+30     	; 0x404e <select_mode+0xf2>
    4030:	88 ec       	ldi	r24, 0xC8	; 200
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	9a 8b       	std	Y+18, r25	; 0x12
    4036:	89 8b       	std	Y+17, r24	; 0x11
    4038:	89 89       	ldd	r24, Y+17	; 0x11
    403a:	9a 89       	ldd	r25, Y+18	; 0x12
    403c:	01 97       	sbiw	r24, 0x01	; 1
    403e:	f1 f7       	brne	.-4      	; 0x403c <select_mode+0xe0>
    4040:	9a 8b       	std	Y+18, r25	; 0x12
    4042:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4044:	8b 89       	ldd	r24, Y+19	; 0x13
    4046:	9c 89       	ldd	r25, Y+20	; 0x14
    4048:	01 97       	sbiw	r24, 0x01	; 1
    404a:	9c 8b       	std	Y+20, r25	; 0x14
    404c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    404e:	8b 89       	ldd	r24, Y+19	; 0x13
    4050:	9c 89       	ldd	r25, Y+20	; 0x14
    4052:	00 97       	sbiw	r24, 0x00	; 0
    4054:	69 f7       	brne	.-38     	; 0x4030 <select_mode+0xd4>
    4056:	14 c0       	rjmp	.+40     	; 0x4080 <select_mode+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4058:	6d 89       	ldd	r22, Y+21	; 0x15
    405a:	7e 89       	ldd	r23, Y+22	; 0x16
    405c:	8f 89       	ldd	r24, Y+23	; 0x17
    405e:	98 8d       	ldd	r25, Y+24	; 0x18
    4060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4064:	dc 01       	movw	r26, r24
    4066:	cb 01       	movw	r24, r22
    4068:	9c 8b       	std	Y+20, r25	; 0x14
    406a:	8b 8b       	std	Y+19, r24	; 0x13
    406c:	8b 89       	ldd	r24, Y+19	; 0x13
    406e:	9c 89       	ldd	r25, Y+20	; 0x14
    4070:	98 8b       	std	Y+16, r25	; 0x10
    4072:	8f 87       	std	Y+15, r24	; 0x0f
    4074:	8f 85       	ldd	r24, Y+15	; 0x0f
    4076:	98 89       	ldd	r25, Y+16	; 0x10
    4078:	01 97       	sbiw	r24, 0x01	; 1
    407a:	f1 f7       	brne	.-4      	; 0x4078 <select_mode+0x11c>
    407c:	98 8b       	std	Y+16, r25	; 0x10
    407e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(300);

	if (mode == '1')
    4080:	80 91 1c 01 	lds	r24, 0x011C
    4084:	81 33       	cpi	r24, 0x31	; 49
    4086:	a9 f4       	brne	.+42     	; 0x40b2 <select_mode+0x156>
	{
		if (hours_counter > 12 )
    4088:	80 91 fa 00 	lds	r24, 0x00FA
    408c:	8d 30       	cpi	r24, 0x0D	; 13
    408e:	30 f0       	brcs	.+12     	; 0x409c <select_mode+0x140>
		{
			hours_counter -= 12;
    4090:	80 91 fa 00 	lds	r24, 0x00FA
    4094:	8c 50       	subi	r24, 0x0C	; 12
    4096:	80 93 fa 00 	sts	0x00FA, r24
    409a:	a2 c0       	rjmp	.+324    	; 0x41e0 <select_mode+0x284>
		}
		else if (hours_counter == 0)
    409c:	80 91 fa 00 	lds	r24, 0x00FA
    40a0:	88 23       	and	r24, r24
    40a2:	09 f0       	breq	.+2      	; 0x40a6 <select_mode+0x14a>
    40a4:	9d c0       	rjmp	.+314    	; 0x41e0 <select_mode+0x284>
		{
			hours_counter += 12;
    40a6:	80 91 fa 00 	lds	r24, 0x00FA
    40aa:	84 5f       	subi	r24, 0xF4	; 244
    40ac:	80 93 fa 00 	sts	0x00FA, r24
    40b0:	97 c0       	rjmp	.+302    	; 0x41e0 <select_mode+0x284>
		else
		{

		}
	}
	else if (mode == '2')
    40b2:	80 91 1c 01 	lds	r24, 0x011C
    40b6:	82 33       	cpi	r24, 0x32	; 50
    40b8:	d1 f4       	brne	.+52     	; 0x40ee <select_mode+0x192>
	{
		if (hours_counter == 12 && DIO_u8read('A', 3) == 1)
    40ba:	80 91 fa 00 	lds	r24, 0x00FA
    40be:	8c 30       	cpi	r24, 0x0C	; 12
    40c0:	49 f4       	brne	.+18     	; 0x40d4 <select_mode+0x178>
    40c2:	81 e4       	ldi	r24, 0x41	; 65
    40c4:	63 e0       	ldi	r22, 0x03	; 3
    40c6:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8read>
    40ca:	81 30       	cpi	r24, 0x01	; 1
    40cc:	19 f4       	brne	.+6      	; 0x40d4 <select_mode+0x178>
		{
			hours_counter = 0;
    40ce:	10 92 fa 00 	sts	0x00FA, r1
    40d2:	86 c0       	rjmp	.+268    	; 0x41e0 <select_mode+0x284>
		}
		else if (DIO_u8read('A', 3) == 0)
    40d4:	81 e4       	ldi	r24, 0x41	; 65
    40d6:	63 e0       	ldi	r22, 0x03	; 3
    40d8:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8read>
    40dc:	88 23       	and	r24, r24
    40de:	09 f0       	breq	.+2      	; 0x40e2 <select_mode+0x186>
    40e0:	7f c0       	rjmp	.+254    	; 0x41e0 <select_mode+0x284>
		{
			hours_counter += 12;
    40e2:	80 91 fa 00 	lds	r24, 0x00FA
    40e6:	84 5f       	subi	r24, 0xF4	; 244
    40e8:	80 93 fa 00 	sts	0x00FA, r24
    40ec:	79 c0       	rjmp	.+242    	; 0x41e0 <select_mode+0x284>

		}
	}
	else
	{
		LCD_clearscreen();
    40ee:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <LCD_clearscreen>
		LCD_vSend_string("Wrong choise");
    40f2:	85 ee       	ldi	r24, 0xE5	; 229
    40f4:	90 e0       	ldi	r25, 0x00	; 0
    40f6:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
    40fa:	80 e0       	ldi	r24, 0x00	; 0
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	aa ef       	ldi	r26, 0xFA	; 250
    4100:	b3 e4       	ldi	r27, 0x43	; 67
    4102:	8b 87       	std	Y+11, r24	; 0x0b
    4104:	9c 87       	std	Y+12, r25	; 0x0c
    4106:	ad 87       	std	Y+13, r26	; 0x0d
    4108:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    410a:	6b 85       	ldd	r22, Y+11	; 0x0b
    410c:	7c 85       	ldd	r23, Y+12	; 0x0c
    410e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4110:	9e 85       	ldd	r25, Y+14	; 0x0e
    4112:	20 e0       	ldi	r18, 0x00	; 0
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	4a ef       	ldi	r20, 0xFA	; 250
    4118:	54 e4       	ldi	r21, 0x44	; 68
    411a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    411e:	dc 01       	movw	r26, r24
    4120:	cb 01       	movw	r24, r22
    4122:	8f 83       	std	Y+7, r24	; 0x07
    4124:	98 87       	std	Y+8, r25	; 0x08
    4126:	a9 87       	std	Y+9, r26	; 0x09
    4128:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    412a:	6f 81       	ldd	r22, Y+7	; 0x07
    412c:	78 85       	ldd	r23, Y+8	; 0x08
    412e:	89 85       	ldd	r24, Y+9	; 0x09
    4130:	9a 85       	ldd	r25, Y+10	; 0x0a
    4132:	20 e0       	ldi	r18, 0x00	; 0
    4134:	30 e0       	ldi	r19, 0x00	; 0
    4136:	40 e8       	ldi	r20, 0x80	; 128
    4138:	5f e3       	ldi	r21, 0x3F	; 63
    413a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    413e:	88 23       	and	r24, r24
    4140:	2c f4       	brge	.+10     	; 0x414c <select_mode+0x1f0>
		__ticks = 1;
    4142:	81 e0       	ldi	r24, 0x01	; 1
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	9e 83       	std	Y+6, r25	; 0x06
    4148:	8d 83       	std	Y+5, r24	; 0x05
    414a:	3f c0       	rjmp	.+126    	; 0x41ca <select_mode+0x26e>
	else if (__tmp > 65535)
    414c:	6f 81       	ldd	r22, Y+7	; 0x07
    414e:	78 85       	ldd	r23, Y+8	; 0x08
    4150:	89 85       	ldd	r24, Y+9	; 0x09
    4152:	9a 85       	ldd	r25, Y+10	; 0x0a
    4154:	20 e0       	ldi	r18, 0x00	; 0
    4156:	3f ef       	ldi	r19, 0xFF	; 255
    4158:	4f e7       	ldi	r20, 0x7F	; 127
    415a:	57 e4       	ldi	r21, 0x47	; 71
    415c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4160:	18 16       	cp	r1, r24
    4162:	4c f5       	brge	.+82     	; 0x41b6 <select_mode+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4164:	6b 85       	ldd	r22, Y+11	; 0x0b
    4166:	7c 85       	ldd	r23, Y+12	; 0x0c
    4168:	8d 85       	ldd	r24, Y+13	; 0x0d
    416a:	9e 85       	ldd	r25, Y+14	; 0x0e
    416c:	20 e0       	ldi	r18, 0x00	; 0
    416e:	30 e0       	ldi	r19, 0x00	; 0
    4170:	40 e2       	ldi	r20, 0x20	; 32
    4172:	51 e4       	ldi	r21, 0x41	; 65
    4174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4178:	dc 01       	movw	r26, r24
    417a:	cb 01       	movw	r24, r22
    417c:	bc 01       	movw	r22, r24
    417e:	cd 01       	movw	r24, r26
    4180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4184:	dc 01       	movw	r26, r24
    4186:	cb 01       	movw	r24, r22
    4188:	9e 83       	std	Y+6, r25	; 0x06
    418a:	8d 83       	std	Y+5, r24	; 0x05
    418c:	0f c0       	rjmp	.+30     	; 0x41ac <select_mode+0x250>
    418e:	88 ec       	ldi	r24, 0xC8	; 200
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	9c 83       	std	Y+4, r25	; 0x04
    4194:	8b 83       	std	Y+3, r24	; 0x03
    4196:	8b 81       	ldd	r24, Y+3	; 0x03
    4198:	9c 81       	ldd	r25, Y+4	; 0x04
    419a:	01 97       	sbiw	r24, 0x01	; 1
    419c:	f1 f7       	brne	.-4      	; 0x419a <select_mode+0x23e>
    419e:	9c 83       	std	Y+4, r25	; 0x04
    41a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41a2:	8d 81       	ldd	r24, Y+5	; 0x05
    41a4:	9e 81       	ldd	r25, Y+6	; 0x06
    41a6:	01 97       	sbiw	r24, 0x01	; 1
    41a8:	9e 83       	std	Y+6, r25	; 0x06
    41aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ac:	8d 81       	ldd	r24, Y+5	; 0x05
    41ae:	9e 81       	ldd	r25, Y+6	; 0x06
    41b0:	00 97       	sbiw	r24, 0x00	; 0
    41b2:	69 f7       	brne	.-38     	; 0x418e <select_mode+0x232>
    41b4:	dd ce       	rjmp	.-582    	; 0x3f70 <select_mode+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41b6:	6f 81       	ldd	r22, Y+7	; 0x07
    41b8:	78 85       	ldd	r23, Y+8	; 0x08
    41ba:	89 85       	ldd	r24, Y+9	; 0x09
    41bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    41be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c2:	dc 01       	movw	r26, r24
    41c4:	cb 01       	movw	r24, r22
    41c6:	9e 83       	std	Y+6, r25	; 0x06
    41c8:	8d 83       	std	Y+5, r24	; 0x05
    41ca:	8d 81       	ldd	r24, Y+5	; 0x05
    41cc:	9e 81       	ldd	r25, Y+6	; 0x06
    41ce:	9a 83       	std	Y+2, r25	; 0x02
    41d0:	89 83       	std	Y+1, r24	; 0x01
    41d2:	89 81       	ldd	r24, Y+1	; 0x01
    41d4:	9a 81       	ldd	r25, Y+2	; 0x02
    41d6:	01 97       	sbiw	r24, 0x01	; 1
    41d8:	f1 f7       	brne	.-4      	; 0x41d6 <select_mode+0x27a>
    41da:	9a 83       	std	Y+2, r25	; 0x02
    41dc:	89 83       	std	Y+1, r24	; 0x01
    41de:	c8 ce       	rjmp	.-624    	; 0x3f70 <select_mode+0x14>
		_delay_ms(500);
		goto mode_choise;
	}
	LCD_clearscreen();
    41e0:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <LCD_clearscreen>
	LCD_vSend_string("1 - set time");
    41e4:	80 e6       	ldi	r24, 0x60	; 96
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
	LCD_movecursor(2,1);
    41ec:	82 e0       	ldi	r24, 0x02	; 2
    41ee:	61 e0       	ldi	r22, 0x01	; 1
    41f0:	0e 94 58 11 	call	0x22b0	; 0x22b0 <LCD_movecursor>
	LCD_vSend_string("2 - select mode");
    41f4:	8d e6       	ldi	r24, 0x6D	; 109
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	0e 94 b4 10 	call	0x2168	; 0x2168 <LCD_vSend_string>
}
    41fc:	6c 96       	adiw	r28, 0x1c	; 28
    41fe:	0f b6       	in	r0, 0x3f	; 63
    4200:	f8 94       	cli
    4202:	de bf       	out	0x3e, r29	; 62
    4204:	0f be       	out	0x3f, r0	; 63
    4206:	cd bf       	out	0x3d, r28	; 61
    4208:	cf 91       	pop	r28
    420a:	df 91       	pop	r29
    420c:	08 95       	ret

0000420e <__vector_5>:

//===================================================================/

ISR(TIMER2_OVF_vect)
{
    420e:	1f 92       	push	r1
    4210:	0f 92       	push	r0
    4212:	0f b6       	in	r0, 0x3f	; 63
    4214:	0f 92       	push	r0
    4216:	11 24       	eor	r1, r1
    4218:	8f 93       	push	r24
    421a:	9f 93       	push	r25
    421c:	af 93       	push	r26
    421e:	bf 93       	push	r27
    4220:	ef 93       	push	r30
    4222:	ff 93       	push	r31
    4224:	df 93       	push	r29
    4226:	cf 93       	push	r28
    4228:	cd b7       	in	r28, 0x3d	; 61
    422a:	de b7       	in	r29, 0x3e	; 62
	seconds_counter++;
    422c:	80 91 16 01 	lds	r24, 0x0116
    4230:	8f 5f       	subi	r24, 0xFF	; 255
    4232:	80 93 16 01 	sts	0x0116, r24
	flag = 0;
    4236:	10 92 17 01 	sts	0x0117, r1

	if (seconds_counter == 60)
    423a:	80 91 16 01 	lds	r24, 0x0116
    423e:	8c 33       	cpi	r24, 0x3C	; 60
    4240:	39 f4       	brne	.+14     	; 0x4250 <__vector_5+0x42>
	{
		seconds_counter = 0;
    4242:	10 92 16 01 	sts	0x0116, r1
		minutes_counter++;
    4246:	80 91 19 01 	lds	r24, 0x0119
    424a:	8f 5f       	subi	r24, 0xFF	; 255
    424c:	80 93 19 01 	sts	0x0119, r24
	}
	if (minutes_counter == 60)
    4250:	80 91 19 01 	lds	r24, 0x0119
    4254:	8c 33       	cpi	r24, 0x3C	; 60
    4256:	39 f4       	brne	.+14     	; 0x4266 <__vector_5+0x58>
	{
		minutes_counter=0;
    4258:	10 92 19 01 	sts	0x0119, r1
		hours_counter++;
    425c:	80 91 fa 00 	lds	r24, 0x00FA
    4260:	8f 5f       	subi	r24, 0xFF	; 255
    4262:	80 93 fa 00 	sts	0x00FA, r24
	}
	if (mode == '1')
    4266:	80 91 1c 01 	lds	r24, 0x011C
    426a:	81 33       	cpi	r24, 0x31	; 49
    426c:	11 f5       	brne	.+68     	; 0x42b2 <__vector_5+0xa4>
	{
		if (hours_counter== 13)
    426e:	80 91 fa 00 	lds	r24, 0x00FA
    4272:	8d 30       	cpi	r24, 0x0D	; 13
    4274:	19 f4       	brne	.+6      	; 0x427c <__vector_5+0x6e>
		{
			hours_counter= 1;
    4276:	81 e0       	ldi	r24, 0x01	; 1
    4278:	80 93 fa 00 	sts	0x00FA, r24
		}
		if (hours_counter == 12 && minutes_counter == 0 && seconds_counter == 0 && flag == 0)
    427c:	80 91 fa 00 	lds	r24, 0x00FA
    4280:	8c 30       	cpi	r24, 0x0C	; 12
    4282:	b9 f4       	brne	.+46     	; 0x42b2 <__vector_5+0xa4>
    4284:	80 91 19 01 	lds	r24, 0x0119
    4288:	88 23       	and	r24, r24
    428a:	99 f4       	brne	.+38     	; 0x42b2 <__vector_5+0xa4>
    428c:	80 91 16 01 	lds	r24, 0x0116
    4290:	88 23       	and	r24, r24
    4292:	79 f4       	brne	.+30     	; 0x42b2 <__vector_5+0xa4>
    4294:	80 91 17 01 	lds	r24, 0x0117
    4298:	88 23       	and	r24, r24
    429a:	59 f4       	brne	.+22     	; 0x42b2 <__vector_5+0xa4>
		{
			TOG_BIT(PORTA, 3);
    429c:	ab e3       	ldi	r26, 0x3B	; 59
    429e:	b0 e0       	ldi	r27, 0x00	; 0
    42a0:	eb e3       	ldi	r30, 0x3B	; 59
    42a2:	f0 e0       	ldi	r31, 0x00	; 0
    42a4:	90 81       	ld	r25, Z
    42a6:	88 e0       	ldi	r24, 0x08	; 8
    42a8:	89 27       	eor	r24, r25
    42aa:	8c 93       	st	X, r24
			flag = 1;
    42ac:	81 e0       	ldi	r24, 0x01	; 1
    42ae:	80 93 17 01 	sts	0x0117, r24
		}
	}
	if (mode == '2')
    42b2:	80 91 1c 01 	lds	r24, 0x011C
    42b6:	82 33       	cpi	r24, 0x32	; 50
    42b8:	e9 f4       	brne	.+58     	; 0x42f4 <__vector_5+0xe6>
	{
		if (hours_counter == 24)
    42ba:	80 91 fa 00 	lds	r24, 0x00FA
    42be:	88 31       	cpi	r24, 0x18	; 24
    42c0:	11 f4       	brne	.+4      	; 0x42c6 <__vector_5+0xb8>
		{
			hours_counter = 0;
    42c2:	10 92 fa 00 	sts	0x00FA, r1
		}
		else
		{

		}
		if (hours_counter < 12)
    42c6:	80 91 fa 00 	lds	r24, 0x00FA
    42ca:	8c 30       	cpi	r24, 0x0C	; 12
    42cc:	40 f4       	brcc	.+16     	; 0x42de <__vector_5+0xd0>
		{
			SET_BIT(PORTA, 3);
    42ce:	ab e3       	ldi	r26, 0x3B	; 59
    42d0:	b0 e0       	ldi	r27, 0x00	; 0
    42d2:	eb e3       	ldi	r30, 0x3B	; 59
    42d4:	f0 e0       	ldi	r31, 0x00	; 0
    42d6:	80 81       	ld	r24, Z
    42d8:	88 60       	ori	r24, 0x08	; 8
    42da:	8c 93       	st	X, r24
    42dc:	0b c0       	rjmp	.+22     	; 0x42f4 <__vector_5+0xe6>
		}
		else if (hours_counter >= 12)
    42de:	80 91 fa 00 	lds	r24, 0x00FA
    42e2:	8c 30       	cpi	r24, 0x0C	; 12
    42e4:	38 f0       	brcs	.+14     	; 0x42f4 <__vector_5+0xe6>
		{
			CLR_BIT(PORTA, 3);
    42e6:	ab e3       	ldi	r26, 0x3B	; 59
    42e8:	b0 e0       	ldi	r27, 0x00	; 0
    42ea:	eb e3       	ldi	r30, 0x3B	; 59
    42ec:	f0 e0       	ldi	r31, 0x00	; 0
    42ee:	80 81       	ld	r24, Z
    42f0:	87 7f       	andi	r24, 0xF7	; 247
    42f2:	8c 93       	st	X, r24
		else
		{

		}
	}
}
    42f4:	cf 91       	pop	r28
    42f6:	df 91       	pop	r29
    42f8:	ff 91       	pop	r31
    42fa:	ef 91       	pop	r30
    42fc:	bf 91       	pop	r27
    42fe:	af 91       	pop	r26
    4300:	9f 91       	pop	r25
    4302:	8f 91       	pop	r24
    4304:	0f 90       	pop	r0
    4306:	0f be       	out	0x3f, r0	; 63
    4308:	0f 90       	pop	r0
    430a:	1f 90       	pop	r1
    430c:	18 95       	reti

0000430e <keypad_vInit>:
#include "keypad_driver.h"
 void keypad_vInit()
 {
    430e:	df 93       	push	r29
    4310:	cf 93       	push	r28
    4312:	cd b7       	in	r28, 0x3d	; 61
    4314:	de b7       	in	r29, 0x3e	; 62
	 DIO_vsetPINDir('D',0,1);
    4316:	84 e4       	ldi	r24, 0x44	; 68
    4318:	60 e0       	ldi	r22, 0x00	; 0
    431a:	41 e0       	ldi	r20, 0x01	; 1
    431c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',1,1);
    4320:	84 e4       	ldi	r24, 0x44	; 68
    4322:	61 e0       	ldi	r22, 0x01	; 1
    4324:	41 e0       	ldi	r20, 0x01	; 1
    4326:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',2,1);
    432a:	84 e4       	ldi	r24, 0x44	; 68
    432c:	62 e0       	ldi	r22, 0x02	; 2
    432e:	41 e0       	ldi	r20, 0x01	; 1
    4330:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',3,1);
    4334:	84 e4       	ldi	r24, 0x44	; 68
    4336:	63 e0       	ldi	r22, 0x03	; 3
    4338:	41 e0       	ldi	r20, 0x01	; 1
    433a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',4,0);
    433e:	84 e4       	ldi	r24, 0x44	; 68
    4340:	64 e0       	ldi	r22, 0x04	; 4
    4342:	40 e0       	ldi	r20, 0x00	; 0
    4344:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',5,0);
    4348:	84 e4       	ldi	r24, 0x44	; 68
    434a:	65 e0       	ldi	r22, 0x05	; 5
    434c:	40 e0       	ldi	r20, 0x00	; 0
    434e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',6,0);
    4352:	84 e4       	ldi	r24, 0x44	; 68
    4354:	66 e0       	ldi	r22, 0x06	; 6
    4356:	40 e0       	ldi	r20, 0x00	; 0
    4358:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',7,0);
    435c:	84 e4       	ldi	r24, 0x44	; 68
    435e:	67 e0       	ldi	r22, 0x07	; 7
    4360:	40 e0       	ldi	r20, 0x00	; 0
    4362:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vsetPINDir>
	 DIO_vconnectpullup('D',4,1);
    4366:	84 e4       	ldi	r24, 0x44	; 68
    4368:	64 e0       	ldi	r22, 0x04	; 4
    436a:	41 e0       	ldi	r20, 0x01	; 1
    436c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',5,1);
    4370:	84 e4       	ldi	r24, 0x44	; 68
    4372:	65 e0       	ldi	r22, 0x05	; 5
    4374:	41 e0       	ldi	r20, 0x01	; 1
    4376:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',6,1);
    437a:	84 e4       	ldi	r24, 0x44	; 68
    437c:	66 e0       	ldi	r22, 0x06	; 6
    437e:	41 e0       	ldi	r20, 0x01	; 1
    4380:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',7,1);
    4384:	84 e4       	ldi	r24, 0x44	; 68
    4386:	67 e0       	ldi	r22, 0x07	; 7
    4388:	41 e0       	ldi	r20, 0x01	; 1
    438a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <DIO_vconnectpullup>
	  
 }
    438e:	cf 91       	pop	r28
    4390:	df 91       	pop	r29
    4392:	08 95       	ret

00004394 <keypad_u8check_press>:
 char keypad_u8check_press()
 {
    4394:	df 93       	push	r29
    4396:	cf 93       	push	r28
    4398:	cd b7       	in	r28, 0x3d	; 61
    439a:	de b7       	in	r29, 0x3e	; 62
    439c:	69 97       	sbiw	r28, 0x19	; 25
    439e:	0f b6       	in	r0, 0x3f	; 63
    43a0:	f8 94       	cli
    43a2:	de bf       	out	0x3e, r29	; 62
    43a4:	0f be       	out	0x3f, r0	; 63
    43a6:	cd bf       	out	0x3d, r28	; 61
	 char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
    43a8:	ce 01       	movw	r24, r28
    43aa:	05 96       	adiw	r24, 0x05	; 5
    43ac:	9e 8b       	std	Y+22, r25	; 0x16
    43ae:	8d 8b       	std	Y+21, r24	; 0x15
    43b0:	eb ef       	ldi	r30, 0xFB	; 251
    43b2:	f0 e0       	ldi	r31, 0x00	; 0
    43b4:	f8 8f       	std	Y+24, r31	; 0x18
    43b6:	ef 8b       	std	Y+23, r30	; 0x17
    43b8:	f0 e1       	ldi	r31, 0x10	; 16
    43ba:	f9 8f       	std	Y+25, r31	; 0x19
    43bc:	ef 89       	ldd	r30, Y+23	; 0x17
    43be:	f8 8d       	ldd	r31, Y+24	; 0x18
    43c0:	00 80       	ld	r0, Z
    43c2:	8f 89       	ldd	r24, Y+23	; 0x17
    43c4:	98 8d       	ldd	r25, Y+24	; 0x18
    43c6:	01 96       	adiw	r24, 0x01	; 1
    43c8:	98 8f       	std	Y+24, r25	; 0x18
    43ca:	8f 8b       	std	Y+23, r24	; 0x17
    43cc:	ed 89       	ldd	r30, Y+21	; 0x15
    43ce:	fe 89       	ldd	r31, Y+22	; 0x16
    43d0:	00 82       	st	Z, r0
    43d2:	8d 89       	ldd	r24, Y+21	; 0x15
    43d4:	9e 89       	ldd	r25, Y+22	; 0x16
    43d6:	01 96       	adiw	r24, 0x01	; 1
    43d8:	9e 8b       	std	Y+22, r25	; 0x16
    43da:	8d 8b       	std	Y+21, r24	; 0x15
    43dc:	99 8d       	ldd	r25, Y+25	; 0x19
    43de:	91 50       	subi	r25, 0x01	; 1
    43e0:	99 8f       	std	Y+25, r25	; 0x19
    43e2:	e9 8d       	ldd	r30, Y+25	; 0x19
    43e4:	ee 23       	and	r30, r30
    43e6:	51 f7       	brne	.-44     	; 0x43bc <keypad_u8check_press+0x28>
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
    43e8:	8f ef       	ldi	r24, 0xFF	; 255
    43ea:	89 83       	std	Y+1, r24	; 0x01
	 for(row=0;row<4;row++)
    43ec:	1c 82       	std	Y+4, r1	; 0x04
    43ee:	47 c0       	rjmp	.+142    	; 0x447e <keypad_u8check_press+0xea>
	 {
		DIO_write('D',0,1);
    43f0:	84 e4       	ldi	r24, 0x44	; 68
    43f2:	60 e0       	ldi	r22, 0x00	; 0
    43f4:	41 e0       	ldi	r20, 0x01	; 1
    43f6:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
		DIO_write('D',1,1);
    43fa:	84 e4       	ldi	r24, 0x44	; 68
    43fc:	61 e0       	ldi	r22, 0x01	; 1
    43fe:	41 e0       	ldi	r20, 0x01	; 1
    4400:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
		DIO_write('D',2,1);
    4404:	84 e4       	ldi	r24, 0x44	; 68
    4406:	62 e0       	ldi	r22, 0x02	; 2
    4408:	41 e0       	ldi	r20, 0x01	; 1
    440a:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
		DIO_write('D',3,1);
    440e:	84 e4       	ldi	r24, 0x44	; 68
    4410:	63 e0       	ldi	r22, 0x03	; 3
    4412:	41 e0       	ldi	r20, 0x01	; 1
    4414:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
		DIO_write('D',row,0);
    4418:	84 e4       	ldi	r24, 0x44	; 68
    441a:	6c 81       	ldd	r22, Y+4	; 0x04
    441c:	40 e0       	ldi	r20, 0x00	; 0
    441e:	0e 94 87 06 	call	0xd0e	; 0xd0e <DIO_write>
	
		for(coloumn=0;coloumn<4;coloumn++)
    4422:	1b 82       	std	Y+3, r1	; 0x03
    4424:	23 c0       	rjmp	.+70     	; 0x446c <keypad_u8check_press+0xd8>
		{
			x=DIO_u8read('D',(coloumn+4));
    4426:	8b 81       	ldd	r24, Y+3	; 0x03
    4428:	98 2f       	mov	r25, r24
    442a:	9c 5f       	subi	r25, 0xFC	; 252
    442c:	84 e4       	ldi	r24, 0x44	; 68
    442e:	69 2f       	mov	r22, r25
    4430:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8read>
    4434:	8a 83       	std	Y+2, r24	; 0x02
			if(x==0)
    4436:	8a 81       	ldd	r24, Y+2	; 0x02
    4438:	88 23       	and	r24, r24
    443a:	a9 f4       	brne	.+42     	; 0x4466 <keypad_u8check_press+0xd2>
			 {
				 returnval=arr[row][coloumn];
    443c:	8c 81       	ldd	r24, Y+4	; 0x04
    443e:	28 2f       	mov	r18, r24
    4440:	30 e0       	ldi	r19, 0x00	; 0
    4442:	8b 81       	ldd	r24, Y+3	; 0x03
    4444:	48 2f       	mov	r20, r24
    4446:	50 e0       	ldi	r21, 0x00	; 0
    4448:	22 0f       	add	r18, r18
    444a:	33 1f       	adc	r19, r19
    444c:	22 0f       	add	r18, r18
    444e:	33 1f       	adc	r19, r19
    4450:	ce 01       	movw	r24, r28
    4452:	01 96       	adiw	r24, 0x01	; 1
    4454:	82 0f       	add	r24, r18
    4456:	93 1f       	adc	r25, r19
    4458:	84 0f       	add	r24, r20
    445a:	95 1f       	adc	r25, r21
    445c:	fc 01       	movw	r30, r24
    445e:	34 96       	adiw	r30, 0x04	; 4
    4460:	80 81       	ld	r24, Z
    4462:	89 83       	std	Y+1, r24	; 0x01
    4464:	06 c0       	rjmp	.+12     	; 0x4472 <keypad_u8check_press+0xde>
		DIO_write('D',1,1);
		DIO_write('D',2,1);
		DIO_write('D',3,1);
		DIO_write('D',row,0);
	
		for(coloumn=0;coloumn<4;coloumn++)
    4466:	8b 81       	ldd	r24, Y+3	; 0x03
    4468:	8f 5f       	subi	r24, 0xFF	; 255
    446a:	8b 83       	std	Y+3, r24	; 0x03
    446c:	8b 81       	ldd	r24, Y+3	; 0x03
    446e:	84 30       	cpi	r24, 0x04	; 4
    4470:	d0 f2       	brcs	.-76     	; 0x4426 <keypad_u8check_press+0x92>
			 {
				 returnval=arr[row][coloumn];
				 break;
			 }  
		}	
		if(x==0)
    4472:	8a 81       	ldd	r24, Y+2	; 0x02
    4474:	88 23       	and	r24, r24
    4476:	39 f0       	breq	.+14     	; 0x4486 <keypad_u8check_press+0xf2>
 char keypad_u8check_press()
 {
	 char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
	 for(row=0;row<4;row++)
    4478:	8c 81       	ldd	r24, Y+4	; 0x04
    447a:	8f 5f       	subi	r24, 0xFF	; 255
    447c:	8c 83       	std	Y+4, r24	; 0x04
    447e:	8c 81       	ldd	r24, Y+4	; 0x04
    4480:	84 30       	cpi	r24, 0x04	; 4
    4482:	08 f4       	brcc	.+2      	; 0x4486 <keypad_u8check_press+0xf2>
    4484:	b5 cf       	rjmp	.-150    	; 0x43f0 <keypad_u8check_press+0x5c>
		if(x==0)
		{
			break;
		}
	}	 
	 return returnval ;	 
    4486:	89 81       	ldd	r24, Y+1	; 0x01
    4488:	69 96       	adiw	r28, 0x19	; 25
    448a:	0f b6       	in	r0, 0x3f	; 63
    448c:	f8 94       	cli
    448e:	de bf       	out	0x3e, r29	; 62
    4490:	0f be       	out	0x3f, r0	; 63
    4492:	cd bf       	out	0x3d, r28	; 61
    4494:	cf 91       	pop	r28
    4496:	df 91       	pop	r29
    4498:	08 95       	ret

0000449a <seven_seg_vinit>:

#include "DIO.h"
void seven_seg_vinit(unsigned char port_name)
{
    449a:	df 93       	push	r29
    449c:	cf 93       	push	r28
    449e:	0f 92       	push	r0
    44a0:	cd b7       	in	r28, 0x3d	; 61
    44a2:	de b7       	in	r29, 0x3e	; 62
    44a4:	89 83       	std	Y+1, r24	; 0x01
	DIO_set_port_direction(port_name,0xFF);
    44a6:	89 81       	ldd	r24, Y+1	; 0x01
    44a8:	6f ef       	ldi	r22, 0xFF	; 255
    44aa:	0e 94 95 08 	call	0x112a	; 0x112a <DIO_set_port_direction>
}
    44ae:	0f 90       	pop	r0
    44b0:	cf 91       	pop	r28
    44b2:	df 91       	pop	r29
    44b4:	08 95       	ret

000044b6 <seven_seg_write>:

void seven_seg_write(unsigned char portname,unsigned char number)
{
    44b6:	df 93       	push	r29
    44b8:	cf 93       	push	r28
    44ba:	cd b7       	in	r28, 0x3d	; 61
    44bc:	de b7       	in	r29, 0x3e	; 62
    44be:	61 97       	sbiw	r28, 0x11	; 17
    44c0:	0f b6       	in	r0, 0x3f	; 63
    44c2:	f8 94       	cli
    44c4:	de bf       	out	0x3e, r29	; 62
    44c6:	0f be       	out	0x3f, r0	; 63
    44c8:	cd bf       	out	0x3d, r28	; 61
    44ca:	8b 87       	std	Y+11, r24	; 0x0b
    44cc:	6c 87       	std	Y+12, r22	; 0x0c
unsigned char arr[]={ 0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f};
    44ce:	ce 01       	movw	r24, r28
    44d0:	01 96       	adiw	r24, 0x01	; 1
    44d2:	9e 87       	std	Y+14, r25	; 0x0e
    44d4:	8d 87       	std	Y+13, r24	; 0x0d
    44d6:	eb e0       	ldi	r30, 0x0B	; 11
    44d8:	f1 e0       	ldi	r31, 0x01	; 1
    44da:	f8 8b       	std	Y+16, r31	; 0x10
    44dc:	ef 87       	std	Y+15, r30	; 0x0f
    44de:	fa e0       	ldi	r31, 0x0A	; 10
    44e0:	f9 8b       	std	Y+17, r31	; 0x11
    44e2:	ef 85       	ldd	r30, Y+15	; 0x0f
    44e4:	f8 89       	ldd	r31, Y+16	; 0x10
    44e6:	00 80       	ld	r0, Z
    44e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    44ea:	98 89       	ldd	r25, Y+16	; 0x10
    44ec:	01 96       	adiw	r24, 0x01	; 1
    44ee:	98 8b       	std	Y+16, r25	; 0x10
    44f0:	8f 87       	std	Y+15, r24	; 0x0f
    44f2:	ed 85       	ldd	r30, Y+13	; 0x0d
    44f4:	fe 85       	ldd	r31, Y+14	; 0x0e
    44f6:	00 82       	st	Z, r0
    44f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    44fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    44fc:	01 96       	adiw	r24, 0x01	; 1
    44fe:	9e 87       	std	Y+14, r25	; 0x0e
    4500:	8d 87       	std	Y+13, r24	; 0x0d
    4502:	99 89       	ldd	r25, Y+17	; 0x11
    4504:	91 50       	subi	r25, 0x01	; 1
    4506:	99 8b       	std	Y+17, r25	; 0x11
    4508:	e9 89       	ldd	r30, Y+17	; 0x11
    450a:	ee 23       	and	r30, r30
    450c:	51 f7       	brne	.-44     	; 0x44e2 <seven_seg_write+0x2c>

DIO_write_port(portname,arr[number]);
    450e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4510:	28 2f       	mov	r18, r24
    4512:	30 e0       	ldi	r19, 0x00	; 0
    4514:	ce 01       	movw	r24, r28
    4516:	01 96       	adiw	r24, 0x01	; 1
    4518:	fc 01       	movw	r30, r24
    451a:	e2 0f       	add	r30, r18
    451c:	f3 1f       	adc	r31, r19
    451e:	90 81       	ld	r25, Z
    4520:	8b 85       	ldd	r24, Y+11	; 0x0b
    4522:	69 2f       	mov	r22, r25
    4524:	0e 94 d7 08 	call	0x11ae	; 0x11ae <DIO_write_port>
    4528:	61 96       	adiw	r28, 0x11	; 17
    452a:	0f b6       	in	r0, 0x3f	; 63
    452c:	f8 94       	cli
    452e:	de bf       	out	0x3e, r29	; 62
    4530:	0f be       	out	0x3f, r0	; 63
    4532:	cd bf       	out	0x3d, r28	; 61
    4534:	cf 91       	pop	r28
    4536:	df 91       	pop	r29
    4538:	08 95       	ret

0000453a <timer2_overflow_init_interrupt>:
#include "std_macros.h"
#include <avr/io.h>
#include <avr/interrupt.h>
void timer2_overflow_init_interrupt(void)
{
    453a:	df 93       	push	r29
    453c:	cf 93       	push	r28
    453e:	cd b7       	in	r28, 0x3d	; 61
    4540:	de b7       	in	r29, 0x3e	; 62
	/* select timer clock */
	SET_BIT(ASSR,AS2);
    4542:	a2 e4       	ldi	r26, 0x42	; 66
    4544:	b0 e0       	ldi	r27, 0x00	; 0
    4546:	e2 e4       	ldi	r30, 0x42	; 66
    4548:	f0 e0       	ldi	r31, 0x00	; 0
    454a:	80 81       	ld	r24, Z
    454c:	88 60       	ori	r24, 0x08	; 8
    454e:	8c 93       	st	X, r24
	/* select timer pre scalar */
	SET_BIT(TCCR2,CS20);
    4550:	a5 e4       	ldi	r26, 0x45	; 69
    4552:	b0 e0       	ldi	r27, 0x00	; 0
    4554:	e5 e4       	ldi	r30, 0x45	; 69
    4556:	f0 e0       	ldi	r31, 0x00	; 0
    4558:	80 81       	ld	r24, Z
    455a:	81 60       	ori	r24, 0x01	; 1
    455c:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS22);
    455e:	a5 e4       	ldi	r26, 0x45	; 69
    4560:	b0 e0       	ldi	r27, 0x00	; 0
    4562:	e5 e4       	ldi	r30, 0x45	; 69
    4564:	f0 e0       	ldi	r31, 0x00	; 0
    4566:	80 81       	ld	r24, Z
    4568:	84 60       	ori	r24, 0x04	; 4
    456a:	8c 93       	st	X, r24
	/* enable interrupt*/
	sei();
    456c:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);
    456e:	a9 e5       	ldi	r26, 0x59	; 89
    4570:	b0 e0       	ldi	r27, 0x00	; 0
    4572:	e9 e5       	ldi	r30, 0x59	; 89
    4574:	f0 e0       	ldi	r31, 0x00	; 0
    4576:	80 81       	ld	r24, Z
    4578:	80 64       	ori	r24, 0x40	; 64
    457a:	8c 93       	st	X, r24
}
    457c:	cf 91       	pop	r28
    457e:	df 91       	pop	r29
    4580:	08 95       	ret

00004582 <timer_CTC_init_interrupt>:
void timer_CTC_init_interrupt(void)
{
    4582:	df 93       	push	r29
    4584:	cf 93       	push	r28
    4586:	cd b7       	in	r28, 0x3d	; 61
    4588:	de b7       	in	r29, 0x3e	; 62
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
    458a:	a3 e5       	ldi	r26, 0x53	; 83
    458c:	b0 e0       	ldi	r27, 0x00	; 0
    458e:	e3 e5       	ldi	r30, 0x53	; 83
    4590:	f0 e0       	ldi	r31, 0x00	; 0
    4592:	80 81       	ld	r24, Z
    4594:	88 60       	ori	r24, 0x08	; 8
    4596:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=80;
    4598:	ec e5       	ldi	r30, 0x5C	; 92
    459a:	f0 e0       	ldi	r31, 0x00	; 0
    459c:	80 e5       	ldi	r24, 0x50	; 80
    459e:	80 83       	st	Z, r24
	/* select timer clock */	
	SET_BIT(TCCR0,CS00);
    45a0:	a3 e5       	ldi	r26, 0x53	; 83
    45a2:	b0 e0       	ldi	r27, 0x00	; 0
    45a4:	e3 e5       	ldi	r30, 0x53	; 83
    45a6:	f0 e0       	ldi	r31, 0x00	; 0
    45a8:	80 81       	ld	r24, Z
    45aa:	81 60       	ori	r24, 0x01	; 1
    45ac:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
    45ae:	a3 e5       	ldi	r26, 0x53	; 83
    45b0:	b0 e0       	ldi	r27, 0x00	; 0
    45b2:	e3 e5       	ldi	r30, 0x53	; 83
    45b4:	f0 e0       	ldi	r31, 0x00	; 0
    45b6:	80 81       	ld	r24, Z
    45b8:	84 60       	ori	r24, 0x04	; 4
    45ba:	8c 93       	st	X, r24
	/* enable interrupt*/
	sei();
    45bc:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
    45be:	a9 e5       	ldi	r26, 0x59	; 89
    45c0:	b0 e0       	ldi	r27, 0x00	; 0
    45c2:	e9 e5       	ldi	r30, 0x59	; 89
    45c4:	f0 e0       	ldi	r31, 0x00	; 0
    45c6:	80 81       	ld	r24, Z
    45c8:	82 60       	ori	r24, 0x02	; 2
    45ca:	8c 93       	st	X, r24
}
    45cc:	cf 91       	pop	r28
    45ce:	df 91       	pop	r29
    45d0:	08 95       	ret

000045d2 <timer_wave_nonPWM>:


void timer_wave_nonPWM(void)
{
    45d2:	df 93       	push	r29
    45d4:	cf 93       	push	r28
    45d6:	cd b7       	in	r28, 0x3d	; 61
    45d8:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
    45da:	a7 e3       	ldi	r26, 0x37	; 55
    45dc:	b0 e0       	ldi	r27, 0x00	; 0
    45de:	e7 e3       	ldi	r30, 0x37	; 55
    45e0:	f0 e0       	ldi	r31, 0x00	; 0
    45e2:	80 81       	ld	r24, Z
    45e4:	88 60       	ori	r24, 0x08	; 8
    45e6:	8c 93       	st	X, r24
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
    45e8:	a3 e5       	ldi	r26, 0x53	; 83
    45ea:	b0 e0       	ldi	r27, 0x00	; 0
    45ec:	e3 e5       	ldi	r30, 0x53	; 83
    45ee:	f0 e0       	ldi	r31, 0x00	; 0
    45f0:	80 81       	ld	r24, Z
    45f2:	88 60       	ori	r24, 0x08	; 8
    45f4:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=64;
    45f6:	ec e5       	ldi	r30, 0x5C	; 92
    45f8:	f0 e0       	ldi	r31, 0x00	; 0
    45fa:	80 e4       	ldi	r24, 0x40	; 64
    45fc:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
    45fe:	a3 e5       	ldi	r26, 0x53	; 83
    4600:	b0 e0       	ldi	r27, 0x00	; 0
    4602:	e3 e5       	ldi	r30, 0x53	; 83
    4604:	f0 e0       	ldi	r31, 0x00	; 0
    4606:	80 81       	ld	r24, Z
    4608:	81 60       	ori	r24, 0x01	; 1
    460a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
    460c:	a3 e5       	ldi	r26, 0x53	; 83
    460e:	b0 e0       	ldi	r27, 0x00	; 0
    4610:	e3 e5       	ldi	r30, 0x53	; 83
    4612:	f0 e0       	ldi	r31, 0x00	; 0
    4614:	80 81       	ld	r24, Z
    4616:	84 60       	ori	r24, 0x04	; 4
    4618:	8c 93       	st	X, r24
	/* toggle OC0 on compare match*/
	SET_BIT(TCCR0,COM00);
    461a:	a3 e5       	ldi	r26, 0x53	; 83
    461c:	b0 e0       	ldi	r27, 0x00	; 0
    461e:	e3 e5       	ldi	r30, 0x53	; 83
    4620:	f0 e0       	ldi	r31, 0x00	; 0
    4622:	80 81       	ld	r24, Z
    4624:	80 61       	ori	r24, 0x10	; 16
    4626:	8c 93       	st	X, r24
}
    4628:	cf 91       	pop	r28
    462a:	df 91       	pop	r29
    462c:	08 95       	ret

0000462e <timer_wave_fastPWM>:

void timer_wave_fastPWM(void)
{
    462e:	df 93       	push	r29
    4630:	cf 93       	push	r28
    4632:	cd b7       	in	r28, 0x3d	; 61
    4634:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
    4636:	a7 e3       	ldi	r26, 0x37	; 55
    4638:	b0 e0       	ldi	r27, 0x00	; 0
    463a:	e7 e3       	ldi	r30, 0x37	; 55
    463c:	f0 e0       	ldi	r31, 0x00	; 0
    463e:	80 81       	ld	r24, Z
    4640:	88 60       	ori	r24, 0x08	; 8
    4642:	8c 93       	st	X, r24
	/* select fast PWM mode*/
	SET_BIT(TCCR0,WGM00);
    4644:	a3 e5       	ldi	r26, 0x53	; 83
    4646:	b0 e0       	ldi	r27, 0x00	; 0
    4648:	e3 e5       	ldi	r30, 0x53	; 83
    464a:	f0 e0       	ldi	r31, 0x00	; 0
    464c:	80 81       	ld	r24, Z
    464e:	80 64       	ori	r24, 0x40	; 64
    4650:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    4652:	a3 e5       	ldi	r26, 0x53	; 83
    4654:	b0 e0       	ldi	r27, 0x00	; 0
    4656:	e3 e5       	ldi	r30, 0x53	; 83
    4658:	f0 e0       	ldi	r31, 0x00	; 0
    465a:	80 81       	ld	r24, Z
    465c:	88 60       	ori	r24, 0x08	; 8
    465e:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=64;
    4660:	ec e5       	ldi	r30, 0x5C	; 92
    4662:	f0 e0       	ldi	r31, 0x00	; 0
    4664:	80 e4       	ldi	r24, 0x40	; 64
    4666:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
    4668:	a3 e5       	ldi	r26, 0x53	; 83
    466a:	b0 e0       	ldi	r27, 0x00	; 0
    466c:	e3 e5       	ldi	r30, 0x53	; 83
    466e:	f0 e0       	ldi	r31, 0x00	; 0
    4670:	80 81       	ld	r24, Z
    4672:	81 60       	ori	r24, 0x01	; 1
    4674:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
    4676:	a3 e5       	ldi	r26, 0x53	; 83
    4678:	b0 e0       	ldi	r27, 0x00	; 0
    467a:	e3 e5       	ldi	r30, 0x53	; 83
    467c:	f0 e0       	ldi	r31, 0x00	; 0
    467e:	80 81       	ld	r24, Z
    4680:	84 60       	ori	r24, 0x04	; 4
    4682:	8c 93       	st	X, r24
	/* Set OC0 on compare match, clear OC0 at BOTTOM,(inverting mode)*/
	SET_BIT(TCCR0,COM00);
    4684:	a3 e5       	ldi	r26, 0x53	; 83
    4686:	b0 e0       	ldi	r27, 0x00	; 0
    4688:	e3 e5       	ldi	r30, 0x53	; 83
    468a:	f0 e0       	ldi	r31, 0x00	; 0
    468c:	80 81       	ld	r24, Z
    468e:	80 61       	ori	r24, 0x10	; 16
    4690:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
    4692:	a3 e5       	ldi	r26, 0x53	; 83
    4694:	b0 e0       	ldi	r27, 0x00	; 0
    4696:	e3 e5       	ldi	r30, 0x53	; 83
    4698:	f0 e0       	ldi	r31, 0x00	; 0
    469a:	80 81       	ld	r24, Z
    469c:	80 62       	ori	r24, 0x20	; 32
    469e:	8c 93       	st	X, r24
}
    46a0:	cf 91       	pop	r28
    46a2:	df 91       	pop	r29
    46a4:	08 95       	ret

000046a6 <timer_wave_phasecorrectPWM>:


void timer_wave_phasecorrectPWM(void)
{
    46a6:	df 93       	push	r29
    46a8:	cf 93       	push	r28
    46aa:	cd b7       	in	r28, 0x3d	; 61
    46ac:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
    46ae:	a7 e3       	ldi	r26, 0x37	; 55
    46b0:	b0 e0       	ldi	r27, 0x00	; 0
    46b2:	e7 e3       	ldi	r30, 0x37	; 55
    46b4:	f0 e0       	ldi	r31, 0x00	; 0
    46b6:	80 81       	ld	r24, Z
    46b8:	88 60       	ori	r24, 0x08	; 8
    46ba:	8c 93       	st	X, r24
	/* select phase correct PWM mode*/
	SET_BIT(TCCR0,WGM00);
    46bc:	a3 e5       	ldi	r26, 0x53	; 83
    46be:	b0 e0       	ldi	r27, 0x00	; 0
    46c0:	e3 e5       	ldi	r30, 0x53	; 83
    46c2:	f0 e0       	ldi	r31, 0x00	; 0
    46c4:	80 81       	ld	r24, Z
    46c6:	80 64       	ori	r24, 0x40	; 64
    46c8:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=64;
    46ca:	ec e5       	ldi	r30, 0x5C	; 92
    46cc:	f0 e0       	ldi	r31, 0x00	; 0
    46ce:	80 e4       	ldi	r24, 0x40	; 64
    46d0:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
    46d2:	a3 e5       	ldi	r26, 0x53	; 83
    46d4:	b0 e0       	ldi	r27, 0x00	; 0
    46d6:	e3 e5       	ldi	r30, 0x53	; 83
    46d8:	f0 e0       	ldi	r31, 0x00	; 0
    46da:	80 81       	ld	r24, Z
    46dc:	81 60       	ori	r24, 0x01	; 1
    46de:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
    46e0:	a3 e5       	ldi	r26, 0x53	; 83
    46e2:	b0 e0       	ldi	r27, 0x00	; 0
    46e4:	e3 e5       	ldi	r30, 0x53	; 83
    46e6:	f0 e0       	ldi	r31, 0x00	; 0
    46e8:	80 81       	ld	r24, Z
    46ea:	84 60       	ori	r24, 0x04	; 4
    46ec:	8c 93       	st	X, r24
	/* Set OC0 on compare match when up-counting. Clear OC0 on compare match when down counting.*/
	SET_BIT(TCCR0,COM00);
    46ee:	a3 e5       	ldi	r26, 0x53	; 83
    46f0:	b0 e0       	ldi	r27, 0x00	; 0
    46f2:	e3 e5       	ldi	r30, 0x53	; 83
    46f4:	f0 e0       	ldi	r31, 0x00	; 0
    46f6:	80 81       	ld	r24, Z
    46f8:	80 61       	ori	r24, 0x10	; 16
    46fa:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
    46fc:	a3 e5       	ldi	r26, 0x53	; 83
    46fe:	b0 e0       	ldi	r27, 0x00	; 0
    4700:	e3 e5       	ldi	r30, 0x53	; 83
    4702:	f0 e0       	ldi	r31, 0x00	; 0
    4704:	80 81       	ld	r24, Z
    4706:	80 62       	ori	r24, 0x20	; 32
    4708:	8c 93       	st	X, r24
}
    470a:	cf 91       	pop	r28
    470c:	df 91       	pop	r29
    470e:	08 95       	ret

00004710 <__udivmodqi4>:
    4710:	99 1b       	sub	r25, r25
    4712:	79 e0       	ldi	r23, 0x09	; 9
    4714:	04 c0       	rjmp	.+8      	; 0x471e <__udivmodqi4_ep>

00004716 <__udivmodqi4_loop>:
    4716:	99 1f       	adc	r25, r25
    4718:	96 17       	cp	r25, r22
    471a:	08 f0       	brcs	.+2      	; 0x471e <__udivmodqi4_ep>
    471c:	96 1b       	sub	r25, r22

0000471e <__udivmodqi4_ep>:
    471e:	88 1f       	adc	r24, r24
    4720:	7a 95       	dec	r23
    4722:	c9 f7       	brne	.-14     	; 0x4716 <__udivmodqi4_loop>
    4724:	80 95       	com	r24
    4726:	08 95       	ret

00004728 <__prologue_saves__>:
    4728:	2f 92       	push	r2
    472a:	3f 92       	push	r3
    472c:	4f 92       	push	r4
    472e:	5f 92       	push	r5
    4730:	6f 92       	push	r6
    4732:	7f 92       	push	r7
    4734:	8f 92       	push	r8
    4736:	9f 92       	push	r9
    4738:	af 92       	push	r10
    473a:	bf 92       	push	r11
    473c:	cf 92       	push	r12
    473e:	df 92       	push	r13
    4740:	ef 92       	push	r14
    4742:	ff 92       	push	r15
    4744:	0f 93       	push	r16
    4746:	1f 93       	push	r17
    4748:	cf 93       	push	r28
    474a:	df 93       	push	r29
    474c:	cd b7       	in	r28, 0x3d	; 61
    474e:	de b7       	in	r29, 0x3e	; 62
    4750:	ca 1b       	sub	r28, r26
    4752:	db 0b       	sbc	r29, r27
    4754:	0f b6       	in	r0, 0x3f	; 63
    4756:	f8 94       	cli
    4758:	de bf       	out	0x3e, r29	; 62
    475a:	0f be       	out	0x3f, r0	; 63
    475c:	cd bf       	out	0x3d, r28	; 61
    475e:	09 94       	ijmp

00004760 <__epilogue_restores__>:
    4760:	2a 88       	ldd	r2, Y+18	; 0x12
    4762:	39 88       	ldd	r3, Y+17	; 0x11
    4764:	48 88       	ldd	r4, Y+16	; 0x10
    4766:	5f 84       	ldd	r5, Y+15	; 0x0f
    4768:	6e 84       	ldd	r6, Y+14	; 0x0e
    476a:	7d 84       	ldd	r7, Y+13	; 0x0d
    476c:	8c 84       	ldd	r8, Y+12	; 0x0c
    476e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4770:	aa 84       	ldd	r10, Y+10	; 0x0a
    4772:	b9 84       	ldd	r11, Y+9	; 0x09
    4774:	c8 84       	ldd	r12, Y+8	; 0x08
    4776:	df 80       	ldd	r13, Y+7	; 0x07
    4778:	ee 80       	ldd	r14, Y+6	; 0x06
    477a:	fd 80       	ldd	r15, Y+5	; 0x05
    477c:	0c 81       	ldd	r16, Y+4	; 0x04
    477e:	1b 81       	ldd	r17, Y+3	; 0x03
    4780:	aa 81       	ldd	r26, Y+2	; 0x02
    4782:	b9 81       	ldd	r27, Y+1	; 0x01
    4784:	ce 0f       	add	r28, r30
    4786:	d1 1d       	adc	r29, r1
    4788:	0f b6       	in	r0, 0x3f	; 63
    478a:	f8 94       	cli
    478c:	de bf       	out	0x3e, r29	; 62
    478e:	0f be       	out	0x3f, r0	; 63
    4790:	cd bf       	out	0x3d, r28	; 61
    4792:	ed 01       	movw	r28, r26
    4794:	08 95       	ret

00004796 <_exit>:
    4796:	f8 94       	cli

00004798 <__stop_program>:
    4798:	ff cf       	rjmp	.-2      	; 0x4798 <__stop_program>
