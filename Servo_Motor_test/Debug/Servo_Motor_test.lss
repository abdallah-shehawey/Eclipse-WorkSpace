
Servo_Motor_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002d5e  00002df2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800168  00800168  00002efa  2**0
                  ALLOC
  3 .stab         00002280  00000000  00000000  00002efc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e5b  00000000  00000000  0000517c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00005fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  00006157  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  00006328  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  00008338  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  00009499  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000a49c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000a63c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000a8fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__vector_4>
      14:	0c 94 36 12 	jmp	0x246c	; 0x246c <__vector_5>
      18:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__vector_6>
      1c:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <__vector_7>
      20:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__vector_8>
      24:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__vector_9>
      28:	0c 94 37 11 	jmp	0x226e	; 0x226e <__vector_10>
      2c:	0c 94 04 11 	jmp	0x2208	; 0x2208 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a8 37       	cpi	r26, 0x78	; 120
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee e5       	ldi	r30, 0x5E	; 94
      78:	fd e2       	ldi	r31, 0x2D	; 45
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 9c 12 	call	0x2538	; 0x2538 <main>
      8a:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <DIO_enumSetPinDir>:
      =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */

DIO_errorStatus DIO_enumSetPinDir(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Direction)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	28 97       	sbiw	r28, 0x08	; 8
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	8a 83       	std	Y+2, r24	; 0x02
     cb6:	6b 83       	std	Y+3, r22	; 0x03
     cb8:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	84 30       	cpi	r24, 0x04	; 4
     cc2:	08 f0       	brcs	.+2      	; 0xcc6 <DIO_enumSetPinDir+0x26>
     cc4:	f1 c0       	rjmp	.+482    	; 0xea8 <DIO_enumSetPinDir+0x208>
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	88 30       	cpi	r24, 0x08	; 8
     cca:	08 f0       	brcs	.+2      	; 0xcce <DIO_enumSetPinDir+0x2e>
     ccc:	ed c0       	rjmp	.+474    	; 0xea8 <DIO_enumSetPinDir+0x208>
  {
    if (Copy_u8Direction == DIO_PIN_OUTPUT)
     cce:	8c 81       	ldd	r24, Y+4	; 0x04
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <DIO_enumSetPinDir+0x36>
     cd4:	6f c0       	rjmp	.+222    	; 0xdb4 <DIO_enumSetPinDir+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	38 87       	std	Y+8, r19	; 0x08
     cde:	2f 83       	std	Y+7, r18	; 0x07
     ce0:	8f 81       	ldd	r24, Y+7	; 0x07
     ce2:	98 85       	ldd	r25, Y+8	; 0x08
     ce4:	81 30       	cpi	r24, 0x01	; 1
     ce6:	91 05       	cpc	r25, r1
     ce8:	49 f1       	breq	.+82     	; 0xd3c <DIO_enumSetPinDir+0x9c>
     cea:	2f 81       	ldd	r18, Y+7	; 0x07
     cec:	38 85       	ldd	r19, Y+8	; 0x08
     cee:	22 30       	cpi	r18, 0x02	; 2
     cf0:	31 05       	cpc	r19, r1
     cf2:	2c f4       	brge	.+10     	; 0xcfe <DIO_enumSetPinDir+0x5e>
     cf4:	8f 81       	ldd	r24, Y+7	; 0x07
     cf6:	98 85       	ldd	r25, Y+8	; 0x08
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	61 f0       	breq	.+24     	; 0xd14 <DIO_enumSetPinDir+0x74>
     cfc:	d6 c0       	rjmp	.+428    	; 0xeaa <DIO_enumSetPinDir+0x20a>
     cfe:	2f 81       	ldd	r18, Y+7	; 0x07
     d00:	38 85       	ldd	r19, Y+8	; 0x08
     d02:	22 30       	cpi	r18, 0x02	; 2
     d04:	31 05       	cpc	r19, r1
     d06:	71 f1       	breq	.+92     	; 0xd64 <DIO_enumSetPinDir+0xc4>
     d08:	8f 81       	ldd	r24, Y+7	; 0x07
     d0a:	98 85       	ldd	r25, Y+8	; 0x08
     d0c:	83 30       	cpi	r24, 0x03	; 3
     d0e:	91 05       	cpc	r25, r1
     d10:	e9 f1       	breq	.+122    	; 0xd8c <DIO_enumSetPinDir+0xec>
     d12:	cb c0       	rjmp	.+406    	; 0xeaa <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(DDRA, Copy_u8PIN);
     d14:	aa e3       	ldi	r26, 0x3A	; 58
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	ea e3       	ldi	r30, 0x3A	; 58
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	48 2f       	mov	r20, r24
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	02 2e       	mov	r0, r18
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <DIO_enumSetPinDir+0x92>
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	0a 94       	dec	r0
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <DIO_enumSetPinDir+0x8e>
     d36:	84 2b       	or	r24, r20
     d38:	8c 93       	st	X, r24
     d3a:	b7 c0       	rjmp	.+366    	; 0xeaa <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(DDRB, Copy_u8PIN);
     d3c:	a7 e3       	ldi	r26, 0x37	; 55
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e7 e3       	ldi	r30, 0x37	; 55
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	48 2f       	mov	r20, r24
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	02 2e       	mov	r0, r18
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <DIO_enumSetPinDir+0xba>
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	0a 94       	dec	r0
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <DIO_enumSetPinDir+0xb6>
     d5e:	84 2b       	or	r24, r20
     d60:	8c 93       	st	X, r24
     d62:	a3 c0       	rjmp	.+326    	; 0xeaa <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(DDRC, Copy_u8PIN);
     d64:	a4 e3       	ldi	r26, 0x34	; 52
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e4 e3       	ldi	r30, 0x34	; 52
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 2e       	mov	r0, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_enumSetPinDir+0xe2>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_enumSetPinDir+0xde>
     d86:	84 2b       	or	r24, r20
     d88:	8c 93       	st	X, r24
     d8a:	8f c0       	rjmp	.+286    	; 0xeaa <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(DDRD, Copy_u8PIN);
     d8c:	a1 e3       	ldi	r26, 0x31	; 49
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e1 e3       	ldi	r30, 0x31	; 49
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	48 2f       	mov	r20, r24
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	02 2e       	mov	r0, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <DIO_enumSetPinDir+0x10a>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	0a 94       	dec	r0
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <DIO_enumSetPinDir+0x106>
     dae:	84 2b       	or	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	7b c0       	rjmp	.+246    	; 0xeaa <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else if (Copy_u8Direction == DIO_PIN_INPUT)
     db4:	8c 81       	ldd	r24, Y+4	; 0x04
     db6:	88 23       	and	r24, r24
     db8:	09 f0       	breq	.+2      	; 0xdbc <DIO_enumSetPinDir+0x11c>
     dba:	74 c0       	rjmp	.+232    	; 0xea4 <DIO_enumSetPinDir+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	3e 83       	std	Y+6, r19	; 0x06
     dc4:	2d 83       	std	Y+5, r18	; 0x05
     dc6:	8d 81       	ldd	r24, Y+5	; 0x05
     dc8:	9e 81       	ldd	r25, Y+6	; 0x06
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	91 05       	cpc	r25, r1
     dce:	59 f1       	breq	.+86     	; 0xe26 <DIO_enumSetPinDir+0x186>
     dd0:	2d 81       	ldd	r18, Y+5	; 0x05
     dd2:	3e 81       	ldd	r19, Y+6	; 0x06
     dd4:	22 30       	cpi	r18, 0x02	; 2
     dd6:	31 05       	cpc	r19, r1
     dd8:	2c f4       	brge	.+10     	; 0xde4 <DIO_enumSetPinDir+0x144>
     dda:	8d 81       	ldd	r24, Y+5	; 0x05
     ddc:	9e 81       	ldd	r25, Y+6	; 0x06
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	69 f0       	breq	.+26     	; 0xdfc <DIO_enumSetPinDir+0x15c>
     de2:	63 c0       	rjmp	.+198    	; 0xeaa <DIO_enumSetPinDir+0x20a>
     de4:	2d 81       	ldd	r18, Y+5	; 0x05
     de6:	3e 81       	ldd	r19, Y+6	; 0x06
     de8:	22 30       	cpi	r18, 0x02	; 2
     dea:	31 05       	cpc	r19, r1
     dec:	89 f1       	breq	.+98     	; 0xe50 <DIO_enumSetPinDir+0x1b0>
     dee:	8d 81       	ldd	r24, Y+5	; 0x05
     df0:	9e 81       	ldd	r25, Y+6	; 0x06
     df2:	83 30       	cpi	r24, 0x03	; 3
     df4:	91 05       	cpc	r25, r1
     df6:	09 f4       	brne	.+2      	; 0xdfa <DIO_enumSetPinDir+0x15a>
     df8:	40 c0       	rjmp	.+128    	; 0xe7a <DIO_enumSetPinDir+0x1da>
     dfa:	57 c0       	rjmp	.+174    	; 0xeaa <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(DDRA, Copy_u8PIN);
     dfc:	aa e3       	ldi	r26, 0x3A	; 58
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	ea e3       	ldi	r30, 0x3A	; 58
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	48 2f       	mov	r20, r24
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 2e       	mov	r0, r18
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <DIO_enumSetPinDir+0x17a>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <DIO_enumSetPinDir+0x176>
     e1e:	80 95       	com	r24
     e20:	84 23       	and	r24, r20
     e22:	8c 93       	st	X, r24
     e24:	42 c0       	rjmp	.+132    	; 0xeaa <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(DDRB, Copy_u8PIN);
     e26:	a7 e3       	ldi	r26, 0x37	; 55
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e7 e3       	ldi	r30, 0x37	; 55
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 2e       	mov	r0, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_enumSetPinDir+0x1a4>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_enumSetPinDir+0x1a0>
     e48:	80 95       	com	r24
     e4a:	84 23       	and	r24, r20
     e4c:	8c 93       	st	X, r24
     e4e:	2d c0       	rjmp	.+90     	; 0xeaa <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(DDRC, Copy_u8PIN);
     e50:	a4 e3       	ldi	r26, 0x34	; 52
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e4 e3       	ldi	r30, 0x34	; 52
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <DIO_enumSetPinDir+0x1ce>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <DIO_enumSetPinDir+0x1ca>
     e72:	80 95       	com	r24
     e74:	84 23       	and	r24, r20
     e76:	8c 93       	st	X, r24
     e78:	18 c0       	rjmp	.+48     	; 0xeaa <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(DDRD, Copy_u8PIN);
     e7a:	a1 e3       	ldi	r26, 0x31	; 49
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e1 e3       	ldi	r30, 0x31	; 49
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	48 2f       	mov	r20, r24
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 2e       	mov	r0, r18
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <DIO_enumSetPinDir+0x1f8>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <DIO_enumSetPinDir+0x1f4>
     e9c:	80 95       	com	r24
     e9e:	84 23       	and	r24, r20
     ea0:	8c 93       	st	X, r24
     ea2:	03 c0       	rjmp	.+6      	; 0xeaa <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
     ea4:	19 82       	std	Y+1, r1	; 0x01
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <DIO_enumSetPinDir+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
     ea8:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
}
     eac:	28 96       	adiw	r28, 0x08	; 8
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <DIO_enumWritePinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Value)
{
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	28 97       	sbiw	r28, 0x08	; 8
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	cd bf       	out	0x3d, r28	; 61
     ed2:	8a 83       	std	Y+2, r24	; 0x02
     ed4:	6b 83       	std	Y+3, r22	; 0x03
     ed6:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	84 30       	cpi	r24, 0x04	; 4
     ee0:	08 f0       	brcs	.+2      	; 0xee4 <DIO_enumWritePinVal+0x26>
     ee2:	f1 c0       	rjmp	.+482    	; 0x10c6 <DIO_enumWritePinVal+0x208>
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	88 30       	cpi	r24, 0x08	; 8
     ee8:	08 f0       	brcs	.+2      	; 0xeec <DIO_enumWritePinVal+0x2e>
     eea:	ed c0       	rjmp	.+474    	; 0x10c6 <DIO_enumWritePinVal+0x208>
  {
    if (Copy_u8Value == DIO_PIN_OUTPUT)
     eec:	8c 81       	ldd	r24, Y+4	; 0x04
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	09 f0       	breq	.+2      	; 0xef4 <DIO_enumWritePinVal+0x36>
     ef2:	6f c0       	rjmp	.+222    	; 0xfd2 <DIO_enumWritePinVal+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	38 87       	std	Y+8, r19	; 0x08
     efc:	2f 83       	std	Y+7, r18	; 0x07
     efe:	8f 81       	ldd	r24, Y+7	; 0x07
     f00:	98 85       	ldd	r25, Y+8	; 0x08
     f02:	81 30       	cpi	r24, 0x01	; 1
     f04:	91 05       	cpc	r25, r1
     f06:	49 f1       	breq	.+82     	; 0xf5a <DIO_enumWritePinVal+0x9c>
     f08:	2f 81       	ldd	r18, Y+7	; 0x07
     f0a:	38 85       	ldd	r19, Y+8	; 0x08
     f0c:	22 30       	cpi	r18, 0x02	; 2
     f0e:	31 05       	cpc	r19, r1
     f10:	2c f4       	brge	.+10     	; 0xf1c <DIO_enumWritePinVal+0x5e>
     f12:	8f 81       	ldd	r24, Y+7	; 0x07
     f14:	98 85       	ldd	r25, Y+8	; 0x08
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	61 f0       	breq	.+24     	; 0xf32 <DIO_enumWritePinVal+0x74>
     f1a:	d6 c0       	rjmp	.+428    	; 0x10c8 <DIO_enumWritePinVal+0x20a>
     f1c:	2f 81       	ldd	r18, Y+7	; 0x07
     f1e:	38 85       	ldd	r19, Y+8	; 0x08
     f20:	22 30       	cpi	r18, 0x02	; 2
     f22:	31 05       	cpc	r19, r1
     f24:	71 f1       	breq	.+92     	; 0xf82 <DIO_enumWritePinVal+0xc4>
     f26:	8f 81       	ldd	r24, Y+7	; 0x07
     f28:	98 85       	ldd	r25, Y+8	; 0x08
     f2a:	83 30       	cpi	r24, 0x03	; 3
     f2c:	91 05       	cpc	r25, r1
     f2e:	e9 f1       	breq	.+122    	; 0xfaa <DIO_enumWritePinVal+0xec>
     f30:	cb c0       	rjmp	.+406    	; 0x10c8 <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(PORTA, Copy_u8PIN);
     f32:	ab e3       	ldi	r26, 0x3B	; 59
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	eb e3       	ldi	r30, 0x3B	; 59
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	48 2f       	mov	r20, r24
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 2e       	mov	r0, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <DIO_enumWritePinVal+0x92>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	0a 94       	dec	r0
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <DIO_enumWritePinVal+0x8e>
     f54:	84 2b       	or	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	b7 c0       	rjmp	.+366    	; 0x10c8 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(PORTB, Copy_u8PIN);
     f5a:	a8 e3       	ldi	r26, 0x38	; 56
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e8 e3       	ldi	r30, 0x38	; 56
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 2e       	mov	r0, r18
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <DIO_enumWritePinVal+0xba>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <DIO_enumWritePinVal+0xb6>
     f7c:	84 2b       	or	r24, r20
     f7e:	8c 93       	st	X, r24
     f80:	a3 c0       	rjmp	.+326    	; 0x10c8 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(PORTC, Copy_u8PIN);
     f82:	a5 e3       	ldi	r26, 0x35	; 53
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e5 e3       	ldi	r30, 0x35	; 53
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <DIO_enumWritePinVal+0xe2>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <DIO_enumWritePinVal+0xde>
     fa4:	84 2b       	or	r24, r20
     fa6:	8c 93       	st	X, r24
     fa8:	8f c0       	rjmp	.+286    	; 0x10c8 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(PORTD, Copy_u8PIN);
     faa:	a2 e3       	ldi	r26, 0x32	; 50
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e2 e3       	ldi	r30, 0x32	; 50
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_enumWritePinVal+0x10a>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_enumWritePinVal+0x106>
     fcc:	84 2b       	or	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	7b c0       	rjmp	.+246    	; 0x10c8 <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else if (Copy_u8Value == DIO_PIN_INPUT)
     fd2:	8c 81       	ldd	r24, Y+4	; 0x04
     fd4:	88 23       	and	r24, r24
     fd6:	09 f0       	breq	.+2      	; 0xfda <DIO_enumWritePinVal+0x11c>
     fd8:	74 c0       	rjmp	.+232    	; 0x10c2 <DIO_enumWritePinVal+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	3e 83       	std	Y+6, r19	; 0x06
     fe2:	2d 83       	std	Y+5, r18	; 0x05
     fe4:	8d 81       	ldd	r24, Y+5	; 0x05
     fe6:	9e 81       	ldd	r25, Y+6	; 0x06
     fe8:	81 30       	cpi	r24, 0x01	; 1
     fea:	91 05       	cpc	r25, r1
     fec:	59 f1       	breq	.+86     	; 0x1044 <DIO_enumWritePinVal+0x186>
     fee:	2d 81       	ldd	r18, Y+5	; 0x05
     ff0:	3e 81       	ldd	r19, Y+6	; 0x06
     ff2:	22 30       	cpi	r18, 0x02	; 2
     ff4:	31 05       	cpc	r19, r1
     ff6:	2c f4       	brge	.+10     	; 0x1002 <DIO_enumWritePinVal+0x144>
     ff8:	8d 81       	ldd	r24, Y+5	; 0x05
     ffa:	9e 81       	ldd	r25, Y+6	; 0x06
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	69 f0       	breq	.+26     	; 0x101a <DIO_enumWritePinVal+0x15c>
    1000:	63 c0       	rjmp	.+198    	; 0x10c8 <DIO_enumWritePinVal+0x20a>
    1002:	2d 81       	ldd	r18, Y+5	; 0x05
    1004:	3e 81       	ldd	r19, Y+6	; 0x06
    1006:	22 30       	cpi	r18, 0x02	; 2
    1008:	31 05       	cpc	r19, r1
    100a:	89 f1       	breq	.+98     	; 0x106e <DIO_enumWritePinVal+0x1b0>
    100c:	8d 81       	ldd	r24, Y+5	; 0x05
    100e:	9e 81       	ldd	r25, Y+6	; 0x06
    1010:	83 30       	cpi	r24, 0x03	; 3
    1012:	91 05       	cpc	r25, r1
    1014:	09 f4       	brne	.+2      	; 0x1018 <DIO_enumWritePinVal+0x15a>
    1016:	40 c0       	rjmp	.+128    	; 0x1098 <DIO_enumWritePinVal+0x1da>
    1018:	57 c0       	rjmp	.+174    	; 0x10c8 <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(PORTA, Copy_u8PIN);
    101a:	ab e3       	ldi	r26, 0x3B	; 59
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	eb e3       	ldi	r30, 0x3B	; 59
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 2e       	mov	r0, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_enumWritePinVal+0x17a>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	0a 94       	dec	r0
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <DIO_enumWritePinVal+0x176>
    103c:	80 95       	com	r24
    103e:	84 23       	and	r24, r20
    1040:	8c 93       	st	X, r24
    1042:	42 c0       	rjmp	.+132    	; 0x10c8 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(PORTB, Copy_u8PIN);
    1044:	a8 e3       	ldi	r26, 0x38	; 56
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e8 e3       	ldi	r30, 0x38	; 56
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 2e       	mov	r0, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <DIO_enumWritePinVal+0x1a4>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	0a 94       	dec	r0
    1064:	e2 f7       	brpl	.-8      	; 0x105e <DIO_enumWritePinVal+0x1a0>
    1066:	80 95       	com	r24
    1068:	84 23       	and	r24, r20
    106a:	8c 93       	st	X, r24
    106c:	2d c0       	rjmp	.+90     	; 0x10c8 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(PORTC, Copy_u8PIN);
    106e:	a5 e3       	ldi	r26, 0x35	; 53
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e5 e3       	ldi	r30, 0x35	; 53
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <DIO_enumWritePinVal+0x1ce>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <DIO_enumWritePinVal+0x1ca>
    1090:	80 95       	com	r24
    1092:	84 23       	and	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	18 c0       	rjmp	.+48     	; 0x10c8 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(PORTD, Copy_u8PIN);
    1098:	a2 e3       	ldi	r26, 0x32	; 50
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e2 e3       	ldi	r30, 0x32	; 50
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_enumWritePinVal+0x1f8>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_enumWritePinVal+0x1f4>
    10ba:	80 95       	com	r24
    10bc:	84 23       	and	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	03 c0       	rjmp	.+6      	; 0x10c8 <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    10c2:	19 82       	std	Y+1, r1	; 0x01
    10c4:	01 c0       	rjmp	.+2      	; 0x10c8 <DIO_enumWritePinVal+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    10c6:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ca:	28 96       	adiw	r28, 0x08	; 8
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <DIO_enumReadPinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */
DIO_errorStatus DIO_enumReadPinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 *Copy_Pu8Data)
{
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	27 97       	sbiw	r28, 0x07	; 7
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	8a 83       	std	Y+2, r24	; 0x02
    10f2:	6b 83       	std	Y+3, r22	; 0x03
    10f4:	5d 83       	std	Y+5, r21	; 0x05
    10f6:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	84 30       	cpi	r24, 0x04	; 4
    1100:	08 f0       	brcs	.+2      	; 0x1104 <DIO_enumReadPinVal+0x28>
    1102:	a6 c0       	rjmp	.+332    	; 0x1250 <DIO_enumReadPinVal+0x174>
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	88 30       	cpi	r24, 0x08	; 8
    1108:	08 f0       	brcs	.+2      	; 0x110c <DIO_enumReadPinVal+0x30>
    110a:	a2 c0       	rjmp	.+324    	; 0x1250 <DIO_enumReadPinVal+0x174>
  {
    /* Check on the Required PORT Number */
    switch (Copy_u8PORT)
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	3f 83       	std	Y+7, r19	; 0x07
    1114:	2e 83       	std	Y+6, r18	; 0x06
    1116:	4e 81       	ldd	r20, Y+6	; 0x06
    1118:	5f 81       	ldd	r21, Y+7	; 0x07
    111a:	41 30       	cpi	r20, 0x01	; 1
    111c:	51 05       	cpc	r21, r1
    111e:	c1 f1       	breq	.+112    	; 0x1190 <DIO_enumReadPinVal+0xb4>
    1120:	8e 81       	ldd	r24, Y+6	; 0x06
    1122:	9f 81       	ldd	r25, Y+7	; 0x07
    1124:	82 30       	cpi	r24, 0x02	; 2
    1126:	91 05       	cpc	r25, r1
    1128:	34 f4       	brge	.+12     	; 0x1136 <DIO_enumReadPinVal+0x5a>
    112a:	2e 81       	ldd	r18, Y+6	; 0x06
    112c:	3f 81       	ldd	r19, Y+7	; 0x07
    112e:	21 15       	cp	r18, r1
    1130:	31 05       	cpc	r19, r1
    1132:	71 f0       	breq	.+28     	; 0x1150 <DIO_enumReadPinVal+0x74>
    1134:	8e c0       	rjmp	.+284    	; 0x1252 <DIO_enumReadPinVal+0x176>
    1136:	4e 81       	ldd	r20, Y+6	; 0x06
    1138:	5f 81       	ldd	r21, Y+7	; 0x07
    113a:	42 30       	cpi	r20, 0x02	; 2
    113c:	51 05       	cpc	r21, r1
    113e:	09 f4       	brne	.+2      	; 0x1142 <DIO_enumReadPinVal+0x66>
    1140:	47 c0       	rjmp	.+142    	; 0x11d0 <DIO_enumReadPinVal+0xf4>
    1142:	8e 81       	ldd	r24, Y+6	; 0x06
    1144:	9f 81       	ldd	r25, Y+7	; 0x07
    1146:	83 30       	cpi	r24, 0x03	; 3
    1148:	91 05       	cpc	r25, r1
    114a:	09 f4       	brne	.+2      	; 0x114e <DIO_enumReadPinVal+0x72>
    114c:	61 c0       	rjmp	.+194    	; 0x1210 <DIO_enumReadPinVal+0x134>
    114e:	81 c0       	rjmp	.+258    	; 0x1252 <DIO_enumReadPinVal+0x176>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = READ_BIT(PINA, Copy_u8PIN);
    1150:	e9 e3       	ldi	r30, 0x39	; 57
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	48 2f       	mov	r20, r24
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 c0       	rjmp	.+4      	; 0x116a <DIO_enumReadPinVal+0x8e>
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	2a 95       	dec	r18
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <DIO_enumReadPinVal+0x8a>
    116e:	9a 01       	movw	r18, r20
    1170:	28 23       	and	r18, r24
    1172:	39 23       	and	r19, r25
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	88 2f       	mov	r24, r24
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	a9 01       	movw	r20, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <DIO_enumReadPinVal+0xa6>
    117e:	55 95       	asr	r21
    1180:	47 95       	ror	r20
    1182:	8a 95       	dec	r24
    1184:	e2 f7       	brpl	.-8      	; 0x117e <DIO_enumReadPinVal+0xa2>
    1186:	ca 01       	movw	r24, r20
    1188:	ec 81       	ldd	r30, Y+4	; 0x04
    118a:	fd 81       	ldd	r31, Y+5	; 0x05
    118c:	80 83       	st	Z, r24
    118e:	61 c0       	rjmp	.+194    	; 0x1252 <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = READ_BIT(PINB, Copy_u8PIN);
    1190:	e6 e3       	ldi	r30, 0x36	; 54
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	50 e0       	ldi	r21, 0x00	; 0
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_enumReadPinVal+0xce>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	2a 95       	dec	r18
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_enumReadPinVal+0xca>
    11ae:	9a 01       	movw	r18, r20
    11b0:	28 23       	and	r18, r24
    11b2:	39 23       	and	r19, r25
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	88 2f       	mov	r24, r24
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	a9 01       	movw	r20, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <DIO_enumReadPinVal+0xe6>
    11be:	55 95       	asr	r21
    11c0:	47 95       	ror	r20
    11c2:	8a 95       	dec	r24
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <DIO_enumReadPinVal+0xe2>
    11c6:	ca 01       	movw	r24, r20
    11c8:	ec 81       	ldd	r30, Y+4	; 0x04
    11ca:	fd 81       	ldd	r31, Y+5	; 0x05
    11cc:	80 83       	st	Z, r24
    11ce:	41 c0       	rjmp	.+130    	; 0x1252 <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = READ_BIT(PINC, Copy_u8PIN);
    11d0:	e3 e3       	ldi	r30, 0x33	; 51
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	50 e0       	ldi	r21, 0x00	; 0
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <DIO_enumReadPinVal+0x10e>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	2a 95       	dec	r18
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <DIO_enumReadPinVal+0x10a>
    11ee:	9a 01       	movw	r18, r20
    11f0:	28 23       	and	r18, r24
    11f2:	39 23       	and	r19, r25
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a9 01       	movw	r20, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <DIO_enumReadPinVal+0x126>
    11fe:	55 95       	asr	r21
    1200:	47 95       	ror	r20
    1202:	8a 95       	dec	r24
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <DIO_enumReadPinVal+0x122>
    1206:	ca 01       	movw	r24, r20
    1208:	ec 81       	ldd	r30, Y+4	; 0x04
    120a:	fd 81       	ldd	r31, Y+5	; 0x05
    120c:	80 83       	st	Z, r24
    120e:	21 c0       	rjmp	.+66     	; 0x1252 <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = READ_BIT(PIND, Copy_u8PIN);
    1210:	e0 e3       	ldi	r30, 0x30	; 48
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	48 2f       	mov	r20, r24
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 c0       	rjmp	.+4      	; 0x122a <DIO_enumReadPinVal+0x14e>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	2a 95       	dec	r18
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <DIO_enumReadPinVal+0x14a>
    122e:	9a 01       	movw	r18, r20
    1230:	28 23       	and	r18, r24
    1232:	39 23       	and	r19, r25
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	88 2f       	mov	r24, r24
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	a9 01       	movw	r20, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_enumReadPinVal+0x166>
    123e:	55 95       	asr	r21
    1240:	47 95       	ror	r20
    1242:	8a 95       	dec	r24
    1244:	e2 f7       	brpl	.-8      	; 0x123e <DIO_enumReadPinVal+0x162>
    1246:	ca 01       	movw	r24, r20
    1248:	ec 81       	ldd	r30, Y+4	; 0x04
    124a:	fd 81       	ldd	r31, Y+5	; 0x05
    124c:	80 83       	st	Z, r24
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <DIO_enumReadPinVal+0x176>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    1250:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    1252:	89 81       	ldd	r24, Y+1	; 0x01
}
    1254:	27 96       	adiw	r28, 0x07	; 7
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <DIO_enumTogglePinVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN)
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	00 d0       	rcall	.+0      	; 0x126c <DIO_enumTogglePinVal+0x6>
    126c:	00 d0       	rcall	.+0      	; 0x126e <DIO_enumTogglePinVal+0x8>
    126e:	0f 92       	push	r0
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	8a 83       	std	Y+2, r24	; 0x02
    1276:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	84 30       	cpi	r24, 0x04	; 4
    1280:	08 f0       	brcs	.+2      	; 0x1284 <DIO_enumTogglePinVal+0x1e>
    1282:	73 c0       	rjmp	.+230    	; 0x136a <DIO_enumTogglePinVal+0x104>
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	88 30       	cpi	r24, 0x08	; 8
    1288:	08 f0       	brcs	.+2      	; 0x128c <DIO_enumTogglePinVal+0x26>
    128a:	6f c0       	rjmp	.+222    	; 0x136a <DIO_enumTogglePinVal+0x104>
  {
    switch (Copy_u8PORT)
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	3d 83       	std	Y+5, r19	; 0x05
    1294:	2c 83       	std	Y+4, r18	; 0x04
    1296:	8c 81       	ldd	r24, Y+4	; 0x04
    1298:	9d 81       	ldd	r25, Y+5	; 0x05
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	91 05       	cpc	r25, r1
    129e:	49 f1       	breq	.+82     	; 0x12f2 <DIO_enumTogglePinVal+0x8c>
    12a0:	2c 81       	ldd	r18, Y+4	; 0x04
    12a2:	3d 81       	ldd	r19, Y+5	; 0x05
    12a4:	22 30       	cpi	r18, 0x02	; 2
    12a6:	31 05       	cpc	r19, r1
    12a8:	2c f4       	brge	.+10     	; 0x12b4 <DIO_enumTogglePinVal+0x4e>
    12aa:	8c 81       	ldd	r24, Y+4	; 0x04
    12ac:	9d 81       	ldd	r25, Y+5	; 0x05
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	61 f0       	breq	.+24     	; 0x12ca <DIO_enumTogglePinVal+0x64>
    12b2:	5c c0       	rjmp	.+184    	; 0x136c <DIO_enumTogglePinVal+0x106>
    12b4:	2c 81       	ldd	r18, Y+4	; 0x04
    12b6:	3d 81       	ldd	r19, Y+5	; 0x05
    12b8:	22 30       	cpi	r18, 0x02	; 2
    12ba:	31 05       	cpc	r19, r1
    12bc:	71 f1       	breq	.+92     	; 0x131a <DIO_enumTogglePinVal+0xb4>
    12be:	8c 81       	ldd	r24, Y+4	; 0x04
    12c0:	9d 81       	ldd	r25, Y+5	; 0x05
    12c2:	83 30       	cpi	r24, 0x03	; 3
    12c4:	91 05       	cpc	r25, r1
    12c6:	e9 f1       	breq	.+122    	; 0x1342 <DIO_enumTogglePinVal+0xdc>
    12c8:	51 c0       	rjmp	.+162    	; 0x136c <DIO_enumTogglePinVal+0x106>
    {
    case DIO_PORTA:
      TOG_BIT(PORTA, Copy_u8PIN);
    12ca:	ab e3       	ldi	r26, 0x3B	; 59
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	eb e3       	ldi	r30, 0x3B	; 59
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_enumTogglePinVal+0x82>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_enumTogglePinVal+0x7e>
    12ec:	84 27       	eor	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	3d c0       	rjmp	.+122    	; 0x136c <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTB:
      TOG_BIT(PORTB, Copy_u8PIN);
    12f2:	a8 e3       	ldi	r26, 0x38	; 56
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e8 e3       	ldi	r30, 0x38	; 56
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_enumTogglePinVal+0xaa>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_enumTogglePinVal+0xa6>
    1314:	84 27       	eor	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	29 c0       	rjmp	.+82     	; 0x136c <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTC:
      TOG_BIT(PORTC, Copy_u8PIN);
    131a:	a5 e3       	ldi	r26, 0x35	; 53
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e5 e3       	ldi	r30, 0x35	; 53
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <DIO_enumTogglePinVal+0xd2>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <DIO_enumTogglePinVal+0xce>
    133c:	84 27       	eor	r24, r20
    133e:	8c 93       	st	X, r24
    1340:	15 c0       	rjmp	.+42     	; 0x136c <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTD:
      TOG_BIT(PORTD, Copy_u8PIN);
    1342:	a2 e3       	ldi	r26, 0x32	; 50
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e2 e3       	ldi	r30, 0x32	; 50
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	48 2f       	mov	r20, r24
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 2e       	mov	r0, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <DIO_enumTogglePinVal+0xfa>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	0a 94       	dec	r0
    1362:	e2 f7       	brpl	.-8      	; 0x135c <DIO_enumTogglePinVal+0xf6>
    1364:	84 27       	eor	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	01 c0       	rjmp	.+2      	; 0x136c <DIO_enumTogglePinVal+0x106>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    136a:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    136c:	89 81       	ldd	r24, Y+1	; 0x01
}
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <DIO_enumConnectPullUp>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
    =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumConnectPullUp(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	00 d0       	rcall	.+0      	; 0x1384 <DIO_enumConnectPullUp+0x6>
    1384:	00 d0       	rcall	.+0      	; 0x1386 <DIO_enumConnectPullUp+0x8>
    1386:	00 d0       	rcall	.+0      	; 0x1388 <DIO_enumConnectPullUp+0xa>
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	8a 83       	std	Y+2, r24	; 0x02
    138e:	6b 83       	std	Y+3, r22	; 0x03
    1390:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	84 30       	cpi	r24, 0x04	; 4
    139a:	08 f0       	brcs	.+2      	; 0x139e <DIO_enumConnectPullUp+0x20>
    139c:	3e c1       	rjmp	.+636    	; 0x161a <DIO_enumConnectPullUp+0x29c>
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	88 30       	cpi	r24, 0x08	; 8
    13a2:	08 f0       	brcs	.+2      	; 0x13a6 <DIO_enumConnectPullUp+0x28>
    13a4:	3a c1       	rjmp	.+628    	; 0x161a <DIO_enumConnectPullUp+0x29c>
  {
    switch (Copy_u8PORT)
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	3e 83       	std	Y+6, r19	; 0x06
    13ae:	2d 83       	std	Y+5, r18	; 0x05
    13b0:	8d 81       	ldd	r24, Y+5	; 0x05
    13b2:	9e 81       	ldd	r25, Y+6	; 0x06
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	91 05       	cpc	r25, r1
    13b8:	09 f4       	brne	.+2      	; 0x13bc <DIO_enumConnectPullUp+0x3e>
    13ba:	5d c0       	rjmp	.+186    	; 0x1476 <DIO_enumConnectPullUp+0xf8>
    13bc:	2d 81       	ldd	r18, Y+5	; 0x05
    13be:	3e 81       	ldd	r19, Y+6	; 0x06
    13c0:	22 30       	cpi	r18, 0x02	; 2
    13c2:	31 05       	cpc	r19, r1
    13c4:	2c f4       	brge	.+10     	; 0x13d0 <DIO_enumConnectPullUp+0x52>
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	71 f0       	breq	.+28     	; 0x13ea <DIO_enumConnectPullUp+0x6c>
    13ce:	26 c1       	rjmp	.+588    	; 0x161c <DIO_enumConnectPullUp+0x29e>
    13d0:	2d 81       	ldd	r18, Y+5	; 0x05
    13d2:	3e 81       	ldd	r19, Y+6	; 0x06
    13d4:	22 30       	cpi	r18, 0x02	; 2
    13d6:	31 05       	cpc	r19, r1
    13d8:	09 f4       	brne	.+2      	; 0x13dc <DIO_enumConnectPullUp+0x5e>
    13da:	93 c0       	rjmp	.+294    	; 0x1502 <DIO_enumConnectPullUp+0x184>
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	83 30       	cpi	r24, 0x03	; 3
    13e2:	91 05       	cpc	r25, r1
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <DIO_enumConnectPullUp+0x6a>
    13e6:	d3 c0       	rjmp	.+422    	; 0x158e <DIO_enumConnectPullUp+0x210>
    13e8:	19 c1       	rjmp	.+562    	; 0x161c <DIO_enumConnectPullUp+0x29e>
    {
    /* Connect or disconnect the pull up resistance to the given pin in port A */
    case DIO_PORTA:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	71 f5       	brne	.+92     	; 0x144c <DIO_enumConnectPullUp+0xce>
      {
        CLR_BIT(SFIOR, PUD); // It's default is zero
    13f0:	a0 e5       	ldi	r26, 0x50	; 80
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e0 e5       	ldi	r30, 0x50	; 80
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	8b 7f       	andi	r24, 0xFB	; 251
    13fc:	8c 93       	st	X, r24
        CLR_BIT(DDRA, Copy_u8PIN);
    13fe:	aa e3       	ldi	r26, 0x3A	; 58
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	ea e3       	ldi	r30, 0x3A	; 58
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	48 2f       	mov	r20, r24
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DIO_enumConnectPullUp+0x9c>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	2a 95       	dec	r18
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <DIO_enumConnectPullUp+0x98>
    141e:	80 95       	com	r24
    1420:	84 23       	and	r24, r20
    1422:	8c 93       	st	X, r24
        SET_BIT(PORTA, Copy_u8PIN);
    1424:	ab e3       	ldi	r26, 0x3B	; 59
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	eb e3       	ldi	r30, 0x3B	; 59
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 2e       	mov	r0, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <DIO_enumConnectPullUp+0xc4>
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	0a 94       	dec	r0
    1444:	e2 f7       	brpl	.-8      	; 0x143e <DIO_enumConnectPullUp+0xc0>
    1446:	84 2b       	or	r24, r20
    1448:	8c 93       	st	X, r24
    144a:	e8 c0       	rjmp	.+464    	; 0x161c <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTA, Copy_u8PIN);
    144c:	ab e3       	ldi	r26, 0x3B	; 59
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	eb e3       	ldi	r30, 0x3B	; 59
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	48 2f       	mov	r20, r24
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	02 2e       	mov	r0, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <DIO_enumConnectPullUp+0xec>
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	0a 94       	dec	r0
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <DIO_enumConnectPullUp+0xe8>
    146e:	80 95       	com	r24
    1470:	84 23       	and	r24, r20
    1472:	8c 93       	st	X, r24
    1474:	d3 c0       	rjmp	.+422    	; 0x161c <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port B */
    case DIO_PORTB:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    1476:	8c 81       	ldd	r24, Y+4	; 0x04
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	71 f5       	brne	.+92     	; 0x14d8 <DIO_enumConnectPullUp+0x15a>
      {
        CLR_BIT(SFIOR, PUD);
    147c:	a0 e5       	ldi	r26, 0x50	; 80
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e0 e5       	ldi	r30, 0x50	; 80
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	8b 7f       	andi	r24, 0xFB	; 251
    1488:	8c 93       	st	X, r24
        CLR_BIT(DDRB, Copy_u8PIN);
    148a:	a7 e3       	ldi	r26, 0x37	; 55
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e7 e3       	ldi	r30, 0x37	; 55
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	48 2f       	mov	r20, r24
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <DIO_enumConnectPullUp+0x128>
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	2a 95       	dec	r18
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <DIO_enumConnectPullUp+0x124>
    14aa:	80 95       	com	r24
    14ac:	84 23       	and	r24, r20
    14ae:	8c 93       	st	X, r24
        SET_BIT(PORTB, Copy_u8PIN);
    14b0:	a8 e3       	ldi	r26, 0x38	; 56
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e8 e3       	ldi	r30, 0x38	; 56
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	48 2f       	mov	r20, r24
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	02 2e       	mov	r0, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <DIO_enumConnectPullUp+0x150>
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	0a 94       	dec	r0
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <DIO_enumConnectPullUp+0x14c>
    14d2:	84 2b       	or	r24, r20
    14d4:	8c 93       	st	X, r24
    14d6:	a2 c0       	rjmp	.+324    	; 0x161c <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTB, Copy_u8PIN);
    14d8:	a8 e3       	ldi	r26, 0x38	; 56
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e8 e3       	ldi	r30, 0x38	; 56
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <DIO_enumConnectPullUp+0x178>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <DIO_enumConnectPullUp+0x174>
    14fa:	80 95       	com	r24
    14fc:	84 23       	and	r24, r20
    14fe:	8c 93       	st	X, r24
    1500:	8d c0       	rjmp	.+282    	; 0x161c <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port C */
    case DIO_PORTC:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    1502:	8c 81       	ldd	r24, Y+4	; 0x04
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	71 f5       	brne	.+92     	; 0x1564 <DIO_enumConnectPullUp+0x1e6>
      {
        CLR_BIT(SFIOR, PUD);
    1508:	a0 e5       	ldi	r26, 0x50	; 80
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e0 e5       	ldi	r30, 0x50	; 80
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	8b 7f       	andi	r24, 0xFB	; 251
    1514:	8c 93       	st	X, r24
        CLR_BIT(DDRC, Copy_u8PIN);
    1516:	a4 e3       	ldi	r26, 0x34	; 52
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e4 e3       	ldi	r30, 0x34	; 52
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	48 2f       	mov	r20, r24
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <DIO_enumConnectPullUp+0x1b4>
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	2a 95       	dec	r18
    1534:	e2 f7       	brpl	.-8      	; 0x152e <DIO_enumConnectPullUp+0x1b0>
    1536:	80 95       	com	r24
    1538:	84 23       	and	r24, r20
    153a:	8c 93       	st	X, r24
        SET_BIT(PORTC, Copy_u8PIN);
    153c:	a5 e3       	ldi	r26, 0x35	; 53
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e5 e3       	ldi	r30, 0x35	; 53
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	48 2f       	mov	r20, r24
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 2e       	mov	r0, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <DIO_enumConnectPullUp+0x1dc>
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	0a 94       	dec	r0
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <DIO_enumConnectPullUp+0x1d8>
    155e:	84 2b       	or	r24, r20
    1560:	8c 93       	st	X, r24
    1562:	5c c0       	rjmp	.+184    	; 0x161c <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTC, Copy_u8PIN);
    1564:	a5 e3       	ldi	r26, 0x35	; 53
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e5 e3       	ldi	r30, 0x35	; 53
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	48 2f       	mov	r20, r24
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	02 2e       	mov	r0, r18
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <DIO_enumConnectPullUp+0x204>
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	0a 94       	dec	r0
    1584:	e2 f7       	brpl	.-8      	; 0x157e <DIO_enumConnectPullUp+0x200>
    1586:	80 95       	com	r24
    1588:	84 23       	and	r24, r20
    158a:	8c 93       	st	X, r24
    158c:	47 c0       	rjmp	.+142    	; 0x161c <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port D */
    case DIO_PORTD:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    158e:	8c 81       	ldd	r24, Y+4	; 0x04
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	71 f5       	brne	.+92     	; 0x15f0 <DIO_enumConnectPullUp+0x272>
      {
        CLR_BIT(SFIOR, PUD);
    1594:	a0 e5       	ldi	r26, 0x50	; 80
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e0 e5       	ldi	r30, 0x50	; 80
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	8b 7f       	andi	r24, 0xFB	; 251
    15a0:	8c 93       	st	X, r24
        CLR_BIT(DDRD, Copy_u8PIN);
    15a2:	a1 e3       	ldi	r26, 0x31	; 49
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e1 e3       	ldi	r30, 0x31	; 49
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <DIO_enumConnectPullUp+0x240>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	2a 95       	dec	r18
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <DIO_enumConnectPullUp+0x23c>
    15c2:	80 95       	com	r24
    15c4:	84 23       	and	r24, r20
    15c6:	8c 93       	st	X, r24
        SET_BIT(PORTD, Copy_u8PIN);
    15c8:	a2 e3       	ldi	r26, 0x32	; 50
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e2 e3       	ldi	r30, 0x32	; 50
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	48 2f       	mov	r20, r24
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 2e       	mov	r0, r18
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <DIO_enumConnectPullUp+0x268>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <DIO_enumConnectPullUp+0x264>
    15ea:	84 2b       	or	r24, r20
    15ec:	8c 93       	st	X, r24
    15ee:	16 c0       	rjmp	.+44     	; 0x161c <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTD, Copy_u8PIN);
    15f0:	a2 e3       	ldi	r26, 0x32	; 50
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e2 e3       	ldi	r30, 0x32	; 50
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	48 2f       	mov	r20, r24
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 2e       	mov	r0, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <DIO_enumConnectPullUp+0x290>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <DIO_enumConnectPullUp+0x28c>
    1612:	80 95       	com	r24
    1614:	84 23       	and	r24, r20
    1616:	8c 93       	st	X, r24
    1618:	01 c0       	rjmp	.+2      	; 0x161c <DIO_enumConnectPullUp+0x29e>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    161a:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    161c:	89 81       	ldd	r24, Y+1	; 0x01
}
    161e:	26 96       	adiw	r28, 0x06	; 6
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <DIO_enumSetPortDir>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_errorStatus DIO_enumSetPortDir(u8 Copy_u8PORT, u8 Copy_u8Direction)
{
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	00 d0       	rcall	.+0      	; 0x1636 <DIO_enumSetPortDir+0x6>
    1636:	00 d0       	rcall	.+0      	; 0x1638 <DIO_enumSetPortDir+0x8>
    1638:	0f 92       	push	r0
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	8a 83       	std	Y+2, r24	; 0x02
    1640:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD))
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	84 30       	cpi	r24, 0x04	; 4
    164a:	a8 f5       	brcc	.+106    	; 0x16b6 <DIO_enumSetPortDir+0x86>
  {
    switch (Copy_u8PORT)
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	3d 83       	std	Y+5, r19	; 0x05
    1654:	2c 83       	std	Y+4, r18	; 0x04
    1656:	8c 81       	ldd	r24, Y+4	; 0x04
    1658:	9d 81       	ldd	r25, Y+5	; 0x05
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	91 05       	cpc	r25, r1
    165e:	d1 f0       	breq	.+52     	; 0x1694 <DIO_enumSetPortDir+0x64>
    1660:	2c 81       	ldd	r18, Y+4	; 0x04
    1662:	3d 81       	ldd	r19, Y+5	; 0x05
    1664:	22 30       	cpi	r18, 0x02	; 2
    1666:	31 05       	cpc	r19, r1
    1668:	2c f4       	brge	.+10     	; 0x1674 <DIO_enumSetPortDir+0x44>
    166a:	8c 81       	ldd	r24, Y+4	; 0x04
    166c:	9d 81       	ldd	r25, Y+5	; 0x05
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	61 f0       	breq	.+24     	; 0x168a <DIO_enumSetPortDir+0x5a>
    1672:	1f c0       	rjmp	.+62     	; 0x16b2 <DIO_enumSetPortDir+0x82>
    1674:	2c 81       	ldd	r18, Y+4	; 0x04
    1676:	3d 81       	ldd	r19, Y+5	; 0x05
    1678:	22 30       	cpi	r18, 0x02	; 2
    167a:	31 05       	cpc	r19, r1
    167c:	81 f0       	breq	.+32     	; 0x169e <DIO_enumSetPortDir+0x6e>
    167e:	8c 81       	ldd	r24, Y+4	; 0x04
    1680:	9d 81       	ldd	r25, Y+5	; 0x05
    1682:	83 30       	cpi	r24, 0x03	; 3
    1684:	91 05       	cpc	r25, r1
    1686:	81 f0       	breq	.+32     	; 0x16a8 <DIO_enumSetPortDir+0x78>
    1688:	14 c0       	rjmp	.+40     	; 0x16b2 <DIO_enumSetPortDir+0x82>
    {
    case DIO_PORTA:
      DDRA = Copy_u8Direction;
    168a:	ea e3       	ldi	r30, 0x3A	; 58
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	80 83       	st	Z, r24
    1692:	12 c0       	rjmp	.+36     	; 0x16b8 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTB:
      DDRB = Copy_u8Direction;
    1694:	e7 e3       	ldi	r30, 0x37	; 55
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	80 83       	st	Z, r24
    169c:	0d c0       	rjmp	.+26     	; 0x16b8 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTC:
      DDRC = Copy_u8Direction;
    169e:	e4 e3       	ldi	r30, 0x34	; 52
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	80 83       	st	Z, r24
    16a6:	08 c0       	rjmp	.+16     	; 0x16b8 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTD:
      DDRD = Copy_u8Direction;
    16a8:	e1 e3       	ldi	r30, 0x31	; 49
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	80 83       	st	Z, r24
    16b0:	03 c0       	rjmp	.+6      	; 0x16b8 <DIO_enumSetPortDir+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    16b2:	19 82       	std	Y+1, r1	; 0x01
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <DIO_enumSetPortDir+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    16b6:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <DIO_enumWritePortVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePortVal(u8 Copy_u8PORT, u8 Copy_u8Value)
{
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <DIO_enumWritePortVal+0x6>
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <DIO_enumWritePortVal+0x8>
    16d2:	0f 92       	push	r0
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	8a 83       	std	Y+2, r24	; 0x02
    16da:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD) && ((Copy_u8Value <= 255) || (Copy_u8Value == DIO_PORT_LOW) || (Copy_u8Value == DIO_PORT_HIGH)))
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	84 30       	cpi	r24, 0x04	; 4
    16e4:	a8 f5       	brcc	.+106    	; 0x1750 <DIO_enumWritePortVal+0x86>
  {
    switch (Copy_u8PORT)
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	3d 83       	std	Y+5, r19	; 0x05
    16ee:	2c 83       	std	Y+4, r18	; 0x04
    16f0:	8c 81       	ldd	r24, Y+4	; 0x04
    16f2:	9d 81       	ldd	r25, Y+5	; 0x05
    16f4:	81 30       	cpi	r24, 0x01	; 1
    16f6:	91 05       	cpc	r25, r1
    16f8:	d1 f0       	breq	.+52     	; 0x172e <DIO_enumWritePortVal+0x64>
    16fa:	2c 81       	ldd	r18, Y+4	; 0x04
    16fc:	3d 81       	ldd	r19, Y+5	; 0x05
    16fe:	22 30       	cpi	r18, 0x02	; 2
    1700:	31 05       	cpc	r19, r1
    1702:	2c f4       	brge	.+10     	; 0x170e <DIO_enumWritePortVal+0x44>
    1704:	8c 81       	ldd	r24, Y+4	; 0x04
    1706:	9d 81       	ldd	r25, Y+5	; 0x05
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	61 f0       	breq	.+24     	; 0x1724 <DIO_enumWritePortVal+0x5a>
    170c:	1f c0       	rjmp	.+62     	; 0x174c <DIO_enumWritePortVal+0x82>
    170e:	2c 81       	ldd	r18, Y+4	; 0x04
    1710:	3d 81       	ldd	r19, Y+5	; 0x05
    1712:	22 30       	cpi	r18, 0x02	; 2
    1714:	31 05       	cpc	r19, r1
    1716:	81 f0       	breq	.+32     	; 0x1738 <DIO_enumWritePortVal+0x6e>
    1718:	8c 81       	ldd	r24, Y+4	; 0x04
    171a:	9d 81       	ldd	r25, Y+5	; 0x05
    171c:	83 30       	cpi	r24, 0x03	; 3
    171e:	91 05       	cpc	r25, r1
    1720:	81 f0       	breq	.+32     	; 0x1742 <DIO_enumWritePortVal+0x78>
    1722:	14 c0       	rjmp	.+40     	; 0x174c <DIO_enumWritePortVal+0x82>
    {
    case DIO_PORTA:
      PORTA = Copy_u8Value;
    1724:	eb e3       	ldi	r30, 0x3B	; 59
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	80 83       	st	Z, r24
    172c:	12 c0       	rjmp	.+36     	; 0x1752 <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTB:
      PORTB = Copy_u8Value;
    172e:	e8 e3       	ldi	r30, 0x38	; 56
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	80 83       	st	Z, r24
    1736:	0d c0       	rjmp	.+26     	; 0x1752 <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTC:
      PORTC = Copy_u8Value;
    1738:	e5 e3       	ldi	r30, 0x35	; 53
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	80 83       	st	Z, r24
    1740:	08 c0       	rjmp	.+16     	; 0x1752 <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTD:
      PORTD = Copy_u8Value;
    1742:	e2 e3       	ldi	r30, 0x32	; 50
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	80 83       	st	Z, r24
    174a:	03 c0       	rjmp	.+6      	; 0x1752 <DIO_enumWritePortVal+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    174c:	19 82       	std	Y+1, r1	; 0x01
    174e:	01 c0       	rjmp	.+2      	; 0x1752 <DIO_enumWritePortVal+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    1750:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    1752:	89 81       	ldd	r24, Y+1	; 0x01
}
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <DIO_enumReadPorVal>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_errorStatus DIO_enumReadPorVal(u8 Copy_u8PORT, u8 *Copy_Pu8Data)
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	27 97       	sbiw	r28, 0x07	; 7
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	de bf       	out	0x3e, r29	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	cd bf       	out	0x3d, r28	; 61
    1778:	8a 83       	std	Y+2, r24	; 0x02
    177a:	7c 83       	std	Y+4, r23	; 0x04
    177c:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	84 30       	cpi	r24, 0x04	; 4
    1786:	08 f0       	brcs	.+2      	; 0x178a <DIO_enumReadPorVal+0x26>
    1788:	3f c0       	rjmp	.+126    	; 0x1808 <DIO_enumReadPorVal+0xa4>
  {
    switch (Copy_u8PORT)
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	3f 83       	std	Y+7, r19	; 0x07
    1792:	2e 83       	std	Y+6, r18	; 0x06
    1794:	8e 81       	ldd	r24, Y+6	; 0x06
    1796:	9f 81       	ldd	r25, Y+7	; 0x07
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	91 05       	cpc	r25, r1
    179c:	e1 f0       	breq	.+56     	; 0x17d6 <DIO_enumReadPorVal+0x72>
    179e:	2e 81       	ldd	r18, Y+6	; 0x06
    17a0:	3f 81       	ldd	r19, Y+7	; 0x07
    17a2:	22 30       	cpi	r18, 0x02	; 2
    17a4:	31 05       	cpc	r19, r1
    17a6:	2c f4       	brge	.+10     	; 0x17b2 <DIO_enumReadPorVal+0x4e>
    17a8:	8e 81       	ldd	r24, Y+6	; 0x06
    17aa:	9f 81       	ldd	r25, Y+7	; 0x07
    17ac:	00 97       	sbiw	r24, 0x00	; 0
    17ae:	61 f0       	breq	.+24     	; 0x17c8 <DIO_enumReadPorVal+0x64>
    17b0:	27 c0       	rjmp	.+78     	; 0x1800 <DIO_enumReadPorVal+0x9c>
    17b2:	2e 81       	ldd	r18, Y+6	; 0x06
    17b4:	3f 81       	ldd	r19, Y+7	; 0x07
    17b6:	22 30       	cpi	r18, 0x02	; 2
    17b8:	31 05       	cpc	r19, r1
    17ba:	a1 f0       	breq	.+40     	; 0x17e4 <DIO_enumReadPorVal+0x80>
    17bc:	8e 81       	ldd	r24, Y+6	; 0x06
    17be:	9f 81       	ldd	r25, Y+7	; 0x07
    17c0:	83 30       	cpi	r24, 0x03	; 3
    17c2:	91 05       	cpc	r25, r1
    17c4:	b1 f0       	breq	.+44     	; 0x17f2 <DIO_enumReadPorVal+0x8e>
    17c6:	1c c0       	rjmp	.+56     	; 0x1800 <DIO_enumReadPorVal+0x9c>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = PINA;
    17c8:	e9 e3       	ldi	r30, 0x39	; 57
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	eb 81       	ldd	r30, Y+3	; 0x03
    17d0:	fc 81       	ldd	r31, Y+4	; 0x04
    17d2:	80 83       	st	Z, r24
    17d4:	16 c0       	rjmp	.+44     	; 0x1802 <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = PINB;
    17d6:	e6 e3       	ldi	r30, 0x36	; 54
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	eb 81       	ldd	r30, Y+3	; 0x03
    17de:	fc 81       	ldd	r31, Y+4	; 0x04
    17e0:	80 83       	st	Z, r24
    17e2:	0f c0       	rjmp	.+30     	; 0x1802 <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = PINC;
    17e4:	e3 e3       	ldi	r30, 0x33	; 51
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	eb 81       	ldd	r30, Y+3	; 0x03
    17ec:	fc 81       	ldd	r31, Y+4	; 0x04
    17ee:	80 83       	st	Z, r24
    17f0:	08 c0       	rjmp	.+16     	; 0x1802 <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = PIND;
    17f2:	e0 e3       	ldi	r30, 0x30	; 48
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	eb 81       	ldd	r30, Y+3	; 0x03
    17fa:	fc 81       	ldd	r31, Y+4	; 0x04
    17fc:	80 83       	st	Z, r24
    17fe:	01 c0       	rjmp	.+2      	; 0x1802 <DIO_enumReadPorVal+0x9e>
      break;
    default:
      LOC_enumState = DIO_NOK;
    1800:	19 82       	std	Y+1, r1	; 0x01
      break;
    }
    return LOC_enumState;
    1802:	99 81       	ldd	r25, Y+1	; 0x01
    1804:	9d 83       	std	Y+5, r25	; 0x05
    1806:	03 c0       	rjmp	.+6      	; 0x180e <DIO_enumReadPorVal+0xaa>
  }
  else
  {
    LOC_enumState = DIO_NOK;
    1808:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    180a:	29 81       	ldd	r18, Y+1	; 0x01
    180c:	2d 83       	std	Y+5, r18	; 0x05
    180e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1810:	27 96       	adiw	r28, 0x07	; 7
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	de bf       	out	0x3e, r29	; 62
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	cd bf       	out	0x3d, r28	; 61
    181c:	cf 91       	pop	r28
    181e:	df 91       	pop	r29
    1820:	08 95       	ret

00001822 <DIO_enumTogglePortValue>:
 * Parameters :
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePortValue(u8 Copy_u8PORT)
{
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	00 d0       	rcall	.+0      	; 0x1828 <DIO_enumTogglePortValue+0x6>
    1828:	00 d0       	rcall	.+0      	; 0x182a <DIO_enumTogglePortValue+0x8>
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	8a 83       	std	Y+2, r24	; 0x02
  DIO_errorStatus LOC_enumState = DIO_OK;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8PORT <= DIO_PORTD)
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	84 30       	cpi	r24, 0x04	; 4
    1838:	08 f0       	brcs	.+2      	; 0x183c <DIO_enumTogglePortValue+0x1a>
    183a:	3f c0       	rjmp	.+126    	; 0x18ba <DIO_enumTogglePortValue+0x98>
  {
    switch (Copy_u8PORT)
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	3c 83       	std	Y+4, r19	; 0x04
    1844:	2b 83       	std	Y+3, r18	; 0x03
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	9c 81       	ldd	r25, Y+4	; 0x04
    184a:	81 30       	cpi	r24, 0x01	; 1
    184c:	91 05       	cpc	r25, r1
    184e:	e9 f0       	breq	.+58     	; 0x188a <DIO_enumTogglePortValue+0x68>
    1850:	2b 81       	ldd	r18, Y+3	; 0x03
    1852:	3c 81       	ldd	r19, Y+4	; 0x04
    1854:	22 30       	cpi	r18, 0x02	; 2
    1856:	31 05       	cpc	r19, r1
    1858:	2c f4       	brge	.+10     	; 0x1864 <DIO_enumTogglePortValue+0x42>
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	61 f0       	breq	.+24     	; 0x187a <DIO_enumTogglePortValue+0x58>
    1862:	2c c0       	rjmp	.+88     	; 0x18bc <DIO_enumTogglePortValue+0x9a>
    1864:	2b 81       	ldd	r18, Y+3	; 0x03
    1866:	3c 81       	ldd	r19, Y+4	; 0x04
    1868:	22 30       	cpi	r18, 0x02	; 2
    186a:	31 05       	cpc	r19, r1
    186c:	b1 f0       	breq	.+44     	; 0x189a <DIO_enumTogglePortValue+0x78>
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	9c 81       	ldd	r25, Y+4	; 0x04
    1872:	83 30       	cpi	r24, 0x03	; 3
    1874:	91 05       	cpc	r25, r1
    1876:	c9 f0       	breq	.+50     	; 0x18aa <DIO_enumTogglePortValue+0x88>
    1878:	21 c0       	rjmp	.+66     	; 0x18bc <DIO_enumTogglePortValue+0x9a>
    {
    case DIO_PORTA:
      PORTA = ~PORTA;
    187a:	ab e3       	ldi	r26, 0x3B	; 59
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	eb e3       	ldi	r30, 0x3B	; 59
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	80 95       	com	r24
    1886:	8c 93       	st	X, r24
    1888:	19 c0       	rjmp	.+50     	; 0x18bc <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTB:
      PORTB = ~PORTB;
    188a:	a8 e3       	ldi	r26, 0x38	; 56
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e8 e3       	ldi	r30, 0x38	; 56
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	80 95       	com	r24
    1896:	8c 93       	st	X, r24
    1898:	11 c0       	rjmp	.+34     	; 0x18bc <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTC:
      PORTC = ~PORTC;
    189a:	a5 e3       	ldi	r26, 0x35	; 53
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e5 e3       	ldi	r30, 0x35	; 53
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	80 95       	com	r24
    18a6:	8c 93       	st	X, r24
    18a8:	09 c0       	rjmp	.+18     	; 0x18bc <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTD:
      PORTD = ~PORTD;
    18aa:	a2 e3       	ldi	r26, 0x32	; 50
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e2 e3       	ldi	r30, 0x32	; 50
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	80 95       	com	r24
    18b6:	8c 93       	st	X, r24
    18b8:	01 c0       	rjmp	.+2      	; 0x18bc <DIO_enumTogglePortValue+0x9a>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    18ba:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	cf 91       	pop	r28
    18c8:	df 91       	pop	r29
    18ca:	08 95       	ret

000018cc <DIO_vWriteLowNibble>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_errorStatus DIO_vWriteLowNibble(u8 Copy_u8PORT, u8 value)
{
    18cc:	df 93       	push	r29
    18ce:	cf 93       	push	r28
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <DIO_vWriteLowNibble+0x6>
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <DIO_vWriteLowNibble+0x8>
    18d4:	0f 92       	push	r0
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	8a 83       	std	Y+2, r24	; 0x02
    18dc:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	84 30       	cpi	r24, 0x04	; 4
    18e6:	08 f0       	brcs	.+2      	; 0x18ea <DIO_vWriteLowNibble+0x1e>
    18e8:	62 c0       	rjmp	.+196    	; 0x19ae <DIO_vWriteLowNibble+0xe2>
  {
    value &= 0x0F;
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	8f 70       	andi	r24, 0x0F	; 15
    18ee:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	28 2f       	mov	r18, r24
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	3d 83       	std	Y+5, r19	; 0x05
    18f8:	2c 83       	std	Y+4, r18	; 0x04
    18fa:	8c 81       	ldd	r24, Y+4	; 0x04
    18fc:	9d 81       	ldd	r25, Y+5	; 0x05
    18fe:	81 30       	cpi	r24, 0x01	; 1
    1900:	91 05       	cpc	r25, r1
    1902:	29 f1       	breq	.+74     	; 0x194e <DIO_vWriteLowNibble+0x82>
    1904:	2c 81       	ldd	r18, Y+4	; 0x04
    1906:	3d 81       	ldd	r19, Y+5	; 0x05
    1908:	22 30       	cpi	r18, 0x02	; 2
    190a:	31 05       	cpc	r19, r1
    190c:	2c f4       	brge	.+10     	; 0x1918 <DIO_vWriteLowNibble+0x4c>
    190e:	8c 81       	ldd	r24, Y+4	; 0x04
    1910:	9d 81       	ldd	r25, Y+5	; 0x05
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	61 f0       	breq	.+24     	; 0x192e <DIO_vWriteLowNibble+0x62>
    1916:	4c c0       	rjmp	.+152    	; 0x19b0 <DIO_vWriteLowNibble+0xe4>
    1918:	2c 81       	ldd	r18, Y+4	; 0x04
    191a:	3d 81       	ldd	r19, Y+5	; 0x05
    191c:	22 30       	cpi	r18, 0x02	; 2
    191e:	31 05       	cpc	r19, r1
    1920:	31 f1       	breq	.+76     	; 0x196e <DIO_vWriteLowNibble+0xa2>
    1922:	8c 81       	ldd	r24, Y+4	; 0x04
    1924:	9d 81       	ldd	r25, Y+5	; 0x05
    1926:	83 30       	cpi	r24, 0x03	; 3
    1928:	91 05       	cpc	r25, r1
    192a:	89 f1       	breq	.+98     	; 0x198e <DIO_vWriteLowNibble+0xc2>
    192c:	41 c0       	rjmp	.+130    	; 0x19b0 <DIO_vWriteLowNibble+0xe4>
    {
    case DIO_PORTA:
      PORTA &= 0xF0; // Set only the high nibble of the port A by the given value
    192e:	ab e3       	ldi	r26, 0x3B	; 59
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	eb e3       	ldi	r30, 0x3B	; 59
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	80 7f       	andi	r24, 0xF0	; 240
    193a:	8c 93       	st	X, r24
      PORTA |= value;
    193c:	ab e3       	ldi	r26, 0x3B	; 59
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	eb e3       	ldi	r30, 0x3B	; 59
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	90 81       	ld	r25, Z
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	89 2b       	or	r24, r25
    194a:	8c 93       	st	X, r24
    194c:	31 c0       	rjmp	.+98     	; 0x19b0 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTB:
      PORTB &= 0xF0; // Set only the high nibble of the port B by the given value
    194e:	a8 e3       	ldi	r26, 0x38	; 56
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e8 e3       	ldi	r30, 0x38	; 56
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	80 7f       	andi	r24, 0xF0	; 240
    195a:	8c 93       	st	X, r24
      PORTB |= value;
    195c:	a8 e3       	ldi	r26, 0x38	; 56
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e8 e3       	ldi	r30, 0x38	; 56
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	90 81       	ld	r25, Z
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	89 2b       	or	r24, r25
    196a:	8c 93       	st	X, r24
    196c:	21 c0       	rjmp	.+66     	; 0x19b0 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTC:
      PORTC &= 0xF0; // Set only the high nibble of the port C by the given value
    196e:	a5 e3       	ldi	r26, 0x35	; 53
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e5 e3       	ldi	r30, 0x35	; 53
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	80 7f       	andi	r24, 0xF0	; 240
    197a:	8c 93       	st	X, r24
      PORTC |= value;
    197c:	a5 e3       	ldi	r26, 0x35	; 53
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e5 e3       	ldi	r30, 0x35	; 53
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	90 81       	ld	r25, Z
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	89 2b       	or	r24, r25
    198a:	8c 93       	st	X, r24
    198c:	11 c0       	rjmp	.+34     	; 0x19b0 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTD:
      PORTD &= 0xF0; // Set only the high nibble of the port D by the given value
    198e:	a2 e3       	ldi	r26, 0x32	; 50
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e2 e3       	ldi	r30, 0x32	; 50
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	80 7f       	andi	r24, 0xF0	; 240
    199a:	8c 93       	st	X, r24
      PORTD |= value;
    199c:	a2 e3       	ldi	r26, 0x32	; 50
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e2 e3       	ldi	r30, 0x32	; 50
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	90 81       	ld	r25, Z
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	89 2b       	or	r24, r25
    19aa:	8c 93       	st	X, r24
    19ac:	01 c0       	rjmp	.+2      	; 0x19b0 <DIO_vWriteLowNibble+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    19ae:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <DIO_vWriteHighNibble>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_errorStatus DIO_vWriteHighNibble(u8 Copy_u8PORT, u8 value)
{
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	00 d0       	rcall	.+0      	; 0x19c8 <DIO_vWriteHighNibble+0x6>
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <DIO_vWriteHighNibble+0x8>
    19ca:	0f 92       	push	r0
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	8a 83       	std	Y+2, r24	; 0x02
    19d2:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	84 30       	cpi	r24, 0x04	; 4
    19dc:	08 f0       	brcs	.+2      	; 0x19e0 <DIO_vWriteHighNibble+0x1e>
    19de:	63 c0       	rjmp	.+198    	; 0x1aa6 <DIO_vWriteHighNibble+0xe4>
  {
    value <<= 4;
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	82 95       	swap	r24
    19e4:	80 7f       	andi	r24, 0xF0	; 240
    19e6:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	3d 83       	std	Y+5, r19	; 0x05
    19f0:	2c 83       	std	Y+4, r18	; 0x04
    19f2:	8c 81       	ldd	r24, Y+4	; 0x04
    19f4:	9d 81       	ldd	r25, Y+5	; 0x05
    19f6:	81 30       	cpi	r24, 0x01	; 1
    19f8:	91 05       	cpc	r25, r1
    19fa:	29 f1       	breq	.+74     	; 0x1a46 <DIO_vWriteHighNibble+0x84>
    19fc:	2c 81       	ldd	r18, Y+4	; 0x04
    19fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1a00:	22 30       	cpi	r18, 0x02	; 2
    1a02:	31 05       	cpc	r19, r1
    1a04:	2c f4       	brge	.+10     	; 0x1a10 <DIO_vWriteHighNibble+0x4e>
    1a06:	8c 81       	ldd	r24, Y+4	; 0x04
    1a08:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	61 f0       	breq	.+24     	; 0x1a26 <DIO_vWriteHighNibble+0x64>
    1a0e:	4c c0       	rjmp	.+152    	; 0x1aa8 <DIO_vWriteHighNibble+0xe6>
    1a10:	2c 81       	ldd	r18, Y+4	; 0x04
    1a12:	3d 81       	ldd	r19, Y+5	; 0x05
    1a14:	22 30       	cpi	r18, 0x02	; 2
    1a16:	31 05       	cpc	r19, r1
    1a18:	31 f1       	breq	.+76     	; 0x1a66 <DIO_vWriteHighNibble+0xa4>
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1e:	83 30       	cpi	r24, 0x03	; 3
    1a20:	91 05       	cpc	r25, r1
    1a22:	89 f1       	breq	.+98     	; 0x1a86 <DIO_vWriteHighNibble+0xc4>
    1a24:	41 c0       	rjmp	.+130    	; 0x1aa8 <DIO_vWriteHighNibble+0xe6>
    {
    case DIO_PORTA:
      PORTA &= 0x0F;
    1a26:	ab e3       	ldi	r26, 0x3B	; 59
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	eb e3       	ldi	r30, 0x3B	; 59
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	8f 70       	andi	r24, 0x0F	; 15
    1a32:	8c 93       	st	X, r24
      PORTA |= value;
    1a34:	ab e3       	ldi	r26, 0x3B	; 59
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	eb e3       	ldi	r30, 0x3B	; 59
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	90 81       	ld	r25, Z
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	89 2b       	or	r24, r25
    1a42:	8c 93       	st	X, r24
    1a44:	31 c0       	rjmp	.+98     	; 0x1aa8 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTB:
      PORTB &= 0x0F;
    1a46:	a8 e3       	ldi	r26, 0x38	; 56
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e8 e3       	ldi	r30, 0x38	; 56
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	8f 70       	andi	r24, 0x0F	; 15
    1a52:	8c 93       	st	X, r24
      PORTB |= value;
    1a54:	a8 e3       	ldi	r26, 0x38	; 56
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e8 e3       	ldi	r30, 0x38	; 56
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	90 81       	ld	r25, Z
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	89 2b       	or	r24, r25
    1a62:	8c 93       	st	X, r24
    1a64:	21 c0       	rjmp	.+66     	; 0x1aa8 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTC:
      PORTC &= 0x0F;
    1a66:	a5 e3       	ldi	r26, 0x35	; 53
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e5 e3       	ldi	r30, 0x35	; 53
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	8f 70       	andi	r24, 0x0F	; 15
    1a72:	8c 93       	st	X, r24
      PORTC |= value;
    1a74:	a5 e3       	ldi	r26, 0x35	; 53
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e5 e3       	ldi	r30, 0x35	; 53
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	90 81       	ld	r25, Z
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	89 2b       	or	r24, r25
    1a82:	8c 93       	st	X, r24
    1a84:	11 c0       	rjmp	.+34     	; 0x1aa8 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTD:
      PORTD &= 0x0F;
    1a86:	a2 e3       	ldi	r26, 0x32	; 50
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e2 e3       	ldi	r30, 0x32	; 50
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	8f 70       	andi	r24, 0x0F	; 15
    1a92:	8c 93       	st	X, r24
      PORTD |= value;
    1a94:	a2 e3       	ldi	r26, 0x32	; 50
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e2 e3       	ldi	r30, 0x32	; 50
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	90 81       	ld	r25, Z
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	89 2b       	or	r24, r25
    1aa2:	8c 93       	st	X, r24
    1aa4:	01 c0       	rjmp	.+2      	; 0x1aa8 <DIO_vWriteHighNibble+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    1aa6:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <DIO_vSetLowNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetLowNibbleDir(u8 Copy_u8PORT, u8 value)
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <DIO_vSetLowNibbleDir+0x6>
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <DIO_vSetLowNibbleDir+0x8>
    1ac2:	0f 92       	push	r0
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	8a 83       	std	Y+2, r24	; 0x02
    1aca:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	84 30       	cpi	r24, 0x04	; 4
    1ad4:	08 f0       	brcs	.+2      	; 0x1ad8 <DIO_vSetLowNibbleDir+0x1e>
    1ad6:	62 c0       	rjmp	.+196    	; 0x1b9c <DIO_vSetLowNibbleDir+0xe2>
  {
    value &= 0x0F;
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	8f 70       	andi	r24, 0x0F	; 15
    1adc:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	3d 83       	std	Y+5, r19	; 0x05
    1ae6:	2c 83       	std	Y+4, r18	; 0x04
    1ae8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aea:	9d 81       	ldd	r25, Y+5	; 0x05
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	91 05       	cpc	r25, r1
    1af0:	29 f1       	breq	.+74     	; 0x1b3c <DIO_vSetLowNibbleDir+0x82>
    1af2:	2c 81       	ldd	r18, Y+4	; 0x04
    1af4:	3d 81       	ldd	r19, Y+5	; 0x05
    1af6:	22 30       	cpi	r18, 0x02	; 2
    1af8:	31 05       	cpc	r19, r1
    1afa:	2c f4       	brge	.+10     	; 0x1b06 <DIO_vSetLowNibbleDir+0x4c>
    1afc:	8c 81       	ldd	r24, Y+4	; 0x04
    1afe:	9d 81       	ldd	r25, Y+5	; 0x05
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	61 f0       	breq	.+24     	; 0x1b1c <DIO_vSetLowNibbleDir+0x62>
    1b04:	4c c0       	rjmp	.+152    	; 0x1b9e <DIO_vSetLowNibbleDir+0xe4>
    1b06:	2c 81       	ldd	r18, Y+4	; 0x04
    1b08:	3d 81       	ldd	r19, Y+5	; 0x05
    1b0a:	22 30       	cpi	r18, 0x02	; 2
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	31 f1       	breq	.+76     	; 0x1b5c <DIO_vSetLowNibbleDir+0xa2>
    1b10:	8c 81       	ldd	r24, Y+4	; 0x04
    1b12:	9d 81       	ldd	r25, Y+5	; 0x05
    1b14:	83 30       	cpi	r24, 0x03	; 3
    1b16:	91 05       	cpc	r25, r1
    1b18:	89 f1       	breq	.+98     	; 0x1b7c <DIO_vSetLowNibbleDir+0xc2>
    1b1a:	41 c0       	rjmp	.+130    	; 0x1b9e <DIO_vSetLowNibbleDir+0xe4>
    {
    case DIO_PORTA:
      DDRA &= 0xF0; // Set only the high nibble of the port A by the given value
    1b1c:	aa e3       	ldi	r26, 0x3A	; 58
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	ea e3       	ldi	r30, 0x3A	; 58
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	80 7f       	andi	r24, 0xF0	; 240
    1b28:	8c 93       	st	X, r24
      DDRA |= value;
    1b2a:	aa e3       	ldi	r26, 0x3A	; 58
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	ea e3       	ldi	r30, 0x3A	; 58
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	90 81       	ld	r25, Z
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	89 2b       	or	r24, r25
    1b38:	8c 93       	st	X, r24
    1b3a:	31 c0       	rjmp	.+98     	; 0x1b9e <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTB:
      DDRB &= 0xF0; // Set only the high nibble of the port B by the given value
    1b3c:	a7 e3       	ldi	r26, 0x37	; 55
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e7 e3       	ldi	r30, 0x37	; 55
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	80 7f       	andi	r24, 0xF0	; 240
    1b48:	8c 93       	st	X, r24
      DDRB |= value;
    1b4a:	a7 e3       	ldi	r26, 0x37	; 55
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e7 e3       	ldi	r30, 0x37	; 55
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	90 81       	ld	r25, Z
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	89 2b       	or	r24, r25
    1b58:	8c 93       	st	X, r24
    1b5a:	21 c0       	rjmp	.+66     	; 0x1b9e <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTC:
      DDRC &= 0xF0; // Set only the high nibble of the port C by the given value
    1b5c:	a4 e3       	ldi	r26, 0x34	; 52
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	e4 e3       	ldi	r30, 0x34	; 52
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	80 7f       	andi	r24, 0xF0	; 240
    1b68:	8c 93       	st	X, r24
      DDRC |= value;
    1b6a:	a4 e3       	ldi	r26, 0x34	; 52
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e4 e3       	ldi	r30, 0x34	; 52
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	90 81       	ld	r25, Z
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	89 2b       	or	r24, r25
    1b78:	8c 93       	st	X, r24
    1b7a:	11 c0       	rjmp	.+34     	; 0x1b9e <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTD:
      DDRD &= 0xF0; // Set only the high nibble of the port D by the given value
    1b7c:	a1 e3       	ldi	r26, 0x31	; 49
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e1 e3       	ldi	r30, 0x31	; 49
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	80 7f       	andi	r24, 0xF0	; 240
    1b88:	8c 93       	st	X, r24
      DDRD |= value;
    1b8a:	a1 e3       	ldi	r26, 0x31	; 49
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e1 e3       	ldi	r30, 0x31	; 49
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	90 81       	ld	r25, Z
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	89 2b       	or	r24, r25
    1b98:	8c 93       	st	X, r24
    1b9a:	01 c0       	rjmp	.+2      	; 0x1b9e <DIO_vSetLowNibbleDir+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    1b9c:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	08 95       	ret

00001bb0 <DIO_vSetHighNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetHighNibbleDir(u8 Copy_u8PORT, u8 value)
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <DIO_vSetHighNibbleDir+0x6>
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <DIO_vSetHighNibbleDir+0x8>
    1bb8:	0f 92       	push	r0
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	8a 83       	std	Y+2, r24	; 0x02
    1bc0:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	84 30       	cpi	r24, 0x04	; 4
    1bca:	08 f0       	brcs	.+2      	; 0x1bce <DIO_vSetHighNibbleDir+0x1e>
    1bcc:	63 c0       	rjmp	.+198    	; 0x1c94 <DIO_vSetHighNibbleDir+0xe4>
  {
    value <<= 4;
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	82 95       	swap	r24
    1bd2:	80 7f       	andi	r24, 0xF0	; 240
    1bd4:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	3d 83       	std	Y+5, r19	; 0x05
    1bde:	2c 83       	std	Y+4, r18	; 0x04
    1be0:	8c 81       	ldd	r24, Y+4	; 0x04
    1be2:	9d 81       	ldd	r25, Y+5	; 0x05
    1be4:	81 30       	cpi	r24, 0x01	; 1
    1be6:	91 05       	cpc	r25, r1
    1be8:	29 f1       	breq	.+74     	; 0x1c34 <DIO_vSetHighNibbleDir+0x84>
    1bea:	2c 81       	ldd	r18, Y+4	; 0x04
    1bec:	3d 81       	ldd	r19, Y+5	; 0x05
    1bee:	22 30       	cpi	r18, 0x02	; 2
    1bf0:	31 05       	cpc	r19, r1
    1bf2:	2c f4       	brge	.+10     	; 0x1bfe <DIO_vSetHighNibbleDir+0x4e>
    1bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	61 f0       	breq	.+24     	; 0x1c14 <DIO_vSetHighNibbleDir+0x64>
    1bfc:	4c c0       	rjmp	.+152    	; 0x1c96 <DIO_vSetHighNibbleDir+0xe6>
    1bfe:	2c 81       	ldd	r18, Y+4	; 0x04
    1c00:	3d 81       	ldd	r19, Y+5	; 0x05
    1c02:	22 30       	cpi	r18, 0x02	; 2
    1c04:	31 05       	cpc	r19, r1
    1c06:	31 f1       	breq	.+76     	; 0x1c54 <DIO_vSetHighNibbleDir+0xa4>
    1c08:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0c:	83 30       	cpi	r24, 0x03	; 3
    1c0e:	91 05       	cpc	r25, r1
    1c10:	89 f1       	breq	.+98     	; 0x1c74 <DIO_vSetHighNibbleDir+0xc4>
    1c12:	41 c0       	rjmp	.+130    	; 0x1c96 <DIO_vSetHighNibbleDir+0xe6>
    {
    case DIO_PORTA:
      DDRA &= 0x0F;
    1c14:	aa e3       	ldi	r26, 0x3A	; 58
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	ea e3       	ldi	r30, 0x3A	; 58
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	8f 70       	andi	r24, 0x0F	; 15
    1c20:	8c 93       	st	X, r24
      DDRA |= value;
    1c22:	aa e3       	ldi	r26, 0x3A	; 58
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	ea e3       	ldi	r30, 0x3A	; 58
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	90 81       	ld	r25, Z
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	89 2b       	or	r24, r25
    1c30:	8c 93       	st	X, r24
    1c32:	31 c0       	rjmp	.+98     	; 0x1c96 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTB:
      DDRB &= 0x0F;
    1c34:	a7 e3       	ldi	r26, 0x37	; 55
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e7 e3       	ldi	r30, 0x37	; 55
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	8f 70       	andi	r24, 0x0F	; 15
    1c40:	8c 93       	st	X, r24
      DDRB |= value;
    1c42:	a7 e3       	ldi	r26, 0x37	; 55
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e7 e3       	ldi	r30, 0x37	; 55
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	90 81       	ld	r25, Z
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	89 2b       	or	r24, r25
    1c50:	8c 93       	st	X, r24
    1c52:	21 c0       	rjmp	.+66     	; 0x1c96 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTC:
      DDRC &= 0x0F;
    1c54:	a4 e3       	ldi	r26, 0x34	; 52
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e4 e3       	ldi	r30, 0x34	; 52
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	8f 70       	andi	r24, 0x0F	; 15
    1c60:	8c 93       	st	X, r24
      DDRC |= value;
    1c62:	a4 e3       	ldi	r26, 0x34	; 52
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e4 e3       	ldi	r30, 0x34	; 52
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	90 81       	ld	r25, Z
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	89 2b       	or	r24, r25
    1c70:	8c 93       	st	X, r24
    1c72:	11 c0       	rjmp	.+34     	; 0x1c96 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTD:
      DDRD &= 0x0F;
    1c74:	a1 e3       	ldi	r26, 0x31	; 49
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e1 e3       	ldi	r30, 0x31	; 49
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	8f 70       	andi	r24, 0x0F	; 15
    1c80:	8c 93       	st	X, r24
      DDRD |= value;
    1c82:	a1 e3       	ldi	r26, 0x31	; 49
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e1 e3       	ldi	r30, 0x31	; 49
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	90 81       	ld	r25, Z
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	89 2b       	or	r24, r25
    1c90:	8c 93       	st	X, r24
    1c92:	01 c0       	rjmp	.+2      	; 0x1c96 <DIO_vSetHighNibbleDir+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    1c94:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	08 95       	ret

00001ca8 <Servo_Motor_vInit>:
#include "TIMER_interface.h"
#include "TIMER_private.h"


void Servo_Motor_vInit(void)
{
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
  DIO_enumSetPinDir(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT);
    1cb0:	83 e0       	ldi	r24, 0x03	; 3
    1cb2:	65 e0       	ldi	r22, 0x05	; 5
    1cb4:	41 e0       	ldi	r20, 0x01	; 1
    1cb6:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_enumSetPinDir>
}
    1cba:	cf 91       	pop	r28
    1cbc:	df 91       	pop	r29
    1cbe:	08 95       	ret

00001cc0 <Servo_Motor_vTimer1Degree>:

void Servo_Motor_vTimer1Degree(s8 degree)
{
    1cc0:	0f 93       	push	r16
    1cc2:	1f 93       	push	r17
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <Servo_Motor_vTimer1Degree+0xa>
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <Servo_Motor_vTimer1Degree+0xc>
    1ccc:	0f 92       	push	r0
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	8d 83       	std	Y+5, r24	; 0x05
  TCNT1 = 0;
    1cd4:	ec e4       	ldi	r30, 0x4C	; 76
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	11 82       	std	Z+1, r1	; 0x01
    1cda:	10 82       	st	Z, r1
  double value = degree * .005555555556;
    1cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cde:	99 27       	eor	r25, r25
    1ce0:	87 fd       	sbrc	r24, 7
    1ce2:	90 95       	com	r25
    1ce4:	a9 2f       	mov	r26, r25
    1ce6:	b9 2f       	mov	r27, r25
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	bc 01       	movw	r22, r24
    1cf6:	cd 01       	movw	r24, r26
    1cf8:	21 e6       	ldi	r18, 0x61	; 97
    1cfa:	3b e0       	ldi	r19, 0x0B	; 11
    1cfc:	46 eb       	ldi	r20, 0xB6	; 182
    1cfe:	5b e3       	ldi	r21, 0x3B	; 59
    1d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	89 83       	std	Y+1, r24	; 0x01
    1d0a:	9a 83       	std	Y+2, r25	; 0x02
    1d0c:	ab 83       	std	Y+3, r26	; 0x03
    1d0e:	bc 83       	std	Y+4, r27	; 0x04

  if (0 < value <= 90)
  {
    value += 1.5;
    1d10:	69 81       	ldd	r22, Y+1	; 0x01
    1d12:	7a 81       	ldd	r23, Y+2	; 0x02
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	9c 81       	ldd	r25, Y+4	; 0x04
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 ec       	ldi	r20, 0xC0	; 192
    1d1e:	5f e3       	ldi	r21, 0x3F	; 63
    1d20:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	9a 83       	std	Y+2, r25	; 0x02
    1d2c:	ab 83       	std	Y+3, r26	; 0x03
    1d2e:	bc 83       	std	Y+4, r27	; 0x04
  }
  else if (-90 <= value < 0)
  {
    value -= 1.5;
  }
  OCR1A = value * 1000;
    1d30:	0a e4       	ldi	r16, 0x4A	; 74
    1d32:	10 e0       	ldi	r17, 0x00	; 0
    1d34:	69 81       	ldd	r22, Y+1	; 0x01
    1d36:	7a 81       	ldd	r23, Y+2	; 0x02
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	4a e7       	ldi	r20, 0x7A	; 122
    1d42:	54 e4       	ldi	r21, 0x44	; 68
    1d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	bc 01       	movw	r22, r24
    1d4e:	cd 01       	movw	r24, r26
    1d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	f8 01       	movw	r30, r16
    1d5a:	91 83       	std	Z+1, r25	; 0x01
    1d5c:	80 83       	st	Z, r24
}
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	1f 91       	pop	r17
    1d6e:	0f 91       	pop	r16
    1d70:	08 95       	ret

00001d72 <TIMER0_vInit>:
static void (*TIMERS_pvCallBackFunc[8])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */


/*******************************************************************************************************************/
void TIMER0_vInit(void)
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
	/*Set Configurable Modes*/
		#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR0 , TCCR0_WGM00) ;
    1d7a:	a3 e5       	ldi	r26, 0x53	; 83
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e3 e5       	ldi	r30, 0x53	; 83
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	8f 7b       	andi	r24, 0xBF	; 191
    1d86:	8c 93       	st	X, r24
			CLR_BIT(TCCR0 , TCCR0_WGM01) ;
    1d88:	a3 e5       	ldi	r26, 0x53	; 83
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e3 e5       	ldi	r30, 0x53	; 83
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	87 7f       	andi	r24, 0xF7	; 247
    1d94:	8c 93       	st	X, r24

			/*Set the Required Preload Value*/
			TCNT0 = TIMER0_PRELOAD_VAL ;
    1d96:	e2 e5       	ldi	r30, 0x52	; 82
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 ec       	ldi	r24, 0xC0	; 192
    1d9c:	80 83       	st	Z, r24

			/*Timer0 Overflow Interrupt Enable*/
			#if TIMER0_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE0) ;
			#elif TIMER0_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE0) ;
    1d9e:	a9 e5       	ldi	r26, 0x59	; 89
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e9 e5       	ldi	r30, 0x59	; 89
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	81 60       	ori	r24, 0x01	; 1
    1daa:	8c 93       	st	X, r24
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    1dac:	a3 e5       	ldi	r26, 0x53	; 83
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e3 e5       	ldi	r30, 0x53	; 83
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	88 7f       	andi	r24, 0xF8	; 248
    1db8:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER ;
    1dba:	a3 e5       	ldi	r26, 0x53	; 83
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e3 e5       	ldi	r30, 0x53	; 83
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	82 60       	ori	r24, 0x02	; 2
    1dc6:	8c 93       	st	X, r24
}
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <TIMER1_vInit>:

/*___________________________________________________________________________________________________________________*/

void TIMER1_vInit(void)
{
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
				SET_BIT(TCCR1A,TCCR1A_WGM10);
				SET_BIT(TCCR1A,TCCR1A_WGM11);
				SET_BIT(TCCR1B,TCCR1B_WGM12);
				SET_BIT(TCCR1B,TCCR1B_WGM13);
			#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1dd6:	af e4       	ldi	r26, 0x4F	; 79
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	ef e4       	ldi	r30, 0x4F	; 79
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	8e 7f       	andi	r24, 0xFE	; 254
    1de2:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    1de4:	af e4       	ldi	r26, 0x4F	; 79
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	ef e4       	ldi	r30, 0x4F	; 79
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	82 60       	ori	r24, 0x02	; 2
    1df0:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM12);
    1df2:	ae e4       	ldi	r26, 0x4E	; 78
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	ee e4       	ldi	r30, 0x4E	; 78
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	88 60       	ori	r24, 0x08	; 8
    1dfe:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM13);
    1e00:	ae e4       	ldi	r26, 0x4E	; 78
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	ee e4       	ldi	r30, 0x4E	; 78
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	80 61       	ori	r24, 0x10	; 16
    1e0c:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
			#endif

			/*Set the require CTC Values*/
			OCR1A = TIMER1_CTCA_VAL ;
    1e0e:	ea e4       	ldi	r30, 0x4A	; 74
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	11 82       	std	Z+1, r1	; 0x01
    1e14:	10 82       	st	Z, r1
			OCR1B = TIMER1_CTCB_VAL ;
    1e16:	e8 e4       	ldi	r30, 0x48	; 72
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	11 82       	std	Z+1, r1	; 0x01
    1e1c:	10 82       	st	Z, r1

			/*Set ICR1*/
			#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				ICR1 = TIMER1_ICR1_VAL ;
    1e1e:	e6 e4       	ldi	r30, 0x46	; 70
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	8f e1       	ldi	r24, 0x1F	; 31
    1e24:	9e e4       	ldi	r25, 0x4E	; 78
    1e26:	91 83       	std	Z+1, r25	; 0x01
    1e28:	80 83       	st	Z, r24

				#if TIMER1_ICR_EDGE == RISING_EDGE
					SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    1e2a:	ae e4       	ldi	r26, 0x4E	; 78
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	ee e4       	ldi	r30, 0x4E	; 78
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	80 64       	ori	r24, 0x40	; 64
    1e36:	8c 93       	st	X, r24
			/*Set OCR1A mode*/
			#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    1e38:	af e4       	ldi	r26, 0x4F	; 79
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	ef e4       	ldi	r30, 0x4F	; 79
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	8f 7b       	andi	r24, 0xBF	; 191
    1e44:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    1e46:	af e4       	ldi	r26, 0x4F	; 79
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	ef e4       	ldi	r30, 0x4F	; 79
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	80 68       	ori	r24, 0x80	; 128
    1e52:	8c 93       	st	X, r24
			/*Set OCR1B mode*/
			#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
			#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    1e54:	af e4       	ldi	r26, 0x4F	; 79
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	ef e4       	ldi	r30, 0x4F	; 79
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	8f 7e       	andi	r24, 0xEF	; 239
    1e60:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    1e62:	af e4       	ldi	r26, 0x4F	; 79
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	ef e4       	ldi	r30, 0x4F	; 79
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	80 62       	ori	r24, 0x20	; 32
    1e6e:	8c 93       	st	X, r24
				#error "Wrong TIMER1_OCR1B_MODE Config"
			#endif

			/*Timer1 PWM Interrupt Enable*/
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    1e70:	a9 e5       	ldi	r26, 0x59	; 89
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e9 e5       	ldi	r30, 0x59	; 89
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	8b 7f       	andi	r24, 0xFB	; 251
    1e7c:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
			#endif

			#if TIMER1_CTCA_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    1e7e:	a9 e5       	ldi	r26, 0x59	; 89
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e9 e5       	ldi	r30, 0x59	; 89
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	8f 7e       	andi	r24, 0xEF	; 239
    1e8a:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCA_INTERRUPT Config"
			#endif

			#if TIMER1_CTCB_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    1e8c:	a9 e5       	ldi	r26, 0x59	; 89
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e9 e5       	ldi	r30, 0x59	; 89
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	87 7f       	andi	r24, 0xF7	; 247
    1e98:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCB_INTERRUPT Config"
			#endif

			#if TIMER1_ICR_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    1e9a:	a9 e5       	ldi	r26, 0x59	; 89
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e9 e5       	ldi	r30, 0x59	; 89
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	8f 7d       	andi	r24, 0xDF	; 223
    1ea6:	8c 93       	st	X, r24
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    1ea8:	ae e4       	ldi	r26, 0x4E	; 78
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	ee e4       	ldi	r30, 0x4E	; 78
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	88 7f       	andi	r24, 0xF8	; 248
    1eb4:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER ;
    1eb6:	ae e4       	ldi	r26, 0x4E	; 78
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	ee e4       	ldi	r30, 0x4E	; 78
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	82 60       	ori	r24, 0x02	; 2
    1ec2:	8c 93       	st	X, r24


}
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	08 95       	ret

00001eca <TIMER2_vInit>:

void TIMER2_vInit(void)
{
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
	#if TIMER2_EXTERNAL_CLK == ENABLE
		SET_BIT(ASSR, ASSR_AS2);
    1ed2:	a2 e4       	ldi	r26, 0x42	; 66
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e2 e4       	ldi	r30, 0x42	; 66
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	88 60       	ori	r24, 0x08	; 8
    1ede:	8c 93       	st	X, r24
	#endif
	/*Set Configurable Modes*/
		#if TIMER2_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR2 , TCCR2_WGM20) ;
    1ee0:	a5 e4       	ldi	r26, 0x45	; 69
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e5 e4       	ldi	r30, 0x45	; 69
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	8f 7b       	andi	r24, 0xBF	; 191
    1eec:	8c 93       	st	X, r24
			CLR_BIT(TCCR2 , TCCR2_WGM21) ;
    1eee:	a5 e4       	ldi	r26, 0x45	; 69
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e5 e4       	ldi	r30, 0x45	; 69
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	87 7f       	andi	r24, 0xF7	; 247
    1efa:	8c 93       	st	X, r24

			/*Set the Required Preload Value*/
			TCNT2 = TIMER2_PRELOAD_VAL ;
    1efc:	e4 e4       	ldi	r30, 0x44	; 68
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	10 82       	st	Z, r1

			/*Timer2 Overflow Interrupt Enable*/
			#if TIMER2_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE2) ;
			#elif TIMER2_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE2) ;
    1f02:	a9 e5       	ldi	r26, 0x59	; 89
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e9 e5       	ldi	r30, 0x59	; 89
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	80 64       	ori	r24, 0x40	; 64
    1f0e:	8c 93       	st	X, r24
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    1f10:	a5 e4       	ldi	r26, 0x45	; 69
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e5 e4       	ldi	r30, 0x45	; 69
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	88 7f       	andi	r24, 0xF8	; 248
    1f1c:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_PRESCALER ;
    1f1e:	a5 e4       	ldi	r26, 0x45	; 69
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e5 e4       	ldi	r30, 0x45	; 69
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	81 60       	ori	r24, 0x01	; 1
    1f2a:	8c 93       	st	X, r24
}
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <TIMER0_vSetPreload>:

/*******************************************************************************************************************/
void TIMER0_vSetPreload (u8 Copy_u8Preload)
{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	0f 92       	push	r0
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
    1f3e:	e2 e5       	ldi	r30, 0x52	; 82
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	80 83       	st	Z, r24
}
    1f46:	0f 90       	pop	r0
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <TIMER1_vSetPreload>:

void TIMER1_vSetPreload (u16 Copy_u16Preload)
{
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <TIMER1_vSetPreload+0x6>
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	9a 83       	std	Y+2, r25	; 0x02
    1f5a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload ;
    1f5c:	ec e4       	ldi	r30, 0x4C	; 76
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	9a 81       	ldd	r25, Y+2	; 0x02
    1f64:	91 83       	std	Z+1, r25	; 0x01
    1f66:	80 83       	st	Z, r24
}
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <TIMER2_vSetPreload>:


void TIMER2_vSetPreload (u8 Copy_u8Preload)
{
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	0f 92       	push	r0
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload ;
    1f7e:	e4 e4       	ldi	r30, 0x44	; 68
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	80 83       	st	Z, r24
}
    1f86:	0f 90       	pop	r0
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <TIMER0_vSetCTC>:

void TIMER0_vSetCTC (u8 Copy_u8CTC)
{
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	0f 92       	push	r0
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
    1f9a:	ec e5       	ldi	r30, 0x5C	; 92
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	80 83       	st	Z, r24
}
    1fa2:	0f 90       	pop	r0
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <TIMER1_vSetCTCA>:

void TIMER1_vSetCTCA (u16 Copy_u16CTCA)
{
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <TIMER1_vSetCTCA+0x6>
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	9a 83       	std	Y+2, r25	; 0x02
    1fb6:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCA ;
    1fb8:	ea e4       	ldi	r30, 0x4A	; 74
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc0:	91 83       	std	Z+1, r25	; 0x01
    1fc2:	80 83       	st	Z, r24
}
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <TIMER1_vSetCTCB>:

void TIMER1_vSetCTCB (u16 Copy_u16CTCB)
{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <TIMER1_vSetCTCB+0x6>
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	9a 83       	std	Y+2, r25	; 0x02
    1fda:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CTCB ;
    1fdc:	e8 e4       	ldi	r30, 0x48	; 72
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe4:	91 83       	std	Z+1, r25	; 0x01
    1fe6:	80 83       	st	Z, r24
}
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <TIMER2_vSetCTC>:

void TIMER2_vSetCTC (u8 Copy_u8CTC)
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	0f 92       	push	r0
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTC ;
    1ffe:	e3 e4       	ldi	r30, 0x43	; 67
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	80 83       	st	Z, r24
}
    2006:	0f 90       	pop	r0
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <TIMER1_vSetICR1>:

void TIMER1_vSetICR1 (u16 Copy_u16ICR1)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	00 d0       	rcall	.+0      	; 0x2014 <TIMER1_vSetICR1+0x6>
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	9a 83       	std	Y+2, r25	; 0x02
    201a:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16ICR1 ;
    201c:	e6 e4       	ldi	r30, 0x46	; 70
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	9a 81       	ldd	r25, Y+2	; 0x02
    2024:	91 83       	std	Z+1, r25	; 0x01
    2026:	80 83       	st	Z, r24
}
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	08 95       	ret

00002032 <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
    2032:	df 93       	push	r29
    2034:	cf 93       	push	r28
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    203a:	e2 e5       	ldi	r30, 0x52	; 82
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
}
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    204e:	ec e4       	ldi	r30, 0x4C	; 76
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	91 81       	ldd	r25, Z+1	; 0x01
}
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
    2064:	e4 e4       	ldi	r30, 0x44	; 68
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
}
    206a:	cf 91       	pop	r28
    206c:	df 91       	pop	r29
    206e:	08 95       	ret

00002070 <TIMER_vSetPWM>:

/*******************************************************************************************************************/

void TIMER_vSetPWM(u16 Copy_u16CompareValue)
{
    2070:	df 93       	push	r29
    2072:	cf 93       	push	r28
    2074:	00 d0       	rcall	.+0      	; 0x2076 <TIMER_vSetPWM+0x6>
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	9a 83       	std	Y+2, r25	; 0x02
    207c:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
    207e:	ea e4       	ldi	r30, 0x4A	; 74
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	9a 81       	ldd	r25, Y+2	; 0x02
    2086:	91 83       	std	Z+1, r25	; 0x01
    2088:	80 83       	st	Z, r24
}
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <TIMER_vICUInitEnable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Hint : This func for initial state of trigger (prebuild)
*/
void TIMER_vICUInitEnable(void)
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    209c:	ae e4       	ldi	r26, 0x4E	; 78
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	ee e4       	ldi	r30, 0x4E	; 78
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	80 64       	ori	r24, 0x40	; 64
    20a8:	8c 93       	st	X, r24
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
	#endif
	
	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    20aa:	a9 e5       	ldi	r26, 0x59	; 89
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	e9 e5       	ldi	r30, 0x59	; 89
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	80 62       	ori	r24, 0x20	; 32
    20b6:	8c 93       	st	X, r24
}
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <TIMER_vICUSetTriggerEdge>:
	Options :-
	 1- TIMER_u8_ICP_RAISING_EDGE
	 2- TIMER_u8_ICP_FALLING_EDGE
*/
u8 TIMER_vICUSetTriggerEdge(u8 Copy_u8Edge)
{
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	00 d0       	rcall	.+0      	; 0x20c4 <TIMER_vICUSetTriggerEdge+0x6>
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK ;
    20ca:	19 82       	std	Y+1, r1	; 0x01
	
	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	81 30       	cpi	r24, 0x01	; 1
    20d0:	41 f4       	brne	.+16     	; 0x20e2 <TIMER_vICUSetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    20d2:	ae e4       	ldi	r26, 0x4E	; 78
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	ee e4       	ldi	r30, 0x4E	; 78
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	80 64       	ori	r24, 0x40	; 64
    20de:	8c 93       	st	X, r24
    20e0:	0d c0       	rjmp	.+26     	; 0x20fc <TIMER_vICUSetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    20e2:	8a 81       	ldd	r24, Y+2	; 0x02
    20e4:	88 23       	and	r24, r24
    20e6:	41 f4       	brne	.+16     	; 0x20f8 <TIMER_vICUSetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    20e8:	ae e4       	ldi	r26, 0x4E	; 78
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	ee e4       	ldi	r30, 0x4E	; 78
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	8f 7b       	andi	r24, 0xBF	; 191
    20f4:	8c 93       	st	X, r24
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <TIMER_vICUSetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus = NOK ;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	08 95       	ret

00002108 <TIMER_vICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vICUEnableInterrupt(void)
{
    2108:	df 93       	push	r29
    210a:	cf 93       	push	r28
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    2110:	a9 e5       	ldi	r26, 0x59	; 89
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e9 e5       	ldi	r30, 0x59	; 89
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	80 62       	ori	r24, 0x20	; 32
    211c:	8c 93       	st	X, r24
}
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <TIMER_vICUDisableInterrupt>:


//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vICUDisableInterrupt(void)
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    212c:	a9 e5       	ldi	r26, 0x59	; 89
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e9 e5       	ldi	r30, 0x59	; 89
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	8f 7d       	andi	r24, 0xDF	; 223
    2138:	8c 93       	st	X, r24
}
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <TIMER_u16GetICR>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u16 TIMER_u16GetICR(void)
{
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2148:	e6 e4       	ldi	r30, 0x46	; 70
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	91 81       	ldd	r25, Z+1	; 0x01
}
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	08 95       	ret

00002156 <TIMER_vWDTSleep>:
*/

//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : prebuild config  */
void TIMER_vWDTSleep(void)
{
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    215e:	a1 e4       	ldi	r26, 0x41	; 65
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e1 e4       	ldi	r30, 0x41	; 65
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	88 7f       	andi	r24, 0xF8	; 248
    216a:	8c 93       	st	X, r24
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    216c:	a1 e4       	ldi	r26, 0x41	; 65
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e1 e4       	ldi	r30, 0x41	; 65
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	86 60       	ori	r24, 0x06	; 6
    2178:	8c 93       	st	X, r24
}
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <TIMER_vWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vWDTEnable (void)
{
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (WDTCR , WDTCR_WDE);
    2188:	a1 e4       	ldi	r26, 0x41	; 65
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	e1 e4       	ldi	r30, 0x41	; 65
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	88 60       	ori	r24, 0x08	; 8
    2194:	8c 93       	st	X, r24
}
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	08 95       	ret

0000219c <TIMER_vWDTDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_vWDTDisable (void)
{
    219c:	df 93       	push	r29
    219e:	cf 93       	push	r28
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    21a4:	a1 e4       	ldi	r26, 0x41	; 65
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e1 e4       	ldi	r30, 0x41	; 65
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	88 61       	ori	r24, 0x18	; 24
    21b0:	8c 93       	st	X, r24
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    21b2:	e1 e4       	ldi	r30, 0x41	; 65
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	10 82       	st	Z, r1
}
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	08 95       	ret

000021be <TIMER_u8SetCallBack>:

//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	00 d0       	rcall	.+0      	; 0x21c4 <TIMER_u8SetCallBack+0x6>
    21c4:	00 d0       	rcall	.+0      	; 0x21c6 <TIMER_u8SetCallBack+0x8>
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	9b 83       	std	Y+3, r25	; 0x03
    21cc:	8a 83       	std	Y+2, r24	; 0x02
    21ce:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK ;
    21d0:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	9b 81       	ldd	r25, Y+3	; 0x03
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	69 f0       	breq	.+26     	; 0x21f4 <TIMER_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    21da:	8c 81       	ldd	r24, Y+4	; 0x04
    21dc:	88 2f       	mov	r24, r24
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	fc 01       	movw	r30, r24
    21e6:	e8 59       	subi	r30, 0x98	; 152
    21e8:	fe 4f       	sbci	r31, 0xFE	; 254
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	9b 81       	ldd	r25, Y+3	; 0x03
    21ee:	91 83       	std	Z+1, r25	; 0x01
    21f0:	80 83       	st	Z, r24
    21f2:	02 c0       	rjmp	.+4      	; 0x21f8 <TIMER_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    21f4:	82 e0       	ldi	r24, 0x02	; 2
    21f6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	cf 91       	pop	r28
    2204:	df 91       	pop	r29
    2206:	08 95       	ret

00002208 <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
    2208:	1f 92       	push	r1
    220a:	0f 92       	push	r0
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	0f 92       	push	r0
    2210:	11 24       	eor	r1, r1
    2212:	2f 93       	push	r18
    2214:	3f 93       	push	r19
    2216:	4f 93       	push	r20
    2218:	5f 93       	push	r21
    221a:	6f 93       	push	r22
    221c:	7f 93       	push	r23
    221e:	8f 93       	push	r24
    2220:	9f 93       	push	r25
    2222:	af 93       	push	r26
    2224:	bf 93       	push	r27
    2226:	ef 93       	push	r30
    2228:	ff 93       	push	r31
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    2232:	80 91 7e 01 	lds	r24, 0x017E
    2236:	90 91 7f 01 	lds	r25, 0x017F
    223a:	00 97       	sbiw	r24, 0x00	; 0
    223c:	29 f0       	breq	.+10     	; 0x2248 <__vector_11+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    223e:	e0 91 7e 01 	lds	r30, 0x017E
    2242:	f0 91 7f 01 	lds	r31, 0x017F
    2246:	09 95       	icall
	}
}
    2248:	cf 91       	pop	r28
    224a:	df 91       	pop	r29
    224c:	ff 91       	pop	r31
    224e:	ef 91       	pop	r30
    2250:	bf 91       	pop	r27
    2252:	af 91       	pop	r26
    2254:	9f 91       	pop	r25
    2256:	8f 91       	pop	r24
    2258:	7f 91       	pop	r23
    225a:	6f 91       	pop	r22
    225c:	5f 91       	pop	r21
    225e:	4f 91       	pop	r20
    2260:	3f 91       	pop	r19
    2262:	2f 91       	pop	r18
    2264:	0f 90       	pop	r0
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	0f 90       	pop	r0
    226a:	1f 90       	pop	r1
    226c:	18 95       	reti

0000226e <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
    226e:	1f 92       	push	r1
    2270:	0f 92       	push	r0
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	0f 92       	push	r0
    2276:	11 24       	eor	r1, r1
    2278:	2f 93       	push	r18
    227a:	3f 93       	push	r19
    227c:	4f 93       	push	r20
    227e:	5f 93       	push	r21
    2280:	6f 93       	push	r22
    2282:	7f 93       	push	r23
    2284:	8f 93       	push	r24
    2286:	9f 93       	push	r25
    2288:	af 93       	push	r26
    228a:	bf 93       	push	r27
    228c:	ef 93       	push	r30
    228e:	ff 93       	push	r31
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    2298:	80 91 7c 01 	lds	r24, 0x017C
    229c:	90 91 7d 01 	lds	r25, 0x017D
    22a0:	00 97       	sbiw	r24, 0x00	; 0
    22a2:	29 f0       	breq	.+10     	; 0x22ae <__vector_10+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    22a4:	e0 91 7c 01 	lds	r30, 0x017C
    22a8:	f0 91 7d 01 	lds	r31, 0x017D
    22ac:	09 95       	icall
	}
}
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	ff 91       	pop	r31
    22b4:	ef 91       	pop	r30
    22b6:	bf 91       	pop	r27
    22b8:	af 91       	pop	r26
    22ba:	9f 91       	pop	r25
    22bc:	8f 91       	pop	r24
    22be:	7f 91       	pop	r23
    22c0:	6f 91       	pop	r22
    22c2:	5f 91       	pop	r21
    22c4:	4f 91       	pop	r20
    22c6:	3f 91       	pop	r19
    22c8:	2f 91       	pop	r18
    22ca:	0f 90       	pop	r0
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	0f 90       	pop	r0
    22d0:	1f 90       	pop	r1
    22d2:	18 95       	reti

000022d4 <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    22d4:	1f 92       	push	r1
    22d6:	0f 92       	push	r0
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	0f 92       	push	r0
    22dc:	11 24       	eor	r1, r1
    22de:	2f 93       	push	r18
    22e0:	3f 93       	push	r19
    22e2:	4f 93       	push	r20
    22e4:	5f 93       	push	r21
    22e6:	6f 93       	push	r22
    22e8:	7f 93       	push	r23
    22ea:	8f 93       	push	r24
    22ec:	9f 93       	push	r25
    22ee:	af 93       	push	r26
    22f0:	bf 93       	push	r27
    22f2:	ef 93       	push	r30
    22f4:	ff 93       	push	r31
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    22fe:	80 91 7a 01 	lds	r24, 0x017A
    2302:	90 91 7b 01 	lds	r25, 0x017B
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	29 f0       	breq	.+10     	; 0x2314 <__vector_9+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    230a:	e0 91 7a 01 	lds	r30, 0x017A
    230e:	f0 91 7b 01 	lds	r31, 0x017B
    2312:	09 95       	icall
	}
}
    2314:	cf 91       	pop	r28
    2316:	df 91       	pop	r29
    2318:	ff 91       	pop	r31
    231a:	ef 91       	pop	r30
    231c:	bf 91       	pop	r27
    231e:	af 91       	pop	r26
    2320:	9f 91       	pop	r25
    2322:	8f 91       	pop	r24
    2324:	7f 91       	pop	r23
    2326:	6f 91       	pop	r22
    2328:	5f 91       	pop	r21
    232a:	4f 91       	pop	r20
    232c:	3f 91       	pop	r19
    232e:	2f 91       	pop	r18
    2330:	0f 90       	pop	r0
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	0f 90       	pop	r0
    2336:	1f 90       	pop	r1
    2338:	18 95       	reti

0000233a <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    233a:	1f 92       	push	r1
    233c:	0f 92       	push	r0
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	0f 92       	push	r0
    2342:	11 24       	eor	r1, r1
    2344:	2f 93       	push	r18
    2346:	3f 93       	push	r19
    2348:	4f 93       	push	r20
    234a:	5f 93       	push	r21
    234c:	6f 93       	push	r22
    234e:	7f 93       	push	r23
    2350:	8f 93       	push	r24
    2352:	9f 93       	push	r25
    2354:	af 93       	push	r26
    2356:	bf 93       	push	r27
    2358:	ef 93       	push	r30
    235a:	ff 93       	push	r31
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    2364:	80 91 78 01 	lds	r24, 0x0178
    2368:	90 91 79 01 	lds	r25, 0x0179
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	29 f0       	breq	.+10     	; 0x237a <__vector_8+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    2370:	e0 91 78 01 	lds	r30, 0x0178
    2374:	f0 91 79 01 	lds	r31, 0x0179
    2378:	09 95       	icall
	}
}
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	ff 91       	pop	r31
    2380:	ef 91       	pop	r30
    2382:	bf 91       	pop	r27
    2384:	af 91       	pop	r26
    2386:	9f 91       	pop	r25
    2388:	8f 91       	pop	r24
    238a:	7f 91       	pop	r23
    238c:	6f 91       	pop	r22
    238e:	5f 91       	pop	r21
    2390:	4f 91       	pop	r20
    2392:	3f 91       	pop	r19
    2394:	2f 91       	pop	r18
    2396:	0f 90       	pop	r0
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	0f 90       	pop	r0
    239c:	1f 90       	pop	r1
    239e:	18 95       	reti

000023a0 <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
    23a0:	1f 92       	push	r1
    23a2:	0f 92       	push	r0
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	0f 92       	push	r0
    23a8:	11 24       	eor	r1, r1
    23aa:	2f 93       	push	r18
    23ac:	3f 93       	push	r19
    23ae:	4f 93       	push	r20
    23b0:	5f 93       	push	r21
    23b2:	6f 93       	push	r22
    23b4:	7f 93       	push	r23
    23b6:	8f 93       	push	r24
    23b8:	9f 93       	push	r25
    23ba:	af 93       	push	r26
    23bc:	bf 93       	push	r27
    23be:	ef 93       	push	r30
    23c0:	ff 93       	push	r31
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
    23ca:	80 91 76 01 	lds	r24, 0x0176
    23ce:	90 91 77 01 	lds	r25, 0x0177
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	29 f0       	breq	.+10     	; 0x23e0 <__vector_7+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
    23d6:	e0 91 76 01 	lds	r30, 0x0176
    23da:	f0 91 77 01 	lds	r31, 0x0177
    23de:	09 95       	icall
	}
}
    23e0:	cf 91       	pop	r28
    23e2:	df 91       	pop	r29
    23e4:	ff 91       	pop	r31
    23e6:	ef 91       	pop	r30
    23e8:	bf 91       	pop	r27
    23ea:	af 91       	pop	r26
    23ec:	9f 91       	pop	r25
    23ee:	8f 91       	pop	r24
    23f0:	7f 91       	pop	r23
    23f2:	6f 91       	pop	r22
    23f4:	5f 91       	pop	r21
    23f6:	4f 91       	pop	r20
    23f8:	3f 91       	pop	r19
    23fa:	2f 91       	pop	r18
    23fc:	0f 90       	pop	r0
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	0f 90       	pop	r0
    2402:	1f 90       	pop	r1
    2404:	18 95       	reti

00002406 <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
    2406:	1f 92       	push	r1
    2408:	0f 92       	push	r0
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	0f 92       	push	r0
    240e:	11 24       	eor	r1, r1
    2410:	2f 93       	push	r18
    2412:	3f 93       	push	r19
    2414:	4f 93       	push	r20
    2416:	5f 93       	push	r21
    2418:	6f 93       	push	r22
    241a:	7f 93       	push	r23
    241c:	8f 93       	push	r24
    241e:	9f 93       	push	r25
    2420:	af 93       	push	r26
    2422:	bf 93       	push	r27
    2424:	ef 93       	push	r30
    2426:	ff 93       	push	r31
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    2430:	80 91 74 01 	lds	r24, 0x0174
    2434:	90 91 75 01 	lds	r25, 0x0175
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	29 f0       	breq	.+10     	; 0x2446 <__vector_6+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    243c:	e0 91 74 01 	lds	r30, 0x0174
    2440:	f0 91 75 01 	lds	r31, 0x0175
    2444:	09 95       	icall
	}
}
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	ff 91       	pop	r31
    244c:	ef 91       	pop	r30
    244e:	bf 91       	pop	r27
    2450:	af 91       	pop	r26
    2452:	9f 91       	pop	r25
    2454:	8f 91       	pop	r24
    2456:	7f 91       	pop	r23
    2458:	6f 91       	pop	r22
    245a:	5f 91       	pop	r21
    245c:	4f 91       	pop	r20
    245e:	3f 91       	pop	r19
    2460:	2f 91       	pop	r18
    2462:	0f 90       	pop	r0
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	0f 90       	pop	r0
    2468:	1f 90       	pop	r1
    246a:	18 95       	reti

0000246c <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
    246c:	1f 92       	push	r1
    246e:	0f 92       	push	r0
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	0f 92       	push	r0
    2474:	11 24       	eor	r1, r1
    2476:	2f 93       	push	r18
    2478:	3f 93       	push	r19
    247a:	4f 93       	push	r20
    247c:	5f 93       	push	r21
    247e:	6f 93       	push	r22
    2480:	7f 93       	push	r23
    2482:	8f 93       	push	r24
    2484:	9f 93       	push	r25
    2486:	af 93       	push	r26
    2488:	bf 93       	push	r27
    248a:	ef 93       	push	r30
    248c:	ff 93       	push	r31
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    2496:	80 91 72 01 	lds	r24, 0x0172
    249a:	90 91 73 01 	lds	r25, 0x0173
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	29 f0       	breq	.+10     	; 0x24ac <__vector_5+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    24a2:	e0 91 72 01 	lds	r30, 0x0172
    24a6:	f0 91 73 01 	lds	r31, 0x0173
    24aa:	09 95       	icall
	}
}
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	ff 91       	pop	r31
    24b2:	ef 91       	pop	r30
    24b4:	bf 91       	pop	r27
    24b6:	af 91       	pop	r26
    24b8:	9f 91       	pop	r25
    24ba:	8f 91       	pop	r24
    24bc:	7f 91       	pop	r23
    24be:	6f 91       	pop	r22
    24c0:	5f 91       	pop	r21
    24c2:	4f 91       	pop	r20
    24c4:	3f 91       	pop	r19
    24c6:	2f 91       	pop	r18
    24c8:	0f 90       	pop	r0
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	0f 90       	pop	r0
    24ce:	1f 90       	pop	r1
    24d0:	18 95       	reti

000024d2 <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
    24d2:	1f 92       	push	r1
    24d4:	0f 92       	push	r0
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	0f 92       	push	r0
    24da:	11 24       	eor	r1, r1
    24dc:	2f 93       	push	r18
    24de:	3f 93       	push	r19
    24e0:	4f 93       	push	r20
    24e2:	5f 93       	push	r21
    24e4:	6f 93       	push	r22
    24e6:	7f 93       	push	r23
    24e8:	8f 93       	push	r24
    24ea:	9f 93       	push	r25
    24ec:	af 93       	push	r26
    24ee:	bf 93       	push	r27
    24f0:	ef 93       	push	r30
    24f2:	ff 93       	push	r31
    24f4:	df 93       	push	r29
    24f6:	cf 93       	push	r28
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    24fc:	80 91 70 01 	lds	r24, 0x0170
    2500:	90 91 71 01 	lds	r25, 0x0171
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	29 f0       	breq	.+10     	; 0x2512 <__vector_4+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    2508:	e0 91 70 01 	lds	r30, 0x0170
    250c:	f0 91 71 01 	lds	r31, 0x0171
    2510:	09 95       	icall
	}
}
    2512:	cf 91       	pop	r28
    2514:	df 91       	pop	r29
    2516:	ff 91       	pop	r31
    2518:	ef 91       	pop	r30
    251a:	bf 91       	pop	r27
    251c:	af 91       	pop	r26
    251e:	9f 91       	pop	r25
    2520:	8f 91       	pop	r24
    2522:	7f 91       	pop	r23
    2524:	6f 91       	pop	r22
    2526:	5f 91       	pop	r21
    2528:	4f 91       	pop	r20
    252a:	3f 91       	pop	r19
    252c:	2f 91       	pop	r18
    252e:	0f 90       	pop	r0
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	0f 90       	pop	r0
    2534:	1f 90       	pop	r1
    2536:	18 95       	reti

00002538 <main>:

#include "Servo_Motor_interface.h"


void main()
{
    2538:	0f 93       	push	r16
    253a:	1f 93       	push	r17
    253c:	df 93       	push	r29
    253e:	cf 93       	push	r28
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	c2 56       	subi	r28, 0x62	; 98
    2546:	d0 40       	sbci	r29, 0x00	; 0
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
	TIMER1_vInit();
    2552:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <TIMER1_vInit>
	Servo_Motor_vInit();
    2556:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <Servo_Motor_vInit>

	while (1)
	{

		Servo_Motor_vTimer1Degree(45);
    255a:	8d e2       	ldi	r24, 0x2D	; 45
    255c:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <Servo_Motor_vTimer1Degree>
    2560:	fe 01       	movw	r30, r28
    2562:	e1 5a       	subi	r30, 0xA1	; 161
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	aa e7       	ldi	r26, 0x7A	; 122
    256c:	b4 e4       	ldi	r27, 0x44	; 68
    256e:	80 83       	st	Z, r24
    2570:	91 83       	std	Z+1, r25	; 0x01
    2572:	a2 83       	std	Z+2, r26	; 0x02
    2574:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2576:	8e 01       	movw	r16, r28
    2578:	05 5a       	subi	r16, 0xA5	; 165
    257a:	1f 4f       	sbci	r17, 0xFF	; 255
    257c:	fe 01       	movw	r30, r28
    257e:	e1 5a       	subi	r30, 0xA1	; 161
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	60 81       	ld	r22, Z
    2584:	71 81       	ldd	r23, Z+1	; 0x01
    2586:	82 81       	ldd	r24, Z+2	; 0x02
    2588:	93 81       	ldd	r25, Z+3	; 0x03
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	4a ef       	ldi	r20, 0xFA	; 250
    2590:	54 e4       	ldi	r21, 0x44	; 68
    2592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	f8 01       	movw	r30, r16
    259c:	80 83       	st	Z, r24
    259e:	91 83       	std	Z+1, r25	; 0x01
    25a0:	a2 83       	std	Z+2, r26	; 0x02
    25a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25a4:	fe 01       	movw	r30, r28
    25a6:	e5 5a       	subi	r30, 0xA5	; 165
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	60 81       	ld	r22, Z
    25ac:	71 81       	ldd	r23, Z+1	; 0x01
    25ae:	82 81       	ldd	r24, Z+2	; 0x02
    25b0:	93 81       	ldd	r25, Z+3	; 0x03
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e8       	ldi	r20, 0x80	; 128
    25b8:	5f e3       	ldi	r21, 0x3F	; 63
    25ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25be:	88 23       	and	r24, r24
    25c0:	44 f4       	brge	.+16     	; 0x25d2 <main+0x9a>
		__ticks = 1;
    25c2:	fe 01       	movw	r30, r28
    25c4:	e7 5a       	subi	r30, 0xA7	; 167
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	91 83       	std	Z+1, r25	; 0x01
    25ce:	80 83       	st	Z, r24
    25d0:	64 c0       	rjmp	.+200    	; 0x269a <main+0x162>
	else if (__tmp > 65535)
    25d2:	fe 01       	movw	r30, r28
    25d4:	e5 5a       	subi	r30, 0xA5	; 165
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	60 81       	ld	r22, Z
    25da:	71 81       	ldd	r23, Z+1	; 0x01
    25dc:	82 81       	ldd	r24, Z+2	; 0x02
    25de:	93 81       	ldd	r25, Z+3	; 0x03
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	3f ef       	ldi	r19, 0xFF	; 255
    25e4:	4f e7       	ldi	r20, 0x7F	; 127
    25e6:	57 e4       	ldi	r21, 0x47	; 71
    25e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ec:	18 16       	cp	r1, r24
    25ee:	0c f0       	brlt	.+2      	; 0x25f2 <main+0xba>
    25f0:	43 c0       	rjmp	.+134    	; 0x2678 <main+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f2:	fe 01       	movw	r30, r28
    25f4:	e1 5a       	subi	r30, 0xA1	; 161
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	60 81       	ld	r22, Z
    25fa:	71 81       	ldd	r23, Z+1	; 0x01
    25fc:	82 81       	ldd	r24, Z+2	; 0x02
    25fe:	93 81       	ldd	r25, Z+3	; 0x03
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e2       	ldi	r20, 0x20	; 32
    2606:	51 e4       	ldi	r21, 0x41	; 65
    2608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	8e 01       	movw	r16, r28
    2612:	07 5a       	subi	r16, 0xA7	; 167
    2614:	1f 4f       	sbci	r17, 0xFF	; 255
    2616:	bc 01       	movw	r22, r24
    2618:	cd 01       	movw	r24, r26
    261a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	f8 01       	movw	r30, r16
    2624:	91 83       	std	Z+1, r25	; 0x01
    2626:	80 83       	st	Z, r24
    2628:	1f c0       	rjmp	.+62     	; 0x2668 <main+0x130>
    262a:	fe 01       	movw	r30, r28
    262c:	e9 5a       	subi	r30, 0xA9	; 169
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	88 ec       	ldi	r24, 0xC8	; 200
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	91 83       	std	Z+1, r25	; 0x01
    2636:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2638:	fe 01       	movw	r30, r28
    263a:	e9 5a       	subi	r30, 0xA9	; 169
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	80 81       	ld	r24, Z
    2640:	91 81       	ldd	r25, Z+1	; 0x01
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	f1 f7       	brne	.-4      	; 0x2642 <main+0x10a>
    2646:	fe 01       	movw	r30, r28
    2648:	e9 5a       	subi	r30, 0xA9	; 169
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	91 83       	std	Z+1, r25	; 0x01
    264e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2650:	de 01       	movw	r26, r28
    2652:	a7 5a       	subi	r26, 0xA7	; 167
    2654:	bf 4f       	sbci	r27, 0xFF	; 255
    2656:	fe 01       	movw	r30, r28
    2658:	e7 5a       	subi	r30, 0xA7	; 167
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	80 81       	ld	r24, Z
    265e:	91 81       	ldd	r25, Z+1	; 0x01
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	11 96       	adiw	r26, 0x01	; 1
    2664:	9c 93       	st	X, r25
    2666:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2668:	fe 01       	movw	r30, r28
    266a:	e7 5a       	subi	r30, 0xA7	; 167
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	80 81       	ld	r24, Z
    2670:	91 81       	ldd	r25, Z+1	; 0x01
    2672:	00 97       	sbiw	r24, 0x00	; 0
    2674:	d1 f6       	brne	.-76     	; 0x262a <main+0xf2>
    2676:	27 c0       	rjmp	.+78     	; 0x26c6 <main+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2678:	8e 01       	movw	r16, r28
    267a:	07 5a       	subi	r16, 0xA7	; 167
    267c:	1f 4f       	sbci	r17, 0xFF	; 255
    267e:	fe 01       	movw	r30, r28
    2680:	e5 5a       	subi	r30, 0xA5	; 165
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	60 81       	ld	r22, Z
    2686:	71 81       	ldd	r23, Z+1	; 0x01
    2688:	82 81       	ldd	r24, Z+2	; 0x02
    268a:	93 81       	ldd	r25, Z+3	; 0x03
    268c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	f8 01       	movw	r30, r16
    2696:	91 83       	std	Z+1, r25	; 0x01
    2698:	80 83       	st	Z, r24
    269a:	de 01       	movw	r26, r28
    269c:	ab 5a       	subi	r26, 0xAB	; 171
    269e:	bf 4f       	sbci	r27, 0xFF	; 255
    26a0:	fe 01       	movw	r30, r28
    26a2:	e7 5a       	subi	r30, 0xA7	; 167
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	80 81       	ld	r24, Z
    26a8:	91 81       	ldd	r25, Z+1	; 0x01
    26aa:	8d 93       	st	X+, r24
    26ac:	9c 93       	st	X, r25
    26ae:	fe 01       	movw	r30, r28
    26b0:	eb 5a       	subi	r30, 0xAB	; 171
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	80 81       	ld	r24, Z
    26b6:	91 81       	ldd	r25, Z+1	; 0x01
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	f1 f7       	brne	.-4      	; 0x26b8 <main+0x180>
    26bc:	fe 01       	movw	r30, r28
    26be:	eb 5a       	subi	r30, 0xAB	; 171
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	91 83       	std	Z+1, r25	; 0x01
    26c4:	80 83       	st	Z, r24
		_delay_ms(1000);
		Servo_Motor_vTimer1Degree(0);
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <Servo_Motor_vTimer1Degree>
    26cc:	fe 01       	movw	r30, r28
    26ce:	ef 5a       	subi	r30, 0xAF	; 175
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	aa e7       	ldi	r26, 0x7A	; 122
    26d8:	b4 e4       	ldi	r27, 0x44	; 68
    26da:	80 83       	st	Z, r24
    26dc:	91 83       	std	Z+1, r25	; 0x01
    26de:	a2 83       	std	Z+2, r26	; 0x02
    26e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e2:	8e 01       	movw	r16, r28
    26e4:	03 5b       	subi	r16, 0xB3	; 179
    26e6:	1f 4f       	sbci	r17, 0xFF	; 255
    26e8:	fe 01       	movw	r30, r28
    26ea:	ef 5a       	subi	r30, 0xAF	; 175
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	60 81       	ld	r22, Z
    26f0:	71 81       	ldd	r23, Z+1	; 0x01
    26f2:	82 81       	ldd	r24, Z+2	; 0x02
    26f4:	93 81       	ldd	r25, Z+3	; 0x03
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	4a ef       	ldi	r20, 0xFA	; 250
    26fc:	54 e4       	ldi	r21, 0x44	; 68
    26fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	f8 01       	movw	r30, r16
    2708:	80 83       	st	Z, r24
    270a:	91 83       	std	Z+1, r25	; 0x01
    270c:	a2 83       	std	Z+2, r26	; 0x02
    270e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2710:	fe 01       	movw	r30, r28
    2712:	e3 5b       	subi	r30, 0xB3	; 179
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	60 81       	ld	r22, Z
    2718:	71 81       	ldd	r23, Z+1	; 0x01
    271a:	82 81       	ldd	r24, Z+2	; 0x02
    271c:	93 81       	ldd	r25, Z+3	; 0x03
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	40 e8       	ldi	r20, 0x80	; 128
    2724:	5f e3       	ldi	r21, 0x3F	; 63
    2726:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    272a:	88 23       	and	r24, r24
    272c:	44 f4       	brge	.+16     	; 0x273e <main+0x206>
		__ticks = 1;
    272e:	fe 01       	movw	r30, r28
    2730:	e5 5b       	subi	r30, 0xB5	; 181
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	91 83       	std	Z+1, r25	; 0x01
    273a:	80 83       	st	Z, r24
    273c:	64 c0       	rjmp	.+200    	; 0x2806 <main+0x2ce>
	else if (__tmp > 65535)
    273e:	fe 01       	movw	r30, r28
    2740:	e3 5b       	subi	r30, 0xB3	; 179
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	60 81       	ld	r22, Z
    2746:	71 81       	ldd	r23, Z+1	; 0x01
    2748:	82 81       	ldd	r24, Z+2	; 0x02
    274a:	93 81       	ldd	r25, Z+3	; 0x03
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	3f ef       	ldi	r19, 0xFF	; 255
    2750:	4f e7       	ldi	r20, 0x7F	; 127
    2752:	57 e4       	ldi	r21, 0x47	; 71
    2754:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2758:	18 16       	cp	r1, r24
    275a:	0c f0       	brlt	.+2      	; 0x275e <main+0x226>
    275c:	43 c0       	rjmp	.+134    	; 0x27e4 <main+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275e:	fe 01       	movw	r30, r28
    2760:	ef 5a       	subi	r30, 0xAF	; 175
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	60 81       	ld	r22, Z
    2766:	71 81       	ldd	r23, Z+1	; 0x01
    2768:	82 81       	ldd	r24, Z+2	; 0x02
    276a:	93 81       	ldd	r25, Z+3	; 0x03
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	40 e2       	ldi	r20, 0x20	; 32
    2772:	51 e4       	ldi	r21, 0x41	; 65
    2774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	8e 01       	movw	r16, r28
    277e:	05 5b       	subi	r16, 0xB5	; 181
    2780:	1f 4f       	sbci	r17, 0xFF	; 255
    2782:	bc 01       	movw	r22, r24
    2784:	cd 01       	movw	r24, r26
    2786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	f8 01       	movw	r30, r16
    2790:	91 83       	std	Z+1, r25	; 0x01
    2792:	80 83       	st	Z, r24
    2794:	1f c0       	rjmp	.+62     	; 0x27d4 <main+0x29c>
    2796:	fe 01       	movw	r30, r28
    2798:	e7 5b       	subi	r30, 0xB7	; 183
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	88 ec       	ldi	r24, 0xC8	; 200
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	91 83       	std	Z+1, r25	; 0x01
    27a2:	80 83       	st	Z, r24
    27a4:	fe 01       	movw	r30, r28
    27a6:	e7 5b       	subi	r30, 0xB7	; 183
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	80 81       	ld	r24, Z
    27ac:	91 81       	ldd	r25, Z+1	; 0x01
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	f1 f7       	brne	.-4      	; 0x27ae <main+0x276>
    27b2:	fe 01       	movw	r30, r28
    27b4:	e7 5b       	subi	r30, 0xB7	; 183
    27b6:	ff 4f       	sbci	r31, 0xFF	; 255
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27bc:	de 01       	movw	r26, r28
    27be:	a5 5b       	subi	r26, 0xB5	; 181
    27c0:	bf 4f       	sbci	r27, 0xFF	; 255
    27c2:	fe 01       	movw	r30, r28
    27c4:	e5 5b       	subi	r30, 0xB5	; 181
    27c6:	ff 4f       	sbci	r31, 0xFF	; 255
    27c8:	80 81       	ld	r24, Z
    27ca:	91 81       	ldd	r25, Z+1	; 0x01
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	11 96       	adiw	r26, 0x01	; 1
    27d0:	9c 93       	st	X, r25
    27d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d4:	fe 01       	movw	r30, r28
    27d6:	e5 5b       	subi	r30, 0xB5	; 181
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	80 81       	ld	r24, Z
    27dc:	91 81       	ldd	r25, Z+1	; 0x01
    27de:	00 97       	sbiw	r24, 0x00	; 0
    27e0:	d1 f6       	brne	.-76     	; 0x2796 <main+0x25e>
    27e2:	27 c0       	rjmp	.+78     	; 0x2832 <main+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e4:	8e 01       	movw	r16, r28
    27e6:	05 5b       	subi	r16, 0xB5	; 181
    27e8:	1f 4f       	sbci	r17, 0xFF	; 255
    27ea:	fe 01       	movw	r30, r28
    27ec:	e3 5b       	subi	r30, 0xB3	; 179
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	60 81       	ld	r22, Z
    27f2:	71 81       	ldd	r23, Z+1	; 0x01
    27f4:	82 81       	ldd	r24, Z+2	; 0x02
    27f6:	93 81       	ldd	r25, Z+3	; 0x03
    27f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	f8 01       	movw	r30, r16
    2802:	91 83       	std	Z+1, r25	; 0x01
    2804:	80 83       	st	Z, r24
    2806:	de 01       	movw	r26, r28
    2808:	a9 5b       	subi	r26, 0xB9	; 185
    280a:	bf 4f       	sbci	r27, 0xFF	; 255
    280c:	fe 01       	movw	r30, r28
    280e:	e5 5b       	subi	r30, 0xB5	; 181
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	80 81       	ld	r24, Z
    2814:	91 81       	ldd	r25, Z+1	; 0x01
    2816:	8d 93       	st	X+, r24
    2818:	9c 93       	st	X, r25
    281a:	fe 01       	movw	r30, r28
    281c:	e9 5b       	subi	r30, 0xB9	; 185
    281e:	ff 4f       	sbci	r31, 0xFF	; 255
    2820:	80 81       	ld	r24, Z
    2822:	91 81       	ldd	r25, Z+1	; 0x01
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	f1 f7       	brne	.-4      	; 0x2824 <main+0x2ec>
    2828:	fe 01       	movw	r30, r28
    282a:	e9 5b       	subi	r30, 0xB9	; 185
    282c:	ff 4f       	sbci	r31, 0xFF	; 255
    282e:	91 83       	std	Z+1, r25	; 0x01
    2830:	80 83       	st	Z, r24
		_delay_ms(1000);

		Servo_Motor_vTimer1Degree(15);
    2832:	8f e0       	ldi	r24, 0x0F	; 15
    2834:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <Servo_Motor_vTimer1Degree>
    2838:	fe 01       	movw	r30, r28
    283a:	ed 5b       	subi	r30, 0xBD	; 189
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	aa e7       	ldi	r26, 0x7A	; 122
    2844:	b4 e4       	ldi	r27, 0x44	; 68
    2846:	80 83       	st	Z, r24
    2848:	91 83       	std	Z+1, r25	; 0x01
    284a:	a2 83       	std	Z+2, r26	; 0x02
    284c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284e:	8e 01       	movw	r16, r28
    2850:	01 5c       	subi	r16, 0xC1	; 193
    2852:	1f 4f       	sbci	r17, 0xFF	; 255
    2854:	fe 01       	movw	r30, r28
    2856:	ed 5b       	subi	r30, 0xBD	; 189
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	60 81       	ld	r22, Z
    285c:	71 81       	ldd	r23, Z+1	; 0x01
    285e:	82 81       	ldd	r24, Z+2	; 0x02
    2860:	93 81       	ldd	r25, Z+3	; 0x03
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	4a ef       	ldi	r20, 0xFA	; 250
    2868:	54 e4       	ldi	r21, 0x44	; 68
    286a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	f8 01       	movw	r30, r16
    2874:	80 83       	st	Z, r24
    2876:	91 83       	std	Z+1, r25	; 0x01
    2878:	a2 83       	std	Z+2, r26	; 0x02
    287a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    287c:	fe 01       	movw	r30, r28
    287e:	ff 96       	adiw	r30, 0x3f	; 63
    2880:	60 81       	ld	r22, Z
    2882:	71 81       	ldd	r23, Z+1	; 0x01
    2884:	82 81       	ldd	r24, Z+2	; 0x02
    2886:	93 81       	ldd	r25, Z+3	; 0x03
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	40 e8       	ldi	r20, 0x80	; 128
    288e:	5f e3       	ldi	r21, 0x3F	; 63
    2890:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2894:	88 23       	and	r24, r24
    2896:	2c f4       	brge	.+10     	; 0x28a2 <main+0x36a>
		__ticks = 1;
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	9e af       	std	Y+62, r25	; 0x3e
    289e:	8d af       	std	Y+61, r24	; 0x3d
    28a0:	46 c0       	rjmp	.+140    	; 0x292e <main+0x3f6>
	else if (__tmp > 65535)
    28a2:	fe 01       	movw	r30, r28
    28a4:	ff 96       	adiw	r30, 0x3f	; 63
    28a6:	60 81       	ld	r22, Z
    28a8:	71 81       	ldd	r23, Z+1	; 0x01
    28aa:	82 81       	ldd	r24, Z+2	; 0x02
    28ac:	93 81       	ldd	r25, Z+3	; 0x03
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	3f ef       	ldi	r19, 0xFF	; 255
    28b2:	4f e7       	ldi	r20, 0x7F	; 127
    28b4:	57 e4       	ldi	r21, 0x47	; 71
    28b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28ba:	18 16       	cp	r1, r24
    28bc:	64 f5       	brge	.+88     	; 0x2916 <main+0x3de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28be:	fe 01       	movw	r30, r28
    28c0:	ed 5b       	subi	r30, 0xBD	; 189
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	60 81       	ld	r22, Z
    28c6:	71 81       	ldd	r23, Z+1	; 0x01
    28c8:	82 81       	ldd	r24, Z+2	; 0x02
    28ca:	93 81       	ldd	r25, Z+3	; 0x03
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	40 e2       	ldi	r20, 0x20	; 32
    28d2:	51 e4       	ldi	r21, 0x41	; 65
    28d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	bc 01       	movw	r22, r24
    28de:	cd 01       	movw	r24, r26
    28e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	9e af       	std	Y+62, r25	; 0x3e
    28ea:	8d af       	std	Y+61, r24	; 0x3d
    28ec:	0f c0       	rjmp	.+30     	; 0x290c <main+0x3d4>
    28ee:	88 ec       	ldi	r24, 0xC8	; 200
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	9c af       	std	Y+60, r25	; 0x3c
    28f4:	8b af       	std	Y+59, r24	; 0x3b
    28f6:	8b ad       	ldd	r24, Y+59	; 0x3b
    28f8:	9c ad       	ldd	r25, Y+60	; 0x3c
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	f1 f7       	brne	.-4      	; 0x28fa <main+0x3c2>
    28fe:	9c af       	std	Y+60, r25	; 0x3c
    2900:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2902:	8d ad       	ldd	r24, Y+61	; 0x3d
    2904:	9e ad       	ldd	r25, Y+62	; 0x3e
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	9e af       	std	Y+62, r25	; 0x3e
    290a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290c:	8d ad       	ldd	r24, Y+61	; 0x3d
    290e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	69 f7       	brne	.-38     	; 0x28ee <main+0x3b6>
    2914:	16 c0       	rjmp	.+44     	; 0x2942 <main+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2916:	fe 01       	movw	r30, r28
    2918:	ff 96       	adiw	r30, 0x3f	; 63
    291a:	60 81       	ld	r22, Z
    291c:	71 81       	ldd	r23, Z+1	; 0x01
    291e:	82 81       	ldd	r24, Z+2	; 0x02
    2920:	93 81       	ldd	r25, Z+3	; 0x03
    2922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	9e af       	std	Y+62, r25	; 0x3e
    292c:	8d af       	std	Y+61, r24	; 0x3d
    292e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2930:	9e ad       	ldd	r25, Y+62	; 0x3e
    2932:	9a af       	std	Y+58, r25	; 0x3a
    2934:	89 af       	std	Y+57, r24	; 0x39
    2936:	89 ad       	ldd	r24, Y+57	; 0x39
    2938:	9a ad       	ldd	r25, Y+58	; 0x3a
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	f1 f7       	brne	.-4      	; 0x293a <main+0x402>
    293e:	9a af       	std	Y+58, r25	; 0x3a
    2940:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1000);
		Servo_Motor_vTimer1Degree(90);
    2942:	8a e5       	ldi	r24, 0x5A	; 90
    2944:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <Servo_Motor_vTimer1Degree>
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	aa e7       	ldi	r26, 0x7A	; 122
    294e:	b4 e4       	ldi	r27, 0x44	; 68
    2950:	8d ab       	std	Y+53, r24	; 0x35
    2952:	9e ab       	std	Y+54, r25	; 0x36
    2954:	af ab       	std	Y+55, r26	; 0x37
    2956:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2958:	6d a9       	ldd	r22, Y+53	; 0x35
    295a:	7e a9       	ldd	r23, Y+54	; 0x36
    295c:	8f a9       	ldd	r24, Y+55	; 0x37
    295e:	98 ad       	ldd	r25, Y+56	; 0x38
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	4a ef       	ldi	r20, 0xFA	; 250
    2966:	54 e4       	ldi	r21, 0x44	; 68
    2968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	89 ab       	std	Y+49, r24	; 0x31
    2972:	9a ab       	std	Y+50, r25	; 0x32
    2974:	ab ab       	std	Y+51, r26	; 0x33
    2976:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2978:	69 a9       	ldd	r22, Y+49	; 0x31
    297a:	7a a9       	ldd	r23, Y+50	; 0x32
    297c:	8b a9       	ldd	r24, Y+51	; 0x33
    297e:	9c a9       	ldd	r25, Y+52	; 0x34
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e8       	ldi	r20, 0x80	; 128
    2986:	5f e3       	ldi	r21, 0x3F	; 63
    2988:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    298c:	88 23       	and	r24, r24
    298e:	2c f4       	brge	.+10     	; 0x299a <main+0x462>
		__ticks = 1;
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	98 ab       	std	Y+48, r25	; 0x30
    2996:	8f a7       	std	Y+47, r24	; 0x2f
    2998:	3f c0       	rjmp	.+126    	; 0x2a18 <main+0x4e0>
	else if (__tmp > 65535)
    299a:	69 a9       	ldd	r22, Y+49	; 0x31
    299c:	7a a9       	ldd	r23, Y+50	; 0x32
    299e:	8b a9       	ldd	r24, Y+51	; 0x33
    29a0:	9c a9       	ldd	r25, Y+52	; 0x34
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	3f ef       	ldi	r19, 0xFF	; 255
    29a6:	4f e7       	ldi	r20, 0x7F	; 127
    29a8:	57 e4       	ldi	r21, 0x47	; 71
    29aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ae:	18 16       	cp	r1, r24
    29b0:	4c f5       	brge	.+82     	; 0x2a04 <main+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b2:	6d a9       	ldd	r22, Y+53	; 0x35
    29b4:	7e a9       	ldd	r23, Y+54	; 0x36
    29b6:	8f a9       	ldd	r24, Y+55	; 0x37
    29b8:	98 ad       	ldd	r25, Y+56	; 0x38
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	40 e2       	ldi	r20, 0x20	; 32
    29c0:	51 e4       	ldi	r21, 0x41	; 65
    29c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	bc 01       	movw	r22, r24
    29cc:	cd 01       	movw	r24, r26
    29ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	98 ab       	std	Y+48, r25	; 0x30
    29d8:	8f a7       	std	Y+47, r24	; 0x2f
    29da:	0f c0       	rjmp	.+30     	; 0x29fa <main+0x4c2>
    29dc:	88 ec       	ldi	r24, 0xC8	; 200
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	9e a7       	std	Y+46, r25	; 0x2e
    29e2:	8d a7       	std	Y+45, r24	; 0x2d
    29e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    29e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <main+0x4b0>
    29ec:	9e a7       	std	Y+46, r25	; 0x2e
    29ee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    29f2:	98 a9       	ldd	r25, Y+48	; 0x30
    29f4:	01 97       	sbiw	r24, 0x01	; 1
    29f6:	98 ab       	std	Y+48, r25	; 0x30
    29f8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    29fc:	98 a9       	ldd	r25, Y+48	; 0x30
    29fe:	00 97       	sbiw	r24, 0x00	; 0
    2a00:	69 f7       	brne	.-38     	; 0x29dc <main+0x4a4>
    2a02:	14 c0       	rjmp	.+40     	; 0x2a2c <main+0x4f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a04:	69 a9       	ldd	r22, Y+49	; 0x31
    2a06:	7a a9       	ldd	r23, Y+50	; 0x32
    2a08:	8b a9       	ldd	r24, Y+51	; 0x33
    2a0a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	98 ab       	std	Y+48, r25	; 0x30
    2a16:	8f a7       	std	Y+47, r24	; 0x2f
    2a18:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a1a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a1c:	9c a7       	std	Y+44, r25	; 0x2c
    2a1e:	8b a7       	std	Y+43, r24	; 0x2b
    2a20:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a22:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	f1 f7       	brne	.-4      	; 0x2a24 <main+0x4ec>
    2a28:	9c a7       	std	Y+44, r25	; 0x2c
    2a2a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1000);
		Servo_Motor_vTimer1Degree(-15);
    2a2c:	81 ef       	ldi	r24, 0xF1	; 241
    2a2e:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <Servo_Motor_vTimer1Degree>
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	aa e7       	ldi	r26, 0x7A	; 122
    2a38:	b4 e4       	ldi	r27, 0x44	; 68
    2a3a:	8f a3       	std	Y+39, r24	; 0x27
    2a3c:	98 a7       	std	Y+40, r25	; 0x28
    2a3e:	a9 a7       	std	Y+41, r26	; 0x29
    2a40:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a42:	6f a1       	ldd	r22, Y+39	; 0x27
    2a44:	78 a5       	ldd	r23, Y+40	; 0x28
    2a46:	89 a5       	ldd	r24, Y+41	; 0x29
    2a48:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	4a ef       	ldi	r20, 0xFA	; 250
    2a50:	54 e4       	ldi	r21, 0x44	; 68
    2a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	8b a3       	std	Y+35, r24	; 0x23
    2a5c:	9c a3       	std	Y+36, r25	; 0x24
    2a5e:	ad a3       	std	Y+37, r26	; 0x25
    2a60:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a62:	6b a1       	ldd	r22, Y+35	; 0x23
    2a64:	7c a1       	ldd	r23, Y+36	; 0x24
    2a66:	8d a1       	ldd	r24, Y+37	; 0x25
    2a68:	9e a1       	ldd	r25, Y+38	; 0x26
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	40 e8       	ldi	r20, 0x80	; 128
    2a70:	5f e3       	ldi	r21, 0x3F	; 63
    2a72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a76:	88 23       	and	r24, r24
    2a78:	2c f4       	brge	.+10     	; 0x2a84 <main+0x54c>
		__ticks = 1;
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	9a a3       	std	Y+34, r25	; 0x22
    2a80:	89 a3       	std	Y+33, r24	; 0x21
    2a82:	3f c0       	rjmp	.+126    	; 0x2b02 <main+0x5ca>
	else if (__tmp > 65535)
    2a84:	6b a1       	ldd	r22, Y+35	; 0x23
    2a86:	7c a1       	ldd	r23, Y+36	; 0x24
    2a88:	8d a1       	ldd	r24, Y+37	; 0x25
    2a8a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	3f ef       	ldi	r19, 0xFF	; 255
    2a90:	4f e7       	ldi	r20, 0x7F	; 127
    2a92:	57 e4       	ldi	r21, 0x47	; 71
    2a94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a98:	18 16       	cp	r1, r24
    2a9a:	4c f5       	brge	.+82     	; 0x2aee <main+0x5b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9c:	6f a1       	ldd	r22, Y+39	; 0x27
    2a9e:	78 a5       	ldd	r23, Y+40	; 0x28
    2aa0:	89 a5       	ldd	r24, Y+41	; 0x29
    2aa2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	40 e2       	ldi	r20, 0x20	; 32
    2aaa:	51 e4       	ldi	r21, 0x41	; 65
    2aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	bc 01       	movw	r22, r24
    2ab6:	cd 01       	movw	r24, r26
    2ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	9a a3       	std	Y+34, r25	; 0x22
    2ac2:	89 a3       	std	Y+33, r24	; 0x21
    2ac4:	0f c0       	rjmp	.+30     	; 0x2ae4 <main+0x5ac>
    2ac6:	88 ec       	ldi	r24, 0xC8	; 200
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	98 a3       	std	Y+32, r25	; 0x20
    2acc:	8f 8f       	std	Y+31, r24	; 0x1f
    2ace:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ad0:	98 a1       	ldd	r25, Y+32	; 0x20
    2ad2:	01 97       	sbiw	r24, 0x01	; 1
    2ad4:	f1 f7       	brne	.-4      	; 0x2ad2 <main+0x59a>
    2ad6:	98 a3       	std	Y+32, r25	; 0x20
    2ad8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ada:	89 a1       	ldd	r24, Y+33	; 0x21
    2adc:	9a a1       	ldd	r25, Y+34	; 0x22
    2ade:	01 97       	sbiw	r24, 0x01	; 1
    2ae0:	9a a3       	std	Y+34, r25	; 0x22
    2ae2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ae8:	00 97       	sbiw	r24, 0x00	; 0
    2aea:	69 f7       	brne	.-38     	; 0x2ac6 <main+0x58e>
    2aec:	14 c0       	rjmp	.+40     	; 0x2b16 <main+0x5de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aee:	6b a1       	ldd	r22, Y+35	; 0x23
    2af0:	7c a1       	ldd	r23, Y+36	; 0x24
    2af2:	8d a1       	ldd	r24, Y+37	; 0x25
    2af4:	9e a1       	ldd	r25, Y+38	; 0x26
    2af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	9a a3       	std	Y+34, r25	; 0x22
    2b00:	89 a3       	std	Y+33, r24	; 0x21
    2b02:	89 a1       	ldd	r24, Y+33	; 0x21
    2b04:	9a a1       	ldd	r25, Y+34	; 0x22
    2b06:	9e 8f       	std	Y+30, r25	; 0x1e
    2b08:	8d 8f       	std	Y+29, r24	; 0x1d
    2b0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	f1 f7       	brne	.-4      	; 0x2b0e <main+0x5d6>
    2b12:	9e 8f       	std	Y+30, r25	; 0x1e
    2b14:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		Servo_Motor_vTimer1Degree(-90);
    2b16:	86 ea       	ldi	r24, 0xA6	; 166
    2b18:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <Servo_Motor_vTimer1Degree>
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	aa e7       	ldi	r26, 0x7A	; 122
    2b22:	b4 e4       	ldi	r27, 0x44	; 68
    2b24:	89 8f       	std	Y+25, r24	; 0x19
    2b26:	9a 8f       	std	Y+26, r25	; 0x1a
    2b28:	ab 8f       	std	Y+27, r26	; 0x1b
    2b2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b2c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	4a ef       	ldi	r20, 0xFA	; 250
    2b3a:	54 e4       	ldi	r21, 0x44	; 68
    2b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	8d 8b       	std	Y+21, r24	; 0x15
    2b46:	9e 8b       	std	Y+22, r25	; 0x16
    2b48:	af 8b       	std	Y+23, r26	; 0x17
    2b4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b50:	8f 89       	ldd	r24, Y+23	; 0x17
    2b52:	98 8d       	ldd	r25, Y+24	; 0x18
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e8       	ldi	r20, 0x80	; 128
    2b5a:	5f e3       	ldi	r21, 0x3F	; 63
    2b5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b60:	88 23       	and	r24, r24
    2b62:	2c f4       	brge	.+10     	; 0x2b6e <main+0x636>
		__ticks = 1;
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	9c 8b       	std	Y+20, r25	; 0x14
    2b6a:	8b 8b       	std	Y+19, r24	; 0x13
    2b6c:	3f c0       	rjmp	.+126    	; 0x2bec <main+0x6b4>
	else if (__tmp > 65535)
    2b6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b70:	7e 89       	ldd	r23, Y+22	; 0x16
    2b72:	8f 89       	ldd	r24, Y+23	; 0x17
    2b74:	98 8d       	ldd	r25, Y+24	; 0x18
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	3f ef       	ldi	r19, 0xFF	; 255
    2b7a:	4f e7       	ldi	r20, 0x7F	; 127
    2b7c:	57 e4       	ldi	r21, 0x47	; 71
    2b7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b82:	18 16       	cp	r1, r24
    2b84:	4c f5       	brge	.+82     	; 0x2bd8 <main+0x6a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b86:	69 8d       	ldd	r22, Y+25	; 0x19
    2b88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	40 e2       	ldi	r20, 0x20	; 32
    2b94:	51 e4       	ldi	r21, 0x41	; 65
    2b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	bc 01       	movw	r22, r24
    2ba0:	cd 01       	movw	r24, r26
    2ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	9c 8b       	std	Y+20, r25	; 0x14
    2bac:	8b 8b       	std	Y+19, r24	; 0x13
    2bae:	0f c0       	rjmp	.+30     	; 0x2bce <main+0x696>
    2bb0:	88 ec       	ldi	r24, 0xC8	; 200
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	9a 8b       	std	Y+18, r25	; 0x12
    2bb6:	89 8b       	std	Y+17, r24	; 0x11
    2bb8:	89 89       	ldd	r24, Y+17	; 0x11
    2bba:	9a 89       	ldd	r25, Y+18	; 0x12
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	f1 f7       	brne	.-4      	; 0x2bbc <main+0x684>
    2bc0:	9a 8b       	std	Y+18, r25	; 0x12
    2bc2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	9c 8b       	std	Y+20, r25	; 0x14
    2bcc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bce:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd0:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd2:	00 97       	sbiw	r24, 0x00	; 0
    2bd4:	69 f7       	brne	.-38     	; 0x2bb0 <main+0x678>
    2bd6:	14 c0       	rjmp	.+40     	; 0x2c00 <main+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd8:	6d 89       	ldd	r22, Y+21	; 0x15
    2bda:	7e 89       	ldd	r23, Y+22	; 0x16
    2bdc:	8f 89       	ldd	r24, Y+23	; 0x17
    2bde:	98 8d       	ldd	r25, Y+24	; 0x18
    2be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	9c 8b       	std	Y+20, r25	; 0x14
    2bea:	8b 8b       	std	Y+19, r24	; 0x13
    2bec:	8b 89       	ldd	r24, Y+19	; 0x13
    2bee:	9c 89       	ldd	r25, Y+20	; 0x14
    2bf0:	98 8b       	std	Y+16, r25	; 0x10
    2bf2:	8f 87       	std	Y+15, r24	; 0x0f
    2bf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bf6:	98 89       	ldd	r25, Y+16	; 0x10
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	f1 f7       	brne	.-4      	; 0x2bf8 <main+0x6c0>
    2bfc:	98 8b       	std	Y+16, r25	; 0x10
    2bfe:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		Servo_Motor_vTimer1Degree(-45);
    2c00:	83 ed       	ldi	r24, 0xD3	; 211
    2c02:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <Servo_Motor_vTimer1Degree>
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	aa e7       	ldi	r26, 0x7A	; 122
    2c0c:	b4 e4       	ldi	r27, 0x44	; 68
    2c0e:	8b 87       	std	Y+11, r24	; 0x0b
    2c10:	9c 87       	std	Y+12, r25	; 0x0c
    2c12:	ad 87       	std	Y+13, r26	; 0x0d
    2c14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	4a ef       	ldi	r20, 0xFA	; 250
    2c24:	54 e4       	ldi	r21, 0x44	; 68
    2c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	8f 83       	std	Y+7, r24	; 0x07
    2c30:	98 87       	std	Y+8, r25	; 0x08
    2c32:	a9 87       	std	Y+9, r26	; 0x09
    2c34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c36:	6f 81       	ldd	r22, Y+7	; 0x07
    2c38:	78 85       	ldd	r23, Y+8	; 0x08
    2c3a:	89 85       	ldd	r24, Y+9	; 0x09
    2c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	40 e8       	ldi	r20, 0x80	; 128
    2c44:	5f e3       	ldi	r21, 0x3F	; 63
    2c46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c4a:	88 23       	and	r24, r24
    2c4c:	2c f4       	brge	.+10     	; 0x2c58 <main+0x720>
		__ticks = 1;
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	9e 83       	std	Y+6, r25	; 0x06
    2c54:	8d 83       	std	Y+5, r24	; 0x05
    2c56:	3f c0       	rjmp	.+126    	; 0x2cd6 <main+0x79e>
	else if (__tmp > 65535)
    2c58:	6f 81       	ldd	r22, Y+7	; 0x07
    2c5a:	78 85       	ldd	r23, Y+8	; 0x08
    2c5c:	89 85       	ldd	r24, Y+9	; 0x09
    2c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	3f ef       	ldi	r19, 0xFF	; 255
    2c64:	4f e7       	ldi	r20, 0x7F	; 127
    2c66:	57 e4       	ldi	r21, 0x47	; 71
    2c68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c6c:	18 16       	cp	r1, r24
    2c6e:	4c f5       	brge	.+82     	; 0x2cc2 <main+0x78a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 e2       	ldi	r20, 0x20	; 32
    2c7e:	51 e4       	ldi	r21, 0x41	; 65
    2c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	bc 01       	movw	r22, r24
    2c8a:	cd 01       	movw	r24, r26
    2c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	9e 83       	std	Y+6, r25	; 0x06
    2c96:	8d 83       	std	Y+5, r24	; 0x05
    2c98:	0f c0       	rjmp	.+30     	; 0x2cb8 <main+0x780>
    2c9a:	88 ec       	ldi	r24, 0xC8	; 200
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	9c 83       	std	Y+4, r25	; 0x04
    2ca0:	8b 83       	std	Y+3, r24	; 0x03
    2ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca6:	01 97       	sbiw	r24, 0x01	; 1
    2ca8:	f1 f7       	brne	.-4      	; 0x2ca6 <main+0x76e>
    2caa:	9c 83       	std	Y+4, r25	; 0x04
    2cac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cae:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	9e 83       	std	Y+6, r25	; 0x06
    2cb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cba:	9e 81       	ldd	r25, Y+6	; 0x06
    2cbc:	00 97       	sbiw	r24, 0x00	; 0
    2cbe:	69 f7       	brne	.-38     	; 0x2c9a <main+0x762>
    2cc0:	4c cc       	rjmp	.-1896   	; 0x255a <main+0x22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc4:	78 85       	ldd	r23, Y+8	; 0x08
    2cc6:	89 85       	ldd	r24, Y+9	; 0x09
    2cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	9e 83       	std	Y+6, r25	; 0x06
    2cd4:	8d 83       	std	Y+5, r24	; 0x05
    2cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cda:	9a 83       	std	Y+2, r25	; 0x02
    2cdc:	89 83       	std	Y+1, r24	; 0x01
    2cde:	89 81       	ldd	r24, Y+1	; 0x01
    2ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	f1 f7       	brne	.-4      	; 0x2ce2 <main+0x7aa>
    2ce6:	9a 83       	std	Y+2, r25	; 0x02
    2ce8:	89 83       	std	Y+1, r24	; 0x01
    2cea:	37 cc       	rjmp	.-1938   	; 0x255a <main+0x22>

00002cec <__prologue_saves__>:
    2cec:	2f 92       	push	r2
    2cee:	3f 92       	push	r3
    2cf0:	4f 92       	push	r4
    2cf2:	5f 92       	push	r5
    2cf4:	6f 92       	push	r6
    2cf6:	7f 92       	push	r7
    2cf8:	8f 92       	push	r8
    2cfa:	9f 92       	push	r9
    2cfc:	af 92       	push	r10
    2cfe:	bf 92       	push	r11
    2d00:	cf 92       	push	r12
    2d02:	df 92       	push	r13
    2d04:	ef 92       	push	r14
    2d06:	ff 92       	push	r15
    2d08:	0f 93       	push	r16
    2d0a:	1f 93       	push	r17
    2d0c:	cf 93       	push	r28
    2d0e:	df 93       	push	r29
    2d10:	cd b7       	in	r28, 0x3d	; 61
    2d12:	de b7       	in	r29, 0x3e	; 62
    2d14:	ca 1b       	sub	r28, r26
    2d16:	db 0b       	sbc	r29, r27
    2d18:	0f b6       	in	r0, 0x3f	; 63
    2d1a:	f8 94       	cli
    2d1c:	de bf       	out	0x3e, r29	; 62
    2d1e:	0f be       	out	0x3f, r0	; 63
    2d20:	cd bf       	out	0x3d, r28	; 61
    2d22:	09 94       	ijmp

00002d24 <__epilogue_restores__>:
    2d24:	2a 88       	ldd	r2, Y+18	; 0x12
    2d26:	39 88       	ldd	r3, Y+17	; 0x11
    2d28:	48 88       	ldd	r4, Y+16	; 0x10
    2d2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d30:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d32:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d34:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d36:	b9 84       	ldd	r11, Y+9	; 0x09
    2d38:	c8 84       	ldd	r12, Y+8	; 0x08
    2d3a:	df 80       	ldd	r13, Y+7	; 0x07
    2d3c:	ee 80       	ldd	r14, Y+6	; 0x06
    2d3e:	fd 80       	ldd	r15, Y+5	; 0x05
    2d40:	0c 81       	ldd	r16, Y+4	; 0x04
    2d42:	1b 81       	ldd	r17, Y+3	; 0x03
    2d44:	aa 81       	ldd	r26, Y+2	; 0x02
    2d46:	b9 81       	ldd	r27, Y+1	; 0x01
    2d48:	ce 0f       	add	r28, r30
    2d4a:	d1 1d       	adc	r29, r1
    2d4c:	0f b6       	in	r0, 0x3f	; 63
    2d4e:	f8 94       	cli
    2d50:	de bf       	out	0x3e, r29	; 62
    2d52:	0f be       	out	0x3f, r0	; 63
    2d54:	cd bf       	out	0x3d, r28	; 61
    2d56:	ed 01       	movw	r28, r26
    2d58:	08 95       	ret

00002d5a <_exit>:
    2d5a:	f8 94       	cli

00002d5c <__stop_program>:
    2d5c:	ff cf       	rjmp	.-2      	; 0x2d5c <__stop_program>
