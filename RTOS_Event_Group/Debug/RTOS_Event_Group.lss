
RTOS_Event_Group.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004196  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00004196  0000422a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000041e  0080007a  0080007a  00004244  2**0
                  ALLOC
  3 .stab         00006828  00000000  00000000  00004244  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003650  00000000  00000000  0000aa6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 39       	cpi	r26, 0x98	; 152
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 c9 20 	jmp	0x4192	; 0x4192 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
void SetBit0( void *pvParameters);
void SetBit1( void *pvParameters);
void Task2( void *pvParameters);
//===================================================================/
int main(void)
{
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62

	// Create Tasks
	xTaskCreate(SetBit0, "Bit0", 100, NULL, 3, NULL);
      a0:	83 e8       	ldi	r24, 0x83	; 131
      a2:	90 e0       	ldi	r25, 0x00	; 0
      a4:	20 e6       	ldi	r18, 0x60	; 96
      a6:	30 e0       	ldi	r19, 0x00	; 0
      a8:	b9 01       	movw	r22, r18
      aa:	44 e6       	ldi	r20, 0x64	; 100
      ac:	50 e0       	ldi	r21, 0x00	; 0
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	30 e0       	ldi	r19, 0x00	; 0
      b2:	03 e0       	ldi	r16, 0x03	; 3
      b4:	ee 24       	eor	r14, r14
      b6:	ff 24       	eor	r15, r15
      b8:	0e 94 fd 10 	call	0x21fa	; 0x21fa <xTaskCreate>
	xTaskCreate(SetBit1, "Bit1", 100, NULL, 2, NULL);
      bc:	87 e9       	ldi	r24, 0x97	; 151
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	25 e6       	ldi	r18, 0x65	; 101
      c2:	30 e0       	ldi	r19, 0x00	; 0
      c4:	b9 01       	movw	r22, r18
      c6:	44 e6       	ldi	r20, 0x64	; 100
      c8:	50 e0       	ldi	r21, 0x00	; 0
      ca:	20 e0       	ldi	r18, 0x00	; 0
      cc:	30 e0       	ldi	r19, 0x00	; 0
      ce:	02 e0       	ldi	r16, 0x02	; 2
      d0:	ee 24       	eor	r14, r14
      d2:	ff 24       	eor	r15, r15
      d4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <xTaskCreate>
	xTaskCreate(Task2, "Task 2", 200, NULL, 1, NULL);
      d8:	8b ea       	ldi	r24, 0xAB	; 171
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	2a e6       	ldi	r18, 0x6A	; 106
      de:	30 e0       	ldi	r19, 0x00	; 0
      e0:	b9 01       	movw	r22, r18
      e2:	48 ec       	ldi	r20, 0xC8	; 200
      e4:	50 e0       	ldi	r21, 0x00	; 0
      e6:	20 e0       	ldi	r18, 0x00	; 0
      e8:	30 e0       	ldi	r19, 0x00	; 0
      ea:	01 e0       	ldi	r16, 0x01	; 1
      ec:	ee 24       	eor	r14, r14
      ee:	ff 24       	eor	r15, r15
      f0:	0e 94 fd 10 	call	0x21fa	; 0x21fa <xTaskCreate>
	//Create Event Group
	myEventGroup = xEventGroupCreate();
      f4:	0e 94 04 01 	call	0x208	; 0x208 <xEventGroupCreate>
      f8:	90 93 7b 00 	sts	0x007B, r25
      fc:	80 93 7a 00 	sts	0x007A, r24
	vTaskStartScheduler();
     100:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <vTaskStartScheduler>
     104:	ff cf       	rjmp	.-2      	; 0x104 <main+0x72>

00000106 <SetBit0>:

	}
}
//===================================================================/
void SetBit0( void * pvParameters)
{
     106:	df 93       	push	r29
     108:	cf 93       	push	r28
     10a:	00 d0       	rcall	.+0      	; 0x10c <SetBit0+0x6>
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
     110:	9a 83       	std	Y+2, r25	; 0x02
     112:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		vTaskDelay(5000);
     114:	88 e8       	ldi	r24, 0x88	; 136
     116:	93 e1       	ldi	r25, 0x13	; 19
     118:	0e 94 8c 13 	call	0x2718	; 0x2718 <vTaskDelay>
		xEventGroupSetBits(myEventGroup, 0x01);
     11c:	80 91 7a 00 	lds	r24, 0x007A
     120:	90 91 7b 00 	lds	r25, 0x007B
     124:	61 e0       	ldi	r22, 0x01	; 1
     126:	70 e0       	ldi	r23, 0x00	; 0
     128:	0e 94 f5 02 	call	0x5ea	; 0x5ea <xEventGroupSetBits>
     12c:	f3 cf       	rjmp	.-26     	; 0x114 <SetBit0+0xe>

0000012e <SetBit1>:
	}
}
//===================================================================/
void SetBit1( void * pvParameters)
{
     12e:	df 93       	push	r29
     130:	cf 93       	push	r28
     132:	00 d0       	rcall	.+0      	; 0x134 <SetBit1+0x6>
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62
     138:	9a 83       	std	Y+2, r25	; 0x02
     13a:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		vTaskDelay(2000);
     13c:	80 ed       	ldi	r24, 0xD0	; 208
     13e:	97 e0       	ldi	r25, 0x07	; 7
     140:	0e 94 8c 13 	call	0x2718	; 0x2718 <vTaskDelay>
		xEventGroupSetBits(myEventGroup, 0x02);
     144:	80 91 7a 00 	lds	r24, 0x007A
     148:	90 91 7b 00 	lds	r25, 0x007B
     14c:	62 e0       	ldi	r22, 0x02	; 2
     14e:	70 e0       	ldi	r23, 0x00	; 0
     150:	0e 94 f5 02 	call	0x5ea	; 0x5ea <xEventGroupSetBits>
     154:	f3 cf       	rjmp	.-26     	; 0x13c <SetBit1+0xe>

00000156 <Task2>:
	}
}
//===================================================================/
void Task2( void *pvParameters)
{
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	df 93       	push	r29
     15c:	cf 93       	push	r28
     15e:	00 d0       	rcall	.+0      	; 0x160 <Task2+0xa>
     160:	00 d0       	rcall	.+0      	; 0x162 <Task2+0xc>
     162:	cd b7       	in	r28, 0x3d	; 61
     164:	de b7       	in	r29, 0x3e	; 62
     166:	9c 83       	std	Y+4, r25	; 0x04
     168:	8b 83       	std	Y+3, r24	; 0x03
	/*Some initializations*/
	DDRD |= (1<<7);
     16a:	a1 e3       	ldi	r26, 0x31	; 49
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	e1 e3       	ldi	r30, 0x31	; 49
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	80 68       	ori	r24, 0x80	; 128
     176:	8c 93       	st	X, r24
	DDRD |= (1<<6);
     178:	a1 e3       	ldi	r26, 0x31	; 49
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	e1 e3       	ldi	r30, 0x31	; 49
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	80 81       	ld	r24, Z
     182:	80 64       	ori	r24, 0x40	; 64
     184:	8c 93       	st	X, r24
	DDRD |= (1<<5);
     186:	a1 e3       	ldi	r26, 0x31	; 49
     188:	b0 e0       	ldi	r27, 0x00	; 0
     18a:	e1 e3       	ldi	r30, 0x31	; 49
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	80 62       	ori	r24, 0x20	; 32
     192:	8c 93       	st	X, r24
	EventBits_t myBitsReturned = 0X00;
     194:	1a 82       	std	Y+2, r1	; 0x02
     196:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		myBitsReturned = xEventGroupWaitBits(myEventGroup, 0x03, pdTRUE, pdFALSE, 1000);
     198:	80 91 7a 00 	lds	r24, 0x007A
     19c:	90 91 7b 00 	lds	r25, 0x007B
     1a0:	63 e0       	ldi	r22, 0x03	; 3
     1a2:	70 e0       	ldi	r23, 0x00	; 0
     1a4:	41 e0       	ldi	r20, 0x01	; 1
     1a6:	20 e0       	ldi	r18, 0x00	; 0
     1a8:	08 ee       	ldi	r16, 0xE8	; 232
     1aa:	13 e0       	ldi	r17, 0x03	; 3
     1ac:	0e 94 da 01 	call	0x3b4	; 0x3b4 <xEventGroupWaitBits>
     1b0:	9a 83       	std	Y+2, r25	; 0x02
     1b2:	89 83       	std	Y+1, r24	; 0x01
		if (myBitsReturned == 0x01)
     1b4:	89 81       	ldd	r24, Y+1	; 0x01
     1b6:	9a 81       	ldd	r25, Y+2	; 0x02
     1b8:	81 30       	cpi	r24, 0x01	; 1
     1ba:	91 05       	cpc	r25, r1
     1bc:	49 f4       	brne	.+18     	; 0x1d0 <Task2+0x7a>
		{
			PORTD ^= (1 << 7);
     1be:	a2 e3       	ldi	r26, 0x32	; 50
     1c0:	b0 e0       	ldi	r27, 0x00	; 0
     1c2:	e2 e3       	ldi	r30, 0x32	; 50
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	90 81       	ld	r25, Z
     1c8:	80 e8       	ldi	r24, 0x80	; 128
     1ca:	89 27       	eor	r24, r25
     1cc:	8c 93       	st	X, r24
     1ce:	e4 cf       	rjmp	.-56     	; 0x198 <Task2+0x42>
		}
		else if(myBitsReturned == 0x02)
     1d0:	89 81       	ldd	r24, Y+1	; 0x01
     1d2:	9a 81       	ldd	r25, Y+2	; 0x02
     1d4:	82 30       	cpi	r24, 0x02	; 2
     1d6:	91 05       	cpc	r25, r1
     1d8:	49 f4       	brne	.+18     	; 0x1ec <Task2+0x96>
		{
			PORTD ^= ( 1<< 6);
     1da:	a2 e3       	ldi	r26, 0x32	; 50
     1dc:	b0 e0       	ldi	r27, 0x00	; 0
     1de:	e2 e3       	ldi	r30, 0x32	; 50
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	90 81       	ld	r25, Z
     1e4:	80 e4       	ldi	r24, 0x40	; 64
     1e6:	89 27       	eor	r24, r25
     1e8:	8c 93       	st	X, r24
     1ea:	d6 cf       	rjmp	.-84     	; 0x198 <Task2+0x42>
		}
		else if (myBitsReturned == 0x03)
     1ec:	89 81       	ldd	r24, Y+1	; 0x01
     1ee:	9a 81       	ldd	r25, Y+2	; 0x02
     1f0:	83 30       	cpi	r24, 0x03	; 3
     1f2:	91 05       	cpc	r25, r1
     1f4:	89 f6       	brne	.-94     	; 0x198 <Task2+0x42>
		{
			PORTD ^= (1 << 5);
     1f6:	a2 e3       	ldi	r26, 0x32	; 50
     1f8:	b0 e0       	ldi	r27, 0x00	; 0
     1fa:	e2 e3       	ldi	r30, 0x32	; 50
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	90 81       	ld	r25, Z
     200:	80 e2       	ldi	r24, 0x20	; 32
     202:	89 27       	eor	r24, r25
     204:	8c 93       	st	X, r24
     206:	c8 cf       	rjmp	.-112    	; 0x198 <Task2+0x42>

00000208 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
     208:	df 93       	push	r29
     20a:	cf 93       	push	r28
     20c:	00 d0       	rcall	.+0      	; 0x20e <xEventGroupCreate+0x6>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
     212:	8b e0       	ldi	r24, 0x0B	; 11
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 44 04 	call	0x888	; 0x888 <pvPortMalloc>
     21a:	9a 83       	std	Y+2, r25	; 0x02
     21c:	89 83       	std	Y+1, r24	; 0x01

		if( pxEventBits != NULL )
     21e:	89 81       	ldd	r24, Y+1	; 0x01
     220:	9a 81       	ldd	r25, Y+2	; 0x02
     222:	00 97       	sbiw	r24, 0x00	; 0
     224:	49 f0       	breq	.+18     	; 0x238 <xEventGroupCreate+0x30>
		{
			pxEventBits->uxEventBits = 0;
     226:	e9 81       	ldd	r30, Y+1	; 0x01
     228:	fa 81       	ldd	r31, Y+2	; 0x02
     22a:	11 82       	std	Z+1, r1	; 0x01
     22c:	10 82       	st	Z, r1
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     22e:	89 81       	ldd	r24, Y+1	; 0x01
     230:	9a 81       	ldd	r25, Y+2	; 0x02
     232:	02 96       	adiw	r24, 0x02	; 2
     234:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	9a 81       	ldd	r25, Y+2	; 0x02
	}
     23c:	0f 90       	pop	r0
     23e:	0f 90       	pop	r0
     240:	cf 91       	pop	r28
     242:	df 91       	pop	r29
     244:	08 95       	ret

00000246 <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
     246:	df 93       	push	r29
     248:	cf 93       	push	r28
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
     24e:	60 97       	sbiw	r28, 0x10	; 16
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	f8 94       	cli
     254:	de bf       	out	0x3e, r29	; 62
     256:	0f be       	out	0x3f, r0	; 63
     258:	cd bf       	out	0x3d, r28	; 61
     25a:	9a 87       	std	Y+10, r25	; 0x0a
     25c:	89 87       	std	Y+9, r24	; 0x09
     25e:	7c 87       	std	Y+12, r23	; 0x0c
     260:	6b 87       	std	Y+11, r22	; 0x0b
     262:	5e 87       	std	Y+14, r21	; 0x0e
     264:	4d 87       	std	Y+13, r20	; 0x0d
     266:	38 8b       	std	Y+16, r19	; 0x10
     268:	2f 87       	std	Y+15, r18	; 0x0f
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     26a:	89 85       	ldd	r24, Y+9	; 0x09
     26c:	9a 85       	ldd	r25, Y+10	; 0x0a
     26e:	9c 83       	std	Y+4, r25	; 0x04
     270:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
     272:	19 82       	std	Y+1, r1	; 0x01
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     274:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
     278:	eb 81       	ldd	r30, Y+3	; 0x03
     27a:	fc 81       	ldd	r31, Y+4	; 0x04
     27c:	80 81       	ld	r24, Z
     27e:	91 81       	ldd	r25, Z+1	; 0x01
     280:	98 87       	std	Y+8, r25	; 0x08
     282:	8f 83       	std	Y+7, r24	; 0x07

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
     284:	89 85       	ldd	r24, Y+9	; 0x09
     286:	9a 85       	ldd	r25, Y+10	; 0x0a
     288:	2b 85       	ldd	r18, Y+11	; 0x0b
     28a:	3c 85       	ldd	r19, Y+12	; 0x0c
     28c:	b9 01       	movw	r22, r18
     28e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
     292:	2f 81       	ldd	r18, Y+7	; 0x07
     294:	38 85       	ldd	r19, Y+8	; 0x08
     296:	8b 85       	ldd	r24, Y+11	; 0x0b
     298:	9c 85       	ldd	r25, Y+12	; 0x0c
     29a:	28 2b       	or	r18, r24
     29c:	39 2b       	or	r19, r25
     29e:	8d 85       	ldd	r24, Y+13	; 0x0d
     2a0:	9e 85       	ldd	r25, Y+14	; 0x0e
     2a2:	28 23       	and	r18, r24
     2a4:	39 23       	and	r19, r25
     2a6:	8d 85       	ldd	r24, Y+13	; 0x0d
     2a8:	9e 85       	ldd	r25, Y+14	; 0x0e
     2aa:	28 17       	cp	r18, r24
     2ac:	39 07       	cpc	r19, r25
     2ae:	c9 f4       	brne	.+50     	; 0x2e2 <xEventGroupSync+0x9c>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
     2b0:	2f 81       	ldd	r18, Y+7	; 0x07
     2b2:	38 85       	ldd	r19, Y+8	; 0x08
     2b4:	8b 85       	ldd	r24, Y+11	; 0x0b
     2b6:	9c 85       	ldd	r25, Y+12	; 0x0c
     2b8:	82 2b       	or	r24, r18
     2ba:	93 2b       	or	r25, r19
     2bc:	9e 83       	std	Y+6, r25	; 0x06
     2be:	8d 83       	std	Y+5, r24	; 0x05

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     2c0:	eb 81       	ldd	r30, Y+3	; 0x03
     2c2:	fc 81       	ldd	r31, Y+4	; 0x04
     2c4:	20 81       	ld	r18, Z
     2c6:	31 81       	ldd	r19, Z+1	; 0x01
     2c8:	8d 85       	ldd	r24, Y+13	; 0x0d
     2ca:	9e 85       	ldd	r25, Y+14	; 0x0e
     2cc:	80 95       	com	r24
     2ce:	90 95       	com	r25
     2d0:	82 23       	and	r24, r18
     2d2:	93 23       	and	r25, r19
     2d4:	eb 81       	ldd	r30, Y+3	; 0x03
     2d6:	fc 81       	ldd	r31, Y+4	; 0x04
     2d8:	91 83       	std	Z+1, r25	; 0x01
     2da:	80 83       	st	Z, r24

			xTicksToWait = 0;
     2dc:	18 8a       	std	Y+16, r1	; 0x10
     2de:	1f 86       	std	Y+15, r1	; 0x0f
     2e0:	1c c0       	rjmp	.+56     	; 0x31a <xEventGroupSync+0xd4>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
     2e2:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e4:	98 89       	ldd	r25, Y+16	; 0x10
     2e6:	00 97       	sbiw	r24, 0x00	; 0
     2e8:	91 f0       	breq	.+36     	; 0x30e <xEventGroupSync+0xc8>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
     2ea:	8b 81       	ldd	r24, Y+3	; 0x03
     2ec:	9c 81       	ldd	r25, Y+4	; 0x04
     2ee:	bc 01       	movw	r22, r24
     2f0:	6e 5f       	subi	r22, 0xFE	; 254
     2f2:	7f 4f       	sbci	r23, 0xFF	; 255
     2f4:	8d 85       	ldd	r24, Y+13	; 0x0d
     2f6:	9e 85       	ldd	r25, Y+14	; 0x0e
     2f8:	9c 01       	movw	r18, r24
     2fa:	35 60       	ori	r19, 0x05	; 5
     2fc:	4f 85       	ldd	r20, Y+15	; 0x0f
     2fe:	58 89       	ldd	r21, Y+16	; 0x10
     300:	cb 01       	movw	r24, r22
     302:	b9 01       	movw	r22, r18
     304:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
     308:	1e 82       	std	Y+6, r1	; 0x06
     30a:	1d 82       	std	Y+5, r1	; 0x05
     30c:	06 c0       	rjmp	.+12     	; 0x31a <xEventGroupSync+0xd4>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     30e:	eb 81       	ldd	r30, Y+3	; 0x03
     310:	fc 81       	ldd	r31, Y+4	; 0x04
     312:	80 81       	ld	r24, Z
     314:	91 81       	ldd	r25, Z+1	; 0x01
     316:	9e 83       	std	Y+6, r25	; 0x06
     318:	8d 83       	std	Y+5, r24	; 0x05
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     31a:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <xTaskResumeAll>
     31e:	8a 83       	std	Y+2, r24	; 0x02

	if( xTicksToWait != ( TickType_t ) 0 )
     320:	8f 85       	ldd	r24, Y+15	; 0x0f
     322:	98 89       	ldd	r25, Y+16	; 0x10
     324:	00 97       	sbiw	r24, 0x00	; 0
     326:	09 f4       	brne	.+2      	; 0x32a <xEventGroupSync+0xe4>
     328:	3a c0       	rjmp	.+116    	; 0x39e <xEventGroupSync+0x158>
	{
		if( xAlreadyYielded == pdFALSE )
     32a:	8a 81       	ldd	r24, Y+2	; 0x02
     32c:	88 23       	and	r24, r24
     32e:	11 f4       	brne	.+4      	; 0x334 <xEventGroupSync+0xee>
		{
			portYIELD_WITHIN_API();
     330:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     334:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <uxTaskResetEventItemValue>
     338:	9e 83       	std	Y+6, r25	; 0x06
     33a:	8d 83       	std	Y+5, r24	; 0x05

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     33c:	8d 81       	ldd	r24, Y+5	; 0x05
     33e:	9e 81       	ldd	r25, Y+6	; 0x06
     340:	80 70       	andi	r24, 0x00	; 0
     342:	92 70       	andi	r25, 0x02	; 2
     344:	00 97       	sbiw	r24, 0x00	; 0
     346:	31 f5       	brne	.+76     	; 0x394 <xEventGroupSync+0x14e>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	0f 92       	push	r0
			{
				uxReturn = pxEventBits->uxEventBits;
     34e:	eb 81       	ldd	r30, Y+3	; 0x03
     350:	fc 81       	ldd	r31, Y+4	; 0x04
     352:	80 81       	ld	r24, Z
     354:	91 81       	ldd	r25, Z+1	; 0x01
     356:	9e 83       	std	Y+6, r25	; 0x06
     358:	8d 83       	std	Y+5, r24	; 0x05

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
     35a:	2d 81       	ldd	r18, Y+5	; 0x05
     35c:	3e 81       	ldd	r19, Y+6	; 0x06
     35e:	8d 85       	ldd	r24, Y+13	; 0x0d
     360:	9e 85       	ldd	r25, Y+14	; 0x0e
     362:	28 23       	and	r18, r24
     364:	39 23       	and	r19, r25
     366:	8d 85       	ldd	r24, Y+13	; 0x0d
     368:	9e 85       	ldd	r25, Y+14	; 0x0e
     36a:	28 17       	cp	r18, r24
     36c:	39 07       	cpc	r19, r25
     36e:	71 f4       	brne	.+28     	; 0x38c <xEventGroupSync+0x146>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     370:	eb 81       	ldd	r30, Y+3	; 0x03
     372:	fc 81       	ldd	r31, Y+4	; 0x04
     374:	20 81       	ld	r18, Z
     376:	31 81       	ldd	r19, Z+1	; 0x01
     378:	8d 85       	ldd	r24, Y+13	; 0x0d
     37a:	9e 85       	ldd	r25, Y+14	; 0x0e
     37c:	80 95       	com	r24
     37e:	90 95       	com	r25
     380:	82 23       	and	r24, r18
     382:	93 23       	and	r25, r19
     384:	eb 81       	ldd	r30, Y+3	; 0x03
     386:	fc 81       	ldd	r31, Y+4	; 0x04
     388:	91 83       	std	Z+1, r25	; 0x01
     38a:	80 83       	st	Z, r24
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     38c:	0f 90       	pop	r0
     38e:	0f be       	out	0x3f, r0	; 63

			xTimeoutOccurred = pdTRUE;
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	89 83       	std	Y+1, r24	; 0x01
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     394:	8d 81       	ldd	r24, Y+5	; 0x05
     396:	9e 81       	ldd	r25, Y+6	; 0x06
     398:	90 70       	andi	r25, 0x00	; 0
     39a:	9e 83       	std	Y+6, r25	; 0x06
     39c:	8d 83       	std	Y+5, r24	; 0x05
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
     39e:	8d 81       	ldd	r24, Y+5	; 0x05
     3a0:	9e 81       	ldd	r25, Y+6	; 0x06
}
     3a2:	60 96       	adiw	r28, 0x10	; 16
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
     3ae:	cf 91       	pop	r28
     3b0:	df 91       	pop	r29
     3b2:	08 95       	ret

000003b4 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	df 93       	push	r29
     3ba:	cf 93       	push	r28
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	63 97       	sbiw	r28, 0x13	; 19
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	de bf       	out	0x3e, r29	; 62
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	cd bf       	out	0x3d, r28	; 61
     3cc:	9d 87       	std	Y+13, r25	; 0x0d
     3ce:	8c 87       	std	Y+12, r24	; 0x0c
     3d0:	7f 87       	std	Y+15, r23	; 0x0f
     3d2:	6e 87       	std	Y+14, r22	; 0x0e
     3d4:	48 8b       	std	Y+16, r20	; 0x10
     3d6:	29 8b       	std	Y+17, r18	; 0x11
     3d8:	1b 8b       	std	Y+19, r17	; 0x13
     3da:	0a 8b       	std	Y+18, r16	; 0x12
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     3dc:	8c 85       	ldd	r24, Y+12	; 0x0c
     3de:	9d 85       	ldd	r25, Y+13	; 0x0d
     3e0:	9b 87       	std	Y+11, r25	; 0x0b
     3e2:	8a 87       	std	Y+10, r24	; 0x0a
EventBits_t uxReturn, uxControlBits = 0;
     3e4:	1f 82       	std	Y+7, r1	; 0x07
     3e6:	1e 82       	std	Y+6, r1	; 0x06
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
     3e8:	1b 82       	std	Y+3, r1	; 0x03
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
     3ea:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
     3ee:	ea 85       	ldd	r30, Y+10	; 0x0a
     3f0:	fb 85       	ldd	r31, Y+11	; 0x0b
     3f2:	80 81       	ld	r24, Z
     3f4:	91 81       	ldd	r25, Z+1	; 0x01
     3f6:	9a 83       	std	Y+2, r25	; 0x02
     3f8:	89 83       	std	Y+1, r24	; 0x01

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
     3fa:	89 81       	ldd	r24, Y+1	; 0x01
     3fc:	9a 81       	ldd	r25, Y+2	; 0x02
     3fe:	2e 85       	ldd	r18, Y+14	; 0x0e
     400:	3f 85       	ldd	r19, Y+15	; 0x0f
     402:	b9 01       	movw	r22, r18
     404:	49 89       	ldd	r20, Y+17	; 0x11
     406:	0e 94 12 04 	call	0x824	; 0x824 <prvTestWaitCondition>
     40a:	8d 83       	std	Y+5, r24	; 0x05

		if( xWaitConditionMet != pdFALSE )
     40c:	8d 81       	ldd	r24, Y+5	; 0x05
     40e:	88 23       	and	r24, r24
     410:	c1 f0       	breq	.+48     	; 0x442 <xEventGroupWaitBits+0x8e>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
     412:	89 81       	ldd	r24, Y+1	; 0x01
     414:	9a 81       	ldd	r25, Y+2	; 0x02
     416:	99 87       	std	Y+9, r25	; 0x09
     418:	88 87       	std	Y+8, r24	; 0x08
			xTicksToWait = ( TickType_t ) 0;
     41a:	1b 8a       	std	Y+19, r1	; 0x13
     41c:	1a 8a       	std	Y+18, r1	; 0x12

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
     41e:	88 89       	ldd	r24, Y+16	; 0x10
     420:	88 23       	and	r24, r24
     422:	d9 f1       	breq	.+118    	; 0x49a <xEventGroupWaitBits+0xe6>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     424:	ea 85       	ldd	r30, Y+10	; 0x0a
     426:	fb 85       	ldd	r31, Y+11	; 0x0b
     428:	20 81       	ld	r18, Z
     42a:	31 81       	ldd	r19, Z+1	; 0x01
     42c:	8e 85       	ldd	r24, Y+14	; 0x0e
     42e:	9f 85       	ldd	r25, Y+15	; 0x0f
     430:	80 95       	com	r24
     432:	90 95       	com	r25
     434:	82 23       	and	r24, r18
     436:	93 23       	and	r25, r19
     438:	ea 85       	ldd	r30, Y+10	; 0x0a
     43a:	fb 85       	ldd	r31, Y+11	; 0x0b
     43c:	91 83       	std	Z+1, r25	; 0x01
     43e:	80 83       	st	Z, r24
     440:	2c c0       	rjmp	.+88     	; 0x49a <xEventGroupWaitBits+0xe6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
     442:	8a 89       	ldd	r24, Y+18	; 0x12
     444:	9b 89       	ldd	r25, Y+19	; 0x13
     446:	00 97       	sbiw	r24, 0x00	; 0
     448:	29 f4       	brne	.+10     	; 0x454 <xEventGroupWaitBits+0xa0>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
     44a:	89 81       	ldd	r24, Y+1	; 0x01
     44c:	9a 81       	ldd	r25, Y+2	; 0x02
     44e:	99 87       	std	Y+9, r25	; 0x09
     450:	88 87       	std	Y+8, r24	; 0x08
     452:	23 c0       	rjmp	.+70     	; 0x49a <xEventGroupWaitBits+0xe6>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
     454:	88 89       	ldd	r24, Y+16	; 0x10
     456:	88 23       	and	r24, r24
     458:	29 f0       	breq	.+10     	; 0x464 <xEventGroupWaitBits+0xb0>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
     45a:	8e 81       	ldd	r24, Y+6	; 0x06
     45c:	9f 81       	ldd	r25, Y+7	; 0x07
     45e:	91 60       	ori	r25, 0x01	; 1
     460:	9f 83       	std	Y+7, r25	; 0x07
     462:	8e 83       	std	Y+6, r24	; 0x06
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
     464:	89 89       	ldd	r24, Y+17	; 0x11
     466:	88 23       	and	r24, r24
     468:	29 f0       	breq	.+10     	; 0x474 <xEventGroupWaitBits+0xc0>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
     46a:	8e 81       	ldd	r24, Y+6	; 0x06
     46c:	9f 81       	ldd	r25, Y+7	; 0x07
     46e:	94 60       	ori	r25, 0x04	; 4
     470:	9f 83       	std	Y+7, r25	; 0x07
     472:	8e 83       	std	Y+6, r24	; 0x06
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
     474:	8a 85       	ldd	r24, Y+10	; 0x0a
     476:	9b 85       	ldd	r25, Y+11	; 0x0b
     478:	bc 01       	movw	r22, r24
     47a:	6e 5f       	subi	r22, 0xFE	; 254
     47c:	7f 4f       	sbci	r23, 0xFF	; 255
     47e:	2e 85       	ldd	r18, Y+14	; 0x0e
     480:	3f 85       	ldd	r19, Y+15	; 0x0f
     482:	8e 81       	ldd	r24, Y+6	; 0x06
     484:	9f 81       	ldd	r25, Y+7	; 0x07
     486:	28 2b       	or	r18, r24
     488:	39 2b       	or	r19, r25
     48a:	4a 89       	ldd	r20, Y+18	; 0x12
     48c:	5b 89       	ldd	r21, Y+19	; 0x13
     48e:	cb 01       	movw	r24, r22
     490:	b9 01       	movw	r22, r18
     492:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
     496:	19 86       	std	Y+9, r1	; 0x09
     498:	18 86       	std	Y+8, r1	; 0x08

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
     49a:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <xTaskResumeAll>
     49e:	8c 83       	std	Y+4, r24	; 0x04

	if( xTicksToWait != ( TickType_t ) 0 )
     4a0:	8a 89       	ldd	r24, Y+18	; 0x12
     4a2:	9b 89       	ldd	r25, Y+19	; 0x13
     4a4:	00 97       	sbiw	r24, 0x00	; 0
     4a6:	09 f4       	brne	.+2      	; 0x4aa <xEventGroupWaitBits+0xf6>
     4a8:	3b c0       	rjmp	.+118    	; 0x520 <xEventGroupWaitBits+0x16c>
	{
		if( xAlreadyYielded == pdFALSE )
     4aa:	8c 81       	ldd	r24, Y+4	; 0x04
     4ac:	88 23       	and	r24, r24
     4ae:	11 f4       	brne	.+4      	; 0x4b4 <xEventGroupWaitBits+0x100>
		{
			portYIELD_WITHIN_API();
     4b0:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
     4b4:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <uxTaskResetEventItemValue>
     4b8:	99 87       	std	Y+9, r25	; 0x09
     4ba:	88 87       	std	Y+8, r24	; 0x08

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     4bc:	88 85       	ldd	r24, Y+8	; 0x08
     4be:	99 85       	ldd	r25, Y+9	; 0x09
     4c0:	80 70       	andi	r24, 0x00	; 0
     4c2:	92 70       	andi	r25, 0x02	; 2
     4c4:	00 97       	sbiw	r24, 0x00	; 0
     4c6:	39 f5       	brne	.+78     	; 0x516 <xEventGroupWaitBits+0x162>
		{
			taskENTER_CRITICAL();
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	0f 92       	push	r0
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
     4ce:	ea 85       	ldd	r30, Y+10	; 0x0a
     4d0:	fb 85       	ldd	r31, Y+11	; 0x0b
     4d2:	80 81       	ld	r24, Z
     4d4:	91 81       	ldd	r25, Z+1	; 0x01
     4d6:	99 87       	std	Y+9, r25	; 0x09
     4d8:	88 87       	std	Y+8, r24	; 0x08

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
     4da:	88 85       	ldd	r24, Y+8	; 0x08
     4dc:	99 85       	ldd	r25, Y+9	; 0x09
     4de:	2e 85       	ldd	r18, Y+14	; 0x0e
     4e0:	3f 85       	ldd	r19, Y+15	; 0x0f
     4e2:	b9 01       	movw	r22, r18
     4e4:	49 89       	ldd	r20, Y+17	; 0x11
     4e6:	0e 94 12 04 	call	0x824	; 0x824 <prvTestWaitCondition>
     4ea:	88 23       	and	r24, r24
     4ec:	89 f0       	breq	.+34     	; 0x510 <xEventGroupWaitBits+0x15c>
				{
					if( xClearOnExit != pdFALSE )
     4ee:	88 89       	ldd	r24, Y+16	; 0x10
     4f0:	88 23       	and	r24, r24
     4f2:	71 f0       	breq	.+28     	; 0x510 <xEventGroupWaitBits+0x15c>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     4f4:	ea 85       	ldd	r30, Y+10	; 0x0a
     4f6:	fb 85       	ldd	r31, Y+11	; 0x0b
     4f8:	20 81       	ld	r18, Z
     4fa:	31 81       	ldd	r19, Z+1	; 0x01
     4fc:	8e 85       	ldd	r24, Y+14	; 0x0e
     4fe:	9f 85       	ldd	r25, Y+15	; 0x0f
     500:	80 95       	com	r24
     502:	90 95       	com	r25
     504:	82 23       	and	r24, r18
     506:	93 23       	and	r25, r19
     508:	ea 85       	ldd	r30, Y+10	; 0x0a
     50a:	fb 85       	ldd	r31, Y+11	; 0x0b
     50c:	91 83       	std	Z+1, r25	; 0x01
     50e:	80 83       	st	Z, r24
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
     510:	0f 90       	pop	r0
     512:	0f be       	out	0x3f, r0	; 63

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
     514:	1b 82       	std	Y+3, r1	; 0x03
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     516:	88 85       	ldd	r24, Y+8	; 0x08
     518:	99 85       	ldd	r25, Y+9	; 0x09
     51a:	90 70       	andi	r25, 0x00	; 0
     51c:	99 87       	std	Y+9, r25	; 0x09
     51e:	88 87       	std	Y+8, r24	; 0x08
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
     520:	88 85       	ldd	r24, Y+8	; 0x08
     522:	99 85       	ldd	r25, Y+9	; 0x09
}
     524:	63 96       	adiw	r28, 0x13	; 19
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	f8 94       	cli
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	cd bf       	out	0x3d, r28	; 61
     530:	cf 91       	pop	r28
     532:	df 91       	pop	r29
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	08 95       	ret

0000053a <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
     53a:	df 93       	push	r29
     53c:	cf 93       	push	r28
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
     542:	28 97       	sbiw	r28, 0x08	; 8
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	de bf       	out	0x3e, r29	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	cd bf       	out	0x3d, r28	; 61
     54e:	9e 83       	std	Y+6, r25	; 0x06
     550:	8d 83       	std	Y+5, r24	; 0x05
     552:	78 87       	std	Y+8, r23	; 0x08
     554:	6f 83       	std	Y+7, r22	; 0x07
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     556:	8d 81       	ldd	r24, Y+5	; 0x05
     558:	9e 81       	ldd	r25, Y+6	; 0x06
     55a:	9c 83       	std	Y+4, r25	; 0x04
     55c:	8b 83       	std	Y+3, r24	; 0x03
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
     55e:	0f b6       	in	r0, 0x3f	; 63
     560:	f8 94       	cli
     562:	0f 92       	push	r0
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
     564:	eb 81       	ldd	r30, Y+3	; 0x03
     566:	fc 81       	ldd	r31, Y+4	; 0x04
     568:	80 81       	ld	r24, Z
     56a:	91 81       	ldd	r25, Z+1	; 0x01
     56c:	9a 83       	std	Y+2, r25	; 0x02
     56e:	89 83       	std	Y+1, r24	; 0x01

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     570:	eb 81       	ldd	r30, Y+3	; 0x03
     572:	fc 81       	ldd	r31, Y+4	; 0x04
     574:	20 81       	ld	r18, Z
     576:	31 81       	ldd	r19, Z+1	; 0x01
     578:	8f 81       	ldd	r24, Y+7	; 0x07
     57a:	98 85       	ldd	r25, Y+8	; 0x08
     57c:	80 95       	com	r24
     57e:	90 95       	com	r25
     580:	82 23       	and	r24, r18
     582:	93 23       	and	r25, r19
     584:	eb 81       	ldd	r30, Y+3	; 0x03
     586:	fc 81       	ldd	r31, Y+4	; 0x04
     588:	91 83       	std	Z+1, r25	; 0x01
     58a:	80 83       	st	Z, r24
	}
	taskEXIT_CRITICAL();
     58c:	0f 90       	pop	r0
     58e:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
     590:	89 81       	ldd	r24, Y+1	; 0x01
     592:	9a 81       	ldd	r25, Y+2	; 0x02
}
     594:	28 96       	adiw	r28, 0x08	; 8
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
     5a0:	cf 91       	pop	r28
     5a2:	df 91       	pop	r29
     5a4:	08 95       	ret

000005a6 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
     5a6:	df 93       	push	r29
     5a8:	cf 93       	push	r28
     5aa:	cd b7       	in	r28, 0x3d	; 61
     5ac:	de b7       	in	r29, 0x3e	; 62
     5ae:	27 97       	sbiw	r28, 0x07	; 7
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	f8 94       	cli
     5b4:	de bf       	out	0x3e, r29	; 62
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	cd bf       	out	0x3d, r28	; 61
     5ba:	9f 83       	std	Y+7, r25	; 0x07
     5bc:	8e 83       	std	Y+6, r24	; 0x06
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     5be:	8e 81       	ldd	r24, Y+6	; 0x06
     5c0:	9f 81       	ldd	r25, Y+7	; 0x07
     5c2:	9c 83       	std	Y+4, r25	; 0x04
     5c4:	8b 83       	std	Y+3, r24	; 0x03
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     5c6:	1d 82       	std	Y+5, r1	; 0x05
	{
		uxReturn = pxEventBits->uxEventBits;
     5c8:	eb 81       	ldd	r30, Y+3	; 0x03
     5ca:	fc 81       	ldd	r31, Y+4	; 0x04
     5cc:	80 81       	ld	r24, Z
     5ce:	91 81       	ldd	r25, Z+1	; 0x01
     5d0:	9a 83       	std	Y+2, r25	; 0x02
     5d2:	89 83       	std	Y+1, r24	; 0x01
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
     5d4:	89 81       	ldd	r24, Y+1	; 0x01
     5d6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     5d8:	27 96       	adiw	r28, 0x07	; 7
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
     5e4:	cf 91       	pop	r28
     5e6:	df 91       	pop	r29
     5e8:	08 95       	ret

000005ea <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
     5ea:	df 93       	push	r29
     5ec:	cf 93       	push	r28
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
     5f2:	65 97       	sbiw	r28, 0x15	; 21
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	cd bf       	out	0x3d, r28	; 61
     5fe:	9b 8b       	std	Y+19, r25	; 0x13
     600:	8a 8b       	std	Y+18, r24	; 0x12
     602:	7d 8b       	std	Y+21, r23	; 0x15
     604:	6c 8b       	std	Y+20, r22	; 0x14
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     606:	19 86       	std	Y+9, r1	; 0x09
     608:	18 86       	std	Y+8, r1	; 0x08
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     60a:	8a 89       	ldd	r24, Y+18	; 0x12
     60c:	9b 89       	ldd	r25, Y+19	; 0x13
     60e:	9b 83       	std	Y+3, r25	; 0x03
     610:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xMatchFound = pdFALSE;
     612:	19 82       	std	Y+1, r1	; 0x01
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
     614:	8a 81       	ldd	r24, Y+2	; 0x02
     616:	9b 81       	ldd	r25, Y+3	; 0x03
     618:	02 96       	adiw	r24, 0x02	; 2
     61a:	9b 87       	std	Y+11, r25	; 0x0b
     61c:	8a 87       	std	Y+10, r24	; 0x0a
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     61e:	8a 85       	ldd	r24, Y+10	; 0x0a
     620:	9b 85       	ldd	r25, Y+11	; 0x0b
     622:	03 96       	adiw	r24, 0x03	; 3
     624:	9d 87       	std	Y+13, r25	; 0x0d
     626:	8c 87       	std	Y+12, r24	; 0x0c
	vTaskSuspendAll();
     628:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
     62c:	ea 85       	ldd	r30, Y+10	; 0x0a
     62e:	fb 85       	ldd	r31, Y+11	; 0x0b
     630:	85 81       	ldd	r24, Z+5	; 0x05
     632:	96 81       	ldd	r25, Z+6	; 0x06
     634:	99 8b       	std	Y+17, r25	; 0x11
     636:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
     638:	ea 81       	ldd	r30, Y+2	; 0x02
     63a:	fb 81       	ldd	r31, Y+3	; 0x03
     63c:	20 81       	ld	r18, Z
     63e:	31 81       	ldd	r19, Z+1	; 0x01
     640:	8c 89       	ldd	r24, Y+20	; 0x14
     642:	9d 89       	ldd	r25, Y+21	; 0x15
     644:	82 2b       	or	r24, r18
     646:	93 2b       	or	r25, r19
     648:	ea 81       	ldd	r30, Y+2	; 0x02
     64a:	fb 81       	ldd	r31, Y+3	; 0x03
     64c:	91 83       	std	Z+1, r25	; 0x01
     64e:	80 83       	st	Z, r24
     650:	59 c0       	rjmp	.+178    	; 0x704 <xEventGroupSetBits+0x11a>

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
		{
			pxNext = listGET_NEXT( pxListItem );
     652:	e8 89       	ldd	r30, Y+16	; 0x10
     654:	f9 89       	ldd	r31, Y+17	; 0x11
     656:	82 81       	ldd	r24, Z+2	; 0x02
     658:	93 81       	ldd	r25, Z+3	; 0x03
     65a:	9f 87       	std	Y+15, r25	; 0x0f
     65c:	8e 87       	std	Y+14, r24	; 0x0e
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     65e:	e8 89       	ldd	r30, Y+16	; 0x10
     660:	f9 89       	ldd	r31, Y+17	; 0x11
     662:	80 81       	ld	r24, Z
     664:	91 81       	ldd	r25, Z+1	; 0x01
     666:	9f 83       	std	Y+7, r25	; 0x07
     668:	8e 83       	std	Y+6, r24	; 0x06
			xMatchFound = pdFALSE;
     66a:	19 82       	std	Y+1, r1	; 0x01

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
     66c:	8e 81       	ldd	r24, Y+6	; 0x06
     66e:	9f 81       	ldd	r25, Y+7	; 0x07
     670:	80 70       	andi	r24, 0x00	; 0
     672:	9d 83       	std	Y+5, r25	; 0x05
     674:	8c 83       	std	Y+4, r24	; 0x04
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     676:	8e 81       	ldd	r24, Y+6	; 0x06
     678:	9f 81       	ldd	r25, Y+7	; 0x07
     67a:	90 70       	andi	r25, 0x00	; 0
     67c:	9f 83       	std	Y+7, r25	; 0x07
     67e:	8e 83       	std	Y+6, r24	; 0x06

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     680:	8c 81       	ldd	r24, Y+4	; 0x04
     682:	9d 81       	ldd	r25, Y+5	; 0x05
     684:	80 70       	andi	r24, 0x00	; 0
     686:	94 70       	andi	r25, 0x04	; 4
     688:	00 97       	sbiw	r24, 0x00	; 0
     68a:	69 f4       	brne	.+26     	; 0x6a6 <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     68c:	ea 81       	ldd	r30, Y+2	; 0x02
     68e:	fb 81       	ldd	r31, Y+3	; 0x03
     690:	20 81       	ld	r18, Z
     692:	31 81       	ldd	r19, Z+1	; 0x01
     694:	8e 81       	ldd	r24, Y+6	; 0x06
     696:	9f 81       	ldd	r25, Y+7	; 0x07
     698:	82 23       	and	r24, r18
     69a:	93 23       	and	r25, r19
     69c:	00 97       	sbiw	r24, 0x00	; 0
     69e:	91 f0       	breq	.+36     	; 0x6c4 <xEventGroupSetBits+0xda>
				{
					xMatchFound = pdTRUE;
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	89 83       	std	Y+1, r24	; 0x01
     6a4:	0f c0       	rjmp	.+30     	; 0x6c4 <xEventGroupSetBits+0xda>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     6a6:	ea 81       	ldd	r30, Y+2	; 0x02
     6a8:	fb 81       	ldd	r31, Y+3	; 0x03
     6aa:	20 81       	ld	r18, Z
     6ac:	31 81       	ldd	r19, Z+1	; 0x01
     6ae:	8e 81       	ldd	r24, Y+6	; 0x06
     6b0:	9f 81       	ldd	r25, Y+7	; 0x07
     6b2:	28 23       	and	r18, r24
     6b4:	39 23       	and	r19, r25
     6b6:	8e 81       	ldd	r24, Y+6	; 0x06
     6b8:	9f 81       	ldd	r25, Y+7	; 0x07
     6ba:	28 17       	cp	r18, r24
     6bc:	39 07       	cpc	r19, r25
     6be:	11 f4       	brne	.+4      	; 0x6c4 <xEventGroupSetBits+0xda>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	88 23       	and	r24, r24
     6c8:	c9 f0       	breq	.+50     	; 0x6fc <xEventGroupSetBits+0x112>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     6ca:	8c 81       	ldd	r24, Y+4	; 0x04
     6cc:	9d 81       	ldd	r25, Y+5	; 0x05
     6ce:	80 70       	andi	r24, 0x00	; 0
     6d0:	91 70       	andi	r25, 0x01	; 1
     6d2:	00 97       	sbiw	r24, 0x00	; 0
     6d4:	41 f0       	breq	.+16     	; 0x6e6 <xEventGroupSetBits+0xfc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
     6d6:	88 85       	ldd	r24, Y+8	; 0x08
     6d8:	99 85       	ldd	r25, Y+9	; 0x09
     6da:	2e 81       	ldd	r18, Y+6	; 0x06
     6dc:	3f 81       	ldd	r19, Y+7	; 0x07
     6de:	82 2b       	or	r24, r18
     6e0:	93 2b       	or	r25, r19
     6e2:	99 87       	std	Y+9, r25	; 0x09
     6e4:	88 87       	std	Y+8, r24	; 0x08
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     6e6:	ea 81       	ldd	r30, Y+2	; 0x02
     6e8:	fb 81       	ldd	r31, Y+3	; 0x03
     6ea:	80 81       	ld	r24, Z
     6ec:	91 81       	ldd	r25, Z+1	; 0x01
     6ee:	9c 01       	movw	r18, r24
     6f0:	32 60       	ori	r19, 0x02	; 2
     6f2:	88 89       	ldd	r24, Y+16	; 0x10
     6f4:	99 89       	ldd	r25, Y+17	; 0x11
     6f6:	b9 01       	movw	r22, r18
     6f8:	0e 94 86 19 	call	0x330c	; 0x330c <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
     6fc:	8e 85       	ldd	r24, Y+14	; 0x0e
     6fe:	9f 85       	ldd	r25, Y+15	; 0x0f
     700:	99 8b       	std	Y+17, r25	; 0x11
     702:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
     704:	28 89       	ldd	r18, Y+16	; 0x10
     706:	39 89       	ldd	r19, Y+17	; 0x11
     708:	8c 85       	ldd	r24, Y+12	; 0x0c
     70a:	9d 85       	ldd	r25, Y+13	; 0x0d
     70c:	28 17       	cp	r18, r24
     70e:	39 07       	cpc	r19, r25
     710:	09 f0       	breq	.+2      	; 0x714 <xEventGroupSetBits+0x12a>
     712:	9f cf       	rjmp	.-194    	; 0x652 <xEventGroupSetBits+0x68>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     714:	ea 81       	ldd	r30, Y+2	; 0x02
     716:	fb 81       	ldd	r31, Y+3	; 0x03
     718:	20 81       	ld	r18, Z
     71a:	31 81       	ldd	r19, Z+1	; 0x01
     71c:	88 85       	ldd	r24, Y+8	; 0x08
     71e:	99 85       	ldd	r25, Y+9	; 0x09
     720:	80 95       	com	r24
     722:	90 95       	com	r25
     724:	82 23       	and	r24, r18
     726:	93 23       	and	r25, r19
     728:	ea 81       	ldd	r30, Y+2	; 0x02
     72a:	fb 81       	ldd	r31, Y+3	; 0x03
     72c:	91 83       	std	Z+1, r25	; 0x01
     72e:	80 83       	st	Z, r24
	}
	( void ) xTaskResumeAll();
     730:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <xTaskResumeAll>

	return pxEventBits->uxEventBits;
     734:	ea 81       	ldd	r30, Y+2	; 0x02
     736:	fb 81       	ldd	r31, Y+3	; 0x03
     738:	80 81       	ld	r24, Z
     73a:	91 81       	ldd	r25, Z+1	; 0x01
}
     73c:	65 96       	adiw	r28, 0x15	; 21
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	f8 94       	cli
     742:	de bf       	out	0x3e, r29	; 62
     744:	0f be       	out	0x3f, r0	; 63
     746:	cd bf       	out	0x3d, r28	; 61
     748:	cf 91       	pop	r28
     74a:	df 91       	pop	r29
     74c:	08 95       	ret

0000074e <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
     74e:	df 93       	push	r29
     750:	cf 93       	push	r28
     752:	00 d0       	rcall	.+0      	; 0x754 <vEventGroupDelete+0x6>
     754:	00 d0       	rcall	.+0      	; 0x756 <vEventGroupDelete+0x8>
     756:	00 d0       	rcall	.+0      	; 0x758 <vEventGroupDelete+0xa>
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
     75c:	9e 83       	std	Y+6, r25	; 0x06
     75e:	8d 83       	std	Y+5, r24	; 0x05
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
     760:	8d 81       	ldd	r24, Y+5	; 0x05
     762:	9e 81       	ldd	r25, Y+6	; 0x06
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	8b 83       	std	Y+3, r24	; 0x03
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
     768:	8b 81       	ldd	r24, Y+3	; 0x03
     76a:	9c 81       	ldd	r25, Y+4	; 0x04
     76c:	02 96       	adiw	r24, 0x02	; 2
     76e:	9a 83       	std	Y+2, r25	; 0x02
     770:	89 83       	std	Y+1, r24	; 0x01

	vTaskSuspendAll();
     772:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <vTaskSuspendAll>
     776:	08 c0       	rjmp	.+16     	; 0x788 <vEventGroupDelete+0x3a>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
     778:	e9 81       	ldd	r30, Y+1	; 0x01
     77a:	fa 81       	ldd	r31, Y+2	; 0x02
     77c:	85 81       	ldd	r24, Z+5	; 0x05
     77e:	96 81       	ldd	r25, Z+6	; 0x06
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	72 e0       	ldi	r23, 0x02	; 2
     784:	0e 94 86 19 	call	0x330c	; 0x330c <xTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
     788:	e9 81       	ldd	r30, Y+1	; 0x01
     78a:	fa 81       	ldd	r31, Y+2	; 0x02
     78c:	80 81       	ld	r24, Z
     78e:	88 23       	and	r24, r24
     790:	99 f7       	brne	.-26     	; 0x778 <vEventGroupDelete+0x2a>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
     792:	8b 81       	ldd	r24, Y+3	; 0x03
     794:	9c 81       	ldd	r25, Y+4	; 0x04
     796:	0e 94 2c 05 	call	0xa58	; 0xa58 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
     79a:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <xTaskResumeAll>
}
     79e:	26 96       	adiw	r28, 0x06	; 6
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	f8 94       	cli
     7a4:	de bf       	out	0x3e, r29	; 62
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	cd bf       	out	0x3d, r28	; 61
     7aa:	cf 91       	pop	r28
     7ac:	df 91       	pop	r29
     7ae:	08 95       	ret

000007b0 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
     7b0:	df 93       	push	r29
     7b2:	cf 93       	push	r28
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <vEventGroupSetBitsCallback+0x6>
     7b6:	00 d0       	rcall	.+0      	; 0x7b8 <vEventGroupSetBitsCallback+0x8>
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <vEventGroupSetBitsCallback+0xa>
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	9a 83       	std	Y+2, r25	; 0x02
     7c0:	89 83       	std	Y+1, r24	; 0x01
     7c2:	4b 83       	std	Y+3, r20	; 0x03
     7c4:	5c 83       	std	Y+4, r21	; 0x04
     7c6:	6d 83       	std	Y+5, r22	; 0x05
     7c8:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
     7ca:	2b 81       	ldd	r18, Y+3	; 0x03
     7cc:	3c 81       	ldd	r19, Y+4	; 0x04
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	9a 81       	ldd	r25, Y+2	; 0x02
     7d2:	b9 01       	movw	r22, r18
     7d4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <xEventGroupSetBits>
}
     7d8:	26 96       	adiw	r28, 0x06	; 6
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	f8 94       	cli
     7de:	de bf       	out	0x3e, r29	; 62
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	cd bf       	out	0x3d, r28	; 61
     7e4:	cf 91       	pop	r28
     7e6:	df 91       	pop	r29
     7e8:	08 95       	ret

000007ea <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
     7ea:	df 93       	push	r29
     7ec:	cf 93       	push	r28
     7ee:	00 d0       	rcall	.+0      	; 0x7f0 <vEventGroupClearBitsCallback+0x6>
     7f0:	00 d0       	rcall	.+0      	; 0x7f2 <vEventGroupClearBitsCallback+0x8>
     7f2:	00 d0       	rcall	.+0      	; 0x7f4 <vEventGroupClearBitsCallback+0xa>
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
     7f8:	9a 83       	std	Y+2, r25	; 0x02
     7fa:	89 83       	std	Y+1, r24	; 0x01
     7fc:	4b 83       	std	Y+3, r20	; 0x03
     7fe:	5c 83       	std	Y+4, r21	; 0x04
     800:	6d 83       	std	Y+5, r22	; 0x05
     802:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
     804:	2b 81       	ldd	r18, Y+3	; 0x03
     806:	3c 81       	ldd	r19, Y+4	; 0x04
     808:	89 81       	ldd	r24, Y+1	; 0x01
     80a:	9a 81       	ldd	r25, Y+2	; 0x02
     80c:	b9 01       	movw	r22, r18
     80e:	0e 94 9d 02 	call	0x53a	; 0x53a <xEventGroupClearBits>
}
     812:	26 96       	adiw	r28, 0x06	; 6
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	de bf       	out	0x3e, r29	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	cd bf       	out	0x3d, r28	; 61
     81e:	cf 91       	pop	r28
     820:	df 91       	pop	r29
     822:	08 95       	ret

00000824 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
     824:	df 93       	push	r29
     826:	cf 93       	push	r28
     828:	00 d0       	rcall	.+0      	; 0x82a <prvTestWaitCondition+0x6>
     82a:	00 d0       	rcall	.+0      	; 0x82c <prvTestWaitCondition+0x8>
     82c:	00 d0       	rcall	.+0      	; 0x82e <prvTestWaitCondition+0xa>
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	9b 83       	std	Y+3, r25	; 0x03
     834:	8a 83       	std	Y+2, r24	; 0x02
     836:	7d 83       	std	Y+5, r23	; 0x05
     838:	6c 83       	std	Y+4, r22	; 0x04
     83a:	4e 83       	std	Y+6, r20	; 0x06
BaseType_t xWaitConditionMet = pdFALSE;
     83c:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	59 f4       	brne	.+22     	; 0x85a <prvTestWaitCondition+0x36>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     844:	8a 81       	ldd	r24, Y+2	; 0x02
     846:	9b 81       	ldd	r25, Y+3	; 0x03
     848:	2c 81       	ldd	r18, Y+4	; 0x04
     84a:	3d 81       	ldd	r19, Y+5	; 0x05
     84c:	82 23       	and	r24, r18
     84e:	93 23       	and	r25, r19
     850:	00 97       	sbiw	r24, 0x00	; 0
     852:	81 f0       	breq	.+32     	; 0x874 <__stack+0x15>
		{
			xWaitConditionMet = pdTRUE;
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	89 83       	std	Y+1, r24	; 0x01
     858:	0d c0       	rjmp	.+26     	; 0x874 <__stack+0x15>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     85a:	2a 81       	ldd	r18, Y+2	; 0x02
     85c:	3b 81       	ldd	r19, Y+3	; 0x03
     85e:	8c 81       	ldd	r24, Y+4	; 0x04
     860:	9d 81       	ldd	r25, Y+5	; 0x05
     862:	28 23       	and	r18, r24
     864:	39 23       	and	r19, r25
     866:	8c 81       	ldd	r24, Y+4	; 0x04
     868:	9d 81       	ldd	r25, Y+5	; 0x05
     86a:	28 17       	cp	r18, r24
     86c:	39 07       	cpc	r19, r25
     86e:	11 f4       	brne	.+4      	; 0x874 <__stack+0x15>
		{
			xWaitConditionMet = pdTRUE;
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
     874:	89 81       	ldd	r24, Y+1	; 0x01
}
     876:	26 96       	adiw	r28, 0x06	; 6
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	de bf       	out	0x3e, r29	; 62
     87e:	0f be       	out	0x3f, r0	; 63
     880:	cd bf       	out	0x3d, r28	; 61
     882:	cf 91       	pop	r28
     884:	df 91       	pop	r29
     886:	08 95       	ret

00000888 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     888:	df 93       	push	r29
     88a:	cf 93       	push	r28
     88c:	cd b7       	in	r28, 0x3d	; 61
     88e:	de b7       	in	r29, 0x3e	; 62
     890:	2e 97       	sbiw	r28, 0x0e	; 14
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	f8 94       	cli
     896:	de bf       	out	0x3e, r29	; 62
     898:	0f be       	out	0x3f, r0	; 63
     89a:	cd bf       	out	0x3d, r28	; 61
     89c:	9e 87       	std	Y+14, r25	; 0x0e
     89e:	8d 87       	std	Y+13, r24	; 0x0d
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
     8a0:	1e 82       	std	Y+6, r1	; 0x06
     8a2:	1d 82       	std	Y+5, r1	; 0x05

	vTaskSuspendAll();
     8a4:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     8a8:	80 91 7c 00 	lds	r24, 0x007C
     8ac:	88 23       	and	r24, r24
     8ae:	29 f4       	brne	.+10     	; 0x8ba <pvPortMalloc+0x32>
		{
			prvHeapInit();
     8b0:	0e 94 ab 05 	call	0xb56	; 0xb56 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	80 93 7c 00 	sts	0x007C, r24
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     8ba:	8d 85       	ldd	r24, Y+13	; 0x0d
     8bc:	9e 85       	ldd	r25, Y+14	; 0x0e
     8be:	00 97       	sbiw	r24, 0x00	; 0
     8c0:	51 f0       	breq	.+20     	; 0x8d6 <pvPortMalloc+0x4e>
		{
			xWantedSize += heapSTRUCT_SIZE;
     8c2:	80 91 78 00 	lds	r24, 0x0078
     8c6:	90 91 79 00 	lds	r25, 0x0079
     8ca:	2d 85       	ldd	r18, Y+13	; 0x0d
     8cc:	3e 85       	ldd	r19, Y+14	; 0x0e
     8ce:	82 0f       	add	r24, r18
     8d0:	93 1f       	adc	r25, r19
     8d2:	9e 87       	std	Y+14, r25	; 0x0e
     8d4:	8d 87       	std	Y+13, r24	; 0x0d
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     8d6:	8d 85       	ldd	r24, Y+13	; 0x0d
     8d8:	9e 85       	ldd	r25, Y+14	; 0x0e
     8da:	00 97       	sbiw	r24, 0x00	; 0
     8dc:	09 f4       	brne	.+2      	; 0x8e0 <pvPortMalloc+0x58>
     8de:	af c0       	rjmp	.+350    	; 0xa3e <pvPortMalloc+0x1b6>
     8e0:	8d 85       	ldd	r24, Y+13	; 0x0d
     8e2:	9e 85       	ldd	r25, Y+14	; 0x0e
     8e4:	23 e0       	ldi	r18, 0x03	; 3
     8e6:	83 38       	cpi	r24, 0x83	; 131
     8e8:	92 07       	cpc	r25, r18
     8ea:	08 f0       	brcs	.+2      	; 0x8ee <pvPortMalloc+0x66>
     8ec:	a8 c0       	rjmp	.+336    	; 0xa3e <pvPortMalloc+0x1b6>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	94 e0       	ldi	r25, 0x04	; 4
     8f2:	9a 87       	std	Y+10, r25	; 0x0a
     8f4:	89 87       	std	Y+9, r24	; 0x09
			pxBlock = xStart.pxNextFreeBlock;
     8f6:	80 91 01 04 	lds	r24, 0x0401
     8fa:	90 91 02 04 	lds	r25, 0x0402
     8fe:	9c 87       	std	Y+12, r25	; 0x0c
     900:	8b 87       	std	Y+11, r24	; 0x0b
     902:	0a c0       	rjmp	.+20     	; 0x918 <pvPortMalloc+0x90>
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
			{
				pxPreviousBlock = pxBlock;
     904:	8b 85       	ldd	r24, Y+11	; 0x0b
     906:	9c 85       	ldd	r25, Y+12	; 0x0c
     908:	9a 87       	std	Y+10, r25	; 0x0a
     90a:	89 87       	std	Y+9, r24	; 0x09
				pxBlock = pxBlock->pxNextFreeBlock;
     90c:	eb 85       	ldd	r30, Y+11	; 0x0b
     90e:	fc 85       	ldd	r31, Y+12	; 0x0c
     910:	80 81       	ld	r24, Z
     912:	91 81       	ldd	r25, Z+1	; 0x01
     914:	9c 87       	std	Y+12, r25	; 0x0c
     916:	8b 87       	std	Y+11, r24	; 0x0b
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     918:	eb 85       	ldd	r30, Y+11	; 0x0b
     91a:	fc 85       	ldd	r31, Y+12	; 0x0c
     91c:	22 81       	ldd	r18, Z+2	; 0x02
     91e:	33 81       	ldd	r19, Z+3	; 0x03
     920:	8d 85       	ldd	r24, Y+13	; 0x0d
     922:	9e 85       	ldd	r25, Y+14	; 0x0e
     924:	28 17       	cp	r18, r24
     926:	39 07       	cpc	r19, r25
     928:	30 f4       	brcc	.+12     	; 0x936 <pvPortMalloc+0xae>
     92a:	eb 85       	ldd	r30, Y+11	; 0x0b
     92c:	fc 85       	ldd	r31, Y+12	; 0x0c
     92e:	80 81       	ld	r24, Z
     930:	91 81       	ldd	r25, Z+1	; 0x01
     932:	00 97       	sbiw	r24, 0x00	; 0
     934:	39 f7       	brne	.-50     	; 0x904 <pvPortMalloc+0x7c>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     936:	8b 85       	ldd	r24, Y+11	; 0x0b
     938:	9c 85       	ldd	r25, Y+12	; 0x0c
     93a:	44 e0       	ldi	r20, 0x04	; 4
     93c:	85 30       	cpi	r24, 0x05	; 5
     93e:	94 07       	cpc	r25, r20
     940:	09 f4       	brne	.+2      	; 0x944 <pvPortMalloc+0xbc>
     942:	7d c0       	rjmp	.+250    	; 0xa3e <pvPortMalloc+0x1b6>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     944:	e9 85       	ldd	r30, Y+9	; 0x09
     946:	fa 85       	ldd	r31, Y+10	; 0x0a
     948:	20 81       	ld	r18, Z
     94a:	31 81       	ldd	r19, Z+1	; 0x01
     94c:	80 91 78 00 	lds	r24, 0x0078
     950:	90 91 79 00 	lds	r25, 0x0079
     954:	82 0f       	add	r24, r18
     956:	93 1f       	adc	r25, r19
     958:	9e 83       	std	Y+6, r25	; 0x06
     95a:	8d 83       	std	Y+5, r24	; 0x05

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     95c:	eb 85       	ldd	r30, Y+11	; 0x0b
     95e:	fc 85       	ldd	r31, Y+12	; 0x0c
     960:	80 81       	ld	r24, Z
     962:	91 81       	ldd	r25, Z+1	; 0x01
     964:	e9 85       	ldd	r30, Y+9	; 0x09
     966:	fa 85       	ldd	r31, Y+10	; 0x0a
     968:	91 83       	std	Z+1, r25	; 0x01
     96a:	80 83       	st	Z, r24

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     96c:	eb 85       	ldd	r30, Y+11	; 0x0b
     96e:	fc 85       	ldd	r31, Y+12	; 0x0c
     970:	22 81       	ldd	r18, Z+2	; 0x02
     972:	33 81       	ldd	r19, Z+3	; 0x03
     974:	8d 85       	ldd	r24, Y+13	; 0x0d
     976:	9e 85       	ldd	r25, Y+14	; 0x0e
     978:	28 1b       	sub	r18, r24
     97a:	39 0b       	sbc	r19, r25
     97c:	80 91 78 00 	lds	r24, 0x0078
     980:	90 91 79 00 	lds	r25, 0x0079
     984:	88 0f       	add	r24, r24
     986:	99 1f       	adc	r25, r25
     988:	82 17       	cp	r24, r18
     98a:	93 07       	cpc	r25, r19
     98c:	08 f0       	brcs	.+2      	; 0x990 <pvPortMalloc+0x108>
     98e:	47 c0       	rjmp	.+142    	; 0xa1e <pvPortMalloc+0x196>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     990:	2b 85       	ldd	r18, Y+11	; 0x0b
     992:	3c 85       	ldd	r19, Y+12	; 0x0c
     994:	8d 85       	ldd	r24, Y+13	; 0x0d
     996:	9e 85       	ldd	r25, Y+14	; 0x0e
     998:	82 0f       	add	r24, r18
     99a:	93 1f       	adc	r25, r19
     99c:	98 87       	std	Y+8, r25	; 0x08
     99e:	8f 83       	std	Y+7, r24	; 0x07

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     9a0:	eb 85       	ldd	r30, Y+11	; 0x0b
     9a2:	fc 85       	ldd	r31, Y+12	; 0x0c
     9a4:	22 81       	ldd	r18, Z+2	; 0x02
     9a6:	33 81       	ldd	r19, Z+3	; 0x03
     9a8:	8d 85       	ldd	r24, Y+13	; 0x0d
     9aa:	9e 85       	ldd	r25, Y+14	; 0x0e
     9ac:	a9 01       	movw	r20, r18
     9ae:	48 1b       	sub	r20, r24
     9b0:	59 0b       	sbc	r21, r25
     9b2:	ca 01       	movw	r24, r20
     9b4:	ef 81       	ldd	r30, Y+7	; 0x07
     9b6:	f8 85       	ldd	r31, Y+8	; 0x08
     9b8:	93 83       	std	Z+3, r25	; 0x03
     9ba:	82 83       	std	Z+2, r24	; 0x02
					pxBlock->xBlockSize = xWantedSize;
     9bc:	eb 85       	ldd	r30, Y+11	; 0x0b
     9be:	fc 85       	ldd	r31, Y+12	; 0x0c
     9c0:	8d 85       	ldd	r24, Y+13	; 0x0d
     9c2:	9e 85       	ldd	r25, Y+14	; 0x0e
     9c4:	93 83       	std	Z+3, r25	; 0x03
     9c6:	82 83       	std	Z+2, r24	; 0x02

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     9c8:	ef 81       	ldd	r30, Y+7	; 0x07
     9ca:	f8 85       	ldd	r31, Y+8	; 0x08
     9cc:	82 81       	ldd	r24, Z+2	; 0x02
     9ce:	93 81       	ldd	r25, Z+3	; 0x03
     9d0:	9a 83       	std	Y+2, r25	; 0x02
     9d2:	89 83       	std	Y+1, r24	; 0x01
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	94 e0       	ldi	r25, 0x04	; 4
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	8b 83       	std	Y+3, r24	; 0x03
     9dc:	06 c0       	rjmp	.+12     	; 0x9ea <pvPortMalloc+0x162>
     9de:	eb 81       	ldd	r30, Y+3	; 0x03
     9e0:	fc 81       	ldd	r31, Y+4	; 0x04
     9e2:	80 81       	ld	r24, Z
     9e4:	91 81       	ldd	r25, Z+1	; 0x01
     9e6:	9c 83       	std	Y+4, r25	; 0x04
     9e8:	8b 83       	std	Y+3, r24	; 0x03
     9ea:	eb 81       	ldd	r30, Y+3	; 0x03
     9ec:	fc 81       	ldd	r31, Y+4	; 0x04
     9ee:	01 90       	ld	r0, Z+
     9f0:	f0 81       	ld	r31, Z
     9f2:	e0 2d       	mov	r30, r0
     9f4:	22 81       	ldd	r18, Z+2	; 0x02
     9f6:	33 81       	ldd	r19, Z+3	; 0x03
     9f8:	89 81       	ldd	r24, Y+1	; 0x01
     9fa:	9a 81       	ldd	r25, Y+2	; 0x02
     9fc:	28 17       	cp	r18, r24
     9fe:	39 07       	cpc	r19, r25
     a00:	70 f3       	brcs	.-36     	; 0x9de <pvPortMalloc+0x156>
     a02:	eb 81       	ldd	r30, Y+3	; 0x03
     a04:	fc 81       	ldd	r31, Y+4	; 0x04
     a06:	80 81       	ld	r24, Z
     a08:	91 81       	ldd	r25, Z+1	; 0x01
     a0a:	ef 81       	ldd	r30, Y+7	; 0x07
     a0c:	f8 85       	ldd	r31, Y+8	; 0x08
     a0e:	91 83       	std	Z+1, r25	; 0x01
     a10:	80 83       	st	Z, r24
     a12:	eb 81       	ldd	r30, Y+3	; 0x03
     a14:	fc 81       	ldd	r31, Y+4	; 0x04
     a16:	8f 81       	ldd	r24, Y+7	; 0x07
     a18:	98 85       	ldd	r25, Y+8	; 0x08
     a1a:	91 83       	std	Z+1, r25	; 0x01
     a1c:	80 83       	st	Z, r24
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     a1e:	20 91 76 00 	lds	r18, 0x0076
     a22:	30 91 77 00 	lds	r19, 0x0077
     a26:	eb 85       	ldd	r30, Y+11	; 0x0b
     a28:	fc 85       	ldd	r31, Y+12	; 0x0c
     a2a:	82 81       	ldd	r24, Z+2	; 0x02
     a2c:	93 81       	ldd	r25, Z+3	; 0x03
     a2e:	a9 01       	movw	r20, r18
     a30:	48 1b       	sub	r20, r24
     a32:	59 0b       	sbc	r21, r25
     a34:	ca 01       	movw	r24, r20
     a36:	90 93 77 00 	sts	0x0077, r25
     a3a:	80 93 76 00 	sts	0x0076, r24
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     a3e:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
     a42:	8d 81       	ldd	r24, Y+5	; 0x05
     a44:	9e 81       	ldd	r25, Y+6	; 0x06
}
     a46:	2e 96       	adiw	r28, 0x0e	; 14
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	cd bf       	out	0x3d, r28	; 61
     a52:	cf 91       	pop	r28
     a54:	df 91       	pop	r29
     a56:	08 95       	ret

00000a58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     a58:	df 93       	push	r29
     a5a:	cf 93       	push	r28
     a5c:	cd b7       	in	r28, 0x3d	; 61
     a5e:	de b7       	in	r29, 0x3e	; 62
     a60:	2a 97       	sbiw	r28, 0x0a	; 10
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	cd bf       	out	0x3d, r28	; 61
     a6c:	9a 87       	std	Y+10, r25	; 0x0a
     a6e:	89 87       	std	Y+9, r24	; 0x09
uint8_t *puc = ( uint8_t * ) pv;
     a70:	89 85       	ldd	r24, Y+9	; 0x09
     a72:	9a 85       	ldd	r25, Y+10	; 0x0a
     a74:	98 87       	std	Y+8, r25	; 0x08
     a76:	8f 83       	std	Y+7, r24	; 0x07
BlockLink_t *pxLink;

	if( pv != NULL )
     a78:	89 85       	ldd	r24, Y+9	; 0x09
     a7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     a7c:	00 97       	sbiw	r24, 0x00	; 0
     a7e:	09 f4       	brne	.+2      	; 0xa82 <vPortFree+0x2a>
     a80:	4f c0       	rjmp	.+158    	; 0xb20 <vPortFree+0xc8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
     a82:	80 91 78 00 	lds	r24, 0x0078
     a86:	90 91 79 00 	lds	r25, 0x0079
     a8a:	22 27       	eor	r18, r18
     a8c:	33 27       	eor	r19, r19
     a8e:	28 1b       	sub	r18, r24
     a90:	39 0b       	sbc	r19, r25
     a92:	8f 81       	ldd	r24, Y+7	; 0x07
     a94:	98 85       	ldd	r25, Y+8	; 0x08
     a96:	82 0f       	add	r24, r18
     a98:	93 1f       	adc	r25, r19
     a9a:	98 87       	std	Y+8, r25	; 0x08
     a9c:	8f 83       	std	Y+7, r24	; 0x07

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
     a9e:	8f 81       	ldd	r24, Y+7	; 0x07
     aa0:	98 85       	ldd	r25, Y+8	; 0x08
     aa2:	9e 83       	std	Y+6, r25	; 0x06
     aa4:	8d 83       	std	Y+5, r24	; 0x05

		vTaskSuspendAll();
     aa6:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     aaa:	ed 81       	ldd	r30, Y+5	; 0x05
     aac:	fe 81       	ldd	r31, Y+6	; 0x06
     aae:	82 81       	ldd	r24, Z+2	; 0x02
     ab0:	93 81       	ldd	r25, Z+3	; 0x03
     ab2:	9a 83       	std	Y+2, r25	; 0x02
     ab4:	89 83       	std	Y+1, r24	; 0x01
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	94 e0       	ldi	r25, 0x04	; 4
     aba:	9c 83       	std	Y+4, r25	; 0x04
     abc:	8b 83       	std	Y+3, r24	; 0x03
     abe:	06 c0       	rjmp	.+12     	; 0xacc <vPortFree+0x74>
     ac0:	eb 81       	ldd	r30, Y+3	; 0x03
     ac2:	fc 81       	ldd	r31, Y+4	; 0x04
     ac4:	80 81       	ld	r24, Z
     ac6:	91 81       	ldd	r25, Z+1	; 0x01
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	8b 83       	std	Y+3, r24	; 0x03
     acc:	eb 81       	ldd	r30, Y+3	; 0x03
     ace:	fc 81       	ldd	r31, Y+4	; 0x04
     ad0:	01 90       	ld	r0, Z+
     ad2:	f0 81       	ld	r31, Z
     ad4:	e0 2d       	mov	r30, r0
     ad6:	22 81       	ldd	r18, Z+2	; 0x02
     ad8:	33 81       	ldd	r19, Z+3	; 0x03
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	9a 81       	ldd	r25, Y+2	; 0x02
     ade:	28 17       	cp	r18, r24
     ae0:	39 07       	cpc	r19, r25
     ae2:	70 f3       	brcs	.-36     	; 0xac0 <vPortFree+0x68>
     ae4:	eb 81       	ldd	r30, Y+3	; 0x03
     ae6:	fc 81       	ldd	r31, Y+4	; 0x04
     ae8:	80 81       	ld	r24, Z
     aea:	91 81       	ldd	r25, Z+1	; 0x01
     aec:	ed 81       	ldd	r30, Y+5	; 0x05
     aee:	fe 81       	ldd	r31, Y+6	; 0x06
     af0:	91 83       	std	Z+1, r25	; 0x01
     af2:	80 83       	st	Z, r24
     af4:	eb 81       	ldd	r30, Y+3	; 0x03
     af6:	fc 81       	ldd	r31, Y+4	; 0x04
     af8:	8d 81       	ldd	r24, Y+5	; 0x05
     afa:	9e 81       	ldd	r25, Y+6	; 0x06
     afc:	91 83       	std	Z+1, r25	; 0x01
     afe:	80 83       	st	Z, r24
			xFreeBytesRemaining += pxLink->xBlockSize;
     b00:	ed 81       	ldd	r30, Y+5	; 0x05
     b02:	fe 81       	ldd	r31, Y+6	; 0x06
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	33 81       	ldd	r19, Z+3	; 0x03
     b08:	80 91 76 00 	lds	r24, 0x0076
     b0c:	90 91 77 00 	lds	r25, 0x0077
     b10:	82 0f       	add	r24, r18
     b12:	93 1f       	adc	r25, r19
     b14:	90 93 77 00 	sts	0x0077, r25
     b18:	80 93 76 00 	sts	0x0076, r24
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     b1c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <xTaskResumeAll>
	}
}
     b20:	2a 96       	adiw	r28, 0x0a	; 10
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	f8 94       	cli
     b26:	de bf       	out	0x3e, r29	; 62
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	cd bf       	out	0x3d, r28	; 61
     b2c:	cf 91       	pop	r28
     b2e:	df 91       	pop	r29
     b30:	08 95       	ret

00000b32 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
     b32:	df 93       	push	r29
     b34:	cf 93       	push	r28
     b36:	cd b7       	in	r28, 0x3d	; 61
     b38:	de b7       	in	r29, 0x3e	; 62
	return xFreeBytesRemaining;
     b3a:	80 91 76 00 	lds	r24, 0x0076
     b3e:	90 91 77 00 	lds	r25, 0x0077
}
     b42:	cf 91       	pop	r28
     b44:	df 91       	pop	r29
     b46:	08 95       	ret

00000b48 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
     b48:	df 93       	push	r29
     b4a:	cf 93       	push	r28
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	/* This just exists to keep the linker quiet. */
}
     b50:	cf 91       	pop	r28
     b52:	df 91       	pop	r29
     b54:	08 95       	ret

00000b56 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
     b56:	df 93       	push	r29
     b58:	cf 93       	push	r28
     b5a:	00 d0       	rcall	.+0      	; 0xb5c <prvHeapInit+0x6>
     b5c:	00 d0       	rcall	.+0      	; 0xb5e <prvHeapInit+0x8>
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     b62:	8e e7       	ldi	r24, 0x7E	; 126
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	9a 83       	std	Y+2, r25	; 0x02
     b68:	89 83       	std	Y+1, r24	; 0x01

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	9a 81       	ldd	r25, Y+2	; 0x02
     b6e:	90 93 02 04 	sts	0x0402, r25
     b72:	80 93 01 04 	sts	0x0401, r24
	xStart.xBlockSize = ( size_t ) 0;
     b76:	10 92 04 04 	sts	0x0404, r1
     b7a:	10 92 03 04 	sts	0x0403, r1

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     b7e:	83 e8       	ldi	r24, 0x83	; 131
     b80:	93 e0       	ldi	r25, 0x03	; 3
     b82:	90 93 08 04 	sts	0x0408, r25
     b86:	80 93 07 04 	sts	0x0407, r24
	xEnd.pxNextFreeBlock = NULL;
     b8a:	10 92 06 04 	sts	0x0406, r1
     b8e:	10 92 05 04 	sts	0x0405, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	9a 81       	ldd	r25, Y+2	; 0x02
     b96:	9c 83       	std	Y+4, r25	; 0x04
     b98:	8b 83       	std	Y+3, r24	; 0x03
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     b9a:	eb 81       	ldd	r30, Y+3	; 0x03
     b9c:	fc 81       	ldd	r31, Y+4	; 0x04
     b9e:	83 e8       	ldi	r24, 0x83	; 131
     ba0:	93 e0       	ldi	r25, 0x03	; 3
     ba2:	93 83       	std	Z+3, r25	; 0x03
     ba4:	82 83       	std	Z+2, r24	; 0x02
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     ba6:	eb 81       	ldd	r30, Y+3	; 0x03
     ba8:	fc 81       	ldd	r31, Y+4	; 0x04
     baa:	85 e0       	ldi	r24, 0x05	; 5
     bac:	94 e0       	ldi	r25, 0x04	; 4
     bae:	91 83       	std	Z+1, r25	; 0x01
     bb0:	80 83       	st	Z, r24
}
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	cf 91       	pop	r28
     bbc:	df 91       	pop	r29
     bbe:	08 95       	ret

00000bc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     bc0:	df 93       	push	r29
     bc2:	cf 93       	push	r28
     bc4:	00 d0       	rcall	.+0      	; 0xbc6 <vListInitialise+0x6>
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
     bca:	9a 83       	std	Y+2, r25	; 0x02
     bcc:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	9a 81       	ldd	r25, Y+2	; 0x02
     bd2:	03 96       	adiw	r24, 0x03	; 3
     bd4:	e9 81       	ldd	r30, Y+1	; 0x01
     bd6:	fa 81       	ldd	r31, Y+2	; 0x02
     bd8:	92 83       	std	Z+2, r25	; 0x02
     bda:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     bdc:	e9 81       	ldd	r30, Y+1	; 0x01
     bde:	fa 81       	ldd	r31, Y+2	; 0x02
     be0:	8f ef       	ldi	r24, 0xFF	; 255
     be2:	9f ef       	ldi	r25, 0xFF	; 255
     be4:	94 83       	std	Z+4, r25	; 0x04
     be6:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	9a 81       	ldd	r25, Y+2	; 0x02
     bec:	03 96       	adiw	r24, 0x03	; 3
     bee:	e9 81       	ldd	r30, Y+1	; 0x01
     bf0:	fa 81       	ldd	r31, Y+2	; 0x02
     bf2:	96 83       	std	Z+6, r25	; 0x06
     bf4:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	9a 81       	ldd	r25, Y+2	; 0x02
     bfa:	03 96       	adiw	r24, 0x03	; 3
     bfc:	e9 81       	ldd	r30, Y+1	; 0x01
     bfe:	fa 81       	ldd	r31, Y+2	; 0x02
     c00:	90 87       	std	Z+8, r25	; 0x08
     c02:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     c04:	e9 81       	ldd	r30, Y+1	; 0x01
     c06:	fa 81       	ldd	r31, Y+2	; 0x02
     c08:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	08 95       	ret

00000c14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	00 d0       	rcall	.+0      	; 0xc1a <vListInitialiseItem+0x6>
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
     c1e:	9a 83       	std	Y+2, r25	; 0x02
     c20:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     c22:	e9 81       	ldd	r30, Y+1	; 0x01
     c24:	fa 81       	ldd	r31, Y+2	; 0x02
     c26:	11 86       	std	Z+9, r1	; 0x09
     c28:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	cf 91       	pop	r28
     c30:	df 91       	pop	r29
     c32:	08 95       	ret

00000c34 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	00 d0       	rcall	.+0      	; 0xc3a <vListInsertEnd+0x6>
     c3a:	00 d0       	rcall	.+0      	; 0xc3c <vListInsertEnd+0x8>
     c3c:	00 d0       	rcall	.+0      	; 0xc3e <vListInsertEnd+0xa>
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	9c 83       	std	Y+4, r25	; 0x04
     c44:	8b 83       	std	Y+3, r24	; 0x03
     c46:	7e 83       	std	Y+6, r23	; 0x06
     c48:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     c4a:	eb 81       	ldd	r30, Y+3	; 0x03
     c4c:	fc 81       	ldd	r31, Y+4	; 0x04
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	92 81       	ldd	r25, Z+2	; 0x02
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     c56:	ed 81       	ldd	r30, Y+5	; 0x05
     c58:	fe 81       	ldd	r31, Y+6	; 0x06
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	93 83       	std	Z+3, r25	; 0x03
     c60:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     c62:	e9 81       	ldd	r30, Y+1	; 0x01
     c64:	fa 81       	ldd	r31, Y+2	; 0x02
     c66:	84 81       	ldd	r24, Z+4	; 0x04
     c68:	95 81       	ldd	r25, Z+5	; 0x05
     c6a:	ed 81       	ldd	r30, Y+5	; 0x05
     c6c:	fe 81       	ldd	r31, Y+6	; 0x06
     c6e:	95 83       	std	Z+5, r25	; 0x05
     c70:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     c72:	e9 81       	ldd	r30, Y+1	; 0x01
     c74:	fa 81       	ldd	r31, Y+2	; 0x02
     c76:	04 80       	ldd	r0, Z+4	; 0x04
     c78:	f5 81       	ldd	r31, Z+5	; 0x05
     c7a:	e0 2d       	mov	r30, r0
     c7c:	8d 81       	ldd	r24, Y+5	; 0x05
     c7e:	9e 81       	ldd	r25, Y+6	; 0x06
     c80:	93 83       	std	Z+3, r25	; 0x03
     c82:	82 83       	std	Z+2, r24	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     c84:	e9 81       	ldd	r30, Y+1	; 0x01
     c86:	fa 81       	ldd	r31, Y+2	; 0x02
     c88:	8d 81       	ldd	r24, Y+5	; 0x05
     c8a:	9e 81       	ldd	r25, Y+6	; 0x06
     c8c:	95 83       	std	Z+5, r25	; 0x05
     c8e:	84 83       	std	Z+4, r24	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     c90:	ed 81       	ldd	r30, Y+5	; 0x05
     c92:	fe 81       	ldd	r31, Y+6	; 0x06
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	9c 81       	ldd	r25, Y+4	; 0x04
     c98:	91 87       	std	Z+9, r25	; 0x09
     c9a:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     c9c:	eb 81       	ldd	r30, Y+3	; 0x03
     c9e:	fc 81       	ldd	r31, Y+4	; 0x04
     ca0:	80 81       	ld	r24, Z
     ca2:	8f 5f       	subi	r24, 0xFF	; 255
     ca4:	eb 81       	ldd	r30, Y+3	; 0x03
     ca6:	fc 81       	ldd	r31, Y+4	; 0x04
     ca8:	80 83       	st	Z, r24
}
     caa:	26 96       	adiw	r28, 0x06	; 6
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	de bf       	out	0x3e, r29	; 62
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	cd bf       	out	0x3d, r28	; 61
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	08 95       	ret

00000cbc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	28 97       	sbiw	r28, 0x08	; 8
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	9e 83       	std	Y+6, r25	; 0x06
     cd2:	8d 83       	std	Y+5, r24	; 0x05
     cd4:	78 87       	std	Y+8, r23	; 0x08
     cd6:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     cd8:	ef 81       	ldd	r30, Y+7	; 0x07
     cda:	f8 85       	ldd	r31, Y+8	; 0x08
     cdc:	80 81       	ld	r24, Z
     cde:	91 81       	ldd	r25, Z+1	; 0x01
     ce0:	9a 83       	std	Y+2, r25	; 0x02
     ce2:	89 83       	std	Y+1, r24	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	9a 81       	ldd	r25, Y+2	; 0x02
     ce8:	2f ef       	ldi	r18, 0xFF	; 255
     cea:	8f 3f       	cpi	r24, 0xFF	; 255
     cec:	92 07       	cpc	r25, r18
     cee:	39 f4       	brne	.+14     	; 0xcfe <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     cf0:	ed 81       	ldd	r30, Y+5	; 0x05
     cf2:	fe 81       	ldd	r31, Y+6	; 0x06
     cf4:	87 81       	ldd	r24, Z+7	; 0x07
     cf6:	90 85       	ldd	r25, Z+8	; 0x08
     cf8:	9c 83       	std	Y+4, r25	; 0x04
     cfa:	8b 83       	std	Y+3, r24	; 0x03
     cfc:	18 c0       	rjmp	.+48     	; 0xd2e <vListInsert+0x72>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     cfe:	8d 81       	ldd	r24, Y+5	; 0x05
     d00:	9e 81       	ldd	r25, Y+6	; 0x06
     d02:	03 96       	adiw	r24, 0x03	; 3
     d04:	9c 83       	std	Y+4, r25	; 0x04
     d06:	8b 83       	std	Y+3, r24	; 0x03
     d08:	06 c0       	rjmp	.+12     	; 0xd16 <vListInsert+0x5a>
     d0a:	eb 81       	ldd	r30, Y+3	; 0x03
     d0c:	fc 81       	ldd	r31, Y+4	; 0x04
     d0e:	82 81       	ldd	r24, Z+2	; 0x02
     d10:	93 81       	ldd	r25, Z+3	; 0x03
     d12:	9c 83       	std	Y+4, r25	; 0x04
     d14:	8b 83       	std	Y+3, r24	; 0x03
     d16:	eb 81       	ldd	r30, Y+3	; 0x03
     d18:	fc 81       	ldd	r31, Y+4	; 0x04
     d1a:	02 80       	ldd	r0, Z+2	; 0x02
     d1c:	f3 81       	ldd	r31, Z+3	; 0x03
     d1e:	e0 2d       	mov	r30, r0
     d20:	20 81       	ld	r18, Z
     d22:	31 81       	ldd	r19, Z+1	; 0x01
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	9a 81       	ldd	r25, Y+2	; 0x02
     d28:	82 17       	cp	r24, r18
     d2a:	93 07       	cpc	r25, r19
     d2c:	70 f7       	brcc	.-36     	; 0xd0a <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     d2e:	eb 81       	ldd	r30, Y+3	; 0x03
     d30:	fc 81       	ldd	r31, Y+4	; 0x04
     d32:	82 81       	ldd	r24, Z+2	; 0x02
     d34:	93 81       	ldd	r25, Z+3	; 0x03
     d36:	ef 81       	ldd	r30, Y+7	; 0x07
     d38:	f8 85       	ldd	r31, Y+8	; 0x08
     d3a:	93 83       	std	Z+3, r25	; 0x03
     d3c:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     d3e:	ef 81       	ldd	r30, Y+7	; 0x07
     d40:	f8 85       	ldd	r31, Y+8	; 0x08
     d42:	02 80       	ldd	r0, Z+2	; 0x02
     d44:	f3 81       	ldd	r31, Z+3	; 0x03
     d46:	e0 2d       	mov	r30, r0
     d48:	8f 81       	ldd	r24, Y+7	; 0x07
     d4a:	98 85       	ldd	r25, Y+8	; 0x08
     d4c:	95 83       	std	Z+5, r25	; 0x05
     d4e:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     d50:	ef 81       	ldd	r30, Y+7	; 0x07
     d52:	f8 85       	ldd	r31, Y+8	; 0x08
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	9c 81       	ldd	r25, Y+4	; 0x04
     d58:	95 83       	std	Z+5, r25	; 0x05
     d5a:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = pxNewListItem;
     d5c:	eb 81       	ldd	r30, Y+3	; 0x03
     d5e:	fc 81       	ldd	r31, Y+4	; 0x04
     d60:	8f 81       	ldd	r24, Y+7	; 0x07
     d62:	98 85       	ldd	r25, Y+8	; 0x08
     d64:	93 83       	std	Z+3, r25	; 0x03
     d66:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d68:	ef 81       	ldd	r30, Y+7	; 0x07
     d6a:	f8 85       	ldd	r31, Y+8	; 0x08
     d6c:	8d 81       	ldd	r24, Y+5	; 0x05
     d6e:	9e 81       	ldd	r25, Y+6	; 0x06
     d70:	91 87       	std	Z+9, r25	; 0x09
     d72:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     d74:	ed 81       	ldd	r30, Y+5	; 0x05
     d76:	fe 81       	ldd	r31, Y+6	; 0x06
     d78:	80 81       	ld	r24, Z
     d7a:	8f 5f       	subi	r24, 0xFF	; 255
     d7c:	ed 81       	ldd	r30, Y+5	; 0x05
     d7e:	fe 81       	ldd	r31, Y+6	; 0x06
     d80:	80 83       	st	Z, r24
}
     d82:	28 96       	adiw	r28, 0x08	; 8
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	08 95       	ret

00000d94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     d94:	df 93       	push	r29
     d96:	cf 93       	push	r28
     d98:	00 d0       	rcall	.+0      	; 0xd9a <uxListRemove+0x6>
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <uxListRemove+0x8>
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	9c 83       	std	Y+4, r25	; 0x04
     da2:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     da4:	eb 81       	ldd	r30, Y+3	; 0x03
     da6:	fc 81       	ldd	r31, Y+4	; 0x04
     da8:	80 85       	ldd	r24, Z+8	; 0x08
     daa:	91 85       	ldd	r25, Z+9	; 0x09
     dac:	9a 83       	std	Y+2, r25	; 0x02
     dae:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     db0:	eb 81       	ldd	r30, Y+3	; 0x03
     db2:	fc 81       	ldd	r31, Y+4	; 0x04
     db4:	a2 81       	ldd	r26, Z+2	; 0x02
     db6:	b3 81       	ldd	r27, Z+3	; 0x03
     db8:	eb 81       	ldd	r30, Y+3	; 0x03
     dba:	fc 81       	ldd	r31, Y+4	; 0x04
     dbc:	84 81       	ldd	r24, Z+4	; 0x04
     dbe:	95 81       	ldd	r25, Z+5	; 0x05
     dc0:	15 96       	adiw	r26, 0x05	; 5
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     dc8:	eb 81       	ldd	r30, Y+3	; 0x03
     dca:	fc 81       	ldd	r31, Y+4	; 0x04
     dcc:	a4 81       	ldd	r26, Z+4	; 0x04
     dce:	b5 81       	ldd	r27, Z+5	; 0x05
     dd0:	eb 81       	ldd	r30, Y+3	; 0x03
     dd2:	fc 81       	ldd	r31, Y+4	; 0x04
     dd4:	82 81       	ldd	r24, Z+2	; 0x02
     dd6:	93 81       	ldd	r25, Z+3	; 0x03
     dd8:	13 96       	adiw	r26, 0x03	; 3
     dda:	9c 93       	st	X, r25
     ddc:	8e 93       	st	-X, r24
     dde:	12 97       	sbiw	r26, 0x02	; 2

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     de0:	e9 81       	ldd	r30, Y+1	; 0x01
     de2:	fa 81       	ldd	r31, Y+2	; 0x02
     de4:	21 81       	ldd	r18, Z+1	; 0x01
     de6:	32 81       	ldd	r19, Z+2	; 0x02
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	9c 81       	ldd	r25, Y+4	; 0x04
     dec:	28 17       	cp	r18, r24
     dee:	39 07       	cpc	r19, r25
     df0:	41 f4       	brne	.+16     	; 0xe02 <uxListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     df2:	eb 81       	ldd	r30, Y+3	; 0x03
     df4:	fc 81       	ldd	r31, Y+4	; 0x04
     df6:	84 81       	ldd	r24, Z+4	; 0x04
     df8:	95 81       	ldd	r25, Z+5	; 0x05
     dfa:	e9 81       	ldd	r30, Y+1	; 0x01
     dfc:	fa 81       	ldd	r31, Y+2	; 0x02
     dfe:	92 83       	std	Z+2, r25	; 0x02
     e00:	81 83       	std	Z+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     e02:	eb 81       	ldd	r30, Y+3	; 0x03
     e04:	fc 81       	ldd	r31, Y+4	; 0x04
     e06:	11 86       	std	Z+9, r1	; 0x09
     e08:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     e0a:	e9 81       	ldd	r30, Y+1	; 0x01
     e0c:	fa 81       	ldd	r31, Y+2	; 0x02
     e0e:	80 81       	ld	r24, Z
     e10:	81 50       	subi	r24, 0x01	; 1
     e12:	e9 81       	ldd	r30, Y+1	; 0x01
     e14:	fa 81       	ldd	r31, Y+2	; 0x02
     e16:	80 83       	st	Z, r24

	return pxList->uxNumberOfItems;
     e18:	e9 81       	ldd	r30, Y+1	; 0x01
     e1a:	fa 81       	ldd	r31, Y+2	; 0x02
     e1c:	80 81       	ld	r24, Z
}
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	28 97       	sbiw	r28, 0x08	; 8
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	9c 83       	std	Y+4, r25	; 0x04
     e42:	8b 83       	std	Y+3, r24	; 0x03
     e44:	7e 83       	std	Y+6, r23	; 0x06
     e46:	6d 83       	std	Y+5, r22	; 0x05
     e48:	58 87       	std	Y+8, r21	; 0x08
     e4a:	4f 83       	std	Y+7, r20	; 0x07
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
     e4c:	eb 81       	ldd	r30, Y+3	; 0x03
     e4e:	fc 81       	ldd	r31, Y+4	; 0x04
     e50:	81 e1       	ldi	r24, 0x11	; 17
     e52:	80 83       	st	Z, r24
	pxTopOfStack--;
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	9c 81       	ldd	r25, Y+4	; 0x04
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	9c 83       	std	Y+4, r25	; 0x04
     e5c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
     e5e:	eb 81       	ldd	r30, Y+3	; 0x03
     e60:	fc 81       	ldd	r31, Y+4	; 0x04
     e62:	82 e2       	ldi	r24, 0x22	; 34
     e64:	80 83       	st	Z, r24
	pxTopOfStack--;
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	9c 81       	ldd	r25, Y+4	; 0x04
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	9c 83       	std	Y+4, r25	; 0x04
     e6e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
     e70:	eb 81       	ldd	r30, Y+3	; 0x03
     e72:	fc 81       	ldd	r31, Y+4	; 0x04
     e74:	83 e3       	ldi	r24, 0x33	; 51
     e76:	80 83       	st	Z, r24
	pxTopOfStack--;
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	9c 81       	ldd	r25, Y+4	; 0x04
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	9c 83       	std	Y+4, r25	; 0x04
     e80:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	9e 81       	ldd	r25, Y+6	; 0x06
     e86:	9a 83       	std	Y+2, r25	; 0x02
     e88:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	eb 81       	ldd	r30, Y+3	; 0x03
     e8e:	fc 81       	ldd	r31, Y+4	; 0x04
     e90:	80 83       	st	Z, r24
	pxTopOfStack--;
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	9c 81       	ldd	r25, Y+4	; 0x04
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ea0:	89 2f       	mov	r24, r25
     ea2:	99 27       	eor	r25, r25
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	eb 81       	ldd	r30, Y+3	; 0x03
     eac:	fc 81       	ldd	r31, Y+4	; 0x04
     eae:	80 83       	st	Z, r24
	pxTopOfStack--;
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	9c 81       	ldd	r25, Y+4	; 0x04
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	9c 83       	std	Y+4, r25	; 0x04
     eb8:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
     eba:	eb 81       	ldd	r30, Y+3	; 0x03
     ebc:	fc 81       	ldd	r31, Y+4	; 0x04
     ebe:	10 82       	st	Z, r1
	pxTopOfStack--;
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	9c 81       	ldd	r25, Y+4	; 0x04
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	9c 83       	std	Y+4, r25	; 0x04
     ec8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
     eca:	eb 81       	ldd	r30, Y+3	; 0x03
     ecc:	fc 81       	ldd	r31, Y+4	; 0x04
     ece:	80 e8       	ldi	r24, 0x80	; 128
     ed0:	80 83       	st	Z, r24
	pxTopOfStack--;
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	9c 81       	ldd	r25, Y+4	; 0x04
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	9c 83       	std	Y+4, r25	; 0x04
     eda:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
     edc:	eb 81       	ldd	r30, Y+3	; 0x03
     ede:	fc 81       	ldd	r31, Y+4	; 0x04
     ee0:	10 82       	st	Z, r1
	pxTopOfStack--;
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	9c 81       	ldd	r25, Y+4	; 0x04
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	9c 83       	std	Y+4, r25	; 0x04
     eea:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
     eec:	eb 81       	ldd	r30, Y+3	; 0x03
     eee:	fc 81       	ldd	r31, Y+4	; 0x04
     ef0:	82 e0       	ldi	r24, 0x02	; 2
     ef2:	80 83       	st	Z, r24
	pxTopOfStack--;
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	9c 81       	ldd	r25, Y+4	; 0x04
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	9c 83       	std	Y+4, r25	; 0x04
     efc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
     efe:	eb 81       	ldd	r30, Y+3	; 0x03
     f00:	fc 81       	ldd	r31, Y+4	; 0x04
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	80 83       	st	Z, r24
	pxTopOfStack--;
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	9c 81       	ldd	r25, Y+4	; 0x04
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	9c 83       	std	Y+4, r25	; 0x04
     f0e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
     f10:	eb 81       	ldd	r30, Y+3	; 0x03
     f12:	fc 81       	ldd	r31, Y+4	; 0x04
     f14:	84 e0       	ldi	r24, 0x04	; 4
     f16:	80 83       	st	Z, r24
	pxTopOfStack--;
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	9c 81       	ldd	r25, Y+4	; 0x04
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	9c 83       	std	Y+4, r25	; 0x04
     f20:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
     f22:	eb 81       	ldd	r30, Y+3	; 0x03
     f24:	fc 81       	ldd	r31, Y+4	; 0x04
     f26:	85 e0       	ldi	r24, 0x05	; 5
     f28:	80 83       	st	Z, r24
	pxTopOfStack--;
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	9c 81       	ldd	r25, Y+4	; 0x04
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	9c 83       	std	Y+4, r25	; 0x04
     f32:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
     f34:	eb 81       	ldd	r30, Y+3	; 0x03
     f36:	fc 81       	ldd	r31, Y+4	; 0x04
     f38:	86 e0       	ldi	r24, 0x06	; 6
     f3a:	80 83       	st	Z, r24
	pxTopOfStack--;
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	9c 81       	ldd	r25, Y+4	; 0x04
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	9c 83       	std	Y+4, r25	; 0x04
     f44:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
     f46:	eb 81       	ldd	r30, Y+3	; 0x03
     f48:	fc 81       	ldd	r31, Y+4	; 0x04
     f4a:	87 e0       	ldi	r24, 0x07	; 7
     f4c:	80 83       	st	Z, r24
	pxTopOfStack--;
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	9c 81       	ldd	r25, Y+4	; 0x04
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	9c 83       	std	Y+4, r25	; 0x04
     f56:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
     f58:	eb 81       	ldd	r30, Y+3	; 0x03
     f5a:	fc 81       	ldd	r31, Y+4	; 0x04
     f5c:	88 e0       	ldi	r24, 0x08	; 8
     f5e:	80 83       	st	Z, r24
	pxTopOfStack--;
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	9c 81       	ldd	r25, Y+4	; 0x04
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	9c 83       	std	Y+4, r25	; 0x04
     f68:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
     f6a:	eb 81       	ldd	r30, Y+3	; 0x03
     f6c:	fc 81       	ldd	r31, Y+4	; 0x04
     f6e:	89 e0       	ldi	r24, 0x09	; 9
     f70:	80 83       	st	Z, r24
	pxTopOfStack--;
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	9c 81       	ldd	r25, Y+4	; 0x04
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	9c 83       	std	Y+4, r25	; 0x04
     f7a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
     f7c:	eb 81       	ldd	r30, Y+3	; 0x03
     f7e:	fc 81       	ldd	r31, Y+4	; 0x04
     f80:	80 e1       	ldi	r24, 0x10	; 16
     f82:	80 83       	st	Z, r24
	pxTopOfStack--;
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	9c 81       	ldd	r25, Y+4	; 0x04
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	9c 83       	std	Y+4, r25	; 0x04
     f8c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
     f8e:	eb 81       	ldd	r30, Y+3	; 0x03
     f90:	fc 81       	ldd	r31, Y+4	; 0x04
     f92:	81 e1       	ldi	r24, 0x11	; 17
     f94:	80 83       	st	Z, r24
	pxTopOfStack--;
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	9c 81       	ldd	r25, Y+4	; 0x04
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	9c 83       	std	Y+4, r25	; 0x04
     f9e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
     fa0:	eb 81       	ldd	r30, Y+3	; 0x03
     fa2:	fc 81       	ldd	r31, Y+4	; 0x04
     fa4:	82 e1       	ldi	r24, 0x12	; 18
     fa6:	80 83       	st	Z, r24
	pxTopOfStack--;
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	9c 81       	ldd	r25, Y+4	; 0x04
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	9c 83       	std	Y+4, r25	; 0x04
     fb0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
     fb2:	eb 81       	ldd	r30, Y+3	; 0x03
     fb4:	fc 81       	ldd	r31, Y+4	; 0x04
     fb6:	83 e1       	ldi	r24, 0x13	; 19
     fb8:	80 83       	st	Z, r24
	pxTopOfStack--;
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	9c 81       	ldd	r25, Y+4	; 0x04
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	9c 83       	std	Y+4, r25	; 0x04
     fc2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
     fc4:	eb 81       	ldd	r30, Y+3	; 0x03
     fc6:	fc 81       	ldd	r31, Y+4	; 0x04
     fc8:	84 e1       	ldi	r24, 0x14	; 20
     fca:	80 83       	st	Z, r24
	pxTopOfStack--;
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	9c 81       	ldd	r25, Y+4	; 0x04
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	9c 83       	std	Y+4, r25	; 0x04
     fd4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
     fd6:	eb 81       	ldd	r30, Y+3	; 0x03
     fd8:	fc 81       	ldd	r31, Y+4	; 0x04
     fda:	85 e1       	ldi	r24, 0x15	; 21
     fdc:	80 83       	st	Z, r24
	pxTopOfStack--;
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	9c 81       	ldd	r25, Y+4	; 0x04
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	9c 83       	std	Y+4, r25	; 0x04
     fe6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
     fe8:	eb 81       	ldd	r30, Y+3	; 0x03
     fea:	fc 81       	ldd	r31, Y+4	; 0x04
     fec:	86 e1       	ldi	r24, 0x16	; 22
     fee:	80 83       	st	Z, r24
	pxTopOfStack--;
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	9c 81       	ldd	r25, Y+4	; 0x04
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	9c 83       	std	Y+4, r25	; 0x04
     ff8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
     ffa:	eb 81       	ldd	r30, Y+3	; 0x03
     ffc:	fc 81       	ldd	r31, Y+4	; 0x04
     ffe:	87 e1       	ldi	r24, 0x17	; 23
    1000:	80 83       	st	Z, r24
	pxTopOfStack--;
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	9c 81       	ldd	r25, Y+4	; 0x04
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	9c 83       	std	Y+4, r25	; 0x04
    100a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    100c:	eb 81       	ldd	r30, Y+3	; 0x03
    100e:	fc 81       	ldd	r31, Y+4	; 0x04
    1010:	88 e1       	ldi	r24, 0x18	; 24
    1012:	80 83       	st	Z, r24
	pxTopOfStack--;
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	9c 81       	ldd	r25, Y+4	; 0x04
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	9c 83       	std	Y+4, r25	; 0x04
    101c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    101e:	eb 81       	ldd	r30, Y+3	; 0x03
    1020:	fc 81       	ldd	r31, Y+4	; 0x04
    1022:	89 e1       	ldi	r24, 0x19	; 25
    1024:	80 83       	st	Z, r24
	pxTopOfStack--;
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	9c 83       	std	Y+4, r25	; 0x04
    102e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    1030:	eb 81       	ldd	r30, Y+3	; 0x03
    1032:	fc 81       	ldd	r31, Y+4	; 0x04
    1034:	80 e2       	ldi	r24, 0x20	; 32
    1036:	80 83       	st	Z, r24
	pxTopOfStack--;
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	9c 83       	std	Y+4, r25	; 0x04
    1040:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    1042:	eb 81       	ldd	r30, Y+3	; 0x03
    1044:	fc 81       	ldd	r31, Y+4	; 0x04
    1046:	81 e2       	ldi	r24, 0x21	; 33
    1048:	80 83       	st	Z, r24
	pxTopOfStack--;
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	9c 81       	ldd	r25, Y+4	; 0x04
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	9c 83       	std	Y+4, r25	; 0x04
    1052:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    1054:	eb 81       	ldd	r30, Y+3	; 0x03
    1056:	fc 81       	ldd	r31, Y+4	; 0x04
    1058:	82 e2       	ldi	r24, 0x22	; 34
    105a:	80 83       	st	Z, r24
	pxTopOfStack--;
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	9c 83       	std	Y+4, r25	; 0x04
    1064:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    1066:	eb 81       	ldd	r30, Y+3	; 0x03
    1068:	fc 81       	ldd	r31, Y+4	; 0x04
    106a:	83 e2       	ldi	r24, 0x23	; 35
    106c:	80 83       	st	Z, r24
	pxTopOfStack--;
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	9c 81       	ldd	r25, Y+4	; 0x04
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	9c 83       	std	Y+4, r25	; 0x04
    1076:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
    1078:	8f 81       	ldd	r24, Y+7	; 0x07
    107a:	98 85       	ldd	r25, Y+8	; 0x08
    107c:	9a 83       	std	Y+2, r25	; 0x02
    107e:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	eb 81       	ldd	r30, Y+3	; 0x03
    1084:	fc 81       	ldd	r31, Y+4	; 0x04
    1086:	80 83       	st	Z, r24
	pxTopOfStack--;
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	9c 81       	ldd	r25, Y+4	; 0x04
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	9c 83       	std	Y+4, r25	; 0x04
    1090:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	9a 81       	ldd	r25, Y+2	; 0x02
    1096:	89 2f       	mov	r24, r25
    1098:	99 27       	eor	r25, r25
    109a:	9a 83       	std	Y+2, r25	; 0x02
    109c:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	eb 81       	ldd	r30, Y+3	; 0x03
    10a2:	fc 81       	ldd	r31, Y+4	; 0x04
    10a4:	80 83       	st	Z, r24
	pxTopOfStack--;
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	9c 81       	ldd	r25, Y+4	; 0x04
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	9c 83       	std	Y+4, r25	; 0x04
    10ae:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    10b0:	eb 81       	ldd	r30, Y+3	; 0x03
    10b2:	fc 81       	ldd	r31, Y+4	; 0x04
    10b4:	86 e2       	ldi	r24, 0x26	; 38
    10b6:	80 83       	st	Z, r24
	pxTopOfStack--;
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	9c 81       	ldd	r25, Y+4	; 0x04
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	9c 83       	std	Y+4, r25	; 0x04
    10c0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    10c2:	eb 81       	ldd	r30, Y+3	; 0x03
    10c4:	fc 81       	ldd	r31, Y+4	; 0x04
    10c6:	87 e2       	ldi	r24, 0x27	; 39
    10c8:	80 83       	st	Z, r24
	pxTopOfStack--;
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	9c 81       	ldd	r25, Y+4	; 0x04
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	9c 83       	std	Y+4, r25	; 0x04
    10d2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    10d4:	eb 81       	ldd	r30, Y+3	; 0x03
    10d6:	fc 81       	ldd	r31, Y+4	; 0x04
    10d8:	88 e2       	ldi	r24, 0x28	; 40
    10da:	80 83       	st	Z, r24
	pxTopOfStack--;
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	9c 83       	std	Y+4, r25	; 0x04
    10e4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    10e6:	eb 81       	ldd	r30, Y+3	; 0x03
    10e8:	fc 81       	ldd	r31, Y+4	; 0x04
    10ea:	89 e2       	ldi	r24, 0x29	; 41
    10ec:	80 83       	st	Z, r24
	pxTopOfStack--;
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	9c 81       	ldd	r25, Y+4	; 0x04
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	9c 83       	std	Y+4, r25	; 0x04
    10f6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    10f8:	eb 81       	ldd	r30, Y+3	; 0x03
    10fa:	fc 81       	ldd	r31, Y+4	; 0x04
    10fc:	80 e3       	ldi	r24, 0x30	; 48
    10fe:	80 83       	st	Z, r24
	pxTopOfStack--;
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	9c 83       	std	Y+4, r25	; 0x04
    1108:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    110a:	eb 81       	ldd	r30, Y+3	; 0x03
    110c:	fc 81       	ldd	r31, Y+4	; 0x04
    110e:	81 e3       	ldi	r24, 0x31	; 49
    1110:	80 83       	st	Z, r24
	pxTopOfStack--;
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	9c 81       	ldd	r25, Y+4	; 0x04
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	9c 83       	std	Y+4, r25	; 0x04
    111a:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1120:	28 96       	adiw	r28, 0x08	; 8
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    113a:	0e 94 8b 09 	call	0x1316	; 0x1316 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    113e:	a0 91 09 04 	lds	r26, 0x0409
    1142:	b0 91 0a 04 	lds	r27, 0x040A
    1146:	cd 91       	ld	r28, X+
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	dd 91       	ld	r29, X+
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	ff 91       	pop	r31
    1150:	ef 91       	pop	r30
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	bf 91       	pop	r27
    1158:	af 91       	pop	r26
    115a:	9f 91       	pop	r25
    115c:	8f 91       	pop	r24
    115e:	7f 91       	pop	r23
    1160:	6f 91       	pop	r22
    1162:	5f 91       	pop	r21
    1164:	4f 91       	pop	r20
    1166:	3f 91       	pop	r19
    1168:	2f 91       	pop	r18
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	ff 90       	pop	r15
    1170:	ef 90       	pop	r14
    1172:	df 90       	pop	r13
    1174:	cf 90       	pop	r12
    1176:	bf 90       	pop	r11
    1178:	af 90       	pop	r10
    117a:	9f 90       	pop	r9
    117c:	8f 90       	pop	r8
    117e:	7f 90       	pop	r7
    1180:	6f 90       	pop	r6
    1182:	5f 90       	pop	r5
    1184:	4f 90       	pop	r4
    1186:	3f 90       	pop	r3
    1188:	2f 90       	pop	r2
    118a:	1f 90       	pop	r1
    118c:	0f 90       	pop	r0
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    1192:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    1194:	81 e0       	ldi	r24, 0x01	; 1
}
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    11aa:	0f 92       	push	r0
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	0f 92       	push	r0
    11b2:	1f 92       	push	r1
    11b4:	11 24       	eor	r1, r1
    11b6:	2f 92       	push	r2
    11b8:	3f 92       	push	r3
    11ba:	4f 92       	push	r4
    11bc:	5f 92       	push	r5
    11be:	6f 92       	push	r6
    11c0:	7f 92       	push	r7
    11c2:	8f 92       	push	r8
    11c4:	9f 92       	push	r9
    11c6:	af 92       	push	r10
    11c8:	bf 92       	push	r11
    11ca:	cf 92       	push	r12
    11cc:	df 92       	push	r13
    11ce:	ef 92       	push	r14
    11d0:	ff 92       	push	r15
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	2f 93       	push	r18
    11d8:	3f 93       	push	r19
    11da:	4f 93       	push	r20
    11dc:	5f 93       	push	r21
    11de:	6f 93       	push	r22
    11e0:	7f 93       	push	r23
    11e2:	8f 93       	push	r24
    11e4:	9f 93       	push	r25
    11e6:	af 93       	push	r26
    11e8:	bf 93       	push	r27
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	ef 93       	push	r30
    11f0:	ff 93       	push	r31
    11f2:	a0 91 09 04 	lds	r26, 0x0409
    11f6:	b0 91 0a 04 	lds	r27, 0x040A
    11fa:	0d b6       	in	r0, 0x3d	; 61
    11fc:	0d 92       	st	X+, r0
    11fe:	0e b6       	in	r0, 0x3e	; 62
    1200:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1202:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1206:	a0 91 09 04 	lds	r26, 0x0409
    120a:	b0 91 0a 04 	lds	r27, 0x040A
    120e:	cd 91       	ld	r28, X+
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	dd 91       	ld	r29, X+
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	ff 91       	pop	r31
    1218:	ef 91       	pop	r30
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	bf 91       	pop	r27
    1220:	af 91       	pop	r26
    1222:	9f 91       	pop	r25
    1224:	8f 91       	pop	r24
    1226:	7f 91       	pop	r23
    1228:	6f 91       	pop	r22
    122a:	5f 91       	pop	r21
    122c:	4f 91       	pop	r20
    122e:	3f 91       	pop	r19
    1230:	2f 91       	pop	r18
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	ff 90       	pop	r15
    1238:	ef 90       	pop	r14
    123a:	df 90       	pop	r13
    123c:	cf 90       	pop	r12
    123e:	bf 90       	pop	r11
    1240:	af 90       	pop	r10
    1242:	9f 90       	pop	r9
    1244:	8f 90       	pop	r8
    1246:	7f 90       	pop	r7
    1248:	6f 90       	pop	r6
    124a:	5f 90       	pop	r5
    124c:	4f 90       	pop	r4
    124e:	3f 90       	pop	r3
    1250:	2f 90       	pop	r2
    1252:	1f 90       	pop	r1
    1254:	0f 90       	pop	r0
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	0f 90       	pop	r0

	asm volatile ( "ret" );
    125a:	08 95       	ret

0000125c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    125c:	0f 92       	push	r0
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	0f 92       	push	r0
    1264:	1f 92       	push	r1
    1266:	11 24       	eor	r1, r1
    1268:	2f 92       	push	r2
    126a:	3f 92       	push	r3
    126c:	4f 92       	push	r4
    126e:	5f 92       	push	r5
    1270:	6f 92       	push	r6
    1272:	7f 92       	push	r7
    1274:	8f 92       	push	r8
    1276:	9f 92       	push	r9
    1278:	af 92       	push	r10
    127a:	bf 92       	push	r11
    127c:	cf 92       	push	r12
    127e:	df 92       	push	r13
    1280:	ef 92       	push	r14
    1282:	ff 92       	push	r15
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	2f 93       	push	r18
    128a:	3f 93       	push	r19
    128c:	4f 93       	push	r20
    128e:	5f 93       	push	r21
    1290:	6f 93       	push	r22
    1292:	7f 93       	push	r23
    1294:	8f 93       	push	r24
    1296:	9f 93       	push	r25
    1298:	af 93       	push	r26
    129a:	bf 93       	push	r27
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	ef 93       	push	r30
    12a2:	ff 93       	push	r31
    12a4:	a0 91 09 04 	lds	r26, 0x0409
    12a8:	b0 91 0a 04 	lds	r27, 0x040A
    12ac:	0d b6       	in	r0, 0x3d	; 61
    12ae:	0d 92       	st	X+, r0
    12b0:	0e b6       	in	r0, 0x3e	; 62
    12b2:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    12b4:	0e 94 77 17 	call	0x2eee	; 0x2eee <xTaskIncrementTick>
    12b8:	88 23       	and	r24, r24
    12ba:	11 f0       	breq	.+4      	; 0x12c0 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    12bc:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    12c0:	a0 91 09 04 	lds	r26, 0x0409
    12c4:	b0 91 0a 04 	lds	r27, 0x040A
    12c8:	cd 91       	ld	r28, X+
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	dd 91       	ld	r29, X+
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	ff 91       	pop	r31
    12d2:	ef 91       	pop	r30
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	bf 91       	pop	r27
    12da:	af 91       	pop	r26
    12dc:	9f 91       	pop	r25
    12de:	8f 91       	pop	r24
    12e0:	7f 91       	pop	r23
    12e2:	6f 91       	pop	r22
    12e4:	5f 91       	pop	r21
    12e6:	4f 91       	pop	r20
    12e8:	3f 91       	pop	r19
    12ea:	2f 91       	pop	r18
    12ec:	1f 91       	pop	r17
    12ee:	0f 91       	pop	r16
    12f0:	ff 90       	pop	r15
    12f2:	ef 90       	pop	r14
    12f4:	df 90       	pop	r13
    12f6:	cf 90       	pop	r12
    12f8:	bf 90       	pop	r11
    12fa:	af 90       	pop	r10
    12fc:	9f 90       	pop	r9
    12fe:	8f 90       	pop	r8
    1300:	7f 90       	pop	r7
    1302:	6f 90       	pop	r6
    1304:	5f 90       	pop	r5
    1306:	4f 90       	pop	r4
    1308:	3f 90       	pop	r3
    130a:	2f 90       	pop	r2
    130c:	1f 90       	pop	r1
    130e:	0f 90       	pop	r0
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1314:	08 95       	ret

00001316 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	00 d0       	rcall	.+0      	; 0x131c <prvSetupTimerInterrupt+0x6>
    131c:	00 d0       	rcall	.+0      	; 0x131e <prvSetupTimerInterrupt+0x8>
    131e:	00 d0       	rcall	.+0      	; 0x1320 <prvSetupTimerInterrupt+0xa>
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1324:	80 e4       	ldi	r24, 0x40	; 64
    1326:	9f e1       	ldi	r25, 0x1F	; 31
    1328:	a0 e0       	ldi	r26, 0x00	; 0
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	8b 83       	std	Y+3, r24	; 0x03
    132e:	9c 83       	std	Y+4, r25	; 0x04
    1330:	ad 83       	std	Y+5, r26	; 0x05
    1332:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	ad 81       	ldd	r26, Y+5	; 0x05
    133a:	be 81       	ldd	r27, Y+6	; 0x06
    133c:	68 94       	set
    133e:	15 f8       	bld	r1, 5
    1340:	b6 95       	lsr	r27
    1342:	a7 95       	ror	r26
    1344:	97 95       	ror	r25
    1346:	87 95       	ror	r24
    1348:	16 94       	lsr	r1
    134a:	d1 f7       	brne	.-12     	; 0x1340 <prvSetupTimerInterrupt+0x2a>
    134c:	8b 83       	std	Y+3, r24	; 0x03
    134e:	9c 83       	std	Y+4, r25	; 0x04
    1350:	ad 83       	std	Y+5, r26	; 0x05
    1352:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	9c 81       	ldd	r25, Y+4	; 0x04
    1358:	ad 81       	ldd	r26, Y+5	; 0x05
    135a:	be 81       	ldd	r27, Y+6	; 0x06
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	a1 09       	sbc	r26, r1
    1360:	b1 09       	sbc	r27, r1
    1362:	8b 83       	std	Y+3, r24	; 0x03
    1364:	9c 83       	std	Y+4, r25	; 0x04
    1366:	ad 83       	std	Y+5, r26	; 0x05
    1368:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	ad 81       	ldd	r26, Y+5	; 0x05
    1374:	be 81       	ldd	r27, Y+6	; 0x06
    1376:	89 2f       	mov	r24, r25
    1378:	9a 2f       	mov	r25, r26
    137a:	ab 2f       	mov	r26, r27
    137c:	bb 27       	eor	r27, r27
    137e:	8b 83       	std	Y+3, r24	; 0x03
    1380:	9c 83       	std	Y+4, r25	; 0x04
    1382:	ad 83       	std	Y+5, r26	; 0x05
    1384:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    138a:	eb e4       	ldi	r30, 0x4B	; 75
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    1392:	ea e4       	ldi	r30, 0x4A	; 74
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    139a:	8b e0       	ldi	r24, 0x0B	; 11
    139c:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    139e:	ee e4       	ldi	r30, 0x4E	; 78
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    13a6:	e9 e5       	ldi	r30, 0x59	; 89
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	80 61       	ori	r24, 0x10	; 16
    13b2:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    13b4:	e9 e5       	ldi	r30, 0x59	; 89
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	80 83       	st	Z, r24
}
    13bc:	26 96       	adiw	r28, 0x06	; 6
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    13ce:	0e 94 2e 09 	call	0x125c	; 0x125c <vPortYieldFromTick>
		asm volatile ( "reti" );
    13d2:	18 95       	reti

000013d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	00 d0       	rcall	.+0      	; 0x13da <xQueueGenericReset+0x6>
    13da:	00 d0       	rcall	.+0      	; 0x13dc <xQueueGenericReset+0x8>
    13dc:	0f 92       	push	r0
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	9c 83       	std	Y+4, r25	; 0x04
    13e4:	8b 83       	std	Y+3, r24	; 0x03
    13e6:	6d 83       	std	Y+5, r22	; 0x05
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	9c 81       	ldd	r25, Y+4	; 0x04
    13ec:	9a 83       	std	Y+2, r25	; 0x02
    13ee:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    13f6:	e9 81       	ldd	r30, Y+1	; 0x01
    13f8:	fa 81       	ldd	r31, Y+2	; 0x02
    13fa:	40 81       	ld	r20, Z
    13fc:	51 81       	ldd	r21, Z+1	; 0x01
    13fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1400:	fa 81       	ldd	r31, Y+2	; 0x02
    1402:	83 8d       	ldd	r24, Z+27	; 0x1b
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	e9 81       	ldd	r30, Y+1	; 0x01
    140a:	fa 81       	ldd	r31, Y+2	; 0x02
    140c:	84 8d       	ldd	r24, Z+28	; 0x1c
    140e:	88 2f       	mov	r24, r24
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	bc 01       	movw	r22, r24
    1414:	26 9f       	mul	r18, r22
    1416:	c0 01       	movw	r24, r0
    1418:	27 9f       	mul	r18, r23
    141a:	90 0d       	add	r25, r0
    141c:	36 9f       	mul	r19, r22
    141e:	90 0d       	add	r25, r0
    1420:	11 24       	eor	r1, r1
    1422:	84 0f       	add	r24, r20
    1424:	95 1f       	adc	r25, r21
    1426:	e9 81       	ldd	r30, Y+1	; 0x01
    1428:	fa 81       	ldd	r31, Y+2	; 0x02
    142a:	93 83       	std	Z+3, r25	; 0x03
    142c:	82 83       	std	Z+2, r24	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    142e:	e9 81       	ldd	r30, Y+1	; 0x01
    1430:	fa 81       	ldd	r31, Y+2	; 0x02
    1432:	12 8e       	std	Z+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1434:	e9 81       	ldd	r30, Y+1	; 0x01
    1436:	fa 81       	ldd	r31, Y+2	; 0x02
    1438:	80 81       	ld	r24, Z
    143a:	91 81       	ldd	r25, Z+1	; 0x01
    143c:	e9 81       	ldd	r30, Y+1	; 0x01
    143e:	fa 81       	ldd	r31, Y+2	; 0x02
    1440:	95 83       	std	Z+5, r25	; 0x05
    1442:	84 83       	std	Z+4, r24	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1444:	e9 81       	ldd	r30, Y+1	; 0x01
    1446:	fa 81       	ldd	r31, Y+2	; 0x02
    1448:	40 81       	ld	r20, Z
    144a:	51 81       	ldd	r21, Z+1	; 0x01
    144c:	e9 81       	ldd	r30, Y+1	; 0x01
    144e:	fa 81       	ldd	r31, Y+2	; 0x02
    1450:	83 8d       	ldd	r24, Z+27	; 0x1b
    1452:	88 2f       	mov	r24, r24
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	9c 01       	movw	r18, r24
    1458:	21 50       	subi	r18, 0x01	; 1
    145a:	30 40       	sbci	r19, 0x00	; 0
    145c:	e9 81       	ldd	r30, Y+1	; 0x01
    145e:	fa 81       	ldd	r31, Y+2	; 0x02
    1460:	84 8d       	ldd	r24, Z+28	; 0x1c
    1462:	88 2f       	mov	r24, r24
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	bc 01       	movw	r22, r24
    1468:	26 9f       	mul	r18, r22
    146a:	c0 01       	movw	r24, r0
    146c:	27 9f       	mul	r18, r23
    146e:	90 0d       	add	r25, r0
    1470:	36 9f       	mul	r19, r22
    1472:	90 0d       	add	r25, r0
    1474:	11 24       	eor	r1, r1
    1476:	84 0f       	add	r24, r20
    1478:	95 1f       	adc	r25, r21
    147a:	e9 81       	ldd	r30, Y+1	; 0x01
    147c:	fa 81       	ldd	r31, Y+2	; 0x02
    147e:	97 83       	std	Z+7, r25	; 0x07
    1480:	86 83       	std	Z+6, r24	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
    1482:	e9 81       	ldd	r30, Y+1	; 0x01
    1484:	fa 81       	ldd	r31, Y+2	; 0x02
    1486:	8f ef       	ldi	r24, 0xFF	; 255
    1488:	85 8f       	std	Z+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
    148a:	e9 81       	ldd	r30, Y+1	; 0x01
    148c:	fa 81       	ldd	r31, Y+2	; 0x02
    148e:	8f ef       	ldi	r24, 0xFF	; 255
    1490:	86 8f       	std	Z+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    1492:	8d 81       	ldd	r24, Y+5	; 0x05
    1494:	88 23       	and	r24, r24
    1496:	79 f4       	brne	.+30     	; 0x14b6 <xQueueGenericReset+0xe2>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1498:	e9 81       	ldd	r30, Y+1	; 0x01
    149a:	fa 81       	ldd	r31, Y+2	; 0x02
    149c:	80 85       	ldd	r24, Z+8	; 0x08
    149e:	88 23       	and	r24, r24
    14a0:	a1 f0       	breq	.+40     	; 0x14ca <xQueueGenericReset+0xf6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	9a 81       	ldd	r25, Y+2	; 0x02
    14a6:	08 96       	adiw	r24, 0x08	; 8
    14a8:	0e 94 1b 19 	call	0x3236	; 0x3236 <xTaskRemoveFromEventList>
    14ac:	88 23       	and	r24, r24
    14ae:	69 f0       	breq	.+26     	; 0x14ca <xQueueGenericReset+0xf6>
				{
					queueYIELD_IF_USING_PREEMPTION();
    14b0:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vPortYield>
    14b4:	0a c0       	rjmp	.+20     	; 0x14ca <xQueueGenericReset+0xf6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ba:	08 96       	adiw	r24, 0x08	; 8
    14bc:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	9a 81       	ldd	r25, Y+2	; 0x02
    14c4:	41 96       	adiw	r24, 0x11	; 17
    14c6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    14ca:	0f 90       	pop	r0
    14cc:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
}
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	29 97       	sbiw	r28, 0x09	; 9
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	8f 83       	std	Y+7, r24	; 0x07
    14fa:	68 87       	std	Y+8, r22	; 0x08
    14fc:	49 87       	std	Y+9, r20	; 0x09
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    14fe:	88 85       	ldd	r24, Y+8	; 0x08
    1500:	88 23       	and	r24, r24
    1502:	19 f4       	brne	.+6      	; 0x150a <xQueueGenericCreate+0x2a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    1504:	1c 82       	std	Y+4, r1	; 0x04
    1506:	1b 82       	std	Y+3, r1	; 0x03
    1508:	10 c0       	rjmp	.+32     	; 0x152a <xQueueGenericCreate+0x4a>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    150a:	8f 81       	ldd	r24, Y+7	; 0x07
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	88 85       	ldd	r24, Y+8	; 0x08
    1512:	88 2f       	mov	r24, r24
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	ac 01       	movw	r20, r24
    1518:	24 9f       	mul	r18, r20
    151a:	c0 01       	movw	r24, r0
    151c:	25 9f       	mul	r18, r21
    151e:	90 0d       	add	r25, r0
    1520:	34 9f       	mul	r19, r20
    1522:	90 0d       	add	r25, r0
    1524:	11 24       	eor	r1, r1
    1526:	9c 83       	std	Y+4, r25	; 0x04
    1528:	8b 83       	std	Y+3, r24	; 0x03
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	4f 96       	adiw	r24, 0x1f	; 31
    1530:	0e 94 44 04 	call	0x888	; 0x888 <pvPortMalloc>
    1534:	9e 83       	std	Y+6, r25	; 0x06
    1536:	8d 83       	std	Y+5, r24	; 0x05

		if( pxNewQueue != NULL )
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	9e 81       	ldd	r25, Y+6	; 0x06
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	81 f0       	breq	.+32     	; 0x1560 <xQueueGenericCreate+0x80>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    1540:	8d 81       	ldd	r24, Y+5	; 0x05
    1542:	9e 81       	ldd	r25, Y+6	; 0x06
    1544:	4f 96       	adiw	r24, 0x1f	; 31
    1546:	9a 83       	std	Y+2, r25	; 0x02
    1548:	89 83       	std	Y+1, r24	; 0x01
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    154a:	29 81       	ldd	r18, Y+1	; 0x01
    154c:	3a 81       	ldd	r19, Y+2	; 0x02
    154e:	ed 81       	ldd	r30, Y+5	; 0x05
    1550:	fe 81       	ldd	r31, Y+6	; 0x06
    1552:	8f 81       	ldd	r24, Y+7	; 0x07
    1554:	68 85       	ldd	r22, Y+8	; 0x08
    1556:	a9 01       	movw	r20, r18
    1558:	29 85       	ldd	r18, Y+9	; 0x09
    155a:	8f 01       	movw	r16, r30
    155c:	0e 94 bd 0a 	call	0x157a	; 0x157a <prvInitialiseNewQueue>
		}

		return pxNewQueue;
    1560:	8d 81       	ldd	r24, Y+5	; 0x05
    1562:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    1564:	29 96       	adiw	r28, 0x09	; 9
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	1f 91       	pop	r17
    1576:	0f 91       	pop	r16
    1578:	08 95       	ret

0000157a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	27 97       	sbiw	r28, 0x07	; 7
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	89 83       	std	Y+1, r24	; 0x01
    1594:	6a 83       	std	Y+2, r22	; 0x02
    1596:	5c 83       	std	Y+4, r21	; 0x04
    1598:	4b 83       	std	Y+3, r20	; 0x03
    159a:	2d 83       	std	Y+5, r18	; 0x05
    159c:	1f 83       	std	Y+7, r17	; 0x07
    159e:	0e 83       	std	Y+6, r16	; 0x06
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	88 23       	and	r24, r24
    15a4:	39 f4       	brne	.+14     	; 0x15b4 <prvInitialiseNewQueue+0x3a>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    15a6:	8e 81       	ldd	r24, Y+6	; 0x06
    15a8:	9f 81       	ldd	r25, Y+7	; 0x07
    15aa:	ee 81       	ldd	r30, Y+6	; 0x06
    15ac:	ff 81       	ldd	r31, Y+7	; 0x07
    15ae:	91 83       	std	Z+1, r25	; 0x01
    15b0:	80 83       	st	Z, r24
    15b2:	06 c0       	rjmp	.+12     	; 0x15c0 <prvInitialiseNewQueue+0x46>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	ee 81       	ldd	r30, Y+6	; 0x06
    15ba:	ff 81       	ldd	r31, Y+7	; 0x07
    15bc:	91 83       	std	Z+1, r25	; 0x01
    15be:	80 83       	st	Z, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    15c0:	ee 81       	ldd	r30, Y+6	; 0x06
    15c2:	ff 81       	ldd	r31, Y+7	; 0x07
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	83 8f       	std	Z+27, r24	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
    15c8:	ee 81       	ldd	r30, Y+6	; 0x06
    15ca:	ff 81       	ldd	r31, Y+7	; 0x07
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	84 8f       	std	Z+28, r24	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    15d0:	8e 81       	ldd	r24, Y+6	; 0x06
    15d2:	9f 81       	ldd	r25, Y+7	; 0x07
    15d4:	61 e0       	ldi	r22, 0x01	; 1
    15d6:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    15da:	27 96       	adiw	r28, 0x07	; 7
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	de bf       	out	0x3e, r29	; 62
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	cd bf       	out	0x3d, r28	; 61
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	1f 91       	pop	r17
    15ec:	0f 91       	pop	r16
    15ee:	08 95       	ret

000015f0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <prvInitialiseMutex+0x6>
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	9a 83       	std	Y+2, r25	; 0x02
    15fc:	89 83       	std	Y+1, r24	; 0x01
		if( pxNewQueue != NULL )
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	9a 81       	ldd	r25, Y+2	; 0x02
    1602:	00 97       	sbiw	r24, 0x00	; 0
    1604:	a1 f0       	breq	.+40     	; 0x162e <prvInitialiseMutex+0x3e>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    1606:	e9 81       	ldd	r30, Y+1	; 0x01
    1608:	fa 81       	ldd	r31, Y+2	; 0x02
    160a:	13 82       	std	Z+3, r1	; 0x03
    160c:	12 82       	std	Z+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    160e:	e9 81       	ldd	r30, Y+1	; 0x01
    1610:	fa 81       	ldd	r31, Y+2	; 0x02
    1612:	11 82       	std	Z+1, r1	; 0x01
    1614:	10 82       	st	Z, r1

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    1616:	e9 81       	ldd	r30, Y+1	; 0x01
    1618:	fa 81       	ldd	r31, Y+2	; 0x02
    161a:	16 82       	std	Z+6, r1	; 0x06

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	9a 81       	ldd	r25, Y+2	; 0x02
    1620:	60 e0       	ldi	r22, 0x00	; 0
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	40 e0       	ldi	r20, 0x00	; 0
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	0e 94 3c 0b 	call	0x1678	; 0x1678 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	00 d0       	rcall	.+0      	; 0x163e <xQueueCreateMutex+0x6>
    163e:	00 d0       	rcall	.+0      	; 0x1640 <xQueueCreateMutex+0x8>
    1640:	0f 92       	push	r0
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	8d 83       	std	Y+5, r24	; 0x05
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	8a 83       	std	Y+2, r24	; 0x02
    164c:	19 82       	std	Y+1, r1	; 0x01

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	69 81       	ldd	r22, Y+1	; 0x01
    1652:	4d 81       	ldd	r20, Y+5	; 0x05
    1654:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <xQueueGenericCreate>
    1658:	9c 83       	std	Y+4, r25	; 0x04
    165a:	8b 83       	std	Y+3, r24	; 0x03
		prvInitialiseMutex( pxNewQueue );
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <prvInitialiseMutex>

		return pxNewQueue;
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
	}
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	2f 97       	sbiw	r28, 0x0f	; 15
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	99 87       	std	Y+9, r25	; 0x09
    168e:	88 87       	std	Y+8, r24	; 0x08
    1690:	7b 87       	std	Y+11, r23	; 0x0b
    1692:	6a 87       	std	Y+10, r22	; 0x0a
    1694:	5d 87       	std	Y+13, r21	; 0x0d
    1696:	4c 87       	std	Y+12, r20	; 0x0c
    1698:	2e 87       	std	Y+14, r18	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    169a:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    169c:	88 85       	ldd	r24, Y+8	; 0x08
    169e:	99 85       	ldd	r25, Y+9	; 0x09
    16a0:	9a 83       	std	Y+2, r25	; 0x02
    16a2:	89 83       	std	Y+1, r24	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    16aa:	e9 81       	ldd	r30, Y+1	; 0x01
    16ac:	fa 81       	ldd	r31, Y+2	; 0x02
    16ae:	92 8d       	ldd	r25, Z+26	; 0x1a
    16b0:	e9 81       	ldd	r30, Y+1	; 0x01
    16b2:	fa 81       	ldd	r31, Y+2	; 0x02
    16b4:	83 8d       	ldd	r24, Z+27	; 0x1b
    16b6:	98 17       	cp	r25, r24
    16b8:	18 f0       	brcs	.+6      	; 0x16c0 <xQueueGenericSend+0x48>
    16ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    16bc:	82 30       	cpi	r24, 0x02	; 2
    16be:	11 f5       	brne	.+68     	; 0x1704 <xQueueGenericSend+0x8c>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	9a 81       	ldd	r25, Y+2	; 0x02
    16c4:	2a 85       	ldd	r18, Y+10	; 0x0a
    16c6:	3b 85       	ldd	r19, Y+11	; 0x0b
    16c8:	b9 01       	movw	r22, r18
    16ca:	4e 85       	ldd	r20, Y+14	; 0x0e
    16cc:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <prvCopyDataToQueue>
    16d0:	8b 83       	std	Y+3, r24	; 0x03
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    16d2:	e9 81       	ldd	r30, Y+1	; 0x01
    16d4:	fa 81       	ldd	r31, Y+2	; 0x02
    16d6:	81 89       	ldd	r24, Z+17	; 0x11
    16d8:	88 23       	and	r24, r24
    16da:	51 f0       	breq	.+20     	; 0x16f0 <xQueueGenericSend+0x78>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	9a 81       	ldd	r25, Y+2	; 0x02
    16e0:	41 96       	adiw	r24, 0x11	; 17
    16e2:	0e 94 1b 19 	call	0x3236	; 0x3236 <xTaskRemoveFromEventList>
    16e6:	88 23       	and	r24, r24
    16e8:	41 f0       	breq	.+16     	; 0x16fa <xQueueGenericSend+0x82>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    16ea:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vPortYield>
    16ee:	05 c0       	rjmp	.+10     	; 0x16fa <xQueueGenericSend+0x82>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	88 23       	and	r24, r24
    16f4:	11 f0       	breq	.+4      	; 0x16fa <xQueueGenericSend+0x82>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    16f6:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    16fa:	0f 90       	pop	r0
    16fc:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	8f 87       	std	Y+15, r24	; 0x0f
    1702:	5c c0       	rjmp	.+184    	; 0x17bc <xQueueGenericSend+0x144>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1704:	8c 85       	ldd	r24, Y+12	; 0x0c
    1706:	9d 85       	ldd	r25, Y+13	; 0x0d
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	21 f4       	brne	.+8      	; 0x1714 <xQueueGenericSend+0x9c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    170c:	0f 90       	pop	r0
    170e:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1710:	1f 86       	std	Y+15, r1	; 0x0f
    1712:	54 c0       	rjmp	.+168    	; 0x17bc <xQueueGenericSend+0x144>
				}
				else if( xEntryTimeSet == pdFALSE )
    1714:	8c 81       	ldd	r24, Y+4	; 0x04
    1716:	88 23       	and	r24, r24
    1718:	31 f4       	brne	.+12     	; 0x1726 <xQueueGenericSend+0xae>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    171a:	ce 01       	movw	r24, r28
    171c:	05 96       	adiw	r24, 0x05	; 5
    171e:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1726:	0f 90       	pop	r0
    1728:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    172a:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	0f 92       	push	r0
    1734:	e9 81       	ldd	r30, Y+1	; 0x01
    1736:	fa 81       	ldd	r31, Y+2	; 0x02
    1738:	85 8d       	ldd	r24, Z+29	; 0x1d
    173a:	8f 3f       	cpi	r24, 0xFF	; 255
    173c:	19 f4       	brne	.+6      	; 0x1744 <xQueueGenericSend+0xcc>
    173e:	e9 81       	ldd	r30, Y+1	; 0x01
    1740:	fa 81       	ldd	r31, Y+2	; 0x02
    1742:	15 8e       	std	Z+29, r1	; 0x1d
    1744:	e9 81       	ldd	r30, Y+1	; 0x01
    1746:	fa 81       	ldd	r31, Y+2	; 0x02
    1748:	86 8d       	ldd	r24, Z+30	; 0x1e
    174a:	8f 3f       	cpi	r24, 0xFF	; 255
    174c:	19 f4       	brne	.+6      	; 0x1754 <xQueueGenericSend+0xdc>
    174e:	e9 81       	ldd	r30, Y+1	; 0x01
    1750:	fa 81       	ldd	r31, Y+2	; 0x02
    1752:	16 8e       	std	Z+30, r1	; 0x1e
    1754:	0f 90       	pop	r0
    1756:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1758:	ce 01       	movw	r24, r28
    175a:	05 96       	adiw	r24, 0x05	; 5
    175c:	9e 01       	movw	r18, r28
    175e:	24 5f       	subi	r18, 0xF4	; 244
    1760:	3f 4f       	sbci	r19, 0xFF	; 255
    1762:	b9 01       	movw	r22, r18
    1764:	0e 94 04 1a 	call	0x3408	; 0x3408 <xTaskCheckForTimeOut>
    1768:	88 23       	and	r24, r24
    176a:	09 f5       	brne	.+66     	; 0x17ae <xQueueGenericSend+0x136>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	9a 81       	ldd	r25, Y+2	; 0x02
    1770:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <prvIsQueueFull>
    1774:	88 23       	and	r24, r24
    1776:	a1 f0       	breq	.+40     	; 0x17a0 <xQueueGenericSend+0x128>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	9a 81       	ldd	r25, Y+2	; 0x02
    177c:	08 96       	adiw	r24, 0x08	; 8
    177e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1780:	3d 85       	ldd	r19, Y+13	; 0x0d
    1782:	b9 01       	movw	r22, r18
    1784:	0e 94 c9 18 	call	0x3192	; 0x3192 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	9a 81       	ldd	r25, Y+2	; 0x02
    178c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1790:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <xTaskResumeAll>
    1794:	88 23       	and	r24, r24
    1796:	09 f0       	breq	.+2      	; 0x179a <xQueueGenericSend+0x122>
    1798:	85 cf       	rjmp	.-246    	; 0x16a4 <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
    179a:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vPortYield>
    179e:	82 cf       	rjmp	.-252    	; 0x16a4 <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	9a 81       	ldd	r25, Y+2	; 0x02
    17a4:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    17a8:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <xTaskResumeAll>
    17ac:	7b cf       	rjmp	.-266    	; 0x16a4 <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	9a 81       	ldd	r25, Y+2	; 0x02
    17b2:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    17b6:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    17ba:	1f 86       	std	Y+15, r1	; 0x0f
    17bc:	8f 85       	ldd	r24, Y+15	; 0x0f
		}
	}
}
    17be:	2f 96       	adiw	r28, 0x0f	; 15
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	2c 97       	sbiw	r28, 0x0c	; 12
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	cd bf       	out	0x3d, r28	; 61
    17e4:	9f 83       	std	Y+7, r25	; 0x07
    17e6:	8e 83       	std	Y+6, r24	; 0x06
    17e8:	79 87       	std	Y+9, r23	; 0x09
    17ea:	68 87       	std	Y+8, r22	; 0x08
    17ec:	5b 87       	std	Y+11, r21	; 0x0b
    17ee:	4a 87       	std	Y+10, r20	; 0x0a
    17f0:	2c 87       	std	Y+12, r18	; 0x0c
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    17f2:	8e 81       	ldd	r24, Y+6	; 0x06
    17f4:	9f 81       	ldd	r25, Y+7	; 0x07
    17f6:	9b 83       	std	Y+3, r25	; 0x03
    17f8:	8a 83       	std	Y+2, r24	; 0x02
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    17fa:	1c 82       	std	Y+4, r1	; 0x04
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    17fc:	ea 81       	ldd	r30, Y+2	; 0x02
    17fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1800:	92 8d       	ldd	r25, Z+26	; 0x1a
    1802:	ea 81       	ldd	r30, Y+2	; 0x02
    1804:	fb 81       	ldd	r31, Y+3	; 0x03
    1806:	83 8d       	ldd	r24, Z+27	; 0x1b
    1808:	98 17       	cp	r25, r24
    180a:	18 f0       	brcs	.+6      	; 0x1812 <xQueueGenericSendFromISR+0x42>
    180c:	8c 85       	ldd	r24, Y+12	; 0x0c
    180e:	82 30       	cpi	r24, 0x02	; 2
    1810:	61 f5       	brne	.+88     	; 0x186a <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    1812:	ea 81       	ldd	r30, Y+2	; 0x02
    1814:	fb 81       	ldd	r31, Y+3	; 0x03
    1816:	86 8d       	ldd	r24, Z+30	; 0x1e
    1818:	89 83       	std	Y+1, r24	; 0x01
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	9b 81       	ldd	r25, Y+3	; 0x03
    181e:	28 85       	ldd	r18, Y+8	; 0x08
    1820:	39 85       	ldd	r19, Y+9	; 0x09
    1822:	b9 01       	movw	r22, r18
    1824:	4c 85       	ldd	r20, Y+12	; 0x0c
    1826:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	8f 3f       	cpi	r24, 0xFF	; 255
    182e:	a9 f4       	brne	.+42     	; 0x185a <xQueueGenericSendFromISR+0x8a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1830:	ea 81       	ldd	r30, Y+2	; 0x02
    1832:	fb 81       	ldd	r31, Y+3	; 0x03
    1834:	81 89       	ldd	r24, Z+17	; 0x11
    1836:	88 23       	and	r24, r24
    1838:	a9 f0       	breq	.+42     	; 0x1864 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	9b 81       	ldd	r25, Y+3	; 0x03
    183e:	41 96       	adiw	r24, 0x11	; 17
    1840:	0e 94 1b 19 	call	0x3236	; 0x3236 <xTaskRemoveFromEventList>
    1844:	88 23       	and	r24, r24
    1846:	71 f0       	breq	.+28     	; 0x1864 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1848:	8a 85       	ldd	r24, Y+10	; 0x0a
    184a:	9b 85       	ldd	r25, Y+11	; 0x0b
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	51 f0       	breq	.+20     	; 0x1864 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1850:	ea 85       	ldd	r30, Y+10	; 0x0a
    1852:	fb 85       	ldd	r31, Y+11	; 0x0b
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	80 83       	st	Z, r24
    1858:	05 c0       	rjmp	.+10     	; 0x1864 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	8f 5f       	subi	r24, 0xFF	; 255
    185e:	ea 81       	ldd	r30, Y+2	; 0x02
    1860:	fb 81       	ldd	r31, Y+3	; 0x03
    1862:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	8d 83       	std	Y+5, r24	; 0x05
    1868:	01 c0       	rjmp	.+2      	; 0x186c <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    186a:	1d 82       	std	Y+5, r1	; 0x05
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    186c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    186e:	2c 96       	adiw	r28, 0x0c	; 12
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	2a 97       	sbiw	r28, 0x0a	; 10
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	98 87       	std	Y+8, r25	; 0x08
    1896:	8f 83       	std	Y+7, r24	; 0x07
    1898:	7a 87       	std	Y+10, r23	; 0x0a
    189a:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    189c:	8f 81       	ldd	r24, Y+7	; 0x07
    189e:	98 85       	ldd	r25, Y+8	; 0x08
    18a0:	9c 83       	std	Y+4, r25	; 0x04
    18a2:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    18a4:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    18a6:	eb 81       	ldd	r30, Y+3	; 0x03
    18a8:	fc 81       	ldd	r31, Y+4	; 0x04
    18aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    18ac:	8a 83       	std	Y+2, r24	; 0x02

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    18ae:	eb 81       	ldd	r30, Y+3	; 0x03
    18b0:	fc 81       	ldd	r31, Y+4	; 0x04
    18b2:	93 8d       	ldd	r25, Z+27	; 0x1b
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	89 17       	cp	r24, r25
    18b8:	48 f5       	brcc	.+82     	; 0x190c <xQueueGiveFromISR+0x8c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    18ba:	eb 81       	ldd	r30, Y+3	; 0x03
    18bc:	fc 81       	ldd	r31, Y+4	; 0x04
    18be:	86 8d       	ldd	r24, Z+30	; 0x1e
    18c0:	89 83       	std	Y+1, r24	; 0x01
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	8f 5f       	subi	r24, 0xFF	; 255
    18c6:	eb 81       	ldd	r30, Y+3	; 0x03
    18c8:	fc 81       	ldd	r31, Y+4	; 0x04
    18ca:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	8f 3f       	cpi	r24, 0xFF	; 255
    18d0:	a9 f4       	brne	.+42     	; 0x18fc <xQueueGiveFromISR+0x7c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    18d2:	eb 81       	ldd	r30, Y+3	; 0x03
    18d4:	fc 81       	ldd	r31, Y+4	; 0x04
    18d6:	81 89       	ldd	r24, Z+17	; 0x11
    18d8:	88 23       	and	r24, r24
    18da:	a9 f0       	breq	.+42     	; 0x1906 <xQueueGiveFromISR+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	9c 81       	ldd	r25, Y+4	; 0x04
    18e0:	41 96       	adiw	r24, 0x11	; 17
    18e2:	0e 94 1b 19 	call	0x3236	; 0x3236 <xTaskRemoveFromEventList>
    18e6:	88 23       	and	r24, r24
    18e8:	71 f0       	breq	.+28     	; 0x1906 <xQueueGiveFromISR+0x86>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    18ea:	89 85       	ldd	r24, Y+9	; 0x09
    18ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	51 f0       	breq	.+20     	; 0x1906 <xQueueGiveFromISR+0x86>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    18f2:	e9 85       	ldd	r30, Y+9	; 0x09
    18f4:	fa 85       	ldd	r31, Y+10	; 0x0a
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	80 83       	st	Z, r24
    18fa:	05 c0       	rjmp	.+10     	; 0x1906 <xQueueGiveFromISR+0x86>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	8f 5f       	subi	r24, 0xFF	; 255
    1900:	eb 81       	ldd	r30, Y+3	; 0x03
    1902:	fc 81       	ldd	r31, Y+4	; 0x04
    1904:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	8e 83       	std	Y+6, r24	; 0x06
    190a:	01 c0       	rjmp	.+2      	; 0x190e <xQueueGiveFromISR+0x8e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    190c:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    190e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1910:	2a 96       	adiw	r28, 0x0a	; 10
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	de bf       	out	0x3e, r29	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	cd bf       	out	0x3d, r28	; 61
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	61 97       	sbiw	r28, 0x11	; 17
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	9b 87       	std	Y+11, r25	; 0x0b
    1938:	8a 87       	std	Y+10, r24	; 0x0a
    193a:	7d 87       	std	Y+13, r23	; 0x0d
    193c:	6c 87       	std	Y+12, r22	; 0x0c
    193e:	5f 87       	std	Y+15, r21	; 0x0f
    1940:	4e 87       	std	Y+14, r20	; 0x0e
    1942:	28 8b       	std	Y+16, r18	; 0x10
BaseType_t xEntryTimeSet = pdFALSE;
    1944:	1e 82       	std	Y+6, r1	; 0x06
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1946:	8a 85       	ldd	r24, Y+10	; 0x0a
    1948:	9b 85       	ldd	r25, Y+11	; 0x0b
    194a:	9b 83       	std	Y+3, r25	; 0x03
    194c:	8a 83       	std	Y+2, r24	; 0x02
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1954:	ea 81       	ldd	r30, Y+2	; 0x02
    1956:	fb 81       	ldd	r31, Y+3	; 0x03
    1958:	82 8d       	ldd	r24, Z+26	; 0x1a
    195a:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	88 23       	and	r24, r24
    1960:	09 f4       	brne	.+2      	; 0x1964 <xQueueGenericReceive+0x42>
    1962:	49 c0       	rjmp	.+146    	; 0x19f6 <xQueueGenericReceive+0xd4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1964:	ea 81       	ldd	r30, Y+2	; 0x02
    1966:	fb 81       	ldd	r31, Y+3	; 0x03
    1968:	86 81       	ldd	r24, Z+6	; 0x06
    196a:	97 81       	ldd	r25, Z+7	; 0x07
    196c:	9d 83       	std	Y+5, r25	; 0x05
    196e:	8c 83       	std	Y+4, r24	; 0x04

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	9b 81       	ldd	r25, Y+3	; 0x03
    1974:	2c 85       	ldd	r18, Y+12	; 0x0c
    1976:	3d 85       	ldd	r19, Y+13	; 0x0d
    1978:	b9 01       	movw	r22, r18
    197a:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    197e:	88 89       	ldd	r24, Y+16	; 0x10
    1980:	88 23       	and	r24, r24
    1982:	01 f5       	brne	.+64     	; 0x19c4 <xQueueGenericReceive+0xa2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	81 50       	subi	r24, 0x01	; 1
    1988:	ea 81       	ldd	r30, Y+2	; 0x02
    198a:	fb 81       	ldd	r31, Y+3	; 0x03
    198c:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    198e:	ea 81       	ldd	r30, Y+2	; 0x02
    1990:	fb 81       	ldd	r31, Y+3	; 0x03
    1992:	80 81       	ld	r24, Z
    1994:	91 81       	ldd	r25, Z+1	; 0x01
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	31 f4       	brne	.+12     	; 0x19a6 <xQueueGenericReceive+0x84>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    199a:	0e 94 82 1c 	call	0x3904	; 0x3904 <pvTaskIncrementMutexHeldCount>
    199e:	ea 81       	ldd	r30, Y+2	; 0x02
    19a0:	fb 81       	ldd	r31, Y+3	; 0x03
    19a2:	93 83       	std	Z+3, r25	; 0x03
    19a4:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    19a6:	ea 81       	ldd	r30, Y+2	; 0x02
    19a8:	fb 81       	ldd	r31, Y+3	; 0x03
    19aa:	80 85       	ldd	r24, Z+8	; 0x08
    19ac:	88 23       	and	r24, r24
    19ae:	f1 f0       	breq	.+60     	; 0x19ec <xQueueGenericReceive+0xca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	9b 81       	ldd	r25, Y+3	; 0x03
    19b4:	08 96       	adiw	r24, 0x08	; 8
    19b6:	0e 94 1b 19 	call	0x3236	; 0x3236 <xTaskRemoveFromEventList>
    19ba:	88 23       	and	r24, r24
    19bc:	b9 f0       	breq	.+46     	; 0x19ec <xQueueGenericReceive+0xca>
						{
							queueYIELD_IF_USING_PREEMPTION();
    19be:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vPortYield>
    19c2:	14 c0       	rjmp	.+40     	; 0x19ec <xQueueGenericReceive+0xca>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    19c4:	ea 81       	ldd	r30, Y+2	; 0x02
    19c6:	fb 81       	ldd	r31, Y+3	; 0x03
    19c8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ca:	9d 81       	ldd	r25, Y+5	; 0x05
    19cc:	97 83       	std	Z+7, r25	; 0x07
    19ce:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    19d0:	ea 81       	ldd	r30, Y+2	; 0x02
    19d2:	fb 81       	ldd	r31, Y+3	; 0x03
    19d4:	81 89       	ldd	r24, Z+17	; 0x11
    19d6:	88 23       	and	r24, r24
    19d8:	49 f0       	breq	.+18     	; 0x19ec <xQueueGenericReceive+0xca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	9b 81       	ldd	r25, Y+3	; 0x03
    19de:	41 96       	adiw	r24, 0x11	; 17
    19e0:	0e 94 1b 19 	call	0x3236	; 0x3236 <xTaskRemoveFromEventList>
    19e4:	88 23       	and	r24, r24
    19e6:	11 f0       	breq	.+4      	; 0x19ec <xQueueGenericReceive+0xca>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    19e8:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    19ec:	0f 90       	pop	r0
    19ee:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	89 8b       	std	Y+17, r24	; 0x11
    19f4:	74 c0       	rjmp	.+232    	; 0x1ade <xQueueGenericReceive+0x1bc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    19f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    19f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    19fa:	00 97       	sbiw	r24, 0x00	; 0
    19fc:	21 f4       	brne	.+8      	; 0x1a06 <xQueueGenericReceive+0xe4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    19fe:	0f 90       	pop	r0
    1a00:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1a02:	19 8a       	std	Y+17, r1	; 0x11
    1a04:	6c c0       	rjmp	.+216    	; 0x1ade <xQueueGenericReceive+0x1bc>
				}
				else if( xEntryTimeSet == pdFALSE )
    1a06:	8e 81       	ldd	r24, Y+6	; 0x06
    1a08:	88 23       	and	r24, r24
    1a0a:	31 f4       	brne	.+12     	; 0x1a18 <xQueueGenericReceive+0xf6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	07 96       	adiw	r24, 0x07	; 7
    1a10:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	8e 83       	std	Y+6, r24	; 0x06
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1a18:	0f 90       	pop	r0
    1a1a:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1a1c:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	0f 92       	push	r0
    1a26:	ea 81       	ldd	r30, Y+2	; 0x02
    1a28:	fb 81       	ldd	r31, Y+3	; 0x03
    1a2a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a2c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a2e:	19 f4       	brne	.+6      	; 0x1a36 <xQueueGenericReceive+0x114>
    1a30:	ea 81       	ldd	r30, Y+2	; 0x02
    1a32:	fb 81       	ldd	r31, Y+3	; 0x03
    1a34:	15 8e       	std	Z+29, r1	; 0x1d
    1a36:	ea 81       	ldd	r30, Y+2	; 0x02
    1a38:	fb 81       	ldd	r31, Y+3	; 0x03
    1a3a:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a3c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a3e:	19 f4       	brne	.+6      	; 0x1a46 <xQueueGenericReceive+0x124>
    1a40:	ea 81       	ldd	r30, Y+2	; 0x02
    1a42:	fb 81       	ldd	r31, Y+3	; 0x03
    1a44:	16 8e       	std	Z+30, r1	; 0x1e
    1a46:	0f 90       	pop	r0
    1a48:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	07 96       	adiw	r24, 0x07	; 7
    1a4e:	9e 01       	movw	r18, r28
    1a50:	22 5f       	subi	r18, 0xF2	; 242
    1a52:	3f 4f       	sbci	r19, 0xFF	; 255
    1a54:	b9 01       	movw	r22, r18
    1a56:	0e 94 04 1a 	call	0x3408	; 0x3408 <xTaskCheckForTimeOut>
    1a5a:	88 23       	and	r24, r24
    1a5c:	91 f5       	brne	.+100    	; 0x1ac2 <xQueueGenericReceive+0x1a0>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	9b 81       	ldd	r25, Y+3	; 0x03
    1a62:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <prvIsQueueEmpty>
    1a66:	88 23       	and	r24, r24
    1a68:	29 f1       	breq	.+74     	; 0x1ab4 <xQueueGenericReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1a6a:	ea 81       	ldd	r30, Y+2	; 0x02
    1a6c:	fb 81       	ldd	r31, Y+3	; 0x03
    1a6e:	80 81       	ld	r24, Z
    1a70:	91 81       	ldd	r25, Z+1	; 0x01
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	59 f4       	brne	.+22     	; 0x1a8c <xQueueGenericReceive+0x16a>
					{
						taskENTER_CRITICAL();
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1a7c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a7e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a80:	82 81       	ldd	r24, Z+2	; 0x02
    1a82:	93 81       	ldd	r25, Z+3	; 0x03
    1a84:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    1a88:	0f 90       	pop	r0
    1a8a:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a90:	41 96       	adiw	r24, 0x11	; 17
    1a92:	2e 85       	ldd	r18, Y+14	; 0x0e
    1a94:	3f 85       	ldd	r19, Y+15	; 0x0f
    1a96:	b9 01       	movw	r22, r18
    1a98:	0e 94 c9 18 	call	0x3192	; 0x3192 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa0:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1aa4:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <xTaskResumeAll>
    1aa8:	88 23       	and	r24, r24
    1aaa:	09 f0       	breq	.+2      	; 0x1aae <xQueueGenericReceive+0x18c>
    1aac:	50 cf       	rjmp	.-352    	; 0x194e <xQueueGenericReceive+0x2c>
				{
					portYIELD_WITHIN_API();
    1aae:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vPortYield>
    1ab2:	4d cf       	rjmp	.-358    	; 0x194e <xQueueGenericReceive+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab8:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1abc:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <xTaskResumeAll>
    1ac0:	46 cf       	rjmp	.-372    	; 0x194e <xQueueGenericReceive+0x2c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac6:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1aca:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad2:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <prvIsQueueEmpty>
    1ad6:	88 23       	and	r24, r24
    1ad8:	09 f4       	brne	.+2      	; 0x1adc <xQueueGenericReceive+0x1ba>
    1ada:	39 cf       	rjmp	.-398    	; 0x194e <xQueueGenericReceive+0x2c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    1adc:	19 8a       	std	Y+17, r1	; 0x11
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    1ade:	89 89       	ldd	r24, Y+17	; 0x11
}
    1ae0:	61 96       	adiw	r28, 0x11	; 17
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    1afa:	2c 97       	sbiw	r28, 0x0c	; 12
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	de bf       	out	0x3e, r29	; 62
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	cd bf       	out	0x3d, r28	; 61
    1b06:	98 87       	std	Y+8, r25	; 0x08
    1b08:	8f 83       	std	Y+7, r24	; 0x07
    1b0a:	7a 87       	std	Y+10, r23	; 0x0a
    1b0c:	69 87       	std	Y+9, r22	; 0x09
    1b0e:	5c 87       	std	Y+12, r21	; 0x0c
    1b10:	4b 87       	std	Y+11, r20	; 0x0b
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1b12:	8f 81       	ldd	r24, Y+7	; 0x07
    1b14:	98 85       	ldd	r25, Y+8	; 0x08
    1b16:	9c 83       	std	Y+4, r25	; 0x04
    1b18:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1b1a:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1b1c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b1e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b20:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b22:	8a 83       	std	Y+2, r24	; 0x02

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	88 23       	and	r24, r24
    1b28:	81 f1       	breq	.+96     	; 0x1b8a <xQueueReceiveFromISR+0x98>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    1b2a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b2c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b2e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b30:	89 83       	std	Y+1, r24	; 0x01

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	9c 81       	ldd	r25, Y+4	; 0x04
    1b36:	29 85       	ldd	r18, Y+9	; 0x09
    1b38:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b3a:	b9 01       	movw	r22, r18
    1b3c:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	81 50       	subi	r24, 0x01	; 1
    1b44:	eb 81       	ldd	r30, Y+3	; 0x03
    1b46:	fc 81       	ldd	r31, Y+4	; 0x04
    1b48:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	8f 3f       	cpi	r24, 0xFF	; 255
    1b4e:	a9 f4       	brne	.+42     	; 0x1b7a <xQueueReceiveFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1b50:	eb 81       	ldd	r30, Y+3	; 0x03
    1b52:	fc 81       	ldd	r31, Y+4	; 0x04
    1b54:	80 85       	ldd	r24, Z+8	; 0x08
    1b56:	88 23       	and	r24, r24
    1b58:	a9 f0       	breq	.+42     	; 0x1b84 <xQueueReceiveFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5e:	08 96       	adiw	r24, 0x08	; 8
    1b60:	0e 94 1b 19 	call	0x3236	; 0x3236 <xTaskRemoveFromEventList>
    1b64:	88 23       	and	r24, r24
    1b66:	71 f0       	breq	.+28     	; 0x1b84 <xQueueReceiveFromISR+0x92>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    1b68:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b6a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	51 f0       	breq	.+20     	; 0x1b84 <xQueueReceiveFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    1b70:	eb 85       	ldd	r30, Y+11	; 0x0b
    1b72:	fc 85       	ldd	r31, Y+12	; 0x0c
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	80 83       	st	Z, r24
    1b78:	05 c0       	rjmp	.+10     	; 0x1b84 <xQueueReceiveFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	8f 5f       	subi	r24, 0xFF	; 255
    1b7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b80:	fc 81       	ldd	r31, Y+4	; 0x04
    1b82:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	8e 83       	std	Y+6, r24	; 0x06
    1b88:	01 c0       	rjmp	.+2      	; 0x1b8c <xQueueReceiveFromISR+0x9a>
		}
		else
		{
			xReturn = pdFAIL;
    1b8a:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1b8c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1b8e:	2c 96       	adiw	r28, 0x0c	; 12
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	de bf       	out	0x3e, r29	; 62
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	cd bf       	out	0x3d, r28	; 61
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	08 95       	ret

00001ba0 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
    1ba8:	2a 97       	sbiw	r28, 0x0a	; 10
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	f8 94       	cli
    1bae:	de bf       	out	0x3e, r29	; 62
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	cd bf       	out	0x3d, r28	; 61
    1bb4:	98 87       	std	Y+8, r25	; 0x08
    1bb6:	8f 83       	std	Y+7, r24	; 0x07
    1bb8:	7a 87       	std	Y+10, r23	; 0x0a
    1bba:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1bbc:	8f 81       	ldd	r24, Y+7	; 0x07
    1bbe:	98 85       	ldd	r25, Y+8	; 0x08
    1bc0:	9a 83       	std	Y+2, r25	; 0x02
    1bc2:	89 83       	std	Y+1, r24	; 0x01
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1bc4:	1d 82       	std	Y+5, r1	; 0x05
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1bc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bca:	82 8d       	ldd	r24, Z+26	; 0x1a
    1bcc:	88 23       	and	r24, r24
    1bce:	b1 f0       	breq	.+44     	; 0x1bfc <xQueuePeekFromISR+0x5c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1bd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd4:	86 81       	ldd	r24, Z+6	; 0x06
    1bd6:	97 81       	ldd	r25, Z+7	; 0x07
    1bd8:	9c 83       	std	Y+4, r25	; 0x04
    1bda:	8b 83       	std	Y+3, r24	; 0x03
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02
    1be0:	29 85       	ldd	r18, Y+9	; 0x09
    1be2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1be4:	b9 01       	movw	r22, r18
    1be6:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1bea:	e9 81       	ldd	r30, Y+1	; 0x01
    1bec:	fa 81       	ldd	r31, Y+2	; 0x02
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	97 83       	std	Z+7, r25	; 0x07
    1bf4:	86 83       	std	Z+6, r24	; 0x06

			xReturn = pdPASS;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	8e 83       	std	Y+6, r24	; 0x06
    1bfa:	01 c0       	rjmp	.+2      	; 0x1bfe <xQueuePeekFromISR+0x5e>
		}
		else
		{
			xReturn = pdFAIL;
    1bfc:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1bfe:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1c00:	2a 96       	adiw	r28, 0x0a	; 10
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <uxQueueMessagesWaiting+0x6>
    1c18:	0f 92       	push	r0
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	9b 83       	std	Y+3, r25	; 0x03
    1c20:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    1c28:	ea 81       	ldd	r30, Y+2	; 0x02
    1c2a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c2c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c2e:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    1c30:	0f 90       	pop	r0
    1c32:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <uxQueueSpacesAvailable+0x6>
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <uxQueueSpacesAvailable+0x8>
    1c4a:	0f 92       	push	r0
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	9d 83       	std	Y+5, r25	; 0x05
    1c52:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    1c54:	8c 81       	ldd	r24, Y+4	; 0x04
    1c56:	9d 81       	ldd	r25, Y+5	; 0x05
    1c58:	9a 83       	std	Y+2, r25	; 0x02
    1c5a:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    1c62:	e9 81       	ldd	r30, Y+1	; 0x01
    1c64:	fa 81       	ldd	r31, Y+2	; 0x02
    1c66:	93 8d       	ldd	r25, Z+27	; 0x1b
    1c68:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c6e:	29 2f       	mov	r18, r25
    1c70:	28 1b       	sub	r18, r24
    1c72:	82 2f       	mov	r24, r18
    1c74:	8b 83       	std	Y+3, r24	; 0x03
	}
	taskEXIT_CRITICAL();
    1c76:	0f 90       	pop	r0
    1c78:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <uxQueueMessagesWaitingFromISR+0x6>
    1c92:	0f 92       	push	r0
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	9b 83       	std	Y+3, r25	; 0x03
    1c9a:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    1c9c:	ea 81       	ldd	r30, Y+2	; 0x02
    1c9e:	fb 81       	ldd	r31, Y+3	; 0x03
    1ca0:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ca2:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <vQueueDelete+0x6>
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <vQueueDelete+0x8>
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	9c 83       	std	Y+4, r25	; 0x04
    1cc0:	8b 83       	std	Y+3, r24	; 0x03
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc6:	9a 83       	std	Y+2, r25	; 0x02
    1cc8:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cce:	0e 94 bb 10 	call	0x2176	; 0x2176 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd6:	0e 94 2c 05 	call	0xa58	; 0xa58 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	27 97       	sbiw	r28, 0x07	; 7
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	cd bf       	out	0x3d, r28	; 61
    1cfc:	9c 83       	std	Y+4, r25	; 0x04
    1cfe:	8b 83       	std	Y+3, r24	; 0x03
    1d00:	7e 83       	std	Y+6, r23	; 0x06
    1d02:	6d 83       	std	Y+5, r22	; 0x05
    1d04:	4f 83       	std	Y+7, r20	; 0x07
BaseType_t xReturn = pdFALSE;
    1d06:	1a 82       	std	Y+2, r1	; 0x02
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1d08:	eb 81       	ldd	r30, Y+3	; 0x03
    1d0a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d0c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d0e:	89 83       	std	Y+1, r24	; 0x01

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    1d10:	eb 81       	ldd	r30, Y+3	; 0x03
    1d12:	fc 81       	ldd	r31, Y+4	; 0x04
    1d14:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d16:	88 23       	and	r24, r24
    1d18:	99 f4       	brne	.+38     	; 0x1d40 <prvCopyDataToQueue+0x58>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1d1a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d1c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d1e:	80 81       	ld	r24, Z
    1d20:	91 81       	ldd	r25, Z+1	; 0x01
    1d22:	00 97       	sbiw	r24, 0x00	; 0
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <prvCopyDataToQueue+0x40>
    1d26:	89 c0       	rjmp	.+274    	; 0x1e3a <prvCopyDataToQueue+0x152>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    1d28:	eb 81       	ldd	r30, Y+3	; 0x03
    1d2a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d2c:	82 81       	ldd	r24, Z+2	; 0x02
    1d2e:	93 81       	ldd	r25, Z+3	; 0x03
    1d30:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <xTaskPriorityDisinherit>
    1d34:	8a 83       	std	Y+2, r24	; 0x02
				pxQueue->pxMutexHolder = NULL;
    1d36:	eb 81       	ldd	r30, Y+3	; 0x03
    1d38:	fc 81       	ldd	r31, Y+4	; 0x04
    1d3a:	13 82       	std	Z+3, r1	; 0x03
    1d3c:	12 82       	std	Z+2, r1	; 0x02
    1d3e:	7d c0       	rjmp	.+250    	; 0x1e3a <prvCopyDataToQueue+0x152>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    1d40:	8f 81       	ldd	r24, Y+7	; 0x07
    1d42:	88 23       	and	r24, r24
    1d44:	99 f5       	brne	.+102    	; 0x1dac <prvCopyDataToQueue+0xc4>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    1d46:	eb 81       	ldd	r30, Y+3	; 0x03
    1d48:	fc 81       	ldd	r31, Y+4	; 0x04
    1d4a:	64 81       	ldd	r22, Z+4	; 0x04
    1d4c:	75 81       	ldd	r23, Z+5	; 0x05
    1d4e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d50:	fc 81       	ldd	r31, Y+4	; 0x04
    1d52:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d54:	48 2f       	mov	r20, r24
    1d56:	50 e0       	ldi	r21, 0x00	; 0
    1d58:	2d 81       	ldd	r18, Y+5	; 0x05
    1d5a:	3e 81       	ldd	r19, Y+6	; 0x06
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	b9 01       	movw	r22, r18
    1d60:	0e 94 c0 20 	call	0x4180	; 0x4180 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1d64:	eb 81       	ldd	r30, Y+3	; 0x03
    1d66:	fc 81       	ldd	r31, Y+4	; 0x04
    1d68:	24 81       	ldd	r18, Z+4	; 0x04
    1d6a:	35 81       	ldd	r19, Z+5	; 0x05
    1d6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d70:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d72:	88 2f       	mov	r24, r24
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	82 0f       	add	r24, r18
    1d78:	93 1f       	adc	r25, r19
    1d7a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d7c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d7e:	95 83       	std	Z+5, r25	; 0x05
    1d80:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1d82:	eb 81       	ldd	r30, Y+3	; 0x03
    1d84:	fc 81       	ldd	r31, Y+4	; 0x04
    1d86:	24 81       	ldd	r18, Z+4	; 0x04
    1d88:	35 81       	ldd	r19, Z+5	; 0x05
    1d8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d8e:	82 81       	ldd	r24, Z+2	; 0x02
    1d90:	93 81       	ldd	r25, Z+3	; 0x03
    1d92:	28 17       	cp	r18, r24
    1d94:	39 07       	cpc	r19, r25
    1d96:	08 f4       	brcc	.+2      	; 0x1d9a <prvCopyDataToQueue+0xb2>
    1d98:	50 c0       	rjmp	.+160    	; 0x1e3a <prvCopyDataToQueue+0x152>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1d9a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d9c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d9e:	80 81       	ld	r24, Z
    1da0:	91 81       	ldd	r25, Z+1	; 0x01
    1da2:	eb 81       	ldd	r30, Y+3	; 0x03
    1da4:	fc 81       	ldd	r31, Y+4	; 0x04
    1da6:	95 83       	std	Z+5, r25	; 0x05
    1da8:	84 83       	std	Z+4, r24	; 0x04
    1daa:	47 c0       	rjmp	.+142    	; 0x1e3a <prvCopyDataToQueue+0x152>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1dac:	eb 81       	ldd	r30, Y+3	; 0x03
    1dae:	fc 81       	ldd	r31, Y+4	; 0x04
    1db0:	66 81       	ldd	r22, Z+6	; 0x06
    1db2:	77 81       	ldd	r23, Z+7	; 0x07
    1db4:	eb 81       	ldd	r30, Y+3	; 0x03
    1db6:	fc 81       	ldd	r31, Y+4	; 0x04
    1db8:	84 8d       	ldd	r24, Z+28	; 0x1c
    1dba:	48 2f       	mov	r20, r24
    1dbc:	50 e0       	ldi	r21, 0x00	; 0
    1dbe:	2d 81       	ldd	r18, Y+5	; 0x05
    1dc0:	3e 81       	ldd	r19, Y+6	; 0x06
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	b9 01       	movw	r22, r18
    1dc6:	0e 94 c0 20 	call	0x4180	; 0x4180 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    1dca:	eb 81       	ldd	r30, Y+3	; 0x03
    1dcc:	fc 81       	ldd	r31, Y+4	; 0x04
    1dce:	26 81       	ldd	r18, Z+6	; 0x06
    1dd0:	37 81       	ldd	r19, Z+7	; 0x07
    1dd2:	eb 81       	ldd	r30, Y+3	; 0x03
    1dd4:	fc 81       	ldd	r31, Y+4	; 0x04
    1dd6:	84 8d       	ldd	r24, Z+28	; 0x1c
    1dd8:	88 2f       	mov	r24, r24
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	90 95       	com	r25
    1dde:	81 95       	neg	r24
    1de0:	9f 4f       	sbci	r25, 0xFF	; 255
    1de2:	82 0f       	add	r24, r18
    1de4:	93 1f       	adc	r25, r19
    1de6:	eb 81       	ldd	r30, Y+3	; 0x03
    1de8:	fc 81       	ldd	r31, Y+4	; 0x04
    1dea:	97 83       	std	Z+7, r25	; 0x07
    1dec:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1dee:	eb 81       	ldd	r30, Y+3	; 0x03
    1df0:	fc 81       	ldd	r31, Y+4	; 0x04
    1df2:	26 81       	ldd	r18, Z+6	; 0x06
    1df4:	37 81       	ldd	r19, Z+7	; 0x07
    1df6:	eb 81       	ldd	r30, Y+3	; 0x03
    1df8:	fc 81       	ldd	r31, Y+4	; 0x04
    1dfa:	80 81       	ld	r24, Z
    1dfc:	91 81       	ldd	r25, Z+1	; 0x01
    1dfe:	28 17       	cp	r18, r24
    1e00:	39 07       	cpc	r19, r25
    1e02:	90 f4       	brcc	.+36     	; 0x1e28 <prvCopyDataToQueue+0x140>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1e04:	eb 81       	ldd	r30, Y+3	; 0x03
    1e06:	fc 81       	ldd	r31, Y+4	; 0x04
    1e08:	22 81       	ldd	r18, Z+2	; 0x02
    1e0a:	33 81       	ldd	r19, Z+3	; 0x03
    1e0c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e0e:	fc 81       	ldd	r31, Y+4	; 0x04
    1e10:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e12:	88 2f       	mov	r24, r24
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	90 95       	com	r25
    1e18:	81 95       	neg	r24
    1e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1c:	82 0f       	add	r24, r18
    1e1e:	93 1f       	adc	r25, r19
    1e20:	eb 81       	ldd	r30, Y+3	; 0x03
    1e22:	fc 81       	ldd	r31, Y+4	; 0x04
    1e24:	97 83       	std	Z+7, r25	; 0x07
    1e26:	86 83       	std	Z+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    1e28:	8f 81       	ldd	r24, Y+7	; 0x07
    1e2a:	82 30       	cpi	r24, 0x02	; 2
    1e2c:	31 f4       	brne	.+12     	; 0x1e3a <prvCopyDataToQueue+0x152>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	88 23       	and	r24, r24
    1e32:	19 f0       	breq	.+6      	; 0x1e3a <prvCopyDataToQueue+0x152>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	81 50       	subi	r24, 0x01	; 1
    1e38:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	8f 5f       	subi	r24, 0xFF	; 255
    1e3e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e40:	fc 81       	ldd	r31, Y+4	; 0x04
    1e42:	82 8f       	std	Z+26, r24	; 0x1a

	return xReturn;
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1e46:	27 96       	adiw	r28, 0x07	; 7
    1e48:	0f b6       	in	r0, 0x3f	; 63
    1e4a:	f8 94       	cli
    1e4c:	de bf       	out	0x3e, r29	; 62
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	cd bf       	out	0x3d, r28	; 61
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <prvCopyDataFromQueue+0x6>
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <prvCopyDataFromQueue+0x8>
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	9a 83       	std	Y+2, r25	; 0x02
    1e66:	89 83       	std	Y+1, r24	; 0x01
    1e68:	7c 83       	std	Y+4, r23	; 0x04
    1e6a:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    1e6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e70:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e72:	88 23       	and	r24, r24
    1e74:	89 f1       	breq	.+98     	; 0x1ed8 <prvCopyDataFromQueue+0x80>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    1e76:	e9 81       	ldd	r30, Y+1	; 0x01
    1e78:	fa 81       	ldd	r31, Y+2	; 0x02
    1e7a:	26 81       	ldd	r18, Z+6	; 0x06
    1e7c:	37 81       	ldd	r19, Z+7	; 0x07
    1e7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e80:	fa 81       	ldd	r31, Y+2	; 0x02
    1e82:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e84:	88 2f       	mov	r24, r24
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	82 0f       	add	r24, r18
    1e8a:	93 1f       	adc	r25, r19
    1e8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e90:	97 83       	std	Z+7, r25	; 0x07
    1e92:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    1e94:	e9 81       	ldd	r30, Y+1	; 0x01
    1e96:	fa 81       	ldd	r31, Y+2	; 0x02
    1e98:	26 81       	ldd	r18, Z+6	; 0x06
    1e9a:	37 81       	ldd	r19, Z+7	; 0x07
    1e9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea0:	82 81       	ldd	r24, Z+2	; 0x02
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	28 17       	cp	r18, r24
    1ea6:	39 07       	cpc	r19, r25
    1ea8:	40 f0       	brcs	.+16     	; 0x1eba <prvCopyDataFromQueue+0x62>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    1eaa:	e9 81       	ldd	r30, Y+1	; 0x01
    1eac:	fa 81       	ldd	r31, Y+2	; 0x02
    1eae:	80 81       	ld	r24, Z
    1eb0:	91 81       	ldd	r25, Z+1	; 0x01
    1eb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb6:	97 83       	std	Z+7, r25	; 0x07
    1eb8:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    1eba:	e9 81       	ldd	r30, Y+1	; 0x01
    1ebc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ebe:	46 81       	ldd	r20, Z+6	; 0x06
    1ec0:	57 81       	ldd	r21, Z+7	; 0x07
    1ec2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec6:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed0:	ba 01       	movw	r22, r20
    1ed2:	a9 01       	movw	r20, r18
    1ed4:	0e 94 c0 20 	call	0x4180	; 0x4180 <memcpy>
	}
}
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	08 95       	ret

00001ee6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	00 d0       	rcall	.+0      	; 0x1eec <prvUnlockQueue+0x6>
    1eec:	00 d0       	rcall	.+0      	; 0x1eee <prvUnlockQueue+0x8>
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	9c 83       	std	Y+4, r25	; 0x04
    1ef4:	8b 83       	std	Y+3, r24	; 0x03

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
    1efc:	eb 81       	ldd	r30, Y+3	; 0x03
    1efe:	fc 81       	ldd	r31, Y+4	; 0x04
    1f00:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f02:	8a 83       	std	Y+2, r24	; 0x02
    1f04:	11 c0       	rjmp	.+34     	; 0x1f28 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1f06:	eb 81       	ldd	r30, Y+3	; 0x03
    1f08:	fc 81       	ldd	r31, Y+4	; 0x04
    1f0a:	81 89       	ldd	r24, Z+17	; 0x11
    1f0c:	88 23       	and	r24, r24
    1f0e:	79 f0       	breq	.+30     	; 0x1f2e <prvUnlockQueue+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	9c 81       	ldd	r25, Y+4	; 0x04
    1f14:	41 96       	adiw	r24, 0x11	; 17
    1f16:	0e 94 1b 19 	call	0x3236	; 0x3236 <xTaskRemoveFromEventList>
    1f1a:	88 23       	and	r24, r24
    1f1c:	11 f0       	breq	.+4      	; 0x1f22 <prvUnlockQueue+0x3c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    1f1e:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	81 50       	subi	r24, 0x01	; 1
    1f26:	8a 83       	std	Y+2, r24	; 0x02
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	18 16       	cp	r1, r24
    1f2c:	64 f3       	brlt	.-40     	; 0x1f06 <prvUnlockQueue+0x20>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    1f2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f30:	fc 81       	ldd	r31, Y+4	; 0x04
    1f32:	8f ef       	ldi	r24, 0xFF	; 255
    1f34:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    1f36:	0f 90       	pop	r0
    1f38:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
    1f40:	eb 81       	ldd	r30, Y+3	; 0x03
    1f42:	fc 81       	ldd	r31, Y+4	; 0x04
    1f44:	85 8d       	ldd	r24, Z+29	; 0x1d
    1f46:	89 83       	std	Y+1, r24	; 0x01
    1f48:	11 c0       	rjmp	.+34     	; 0x1f6c <prvUnlockQueue+0x86>

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1f4a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f4c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f4e:	80 85       	ldd	r24, Z+8	; 0x08
    1f50:	88 23       	and	r24, r24
    1f52:	79 f0       	breq	.+30     	; 0x1f72 <prvUnlockQueue+0x8c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	9c 81       	ldd	r25, Y+4	; 0x04
    1f58:	08 96       	adiw	r24, 0x08	; 8
    1f5a:	0e 94 1b 19 	call	0x3236	; 0x3236 <xTaskRemoveFromEventList>
    1f5e:	88 23       	and	r24, r24
    1f60:	11 f0       	breq	.+4      	; 0x1f66 <prvUnlockQueue+0x80>
				{
					vTaskMissedYield();
    1f62:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	81 50       	subi	r24, 0x01	; 1
    1f6a:	89 83       	std	Y+1, r24	; 0x01
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	18 16       	cp	r1, r24
    1f70:	64 f3       	brlt	.-40     	; 0x1f4a <prvUnlockQueue+0x64>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    1f72:	eb 81       	ldd	r30, Y+3	; 0x03
    1f74:	fc 81       	ldd	r31, Y+4	; 0x04
    1f76:	8f ef       	ldi	r24, 0xFF	; 255
    1f78:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    1f7a:	0f 90       	pop	r0
    1f7c:	0f be       	out	0x3f, r0	; 63
}
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	08 95       	ret

00001f8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	00 d0       	rcall	.+0      	; 0x1f92 <prvIsQueueEmpty+0x6>
    1f92:	0f 92       	push	r0
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	9b 83       	std	Y+3, r25	; 0x03
    1f9a:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1fa2:	ea 81       	ldd	r30, Y+2	; 0x02
    1fa4:	fb 81       	ldd	r31, Y+3	; 0x03
    1fa6:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fa8:	88 23       	and	r24, r24
    1faa:	19 f4       	brne	.+6      	; 0x1fb2 <prvIsQueueEmpty+0x26>
		{
			xReturn = pdTRUE;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	89 83       	std	Y+1, r24	; 0x01
    1fb0:	01 c0       	rjmp	.+2      	; 0x1fb4 <prvIsQueueEmpty+0x28>
		}
		else
		{
			xReturn = pdFALSE;
    1fb2:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    1fb4:	0f 90       	pop	r0
    1fb6:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	cf 91       	pop	r28
    1fc2:	df 91       	pop	r29
    1fc4:	08 95       	ret

00001fc6 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    1fc6:	df 93       	push	r29
    1fc8:	cf 93       	push	r28
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <xQueueIsQueueEmptyFromISR+0x6>
    1fcc:	0f 92       	push	r0
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	9b 83       	std	Y+3, r25	; 0x03
    1fd4:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    1fd6:	ea 81       	ldd	r30, Y+2	; 0x02
    1fd8:	fb 81       	ldd	r31, Y+3	; 0x03
    1fda:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fdc:	88 23       	and	r24, r24
    1fde:	19 f4       	brne	.+6      	; 0x1fe6 <xQueueIsQueueEmptyFromISR+0x20>
	{
		xReturn = pdTRUE;
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	89 83       	std	Y+1, r24	; 0x01
    1fe4:	01 c0       	rjmp	.+2      	; 0x1fe8 <xQueueIsQueueEmptyFromISR+0x22>
	}
	else
	{
		xReturn = pdFALSE;
    1fe6:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	08 95       	ret

00001ff6 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	00 d0       	rcall	.+0      	; 0x1ffc <prvIsQueueFull+0x6>
    1ffc:	0f 92       	push	r0
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
    2002:	9b 83       	std	Y+3, r25	; 0x03
    2004:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    200c:	ea 81       	ldd	r30, Y+2	; 0x02
    200e:	fb 81       	ldd	r31, Y+3	; 0x03
    2010:	92 8d       	ldd	r25, Z+26	; 0x1a
    2012:	ea 81       	ldd	r30, Y+2	; 0x02
    2014:	fb 81       	ldd	r31, Y+3	; 0x03
    2016:	83 8d       	ldd	r24, Z+27	; 0x1b
    2018:	98 17       	cp	r25, r24
    201a:	19 f4       	brne	.+6      	; 0x2022 <prvIsQueueFull+0x2c>
		{
			xReturn = pdTRUE;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	01 c0       	rjmp	.+2      	; 0x2024 <prvIsQueueFull+0x2e>
		}
		else
		{
			xReturn = pdFALSE;
    2022:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2024:	0f 90       	pop	r0
    2026:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2028:	89 81       	ldd	r24, Y+1	; 0x01
}
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	00 d0       	rcall	.+0      	; 0x203c <xQueueIsQueueFullFromISR+0x6>
    203c:	0f 92       	push	r0
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	9b 83       	std	Y+3, r25	; 0x03
    2044:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    2046:	ea 81       	ldd	r30, Y+2	; 0x02
    2048:	fb 81       	ldd	r31, Y+3	; 0x03
    204a:	92 8d       	ldd	r25, Z+26	; 0x1a
    204c:	ea 81       	ldd	r30, Y+2	; 0x02
    204e:	fb 81       	ldd	r31, Y+3	; 0x03
    2050:	83 8d       	ldd	r24, Z+27	; 0x1b
    2052:	98 17       	cp	r25, r24
    2054:	19 f4       	brne	.+6      	; 0x205c <xQueueIsQueueFullFromISR+0x26>
	{
		xReturn = pdTRUE;
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	89 83       	std	Y+1, r24	; 0x01
    205a:	01 c0       	rjmp	.+2      	; 0x205e <xQueueIsQueueFullFromISR+0x28>
	}
	else
	{
		xReturn = pdFALSE;
    205c:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    205e:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	00 d0       	rcall	.+0      	; 0x2072 <vQueueAddToRegistry+0x6>
    2072:	00 d0       	rcall	.+0      	; 0x2074 <vQueueAddToRegistry+0x8>
    2074:	0f 92       	push	r0
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	9b 83       	std	Y+3, r25	; 0x03
    207c:	8a 83       	std	Y+2, r24	; 0x02
    207e:	7d 83       	std	Y+5, r23	; 0x05
    2080:	6c 83       	std	Y+4, r22	; 0x04
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    2082:	19 82       	std	Y+1, r1	; 0x01
    2084:	2f c0       	rjmp	.+94     	; 0x20e4 <vQueueAddToRegistry+0x78>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	88 2f       	mov	r24, r24
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	88 0f       	add	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	fc 01       	movw	r30, r24
    2096:	e8 58       	subi	r30, 0x88	; 136
    2098:	fb 4f       	sbci	r31, 0xFB	; 251
    209a:	80 81       	ld	r24, Z
    209c:	91 81       	ldd	r25, Z+1	; 0x01
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	f1 f4       	brne	.+60     	; 0x20de <vQueueAddToRegistry+0x72>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	88 2f       	mov	r24, r24
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	88 0f       	add	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	fc 01       	movw	r30, r24
    20b2:	e8 58       	subi	r30, 0x88	; 136
    20b4:	fb 4f       	sbci	r31, 0xFB	; 251
    20b6:	8c 81       	ldd	r24, Y+4	; 0x04
    20b8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ba:	91 83       	std	Z+1, r25	; 0x01
    20bc:	80 83       	st	Z, r24
				xQueueRegistry[ ux ].xHandle = xQueue;
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	88 2f       	mov	r24, r24
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	01 96       	adiw	r24, 0x01	; 1
    20ca:	88 0f       	add	r24, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	fc 01       	movw	r30, r24
    20d0:	e8 58       	subi	r30, 0x88	; 136
    20d2:	fb 4f       	sbci	r31, 0xFB	; 251
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	9b 81       	ldd	r25, Y+3	; 0x03
    20d8:	91 83       	std	Z+1, r25	; 0x01
    20da:	80 83       	st	Z, r24
    20dc:	06 c0       	rjmp	.+12     	; 0x20ea <vQueueAddToRegistry+0x7e>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	8f 5f       	subi	r24, 0xFF	; 255
    20e2:	89 83       	std	Y+1, r24	; 0x01
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	88 30       	cpi	r24, 0x08	; 8
    20e8:	70 f2       	brcs	.-100    	; 0x2086 <vQueueAddToRegistry+0x1a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <pcQueueGetName>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <pcQueueGetName+0x6>
    2100:	00 d0       	rcall	.+0      	; 0x2102 <pcQueueGetName+0x8>
    2102:	0f 92       	push	r0
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	9d 83       	std	Y+5, r25	; 0x05
    210a:	8c 83       	std	Y+4, r24	; 0x04
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    210c:	1a 82       	std	Y+2, r1	; 0x02
    210e:	19 82       	std	Y+1, r1	; 0x01

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    2110:	1b 82       	std	Y+3, r1	; 0x03
    2112:	24 c0       	rjmp	.+72     	; 0x215c <pcQueueGetName+0x62>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	88 2f       	mov	r24, r24
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	88 0f       	add	r24, r24
    211c:	99 1f       	adc	r25, r25
    211e:	01 96       	adiw	r24, 0x01	; 1
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	fc 01       	movw	r30, r24
    2126:	e8 58       	subi	r30, 0x88	; 136
    2128:	fb 4f       	sbci	r31, 0xFB	; 251
    212a:	20 81       	ld	r18, Z
    212c:	31 81       	ldd	r19, Z+1	; 0x01
    212e:	8c 81       	ldd	r24, Y+4	; 0x04
    2130:	9d 81       	ldd	r25, Y+5	; 0x05
    2132:	28 17       	cp	r18, r24
    2134:	39 07       	cpc	r19, r25
    2136:	79 f4       	brne	.+30     	; 0x2156 <pcQueueGetName+0x5c>
			{
				pcReturn = xQueueRegistry[ ux ].pcQueueName;
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	88 2f       	mov	r24, r24
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	88 0f       	add	r24, r24
    2144:	99 1f       	adc	r25, r25
    2146:	fc 01       	movw	r30, r24
    2148:	e8 58       	subi	r30, 0x88	; 136
    214a:	fb 4f       	sbci	r31, 0xFB	; 251
    214c:	80 81       	ld	r24, Z
    214e:	91 81       	ldd	r25, Z+1	; 0x01
    2150:	9a 83       	std	Y+2, r25	; 0x02
    2152:	89 83       	std	Y+1, r24	; 0x01
    2154:	06 c0       	rjmp	.+12     	; 0x2162 <pcQueueGetName+0x68>
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	8f 5f       	subi	r24, 0xFF	; 255
    215a:	8b 83       	std	Y+3, r24	; 0x03
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	88 30       	cpi	r24, 0x08	; 8
    2160:	c8 f2       	brcs	.-78     	; 0x2114 <pcQueueGetName+0x1a>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return pcReturn;
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	00 d0       	rcall	.+0      	; 0x217c <vQueueUnregisterQueue+0x6>
    217c:	0f 92       	push	r0
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	9b 83       	std	Y+3, r25	; 0x03
    2184:	8a 83       	std	Y+2, r24	; 0x02
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    2186:	19 82       	std	Y+1, r1	; 0x01
    2188:	2f c0       	rjmp	.+94     	; 0x21e8 <vQueueUnregisterQueue+0x72>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	88 2f       	mov	r24, r24
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	01 96       	adiw	r24, 0x01	; 1
    2196:	88 0f       	add	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	fc 01       	movw	r30, r24
    219c:	e8 58       	subi	r30, 0x88	; 136
    219e:	fb 4f       	sbci	r31, 0xFB	; 251
    21a0:	20 81       	ld	r18, Z
    21a2:	31 81       	ldd	r19, Z+1	; 0x01
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	9b 81       	ldd	r25, Y+3	; 0x03
    21a8:	28 17       	cp	r18, r24
    21aa:	39 07       	cpc	r19, r25
    21ac:	d1 f4       	brne	.+52     	; 0x21e2 <vQueueUnregisterQueue+0x6c>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	88 2f       	mov	r24, r24
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	88 0f       	add	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	fc 01       	movw	r30, r24
    21be:	e8 58       	subi	r30, 0x88	; 136
    21c0:	fb 4f       	sbci	r31, 0xFB	; 251
    21c2:	11 82       	std	Z+1, r1	; 0x01
    21c4:	10 82       	st	Z, r1

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	88 2f       	mov	r24, r24
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	88 0f       	add	r24, r24
    21ce:	99 1f       	adc	r25, r25
    21d0:	01 96       	adiw	r24, 0x01	; 1
    21d2:	88 0f       	add	r24, r24
    21d4:	99 1f       	adc	r25, r25
    21d6:	fc 01       	movw	r30, r24
    21d8:	e8 58       	subi	r30, 0x88	; 136
    21da:	fb 4f       	sbci	r31, 0xFB	; 251
    21dc:	11 82       	std	Z+1, r1	; 0x01
    21de:	10 82       	st	Z, r1
    21e0:	06 c0       	rjmp	.+12     	; 0x21ee <vQueueUnregisterQueue+0x78>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	8f 5f       	subi	r24, 0xFF	; 255
    21e6:	89 83       	std	Y+1, r24	; 0x01
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	88 30       	cpi	r24, 0x08	; 8
    21ec:	70 f2       	brcs	.-100    	; 0x218a <vQueueUnregisterQueue+0x14>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	08 95       	ret

000021fa <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    21fa:	8f 92       	push	r8
    21fc:	9f 92       	push	r9
    21fe:	af 92       	push	r10
    2200:	bf 92       	push	r11
    2202:	cf 92       	push	r12
    2204:	df 92       	push	r13
    2206:	ef 92       	push	r14
    2208:	ff 92       	push	r15
    220a:	0f 93       	push	r16
    220c:	1f 93       	push	r17
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	60 97       	sbiw	r28, 0x10	; 16
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61
    2222:	9f 83       	std	Y+7, r25	; 0x07
    2224:	8e 83       	std	Y+6, r24	; 0x06
    2226:	79 87       	std	Y+9, r23	; 0x09
    2228:	68 87       	std	Y+8, r22	; 0x08
    222a:	5b 87       	std	Y+11, r21	; 0x0b
    222c:	4a 87       	std	Y+10, r20	; 0x0a
    222e:	3d 87       	std	Y+13, r19	; 0x0d
    2230:	2c 87       	std	Y+12, r18	; 0x0c
    2232:	0e 87       	std	Y+14, r16	; 0x0e
    2234:	f8 8a       	std	Y+16, r15	; 0x10
    2236:	ef 86       	std	Y+15, r14	; 0x0f
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2238:	8a 85       	ldd	r24, Y+10	; 0x0a
    223a:	9b 85       	ldd	r25, Y+11	; 0x0b
    223c:	0e 94 44 04 	call	0x888	; 0x888 <pvPortMalloc>
    2240:	9a 83       	std	Y+2, r25	; 0x02
    2242:	89 83       	std	Y+1, r24	; 0x01

			if( pxStack != NULL )
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	00 97       	sbiw	r24, 0x00	; 0
    224a:	b1 f0       	breq	.+44     	; 0x2278 <xTaskCreate+0x7e>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    224c:	8a e2       	ldi	r24, 0x2A	; 42
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	0e 94 44 04 	call	0x888	; 0x888 <pvPortMalloc>
    2254:	9d 83       	std	Y+5, r25	; 0x05
    2256:	8c 83       	std	Y+4, r24	; 0x04

				if( pxNewTCB != NULL )
    2258:	8c 81       	ldd	r24, Y+4	; 0x04
    225a:	9d 81       	ldd	r25, Y+5	; 0x05
    225c:	00 97       	sbiw	r24, 0x00	; 0
    225e:	39 f0       	breq	.+14     	; 0x226e <xTaskCreate+0x74>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    2260:	ec 81       	ldd	r30, Y+4	; 0x04
    2262:	fd 81       	ldd	r31, Y+5	; 0x05
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	9a 81       	ldd	r25, Y+2	; 0x02
    2268:	90 8f       	std	Z+24, r25	; 0x18
    226a:	87 8b       	std	Z+23, r24	; 0x17
    226c:	07 c0       	rjmp	.+14     	; 0x227c <xTaskCreate+0x82>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	9a 81       	ldd	r25, Y+2	; 0x02
    2272:	0e 94 2c 05 	call	0xa58	; 0xa58 <vPortFree>
    2276:	02 c0       	rjmp	.+4      	; 0x227c <xTaskCreate+0x82>
				}
			}
			else
			{
				pxNewTCB = NULL;
    2278:	1d 82       	std	Y+5, r1	; 0x05
    227a:	1c 82       	std	Y+4, r1	; 0x04
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    227c:	8c 81       	ldd	r24, Y+4	; 0x04
    227e:	9d 81       	ldd	r25, Y+5	; 0x05
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	e9 f0       	breq	.+58     	; 0x22be <xTaskCreate+0xc4>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    2284:	8a 85       	ldd	r24, Y+10	; 0x0a
    2286:	9b 85       	ldd	r25, Y+11	; 0x0b
    2288:	9c 01       	movw	r18, r24
    228a:	40 e0       	ldi	r20, 0x00	; 0
    228c:	50 e0       	ldi	r21, 0x00	; 0
    228e:	8e 81       	ldd	r24, Y+6	; 0x06
    2290:	9f 81       	ldd	r25, Y+7	; 0x07
    2292:	68 85       	ldd	r22, Y+8	; 0x08
    2294:	79 85       	ldd	r23, Y+9	; 0x09
    2296:	ec 85       	ldd	r30, Y+12	; 0x0c
    2298:	fd 85       	ldd	r31, Y+13	; 0x0d
    229a:	af 85       	ldd	r26, Y+15	; 0x0f
    229c:	b8 89       	ldd	r27, Y+16	; 0x10
    229e:	ac 80       	ldd	r10, Y+4	; 0x04
    22a0:	bd 80       	ldd	r11, Y+5	; 0x05
    22a2:	8f 01       	movw	r16, r30
    22a4:	ee 84       	ldd	r14, Y+14	; 0x0e
    22a6:	6d 01       	movw	r12, r26
    22a8:	88 24       	eor	r8, r8
    22aa:	99 24       	eor	r9, r9
    22ac:	0e 94 75 11 	call	0x22ea	; 0x22ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    22b0:	8c 81       	ldd	r24, Y+4	; 0x04
    22b2:	9d 81       	ldd	r25, Y+5	; 0x05
    22b4:	0e 94 30 12 	call	0x2460	; 0x2460 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	8b 83       	std	Y+3, r24	; 0x03
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <xTaskCreate+0xc8>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    22be:	8f ef       	ldi	r24, 0xFF	; 255
    22c0:	8b 83       	std	Y+3, r24	; 0x03
		}

		return xReturn;
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    22c4:	60 96       	adiw	r28, 0x10	; 16
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	de bf       	out	0x3e, r29	; 62
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	cd bf       	out	0x3d, r28	; 61
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	1f 91       	pop	r17
    22d6:	0f 91       	pop	r16
    22d8:	ff 90       	pop	r15
    22da:	ef 90       	pop	r14
    22dc:	df 90       	pop	r13
    22de:	cf 90       	pop	r12
    22e0:	bf 90       	pop	r11
    22e2:	af 90       	pop	r10
    22e4:	9f 90       	pop	r9
    22e6:	8f 90       	pop	r8
    22e8:	08 95       	ret

000022ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    22ea:	8f 92       	push	r8
    22ec:	9f 92       	push	r9
    22ee:	af 92       	push	r10
    22f0:	bf 92       	push	r11
    22f2:	cf 92       	push	r12
    22f4:	df 92       	push	r13
    22f6:	ef 92       	push	r14
    22f8:	0f 93       	push	r16
    22fa:	1f 93       	push	r17
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	64 97       	sbiw	r28, 0x14	; 20
    2306:	0f b6       	in	r0, 0x3f	; 63
    2308:	f8 94       	cli
    230a:	de bf       	out	0x3e, r29	; 62
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	cd bf       	out	0x3d, r28	; 61
    2310:	9d 83       	std	Y+5, r25	; 0x05
    2312:	8c 83       	std	Y+4, r24	; 0x04
    2314:	7f 83       	std	Y+7, r23	; 0x07
    2316:	6e 83       	std	Y+6, r22	; 0x06
    2318:	28 87       	std	Y+8, r18	; 0x08
    231a:	39 87       	std	Y+9, r19	; 0x09
    231c:	4a 87       	std	Y+10, r20	; 0x0a
    231e:	5b 87       	std	Y+11, r21	; 0x0b
    2320:	1d 87       	std	Y+13, r17	; 0x0d
    2322:	0c 87       	std	Y+12, r16	; 0x0c
    2324:	ee 86       	std	Y+14, r14	; 0x0e
    2326:	d8 8a       	std	Y+16, r13	; 0x10
    2328:	cf 86       	std	Y+15, r12	; 0x0f
    232a:	ba 8a       	std	Y+18, r11	; 0x12
    232c:	a9 8a       	std	Y+17, r10	; 0x11
    232e:	9c 8a       	std	Y+20, r9	; 0x14
    2330:	8b 8a       	std	Y+19, r8	; 0x13
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    2332:	e9 89       	ldd	r30, Y+17	; 0x11
    2334:	fa 89       	ldd	r31, Y+18	; 0x12
    2336:	27 89       	ldd	r18, Z+23	; 0x17
    2338:	30 8d       	ldd	r19, Z+24	; 0x18
    233a:	88 85       	ldd	r24, Y+8	; 0x08
    233c:	99 85       	ldd	r25, Y+9	; 0x09
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	82 0f       	add	r24, r18
    2342:	93 1f       	adc	r25, r19
    2344:	9b 83       	std	Y+3, r25	; 0x03
    2346:	8a 83       	std	Y+2, r24	; 0x02
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    2348:	19 82       	std	Y+1, r1	; 0x01
    234a:	21 c0       	rjmp	.+66     	; 0x238e <prvInitialiseNewTask+0xa4>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	48 2f       	mov	r20, r24
    2350:	50 e0       	ldi	r21, 0x00	; 0
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	28 2f       	mov	r18, r24
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	8e 81       	ldd	r24, Y+6	; 0x06
    235a:	9f 81       	ldd	r25, Y+7	; 0x07
    235c:	fc 01       	movw	r30, r24
    235e:	e2 0f       	add	r30, r18
    2360:	f3 1f       	adc	r31, r19
    2362:	20 81       	ld	r18, Z
    2364:	89 89       	ldd	r24, Y+17	; 0x11
    2366:	9a 89       	ldd	r25, Y+18	; 0x12
    2368:	84 0f       	add	r24, r20
    236a:	95 1f       	adc	r25, r21
    236c:	fc 01       	movw	r30, r24
    236e:	79 96       	adiw	r30, 0x19	; 25
    2370:	20 83       	st	Z, r18

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    2372:	89 81       	ldd	r24, Y+1	; 0x01
    2374:	28 2f       	mov	r18, r24
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	8e 81       	ldd	r24, Y+6	; 0x06
    237a:	9f 81       	ldd	r25, Y+7	; 0x07
    237c:	fc 01       	movw	r30, r24
    237e:	e2 0f       	add	r30, r18
    2380:	f3 1f       	adc	r31, r19
    2382:	80 81       	ld	r24, Z
    2384:	88 23       	and	r24, r24
    2386:	31 f0       	breq	.+12     	; 0x2394 <prvInitialiseNewTask+0xaa>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	8f 5f       	subi	r24, 0xFF	; 255
    238c:	89 83       	std	Y+1, r24	; 0x01
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	8a 30       	cpi	r24, 0x0A	; 10
    2392:	e0 f2       	brcs	.-72     	; 0x234c <prvInitialiseNewTask+0x62>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    2394:	e9 89       	ldd	r30, Y+17	; 0x11
    2396:	fa 89       	ldd	r31, Y+18	; 0x12
    2398:	12 a2       	std	Z+34, r1	; 0x22

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    239a:	8e 85       	ldd	r24, Y+14	; 0x0e
    239c:	85 30       	cpi	r24, 0x05	; 5
    239e:	10 f0       	brcs	.+4      	; 0x23a4 <prvInitialiseNewTask+0xba>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    23a0:	84 e0       	ldi	r24, 0x04	; 4
    23a2:	8e 87       	std	Y+14, r24	; 0x0e
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    23a4:	e9 89       	ldd	r30, Y+17	; 0x11
    23a6:	fa 89       	ldd	r31, Y+18	; 0x12
    23a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    23aa:	86 8b       	std	Z+22, r24	; 0x16
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    23ac:	e9 89       	ldd	r30, Y+17	; 0x11
    23ae:	fa 89       	ldd	r31, Y+18	; 0x12
    23b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    23b2:	83 a3       	std	Z+35, r24	; 0x23
		pxNewTCB->uxMutexesHeld = 0;
    23b4:	e9 89       	ldd	r30, Y+17	; 0x11
    23b6:	fa 89       	ldd	r31, Y+18	; 0x12
    23b8:	14 a2       	std	Z+36, r1	; 0x24
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    23ba:	89 89       	ldd	r24, Y+17	; 0x11
    23bc:	9a 89       	ldd	r25, Y+18	; 0x12
    23be:	02 96       	adiw	r24, 0x02	; 2
    23c0:	0e 94 0a 06 	call	0xc14	; 0xc14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    23c4:	89 89       	ldd	r24, Y+17	; 0x11
    23c6:	9a 89       	ldd	r25, Y+18	; 0x12
    23c8:	0c 96       	adiw	r24, 0x0c	; 12
    23ca:	0e 94 0a 06 	call	0xc14	; 0xc14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    23ce:	e9 89       	ldd	r30, Y+17	; 0x11
    23d0:	fa 89       	ldd	r31, Y+18	; 0x12
    23d2:	89 89       	ldd	r24, Y+17	; 0x11
    23d4:	9a 89       	ldd	r25, Y+18	; 0x12
    23d6:	91 87       	std	Z+9, r25	; 0x09
    23d8:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    23da:	8e 85       	ldd	r24, Y+14	; 0x0e
    23dc:	28 2f       	mov	r18, r24
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	85 e0       	ldi	r24, 0x05	; 5
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	82 1b       	sub	r24, r18
    23e6:	93 0b       	sbc	r25, r19
    23e8:	e9 89       	ldd	r30, Y+17	; 0x11
    23ea:	fa 89       	ldd	r31, Y+18	; 0x12
    23ec:	95 87       	std	Z+13, r25	; 0x0d
    23ee:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    23f0:	e9 89       	ldd	r30, Y+17	; 0x11
    23f2:	fa 89       	ldd	r31, Y+18	; 0x12
    23f4:	89 89       	ldd	r24, Y+17	; 0x11
    23f6:	9a 89       	ldd	r25, Y+18	; 0x12
    23f8:	93 8b       	std	Z+19, r25	; 0x13
    23fa:	82 8b       	std	Z+18, r24	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    23fc:	e9 89       	ldd	r30, Y+17	; 0x11
    23fe:	fa 89       	ldd	r31, Y+18	; 0x12
    2400:	15 a2       	std	Z+37, r1	; 0x25
    2402:	16 a2       	std	Z+38, r1	; 0x26
    2404:	17 a2       	std	Z+39, r1	; 0x27
    2406:	10 a6       	std	Z+40, r1	; 0x28
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2408:	e9 89       	ldd	r30, Y+17	; 0x11
    240a:	fa 89       	ldd	r31, Y+18	; 0x12
    240c:	11 a6       	std	Z+41, r1	; 0x29
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    240e:	8a 81       	ldd	r24, Y+2	; 0x02
    2410:	9b 81       	ldd	r25, Y+3	; 0x03
    2412:	2c 81       	ldd	r18, Y+4	; 0x04
    2414:	3d 81       	ldd	r19, Y+5	; 0x05
    2416:	4c 85       	ldd	r20, Y+12	; 0x0c
    2418:	5d 85       	ldd	r21, Y+13	; 0x0d
    241a:	b9 01       	movw	r22, r18
    241c:	0e 94 16 07 	call	0xe2c	; 0xe2c <pxPortInitialiseStack>
    2420:	e9 89       	ldd	r30, Y+17	; 0x11
    2422:	fa 89       	ldd	r31, Y+18	; 0x12
    2424:	91 83       	std	Z+1, r25	; 0x01
    2426:	80 83       	st	Z, r24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    2428:	8f 85       	ldd	r24, Y+15	; 0x0f
    242a:	98 89       	ldd	r25, Y+16	; 0x10
    242c:	00 97       	sbiw	r24, 0x00	; 0
    242e:	31 f0       	breq	.+12     	; 0x243c <prvInitialiseNewTask+0x152>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    2430:	ef 85       	ldd	r30, Y+15	; 0x0f
    2432:	f8 89       	ldd	r31, Y+16	; 0x10
    2434:	89 89       	ldd	r24, Y+17	; 0x11
    2436:	9a 89       	ldd	r25, Y+18	; 0x12
    2438:	91 83       	std	Z+1, r25	; 0x01
    243a:	80 83       	st	Z, r24
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    243c:	64 96       	adiw	r28, 0x14	; 20
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	1f 91       	pop	r17
    244e:	0f 91       	pop	r16
    2450:	ef 90       	pop	r14
    2452:	df 90       	pop	r13
    2454:	cf 90       	pop	r12
    2456:	bf 90       	pop	r11
    2458:	af 90       	pop	r10
    245a:	9f 90       	pop	r9
    245c:	8f 90       	pop	r8
    245e:	08 95       	ret

00002460 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	00 d0       	rcall	.+0      	; 0x2466 <prvAddNewTaskToReadyList+0x6>
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	9a 83       	std	Y+2, r25	; 0x02
    246c:	89 83       	std	Y+1, r24	; 0x01
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    2474:	80 91 0c 04 	lds	r24, 0x040C
    2478:	8f 5f       	subi	r24, 0xFF	; 255
    247a:	80 93 0c 04 	sts	0x040C, r24
		if( pxCurrentTCB == NULL )
    247e:	80 91 09 04 	lds	r24, 0x0409
    2482:	90 91 0a 04 	lds	r25, 0x040A
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	69 f4       	brne	.+26     	; 0x24a4 <prvAddNewTaskToReadyList+0x44>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	9a 81       	ldd	r25, Y+2	; 0x02
    248e:	90 93 0a 04 	sts	0x040A, r25
    2492:	80 93 09 04 	sts	0x0409, r24

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    2496:	80 91 0c 04 	lds	r24, 0x040C
    249a:	81 30       	cpi	r24, 0x01	; 1
    249c:	b9 f4       	brne	.+46     	; 0x24cc <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    249e:	0e 94 8b 1a 	call	0x3516	; 0x3516 <prvInitialiseTaskLists>
    24a2:	14 c0       	rjmp	.+40     	; 0x24cc <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    24a4:	80 91 10 04 	lds	r24, 0x0410
    24a8:	88 23       	and	r24, r24
    24aa:	81 f4       	brne	.+32     	; 0x24cc <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    24ac:	e0 91 09 04 	lds	r30, 0x0409
    24b0:	f0 91 0a 04 	lds	r31, 0x040A
    24b4:	96 89       	ldd	r25, Z+22	; 0x16
    24b6:	e9 81       	ldd	r30, Y+1	; 0x01
    24b8:	fa 81       	ldd	r31, Y+2	; 0x02
    24ba:	86 89       	ldd	r24, Z+22	; 0x16
    24bc:	89 17       	cp	r24, r25
    24be:	30 f0       	brcs	.+12     	; 0x24cc <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	9a 81       	ldd	r25, Y+2	; 0x02
    24c4:	90 93 0a 04 	sts	0x040A, r25
    24c8:	80 93 09 04 	sts	0x0409, r24
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    24cc:	80 91 14 04 	lds	r24, 0x0414
    24d0:	8f 5f       	subi	r24, 0xFF	; 255
    24d2:	80 93 14 04 	sts	0x0414, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    24d6:	e9 81       	ldd	r30, Y+1	; 0x01
    24d8:	fa 81       	ldd	r31, Y+2	; 0x02
    24da:	96 89       	ldd	r25, Z+22	; 0x16
    24dc:	80 91 0f 04 	lds	r24, 0x040F
    24e0:	89 17       	cp	r24, r25
    24e2:	28 f4       	brcc	.+10     	; 0x24ee <prvAddNewTaskToReadyList+0x8e>
    24e4:	e9 81       	ldd	r30, Y+1	; 0x01
    24e6:	fa 81       	ldd	r31, Y+2	; 0x02
    24e8:	86 89       	ldd	r24, Z+22	; 0x16
    24ea:	80 93 0f 04 	sts	0x040F, r24
    24ee:	e9 81       	ldd	r30, Y+1	; 0x01
    24f0:	fa 81       	ldd	r31, Y+2	; 0x02
    24f2:	86 89       	ldd	r24, Z+22	; 0x16
    24f4:	28 2f       	mov	r18, r24
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	c9 01       	movw	r24, r18
    24fa:	88 0f       	add	r24, r24
    24fc:	99 1f       	adc	r25, r25
    24fe:	88 0f       	add	r24, r24
    2500:	99 1f       	adc	r25, r25
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	82 0f       	add	r24, r18
    2508:	93 1f       	adc	r25, r19
    250a:	ac 01       	movw	r20, r24
    250c:	46 5e       	subi	r20, 0xE6	; 230
    250e:	5b 4f       	sbci	r21, 0xFB	; 251
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	9a 81       	ldd	r25, Y+2	; 0x02
    2514:	9c 01       	movw	r18, r24
    2516:	2e 5f       	subi	r18, 0xFE	; 254
    2518:	3f 4f       	sbci	r19, 0xFF	; 255
    251a:	ca 01       	movw	r24, r20
    251c:	b9 01       	movw	r22, r18
    251e:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    2522:	0f 90       	pop	r0
    2524:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    2526:	80 91 10 04 	lds	r24, 0x0410
    252a:	88 23       	and	r24, r24
    252c:	61 f0       	breq	.+24     	; 0x2546 <prvAddNewTaskToReadyList+0xe6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    252e:	e0 91 09 04 	lds	r30, 0x0409
    2532:	f0 91 0a 04 	lds	r31, 0x040A
    2536:	96 89       	ldd	r25, Z+22	; 0x16
    2538:	e9 81       	ldd	r30, Y+1	; 0x01
    253a:	fa 81       	ldd	r31, Y+2	; 0x02
    253c:	86 89       	ldd	r24, Z+22	; 0x16
    253e:	98 17       	cp	r25, r24
    2540:	10 f4       	brcc	.+4      	; 0x2546 <prvAddNewTaskToReadyList+0xe6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    2542:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	00 d0       	rcall	.+0      	; 0x2556 <vTaskDelete+0x6>
    2556:	00 d0       	rcall	.+0      	; 0x2558 <vTaskDelete+0x8>
    2558:	00 d0       	rcall	.+0      	; 0x255a <vTaskDelete+0xa>
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	9c 83       	std	Y+4, r25	; 0x04
    2560:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	f8 94       	cli
    2566:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    2568:	8b 81       	ldd	r24, Y+3	; 0x03
    256a:	9c 81       	ldd	r25, Y+4	; 0x04
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	39 f4       	brne	.+14     	; 0x257e <vTaskDelete+0x2e>
    2570:	80 91 09 04 	lds	r24, 0x0409
    2574:	90 91 0a 04 	lds	r25, 0x040A
    2578:	9e 83       	std	Y+6, r25	; 0x06
    257a:	8d 83       	std	Y+5, r24	; 0x05
    257c:	04 c0       	rjmp	.+8      	; 0x2586 <vTaskDelete+0x36>
    257e:	8b 81       	ldd	r24, Y+3	; 0x03
    2580:	9c 81       	ldd	r25, Y+4	; 0x04
    2582:	9e 83       	std	Y+6, r25	; 0x06
    2584:	8d 83       	std	Y+5, r24	; 0x05
    2586:	8d 81       	ldd	r24, Y+5	; 0x05
    2588:	9e 81       	ldd	r25, Y+6	; 0x06
    258a:	9a 83       	std	Y+2, r25	; 0x02
    258c:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	9a 81       	ldd	r25, Y+2	; 0x02
    2592:	02 96       	adiw	r24, 0x02	; 2
    2594:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2598:	e9 81       	ldd	r30, Y+1	; 0x01
    259a:	fa 81       	ldd	r31, Y+2	; 0x02
    259c:	84 89       	ldd	r24, Z+20	; 0x14
    259e:	95 89       	ldd	r25, Z+21	; 0x15
    25a0:	00 97       	sbiw	r24, 0x00	; 0
    25a2:	29 f0       	breq	.+10     	; 0x25ae <vTaskDelete+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    25a4:	89 81       	ldd	r24, Y+1	; 0x01
    25a6:	9a 81       	ldd	r25, Y+2	; 0x02
    25a8:	0c 96       	adiw	r24, 0x0c	; 12
    25aa:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    25ae:	80 91 14 04 	lds	r24, 0x0414
    25b2:	8f 5f       	subi	r24, 0xFF	; 255
    25b4:	80 93 14 04 	sts	0x0414, r24

			if( pxTCB == pxCurrentTCB )
    25b8:	20 91 09 04 	lds	r18, 0x0409
    25bc:	30 91 0a 04 	lds	r19, 0x040A
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	9a 81       	ldd	r25, Y+2	; 0x02
    25c4:	82 17       	cp	r24, r18
    25c6:	93 07       	cpc	r25, r19
    25c8:	81 f4       	brne	.+32     	; 0x25ea <vTaskDelete+0x9a>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	9a 81       	ldd	r25, Y+2	; 0x02
    25ce:	9c 01       	movw	r18, r24
    25d0:	2e 5f       	subi	r18, 0xFE	; 254
    25d2:	3f 4f       	sbci	r19, 0xFF	; 255
    25d4:	86 e6       	ldi	r24, 0x66	; 102
    25d6:	94 e0       	ldi	r25, 0x04	; 4
    25d8:	b9 01       	movw	r22, r18
    25da:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    25de:	80 91 0b 04 	lds	r24, 0x040B
    25e2:	8f 5f       	subi	r24, 0xFF	; 255
    25e4:	80 93 0b 04 	sts	0x040B, r24
    25e8:	0b c0       	rjmp	.+22     	; 0x2600 <vTaskDelete+0xb0>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    25ea:	80 91 0c 04 	lds	r24, 0x040C
    25ee:	81 50       	subi	r24, 0x01	; 1
    25f0:	80 93 0c 04 	sts	0x040C, r24
				prvDeleteTCB( pxTCB );
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	9a 81       	ldd	r25, Y+2	; 0x02
    25f8:	0e 94 0b 1b 	call	0x3616	; 0x3616 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    25fc:	0e 94 21 1b 	call	0x3642	; 0x3642 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    2600:	0f 90       	pop	r0
    2602:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    2604:	80 91 10 04 	lds	r24, 0x0410
    2608:	88 23       	and	r24, r24
    260a:	59 f0       	breq	.+22     	; 0x2622 <vTaskDelete+0xd2>
		{
			if( pxTCB == pxCurrentTCB )
    260c:	20 91 09 04 	lds	r18, 0x0409
    2610:	30 91 0a 04 	lds	r19, 0x040A
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	9a 81       	ldd	r25, Y+2	; 0x02
    2618:	82 17       	cp	r24, r18
    261a:	93 07       	cpc	r25, r19
    261c:	11 f4       	brne	.+4      	; 0x2622 <vTaskDelete+0xd2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    261e:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    2622:	26 96       	adiw	r28, 0x06	; 6
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	08 95       	ret

00002634 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    2634:	df 93       	push	r29
    2636:	cf 93       	push	r28
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	2a 97       	sbiw	r28, 0x0a	; 10
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	de bf       	out	0x3e, r29	; 62
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	cd bf       	out	0x3d, r28	; 61
    2648:	98 87       	std	Y+8, r25	; 0x08
    264a:	8f 83       	std	Y+7, r24	; 0x07
    264c:	7a 87       	std	Y+10, r23	; 0x0a
    264e:	69 87       	std	Y+9, r22	; 0x09
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    2650:	1b 82       	std	Y+3, r1	; 0x03

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    2652:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    2656:	80 91 0d 04 	lds	r24, 0x040D
    265a:	90 91 0e 04 	lds	r25, 0x040E
    265e:	9a 83       	std	Y+2, r25	; 0x02
    2660:	89 83       	std	Y+1, r24	; 0x01

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    2662:	ef 81       	ldd	r30, Y+7	; 0x07
    2664:	f8 85       	ldd	r31, Y+8	; 0x08
    2666:	20 81       	ld	r18, Z
    2668:	31 81       	ldd	r19, Z+1	; 0x01
    266a:	89 85       	ldd	r24, Y+9	; 0x09
    266c:	9a 85       	ldd	r25, Y+10	; 0x0a
    266e:	82 0f       	add	r24, r18
    2670:	93 1f       	adc	r25, r19
    2672:	9e 83       	std	Y+6, r25	; 0x06
    2674:	8d 83       	std	Y+5, r24	; 0x05

			if( xConstTickCount < *pxPreviousWakeTime )
    2676:	ef 81       	ldd	r30, Y+7	; 0x07
    2678:	f8 85       	ldd	r31, Y+8	; 0x08
    267a:	20 81       	ld	r18, Z
    267c:	31 81       	ldd	r19, Z+1	; 0x01
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	9a 81       	ldd	r25, Y+2	; 0x02
    2682:	82 17       	cp	r24, r18
    2684:	93 07       	cpc	r25, r19
    2686:	98 f4       	brcc	.+38     	; 0x26ae <vTaskDelayUntil+0x7a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    2688:	ef 81       	ldd	r30, Y+7	; 0x07
    268a:	f8 85       	ldd	r31, Y+8	; 0x08
    268c:	20 81       	ld	r18, Z
    268e:	31 81       	ldd	r19, Z+1	; 0x01
    2690:	8d 81       	ldd	r24, Y+5	; 0x05
    2692:	9e 81       	ldd	r25, Y+6	; 0x06
    2694:	82 17       	cp	r24, r18
    2696:	93 07       	cpc	r25, r19
    2698:	e0 f4       	brcc	.+56     	; 0x26d2 <vTaskDelayUntil+0x9e>
    269a:	2d 81       	ldd	r18, Y+5	; 0x05
    269c:	3e 81       	ldd	r19, Y+6	; 0x06
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	9a 81       	ldd	r25, Y+2	; 0x02
    26a2:	82 17       	cp	r24, r18
    26a4:	93 07       	cpc	r25, r19
    26a6:	a8 f4       	brcc	.+42     	; 0x26d2 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	8b 83       	std	Y+3, r24	; 0x03
    26ac:	12 c0       	rjmp	.+36     	; 0x26d2 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    26ae:	ef 81       	ldd	r30, Y+7	; 0x07
    26b0:	f8 85       	ldd	r31, Y+8	; 0x08
    26b2:	20 81       	ld	r18, Z
    26b4:	31 81       	ldd	r19, Z+1	; 0x01
    26b6:	8d 81       	ldd	r24, Y+5	; 0x05
    26b8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ba:	82 17       	cp	r24, r18
    26bc:	93 07       	cpc	r25, r19
    26be:	38 f0       	brcs	.+14     	; 0x26ce <vTaskDelayUntil+0x9a>
    26c0:	2d 81       	ldd	r18, Y+5	; 0x05
    26c2:	3e 81       	ldd	r19, Y+6	; 0x06
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	9a 81       	ldd	r25, Y+2	; 0x02
    26c8:	82 17       	cp	r24, r18
    26ca:	93 07       	cpc	r25, r19
    26cc:	10 f4       	brcc	.+4      	; 0x26d2 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	8b 83       	std	Y+3, r24	; 0x03
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    26d2:	ef 81       	ldd	r30, Y+7	; 0x07
    26d4:	f8 85       	ldd	r31, Y+8	; 0x08
    26d6:	8d 81       	ldd	r24, Y+5	; 0x05
    26d8:	9e 81       	ldd	r25, Y+6	; 0x06
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    26de:	8b 81       	ldd	r24, Y+3	; 0x03
    26e0:	88 23       	and	r24, r24
    26e2:	49 f0       	breq	.+18     	; 0x26f6 <vTaskDelayUntil+0xc2>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    26e4:	8d 81       	ldd	r24, Y+5	; 0x05
    26e6:	9e 81       	ldd	r25, Y+6	; 0x06
    26e8:	29 81       	ldd	r18, Y+1	; 0x01
    26ea:	3a 81       	ldd	r19, Y+2	; 0x02
    26ec:	82 1b       	sub	r24, r18
    26ee:	93 0b       	sbc	r25, r19
    26f0:	60 e0       	ldi	r22, 0x00	; 0
    26f2:	0e 94 44 20 	call	0x4088	; 0x4088 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    26f6:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <xTaskResumeAll>
    26fa:	8c 83       	std	Y+4, r24	; 0x04

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    26fc:	8c 81       	ldd	r24, Y+4	; 0x04
    26fe:	88 23       	and	r24, r24
    2700:	11 f4       	brne	.+4      	; 0x2706 <vTaskDelayUntil+0xd2>
		{
			portYIELD_WITHIN_API();
    2702:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2706:	2a 96       	adiw	r28, 0x0a	; 10
    2708:	0f b6       	in	r0, 0x3f	; 63
    270a:	f8 94       	cli
    270c:	de bf       	out	0x3e, r29	; 62
    270e:	0f be       	out	0x3f, r0	; 63
    2710:	cd bf       	out	0x3d, r28	; 61
    2712:	cf 91       	pop	r28
    2714:	df 91       	pop	r29
    2716:	08 95       	ret

00002718 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    2718:	df 93       	push	r29
    271a:	cf 93       	push	r28
    271c:	00 d0       	rcall	.+0      	; 0x271e <vTaskDelay+0x6>
    271e:	0f 92       	push	r0
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    2724:	9b 83       	std	Y+3, r25	; 0x03
    2726:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xAlreadyYielded = pdFALSE;
    2728:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    272a:	8a 81       	ldd	r24, Y+2	; 0x02
    272c:	9b 81       	ldd	r25, Y+3	; 0x03
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	51 f0       	breq	.+20     	; 0x2746 <vTaskDelay+0x2e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    2732:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    2736:	8a 81       	ldd	r24, Y+2	; 0x02
    2738:	9b 81       	ldd	r25, Y+3	; 0x03
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	0e 94 44 20 	call	0x4088	; 0x4088 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    2740:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <xTaskResumeAll>
    2744:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	88 23       	and	r24, r24
    274a:	11 f4       	brne	.+4      	; 0x2750 <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    274c:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	cf 91       	pop	r28
    2758:	df 91       	pop	r29
    275a:	08 95       	ret

0000275c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
    275c:	df 93       	push	r29
    275e:	cf 93       	push	r28
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	27 97       	sbiw	r28, 0x07	; 7
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	9d 83       	std	Y+5, r25	; 0x05
    2772:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
    2774:	0f b6       	in	r0, 0x3f	; 63
    2776:	f8 94       	cli
    2778:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    277a:	8c 81       	ldd	r24, Y+4	; 0x04
    277c:	9d 81       	ldd	r25, Y+5	; 0x05
    277e:	00 97       	sbiw	r24, 0x00	; 0
    2780:	39 f4       	brne	.+14     	; 0x2790 <uxTaskPriorityGet+0x34>
    2782:	80 91 09 04 	lds	r24, 0x0409
    2786:	90 91 0a 04 	lds	r25, 0x040A
    278a:	9f 83       	std	Y+7, r25	; 0x07
    278c:	8e 83       	std	Y+6, r24	; 0x06
    278e:	04 c0       	rjmp	.+8      	; 0x2798 <uxTaskPriorityGet+0x3c>
    2790:	8c 81       	ldd	r24, Y+4	; 0x04
    2792:	9d 81       	ldd	r25, Y+5	; 0x05
    2794:	9f 83       	std	Y+7, r25	; 0x07
    2796:	8e 83       	std	Y+6, r24	; 0x06
    2798:	8e 81       	ldd	r24, Y+6	; 0x06
    279a:	9f 81       	ldd	r25, Y+7	; 0x07
    279c:	9b 83       	std	Y+3, r25	; 0x03
    279e:	8a 83       	std	Y+2, r24	; 0x02
			uxReturn = pxTCB->uxPriority;
    27a0:	ea 81       	ldd	r30, Y+2	; 0x02
    27a2:	fb 81       	ldd	r31, Y+3	; 0x03
    27a4:	86 89       	ldd	r24, Z+22	; 0x16
    27a6:	89 83       	std	Y+1, r24	; 0x01
		}
		taskEXIT_CRITICAL();
    27a8:	0f 90       	pop	r0
    27aa:	0f be       	out	0x3f, r0	; 63

		return uxReturn;
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
	}
    27ae:	27 96       	adiw	r28, 0x07	; 7
    27b0:	0f b6       	in	r0, 0x3f	; 63
    27b2:	f8 94       	cli
    27b4:	de bf       	out	0x3e, r29	; 62
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	cd bf       	out	0x3d, r28	; 61
    27ba:	cf 91       	pop	r28
    27bc:	df 91       	pop	r29
    27be:	08 95       	ret

000027c0 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
    27c0:	df 93       	push	r29
    27c2:	cf 93       	push	r28
    27c4:	cd b7       	in	r28, 0x3d	; 61
    27c6:	de b7       	in	r29, 0x3e	; 62
    27c8:	28 97       	sbiw	r28, 0x08	; 8
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	de bf       	out	0x3e, r29	; 62
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	cd bf       	out	0x3d, r28	; 61
    27d4:	9e 83       	std	Y+6, r25	; 0x06
    27d6:	8d 83       	std	Y+5, r24	; 0x05
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
    27d8:	19 82       	std	Y+1, r1	; 0x01
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    27da:	8d 81       	ldd	r24, Y+5	; 0x05
    27dc:	9e 81       	ldd	r25, Y+6	; 0x06
    27de:	00 97       	sbiw	r24, 0x00	; 0
    27e0:	39 f4       	brne	.+14     	; 0x27f0 <uxTaskPriorityGetFromISR+0x30>
    27e2:	80 91 09 04 	lds	r24, 0x0409
    27e6:	90 91 0a 04 	lds	r25, 0x040A
    27ea:	98 87       	std	Y+8, r25	; 0x08
    27ec:	8f 83       	std	Y+7, r24	; 0x07
    27ee:	04 c0       	rjmp	.+8      	; 0x27f8 <uxTaskPriorityGetFromISR+0x38>
    27f0:	8d 81       	ldd	r24, Y+5	; 0x05
    27f2:	9e 81       	ldd	r25, Y+6	; 0x06
    27f4:	98 87       	std	Y+8, r25	; 0x08
    27f6:	8f 83       	std	Y+7, r24	; 0x07
    27f8:	8f 81       	ldd	r24, Y+7	; 0x07
    27fa:	98 85       	ldd	r25, Y+8	; 0x08
    27fc:	9c 83       	std	Y+4, r25	; 0x04
    27fe:	8b 83       	std	Y+3, r24	; 0x03
			uxReturn = pxTCB->uxPriority;
    2800:	eb 81       	ldd	r30, Y+3	; 0x03
    2802:	fc 81       	ldd	r31, Y+4	; 0x04
    2804:	86 89       	ldd	r24, Z+22	; 0x16
    2806:	8a 83       	std	Y+2, r24	; 0x02
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
    2808:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    280a:	28 96       	adiw	r28, 0x08	; 8
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	cf 91       	pop	r28
    2818:	df 91       	pop	r29
    281a:	08 95       	ret

0000281c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	2a 97       	sbiw	r28, 0x0a	; 10
    2826:	0f b6       	in	r0, 0x3f	; 63
    2828:	f8 94       	cli
    282a:	de bf       	out	0x3e, r29	; 62
    282c:	0f be       	out	0x3f, r0	; 63
    282e:	cd bf       	out	0x3d, r28	; 61
    2830:	9f 83       	std	Y+7, r25	; 0x07
    2832:	8e 83       	std	Y+6, r24	; 0x06
    2834:	68 87       	std	Y+8, r22	; 0x08
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    2836:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    2838:	88 85       	ldd	r24, Y+8	; 0x08
    283a:	85 30       	cpi	r24, 0x05	; 5
    283c:	10 f0       	brcs	.+4      	; 0x2842 <vTaskPrioritySet+0x26>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    283e:	84 e0       	ldi	r24, 0x04	; 4
    2840:	88 87       	std	Y+8, r24	; 0x08
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    2848:	8e 81       	ldd	r24, Y+6	; 0x06
    284a:	9f 81       	ldd	r25, Y+7	; 0x07
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	39 f4       	brne	.+14     	; 0x285e <vTaskPrioritySet+0x42>
    2850:	80 91 09 04 	lds	r24, 0x0409
    2854:	90 91 0a 04 	lds	r25, 0x040A
    2858:	9a 87       	std	Y+10, r25	; 0x0a
    285a:	89 87       	std	Y+9, r24	; 0x09
    285c:	04 c0       	rjmp	.+8      	; 0x2866 <vTaskPrioritySet+0x4a>
    285e:	8e 81       	ldd	r24, Y+6	; 0x06
    2860:	9f 81       	ldd	r25, Y+7	; 0x07
    2862:	9a 87       	std	Y+10, r25	; 0x0a
    2864:	89 87       	std	Y+9, r24	; 0x09
    2866:	89 85       	ldd	r24, Y+9	; 0x09
    2868:	9a 85       	ldd	r25, Y+10	; 0x0a
    286a:	9d 83       	std	Y+5, r25	; 0x05
    286c:	8c 83       	std	Y+4, r24	; 0x04

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    286e:	ec 81       	ldd	r30, Y+4	; 0x04
    2870:	fd 81       	ldd	r31, Y+5	; 0x05
    2872:	83 a1       	ldd	r24, Z+35	; 0x23
    2874:	8b 83       	std	Y+3, r24	; 0x03
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    2876:	9b 81       	ldd	r25, Y+3	; 0x03
    2878:	88 85       	ldd	r24, Y+8	; 0x08
    287a:	98 17       	cp	r25, r24
    287c:	09 f4       	brne	.+2      	; 0x2880 <vTaskPrioritySet+0x64>
    287e:	8d c0       	rjmp	.+282    	; 0x299a <vTaskPrioritySet+0x17e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    2880:	98 85       	ldd	r25, Y+8	; 0x08
    2882:	8b 81       	ldd	r24, Y+3	; 0x03
    2884:	89 17       	cp	r24, r25
    2886:	a0 f4       	brcc	.+40     	; 0x28b0 <vTaskPrioritySet+0x94>
				{
					if( pxTCB != pxCurrentTCB )
    2888:	20 91 09 04 	lds	r18, 0x0409
    288c:	30 91 0a 04 	lds	r19, 0x040A
    2890:	8c 81       	ldd	r24, Y+4	; 0x04
    2892:	9d 81       	ldd	r25, Y+5	; 0x05
    2894:	82 17       	cp	r24, r18
    2896:	93 07       	cpc	r25, r19
    2898:	b1 f0       	breq	.+44     	; 0x28c6 <vTaskPrioritySet+0xaa>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    289a:	e0 91 09 04 	lds	r30, 0x0409
    289e:	f0 91 0a 04 	lds	r31, 0x040A
    28a2:	96 89       	ldd	r25, Z+22	; 0x16
    28a4:	88 85       	ldd	r24, Y+8	; 0x08
    28a6:	89 17       	cp	r24, r25
    28a8:	70 f0       	brcs	.+28     	; 0x28c6 <vTaskPrioritySet+0xaa>
						{
							xYieldRequired = pdTRUE;
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	89 83       	std	Y+1, r24	; 0x01
    28ae:	0b c0       	rjmp	.+22     	; 0x28c6 <vTaskPrioritySet+0xaa>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    28b0:	20 91 09 04 	lds	r18, 0x0409
    28b4:	30 91 0a 04 	lds	r19, 0x040A
    28b8:	8c 81       	ldd	r24, Y+4	; 0x04
    28ba:	9d 81       	ldd	r25, Y+5	; 0x05
    28bc:	82 17       	cp	r24, r18
    28be:	93 07       	cpc	r25, r19
    28c0:	11 f4       	brne	.+4      	; 0x28c6 <vTaskPrioritySet+0xaa>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	89 83       	std	Y+1, r24	; 0x01
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    28c6:	ec 81       	ldd	r30, Y+4	; 0x04
    28c8:	fd 81       	ldd	r31, Y+5	; 0x05
    28ca:	86 89       	ldd	r24, Z+22	; 0x16
    28cc:	8a 83       	std	Y+2, r24	; 0x02

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    28ce:	ec 81       	ldd	r30, Y+4	; 0x04
    28d0:	fd 81       	ldd	r31, Y+5	; 0x05
    28d2:	93 a1       	ldd	r25, Z+35	; 0x23
    28d4:	ec 81       	ldd	r30, Y+4	; 0x04
    28d6:	fd 81       	ldd	r31, Y+5	; 0x05
    28d8:	86 89       	ldd	r24, Z+22	; 0x16
    28da:	98 17       	cp	r25, r24
    28dc:	21 f4       	brne	.+8      	; 0x28e6 <vTaskPrioritySet+0xca>
					{
						pxTCB->uxPriority = uxNewPriority;
    28de:	ec 81       	ldd	r30, Y+4	; 0x04
    28e0:	fd 81       	ldd	r31, Y+5	; 0x05
    28e2:	88 85       	ldd	r24, Y+8	; 0x08
    28e4:	86 8b       	std	Z+22, r24	; 0x16
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    28e6:	ec 81       	ldd	r30, Y+4	; 0x04
    28e8:	fd 81       	ldd	r31, Y+5	; 0x05
    28ea:	88 85       	ldd	r24, Y+8	; 0x08
    28ec:	83 a3       	std	Z+35, r24	; 0x23
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    28ee:	ec 81       	ldd	r30, Y+4	; 0x04
    28f0:	fd 81       	ldd	r31, Y+5	; 0x05
    28f2:	84 85       	ldd	r24, Z+12	; 0x0c
    28f4:	95 85       	ldd	r25, Z+13	; 0x0d
    28f6:	99 23       	and	r25, r25
    28f8:	5c f0       	brlt	.+22     	; 0x2910 <vTaskPrioritySet+0xf4>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    28fa:	88 85       	ldd	r24, Y+8	; 0x08
    28fc:	28 2f       	mov	r18, r24
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	85 e0       	ldi	r24, 0x05	; 5
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	82 1b       	sub	r24, r18
    2906:	93 0b       	sbc	r25, r19
    2908:	ec 81       	ldd	r30, Y+4	; 0x04
    290a:	fd 81       	ldd	r31, Y+5	; 0x05
    290c:	95 87       	std	Z+13, r25	; 0x0d
    290e:	84 87       	std	Z+12, r24	; 0x0c

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    2910:	ec 81       	ldd	r30, Y+4	; 0x04
    2912:	fd 81       	ldd	r31, Y+5	; 0x05
    2914:	42 85       	ldd	r20, Z+10	; 0x0a
    2916:	53 85       	ldd	r21, Z+11	; 0x0b
    2918:	8a 81       	ldd	r24, Y+2	; 0x02
    291a:	28 2f       	mov	r18, r24
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	c9 01       	movw	r24, r18
    2920:	88 0f       	add	r24, r24
    2922:	99 1f       	adc	r25, r25
    2924:	88 0f       	add	r24, r24
    2926:	99 1f       	adc	r25, r25
    2928:	88 0f       	add	r24, r24
    292a:	99 1f       	adc	r25, r25
    292c:	82 0f       	add	r24, r18
    292e:	93 1f       	adc	r25, r19
    2930:	86 5e       	subi	r24, 0xE6	; 230
    2932:	9b 4f       	sbci	r25, 0xFB	; 251
    2934:	48 17       	cp	r20, r24
    2936:	59 07       	cpc	r21, r25
    2938:	59 f5       	brne	.+86     	; 0x2990 <vTaskPrioritySet+0x174>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    293a:	8c 81       	ldd	r24, Y+4	; 0x04
    293c:	9d 81       	ldd	r25, Y+5	; 0x05
    293e:	02 96       	adiw	r24, 0x02	; 2
    2940:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    2944:	ec 81       	ldd	r30, Y+4	; 0x04
    2946:	fd 81       	ldd	r31, Y+5	; 0x05
    2948:	96 89       	ldd	r25, Z+22	; 0x16
    294a:	80 91 0f 04 	lds	r24, 0x040F
    294e:	89 17       	cp	r24, r25
    2950:	28 f4       	brcc	.+10     	; 0x295c <vTaskPrioritySet+0x140>
    2952:	ec 81       	ldd	r30, Y+4	; 0x04
    2954:	fd 81       	ldd	r31, Y+5	; 0x05
    2956:	86 89       	ldd	r24, Z+22	; 0x16
    2958:	80 93 0f 04 	sts	0x040F, r24
    295c:	ec 81       	ldd	r30, Y+4	; 0x04
    295e:	fd 81       	ldd	r31, Y+5	; 0x05
    2960:	86 89       	ldd	r24, Z+22	; 0x16
    2962:	28 2f       	mov	r18, r24
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	c9 01       	movw	r24, r18
    2968:	88 0f       	add	r24, r24
    296a:	99 1f       	adc	r25, r25
    296c:	88 0f       	add	r24, r24
    296e:	99 1f       	adc	r25, r25
    2970:	88 0f       	add	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	82 0f       	add	r24, r18
    2976:	93 1f       	adc	r25, r19
    2978:	ac 01       	movw	r20, r24
    297a:	46 5e       	subi	r20, 0xE6	; 230
    297c:	5b 4f       	sbci	r21, 0xFB	; 251
    297e:	8c 81       	ldd	r24, Y+4	; 0x04
    2980:	9d 81       	ldd	r25, Y+5	; 0x05
    2982:	9c 01       	movw	r18, r24
    2984:	2e 5f       	subi	r18, 0xFE	; 254
    2986:	3f 4f       	sbci	r19, 0xFF	; 255
    2988:	ca 01       	movw	r24, r20
    298a:	b9 01       	movw	r22, r18
    298c:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	88 23       	and	r24, r24
    2994:	11 f0       	breq	.+4      	; 0x299a <vTaskPrioritySet+0x17e>
				{
					taskYIELD_IF_USING_PREEMPTION();
    2996:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vPortYield>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    299a:	0f 90       	pop	r0
    299c:	0f be       	out	0x3f, r0	; 63
	}
    299e:	2a 96       	adiw	r28, 0x0a	; 10
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	08 95       	ret

000029b0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <vTaskSuspend+0x6>
    29b6:	00 d0       	rcall	.+0      	; 0x29b8 <vTaskSuspend+0x8>
    29b8:	00 d0       	rcall	.+0      	; 0x29ba <vTaskSuspend+0xa>
    29ba:	cd b7       	in	r28, 0x3d	; 61
    29bc:	de b7       	in	r29, 0x3e	; 62
    29be:	9c 83       	std	Y+4, r25	; 0x04
    29c0:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	f8 94       	cli
    29c6:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    29c8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ca:	9c 81       	ldd	r25, Y+4	; 0x04
    29cc:	00 97       	sbiw	r24, 0x00	; 0
    29ce:	39 f4       	brne	.+14     	; 0x29de <vTaskSuspend+0x2e>
    29d0:	80 91 09 04 	lds	r24, 0x0409
    29d4:	90 91 0a 04 	lds	r25, 0x040A
    29d8:	9e 83       	std	Y+6, r25	; 0x06
    29da:	8d 83       	std	Y+5, r24	; 0x05
    29dc:	04 c0       	rjmp	.+8      	; 0x29e6 <vTaskSuspend+0x36>
    29de:	8b 81       	ldd	r24, Y+3	; 0x03
    29e0:	9c 81       	ldd	r25, Y+4	; 0x04
    29e2:	9e 83       	std	Y+6, r25	; 0x06
    29e4:	8d 83       	std	Y+5, r24	; 0x05
    29e6:	8d 81       	ldd	r24, Y+5	; 0x05
    29e8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ea:	9a 83       	std	Y+2, r25	; 0x02
    29ec:	89 83       	std	Y+1, r24	; 0x01

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    29ee:	89 81       	ldd	r24, Y+1	; 0x01
    29f0:	9a 81       	ldd	r25, Y+2	; 0x02
    29f2:	02 96       	adiw	r24, 0x02	; 2
    29f4:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    29f8:	e9 81       	ldd	r30, Y+1	; 0x01
    29fa:	fa 81       	ldd	r31, Y+2	; 0x02
    29fc:	84 89       	ldd	r24, Z+20	; 0x14
    29fe:	95 89       	ldd	r25, Z+21	; 0x15
    2a00:	00 97       	sbiw	r24, 0x00	; 0
    2a02:	29 f0       	breq	.+10     	; 0x2a0e <vTaskSuspend+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	9a 81       	ldd	r25, Y+2	; 0x02
    2a08:	0c 96       	adiw	r24, 0x0c	; 12
    2a0a:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
    2a10:	9a 81       	ldd	r25, Y+2	; 0x02
    2a12:	9c 01       	movw	r18, r24
    2a14:	2e 5f       	subi	r18, 0xFE	; 254
    2a16:	3f 4f       	sbci	r19, 0xFF	; 255
    2a18:	8f e6       	ldi	r24, 0x6F	; 111
    2a1a:	94 e0       	ldi	r25, 0x04	; 4
    2a1c:	b9 01       	movw	r22, r18
    2a1e:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    2a22:	0f 90       	pop	r0
    2a24:	0f be       	out	0x3f, r0	; 63

		if( xSchedulerRunning != pdFALSE )
    2a26:	80 91 10 04 	lds	r24, 0x0410
    2a2a:	88 23       	and	r24, r24
    2a2c:	39 f0       	breq	.+14     	; 0x2a3c <vTaskSuspend+0x8c>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	f8 94       	cli
    2a32:	0f 92       	push	r0
			{
				prvResetNextTaskUnblockTime();
    2a34:	0e 94 21 1b 	call	0x3642	; 0x3642 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    2a38:	0f 90       	pop	r0
    2a3a:	0f be       	out	0x3f, r0	; 63
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    2a3c:	20 91 09 04 	lds	r18, 0x0409
    2a40:	30 91 0a 04 	lds	r19, 0x040A
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	9a 81       	ldd	r25, Y+2	; 0x02
    2a48:	82 17       	cp	r24, r18
    2a4a:	93 07       	cpc	r25, r19
    2a4c:	a1 f4       	brne	.+40     	; 0x2a76 <vTaskSuspend+0xc6>
		{
			if( xSchedulerRunning != pdFALSE )
    2a4e:	80 91 10 04 	lds	r24, 0x0410
    2a52:	88 23       	and	r24, r24
    2a54:	19 f0       	breq	.+6      	; 0x2a5c <vTaskSuspend+0xac>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    2a56:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vPortYield>
    2a5a:	0d c0       	rjmp	.+26     	; 0x2a76 <vTaskSuspend+0xc6>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    2a5c:	90 91 6f 04 	lds	r25, 0x046F
    2a60:	80 91 0c 04 	lds	r24, 0x040C
    2a64:	98 17       	cp	r25, r24
    2a66:	29 f4       	brne	.+10     	; 0x2a72 <vTaskSuspend+0xc2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    2a68:	10 92 0a 04 	sts	0x040A, r1
    2a6c:	10 92 09 04 	sts	0x0409, r1
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <vTaskSuspend+0xc6>
				}
				else
				{
					vTaskSwitchContext();
    2a72:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2a76:	26 96       	adiw	r28, 0x06	; 6
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	f8 94       	cli
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	cd bf       	out	0x3d, r28	; 61
    2a82:	cf 91       	pop	r28
    2a84:	df 91       	pop	r29
    2a86:	08 95       	ret

00002a88 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    2a88:	df 93       	push	r29
    2a8a:	cf 93       	push	r28
    2a8c:	00 d0       	rcall	.+0      	; 0x2a8e <prvTaskIsTaskSuspended+0x6>
    2a8e:	00 d0       	rcall	.+0      	; 0x2a90 <prvTaskIsTaskSuspended+0x8>
    2a90:	0f 92       	push	r0
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	9d 83       	std	Y+5, r25	; 0x05
    2a98:	8c 83       	std	Y+4, r24	; 0x04
	BaseType_t xReturn = pdFALSE;
    2a9a:	1b 82       	std	Y+3, r1	; 0x03
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
    2a9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2aa0:	9a 83       	std	Y+2, r25	; 0x02
    2aa2:	89 83       	std	Y+1, r24	; 0x01

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    2aa4:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa6:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa8:	82 85       	ldd	r24, Z+10	; 0x0a
    2aaa:	93 85       	ldd	r25, Z+11	; 0x0b
    2aac:	24 e0       	ldi	r18, 0x04	; 4
    2aae:	8f 36       	cpi	r24, 0x6F	; 111
    2ab0:	92 07       	cpc	r25, r18
    2ab2:	81 f4       	brne	.+32     	; 0x2ad4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    2ab4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab8:	84 89       	ldd	r24, Z+20	; 0x14
    2aba:	95 89       	ldd	r25, Z+21	; 0x15
    2abc:	24 e0       	ldi	r18, 0x04	; 4
    2abe:	8d 35       	cpi	r24, 0x5D	; 93
    2ac0:	92 07       	cpc	r25, r18
    2ac2:	41 f0       	breq	.+16     	; 0x2ad4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
    2ac4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac8:	84 89       	ldd	r24, Z+20	; 0x14
    2aca:	95 89       	ldd	r25, Z+21	; 0x15
    2acc:	00 97       	sbiw	r24, 0x00	; 0
    2ace:	11 f4       	brne	.+4      	; 0x2ad4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	8b 83       	std	Y+3, r24	; 0x03
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    2ad4:	8b 81       	ldd	r24, Y+3	; 0x03
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    2ad6:	0f 90       	pop	r0
    2ad8:	0f 90       	pop	r0
    2ada:	0f 90       	pop	r0
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	cf 91       	pop	r28
    2ae2:	df 91       	pop	r29
    2ae4:	08 95       	ret

00002ae6 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    2ae6:	df 93       	push	r29
    2ae8:	cf 93       	push	r28
    2aea:	00 d0       	rcall	.+0      	; 0x2aec <vTaskResume+0x6>
    2aec:	00 d0       	rcall	.+0      	; 0x2aee <vTaskResume+0x8>
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
    2af2:	9c 83       	std	Y+4, r25	; 0x04
    2af4:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    2af6:	8b 81       	ldd	r24, Y+3	; 0x03
    2af8:	9c 81       	ldd	r25, Y+4	; 0x04
    2afa:	9a 83       	std	Y+2, r25	; 0x02
    2afc:	89 83       	std	Y+1, r24	; 0x01
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	9a 81       	ldd	r25, Y+2	; 0x02
    2b02:	00 97       	sbiw	r24, 0x00	; 0
    2b04:	09 f4       	brne	.+2      	; 0x2b08 <vTaskResume+0x22>
    2b06:	4c c0       	rjmp	.+152    	; 0x2ba0 <vTaskResume+0xba>
    2b08:	20 91 09 04 	lds	r18, 0x0409
    2b0c:	30 91 0a 04 	lds	r19, 0x040A
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	9a 81       	ldd	r25, Y+2	; 0x02
    2b14:	82 17       	cp	r24, r18
    2b16:	93 07       	cpc	r25, r19
    2b18:	09 f4       	brne	.+2      	; 0x2b1c <vTaskResume+0x36>
    2b1a:	42 c0       	rjmp	.+132    	; 0x2ba0 <vTaskResume+0xba>
		{
			taskENTER_CRITICAL();
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	f8 94       	cli
    2b20:	0f 92       	push	r0
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	9a 81       	ldd	r25, Y+2	; 0x02
    2b26:	0e 94 44 15 	call	0x2a88	; 0x2a88 <prvTaskIsTaskSuspended>
    2b2a:	88 23       	and	r24, r24
    2b2c:	b9 f1       	breq	.+110    	; 0x2b9c <vTaskResume+0xb6>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	9a 81       	ldd	r25, Y+2	; 0x02
    2b32:	02 96       	adiw	r24, 0x02	; 2
    2b34:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    2b38:	e9 81       	ldd	r30, Y+1	; 0x01
    2b3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b3c:	96 89       	ldd	r25, Z+22	; 0x16
    2b3e:	80 91 0f 04 	lds	r24, 0x040F
    2b42:	89 17       	cp	r24, r25
    2b44:	28 f4       	brcc	.+10     	; 0x2b50 <vTaskResume+0x6a>
    2b46:	e9 81       	ldd	r30, Y+1	; 0x01
    2b48:	fa 81       	ldd	r31, Y+2	; 0x02
    2b4a:	86 89       	ldd	r24, Z+22	; 0x16
    2b4c:	80 93 0f 04 	sts	0x040F, r24
    2b50:	e9 81       	ldd	r30, Y+1	; 0x01
    2b52:	fa 81       	ldd	r31, Y+2	; 0x02
    2b54:	86 89       	ldd	r24, Z+22	; 0x16
    2b56:	28 2f       	mov	r18, r24
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	c9 01       	movw	r24, r18
    2b5c:	88 0f       	add	r24, r24
    2b5e:	99 1f       	adc	r25, r25
    2b60:	88 0f       	add	r24, r24
    2b62:	99 1f       	adc	r25, r25
    2b64:	88 0f       	add	r24, r24
    2b66:	99 1f       	adc	r25, r25
    2b68:	82 0f       	add	r24, r18
    2b6a:	93 1f       	adc	r25, r19
    2b6c:	ac 01       	movw	r20, r24
    2b6e:	46 5e       	subi	r20, 0xE6	; 230
    2b70:	5b 4f       	sbci	r21, 0xFB	; 251
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
    2b74:	9a 81       	ldd	r25, Y+2	; 0x02
    2b76:	9c 01       	movw	r18, r24
    2b78:	2e 5f       	subi	r18, 0xFE	; 254
    2b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b7c:	ca 01       	movw	r24, r20
    2b7e:	b9 01       	movw	r22, r18
    2b80:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2b84:	e9 81       	ldd	r30, Y+1	; 0x01
    2b86:	fa 81       	ldd	r31, Y+2	; 0x02
    2b88:	96 89       	ldd	r25, Z+22	; 0x16
    2b8a:	e0 91 09 04 	lds	r30, 0x0409
    2b8e:	f0 91 0a 04 	lds	r31, 0x040A
    2b92:	86 89       	ldd	r24, Z+22	; 0x16
    2b94:	98 17       	cp	r25, r24
    2b96:	10 f0       	brcs	.+4      	; 0x2b9c <vTaskResume+0xb6>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    2b98:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    2b9c:	0f 90       	pop	r0
    2b9e:	0f be       	out	0x3f, r0	; 63
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2ba0:	0f 90       	pop	r0
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	0f 90       	pop	r0
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	08 95       	ret

00002bae <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	00 d0       	rcall	.+0      	; 0x2bb4 <xTaskResumeFromISR+0x6>
    2bb4:	00 d0       	rcall	.+0      	; 0x2bb6 <xTaskResumeFromISR+0x8>
    2bb6:	00 d0       	rcall	.+0      	; 0x2bb8 <xTaskResumeFromISR+0xa>
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
    2bbc:	9e 83       	std	Y+6, r25	; 0x06
    2bbe:	8d 83       	std	Y+5, r24	; 0x05
	BaseType_t xYieldRequired = pdFALSE;
    2bc0:	1c 82       	std	Y+4, r1	; 0x04
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    2bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc6:	9b 83       	std	Y+3, r25	; 0x03
    2bc8:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2bca:	19 82       	std	Y+1, r1	; 0x01
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    2bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bce:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd0:	0e 94 44 15 	call	0x2a88	; 0x2a88 <prvTaskIsTaskSuspended>
    2bd4:	88 23       	and	r24, r24
    2bd6:	09 f4       	brne	.+2      	; 0x2bda <xTaskResumeFromISR+0x2c>
    2bd8:	46 c0       	rjmp	.+140    	; 0x2c66 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2bda:	80 91 19 04 	lds	r24, 0x0419
    2bde:	88 23       	and	r24, r24
    2be0:	c1 f5       	brne	.+112    	; 0x2c52 <xTaskResumeFromISR+0xa4>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2be2:	ea 81       	ldd	r30, Y+2	; 0x02
    2be4:	fb 81       	ldd	r31, Y+3	; 0x03
    2be6:	96 89       	ldd	r25, Z+22	; 0x16
    2be8:	e0 91 09 04 	lds	r30, 0x0409
    2bec:	f0 91 0a 04 	lds	r31, 0x040A
    2bf0:	86 89       	ldd	r24, Z+22	; 0x16
    2bf2:	98 17       	cp	r25, r24
    2bf4:	10 f0       	brcs	.+4      	; 0x2bfa <xTaskResumeFromISR+0x4c>
					{
						xYieldRequired = pdTRUE;
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	8c 83       	std	Y+4, r24	; 0x04
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bfe:	02 96       	adiw	r24, 0x02	; 2
    2c00:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    2c04:	ea 81       	ldd	r30, Y+2	; 0x02
    2c06:	fb 81       	ldd	r31, Y+3	; 0x03
    2c08:	96 89       	ldd	r25, Z+22	; 0x16
    2c0a:	80 91 0f 04 	lds	r24, 0x040F
    2c0e:	89 17       	cp	r24, r25
    2c10:	28 f4       	brcc	.+10     	; 0x2c1c <xTaskResumeFromISR+0x6e>
    2c12:	ea 81       	ldd	r30, Y+2	; 0x02
    2c14:	fb 81       	ldd	r31, Y+3	; 0x03
    2c16:	86 89       	ldd	r24, Z+22	; 0x16
    2c18:	80 93 0f 04 	sts	0x040F, r24
    2c1c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c1e:	fb 81       	ldd	r31, Y+3	; 0x03
    2c20:	86 89       	ldd	r24, Z+22	; 0x16
    2c22:	28 2f       	mov	r18, r24
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	c9 01       	movw	r24, r18
    2c28:	88 0f       	add	r24, r24
    2c2a:	99 1f       	adc	r25, r25
    2c2c:	88 0f       	add	r24, r24
    2c2e:	99 1f       	adc	r25, r25
    2c30:	88 0f       	add	r24, r24
    2c32:	99 1f       	adc	r25, r25
    2c34:	82 0f       	add	r24, r18
    2c36:	93 1f       	adc	r25, r19
    2c38:	ac 01       	movw	r20, r24
    2c3a:	46 5e       	subi	r20, 0xE6	; 230
    2c3c:	5b 4f       	sbci	r21, 0xFB	; 251
    2c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c40:	9b 81       	ldd	r25, Y+3	; 0x03
    2c42:	9c 01       	movw	r18, r24
    2c44:	2e 5f       	subi	r18, 0xFE	; 254
    2c46:	3f 4f       	sbci	r19, 0xFF	; 255
    2c48:	ca 01       	movw	r24, r20
    2c4a:	b9 01       	movw	r22, r18
    2c4c:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInsertEnd>
    2c50:	0a c0       	rjmp	.+20     	; 0x2c66 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    2c52:	8a 81       	ldd	r24, Y+2	; 0x02
    2c54:	9b 81       	ldd	r25, Y+3	; 0x03
    2c56:	9c 01       	movw	r18, r24
    2c58:	24 5f       	subi	r18, 0xF4	; 244
    2c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5c:	8d e5       	ldi	r24, 0x5D	; 93
    2c5e:	94 e0       	ldi	r25, 0x04	; 4
    2c60:	b9 01       	movw	r22, r18
    2c62:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
    2c66:	8c 81       	ldd	r24, Y+4	; 0x04
	}
    2c68:	26 96       	adiw	r28, 0x06	; 6
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	f8 94       	cli
    2c6e:	de bf       	out	0x3e, r29	; 62
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	cd bf       	out	0x3d, r28	; 61
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	08 95       	ret

00002c7a <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    2c7a:	ef 92       	push	r14
    2c7c:	ff 92       	push	r15
    2c7e:	0f 93       	push	r16
    2c80:	df 93       	push	r29
    2c82:	cf 93       	push	r28
    2c84:	0f 92       	push	r0
    2c86:	cd b7       	in	r28, 0x3d	; 61
    2c88:	de b7       	in	r29, 0x3e	; 62
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    2c8a:	8b e7       	ldi	r24, 0x7B	; 123
    2c8c:	9a e1       	ldi	r25, 0x1A	; 26
    2c8e:	21 e7       	ldi	r18, 0x71	; 113
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	e7 e1       	ldi	r30, 0x17	; 23
    2c94:	f4 e0       	ldi	r31, 0x04	; 4
    2c96:	b9 01       	movw	r22, r18
    2c98:	48 ec       	ldi	r20, 0xC8	; 200
    2c9a:	50 e0       	ldi	r21, 0x00	; 0
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	00 e0       	ldi	r16, 0x00	; 0
    2ca2:	7f 01       	movw	r14, r30
    2ca4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <xTaskCreate>
    2ca8:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	81 30       	cpi	r24, 0x01	; 1
    2cae:	81 f4       	brne	.+32     	; 0x2cd0 <vTaskStartScheduler+0x56>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    2cb0:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    2cb2:	8f ef       	ldi	r24, 0xFF	; 255
    2cb4:	9f ef       	ldi	r25, 0xFF	; 255
    2cb6:	90 93 16 04 	sts	0x0416, r25
    2cba:	80 93 15 04 	sts	0x0415, r24
		xSchedulerRunning = pdTRUE;
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	80 93 10 04 	sts	0x0410, r24
		xTickCount = ( TickType_t ) 0U;
    2cc4:	10 92 0e 04 	sts	0x040E, r1
    2cc8:	10 92 0d 04 	sts	0x040D, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    2ccc:	0e 94 99 08 	call	0x1132	; 0x1132 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    2cd0:	0f 90       	pop	r0
    2cd2:	cf 91       	pop	r28
    2cd4:	df 91       	pop	r29
    2cd6:	0f 91       	pop	r16
    2cd8:	ff 90       	pop	r15
    2cda:	ef 90       	pop	r14
    2cdc:	08 95       	ret

00002cde <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    2cde:	df 93       	push	r29
    2ce0:	cf 93       	push	r28
    2ce2:	cd b7       	in	r28, 0x3d	; 61
    2ce4:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    2ce6:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    2ce8:	10 92 10 04 	sts	0x0410, r1
	vPortEndScheduler();
    2cec:	0e 94 ce 08 	call	0x119c	; 0x119c <vPortEndScheduler>
}
    2cf0:	cf 91       	pop	r28
    2cf2:	df 91       	pop	r29
    2cf4:	08 95       	ret

00002cf6 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    2cfe:	80 91 19 04 	lds	r24, 0x0419
    2d02:	8f 5f       	subi	r24, 0xFF	; 255
    2d04:	80 93 19 04 	sts	0x0419, r24
}
    2d08:	cf 91       	pop	r28
    2d0a:	df 91       	pop	r29
    2d0c:	08 95       	ret

00002d0e <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    2d0e:	df 93       	push	r29
    2d10:	cf 93       	push	r28
    2d12:	00 d0       	rcall	.+0      	; 0x2d14 <xTaskResumeAll+0x6>
    2d14:	00 d0       	rcall	.+0      	; 0x2d16 <xTaskResumeAll+0x8>
    2d16:	cd b7       	in	r28, 0x3d	; 61
    2d18:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB = NULL;
    2d1a:	1c 82       	std	Y+4, r1	; 0x04
    2d1c:	1b 82       	std	Y+3, r1	; 0x03
BaseType_t xAlreadyYielded = pdFALSE;
    2d1e:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	f8 94       	cli
    2d24:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    2d26:	80 91 19 04 	lds	r24, 0x0419
    2d2a:	81 50       	subi	r24, 0x01	; 1
    2d2c:	80 93 19 04 	sts	0x0419, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2d30:	80 91 19 04 	lds	r24, 0x0419
    2d34:	88 23       	and	r24, r24
    2d36:	09 f0       	breq	.+2      	; 0x2d3a <xTaskResumeAll+0x2c>
    2d38:	73 c0       	rjmp	.+230    	; 0x2e20 <xTaskResumeAll+0x112>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    2d3a:	80 91 0c 04 	lds	r24, 0x040C
    2d3e:	88 23       	and	r24, r24
    2d40:	09 f4       	brne	.+2      	; 0x2d44 <xTaskResumeAll+0x36>
    2d42:	6e c0       	rjmp	.+220    	; 0x2e20 <xTaskResumeAll+0x112>
    2d44:	45 c0       	rjmp	.+138    	; 0x2dd0 <xTaskResumeAll+0xc2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    2d46:	e0 91 62 04 	lds	r30, 0x0462
    2d4a:	f0 91 63 04 	lds	r31, 0x0463
    2d4e:	86 81       	ldd	r24, Z+6	; 0x06
    2d50:	97 81       	ldd	r25, Z+7	; 0x07
    2d52:	9c 83       	std	Y+4, r25	; 0x04
    2d54:	8b 83       	std	Y+3, r24	; 0x03
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2d56:	8b 81       	ldd	r24, Y+3	; 0x03
    2d58:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5a:	0c 96       	adiw	r24, 0x0c	; 12
    2d5c:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2d60:	8b 81       	ldd	r24, Y+3	; 0x03
    2d62:	9c 81       	ldd	r25, Y+4	; 0x04
    2d64:	02 96       	adiw	r24, 0x02	; 2
    2d66:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    2d6a:	eb 81       	ldd	r30, Y+3	; 0x03
    2d6c:	fc 81       	ldd	r31, Y+4	; 0x04
    2d6e:	96 89       	ldd	r25, Z+22	; 0x16
    2d70:	80 91 0f 04 	lds	r24, 0x040F
    2d74:	89 17       	cp	r24, r25
    2d76:	28 f4       	brcc	.+10     	; 0x2d82 <xTaskResumeAll+0x74>
    2d78:	eb 81       	ldd	r30, Y+3	; 0x03
    2d7a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d7c:	86 89       	ldd	r24, Z+22	; 0x16
    2d7e:	80 93 0f 04 	sts	0x040F, r24
    2d82:	eb 81       	ldd	r30, Y+3	; 0x03
    2d84:	fc 81       	ldd	r31, Y+4	; 0x04
    2d86:	86 89       	ldd	r24, Z+22	; 0x16
    2d88:	28 2f       	mov	r18, r24
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	c9 01       	movw	r24, r18
    2d8e:	88 0f       	add	r24, r24
    2d90:	99 1f       	adc	r25, r25
    2d92:	88 0f       	add	r24, r24
    2d94:	99 1f       	adc	r25, r25
    2d96:	88 0f       	add	r24, r24
    2d98:	99 1f       	adc	r25, r25
    2d9a:	82 0f       	add	r24, r18
    2d9c:	93 1f       	adc	r25, r19
    2d9e:	ac 01       	movw	r20, r24
    2da0:	46 5e       	subi	r20, 0xE6	; 230
    2da2:	5b 4f       	sbci	r21, 0xFB	; 251
    2da4:	8b 81       	ldd	r24, Y+3	; 0x03
    2da6:	9c 81       	ldd	r25, Y+4	; 0x04
    2da8:	9c 01       	movw	r18, r24
    2daa:	2e 5f       	subi	r18, 0xFE	; 254
    2dac:	3f 4f       	sbci	r19, 0xFF	; 255
    2dae:	ca 01       	movw	r24, r20
    2db0:	b9 01       	movw	r22, r18
    2db2:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2db6:	eb 81       	ldd	r30, Y+3	; 0x03
    2db8:	fc 81       	ldd	r31, Y+4	; 0x04
    2dba:	96 89       	ldd	r25, Z+22	; 0x16
    2dbc:	e0 91 09 04 	lds	r30, 0x0409
    2dc0:	f0 91 0a 04 	lds	r31, 0x040A
    2dc4:	86 89       	ldd	r24, Z+22	; 0x16
    2dc6:	98 17       	cp	r25, r24
    2dc8:	18 f0       	brcs	.+6      	; 0x2dd0 <xTaskResumeAll+0xc2>
					{
						xYieldPending = pdTRUE;
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	80 93 12 04 	sts	0x0412, r24
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2dd0:	80 91 5d 04 	lds	r24, 0x045D
    2dd4:	88 23       	and	r24, r24
    2dd6:	09 f0       	breq	.+2      	; 0x2dda <xTaskResumeAll+0xcc>
    2dd8:	b6 cf       	rjmp	.-148    	; 0x2d46 <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    2dda:	8b 81       	ldd	r24, Y+3	; 0x03
    2ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dde:	00 97       	sbiw	r24, 0x00	; 0
    2de0:	11 f0       	breq	.+4      	; 0x2de6 <xTaskResumeAll+0xd8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    2de2:	0e 94 21 1b 	call	0x3642	; 0x3642 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    2de6:	80 91 11 04 	lds	r24, 0x0411
    2dea:	89 83       	std	Y+1, r24	; 0x01

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    2dec:	89 81       	ldd	r24, Y+1	; 0x01
    2dee:	88 23       	and	r24, r24
    2df0:	79 f0       	breq	.+30     	; 0x2e10 <xTaskResumeAll+0x102>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    2df2:	0e 94 77 17 	call	0x2eee	; 0x2eee <xTaskIncrementTick>
    2df6:	88 23       	and	r24, r24
    2df8:	19 f0       	breq	.+6      	; 0x2e00 <xTaskResumeAll+0xf2>
							{
								xYieldPending = pdTRUE;
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	80 93 12 04 	sts	0x0412, r24
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	81 50       	subi	r24, 0x01	; 1
    2e04:	89 83       	std	Y+1, r24	; 0x01
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	88 23       	and	r24, r24
    2e0a:	99 f7       	brne	.-26     	; 0x2df2 <xTaskResumeAll+0xe4>

						uxPendedTicks = 0;
    2e0c:	10 92 11 04 	sts	0x0411, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    2e10:	80 91 12 04 	lds	r24, 0x0412
    2e14:	88 23       	and	r24, r24
    2e16:	21 f0       	breq	.+8      	; 0x2e20 <xTaskResumeAll+0x112>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	8a 83       	std	Y+2, r24	; 0x02
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    2e1c:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    2e20:	0f 90       	pop	r0
    2e22:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    2e24:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	0f 90       	pop	r0
    2e2c:	0f 90       	pop	r0
    2e2e:	cf 91       	pop	r28
    2e30:	df 91       	pop	r29
    2e32:	08 95       	ret

00002e34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    2e34:	df 93       	push	r29
    2e36:	cf 93       	push	r28
    2e38:	00 d0       	rcall	.+0      	; 0x2e3a <xTaskGetTickCount+0x6>
    2e3a:	cd b7       	in	r28, 0x3d	; 61
    2e3c:	de b7       	in	r29, 0x3e	; 62
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    2e3e:	0f b6       	in	r0, 0x3f	; 63
    2e40:	f8 94       	cli
    2e42:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    2e44:	80 91 0d 04 	lds	r24, 0x040D
    2e48:	90 91 0e 04 	lds	r25, 0x040E
    2e4c:	9a 83       	std	Y+2, r25	; 0x02
    2e4e:	89 83       	std	Y+1, r24	; 0x01
	}
	portTICK_TYPE_EXIT_CRITICAL();
    2e50:	0f 90       	pop	r0
    2e52:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	cf 91       	pop	r28
    2e5e:	df 91       	pop	r29
    2e60:	08 95       	ret

00002e62 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    2e62:	df 93       	push	r29
    2e64:	cf 93       	push	r28
    2e66:	00 d0       	rcall	.+0      	; 0x2e68 <xTaskGetTickCountFromISR+0x6>
    2e68:	0f 92       	push	r0
    2e6a:	cd b7       	in	r28, 0x3d	; 61
    2e6c:	de b7       	in	r29, 0x3e	; 62
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    2e6e:	19 82       	std	Y+1, r1	; 0x01
	{
		xReturn = xTickCount;
    2e70:	80 91 0d 04 	lds	r24, 0x040D
    2e74:	90 91 0e 04 	lds	r25, 0x040E
    2e78:	9b 83       	std	Y+3, r25	; 0x03
    2e7a:	8a 83       	std	Y+2, r24	; 0x02
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7e:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2e80:	0f 90       	pop	r0
    2e82:	0f 90       	pop	r0
    2e84:	0f 90       	pop	r0
    2e86:	cf 91       	pop	r28
    2e88:	df 91       	pop	r29
    2e8a:	08 95       	ret

00002e8c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    2e8c:	df 93       	push	r29
    2e8e:	cf 93       	push	r28
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    2e94:	80 91 0c 04 	lds	r24, 0x040C
}
    2e98:	cf 91       	pop	r28
    2e9a:	df 91       	pop	r29
    2e9c:	08 95       	ret

00002e9e <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    2e9e:	df 93       	push	r29
    2ea0:	cf 93       	push	r28
    2ea2:	00 d0       	rcall	.+0      	; 0x2ea4 <pcTaskGetName+0x6>
    2ea4:	00 d0       	rcall	.+0      	; 0x2ea6 <pcTaskGetName+0x8>
    2ea6:	00 d0       	rcall	.+0      	; 0x2ea8 <pcTaskGetName+0xa>
    2ea8:	cd b7       	in	r28, 0x3d	; 61
    2eaa:	de b7       	in	r29, 0x3e	; 62
    2eac:	9c 83       	std	Y+4, r25	; 0x04
    2eae:	8b 83       	std	Y+3, r24	; 0x03
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    2eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb4:	00 97       	sbiw	r24, 0x00	; 0
    2eb6:	39 f4       	brne	.+14     	; 0x2ec6 <pcTaskGetName+0x28>
    2eb8:	80 91 09 04 	lds	r24, 0x0409
    2ebc:	90 91 0a 04 	lds	r25, 0x040A
    2ec0:	9e 83       	std	Y+6, r25	; 0x06
    2ec2:	8d 83       	std	Y+5, r24	; 0x05
    2ec4:	04 c0       	rjmp	.+8      	; 0x2ece <pcTaskGetName+0x30>
    2ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eca:	9e 83       	std	Y+6, r25	; 0x06
    2ecc:	8d 83       	std	Y+5, r24	; 0x05
    2ece:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed2:	9a 83       	std	Y+2, r25	; 0x02
    2ed4:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eda:	49 96       	adiw	r24, 0x19	; 25
}
    2edc:	26 96       	adiw	r28, 0x06	; 6
    2ede:	0f b6       	in	r0, 0x3f	; 63
    2ee0:	f8 94       	cli
    2ee2:	de bf       	out	0x3e, r29	; 62
    2ee4:	0f be       	out	0x3f, r0	; 63
    2ee6:	cd bf       	out	0x3d, r28	; 61
    2ee8:	cf 91       	pop	r28
    2eea:	df 91       	pop	r29
    2eec:	08 95       	ret

00002eee <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    2eee:	df 93       	push	r29
    2ef0:	cf 93       	push	r28
    2ef2:	cd b7       	in	r28, 0x3d	; 61
    2ef4:	de b7       	in	r29, 0x3e	; 62
    2ef6:	29 97       	sbiw	r28, 0x09	; 9
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	f8 94       	cli
    2efc:	de bf       	out	0x3e, r29	; 62
    2efe:	0f be       	out	0x3f, r0	; 63
    2f00:	cd bf       	out	0x3d, r28	; 61
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    2f02:	1d 82       	std	Y+5, r1	; 0x05

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2f04:	80 91 19 04 	lds	r24, 0x0419
    2f08:	88 23       	and	r24, r24
    2f0a:	09 f0       	breq	.+2      	; 0x2f0e <xTaskIncrementTick+0x20>
    2f0c:	c0 c0       	rjmp	.+384    	; 0x308e <xTaskIncrementTick+0x1a0>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    2f0e:	80 91 0d 04 	lds	r24, 0x040D
    2f12:	90 91 0e 04 	lds	r25, 0x040E
    2f16:	01 96       	adiw	r24, 0x01	; 1
    2f18:	9c 83       	std	Y+4, r25	; 0x04
    2f1a:	8b 83       	std	Y+3, r24	; 0x03

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    2f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f20:	90 93 0e 04 	sts	0x040E, r25
    2f24:	80 93 0d 04 	sts	0x040D, r24

		if( xConstTickCount == ( TickType_t ) 0U )
    2f28:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f2c:	00 97       	sbiw	r24, 0x00	; 0
    2f2e:	d9 f4       	brne	.+54     	; 0x2f66 <xTaskIncrementTick+0x78>
		{
			taskSWITCH_DELAYED_LISTS();
    2f30:	80 91 59 04 	lds	r24, 0x0459
    2f34:	90 91 5a 04 	lds	r25, 0x045A
    2f38:	9a 83       	std	Y+2, r25	; 0x02
    2f3a:	89 83       	std	Y+1, r24	; 0x01
    2f3c:	80 91 5b 04 	lds	r24, 0x045B
    2f40:	90 91 5c 04 	lds	r25, 0x045C
    2f44:	90 93 5a 04 	sts	0x045A, r25
    2f48:	80 93 59 04 	sts	0x0459, r24
    2f4c:	89 81       	ldd	r24, Y+1	; 0x01
    2f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f50:	90 93 5c 04 	sts	0x045C, r25
    2f54:	80 93 5b 04 	sts	0x045B, r24
    2f58:	80 91 13 04 	lds	r24, 0x0413
    2f5c:	8f 5f       	subi	r24, 0xFF	; 255
    2f5e:	80 93 13 04 	sts	0x0413, r24
    2f62:	0e 94 21 1b 	call	0x3642	; 0x3642 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    2f66:	20 91 15 04 	lds	r18, 0x0415
    2f6a:	30 91 16 04 	lds	r19, 0x0416
    2f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f70:	9c 81       	ldd	r25, Y+4	; 0x04
    2f72:	82 17       	cp	r24, r18
    2f74:	93 07       	cpc	r25, r19
    2f76:	08 f4       	brcc	.+2      	; 0x2f7a <xTaskIncrementTick+0x8c>
    2f78:	71 c0       	rjmp	.+226    	; 0x305c <xTaskIncrementTick+0x16e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2f7a:	e0 91 59 04 	lds	r30, 0x0459
    2f7e:	f0 91 5a 04 	lds	r31, 0x045A
    2f82:	80 81       	ld	r24, Z
    2f84:	88 23       	and	r24, r24
    2f86:	39 f4       	brne	.+14     	; 0x2f96 <xTaskIncrementTick+0xa8>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2f88:	8f ef       	ldi	r24, 0xFF	; 255
    2f8a:	9f ef       	ldi	r25, 0xFF	; 255
    2f8c:	90 93 16 04 	sts	0x0416, r25
    2f90:	80 93 15 04 	sts	0x0415, r24
    2f94:	63 c0       	rjmp	.+198    	; 0x305c <xTaskIncrementTick+0x16e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2f96:	e0 91 59 04 	lds	r30, 0x0459
    2f9a:	f0 91 5a 04 	lds	r31, 0x045A
    2f9e:	05 80       	ldd	r0, Z+5	; 0x05
    2fa0:	f6 81       	ldd	r31, Z+6	; 0x06
    2fa2:	e0 2d       	mov	r30, r0
    2fa4:	86 81       	ldd	r24, Z+6	; 0x06
    2fa6:	97 81       	ldd	r25, Z+7	; 0x07
    2fa8:	99 87       	std	Y+9, r25	; 0x09
    2faa:	88 87       	std	Y+8, r24	; 0x08
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    2fac:	e8 85       	ldd	r30, Y+8	; 0x08
    2fae:	f9 85       	ldd	r31, Y+9	; 0x09
    2fb0:	82 81       	ldd	r24, Z+2	; 0x02
    2fb2:	93 81       	ldd	r25, Z+3	; 0x03
    2fb4:	9f 83       	std	Y+7, r25	; 0x07
    2fb6:	8e 83       	std	Y+6, r24	; 0x06

					if( xConstTickCount < xItemValue )
    2fb8:	2b 81       	ldd	r18, Y+3	; 0x03
    2fba:	3c 81       	ldd	r19, Y+4	; 0x04
    2fbc:	8e 81       	ldd	r24, Y+6	; 0x06
    2fbe:	9f 81       	ldd	r25, Y+7	; 0x07
    2fc0:	28 17       	cp	r18, r24
    2fc2:	39 07       	cpc	r19, r25
    2fc4:	38 f4       	brcc	.+14     	; 0x2fd4 <xTaskIncrementTick+0xe6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    2fc6:	8e 81       	ldd	r24, Y+6	; 0x06
    2fc8:	9f 81       	ldd	r25, Y+7	; 0x07
    2fca:	90 93 16 04 	sts	0x0416, r25
    2fce:	80 93 15 04 	sts	0x0415, r24
    2fd2:	44 c0       	rjmp	.+136    	; 0x305c <xTaskIncrementTick+0x16e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2fd4:	88 85       	ldd	r24, Y+8	; 0x08
    2fd6:	99 85       	ldd	r25, Y+9	; 0x09
    2fd8:	02 96       	adiw	r24, 0x02	; 2
    2fda:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2fde:	e8 85       	ldd	r30, Y+8	; 0x08
    2fe0:	f9 85       	ldd	r31, Y+9	; 0x09
    2fe2:	84 89       	ldd	r24, Z+20	; 0x14
    2fe4:	95 89       	ldd	r25, Z+21	; 0x15
    2fe6:	00 97       	sbiw	r24, 0x00	; 0
    2fe8:	29 f0       	breq	.+10     	; 0x2ff4 <xTaskIncrementTick+0x106>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2fea:	88 85       	ldd	r24, Y+8	; 0x08
    2fec:	99 85       	ldd	r25, Y+9	; 0x09
    2fee:	0c 96       	adiw	r24, 0x0c	; 12
    2ff0:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    2ff4:	e8 85       	ldd	r30, Y+8	; 0x08
    2ff6:	f9 85       	ldd	r31, Y+9	; 0x09
    2ff8:	96 89       	ldd	r25, Z+22	; 0x16
    2ffa:	80 91 0f 04 	lds	r24, 0x040F
    2ffe:	89 17       	cp	r24, r25
    3000:	28 f4       	brcc	.+10     	; 0x300c <xTaskIncrementTick+0x11e>
    3002:	e8 85       	ldd	r30, Y+8	; 0x08
    3004:	f9 85       	ldd	r31, Y+9	; 0x09
    3006:	86 89       	ldd	r24, Z+22	; 0x16
    3008:	80 93 0f 04 	sts	0x040F, r24
    300c:	e8 85       	ldd	r30, Y+8	; 0x08
    300e:	f9 85       	ldd	r31, Y+9	; 0x09
    3010:	86 89       	ldd	r24, Z+22	; 0x16
    3012:	28 2f       	mov	r18, r24
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	c9 01       	movw	r24, r18
    3018:	88 0f       	add	r24, r24
    301a:	99 1f       	adc	r25, r25
    301c:	88 0f       	add	r24, r24
    301e:	99 1f       	adc	r25, r25
    3020:	88 0f       	add	r24, r24
    3022:	99 1f       	adc	r25, r25
    3024:	82 0f       	add	r24, r18
    3026:	93 1f       	adc	r25, r19
    3028:	ac 01       	movw	r20, r24
    302a:	46 5e       	subi	r20, 0xE6	; 230
    302c:	5b 4f       	sbci	r21, 0xFB	; 251
    302e:	88 85       	ldd	r24, Y+8	; 0x08
    3030:	99 85       	ldd	r25, Y+9	; 0x09
    3032:	9c 01       	movw	r18, r24
    3034:	2e 5f       	subi	r18, 0xFE	; 254
    3036:	3f 4f       	sbci	r19, 0xFF	; 255
    3038:	ca 01       	movw	r24, r20
    303a:	b9 01       	movw	r22, r18
    303c:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3040:	e8 85       	ldd	r30, Y+8	; 0x08
    3042:	f9 85       	ldd	r31, Y+9	; 0x09
    3044:	96 89       	ldd	r25, Z+22	; 0x16
    3046:	e0 91 09 04 	lds	r30, 0x0409
    304a:	f0 91 0a 04 	lds	r31, 0x040A
    304e:	86 89       	ldd	r24, Z+22	; 0x16
    3050:	98 17       	cp	r25, r24
    3052:	08 f4       	brcc	.+2      	; 0x3056 <xTaskIncrementTick+0x168>
    3054:	92 cf       	rjmp	.-220    	; 0x2f7a <xTaskIncrementTick+0x8c>
						{
							xSwitchRequired = pdTRUE;
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	8d 83       	std	Y+5, r24	; 0x05
    305a:	8f cf       	rjmp	.-226    	; 0x2f7a <xTaskIncrementTick+0x8c>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    305c:	e0 91 09 04 	lds	r30, 0x0409
    3060:	f0 91 0a 04 	lds	r31, 0x040A
    3064:	86 89       	ldd	r24, Z+22	; 0x16
    3066:	28 2f       	mov	r18, r24
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	c9 01       	movw	r24, r18
    306c:	88 0f       	add	r24, r24
    306e:	99 1f       	adc	r25, r25
    3070:	88 0f       	add	r24, r24
    3072:	99 1f       	adc	r25, r25
    3074:	88 0f       	add	r24, r24
    3076:	99 1f       	adc	r25, r25
    3078:	82 0f       	add	r24, r18
    307a:	93 1f       	adc	r25, r19
    307c:	fc 01       	movw	r30, r24
    307e:	e6 5e       	subi	r30, 0xE6	; 230
    3080:	fb 4f       	sbci	r31, 0xFB	; 251
    3082:	80 81       	ld	r24, Z
    3084:	82 30       	cpi	r24, 0x02	; 2
    3086:	40 f0       	brcs	.+16     	; 0x3098 <xTaskIncrementTick+0x1aa>
			{
				xSwitchRequired = pdTRUE;
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	8d 83       	std	Y+5, r24	; 0x05
    308c:	05 c0       	rjmp	.+10     	; 0x3098 <xTaskIncrementTick+0x1aa>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    308e:	80 91 11 04 	lds	r24, 0x0411
    3092:	8f 5f       	subi	r24, 0xFF	; 255
    3094:	80 93 11 04 	sts	0x0411, r24
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    3098:	80 91 12 04 	lds	r24, 0x0412
    309c:	88 23       	and	r24, r24
    309e:	11 f0       	breq	.+4      	; 0x30a4 <xTaskIncrementTick+0x1b6>
		{
			xSwitchRequired = pdTRUE;
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	8d 83       	std	Y+5, r24	; 0x05
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    30a4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    30a6:	29 96       	adiw	r28, 0x09	; 9
    30a8:	0f b6       	in	r0, 0x3f	; 63
    30aa:	f8 94       	cli
    30ac:	de bf       	out	0x3e, r29	; 62
    30ae:	0f be       	out	0x3f, r0	; 63
    30b0:	cd bf       	out	0x3d, r28	; 61
    30b2:	cf 91       	pop	r28
    30b4:	df 91       	pop	r29
    30b6:	08 95       	ret

000030b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    30b8:	df 93       	push	r29
    30ba:	cf 93       	push	r28
    30bc:	00 d0       	rcall	.+0      	; 0x30be <vTaskSwitchContext+0x6>
    30be:	0f 92       	push	r0
    30c0:	cd b7       	in	r28, 0x3d	; 61
    30c2:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    30c4:	80 91 19 04 	lds	r24, 0x0419
    30c8:	88 23       	and	r24, r24
    30ca:	21 f0       	breq	.+8      	; 0x30d4 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	80 93 12 04 	sts	0x0412, r24
    30d2:	59 c0       	rjmp	.+178    	; 0x3186 <vTaskSwitchContext+0xce>
	}
	else
	{
		xYieldPending = pdFALSE;
    30d4:	10 92 12 04 	sts	0x0412, r1
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    30d8:	80 91 0f 04 	lds	r24, 0x040F
    30dc:	8b 83       	std	Y+3, r24	; 0x03
    30de:	03 c0       	rjmp	.+6      	; 0x30e6 <vTaskSwitchContext+0x2e>
    30e0:	8b 81       	ldd	r24, Y+3	; 0x03
    30e2:	81 50       	subi	r24, 0x01	; 1
    30e4:	8b 83       	std	Y+3, r24	; 0x03
    30e6:	8b 81       	ldd	r24, Y+3	; 0x03
    30e8:	28 2f       	mov	r18, r24
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	c9 01       	movw	r24, r18
    30ee:	88 0f       	add	r24, r24
    30f0:	99 1f       	adc	r25, r25
    30f2:	88 0f       	add	r24, r24
    30f4:	99 1f       	adc	r25, r25
    30f6:	88 0f       	add	r24, r24
    30f8:	99 1f       	adc	r25, r25
    30fa:	82 0f       	add	r24, r18
    30fc:	93 1f       	adc	r25, r19
    30fe:	fc 01       	movw	r30, r24
    3100:	e6 5e       	subi	r30, 0xE6	; 230
    3102:	fb 4f       	sbci	r31, 0xFB	; 251
    3104:	80 81       	ld	r24, Z
    3106:	88 23       	and	r24, r24
    3108:	59 f3       	breq	.-42     	; 0x30e0 <vTaskSwitchContext+0x28>
    310a:	8b 81       	ldd	r24, Y+3	; 0x03
    310c:	28 2f       	mov	r18, r24
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	c9 01       	movw	r24, r18
    3112:	88 0f       	add	r24, r24
    3114:	99 1f       	adc	r25, r25
    3116:	88 0f       	add	r24, r24
    3118:	99 1f       	adc	r25, r25
    311a:	88 0f       	add	r24, r24
    311c:	99 1f       	adc	r25, r25
    311e:	82 0f       	add	r24, r18
    3120:	93 1f       	adc	r25, r19
    3122:	86 5e       	subi	r24, 0xE6	; 230
    3124:	9b 4f       	sbci	r25, 0xFB	; 251
    3126:	9a 83       	std	Y+2, r25	; 0x02
    3128:	89 83       	std	Y+1, r24	; 0x01
    312a:	e9 81       	ldd	r30, Y+1	; 0x01
    312c:	fa 81       	ldd	r31, Y+2	; 0x02
    312e:	01 80       	ldd	r0, Z+1	; 0x01
    3130:	f2 81       	ldd	r31, Z+2	; 0x02
    3132:	e0 2d       	mov	r30, r0
    3134:	82 81       	ldd	r24, Z+2	; 0x02
    3136:	93 81       	ldd	r25, Z+3	; 0x03
    3138:	e9 81       	ldd	r30, Y+1	; 0x01
    313a:	fa 81       	ldd	r31, Y+2	; 0x02
    313c:	92 83       	std	Z+2, r25	; 0x02
    313e:	81 83       	std	Z+1, r24	; 0x01
    3140:	e9 81       	ldd	r30, Y+1	; 0x01
    3142:	fa 81       	ldd	r31, Y+2	; 0x02
    3144:	21 81       	ldd	r18, Z+1	; 0x01
    3146:	32 81       	ldd	r19, Z+2	; 0x02
    3148:	89 81       	ldd	r24, Y+1	; 0x01
    314a:	9a 81       	ldd	r25, Y+2	; 0x02
    314c:	03 96       	adiw	r24, 0x03	; 3
    314e:	28 17       	cp	r18, r24
    3150:	39 07       	cpc	r19, r25
    3152:	59 f4       	brne	.+22     	; 0x316a <vTaskSwitchContext+0xb2>
    3154:	e9 81       	ldd	r30, Y+1	; 0x01
    3156:	fa 81       	ldd	r31, Y+2	; 0x02
    3158:	01 80       	ldd	r0, Z+1	; 0x01
    315a:	f2 81       	ldd	r31, Z+2	; 0x02
    315c:	e0 2d       	mov	r30, r0
    315e:	82 81       	ldd	r24, Z+2	; 0x02
    3160:	93 81       	ldd	r25, Z+3	; 0x03
    3162:	e9 81       	ldd	r30, Y+1	; 0x01
    3164:	fa 81       	ldd	r31, Y+2	; 0x02
    3166:	92 83       	std	Z+2, r25	; 0x02
    3168:	81 83       	std	Z+1, r24	; 0x01
    316a:	e9 81       	ldd	r30, Y+1	; 0x01
    316c:	fa 81       	ldd	r31, Y+2	; 0x02
    316e:	01 80       	ldd	r0, Z+1	; 0x01
    3170:	f2 81       	ldd	r31, Z+2	; 0x02
    3172:	e0 2d       	mov	r30, r0
    3174:	86 81       	ldd	r24, Z+6	; 0x06
    3176:	97 81       	ldd	r25, Z+7	; 0x07
    3178:	90 93 0a 04 	sts	0x040A, r25
    317c:	80 93 09 04 	sts	0x0409, r24
    3180:	8b 81       	ldd	r24, Y+3	; 0x03
    3182:	80 93 0f 04 	sts	0x040F, r24
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    3186:	0f 90       	pop	r0
    3188:	0f 90       	pop	r0
    318a:	0f 90       	pop	r0
    318c:	cf 91       	pop	r28
    318e:	df 91       	pop	r29
    3190:	08 95       	ret

00003192 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    3192:	df 93       	push	r29
    3194:	cf 93       	push	r28
    3196:	00 d0       	rcall	.+0      	; 0x3198 <vTaskPlaceOnEventList+0x6>
    3198:	00 d0       	rcall	.+0      	; 0x319a <vTaskPlaceOnEventList+0x8>
    319a:	cd b7       	in	r28, 0x3d	; 61
    319c:	de b7       	in	r29, 0x3e	; 62
    319e:	9a 83       	std	Y+2, r25	; 0x02
    31a0:	89 83       	std	Y+1, r24	; 0x01
    31a2:	7c 83       	std	Y+4, r23	; 0x04
    31a4:	6b 83       	std	Y+3, r22	; 0x03

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    31a6:	80 91 09 04 	lds	r24, 0x0409
    31aa:	90 91 0a 04 	lds	r25, 0x040A
    31ae:	9c 01       	movw	r18, r24
    31b0:	24 5f       	subi	r18, 0xF4	; 244
    31b2:	3f 4f       	sbci	r19, 0xFF	; 255
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	9a 81       	ldd	r25, Y+2	; 0x02
    31b8:	b9 01       	movw	r22, r18
    31ba:	0e 94 5e 06 	call	0xcbc	; 0xcbc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    31be:	8b 81       	ldd	r24, Y+3	; 0x03
    31c0:	9c 81       	ldd	r25, Y+4	; 0x04
    31c2:	61 e0       	ldi	r22, 0x01	; 1
    31c4:	0e 94 44 20 	call	0x4088	; 0x4088 <prvAddCurrentTaskToDelayedList>
}
    31c8:	0f 90       	pop	r0
    31ca:	0f 90       	pop	r0
    31cc:	0f 90       	pop	r0
    31ce:	0f 90       	pop	r0
    31d0:	cf 91       	pop	r28
    31d2:	df 91       	pop	r29
    31d4:	08 95       	ret

000031d6 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    31d6:	df 93       	push	r29
    31d8:	cf 93       	push	r28
    31da:	00 d0       	rcall	.+0      	; 0x31dc <vTaskPlaceOnUnorderedEventList+0x6>
    31dc:	00 d0       	rcall	.+0      	; 0x31de <vTaskPlaceOnUnorderedEventList+0x8>
    31de:	00 d0       	rcall	.+0      	; 0x31e0 <vTaskPlaceOnUnorderedEventList+0xa>
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
    31e4:	9a 83       	std	Y+2, r25	; 0x02
    31e6:	89 83       	std	Y+1, r24	; 0x01
    31e8:	7c 83       	std	Y+4, r23	; 0x04
    31ea:	6b 83       	std	Y+3, r22	; 0x03
    31ec:	5e 83       	std	Y+6, r21	; 0x06
    31ee:	4d 83       	std	Y+5, r20	; 0x05
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    31f0:	e0 91 09 04 	lds	r30, 0x0409
    31f4:	f0 91 0a 04 	lds	r31, 0x040A
    31f8:	8b 81       	ldd	r24, Y+3	; 0x03
    31fa:	9c 81       	ldd	r25, Y+4	; 0x04
    31fc:	90 68       	ori	r25, 0x80	; 128
    31fe:	95 87       	std	Z+13, r25	; 0x0d
    3200:	84 87       	std	Z+12, r24	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3202:	80 91 09 04 	lds	r24, 0x0409
    3206:	90 91 0a 04 	lds	r25, 0x040A
    320a:	9c 01       	movw	r18, r24
    320c:	24 5f       	subi	r18, 0xF4	; 244
    320e:	3f 4f       	sbci	r19, 0xFF	; 255
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	9a 81       	ldd	r25, Y+2	; 0x02
    3214:	b9 01       	movw	r22, r18
    3216:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    321a:	8d 81       	ldd	r24, Y+5	; 0x05
    321c:	9e 81       	ldd	r25, Y+6	; 0x06
    321e:	61 e0       	ldi	r22, 0x01	; 1
    3220:	0e 94 44 20 	call	0x4088	; 0x4088 <prvAddCurrentTaskToDelayedList>
}
    3224:	26 96       	adiw	r28, 0x06	; 6
    3226:	0f b6       	in	r0, 0x3f	; 63
    3228:	f8 94       	cli
    322a:	de bf       	out	0x3e, r29	; 62
    322c:	0f be       	out	0x3f, r0	; 63
    322e:	cd bf       	out	0x3d, r28	; 61
    3230:	cf 91       	pop	r28
    3232:	df 91       	pop	r29
    3234:	08 95       	ret

00003236 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    3236:	df 93       	push	r29
    3238:	cf 93       	push	r28
    323a:	00 d0       	rcall	.+0      	; 0x323c <xTaskRemoveFromEventList+0x6>
    323c:	00 d0       	rcall	.+0      	; 0x323e <xTaskRemoveFromEventList+0x8>
    323e:	0f 92       	push	r0
    3240:	cd b7       	in	r28, 0x3d	; 61
    3242:	de b7       	in	r29, 0x3e	; 62
    3244:	9d 83       	std	Y+5, r25	; 0x05
    3246:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3248:	ec 81       	ldd	r30, Y+4	; 0x04
    324a:	fd 81       	ldd	r31, Y+5	; 0x05
    324c:	05 80       	ldd	r0, Z+5	; 0x05
    324e:	f6 81       	ldd	r31, Z+6	; 0x06
    3250:	e0 2d       	mov	r30, r0
    3252:	86 81       	ldd	r24, Z+6	; 0x06
    3254:	97 81       	ldd	r25, Z+7	; 0x07
    3256:	9b 83       	std	Y+3, r25	; 0x03
    3258:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    325a:	8a 81       	ldd	r24, Y+2	; 0x02
    325c:	9b 81       	ldd	r25, Y+3	; 0x03
    325e:	0c 96       	adiw	r24, 0x0c	; 12
    3260:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3264:	80 91 19 04 	lds	r24, 0x0419
    3268:	88 23       	and	r24, r24
    326a:	61 f5       	brne	.+88     	; 0x32c4 <xTaskRemoveFromEventList+0x8e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    326c:	8a 81       	ldd	r24, Y+2	; 0x02
    326e:	9b 81       	ldd	r25, Y+3	; 0x03
    3270:	02 96       	adiw	r24, 0x02	; 2
    3272:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    3276:	ea 81       	ldd	r30, Y+2	; 0x02
    3278:	fb 81       	ldd	r31, Y+3	; 0x03
    327a:	96 89       	ldd	r25, Z+22	; 0x16
    327c:	80 91 0f 04 	lds	r24, 0x040F
    3280:	89 17       	cp	r24, r25
    3282:	28 f4       	brcc	.+10     	; 0x328e <xTaskRemoveFromEventList+0x58>
    3284:	ea 81       	ldd	r30, Y+2	; 0x02
    3286:	fb 81       	ldd	r31, Y+3	; 0x03
    3288:	86 89       	ldd	r24, Z+22	; 0x16
    328a:	80 93 0f 04 	sts	0x040F, r24
    328e:	ea 81       	ldd	r30, Y+2	; 0x02
    3290:	fb 81       	ldd	r31, Y+3	; 0x03
    3292:	86 89       	ldd	r24, Z+22	; 0x16
    3294:	28 2f       	mov	r18, r24
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	c9 01       	movw	r24, r18
    329a:	88 0f       	add	r24, r24
    329c:	99 1f       	adc	r25, r25
    329e:	88 0f       	add	r24, r24
    32a0:	99 1f       	adc	r25, r25
    32a2:	88 0f       	add	r24, r24
    32a4:	99 1f       	adc	r25, r25
    32a6:	82 0f       	add	r24, r18
    32a8:	93 1f       	adc	r25, r19
    32aa:	ac 01       	movw	r20, r24
    32ac:	46 5e       	subi	r20, 0xE6	; 230
    32ae:	5b 4f       	sbci	r21, 0xFB	; 251
    32b0:	8a 81       	ldd	r24, Y+2	; 0x02
    32b2:	9b 81       	ldd	r25, Y+3	; 0x03
    32b4:	9c 01       	movw	r18, r24
    32b6:	2e 5f       	subi	r18, 0xFE	; 254
    32b8:	3f 4f       	sbci	r19, 0xFF	; 255
    32ba:	ca 01       	movw	r24, r20
    32bc:	b9 01       	movw	r22, r18
    32be:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInsertEnd>
    32c2:	0a c0       	rjmp	.+20     	; 0x32d8 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    32c4:	8a 81       	ldd	r24, Y+2	; 0x02
    32c6:	9b 81       	ldd	r25, Y+3	; 0x03
    32c8:	9c 01       	movw	r18, r24
    32ca:	24 5f       	subi	r18, 0xF4	; 244
    32cc:	3f 4f       	sbci	r19, 0xFF	; 255
    32ce:	8d e5       	ldi	r24, 0x5D	; 93
    32d0:	94 e0       	ldi	r25, 0x04	; 4
    32d2:	b9 01       	movw	r22, r18
    32d4:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    32d8:	ea 81       	ldd	r30, Y+2	; 0x02
    32da:	fb 81       	ldd	r31, Y+3	; 0x03
    32dc:	96 89       	ldd	r25, Z+22	; 0x16
    32de:	e0 91 09 04 	lds	r30, 0x0409
    32e2:	f0 91 0a 04 	lds	r31, 0x040A
    32e6:	86 89       	ldd	r24, Z+22	; 0x16
    32e8:	89 17       	cp	r24, r25
    32ea:	30 f4       	brcc	.+12     	; 0x32f8 <xTaskRemoveFromEventList+0xc2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	80 93 12 04 	sts	0x0412, r24
    32f6:	01 c0       	rjmp	.+2      	; 0x32fa <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		xReturn = pdFALSE;
    32f8:	19 82       	std	Y+1, r1	; 0x01
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    32fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    32fc:	0f 90       	pop	r0
    32fe:	0f 90       	pop	r0
    3300:	0f 90       	pop	r0
    3302:	0f 90       	pop	r0
    3304:	0f 90       	pop	r0
    3306:	cf 91       	pop	r28
    3308:	df 91       	pop	r29
    330a:	08 95       	ret

0000330c <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    330c:	df 93       	push	r29
    330e:	cf 93       	push	r28
    3310:	cd b7       	in	r28, 0x3d	; 61
    3312:	de b7       	in	r29, 0x3e	; 62
    3314:	27 97       	sbiw	r28, 0x07	; 7
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	f8 94       	cli
    331a:	de bf       	out	0x3e, r29	; 62
    331c:	0f be       	out	0x3f, r0	; 63
    331e:	cd bf       	out	0x3d, r28	; 61
    3320:	9d 83       	std	Y+5, r25	; 0x05
    3322:	8c 83       	std	Y+4, r24	; 0x04
    3324:	7f 83       	std	Y+7, r23	; 0x07
    3326:	6e 83       	std	Y+6, r22	; 0x06
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    3328:	8e 81       	ldd	r24, Y+6	; 0x06
    332a:	9f 81       	ldd	r25, Y+7	; 0x07
    332c:	90 68       	ori	r25, 0x80	; 128
    332e:	ec 81       	ldd	r30, Y+4	; 0x04
    3330:	fd 81       	ldd	r31, Y+5	; 0x05
    3332:	91 83       	std	Z+1, r25	; 0x01
    3334:	80 83       	st	Z, r24

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    3336:	ec 81       	ldd	r30, Y+4	; 0x04
    3338:	fd 81       	ldd	r31, Y+5	; 0x05
    333a:	86 81       	ldd	r24, Z+6	; 0x06
    333c:	97 81       	ldd	r25, Z+7	; 0x07
    333e:	9b 83       	std	Y+3, r25	; 0x03
    3340:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    3342:	8c 81       	ldd	r24, Y+4	; 0x04
    3344:	9d 81       	ldd	r25, Y+5	; 0x05
    3346:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    334a:	8a 81       	ldd	r24, Y+2	; 0x02
    334c:	9b 81       	ldd	r25, Y+3	; 0x03
    334e:	02 96       	adiw	r24, 0x02	; 2
    3350:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    3354:	ea 81       	ldd	r30, Y+2	; 0x02
    3356:	fb 81       	ldd	r31, Y+3	; 0x03
    3358:	96 89       	ldd	r25, Z+22	; 0x16
    335a:	80 91 0f 04 	lds	r24, 0x040F
    335e:	89 17       	cp	r24, r25
    3360:	28 f4       	brcc	.+10     	; 0x336c <xTaskRemoveFromUnorderedEventList+0x60>
    3362:	ea 81       	ldd	r30, Y+2	; 0x02
    3364:	fb 81       	ldd	r31, Y+3	; 0x03
    3366:	86 89       	ldd	r24, Z+22	; 0x16
    3368:	80 93 0f 04 	sts	0x040F, r24
    336c:	ea 81       	ldd	r30, Y+2	; 0x02
    336e:	fb 81       	ldd	r31, Y+3	; 0x03
    3370:	86 89       	ldd	r24, Z+22	; 0x16
    3372:	28 2f       	mov	r18, r24
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	c9 01       	movw	r24, r18
    3378:	88 0f       	add	r24, r24
    337a:	99 1f       	adc	r25, r25
    337c:	88 0f       	add	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	88 0f       	add	r24, r24
    3382:	99 1f       	adc	r25, r25
    3384:	82 0f       	add	r24, r18
    3386:	93 1f       	adc	r25, r19
    3388:	ac 01       	movw	r20, r24
    338a:	46 5e       	subi	r20, 0xE6	; 230
    338c:	5b 4f       	sbci	r21, 0xFB	; 251
    338e:	8a 81       	ldd	r24, Y+2	; 0x02
    3390:	9b 81       	ldd	r25, Y+3	; 0x03
    3392:	9c 01       	movw	r18, r24
    3394:	2e 5f       	subi	r18, 0xFE	; 254
    3396:	3f 4f       	sbci	r19, 0xFF	; 255
    3398:	ca 01       	movw	r24, r20
    339a:	b9 01       	movw	r22, r18
    339c:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    33a0:	ea 81       	ldd	r30, Y+2	; 0x02
    33a2:	fb 81       	ldd	r31, Y+3	; 0x03
    33a4:	96 89       	ldd	r25, Z+22	; 0x16
    33a6:	e0 91 09 04 	lds	r30, 0x0409
    33aa:	f0 91 0a 04 	lds	r31, 0x040A
    33ae:	86 89       	ldd	r24, Z+22	; 0x16
    33b0:	89 17       	cp	r24, r25
    33b2:	30 f4       	brcc	.+12     	; 0x33c0 <xTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	80 93 12 04 	sts	0x0412, r24
    33be:	01 c0       	rjmp	.+2      	; 0x33c2 <xTaskRemoveFromUnorderedEventList+0xb6>
	}
	else
	{
		xReturn = pdFALSE;
    33c0:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    33c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    33c4:	27 96       	adiw	r28, 0x07	; 7
    33c6:	0f b6       	in	r0, 0x3f	; 63
    33c8:	f8 94       	cli
    33ca:	de bf       	out	0x3e, r29	; 62
    33cc:	0f be       	out	0x3f, r0	; 63
    33ce:	cd bf       	out	0x3d, r28	; 61
    33d0:	cf 91       	pop	r28
    33d2:	df 91       	pop	r29
    33d4:	08 95       	ret

000033d6 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    33d6:	df 93       	push	r29
    33d8:	cf 93       	push	r28
    33da:	00 d0       	rcall	.+0      	; 0x33dc <vTaskSetTimeOutState+0x6>
    33dc:	cd b7       	in	r28, 0x3d	; 61
    33de:	de b7       	in	r29, 0x3e	; 62
    33e0:	9a 83       	std	Y+2, r25	; 0x02
    33e2:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    33e4:	80 91 13 04 	lds	r24, 0x0413
    33e8:	e9 81       	ldd	r30, Y+1	; 0x01
    33ea:	fa 81       	ldd	r31, Y+2	; 0x02
    33ec:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    33ee:	80 91 0d 04 	lds	r24, 0x040D
    33f2:	90 91 0e 04 	lds	r25, 0x040E
    33f6:	e9 81       	ldd	r30, Y+1	; 0x01
    33f8:	fa 81       	ldd	r31, Y+2	; 0x02
    33fa:	92 83       	std	Z+2, r25	; 0x02
    33fc:	81 83       	std	Z+1, r24	; 0x01
}
    33fe:	0f 90       	pop	r0
    3400:	0f 90       	pop	r0
    3402:	cf 91       	pop	r28
    3404:	df 91       	pop	r29
    3406:	08 95       	ret

00003408 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    3408:	df 93       	push	r29
    340a:	cf 93       	push	r28
    340c:	cd b7       	in	r28, 0x3d	; 61
    340e:	de b7       	in	r29, 0x3e	; 62
    3410:	27 97       	sbiw	r28, 0x07	; 7
    3412:	0f b6       	in	r0, 0x3f	; 63
    3414:	f8 94       	cli
    3416:	de bf       	out	0x3e, r29	; 62
    3418:	0f be       	out	0x3f, r0	; 63
    341a:	cd bf       	out	0x3d, r28	; 61
    341c:	9d 83       	std	Y+5, r25	; 0x05
    341e:	8c 83       	std	Y+4, r24	; 0x04
    3420:	7f 83       	std	Y+7, r23	; 0x07
    3422:	6e 83       	std	Y+6, r22	; 0x06
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3424:	0f b6       	in	r0, 0x3f	; 63
    3426:	f8 94       	cli
    3428:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    342a:	80 91 0d 04 	lds	r24, 0x040D
    342e:	90 91 0e 04 	lds	r25, 0x040E
    3432:	9a 83       	std	Y+2, r25	; 0x02
    3434:	89 83       	std	Y+1, r24	; 0x01
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    3436:	ee 81       	ldd	r30, Y+6	; 0x06
    3438:	ff 81       	ldd	r31, Y+7	; 0x07
    343a:	80 81       	ld	r24, Z
    343c:	91 81       	ldd	r25, Z+1	; 0x01
    343e:	2f ef       	ldi	r18, 0xFF	; 255
    3440:	8f 3f       	cpi	r24, 0xFF	; 255
    3442:	92 07       	cpc	r25, r18
    3444:	11 f4       	brne	.+4      	; 0x344a <xTaskCheckForTimeOut+0x42>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    3446:	1b 82       	std	Y+3, r1	; 0x03
    3448:	40 c0       	rjmp	.+128    	; 0x34ca <xTaskCheckForTimeOut+0xc2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    344a:	ec 81       	ldd	r30, Y+4	; 0x04
    344c:	fd 81       	ldd	r31, Y+5	; 0x05
    344e:	90 81       	ld	r25, Z
    3450:	80 91 13 04 	lds	r24, 0x0413
    3454:	98 17       	cp	r25, r24
    3456:	61 f0       	breq	.+24     	; 0x3470 <xTaskCheckForTimeOut+0x68>
    3458:	ec 81       	ldd	r30, Y+4	; 0x04
    345a:	fd 81       	ldd	r31, Y+5	; 0x05
    345c:	21 81       	ldd	r18, Z+1	; 0x01
    345e:	32 81       	ldd	r19, Z+2	; 0x02
    3460:	89 81       	ldd	r24, Y+1	; 0x01
    3462:	9a 81       	ldd	r25, Y+2	; 0x02
    3464:	82 17       	cp	r24, r18
    3466:	93 07       	cpc	r25, r19
    3468:	18 f0       	brcs	.+6      	; 0x3470 <xTaskCheckForTimeOut+0x68>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	8b 83       	std	Y+3, r24	; 0x03
    346e:	2d c0       	rjmp	.+90     	; 0x34ca <xTaskCheckForTimeOut+0xc2>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    3470:	ec 81       	ldd	r30, Y+4	; 0x04
    3472:	fd 81       	ldd	r31, Y+5	; 0x05
    3474:	21 81       	ldd	r18, Z+1	; 0x01
    3476:	32 81       	ldd	r19, Z+2	; 0x02
    3478:	89 81       	ldd	r24, Y+1	; 0x01
    347a:	9a 81       	ldd	r25, Y+2	; 0x02
    347c:	ac 01       	movw	r20, r24
    347e:	42 1b       	sub	r20, r18
    3480:	53 0b       	sbc	r21, r19
    3482:	9a 01       	movw	r18, r20
    3484:	ee 81       	ldd	r30, Y+6	; 0x06
    3486:	ff 81       	ldd	r31, Y+7	; 0x07
    3488:	80 81       	ld	r24, Z
    348a:	91 81       	ldd	r25, Z+1	; 0x01
    348c:	28 17       	cp	r18, r24
    348e:	39 07       	cpc	r19, r25
    3490:	d0 f4       	brcc	.+52     	; 0x34c6 <xTaskCheckForTimeOut+0xbe>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    3492:	ee 81       	ldd	r30, Y+6	; 0x06
    3494:	ff 81       	ldd	r31, Y+7	; 0x07
    3496:	40 81       	ld	r20, Z
    3498:	51 81       	ldd	r21, Z+1	; 0x01
    349a:	ec 81       	ldd	r30, Y+4	; 0x04
    349c:	fd 81       	ldd	r31, Y+5	; 0x05
    349e:	21 81       	ldd	r18, Z+1	; 0x01
    34a0:	32 81       	ldd	r19, Z+2	; 0x02
    34a2:	89 81       	ldd	r24, Y+1	; 0x01
    34a4:	9a 81       	ldd	r25, Y+2	; 0x02
    34a6:	b9 01       	movw	r22, r18
    34a8:	68 1b       	sub	r22, r24
    34aa:	79 0b       	sbc	r23, r25
    34ac:	cb 01       	movw	r24, r22
    34ae:	84 0f       	add	r24, r20
    34b0:	95 1f       	adc	r25, r21
    34b2:	ee 81       	ldd	r30, Y+6	; 0x06
    34b4:	ff 81       	ldd	r31, Y+7	; 0x07
    34b6:	91 83       	std	Z+1, r25	; 0x01
    34b8:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    34ba:	8c 81       	ldd	r24, Y+4	; 0x04
    34bc:	9d 81       	ldd	r25, Y+5	; 0x05
    34be:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    34c2:	1b 82       	std	Y+3, r1	; 0x03
    34c4:	02 c0       	rjmp	.+4      	; 0x34ca <xTaskCheckForTimeOut+0xc2>
		}
		else
		{
			xReturn = pdTRUE;
    34c6:	81 e0       	ldi	r24, 0x01	; 1
    34c8:	8b 83       	std	Y+3, r24	; 0x03
		}
	}
	taskEXIT_CRITICAL();
    34ca:	0f 90       	pop	r0
    34cc:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    34ce:	8b 81       	ldd	r24, Y+3	; 0x03
}
    34d0:	27 96       	adiw	r28, 0x07	; 7
    34d2:	0f b6       	in	r0, 0x3f	; 63
    34d4:	f8 94       	cli
    34d6:	de bf       	out	0x3e, r29	; 62
    34d8:	0f be       	out	0x3f, r0	; 63
    34da:	cd bf       	out	0x3d, r28	; 61
    34dc:	cf 91       	pop	r28
    34de:	df 91       	pop	r29
    34e0:	08 95       	ret

000034e2 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    34e2:	df 93       	push	r29
    34e4:	cf 93       	push	r28
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
	xYieldPending = pdTRUE;
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	80 93 12 04 	sts	0x0412, r24
}
    34f0:	cf 91       	pop	r28
    34f2:	df 91       	pop	r29
    34f4:	08 95       	ret

000034f6 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    34f6:	df 93       	push	r29
    34f8:	cf 93       	push	r28
    34fa:	00 d0       	rcall	.+0      	; 0x34fc <prvIdleTask+0x6>
    34fc:	cd b7       	in	r28, 0x3d	; 61
    34fe:	de b7       	in	r29, 0x3e	; 62
    3500:	9a 83       	std	Y+2, r25	; 0x02
    3502:	89 83       	std	Y+1, r24	; 0x01

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    3504:	0e 94 cc 1a 	call	0x3598	; 0x3598 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    3508:	80 91 1a 04 	lds	r24, 0x041A
    350c:	82 30       	cpi	r24, 0x02	; 2
    350e:	d0 f3       	brcs	.-12     	; 0x3504 <prvIdleTask+0xe>
			{
				taskYIELD();
    3510:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vPortYield>
    3514:	f7 cf       	rjmp	.-18     	; 0x3504 <prvIdleTask+0xe>

00003516 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    3516:	df 93       	push	r29
    3518:	cf 93       	push	r28
    351a:	0f 92       	push	r0
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3520:	19 82       	std	Y+1, r1	; 0x01
    3522:	13 c0       	rjmp	.+38     	; 0x354a <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    3524:	89 81       	ldd	r24, Y+1	; 0x01
    3526:	28 2f       	mov	r18, r24
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	c9 01       	movw	r24, r18
    352c:	88 0f       	add	r24, r24
    352e:	99 1f       	adc	r25, r25
    3530:	88 0f       	add	r24, r24
    3532:	99 1f       	adc	r25, r25
    3534:	88 0f       	add	r24, r24
    3536:	99 1f       	adc	r25, r25
    3538:	82 0f       	add	r24, r18
    353a:	93 1f       	adc	r25, r19
    353c:	86 5e       	subi	r24, 0xE6	; 230
    353e:	9b 4f       	sbci	r25, 0xFB	; 251
    3540:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3544:	89 81       	ldd	r24, Y+1	; 0x01
    3546:	8f 5f       	subi	r24, 0xFF	; 255
    3548:	89 83       	std	Y+1, r24	; 0x01
    354a:	89 81       	ldd	r24, Y+1	; 0x01
    354c:	85 30       	cpi	r24, 0x05	; 5
    354e:	50 f3       	brcs	.-44     	; 0x3524 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    3550:	87 e4       	ldi	r24, 0x47	; 71
    3552:	94 e0       	ldi	r25, 0x04	; 4
    3554:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    3558:	80 e5       	ldi	r24, 0x50	; 80
    355a:	94 e0       	ldi	r25, 0x04	; 4
    355c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    3560:	8d e5       	ldi	r24, 0x5D	; 93
    3562:	94 e0       	ldi	r25, 0x04	; 4
    3564:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    3568:	86 e6       	ldi	r24, 0x66	; 102
    356a:	94 e0       	ldi	r25, 0x04	; 4
    356c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    3570:	8f e6       	ldi	r24, 0x6F	; 111
    3572:	94 e0       	ldi	r25, 0x04	; 4
    3574:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    3578:	87 e4       	ldi	r24, 0x47	; 71
    357a:	94 e0       	ldi	r25, 0x04	; 4
    357c:	90 93 5a 04 	sts	0x045A, r25
    3580:	80 93 59 04 	sts	0x0459, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3584:	80 e5       	ldi	r24, 0x50	; 80
    3586:	94 e0       	ldi	r25, 0x04	; 4
    3588:	90 93 5c 04 	sts	0x045C, r25
    358c:	80 93 5b 04 	sts	0x045B, r24
}
    3590:	0f 90       	pop	r0
    3592:	cf 91       	pop	r28
    3594:	df 91       	pop	r29
    3596:	08 95       	ret

00003598 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    3598:	df 93       	push	r29
    359a:	cf 93       	push	r28
    359c:	00 d0       	rcall	.+0      	; 0x359e <prvCheckTasksWaitingTermination+0x6>
    359e:	0f 92       	push	r0
    35a0:	cd b7       	in	r28, 0x3d	; 61
    35a2:	de b7       	in	r29, 0x3e	; 62
    35a4:	2e c0       	rjmp	.+92     	; 0x3602 <prvCheckTasksWaitingTermination+0x6a>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    35a6:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    35aa:	80 91 66 04 	lds	r24, 0x0466
    35ae:	1b 82       	std	Y+3, r1	; 0x03
    35b0:	88 23       	and	r24, r24
    35b2:	11 f4       	brne	.+4      	; 0x35b8 <prvCheckTasksWaitingTermination+0x20>
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	8b 83       	std	Y+3, r24	; 0x03
			}
			( void ) xTaskResumeAll();
    35b8:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    35bc:	8b 81       	ldd	r24, Y+3	; 0x03
    35be:	88 23       	and	r24, r24
    35c0:	01 f5       	brne	.+64     	; 0x3602 <prvCheckTasksWaitingTermination+0x6a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    35c2:	0f b6       	in	r0, 0x3f	; 63
    35c4:	f8 94       	cli
    35c6:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    35c8:	e0 91 6b 04 	lds	r30, 0x046B
    35cc:	f0 91 6c 04 	lds	r31, 0x046C
    35d0:	86 81       	ldd	r24, Z+6	; 0x06
    35d2:	97 81       	ldd	r25, Z+7	; 0x07
    35d4:	9a 83       	std	Y+2, r25	; 0x02
    35d6:	89 83       	std	Y+1, r24	; 0x01
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    35d8:	89 81       	ldd	r24, Y+1	; 0x01
    35da:	9a 81       	ldd	r25, Y+2	; 0x02
    35dc:	02 96       	adiw	r24, 0x02	; 2
    35de:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>
					--uxCurrentNumberOfTasks;
    35e2:	80 91 0c 04 	lds	r24, 0x040C
    35e6:	81 50       	subi	r24, 0x01	; 1
    35e8:	80 93 0c 04 	sts	0x040C, r24
					--uxDeletedTasksWaitingCleanUp;
    35ec:	80 91 0b 04 	lds	r24, 0x040B
    35f0:	81 50       	subi	r24, 0x01	; 1
    35f2:	80 93 0b 04 	sts	0x040B, r24
				}
				taskEXIT_CRITICAL();
    35f6:	0f 90       	pop	r0
    35f8:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    35fa:	89 81       	ldd	r24, Y+1	; 0x01
    35fc:	9a 81       	ldd	r25, Y+2	; 0x02
    35fe:	0e 94 0b 1b 	call	0x3616	; 0x3616 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    3602:	80 91 0b 04 	lds	r24, 0x040B
    3606:	88 23       	and	r24, r24
    3608:	71 f6       	brne	.-100    	; 0x35a6 <prvCheckTasksWaitingTermination+0xe>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    360a:	0f 90       	pop	r0
    360c:	0f 90       	pop	r0
    360e:	0f 90       	pop	r0
    3610:	cf 91       	pop	r28
    3612:	df 91       	pop	r29
    3614:	08 95       	ret

00003616 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    3616:	df 93       	push	r29
    3618:	cf 93       	push	r28
    361a:	00 d0       	rcall	.+0      	; 0x361c <prvDeleteTCB+0x6>
    361c:	cd b7       	in	r28, 0x3d	; 61
    361e:	de b7       	in	r29, 0x3e	; 62
    3620:	9a 83       	std	Y+2, r25	; 0x02
    3622:	89 83       	std	Y+1, r24	; 0x01

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    3624:	e9 81       	ldd	r30, Y+1	; 0x01
    3626:	fa 81       	ldd	r31, Y+2	; 0x02
    3628:	87 89       	ldd	r24, Z+23	; 0x17
    362a:	90 8d       	ldd	r25, Z+24	; 0x18
    362c:	0e 94 2c 05 	call	0xa58	; 0xa58 <vPortFree>
			vPortFree( pxTCB );
    3630:	89 81       	ldd	r24, Y+1	; 0x01
    3632:	9a 81       	ldd	r25, Y+2	; 0x02
    3634:	0e 94 2c 05 	call	0xa58	; 0xa58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    3638:	0f 90       	pop	r0
    363a:	0f 90       	pop	r0
    363c:	cf 91       	pop	r28
    363e:	df 91       	pop	r29
    3640:	08 95       	ret

00003642 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    3642:	df 93       	push	r29
    3644:	cf 93       	push	r28
    3646:	00 d0       	rcall	.+0      	; 0x3648 <prvResetNextTaskUnblockTime+0x6>
    3648:	cd b7       	in	r28, 0x3d	; 61
    364a:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    364c:	e0 91 59 04 	lds	r30, 0x0459
    3650:	f0 91 5a 04 	lds	r31, 0x045A
    3654:	80 81       	ld	r24, Z
    3656:	88 23       	and	r24, r24
    3658:	39 f4       	brne	.+14     	; 0x3668 <prvResetNextTaskUnblockTime+0x26>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    365a:	8f ef       	ldi	r24, 0xFF	; 255
    365c:	9f ef       	ldi	r25, 0xFF	; 255
    365e:	90 93 16 04 	sts	0x0416, r25
    3662:	80 93 15 04 	sts	0x0415, r24
    3666:	13 c0       	rjmp	.+38     	; 0x368e <prvResetNextTaskUnblockTime+0x4c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3668:	e0 91 59 04 	lds	r30, 0x0459
    366c:	f0 91 5a 04 	lds	r31, 0x045A
    3670:	05 80       	ldd	r0, Z+5	; 0x05
    3672:	f6 81       	ldd	r31, Z+6	; 0x06
    3674:	e0 2d       	mov	r30, r0
    3676:	86 81       	ldd	r24, Z+6	; 0x06
    3678:	97 81       	ldd	r25, Z+7	; 0x07
    367a:	9a 83       	std	Y+2, r25	; 0x02
    367c:	89 83       	std	Y+1, r24	; 0x01
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    367e:	e9 81       	ldd	r30, Y+1	; 0x01
    3680:	fa 81       	ldd	r31, Y+2	; 0x02
    3682:	82 81       	ldd	r24, Z+2	; 0x02
    3684:	93 81       	ldd	r25, Z+3	; 0x03
    3686:	90 93 16 04 	sts	0x0416, r25
    368a:	80 93 15 04 	sts	0x0415, r24
	}
}
    368e:	0f 90       	pop	r0
    3690:	0f 90       	pop	r0
    3692:	cf 91       	pop	r28
    3694:	df 91       	pop	r29
    3696:	08 95       	ret

00003698 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    3698:	df 93       	push	r29
    369a:	cf 93       	push	r28
    369c:	00 d0       	rcall	.+0      	; 0x369e <xTaskGetCurrentTaskHandle+0x6>
    369e:	cd b7       	in	r28, 0x3d	; 61
    36a0:	de b7       	in	r29, 0x3e	; 62
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    36a2:	80 91 09 04 	lds	r24, 0x0409
    36a6:	90 91 0a 04 	lds	r25, 0x040A
    36aa:	9a 83       	std	Y+2, r25	; 0x02
    36ac:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
    36ae:	89 81       	ldd	r24, Y+1	; 0x01
    36b0:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    36b2:	0f 90       	pop	r0
    36b4:	0f 90       	pop	r0
    36b6:	cf 91       	pop	r28
    36b8:	df 91       	pop	r29
    36ba:	08 95       	ret

000036bc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    36bc:	df 93       	push	r29
    36be:	cf 93       	push	r28
    36c0:	00 d0       	rcall	.+0      	; 0x36c2 <vTaskPriorityInherit+0x6>
    36c2:	00 d0       	rcall	.+0      	; 0x36c4 <vTaskPriorityInherit+0x8>
    36c4:	cd b7       	in	r28, 0x3d	; 61
    36c6:	de b7       	in	r29, 0x3e	; 62
    36c8:	9c 83       	std	Y+4, r25	; 0x04
    36ca:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    36cc:	8b 81       	ldd	r24, Y+3	; 0x03
    36ce:	9c 81       	ldd	r25, Y+4	; 0x04
    36d0:	9a 83       	std	Y+2, r25	; 0x02
    36d2:	89 83       	std	Y+1, r24	; 0x01

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    36d4:	8b 81       	ldd	r24, Y+3	; 0x03
    36d6:	9c 81       	ldd	r25, Y+4	; 0x04
    36d8:	00 97       	sbiw	r24, 0x00	; 0
    36da:	09 f4       	brne	.+2      	; 0x36de <vTaskPriorityInherit+0x22>
    36dc:	73 c0       	rjmp	.+230    	; 0x37c4 <vTaskPriorityInherit+0x108>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    36de:	e9 81       	ldd	r30, Y+1	; 0x01
    36e0:	fa 81       	ldd	r31, Y+2	; 0x02
    36e2:	96 89       	ldd	r25, Z+22	; 0x16
    36e4:	e0 91 09 04 	lds	r30, 0x0409
    36e8:	f0 91 0a 04 	lds	r31, 0x040A
    36ec:	86 89       	ldd	r24, Z+22	; 0x16
    36ee:	98 17       	cp	r25, r24
    36f0:	08 f0       	brcs	.+2      	; 0x36f4 <vTaskPriorityInherit+0x38>
    36f2:	68 c0       	rjmp	.+208    	; 0x37c4 <vTaskPriorityInherit+0x108>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    36f4:	e9 81       	ldd	r30, Y+1	; 0x01
    36f6:	fa 81       	ldd	r31, Y+2	; 0x02
    36f8:	84 85       	ldd	r24, Z+12	; 0x0c
    36fa:	95 85       	ldd	r25, Z+13	; 0x0d
    36fc:	99 23       	and	r25, r25
    36fe:	7c f0       	brlt	.+30     	; 0x371e <vTaskPriorityInherit+0x62>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3700:	e0 91 09 04 	lds	r30, 0x0409
    3704:	f0 91 0a 04 	lds	r31, 0x040A
    3708:	86 89       	ldd	r24, Z+22	; 0x16
    370a:	28 2f       	mov	r18, r24
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	85 e0       	ldi	r24, 0x05	; 5
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	82 1b       	sub	r24, r18
    3714:	93 0b       	sbc	r25, r19
    3716:	e9 81       	ldd	r30, Y+1	; 0x01
    3718:	fa 81       	ldd	r31, Y+2	; 0x02
    371a:	95 87       	std	Z+13, r25	; 0x0d
    371c:	84 87       	std	Z+12, r24	; 0x0c
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    371e:	e9 81       	ldd	r30, Y+1	; 0x01
    3720:	fa 81       	ldd	r31, Y+2	; 0x02
    3722:	42 85       	ldd	r20, Z+10	; 0x0a
    3724:	53 85       	ldd	r21, Z+11	; 0x0b
    3726:	e9 81       	ldd	r30, Y+1	; 0x01
    3728:	fa 81       	ldd	r31, Y+2	; 0x02
    372a:	86 89       	ldd	r24, Z+22	; 0x16
    372c:	28 2f       	mov	r18, r24
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	c9 01       	movw	r24, r18
    3732:	88 0f       	add	r24, r24
    3734:	99 1f       	adc	r25, r25
    3736:	88 0f       	add	r24, r24
    3738:	99 1f       	adc	r25, r25
    373a:	88 0f       	add	r24, r24
    373c:	99 1f       	adc	r25, r25
    373e:	82 0f       	add	r24, r18
    3740:	93 1f       	adc	r25, r19
    3742:	86 5e       	subi	r24, 0xE6	; 230
    3744:	9b 4f       	sbci	r25, 0xFB	; 251
    3746:	48 17       	cp	r20, r24
    3748:	59 07       	cpc	r21, r25
    374a:	a1 f5       	brne	.+104    	; 0x37b4 <vTaskPriorityInherit+0xf8>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    374c:	89 81       	ldd	r24, Y+1	; 0x01
    374e:	9a 81       	ldd	r25, Y+2	; 0x02
    3750:	02 96       	adiw	r24, 0x02	; 2
    3752:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    3756:	e0 91 09 04 	lds	r30, 0x0409
    375a:	f0 91 0a 04 	lds	r31, 0x040A
    375e:	86 89       	ldd	r24, Z+22	; 0x16
    3760:	e9 81       	ldd	r30, Y+1	; 0x01
    3762:	fa 81       	ldd	r31, Y+2	; 0x02
    3764:	86 8b       	std	Z+22, r24	; 0x16
					prvAddTaskToReadyList( pxTCB );
    3766:	e9 81       	ldd	r30, Y+1	; 0x01
    3768:	fa 81       	ldd	r31, Y+2	; 0x02
    376a:	96 89       	ldd	r25, Z+22	; 0x16
    376c:	80 91 0f 04 	lds	r24, 0x040F
    3770:	89 17       	cp	r24, r25
    3772:	28 f4       	brcc	.+10     	; 0x377e <vTaskPriorityInherit+0xc2>
    3774:	e9 81       	ldd	r30, Y+1	; 0x01
    3776:	fa 81       	ldd	r31, Y+2	; 0x02
    3778:	86 89       	ldd	r24, Z+22	; 0x16
    377a:	80 93 0f 04 	sts	0x040F, r24
    377e:	e9 81       	ldd	r30, Y+1	; 0x01
    3780:	fa 81       	ldd	r31, Y+2	; 0x02
    3782:	86 89       	ldd	r24, Z+22	; 0x16
    3784:	28 2f       	mov	r18, r24
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	c9 01       	movw	r24, r18
    378a:	88 0f       	add	r24, r24
    378c:	99 1f       	adc	r25, r25
    378e:	88 0f       	add	r24, r24
    3790:	99 1f       	adc	r25, r25
    3792:	88 0f       	add	r24, r24
    3794:	99 1f       	adc	r25, r25
    3796:	82 0f       	add	r24, r18
    3798:	93 1f       	adc	r25, r19
    379a:	ac 01       	movw	r20, r24
    379c:	46 5e       	subi	r20, 0xE6	; 230
    379e:	5b 4f       	sbci	r21, 0xFB	; 251
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	9a 81       	ldd	r25, Y+2	; 0x02
    37a4:	9c 01       	movw	r18, r24
    37a6:	2e 5f       	subi	r18, 0xFE	; 254
    37a8:	3f 4f       	sbci	r19, 0xFF	; 255
    37aa:	ca 01       	movw	r24, r20
    37ac:	b9 01       	movw	r22, r18
    37ae:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInsertEnd>
    37b2:	08 c0       	rjmp	.+16     	; 0x37c4 <vTaskPriorityInherit+0x108>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    37b4:	e0 91 09 04 	lds	r30, 0x0409
    37b8:	f0 91 0a 04 	lds	r31, 0x040A
    37bc:	86 89       	ldd	r24, Z+22	; 0x16
    37be:	e9 81       	ldd	r30, Y+1	; 0x01
    37c0:	fa 81       	ldd	r31, Y+2	; 0x02
    37c2:	86 8b       	std	Z+22, r24	; 0x16
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    37c4:	0f 90       	pop	r0
    37c6:	0f 90       	pop	r0
    37c8:	0f 90       	pop	r0
    37ca:	0f 90       	pop	r0
    37cc:	cf 91       	pop	r28
    37ce:	df 91       	pop	r29
    37d0:	08 95       	ret

000037d2 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    37d2:	df 93       	push	r29
    37d4:	cf 93       	push	r28
    37d6:	00 d0       	rcall	.+0      	; 0x37d8 <xTaskPriorityDisinherit+0x6>
    37d8:	00 d0       	rcall	.+0      	; 0x37da <xTaskPriorityDisinherit+0x8>
    37da:	0f 92       	push	r0
    37dc:	cd b7       	in	r28, 0x3d	; 61
    37de:	de b7       	in	r29, 0x3e	; 62
    37e0:	9d 83       	std	Y+5, r25	; 0x05
    37e2:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    37e4:	8c 81       	ldd	r24, Y+4	; 0x04
    37e6:	9d 81       	ldd	r25, Y+5	; 0x05
    37e8:	9b 83       	std	Y+3, r25	; 0x03
    37ea:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xReturn = pdFALSE;
    37ec:	19 82       	std	Y+1, r1	; 0x01

		if( pxMutexHolder != NULL )
    37ee:	8c 81       	ldd	r24, Y+4	; 0x04
    37f0:	9d 81       	ldd	r25, Y+5	; 0x05
    37f2:	00 97       	sbiw	r24, 0x00	; 0
    37f4:	09 f4       	brne	.+2      	; 0x37f8 <xTaskPriorityDisinherit+0x26>
    37f6:	56 c0       	rjmp	.+172    	; 0x38a4 <xTaskPriorityDisinherit+0xd2>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    37f8:	ea 81       	ldd	r30, Y+2	; 0x02
    37fa:	fb 81       	ldd	r31, Y+3	; 0x03
    37fc:	84 a1       	ldd	r24, Z+36	; 0x24
    37fe:	81 50       	subi	r24, 0x01	; 1
    3800:	ea 81       	ldd	r30, Y+2	; 0x02
    3802:	fb 81       	ldd	r31, Y+3	; 0x03
    3804:	84 a3       	std	Z+36, r24	; 0x24

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    3806:	ea 81       	ldd	r30, Y+2	; 0x02
    3808:	fb 81       	ldd	r31, Y+3	; 0x03
    380a:	96 89       	ldd	r25, Z+22	; 0x16
    380c:	ea 81       	ldd	r30, Y+2	; 0x02
    380e:	fb 81       	ldd	r31, Y+3	; 0x03
    3810:	83 a1       	ldd	r24, Z+35	; 0x23
    3812:	98 17       	cp	r25, r24
    3814:	09 f4       	brne	.+2      	; 0x3818 <xTaskPriorityDisinherit+0x46>
    3816:	46 c0       	rjmp	.+140    	; 0x38a4 <xTaskPriorityDisinherit+0xd2>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    3818:	ea 81       	ldd	r30, Y+2	; 0x02
    381a:	fb 81       	ldd	r31, Y+3	; 0x03
    381c:	84 a1       	ldd	r24, Z+36	; 0x24
    381e:	88 23       	and	r24, r24
    3820:	09 f0       	breq	.+2      	; 0x3824 <xTaskPriorityDisinherit+0x52>
    3822:	40 c0       	rjmp	.+128    	; 0x38a4 <xTaskPriorityDisinherit+0xd2>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3824:	8a 81       	ldd	r24, Y+2	; 0x02
    3826:	9b 81       	ldd	r25, Y+3	; 0x03
    3828:	02 96       	adiw	r24, 0x02	; 2
    382a:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    382e:	ea 81       	ldd	r30, Y+2	; 0x02
    3830:	fb 81       	ldd	r31, Y+3	; 0x03
    3832:	83 a1       	ldd	r24, Z+35	; 0x23
    3834:	ea 81       	ldd	r30, Y+2	; 0x02
    3836:	fb 81       	ldd	r31, Y+3	; 0x03
    3838:	86 8b       	std	Z+22, r24	; 0x16

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    383a:	ea 81       	ldd	r30, Y+2	; 0x02
    383c:	fb 81       	ldd	r31, Y+3	; 0x03
    383e:	86 89       	ldd	r24, Z+22	; 0x16
    3840:	28 2f       	mov	r18, r24
    3842:	30 e0       	ldi	r19, 0x00	; 0
    3844:	85 e0       	ldi	r24, 0x05	; 5
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	82 1b       	sub	r24, r18
    384a:	93 0b       	sbc	r25, r19
    384c:	ea 81       	ldd	r30, Y+2	; 0x02
    384e:	fb 81       	ldd	r31, Y+3	; 0x03
    3850:	95 87       	std	Z+13, r25	; 0x0d
    3852:	84 87       	std	Z+12, r24	; 0x0c
					prvAddTaskToReadyList( pxTCB );
    3854:	ea 81       	ldd	r30, Y+2	; 0x02
    3856:	fb 81       	ldd	r31, Y+3	; 0x03
    3858:	96 89       	ldd	r25, Z+22	; 0x16
    385a:	80 91 0f 04 	lds	r24, 0x040F
    385e:	89 17       	cp	r24, r25
    3860:	28 f4       	brcc	.+10     	; 0x386c <xTaskPriorityDisinherit+0x9a>
    3862:	ea 81       	ldd	r30, Y+2	; 0x02
    3864:	fb 81       	ldd	r31, Y+3	; 0x03
    3866:	86 89       	ldd	r24, Z+22	; 0x16
    3868:	80 93 0f 04 	sts	0x040F, r24
    386c:	ea 81       	ldd	r30, Y+2	; 0x02
    386e:	fb 81       	ldd	r31, Y+3	; 0x03
    3870:	86 89       	ldd	r24, Z+22	; 0x16
    3872:	28 2f       	mov	r18, r24
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	c9 01       	movw	r24, r18
    3878:	88 0f       	add	r24, r24
    387a:	99 1f       	adc	r25, r25
    387c:	88 0f       	add	r24, r24
    387e:	99 1f       	adc	r25, r25
    3880:	88 0f       	add	r24, r24
    3882:	99 1f       	adc	r25, r25
    3884:	82 0f       	add	r24, r18
    3886:	93 1f       	adc	r25, r19
    3888:	ac 01       	movw	r20, r24
    388a:	46 5e       	subi	r20, 0xE6	; 230
    388c:	5b 4f       	sbci	r21, 0xFB	; 251
    388e:	8a 81       	ldd	r24, Y+2	; 0x02
    3890:	9b 81       	ldd	r25, Y+3	; 0x03
    3892:	9c 01       	movw	r18, r24
    3894:	2e 5f       	subi	r18, 0xFE	; 254
    3896:	3f 4f       	sbci	r19, 0xFF	; 255
    3898:	ca 01       	movw	r24, r20
    389a:	b9 01       	movw	r22, r18
    389c:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    38a0:	81 e0       	ldi	r24, 0x01	; 1
    38a2:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    38a4:	89 81       	ldd	r24, Y+1	; 0x01
	}
    38a6:	0f 90       	pop	r0
    38a8:	0f 90       	pop	r0
    38aa:	0f 90       	pop	r0
    38ac:	0f 90       	pop	r0
    38ae:	0f 90       	pop	r0
    38b0:	cf 91       	pop	r28
    38b2:	df 91       	pop	r29
    38b4:	08 95       	ret

000038b6 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    38b6:	df 93       	push	r29
    38b8:	cf 93       	push	r28
    38ba:	00 d0       	rcall	.+0      	; 0x38bc <uxTaskResetEventItemValue+0x6>
    38bc:	cd b7       	in	r28, 0x3d	; 61
    38be:	de b7       	in	r29, 0x3e	; 62
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    38c0:	e0 91 09 04 	lds	r30, 0x0409
    38c4:	f0 91 0a 04 	lds	r31, 0x040A
    38c8:	84 85       	ldd	r24, Z+12	; 0x0c
    38ca:	95 85       	ldd	r25, Z+13	; 0x0d
    38cc:	9a 83       	std	Y+2, r25	; 0x02
    38ce:	89 83       	std	Y+1, r24	; 0x01

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    38d0:	a0 91 09 04 	lds	r26, 0x0409
    38d4:	b0 91 0a 04 	lds	r27, 0x040A
    38d8:	e0 91 09 04 	lds	r30, 0x0409
    38dc:	f0 91 0a 04 	lds	r31, 0x040A
    38e0:	86 89       	ldd	r24, Z+22	; 0x16
    38e2:	28 2f       	mov	r18, r24
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	85 e0       	ldi	r24, 0x05	; 5
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	82 1b       	sub	r24, r18
    38ec:	93 0b       	sbc	r25, r19
    38ee:	1d 96       	adiw	r26, 0x0d	; 13
    38f0:	9c 93       	st	X, r25
    38f2:	8e 93       	st	-X, r24
    38f4:	1c 97       	sbiw	r26, 0x0c	; 12

	return uxReturn;
    38f6:	89 81       	ldd	r24, Y+1	; 0x01
    38f8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    38fa:	0f 90       	pop	r0
    38fc:	0f 90       	pop	r0
    38fe:	cf 91       	pop	r28
    3900:	df 91       	pop	r29
    3902:	08 95       	ret

00003904 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    3904:	df 93       	push	r29
    3906:	cf 93       	push	r28
    3908:	cd b7       	in	r28, 0x3d	; 61
    390a:	de b7       	in	r29, 0x3e	; 62
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    390c:	80 91 09 04 	lds	r24, 0x0409
    3910:	90 91 0a 04 	lds	r25, 0x040A
    3914:	00 97       	sbiw	r24, 0x00	; 0
    3916:	39 f0       	breq	.+14     	; 0x3926 <pvTaskIncrementMutexHeldCount+0x22>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    3918:	e0 91 09 04 	lds	r30, 0x0409
    391c:	f0 91 0a 04 	lds	r31, 0x040A
    3920:	84 a1       	ldd	r24, Z+36	; 0x24
    3922:	8f 5f       	subi	r24, 0xFF	; 255
    3924:	84 a3       	std	Z+36, r24	; 0x24
		}

		return pxCurrentTCB;
    3926:	80 91 09 04 	lds	r24, 0x0409
    392a:	90 91 0a 04 	lds	r25, 0x040A
	}
    392e:	cf 91       	pop	r28
    3930:	df 91       	pop	r29
    3932:	08 95       	ret

00003934 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    3934:	df 93       	push	r29
    3936:	cf 93       	push	r28
    3938:	cd b7       	in	r28, 0x3d	; 61
    393a:	de b7       	in	r29, 0x3e	; 62
    393c:	27 97       	sbiw	r28, 0x07	; 7
    393e:	0f b6       	in	r0, 0x3f	; 63
    3940:	f8 94       	cli
    3942:	de bf       	out	0x3e, r29	; 62
    3944:	0f be       	out	0x3f, r0	; 63
    3946:	cd bf       	out	0x3d, r28	; 61
    3948:	8d 83       	std	Y+5, r24	; 0x05
    394a:	7f 83       	std	Y+7, r23	; 0x07
    394c:	6e 83       	std	Y+6, r22	; 0x06
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    394e:	0f b6       	in	r0, 0x3f	; 63
    3950:	f8 94       	cli
    3952:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    3954:	e0 91 09 04 	lds	r30, 0x0409
    3958:	f0 91 0a 04 	lds	r31, 0x040A
    395c:	85 a1       	ldd	r24, Z+37	; 0x25
    395e:	96 a1       	ldd	r25, Z+38	; 0x26
    3960:	a7 a1       	ldd	r26, Z+39	; 0x27
    3962:	b0 a5       	ldd	r27, Z+40	; 0x28
    3964:	00 97       	sbiw	r24, 0x00	; 0
    3966:	a1 05       	cpc	r26, r1
    3968:	b1 05       	cpc	r27, r1
    396a:	89 f4       	brne	.+34     	; 0x398e <ulTaskNotifyTake+0x5a>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    396c:	e0 91 09 04 	lds	r30, 0x0409
    3970:	f0 91 0a 04 	lds	r31, 0x040A
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	81 a7       	std	Z+41, r24	; 0x29

				if( xTicksToWait > ( TickType_t ) 0 )
    3978:	8e 81       	ldd	r24, Y+6	; 0x06
    397a:	9f 81       	ldd	r25, Y+7	; 0x07
    397c:	00 97       	sbiw	r24, 0x00	; 0
    397e:	39 f0       	breq	.+14     	; 0x398e <ulTaskNotifyTake+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3980:	8e 81       	ldd	r24, Y+6	; 0x06
    3982:	9f 81       	ldd	r25, Y+7	; 0x07
    3984:	61 e0       	ldi	r22, 0x01	; 1
    3986:	0e 94 44 20 	call	0x4088	; 0x4088 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    398a:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    398e:	0f 90       	pop	r0
    3990:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    3992:	0f b6       	in	r0, 0x3f	; 63
    3994:	f8 94       	cli
    3996:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    3998:	e0 91 09 04 	lds	r30, 0x0409
    399c:	f0 91 0a 04 	lds	r31, 0x040A
    39a0:	85 a1       	ldd	r24, Z+37	; 0x25
    39a2:	96 a1       	ldd	r25, Z+38	; 0x26
    39a4:	a7 a1       	ldd	r26, Z+39	; 0x27
    39a6:	b0 a5       	ldd	r27, Z+40	; 0x28
    39a8:	89 83       	std	Y+1, r24	; 0x01
    39aa:	9a 83       	std	Y+2, r25	; 0x02
    39ac:	ab 83       	std	Y+3, r26	; 0x03
    39ae:	bc 83       	std	Y+4, r27	; 0x04

			if( ulReturn != 0UL )
    39b0:	89 81       	ldd	r24, Y+1	; 0x01
    39b2:	9a 81       	ldd	r25, Y+2	; 0x02
    39b4:	ab 81       	ldd	r26, Y+3	; 0x03
    39b6:	bc 81       	ldd	r27, Y+4	; 0x04
    39b8:	00 97       	sbiw	r24, 0x00	; 0
    39ba:	a1 05       	cpc	r26, r1
    39bc:	b1 05       	cpc	r27, r1
    39be:	d9 f0       	breq	.+54     	; 0x39f6 <ulTaskNotifyTake+0xc2>
			{
				if( xClearCountOnExit != pdFALSE )
    39c0:	8d 81       	ldd	r24, Y+5	; 0x05
    39c2:	88 23       	and	r24, r24
    39c4:	49 f0       	breq	.+18     	; 0x39d8 <ulTaskNotifyTake+0xa4>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    39c6:	e0 91 09 04 	lds	r30, 0x0409
    39ca:	f0 91 0a 04 	lds	r31, 0x040A
    39ce:	15 a2       	std	Z+37, r1	; 0x25
    39d0:	16 a2       	std	Z+38, r1	; 0x26
    39d2:	17 a2       	std	Z+39, r1	; 0x27
    39d4:	10 a6       	std	Z+40, r1	; 0x28
    39d6:	0f c0       	rjmp	.+30     	; 0x39f6 <ulTaskNotifyTake+0xc2>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
    39d8:	e0 91 09 04 	lds	r30, 0x0409
    39dc:	f0 91 0a 04 	lds	r31, 0x040A
    39e0:	89 81       	ldd	r24, Y+1	; 0x01
    39e2:	9a 81       	ldd	r25, Y+2	; 0x02
    39e4:	ab 81       	ldd	r26, Y+3	; 0x03
    39e6:	bc 81       	ldd	r27, Y+4	; 0x04
    39e8:	01 97       	sbiw	r24, 0x01	; 1
    39ea:	a1 09       	sbc	r26, r1
    39ec:	b1 09       	sbc	r27, r1
    39ee:	85 a3       	std	Z+37, r24	; 0x25
    39f0:	96 a3       	std	Z+38, r25	; 0x26
    39f2:	a7 a3       	std	Z+39, r26	; 0x27
    39f4:	b0 a7       	std	Z+40, r27	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    39f6:	e0 91 09 04 	lds	r30, 0x0409
    39fa:	f0 91 0a 04 	lds	r31, 0x040A
    39fe:	11 a6       	std	Z+41, r1	; 0x29
		}
		taskEXIT_CRITICAL();
    3a00:	0f 90       	pop	r0
    3a02:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
    3a04:	89 81       	ldd	r24, Y+1	; 0x01
    3a06:	9a 81       	ldd	r25, Y+2	; 0x02
    3a08:	ab 81       	ldd	r26, Y+3	; 0x03
    3a0a:	bc 81       	ldd	r27, Y+4	; 0x04
	}
    3a0c:	bc 01       	movw	r22, r24
    3a0e:	cd 01       	movw	r24, r26
    3a10:	27 96       	adiw	r28, 0x07	; 7
    3a12:	0f b6       	in	r0, 0x3f	; 63
    3a14:	f8 94       	cli
    3a16:	de bf       	out	0x3e, r29	; 62
    3a18:	0f be       	out	0x3f, r0	; 63
    3a1a:	cd bf       	out	0x3d, r28	; 61
    3a1c:	cf 91       	pop	r28
    3a1e:	df 91       	pop	r29
    3a20:	08 95       	ret

00003a22 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    3a22:	ef 92       	push	r14
    3a24:	ff 92       	push	r15
    3a26:	0f 93       	push	r16
    3a28:	1f 93       	push	r17
    3a2a:	df 93       	push	r29
    3a2c:	cf 93       	push	r28
    3a2e:	cd b7       	in	r28, 0x3d	; 61
    3a30:	de b7       	in	r29, 0x3e	; 62
    3a32:	2d 97       	sbiw	r28, 0x0d	; 13
    3a34:	0f b6       	in	r0, 0x3f	; 63
    3a36:	f8 94       	cli
    3a38:	de bf       	out	0x3e, r29	; 62
    3a3a:	0f be       	out	0x3f, r0	; 63
    3a3c:	cd bf       	out	0x3d, r28	; 61
    3a3e:	6a 83       	std	Y+2, r22	; 0x02
    3a40:	7b 83       	std	Y+3, r23	; 0x03
    3a42:	8c 83       	std	Y+4, r24	; 0x04
    3a44:	9d 83       	std	Y+5, r25	; 0x05
    3a46:	2e 83       	std	Y+6, r18	; 0x06
    3a48:	3f 83       	std	Y+7, r19	; 0x07
    3a4a:	48 87       	std	Y+8, r20	; 0x08
    3a4c:	59 87       	std	Y+9, r21	; 0x09
    3a4e:	1b 87       	std	Y+11, r17	; 0x0b
    3a50:	0a 87       	std	Y+10, r16	; 0x0a
    3a52:	fd 86       	std	Y+13, r15	; 0x0d
    3a54:	ec 86       	std	Y+12, r14	; 0x0c
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    3a56:	0f b6       	in	r0, 0x3f	; 63
    3a58:	f8 94       	cli
    3a5a:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    3a5c:	e0 91 09 04 	lds	r30, 0x0409
    3a60:	f0 91 0a 04 	lds	r31, 0x040A
    3a64:	81 a5       	ldd	r24, Z+41	; 0x29
    3a66:	82 30       	cpi	r24, 0x02	; 2
    3a68:	49 f1       	breq	.+82     	; 0x3abc <xTaskNotifyWait+0x9a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    3a6a:	e0 91 09 04 	lds	r30, 0x0409
    3a6e:	f0 91 0a 04 	lds	r31, 0x040A
    3a72:	25 a1       	ldd	r18, Z+37	; 0x25
    3a74:	36 a1       	ldd	r19, Z+38	; 0x26
    3a76:	47 a1       	ldd	r20, Z+39	; 0x27
    3a78:	50 a5       	ldd	r21, Z+40	; 0x28
    3a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a7c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a7e:	ac 81       	ldd	r26, Y+4	; 0x04
    3a80:	bd 81       	ldd	r27, Y+5	; 0x05
    3a82:	80 95       	com	r24
    3a84:	90 95       	com	r25
    3a86:	a0 95       	com	r26
    3a88:	b0 95       	com	r27
    3a8a:	82 23       	and	r24, r18
    3a8c:	93 23       	and	r25, r19
    3a8e:	a4 23       	and	r26, r20
    3a90:	b5 23       	and	r27, r21
    3a92:	85 a3       	std	Z+37, r24	; 0x25
    3a94:	96 a3       	std	Z+38, r25	; 0x26
    3a96:	a7 a3       	std	Z+39, r26	; 0x27
    3a98:	b0 a7       	std	Z+40, r27	; 0x28

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    3a9a:	e0 91 09 04 	lds	r30, 0x0409
    3a9e:	f0 91 0a 04 	lds	r31, 0x040A
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	81 a7       	std	Z+41, r24	; 0x29

				if( xTicksToWait > ( TickType_t ) 0 )
    3aa6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3aa8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3aaa:	00 97       	sbiw	r24, 0x00	; 0
    3aac:	39 f0       	breq	.+14     	; 0x3abc <xTaskNotifyWait+0x9a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3aae:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ab0:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ab2:	61 e0       	ldi	r22, 0x01	; 1
    3ab4:	0e 94 44 20 	call	0x4088	; 0x4088 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    3ab8:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    3abc:	0f 90       	pop	r0
    3abe:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    3ac0:	0f b6       	in	r0, 0x3f	; 63
    3ac2:	f8 94       	cli
    3ac4:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    3ac6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ac8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3aca:	00 97       	sbiw	r24, 0x00	; 0
    3acc:	71 f0       	breq	.+28     	; 0x3aea <xTaskNotifyWait+0xc8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    3ace:	e0 91 09 04 	lds	r30, 0x0409
    3ad2:	f0 91 0a 04 	lds	r31, 0x040A
    3ad6:	85 a1       	ldd	r24, Z+37	; 0x25
    3ad8:	96 a1       	ldd	r25, Z+38	; 0x26
    3ada:	a7 a1       	ldd	r26, Z+39	; 0x27
    3adc:	b0 a5       	ldd	r27, Z+40	; 0x28
    3ade:	ea 85       	ldd	r30, Y+10	; 0x0a
    3ae0:	fb 85       	ldd	r31, Y+11	; 0x0b
    3ae2:	80 83       	st	Z, r24
    3ae4:	91 83       	std	Z+1, r25	; 0x01
    3ae6:	a2 83       	std	Z+2, r26	; 0x02
    3ae8:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    3aea:	e0 91 09 04 	lds	r30, 0x0409
    3aee:	f0 91 0a 04 	lds	r31, 0x040A
    3af2:	81 a5       	ldd	r24, Z+41	; 0x29
    3af4:	81 30       	cpi	r24, 0x01	; 1
    3af6:	11 f4       	brne	.+4      	; 0x3afc <xTaskNotifyWait+0xda>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    3af8:	19 82       	std	Y+1, r1	; 0x01
    3afa:	1a c0       	rjmp	.+52     	; 0x3b30 <xTaskNotifyWait+0x10e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    3afc:	e0 91 09 04 	lds	r30, 0x0409
    3b00:	f0 91 0a 04 	lds	r31, 0x040A
    3b04:	25 a1       	ldd	r18, Z+37	; 0x25
    3b06:	36 a1       	ldd	r19, Z+38	; 0x26
    3b08:	47 a1       	ldd	r20, Z+39	; 0x27
    3b0a:	50 a5       	ldd	r21, Z+40	; 0x28
    3b0c:	8e 81       	ldd	r24, Y+6	; 0x06
    3b0e:	9f 81       	ldd	r25, Y+7	; 0x07
    3b10:	a8 85       	ldd	r26, Y+8	; 0x08
    3b12:	b9 85       	ldd	r27, Y+9	; 0x09
    3b14:	80 95       	com	r24
    3b16:	90 95       	com	r25
    3b18:	a0 95       	com	r26
    3b1a:	b0 95       	com	r27
    3b1c:	82 23       	and	r24, r18
    3b1e:	93 23       	and	r25, r19
    3b20:	a4 23       	and	r26, r20
    3b22:	b5 23       	and	r27, r21
    3b24:	85 a3       	std	Z+37, r24	; 0x25
    3b26:	96 a3       	std	Z+38, r25	; 0x26
    3b28:	a7 a3       	std	Z+39, r26	; 0x27
    3b2a:	b0 a7       	std	Z+40, r27	; 0x28
				xReturn = pdTRUE;
    3b2c:	81 e0       	ldi	r24, 0x01	; 1
    3b2e:	89 83       	std	Y+1, r24	; 0x01
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3b30:	e0 91 09 04 	lds	r30, 0x0409
    3b34:	f0 91 0a 04 	lds	r31, 0x040A
    3b38:	11 a6       	std	Z+41, r1	; 0x29
		}
		taskEXIT_CRITICAL();
    3b3a:	0f 90       	pop	r0
    3b3c:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    3b3e:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3b40:	2d 96       	adiw	r28, 0x0d	; 13
    3b42:	0f b6       	in	r0, 0x3f	; 63
    3b44:	f8 94       	cli
    3b46:	de bf       	out	0x3e, r29	; 62
    3b48:	0f be       	out	0x3f, r0	; 63
    3b4a:	cd bf       	out	0x3d, r28	; 61
    3b4c:	cf 91       	pop	r28
    3b4e:	df 91       	pop	r29
    3b50:	1f 91       	pop	r17
    3b52:	0f 91       	pop	r16
    3b54:	ff 90       	pop	r15
    3b56:	ef 90       	pop	r14
    3b58:	08 95       	ret

00003b5a <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    3b5a:	0f 93       	push	r16
    3b5c:	1f 93       	push	r17
    3b5e:	df 93       	push	r29
    3b60:	cf 93       	push	r28
    3b62:	cd b7       	in	r28, 0x3d	; 61
    3b64:	de b7       	in	r29, 0x3e	; 62
    3b66:	2f 97       	sbiw	r28, 0x0f	; 15
    3b68:	0f b6       	in	r0, 0x3f	; 63
    3b6a:	f8 94       	cli
    3b6c:	de bf       	out	0x3e, r29	; 62
    3b6e:	0f be       	out	0x3f, r0	; 63
    3b70:	cd bf       	out	0x3d, r28	; 61
    3b72:	9e 83       	std	Y+6, r25	; 0x06
    3b74:	8d 83       	std	Y+5, r24	; 0x05
    3b76:	4f 83       	std	Y+7, r20	; 0x07
    3b78:	58 87       	std	Y+8, r21	; 0x08
    3b7a:	69 87       	std	Y+9, r22	; 0x09
    3b7c:	7a 87       	std	Y+10, r23	; 0x0a
    3b7e:	2b 87       	std	Y+11, r18	; 0x0b
    3b80:	1d 87       	std	Y+13, r17	; 0x0d
    3b82:	0c 87       	std	Y+12, r16	; 0x0c
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    3b84:	81 e0       	ldi	r24, 0x01	; 1
    3b86:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
    3b88:	8d 81       	ldd	r24, Y+5	; 0x05
    3b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b8c:	9c 83       	std	Y+4, r25	; 0x04
    3b8e:	8b 83       	std	Y+3, r24	; 0x03

		taskENTER_CRITICAL();
    3b90:	0f b6       	in	r0, 0x3f	; 63
    3b92:	f8 94       	cli
    3b94:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    3b96:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b98:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b9a:	00 97       	sbiw	r24, 0x00	; 0
    3b9c:	61 f0       	breq	.+24     	; 0x3bb6 <xTaskGenericNotify+0x5c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    3b9e:	eb 81       	ldd	r30, Y+3	; 0x03
    3ba0:	fc 81       	ldd	r31, Y+4	; 0x04
    3ba2:	85 a1       	ldd	r24, Z+37	; 0x25
    3ba4:	96 a1       	ldd	r25, Z+38	; 0x26
    3ba6:	a7 a1       	ldd	r26, Z+39	; 0x27
    3ba8:	b0 a5       	ldd	r27, Z+40	; 0x28
    3baa:	ec 85       	ldd	r30, Y+12	; 0x0c
    3bac:	fd 85       	ldd	r31, Y+13	; 0x0d
    3bae:	80 83       	st	Z, r24
    3bb0:	91 83       	std	Z+1, r25	; 0x01
    3bb2:	a2 83       	std	Z+2, r26	; 0x02
    3bb4:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    3bb6:	eb 81       	ldd	r30, Y+3	; 0x03
    3bb8:	fc 81       	ldd	r31, Y+4	; 0x04
    3bba:	81 a5       	ldd	r24, Z+41	; 0x29
    3bbc:	89 83       	std	Y+1, r24	; 0x01

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    3bbe:	eb 81       	ldd	r30, Y+3	; 0x03
    3bc0:	fc 81       	ldd	r31, Y+4	; 0x04
    3bc2:	82 e0       	ldi	r24, 0x02	; 2
    3bc4:	81 a7       	std	Z+41, r24	; 0x29

			switch( eAction )
    3bc6:	8b 85       	ldd	r24, Y+11	; 0x0b
    3bc8:	28 2f       	mov	r18, r24
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	3f 87       	std	Y+15, r19	; 0x0f
    3bce:	2e 87       	std	Y+14, r18	; 0x0e
    3bd0:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bd2:	9f 85       	ldd	r25, Y+15	; 0x0f
    3bd4:	82 30       	cpi	r24, 0x02	; 2
    3bd6:	91 05       	cpc	r25, r1
    3bd8:	59 f1       	breq	.+86     	; 0x3c30 <xTaskGenericNotify+0xd6>
    3bda:	2e 85       	ldd	r18, Y+14	; 0x0e
    3bdc:	3f 85       	ldd	r19, Y+15	; 0x0f
    3bde:	23 30       	cpi	r18, 0x03	; 3
    3be0:	31 05       	cpc	r19, r1
    3be2:	34 f4       	brge	.+12     	; 0x3bf0 <xTaskGenericNotify+0x96>
    3be4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3be6:	9f 85       	ldd	r25, Y+15	; 0x0f
    3be8:	81 30       	cpi	r24, 0x01	; 1
    3bea:	91 05       	cpc	r25, r1
    3bec:	61 f0       	breq	.+24     	; 0x3c06 <xTaskGenericNotify+0xac>
    3bee:	4a c0       	rjmp	.+148    	; 0x3c84 <xTaskGenericNotify+0x12a>
    3bf0:	2e 85       	ldd	r18, Y+14	; 0x0e
    3bf2:	3f 85       	ldd	r19, Y+15	; 0x0f
    3bf4:	23 30       	cpi	r18, 0x03	; 3
    3bf6:	31 05       	cpc	r19, r1
    3bf8:	59 f1       	breq	.+86     	; 0x3c50 <xTaskGenericNotify+0xf6>
    3bfa:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bfc:	9f 85       	ldd	r25, Y+15	; 0x0f
    3bfe:	84 30       	cpi	r24, 0x04	; 4
    3c00:	91 05       	cpc	r25, r1
    3c02:	89 f1       	breq	.+98     	; 0x3c66 <xTaskGenericNotify+0x10c>
    3c04:	3f c0       	rjmp	.+126    	; 0x3c84 <xTaskGenericNotify+0x12a>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    3c06:	eb 81       	ldd	r30, Y+3	; 0x03
    3c08:	fc 81       	ldd	r31, Y+4	; 0x04
    3c0a:	25 a1       	ldd	r18, Z+37	; 0x25
    3c0c:	36 a1       	ldd	r19, Z+38	; 0x26
    3c0e:	47 a1       	ldd	r20, Z+39	; 0x27
    3c10:	50 a5       	ldd	r21, Z+40	; 0x28
    3c12:	8f 81       	ldd	r24, Y+7	; 0x07
    3c14:	98 85       	ldd	r25, Y+8	; 0x08
    3c16:	a9 85       	ldd	r26, Y+9	; 0x09
    3c18:	ba 85       	ldd	r27, Y+10	; 0x0a
    3c1a:	82 2b       	or	r24, r18
    3c1c:	93 2b       	or	r25, r19
    3c1e:	a4 2b       	or	r26, r20
    3c20:	b5 2b       	or	r27, r21
    3c22:	eb 81       	ldd	r30, Y+3	; 0x03
    3c24:	fc 81       	ldd	r31, Y+4	; 0x04
    3c26:	85 a3       	std	Z+37, r24	; 0x25
    3c28:	96 a3       	std	Z+38, r25	; 0x26
    3c2a:	a7 a3       	std	Z+39, r26	; 0x27
    3c2c:	b0 a7       	std	Z+40, r27	; 0x28
    3c2e:	2a c0       	rjmp	.+84     	; 0x3c84 <xTaskGenericNotify+0x12a>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    3c30:	eb 81       	ldd	r30, Y+3	; 0x03
    3c32:	fc 81       	ldd	r31, Y+4	; 0x04
    3c34:	85 a1       	ldd	r24, Z+37	; 0x25
    3c36:	96 a1       	ldd	r25, Z+38	; 0x26
    3c38:	a7 a1       	ldd	r26, Z+39	; 0x27
    3c3a:	b0 a5       	ldd	r27, Z+40	; 0x28
    3c3c:	01 96       	adiw	r24, 0x01	; 1
    3c3e:	a1 1d       	adc	r26, r1
    3c40:	b1 1d       	adc	r27, r1
    3c42:	eb 81       	ldd	r30, Y+3	; 0x03
    3c44:	fc 81       	ldd	r31, Y+4	; 0x04
    3c46:	85 a3       	std	Z+37, r24	; 0x25
    3c48:	96 a3       	std	Z+38, r25	; 0x26
    3c4a:	a7 a3       	std	Z+39, r26	; 0x27
    3c4c:	b0 a7       	std	Z+40, r27	; 0x28
    3c4e:	1a c0       	rjmp	.+52     	; 0x3c84 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    3c50:	eb 81       	ldd	r30, Y+3	; 0x03
    3c52:	fc 81       	ldd	r31, Y+4	; 0x04
    3c54:	8f 81       	ldd	r24, Y+7	; 0x07
    3c56:	98 85       	ldd	r25, Y+8	; 0x08
    3c58:	a9 85       	ldd	r26, Y+9	; 0x09
    3c5a:	ba 85       	ldd	r27, Y+10	; 0x0a
    3c5c:	85 a3       	std	Z+37, r24	; 0x25
    3c5e:	96 a3       	std	Z+38, r25	; 0x26
    3c60:	a7 a3       	std	Z+39, r26	; 0x27
    3c62:	b0 a7       	std	Z+40, r27	; 0x28
    3c64:	0f c0       	rjmp	.+30     	; 0x3c84 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    3c66:	89 81       	ldd	r24, Y+1	; 0x01
    3c68:	82 30       	cpi	r24, 0x02	; 2
    3c6a:	59 f0       	breq	.+22     	; 0x3c82 <xTaskGenericNotify+0x128>
					{
						pxTCB->ulNotifiedValue = ulValue;
    3c6c:	eb 81       	ldd	r30, Y+3	; 0x03
    3c6e:	fc 81       	ldd	r31, Y+4	; 0x04
    3c70:	8f 81       	ldd	r24, Y+7	; 0x07
    3c72:	98 85       	ldd	r25, Y+8	; 0x08
    3c74:	a9 85       	ldd	r26, Y+9	; 0x09
    3c76:	ba 85       	ldd	r27, Y+10	; 0x0a
    3c78:	85 a3       	std	Z+37, r24	; 0x25
    3c7a:	96 a3       	std	Z+38, r25	; 0x26
    3c7c:	a7 a3       	std	Z+39, r26	; 0x27
    3c7e:	b0 a7       	std	Z+40, r27	; 0x28
    3c80:	01 c0       	rjmp	.+2      	; 0x3c84 <xTaskGenericNotify+0x12a>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    3c82:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    3c84:	89 81       	ldd	r24, Y+1	; 0x01
    3c86:	81 30       	cpi	r24, 0x01	; 1
    3c88:	b9 f5       	brne	.+110    	; 0x3cf8 <xTaskGenericNotify+0x19e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c8e:	02 96       	adiw	r24, 0x02	; 2
    3c90:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    3c94:	eb 81       	ldd	r30, Y+3	; 0x03
    3c96:	fc 81       	ldd	r31, Y+4	; 0x04
    3c98:	96 89       	ldd	r25, Z+22	; 0x16
    3c9a:	80 91 0f 04 	lds	r24, 0x040F
    3c9e:	89 17       	cp	r24, r25
    3ca0:	28 f4       	brcc	.+10     	; 0x3cac <xTaskGenericNotify+0x152>
    3ca2:	eb 81       	ldd	r30, Y+3	; 0x03
    3ca4:	fc 81       	ldd	r31, Y+4	; 0x04
    3ca6:	86 89       	ldd	r24, Z+22	; 0x16
    3ca8:	80 93 0f 04 	sts	0x040F, r24
    3cac:	eb 81       	ldd	r30, Y+3	; 0x03
    3cae:	fc 81       	ldd	r31, Y+4	; 0x04
    3cb0:	86 89       	ldd	r24, Z+22	; 0x16
    3cb2:	28 2f       	mov	r18, r24
    3cb4:	30 e0       	ldi	r19, 0x00	; 0
    3cb6:	c9 01       	movw	r24, r18
    3cb8:	88 0f       	add	r24, r24
    3cba:	99 1f       	adc	r25, r25
    3cbc:	88 0f       	add	r24, r24
    3cbe:	99 1f       	adc	r25, r25
    3cc0:	88 0f       	add	r24, r24
    3cc2:	99 1f       	adc	r25, r25
    3cc4:	82 0f       	add	r24, r18
    3cc6:	93 1f       	adc	r25, r19
    3cc8:	ac 01       	movw	r20, r24
    3cca:	46 5e       	subi	r20, 0xE6	; 230
    3ccc:	5b 4f       	sbci	r21, 0xFB	; 251
    3cce:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    3cd2:	9c 01       	movw	r18, r24
    3cd4:	2e 5f       	subi	r18, 0xFE	; 254
    3cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd8:	ca 01       	movw	r24, r20
    3cda:	b9 01       	movw	r22, r18
    3cdc:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    3ce0:	eb 81       	ldd	r30, Y+3	; 0x03
    3ce2:	fc 81       	ldd	r31, Y+4	; 0x04
    3ce4:	96 89       	ldd	r25, Z+22	; 0x16
    3ce6:	e0 91 09 04 	lds	r30, 0x0409
    3cea:	f0 91 0a 04 	lds	r31, 0x040A
    3cee:	86 89       	ldd	r24, Z+22	; 0x16
    3cf0:	89 17       	cp	r24, r25
    3cf2:	10 f4       	brcc	.+4      	; 0x3cf8 <xTaskGenericNotify+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    3cf4:	0e 94 d5 08 	call	0x11aa	; 0x11aa <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    3cf8:	0f 90       	pop	r0
    3cfa:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    3cfc:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    3cfe:	2f 96       	adiw	r28, 0x0f	; 15
    3d00:	0f b6       	in	r0, 0x3f	; 63
    3d02:	f8 94       	cli
    3d04:	de bf       	out	0x3e, r29	; 62
    3d06:	0f be       	out	0x3f, r0	; 63
    3d08:	cd bf       	out	0x3d, r28	; 61
    3d0a:	cf 91       	pop	r28
    3d0c:	df 91       	pop	r29
    3d0e:	1f 91       	pop	r17
    3d10:	0f 91       	pop	r16
    3d12:	08 95       	ret

00003d14 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    3d14:	ef 92       	push	r14
    3d16:	ff 92       	push	r15
    3d18:	0f 93       	push	r16
    3d1a:	1f 93       	push	r17
    3d1c:	df 93       	push	r29
    3d1e:	cf 93       	push	r28
    3d20:	cd b7       	in	r28, 0x3d	; 61
    3d22:	de b7       	in	r29, 0x3e	; 62
    3d24:	62 97       	sbiw	r28, 0x12	; 18
    3d26:	0f b6       	in	r0, 0x3f	; 63
    3d28:	f8 94       	cli
    3d2a:	de bf       	out	0x3e, r29	; 62
    3d2c:	0f be       	out	0x3f, r0	; 63
    3d2e:	cd bf       	out	0x3d, r28	; 61
    3d30:	9f 83       	std	Y+7, r25	; 0x07
    3d32:	8e 83       	std	Y+6, r24	; 0x06
    3d34:	48 87       	std	Y+8, r20	; 0x08
    3d36:	59 87       	std	Y+9, r21	; 0x09
    3d38:	6a 87       	std	Y+10, r22	; 0x0a
    3d3a:	7b 87       	std	Y+11, r23	; 0x0b
    3d3c:	2c 87       	std	Y+12, r18	; 0x0c
    3d3e:	1e 87       	std	Y+14, r17	; 0x0e
    3d40:	0d 87       	std	Y+13, r16	; 0x0d
    3d42:	f8 8a       	std	Y+16, r15	; 0x10
    3d44:	ef 86       	std	Y+15, r14	; 0x0f
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    3d46:	81 e0       	ldi	r24, 0x01	; 1
    3d48:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    3d4a:	8e 81       	ldd	r24, Y+6	; 0x06
    3d4c:	9f 81       	ldd	r25, Y+7	; 0x07
    3d4e:	9d 83       	std	Y+5, r25	; 0x05
    3d50:	8c 83       	std	Y+4, r24	; 0x04

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3d52:	19 82       	std	Y+1, r1	; 0x01
		{
			if( pulPreviousNotificationValue != NULL )
    3d54:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d56:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d58:	00 97       	sbiw	r24, 0x00	; 0
    3d5a:	61 f0       	breq	.+24     	; 0x3d74 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    3d5c:	ec 81       	ldd	r30, Y+4	; 0x04
    3d5e:	fd 81       	ldd	r31, Y+5	; 0x05
    3d60:	85 a1       	ldd	r24, Z+37	; 0x25
    3d62:	96 a1       	ldd	r25, Z+38	; 0x26
    3d64:	a7 a1       	ldd	r26, Z+39	; 0x27
    3d66:	b0 a5       	ldd	r27, Z+40	; 0x28
    3d68:	ed 85       	ldd	r30, Y+13	; 0x0d
    3d6a:	fe 85       	ldd	r31, Y+14	; 0x0e
    3d6c:	80 83       	st	Z, r24
    3d6e:	91 83       	std	Z+1, r25	; 0x01
    3d70:	a2 83       	std	Z+2, r26	; 0x02
    3d72:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    3d74:	ec 81       	ldd	r30, Y+4	; 0x04
    3d76:	fd 81       	ldd	r31, Y+5	; 0x05
    3d78:	81 a5       	ldd	r24, Z+41	; 0x29
    3d7a:	8b 83       	std	Y+3, r24	; 0x03
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    3d7c:	ec 81       	ldd	r30, Y+4	; 0x04
    3d7e:	fd 81       	ldd	r31, Y+5	; 0x05
    3d80:	82 e0       	ldi	r24, 0x02	; 2
    3d82:	81 a7       	std	Z+41, r24	; 0x29

			switch( eAction )
    3d84:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d86:	28 2f       	mov	r18, r24
    3d88:	30 e0       	ldi	r19, 0x00	; 0
    3d8a:	3a 8b       	std	Y+18, r19	; 0x12
    3d8c:	29 8b       	std	Y+17, r18	; 0x11
    3d8e:	89 89       	ldd	r24, Y+17	; 0x11
    3d90:	9a 89       	ldd	r25, Y+18	; 0x12
    3d92:	82 30       	cpi	r24, 0x02	; 2
    3d94:	91 05       	cpc	r25, r1
    3d96:	59 f1       	breq	.+86     	; 0x3dee <xTaskGenericNotifyFromISR+0xda>
    3d98:	29 89       	ldd	r18, Y+17	; 0x11
    3d9a:	3a 89       	ldd	r19, Y+18	; 0x12
    3d9c:	23 30       	cpi	r18, 0x03	; 3
    3d9e:	31 05       	cpc	r19, r1
    3da0:	34 f4       	brge	.+12     	; 0x3dae <xTaskGenericNotifyFromISR+0x9a>
    3da2:	89 89       	ldd	r24, Y+17	; 0x11
    3da4:	9a 89       	ldd	r25, Y+18	; 0x12
    3da6:	81 30       	cpi	r24, 0x01	; 1
    3da8:	91 05       	cpc	r25, r1
    3daa:	61 f0       	breq	.+24     	; 0x3dc4 <xTaskGenericNotifyFromISR+0xb0>
    3dac:	4a c0       	rjmp	.+148    	; 0x3e42 <xTaskGenericNotifyFromISR+0x12e>
    3dae:	29 89       	ldd	r18, Y+17	; 0x11
    3db0:	3a 89       	ldd	r19, Y+18	; 0x12
    3db2:	23 30       	cpi	r18, 0x03	; 3
    3db4:	31 05       	cpc	r19, r1
    3db6:	59 f1       	breq	.+86     	; 0x3e0e <xTaskGenericNotifyFromISR+0xfa>
    3db8:	89 89       	ldd	r24, Y+17	; 0x11
    3dba:	9a 89       	ldd	r25, Y+18	; 0x12
    3dbc:	84 30       	cpi	r24, 0x04	; 4
    3dbe:	91 05       	cpc	r25, r1
    3dc0:	89 f1       	breq	.+98     	; 0x3e24 <xTaskGenericNotifyFromISR+0x110>
    3dc2:	3f c0       	rjmp	.+126    	; 0x3e42 <xTaskGenericNotifyFromISR+0x12e>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    3dc4:	ec 81       	ldd	r30, Y+4	; 0x04
    3dc6:	fd 81       	ldd	r31, Y+5	; 0x05
    3dc8:	25 a1       	ldd	r18, Z+37	; 0x25
    3dca:	36 a1       	ldd	r19, Z+38	; 0x26
    3dcc:	47 a1       	ldd	r20, Z+39	; 0x27
    3dce:	50 a5       	ldd	r21, Z+40	; 0x28
    3dd0:	88 85       	ldd	r24, Y+8	; 0x08
    3dd2:	99 85       	ldd	r25, Y+9	; 0x09
    3dd4:	aa 85       	ldd	r26, Y+10	; 0x0a
    3dd6:	bb 85       	ldd	r27, Y+11	; 0x0b
    3dd8:	82 2b       	or	r24, r18
    3dda:	93 2b       	or	r25, r19
    3ddc:	a4 2b       	or	r26, r20
    3dde:	b5 2b       	or	r27, r21
    3de0:	ec 81       	ldd	r30, Y+4	; 0x04
    3de2:	fd 81       	ldd	r31, Y+5	; 0x05
    3de4:	85 a3       	std	Z+37, r24	; 0x25
    3de6:	96 a3       	std	Z+38, r25	; 0x26
    3de8:	a7 a3       	std	Z+39, r26	; 0x27
    3dea:	b0 a7       	std	Z+40, r27	; 0x28
    3dec:	2a c0       	rjmp	.+84     	; 0x3e42 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    3dee:	ec 81       	ldd	r30, Y+4	; 0x04
    3df0:	fd 81       	ldd	r31, Y+5	; 0x05
    3df2:	85 a1       	ldd	r24, Z+37	; 0x25
    3df4:	96 a1       	ldd	r25, Z+38	; 0x26
    3df6:	a7 a1       	ldd	r26, Z+39	; 0x27
    3df8:	b0 a5       	ldd	r27, Z+40	; 0x28
    3dfa:	01 96       	adiw	r24, 0x01	; 1
    3dfc:	a1 1d       	adc	r26, r1
    3dfe:	b1 1d       	adc	r27, r1
    3e00:	ec 81       	ldd	r30, Y+4	; 0x04
    3e02:	fd 81       	ldd	r31, Y+5	; 0x05
    3e04:	85 a3       	std	Z+37, r24	; 0x25
    3e06:	96 a3       	std	Z+38, r25	; 0x26
    3e08:	a7 a3       	std	Z+39, r26	; 0x27
    3e0a:	b0 a7       	std	Z+40, r27	; 0x28
    3e0c:	1a c0       	rjmp	.+52     	; 0x3e42 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    3e0e:	ec 81       	ldd	r30, Y+4	; 0x04
    3e10:	fd 81       	ldd	r31, Y+5	; 0x05
    3e12:	88 85       	ldd	r24, Y+8	; 0x08
    3e14:	99 85       	ldd	r25, Y+9	; 0x09
    3e16:	aa 85       	ldd	r26, Y+10	; 0x0a
    3e18:	bb 85       	ldd	r27, Y+11	; 0x0b
    3e1a:	85 a3       	std	Z+37, r24	; 0x25
    3e1c:	96 a3       	std	Z+38, r25	; 0x26
    3e1e:	a7 a3       	std	Z+39, r26	; 0x27
    3e20:	b0 a7       	std	Z+40, r27	; 0x28
    3e22:	0f c0       	rjmp	.+30     	; 0x3e42 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    3e24:	8b 81       	ldd	r24, Y+3	; 0x03
    3e26:	82 30       	cpi	r24, 0x02	; 2
    3e28:	59 f0       	breq	.+22     	; 0x3e40 <xTaskGenericNotifyFromISR+0x12c>
					{
						pxTCB->ulNotifiedValue = ulValue;
    3e2a:	ec 81       	ldd	r30, Y+4	; 0x04
    3e2c:	fd 81       	ldd	r31, Y+5	; 0x05
    3e2e:	88 85       	ldd	r24, Y+8	; 0x08
    3e30:	99 85       	ldd	r25, Y+9	; 0x09
    3e32:	aa 85       	ldd	r26, Y+10	; 0x0a
    3e34:	bb 85       	ldd	r27, Y+11	; 0x0b
    3e36:	85 a3       	std	Z+37, r24	; 0x25
    3e38:	96 a3       	std	Z+38, r25	; 0x26
    3e3a:	a7 a3       	std	Z+39, r26	; 0x27
    3e3c:	b0 a7       	std	Z+40, r27	; 0x28
    3e3e:	01 c0       	rjmp	.+2      	; 0x3e42 <xTaskGenericNotifyFromISR+0x12e>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    3e40:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    3e42:	8b 81       	ldd	r24, Y+3	; 0x03
    3e44:	81 30       	cpi	r24, 0x01	; 1
    3e46:	09 f0       	breq	.+2      	; 0x3e4a <xTaskGenericNotifyFromISR+0x136>
    3e48:	50 c0       	rjmp	.+160    	; 0x3eea <xTaskGenericNotifyFromISR+0x1d6>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3e4a:	80 91 19 04 	lds	r24, 0x0419
    3e4e:	88 23       	and	r24, r24
    3e50:	61 f5       	brne	.+88     	; 0x3eaa <xTaskGenericNotifyFromISR+0x196>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3e52:	8c 81       	ldd	r24, Y+4	; 0x04
    3e54:	9d 81       	ldd	r25, Y+5	; 0x05
    3e56:	02 96       	adiw	r24, 0x02	; 2
    3e58:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3e5c:	ec 81       	ldd	r30, Y+4	; 0x04
    3e5e:	fd 81       	ldd	r31, Y+5	; 0x05
    3e60:	96 89       	ldd	r25, Z+22	; 0x16
    3e62:	80 91 0f 04 	lds	r24, 0x040F
    3e66:	89 17       	cp	r24, r25
    3e68:	28 f4       	brcc	.+10     	; 0x3e74 <xTaskGenericNotifyFromISR+0x160>
    3e6a:	ec 81       	ldd	r30, Y+4	; 0x04
    3e6c:	fd 81       	ldd	r31, Y+5	; 0x05
    3e6e:	86 89       	ldd	r24, Z+22	; 0x16
    3e70:	80 93 0f 04 	sts	0x040F, r24
    3e74:	ec 81       	ldd	r30, Y+4	; 0x04
    3e76:	fd 81       	ldd	r31, Y+5	; 0x05
    3e78:	86 89       	ldd	r24, Z+22	; 0x16
    3e7a:	28 2f       	mov	r18, r24
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	c9 01       	movw	r24, r18
    3e80:	88 0f       	add	r24, r24
    3e82:	99 1f       	adc	r25, r25
    3e84:	88 0f       	add	r24, r24
    3e86:	99 1f       	adc	r25, r25
    3e88:	88 0f       	add	r24, r24
    3e8a:	99 1f       	adc	r25, r25
    3e8c:	82 0f       	add	r24, r18
    3e8e:	93 1f       	adc	r25, r19
    3e90:	ac 01       	movw	r20, r24
    3e92:	46 5e       	subi	r20, 0xE6	; 230
    3e94:	5b 4f       	sbci	r21, 0xFB	; 251
    3e96:	8c 81       	ldd	r24, Y+4	; 0x04
    3e98:	9d 81       	ldd	r25, Y+5	; 0x05
    3e9a:	9c 01       	movw	r18, r24
    3e9c:	2e 5f       	subi	r18, 0xFE	; 254
    3e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3ea0:	ca 01       	movw	r24, r20
    3ea2:	b9 01       	movw	r22, r18
    3ea4:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInsertEnd>
    3ea8:	0a c0       	rjmp	.+20     	; 0x3ebe <xTaskGenericNotifyFromISR+0x1aa>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3eaa:	8c 81       	ldd	r24, Y+4	; 0x04
    3eac:	9d 81       	ldd	r25, Y+5	; 0x05
    3eae:	9c 01       	movw	r18, r24
    3eb0:	24 5f       	subi	r18, 0xF4	; 244
    3eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    3eb4:	8d e5       	ldi	r24, 0x5D	; 93
    3eb6:	94 e0       	ldi	r25, 0x04	; 4
    3eb8:	b9 01       	movw	r22, r18
    3eba:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    3ebe:	ec 81       	ldd	r30, Y+4	; 0x04
    3ec0:	fd 81       	ldd	r31, Y+5	; 0x05
    3ec2:	96 89       	ldd	r25, Z+22	; 0x16
    3ec4:	e0 91 09 04 	lds	r30, 0x0409
    3ec8:	f0 91 0a 04 	lds	r31, 0x040A
    3ecc:	86 89       	ldd	r24, Z+22	; 0x16
    3ece:	89 17       	cp	r24, r25
    3ed0:	60 f4       	brcc	.+24     	; 0x3eea <xTaskGenericNotifyFromISR+0x1d6>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    3ed2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ed4:	98 89       	ldd	r25, Y+16	; 0x10
    3ed6:	00 97       	sbiw	r24, 0x00	; 0
    3ed8:	29 f0       	breq	.+10     	; 0x3ee4 <xTaskGenericNotifyFromISR+0x1d0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    3eda:	ef 85       	ldd	r30, Y+15	; 0x0f
    3edc:	f8 89       	ldd	r31, Y+16	; 0x10
    3ede:	81 e0       	ldi	r24, 0x01	; 1
    3ee0:	80 83       	st	Z, r24
    3ee2:	03 c0       	rjmp	.+6      	; 0x3eea <xTaskGenericNotifyFromISR+0x1d6>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    3ee4:	81 e0       	ldi	r24, 0x01	; 1
    3ee6:	80 93 12 04 	sts	0x0412, r24
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    3eea:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    3eec:	62 96       	adiw	r28, 0x12	; 18
    3eee:	0f b6       	in	r0, 0x3f	; 63
    3ef0:	f8 94       	cli
    3ef2:	de bf       	out	0x3e, r29	; 62
    3ef4:	0f be       	out	0x3f, r0	; 63
    3ef6:	cd bf       	out	0x3d, r28	; 61
    3ef8:	cf 91       	pop	r28
    3efa:	df 91       	pop	r29
    3efc:	1f 91       	pop	r17
    3efe:	0f 91       	pop	r16
    3f00:	ff 90       	pop	r15
    3f02:	ef 90       	pop	r14
    3f04:	08 95       	ret

00003f06 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    3f06:	df 93       	push	r29
    3f08:	cf 93       	push	r28
    3f0a:	cd b7       	in	r28, 0x3d	; 61
    3f0c:	de b7       	in	r29, 0x3e	; 62
    3f0e:	28 97       	sbiw	r28, 0x08	; 8
    3f10:	0f b6       	in	r0, 0x3f	; 63
    3f12:	f8 94       	cli
    3f14:	de bf       	out	0x3e, r29	; 62
    3f16:	0f be       	out	0x3f, r0	; 63
    3f18:	cd bf       	out	0x3d, r28	; 61
    3f1a:	9e 83       	std	Y+6, r25	; 0x06
    3f1c:	8d 83       	std	Y+5, r24	; 0x05
    3f1e:	78 87       	std	Y+8, r23	; 0x08
    3f20:	6f 83       	std	Y+7, r22	; 0x07
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    3f22:	8d 81       	ldd	r24, Y+5	; 0x05
    3f24:	9e 81       	ldd	r25, Y+6	; 0x06
    3f26:	9c 83       	std	Y+4, r25	; 0x04
    3f28:	8b 83       	std	Y+3, r24	; 0x03

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3f2a:	19 82       	std	Y+1, r1	; 0x01
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    3f2c:	eb 81       	ldd	r30, Y+3	; 0x03
    3f2e:	fc 81       	ldd	r31, Y+4	; 0x04
    3f30:	81 a5       	ldd	r24, Z+41	; 0x29
    3f32:	8a 83       	std	Y+2, r24	; 0x02
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    3f34:	eb 81       	ldd	r30, Y+3	; 0x03
    3f36:	fc 81       	ldd	r31, Y+4	; 0x04
    3f38:	82 e0       	ldi	r24, 0x02	; 2
    3f3a:	81 a7       	std	Z+41, r24	; 0x29

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    3f3c:	eb 81       	ldd	r30, Y+3	; 0x03
    3f3e:	fc 81       	ldd	r31, Y+4	; 0x04
    3f40:	85 a1       	ldd	r24, Z+37	; 0x25
    3f42:	96 a1       	ldd	r25, Z+38	; 0x26
    3f44:	a7 a1       	ldd	r26, Z+39	; 0x27
    3f46:	b0 a5       	ldd	r27, Z+40	; 0x28
    3f48:	01 96       	adiw	r24, 0x01	; 1
    3f4a:	a1 1d       	adc	r26, r1
    3f4c:	b1 1d       	adc	r27, r1
    3f4e:	eb 81       	ldd	r30, Y+3	; 0x03
    3f50:	fc 81       	ldd	r31, Y+4	; 0x04
    3f52:	85 a3       	std	Z+37, r24	; 0x25
    3f54:	96 a3       	std	Z+38, r25	; 0x26
    3f56:	a7 a3       	std	Z+39, r26	; 0x27
    3f58:	b0 a7       	std	Z+40, r27	; 0x28

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    3f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f5c:	81 30       	cpi	r24, 0x01	; 1
    3f5e:	09 f0       	breq	.+2      	; 0x3f62 <vTaskNotifyGiveFromISR+0x5c>
    3f60:	50 c0       	rjmp	.+160    	; 0x4002 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3f62:	80 91 19 04 	lds	r24, 0x0419
    3f66:	88 23       	and	r24, r24
    3f68:	61 f5       	brne	.+88     	; 0x3fc2 <vTaskNotifyGiveFromISR+0xbc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f6e:	02 96       	adiw	r24, 0x02	; 2
    3f70:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3f74:	eb 81       	ldd	r30, Y+3	; 0x03
    3f76:	fc 81       	ldd	r31, Y+4	; 0x04
    3f78:	96 89       	ldd	r25, Z+22	; 0x16
    3f7a:	80 91 0f 04 	lds	r24, 0x040F
    3f7e:	89 17       	cp	r24, r25
    3f80:	28 f4       	brcc	.+10     	; 0x3f8c <vTaskNotifyGiveFromISR+0x86>
    3f82:	eb 81       	ldd	r30, Y+3	; 0x03
    3f84:	fc 81       	ldd	r31, Y+4	; 0x04
    3f86:	86 89       	ldd	r24, Z+22	; 0x16
    3f88:	80 93 0f 04 	sts	0x040F, r24
    3f8c:	eb 81       	ldd	r30, Y+3	; 0x03
    3f8e:	fc 81       	ldd	r31, Y+4	; 0x04
    3f90:	86 89       	ldd	r24, Z+22	; 0x16
    3f92:	28 2f       	mov	r18, r24
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	c9 01       	movw	r24, r18
    3f98:	88 0f       	add	r24, r24
    3f9a:	99 1f       	adc	r25, r25
    3f9c:	88 0f       	add	r24, r24
    3f9e:	99 1f       	adc	r25, r25
    3fa0:	88 0f       	add	r24, r24
    3fa2:	99 1f       	adc	r25, r25
    3fa4:	82 0f       	add	r24, r18
    3fa6:	93 1f       	adc	r25, r19
    3fa8:	ac 01       	movw	r20, r24
    3faa:	46 5e       	subi	r20, 0xE6	; 230
    3fac:	5b 4f       	sbci	r21, 0xFB	; 251
    3fae:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    3fb2:	9c 01       	movw	r18, r24
    3fb4:	2e 5f       	subi	r18, 0xFE	; 254
    3fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    3fb8:	ca 01       	movw	r24, r20
    3fba:	b9 01       	movw	r22, r18
    3fbc:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInsertEnd>
    3fc0:	0a c0       	rjmp	.+20     	; 0x3fd6 <vTaskNotifyGiveFromISR+0xd0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    3fc6:	9c 01       	movw	r18, r24
    3fc8:	24 5f       	subi	r18, 0xF4	; 244
    3fca:	3f 4f       	sbci	r19, 0xFF	; 255
    3fcc:	8d e5       	ldi	r24, 0x5D	; 93
    3fce:	94 e0       	ldi	r25, 0x04	; 4
    3fd0:	b9 01       	movw	r22, r18
    3fd2:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    3fd6:	eb 81       	ldd	r30, Y+3	; 0x03
    3fd8:	fc 81       	ldd	r31, Y+4	; 0x04
    3fda:	96 89       	ldd	r25, Z+22	; 0x16
    3fdc:	e0 91 09 04 	lds	r30, 0x0409
    3fe0:	f0 91 0a 04 	lds	r31, 0x040A
    3fe4:	86 89       	ldd	r24, Z+22	; 0x16
    3fe6:	89 17       	cp	r24, r25
    3fe8:	60 f4       	brcc	.+24     	; 0x4002 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    3fea:	8f 81       	ldd	r24, Y+7	; 0x07
    3fec:	98 85       	ldd	r25, Y+8	; 0x08
    3fee:	00 97       	sbiw	r24, 0x00	; 0
    3ff0:	29 f0       	breq	.+10     	; 0x3ffc <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    3ff2:	ef 81       	ldd	r30, Y+7	; 0x07
    3ff4:	f8 85       	ldd	r31, Y+8	; 0x08
    3ff6:	81 e0       	ldi	r24, 0x01	; 1
    3ff8:	80 83       	st	Z, r24
    3ffa:	03 c0       	rjmp	.+6      	; 0x4002 <vTaskNotifyGiveFromISR+0xfc>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    3ffc:	81 e0       	ldi	r24, 0x01	; 1
    3ffe:	80 93 12 04 	sts	0x0412, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    4002:	28 96       	adiw	r28, 0x08	; 8
    4004:	0f b6       	in	r0, 0x3f	; 63
    4006:	f8 94       	cli
    4008:	de bf       	out	0x3e, r29	; 62
    400a:	0f be       	out	0x3f, r0	; 63
    400c:	cd bf       	out	0x3d, r28	; 61
    400e:	cf 91       	pop	r28
    4010:	df 91       	pop	r29
    4012:	08 95       	ret

00004014 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
    4014:	df 93       	push	r29
    4016:	cf 93       	push	r28
    4018:	cd b7       	in	r28, 0x3d	; 61
    401a:	de b7       	in	r29, 0x3e	; 62
    401c:	27 97       	sbiw	r28, 0x07	; 7
    401e:	0f b6       	in	r0, 0x3f	; 63
    4020:	f8 94       	cli
    4022:	de bf       	out	0x3e, r29	; 62
    4024:	0f be       	out	0x3f, r0	; 63
    4026:	cd bf       	out	0x3d, r28	; 61
    4028:	9d 83       	std	Y+5, r25	; 0x05
    402a:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    402c:	8c 81       	ldd	r24, Y+4	; 0x04
    402e:	9d 81       	ldd	r25, Y+5	; 0x05
    4030:	00 97       	sbiw	r24, 0x00	; 0
    4032:	39 f4       	brne	.+14     	; 0x4042 <xTaskNotifyStateClear+0x2e>
    4034:	80 91 09 04 	lds	r24, 0x0409
    4038:	90 91 0a 04 	lds	r25, 0x040A
    403c:	9f 83       	std	Y+7, r25	; 0x07
    403e:	8e 83       	std	Y+6, r24	; 0x06
    4040:	04 c0       	rjmp	.+8      	; 0x404a <xTaskNotifyStateClear+0x36>
    4042:	8c 81       	ldd	r24, Y+4	; 0x04
    4044:	9d 81       	ldd	r25, Y+5	; 0x05
    4046:	9f 83       	std	Y+7, r25	; 0x07
    4048:	8e 83       	std	Y+6, r24	; 0x06
    404a:	8e 81       	ldd	r24, Y+6	; 0x06
    404c:	9f 81       	ldd	r25, Y+7	; 0x07
    404e:	9b 83       	std	Y+3, r25	; 0x03
    4050:	8a 83       	std	Y+2, r24	; 0x02

		taskENTER_CRITICAL();
    4052:	0f b6       	in	r0, 0x3f	; 63
    4054:	f8 94       	cli
    4056:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    4058:	ea 81       	ldd	r30, Y+2	; 0x02
    405a:	fb 81       	ldd	r31, Y+3	; 0x03
    405c:	81 a5       	ldd	r24, Z+41	; 0x29
    405e:	82 30       	cpi	r24, 0x02	; 2
    4060:	31 f4       	brne	.+12     	; 0x406e <xTaskNotifyStateClear+0x5a>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4062:	ea 81       	ldd	r30, Y+2	; 0x02
    4064:	fb 81       	ldd	r31, Y+3	; 0x03
    4066:	11 a6       	std	Z+41, r1	; 0x29
				xReturn = pdPASS;
    4068:	81 e0       	ldi	r24, 0x01	; 1
    406a:	89 83       	std	Y+1, r24	; 0x01
    406c:	01 c0       	rjmp	.+2      	; 0x4070 <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
    406e:	19 82       	std	Y+1, r1	; 0x01
			}
		}
		taskEXIT_CRITICAL();
    4070:	0f 90       	pop	r0
    4072:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    4074:	89 81       	ldd	r24, Y+1	; 0x01
	}
    4076:	27 96       	adiw	r28, 0x07	; 7
    4078:	0f b6       	in	r0, 0x3f	; 63
    407a:	f8 94       	cli
    407c:	de bf       	out	0x3e, r29	; 62
    407e:	0f be       	out	0x3f, r0	; 63
    4080:	cd bf       	out	0x3d, r28	; 61
    4082:	cf 91       	pop	r28
    4084:	df 91       	pop	r29
    4086:	08 95       	ret

00004088 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    4088:	df 93       	push	r29
    408a:	cf 93       	push	r28
    408c:	cd b7       	in	r28, 0x3d	; 61
    408e:	de b7       	in	r29, 0x3e	; 62
    4090:	27 97       	sbiw	r28, 0x07	; 7
    4092:	0f b6       	in	r0, 0x3f	; 63
    4094:	f8 94       	cli
    4096:	de bf       	out	0x3e, r29	; 62
    4098:	0f be       	out	0x3f, r0	; 63
    409a:	cd bf       	out	0x3d, r28	; 61
    409c:	9e 83       	std	Y+6, r25	; 0x06
    409e:	8d 83       	std	Y+5, r24	; 0x05
    40a0:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    40a2:	80 91 0d 04 	lds	r24, 0x040D
    40a6:	90 91 0e 04 	lds	r25, 0x040E
    40aa:	9a 83       	std	Y+2, r25	; 0x02
    40ac:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    40ae:	80 91 09 04 	lds	r24, 0x0409
    40b2:	90 91 0a 04 	lds	r25, 0x040A
    40b6:	02 96       	adiw	r24, 0x02	; 2
    40b8:	0e 94 ca 06 	call	0xd94	; 0xd94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    40bc:	8d 81       	ldd	r24, Y+5	; 0x05
    40be:	9e 81       	ldd	r25, Y+6	; 0x06
    40c0:	2f ef       	ldi	r18, 0xFF	; 255
    40c2:	8f 3f       	cpi	r24, 0xFF	; 255
    40c4:	92 07       	cpc	r25, r18
    40c6:	81 f4       	brne	.+32     	; 0x40e8 <prvAddCurrentTaskToDelayedList+0x60>
    40c8:	8f 81       	ldd	r24, Y+7	; 0x07
    40ca:	88 23       	and	r24, r24
    40cc:	69 f0       	breq	.+26     	; 0x40e8 <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    40ce:	80 91 09 04 	lds	r24, 0x0409
    40d2:	90 91 0a 04 	lds	r25, 0x040A
    40d6:	9c 01       	movw	r18, r24
    40d8:	2e 5f       	subi	r18, 0xFE	; 254
    40da:	3f 4f       	sbci	r19, 0xFF	; 255
    40dc:	8f e6       	ldi	r24, 0x6F	; 111
    40de:	94 e0       	ldi	r25, 0x04	; 4
    40e0:	b9 01       	movw	r22, r18
    40e2:	0e 94 1a 06 	call	0xc34	; 0xc34 <vListInsertEnd>
    40e6:	43 c0       	rjmp	.+134    	; 0x416e <prvAddCurrentTaskToDelayedList+0xe6>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    40e8:	29 81       	ldd	r18, Y+1	; 0x01
    40ea:	3a 81       	ldd	r19, Y+2	; 0x02
    40ec:	8d 81       	ldd	r24, Y+5	; 0x05
    40ee:	9e 81       	ldd	r25, Y+6	; 0x06
    40f0:	82 0f       	add	r24, r18
    40f2:	93 1f       	adc	r25, r19
    40f4:	9c 83       	std	Y+4, r25	; 0x04
    40f6:	8b 83       	std	Y+3, r24	; 0x03

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    40f8:	e0 91 09 04 	lds	r30, 0x0409
    40fc:	f0 91 0a 04 	lds	r31, 0x040A
    4100:	8b 81       	ldd	r24, Y+3	; 0x03
    4102:	9c 81       	ldd	r25, Y+4	; 0x04
    4104:	93 83       	std	Z+3, r25	; 0x03
    4106:	82 83       	std	Z+2, r24	; 0x02

			if( xTimeToWake < xConstTickCount )
    4108:	2b 81       	ldd	r18, Y+3	; 0x03
    410a:	3c 81       	ldd	r19, Y+4	; 0x04
    410c:	89 81       	ldd	r24, Y+1	; 0x01
    410e:	9a 81       	ldd	r25, Y+2	; 0x02
    4110:	28 17       	cp	r18, r24
    4112:	39 07       	cpc	r19, r25
    4114:	70 f4       	brcc	.+28     	; 0x4132 <prvAddCurrentTaskToDelayedList+0xaa>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    4116:	80 91 5b 04 	lds	r24, 0x045B
    411a:	90 91 5c 04 	lds	r25, 0x045C
    411e:	20 91 09 04 	lds	r18, 0x0409
    4122:	30 91 0a 04 	lds	r19, 0x040A
    4126:	2e 5f       	subi	r18, 0xFE	; 254
    4128:	3f 4f       	sbci	r19, 0xFF	; 255
    412a:	b9 01       	movw	r22, r18
    412c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <vListInsert>
    4130:	1e c0       	rjmp	.+60     	; 0x416e <prvAddCurrentTaskToDelayedList+0xe6>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    4132:	40 91 59 04 	lds	r20, 0x0459
    4136:	50 91 5a 04 	lds	r21, 0x045A
    413a:	80 91 09 04 	lds	r24, 0x0409
    413e:	90 91 0a 04 	lds	r25, 0x040A
    4142:	9c 01       	movw	r18, r24
    4144:	2e 5f       	subi	r18, 0xFE	; 254
    4146:	3f 4f       	sbci	r19, 0xFF	; 255
    4148:	ca 01       	movw	r24, r20
    414a:	b9 01       	movw	r22, r18
    414c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    4150:	20 91 15 04 	lds	r18, 0x0415
    4154:	30 91 16 04 	lds	r19, 0x0416
    4158:	8b 81       	ldd	r24, Y+3	; 0x03
    415a:	9c 81       	ldd	r25, Y+4	; 0x04
    415c:	82 17       	cp	r24, r18
    415e:	93 07       	cpc	r25, r19
    4160:	30 f4       	brcc	.+12     	; 0x416e <prvAddCurrentTaskToDelayedList+0xe6>
				{
					xNextTaskUnblockTime = xTimeToWake;
    4162:	8b 81       	ldd	r24, Y+3	; 0x03
    4164:	9c 81       	ldd	r25, Y+4	; 0x04
    4166:	90 93 16 04 	sts	0x0416, r25
    416a:	80 93 15 04 	sts	0x0415, r24

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    416e:	27 96       	adiw	r28, 0x07	; 7
    4170:	0f b6       	in	r0, 0x3f	; 63
    4172:	f8 94       	cli
    4174:	de bf       	out	0x3e, r29	; 62
    4176:	0f be       	out	0x3f, r0	; 63
    4178:	cd bf       	out	0x3d, r28	; 61
    417a:	cf 91       	pop	r28
    417c:	df 91       	pop	r29
    417e:	08 95       	ret

00004180 <memcpy>:
    4180:	fb 01       	movw	r30, r22
    4182:	dc 01       	movw	r26, r24
    4184:	02 c0       	rjmp	.+4      	; 0x418a <memcpy+0xa>
    4186:	01 90       	ld	r0, Z+
    4188:	0d 92       	st	X+, r0
    418a:	41 50       	subi	r20, 0x01	; 1
    418c:	50 40       	sbci	r21, 0x00	; 0
    418e:	d8 f7       	brcc	.-10     	; 0x4186 <memcpy+0x6>
    4190:	08 95       	ret

00004192 <_exit>:
    4192:	f8 94       	cli

00004194 <__stop_program>:
    4194:	ff cf       	rjmp	.-2      	; 0x4194 <__stop_program>
