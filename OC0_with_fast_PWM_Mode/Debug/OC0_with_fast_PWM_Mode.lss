
OC0_with_fast_PWM_Mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d86  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000fc0  00000000  00000000  00000ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000923  00000000  00000000  00001d9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <main>
  64:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_vsetPINDir>:


#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_vsetPINDir+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <DIO_vsetPINDir+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	89 83       	std	Y+1, r24	; 0x01
  7c:	6a 83       	std	Y+2, r22	; 0x02
  7e:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
  80:	89 81       	ldd	r24, Y+1	; 0x01
  82:	28 2f       	mov	r18, r24
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	3d 83       	std	Y+5, r19	; 0x05
  88:	2c 83       	std	Y+4, r18	; 0x04
  8a:	8c 81       	ldd	r24, Y+4	; 0x04
  8c:	9d 81       	ldd	r25, Y+5	; 0x05
  8e:	82 34       	cpi	r24, 0x42	; 66
  90:	91 05       	cpc	r25, r1
  92:	09 f4       	brne	.+2      	; 0x96 <DIO_vsetPINDir+0x2a>
  94:	44 c0       	rjmp	.+136    	; 0x11e <DIO_vsetPINDir+0xb2>
  96:	2c 81       	ldd	r18, Y+4	; 0x04
  98:	3d 81       	ldd	r19, Y+5	; 0x05
  9a:	23 34       	cpi	r18, 0x43	; 67
  9c:	31 05       	cpc	r19, r1
  9e:	34 f4       	brge	.+12     	; 0xac <DIO_vsetPINDir+0x40>
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	9d 81       	ldd	r25, Y+5	; 0x05
  a4:	81 34       	cpi	r24, 0x41	; 65
  a6:	91 05       	cpc	r25, r1
  a8:	71 f0       	breq	.+28     	; 0xc6 <DIO_vsetPINDir+0x5a>
  aa:	bc c0       	rjmp	.+376    	; 0x224 <DIO_vsetPINDir+0x1b8>
  ac:	2c 81       	ldd	r18, Y+4	; 0x04
  ae:	3d 81       	ldd	r19, Y+5	; 0x05
  b0:	23 34       	cpi	r18, 0x43	; 67
  b2:	31 05       	cpc	r19, r1
  b4:	09 f4       	brne	.+2      	; 0xb8 <DIO_vsetPINDir+0x4c>
  b6:	5f c0       	rjmp	.+190    	; 0x176 <DIO_vsetPINDir+0x10a>
  b8:	8c 81       	ldd	r24, Y+4	; 0x04
  ba:	9d 81       	ldd	r25, Y+5	; 0x05
  bc:	84 34       	cpi	r24, 0x44	; 68
  be:	91 05       	cpc	r25, r1
  c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_vsetPINDir+0x58>
  c2:	85 c0       	rjmp	.+266    	; 0x1ce <DIO_vsetPINDir+0x162>
  c4:	af c0       	rjmp	.+350    	; 0x224 <DIO_vsetPINDir+0x1b8>
	{
		
		
		case 'A':
		if(direction==1)
  c6:	8b 81       	ldd	r24, Y+3	; 0x03
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	a1 f4       	brne	.+40     	; 0xf4 <DIO_vsetPINDir+0x88>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
  cc:	aa e3       	ldi	r26, 0x3A	; 58
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	ea e3       	ldi	r30, 0x3A	; 58
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	48 2f       	mov	r20, r24
  d8:	8a 81       	ldd	r24, Y+2	; 0x02
  da:	28 2f       	mov	r18, r24
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 2e       	mov	r0, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_vsetPINDir+0x7e>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_vsetPINDir+0x7a>
  ee:	84 2b       	or	r24, r20
  f0:	8c 93       	st	X, r24
  f2:	98 c0       	rjmp	.+304    	; 0x224 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
  f4:	aa e3       	ldi	r26, 0x3A	; 58
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	ea e3       	ldi	r30, 0x3A	; 58
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	48 2f       	mov	r20, r24
 100:	8a 81       	ldd	r24, Y+2	; 0x02
 102:	28 2f       	mov	r18, r24
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 2e       	mov	r0, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_vsetPINDir+0xa6>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_vsetPINDir+0xa2>
 116:	80 95       	com	r24
 118:	84 23       	and	r24, r20
 11a:	8c 93       	st	X, r24
 11c:	83 c0       	rjmp	.+262    	; 0x224 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'B':
		if(direction==1)
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	a1 f4       	brne	.+40     	; 0x14c <DIO_vsetPINDir+0xe0>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 124:	a7 e3       	ldi	r26, 0x37	; 55
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	e7 e3       	ldi	r30, 0x37	; 55
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	48 2f       	mov	r20, r24
 130:	8a 81       	ldd	r24, Y+2	; 0x02
 132:	28 2f       	mov	r18, r24
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 2e       	mov	r0, r18
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_vsetPINDir+0xd6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_vsetPINDir+0xd2>
 146:	84 2b       	or	r24, r20
 148:	8c 93       	st	X, r24
 14a:	6c c0       	rjmp	.+216    	; 0x224 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 14c:	a7 e3       	ldi	r26, 0x37	; 55
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	e7 e3       	ldi	r30, 0x37	; 55
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	48 2f       	mov	r20, r24
 158:	8a 81       	ldd	r24, Y+2	; 0x02
 15a:	28 2f       	mov	r18, r24
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 2e       	mov	r0, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_vsetPINDir+0xfe>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_vsetPINDir+0xfa>
 16e:	80 95       	com	r24
 170:	84 23       	and	r24, r20
 172:	8c 93       	st	X, r24
 174:	57 c0       	rjmp	.+174    	; 0x224 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'C':
		if(direction==1)
 176:	8b 81       	ldd	r24, Y+3	; 0x03
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	a1 f4       	brne	.+40     	; 0x1a4 <DIO_vsetPINDir+0x138>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 17c:	a4 e3       	ldi	r26, 0x34	; 52
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	e4 e3       	ldi	r30, 0x34	; 52
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	48 2f       	mov	r20, r24
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	28 2f       	mov	r18, r24
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 2e       	mov	r0, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_vsetPINDir+0x12e>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	0a 94       	dec	r0
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_vsetPINDir+0x12a>
 19e:	84 2b       	or	r24, r20
 1a0:	8c 93       	st	X, r24
 1a2:	40 c0       	rjmp	.+128    	; 0x224 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 1a4:	a4 e3       	ldi	r26, 0x34	; 52
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	e4 e3       	ldi	r30, 0x34	; 52
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	48 2f       	mov	r20, r24
 1b0:	8a 81       	ldd	r24, Y+2	; 0x02
 1b2:	28 2f       	mov	r18, r24
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 2e       	mov	r0, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_vsetPINDir+0x156>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_vsetPINDir+0x152>
 1c6:	80 95       	com	r24
 1c8:	84 23       	and	r24, r20
 1ca:	8c 93       	st	X, r24
 1cc:	2b c0       	rjmp	.+86     	; 0x224 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'D':
		if(direction==1)
 1ce:	8b 81       	ldd	r24, Y+3	; 0x03
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	a1 f4       	brne	.+40     	; 0x1fc <DIO_vsetPINDir+0x190>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 1d4:	a1 e3       	ldi	r26, 0x31	; 49
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	e1 e3       	ldi	r30, 0x31	; 49
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	48 2f       	mov	r20, r24
 1e0:	8a 81       	ldd	r24, Y+2	; 0x02
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 2e       	mov	r0, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_vsetPINDir+0x186>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_vsetPINDir+0x182>
 1f6:	84 2b       	or	r24, r20
 1f8:	8c 93       	st	X, r24
 1fa:	14 c0       	rjmp	.+40     	; 0x224 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 1fc:	a1 e3       	ldi	r26, 0x31	; 49
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	e1 e3       	ldi	r30, 0x31	; 49
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	48 2f       	mov	r20, r24
 208:	8a 81       	ldd	r24, Y+2	; 0x02
 20a:	28 2f       	mov	r18, r24
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 2e       	mov	r0, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_vsetPINDir+0x1ae>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_vsetPINDir+0x1aa>
 21e:	80 95       	com	r24
 220:	84 23       	and	r24, r20
 222:	8c 93       	st	X, r24
		}
		break;
		default: 
		break;
	}
}
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	0f 90       	pop	r0
 22e:	cf 91       	pop	r28
 230:	df 91       	pop	r29
 232:	08 95       	ret

00000234 <DIO_write>:


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
 234:	df 93       	push	r29
 236:	cf 93       	push	r28
 238:	00 d0       	rcall	.+0      	; 0x23a <DIO_write+0x6>
 23a:	00 d0       	rcall	.+0      	; 0x23c <DIO_write+0x8>
 23c:	0f 92       	push	r0
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	89 83       	std	Y+1, r24	; 0x01
 244:	6a 83       	std	Y+2, r22	; 0x02
 246:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	28 2f       	mov	r18, r24
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	3d 83       	std	Y+5, r19	; 0x05
 250:	2c 83       	std	Y+4, r18	; 0x04
 252:	8c 81       	ldd	r24, Y+4	; 0x04
 254:	9d 81       	ldd	r25, Y+5	; 0x05
 256:	82 34       	cpi	r24, 0x42	; 66
 258:	91 05       	cpc	r25, r1
 25a:	09 f4       	brne	.+2      	; 0x25e <DIO_write+0x2a>
 25c:	44 c0       	rjmp	.+136    	; 0x2e6 <DIO_write+0xb2>
 25e:	2c 81       	ldd	r18, Y+4	; 0x04
 260:	3d 81       	ldd	r19, Y+5	; 0x05
 262:	23 34       	cpi	r18, 0x43	; 67
 264:	31 05       	cpc	r19, r1
 266:	34 f4       	brge	.+12     	; 0x274 <DIO_write+0x40>
 268:	8c 81       	ldd	r24, Y+4	; 0x04
 26a:	9d 81       	ldd	r25, Y+5	; 0x05
 26c:	81 34       	cpi	r24, 0x41	; 65
 26e:	91 05       	cpc	r25, r1
 270:	71 f0       	breq	.+28     	; 0x28e <DIO_write+0x5a>
 272:	bc c0       	rjmp	.+376    	; 0x3ec <DIO_write+0x1b8>
 274:	2c 81       	ldd	r18, Y+4	; 0x04
 276:	3d 81       	ldd	r19, Y+5	; 0x05
 278:	23 34       	cpi	r18, 0x43	; 67
 27a:	31 05       	cpc	r19, r1
 27c:	09 f4       	brne	.+2      	; 0x280 <DIO_write+0x4c>
 27e:	5f c0       	rjmp	.+190    	; 0x33e <DIO_write+0x10a>
 280:	8c 81       	ldd	r24, Y+4	; 0x04
 282:	9d 81       	ldd	r25, Y+5	; 0x05
 284:	84 34       	cpi	r24, 0x44	; 68
 286:	91 05       	cpc	r25, r1
 288:	09 f4       	brne	.+2      	; 0x28c <DIO_write+0x58>
 28a:	85 c0       	rjmp	.+266    	; 0x396 <DIO_write+0x162>
 28c:	af c0       	rjmp	.+350    	; 0x3ec <DIO_write+0x1b8>
	{
		case 'A' :
		
		if(outputvalue==1)
 28e:	8b 81       	ldd	r24, Y+3	; 0x03
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	a1 f4       	brne	.+40     	; 0x2bc <DIO_write+0x88>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 294:	ab e3       	ldi	r26, 0x3B	; 59
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	eb e3       	ldi	r30, 0x3B	; 59
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	48 2f       	mov	r20, r24
 2a0:	8a 81       	ldd	r24, Y+2	; 0x02
 2a2:	28 2f       	mov	r18, r24
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 2e       	mov	r0, r18
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_write+0x7e>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	0a 94       	dec	r0
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_write+0x7a>
 2b6:	84 2b       	or	r24, r20
 2b8:	8c 93       	st	X, r24
 2ba:	98 c0       	rjmp	.+304    	; 0x3ec <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 2bc:	ab e3       	ldi	r26, 0x3B	; 59
 2be:	b0 e0       	ldi	r27, 0x00	; 0
 2c0:	eb e3       	ldi	r30, 0x3B	; 59
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	48 2f       	mov	r20, r24
 2c8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ca:	28 2f       	mov	r18, r24
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 2e       	mov	r0, r18
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_write+0xa6>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	0a 94       	dec	r0
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_write+0xa2>
 2de:	80 95       	com	r24
 2e0:	84 23       	and	r24, r20
 2e2:	8c 93       	st	X, r24
 2e4:	83 c0       	rjmp	.+262    	; 0x3ec <DIO_write+0x1b8>
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 2e6:	8b 81       	ldd	r24, Y+3	; 0x03
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	a1 f4       	brne	.+40     	; 0x314 <DIO_write+0xe0>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 2ec:	a8 e3       	ldi	r26, 0x38	; 56
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	e8 e3       	ldi	r30, 0x38	; 56
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	48 2f       	mov	r20, r24
 2f8:	8a 81       	ldd	r24, Y+2	; 0x02
 2fa:	28 2f       	mov	r18, r24
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 2e       	mov	r0, r18
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_write+0xd6>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	0a 94       	dec	r0
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_write+0xd2>
 30e:	84 2b       	or	r24, r20
 310:	8c 93       	st	X, r24
 312:	6c c0       	rjmp	.+216    	; 0x3ec <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 314:	a8 e3       	ldi	r26, 0x38	; 56
 316:	b0 e0       	ldi	r27, 0x00	; 0
 318:	e8 e3       	ldi	r30, 0x38	; 56
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	48 2f       	mov	r20, r24
 320:	8a 81       	ldd	r24, Y+2	; 0x02
 322:	28 2f       	mov	r18, r24
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 2e       	mov	r0, r18
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_write+0xfe>
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	0a 94       	dec	r0
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_write+0xfa>
 336:	80 95       	com	r24
 338:	84 23       	and	r24, r20
 33a:	8c 93       	st	X, r24
 33c:	57 c0       	rjmp	.+174    	; 0x3ec <DIO_write+0x1b8>
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 33e:	8b 81       	ldd	r24, Y+3	; 0x03
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	a1 f4       	brne	.+40     	; 0x36c <DIO_write+0x138>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 344:	a5 e3       	ldi	r26, 0x35	; 53
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	e5 e3       	ldi	r30, 0x35	; 53
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	48 2f       	mov	r20, r24
 350:	8a 81       	ldd	r24, Y+2	; 0x02
 352:	28 2f       	mov	r18, r24
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 2e       	mov	r0, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_write+0x12e>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	0a 94       	dec	r0
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_write+0x12a>
 366:	84 2b       	or	r24, r20
 368:	8c 93       	st	X, r24
 36a:	40 c0       	rjmp	.+128    	; 0x3ec <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 36c:	a5 e3       	ldi	r26, 0x35	; 53
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	e5 e3       	ldi	r30, 0x35	; 53
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	48 2f       	mov	r20, r24
 378:	8a 81       	ldd	r24, Y+2	; 0x02
 37a:	28 2f       	mov	r18, r24
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 2e       	mov	r0, r18
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_write+0x156>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	0a 94       	dec	r0
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_write+0x152>
 38e:	80 95       	com	r24
 390:	84 23       	and	r24, r20
 392:	8c 93       	st	X, r24
 394:	2b c0       	rjmp	.+86     	; 0x3ec <DIO_write+0x1b8>
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 396:	8b 81       	ldd	r24, Y+3	; 0x03
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	a1 f4       	brne	.+40     	; 0x3c4 <DIO_write+0x190>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 39c:	a2 e3       	ldi	r26, 0x32	; 50
 39e:	b0 e0       	ldi	r27, 0x00	; 0
 3a0:	e2 e3       	ldi	r30, 0x32	; 50
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	48 2f       	mov	r20, r24
 3a8:	8a 81       	ldd	r24, Y+2	; 0x02
 3aa:	28 2f       	mov	r18, r24
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 2e       	mov	r0, r18
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_write+0x186>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	0a 94       	dec	r0
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_write+0x182>
 3be:	84 2b       	or	r24, r20
 3c0:	8c 93       	st	X, r24
 3c2:	14 c0       	rjmp	.+40     	; 0x3ec <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 3c4:	a2 e3       	ldi	r26, 0x32	; 50
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	e2 e3       	ldi	r30, 0x32	; 50
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	48 2f       	mov	r20, r24
 3d0:	8a 81       	ldd	r24, Y+2	; 0x02
 3d2:	28 2f       	mov	r18, r24
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 2e       	mov	r0, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_write+0x1ae>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	0a 94       	dec	r0
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_write+0x1aa>
 3e6:	80 95       	com	r24
 3e8:	84 23       	and	r24, r20
 3ea:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	cf 91       	pop	r28
 3f8:	df 91       	pop	r29
 3fa:	08 95       	ret

000003fc <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
 3fc:	df 93       	push	r29
 3fe:	cf 93       	push	r28
 400:	00 d0       	rcall	.+0      	; 0x402 <DIO_u8read+0x6>
 402:	00 d0       	rcall	.+0      	; 0x404 <DIO_u8read+0x8>
 404:	0f 92       	push	r0
 406:	cd b7       	in	r28, 0x3d	; 61
 408:	de b7       	in	r29, 0x3e	; 62
 40a:	8a 83       	std	Y+2, r24	; 0x02
 40c:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char return_value=0;
 40e:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	28 2f       	mov	r18, r24
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	3d 83       	std	Y+5, r19	; 0x05
 418:	2c 83       	std	Y+4, r18	; 0x04
 41a:	4c 81       	ldd	r20, Y+4	; 0x04
 41c:	5d 81       	ldd	r21, Y+5	; 0x05
 41e:	42 34       	cpi	r20, 0x42	; 66
 420:	51 05       	cpc	r21, r1
 422:	b1 f1       	breq	.+108    	; 0x490 <DIO_u8read+0x94>
 424:	8c 81       	ldd	r24, Y+4	; 0x04
 426:	9d 81       	ldd	r25, Y+5	; 0x05
 428:	83 34       	cpi	r24, 0x43	; 67
 42a:	91 05       	cpc	r25, r1
 42c:	34 f4       	brge	.+12     	; 0x43a <DIO_u8read+0x3e>
 42e:	2c 81       	ldd	r18, Y+4	; 0x04
 430:	3d 81       	ldd	r19, Y+5	; 0x05
 432:	21 34       	cpi	r18, 0x41	; 65
 434:	31 05       	cpc	r19, r1
 436:	71 f0       	breq	.+28     	; 0x454 <DIO_u8read+0x58>
 438:	84 c0       	rjmp	.+264    	; 0x542 <DIO_u8read+0x146>
 43a:	4c 81       	ldd	r20, Y+4	; 0x04
 43c:	5d 81       	ldd	r21, Y+5	; 0x05
 43e:	43 34       	cpi	r20, 0x43	; 67
 440:	51 05       	cpc	r21, r1
 442:	09 f4       	brne	.+2      	; 0x446 <DIO_u8read+0x4a>
 444:	43 c0       	rjmp	.+134    	; 0x4cc <DIO_u8read+0xd0>
 446:	8c 81       	ldd	r24, Y+4	; 0x04
 448:	9d 81       	ldd	r25, Y+5	; 0x05
 44a:	84 34       	cpi	r24, 0x44	; 68
 44c:	91 05       	cpc	r25, r1
 44e:	09 f4       	brne	.+2      	; 0x452 <DIO_u8read+0x56>
 450:	5b c0       	rjmp	.+182    	; 0x508 <DIO_u8read+0x10c>
 452:	77 c0       	rjmp	.+238    	; 0x542 <DIO_u8read+0x146>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 454:	e9 e3       	ldi	r30, 0x39	; 57
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	48 2f       	mov	r20, r24
 45c:	50 e0       	ldi	r21, 0x00	; 0
 45e:	8b 81       	ldd	r24, Y+3	; 0x03
 460:	28 2f       	mov	r18, r24
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_u8read+0x72>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	2a 95       	dec	r18
 470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_u8read+0x6e>
 472:	9a 01       	movw	r18, r20
 474:	28 23       	and	r18, r24
 476:	39 23       	and	r19, r25
 478:	8b 81       	ldd	r24, Y+3	; 0x03
 47a:	88 2f       	mov	r24, r24
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	a9 01       	movw	r20, r18
 480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_u8read+0x8a>
 482:	55 95       	asr	r21
 484:	47 95       	ror	r20
 486:	8a 95       	dec	r24
 488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_u8read+0x86>
 48a:	ca 01       	movw	r24, r20
 48c:	89 83       	std	Y+1, r24	; 0x01
 48e:	59 c0       	rjmp	.+178    	; 0x542 <DIO_u8read+0x146>
		break;
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 490:	e6 e3       	ldi	r30, 0x36	; 54
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	48 2f       	mov	r20, r24
 498:	50 e0       	ldi	r21, 0x00	; 0
 49a:	8b 81       	ldd	r24, Y+3	; 0x03
 49c:	28 2f       	mov	r18, r24
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_u8read+0xae>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	2a 95       	dec	r18
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_u8read+0xaa>
 4ae:	9a 01       	movw	r18, r20
 4b0:	28 23       	and	r18, r24
 4b2:	39 23       	and	r19, r25
 4b4:	8b 81       	ldd	r24, Y+3	; 0x03
 4b6:	88 2f       	mov	r24, r24
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	a9 01       	movw	r20, r18
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_u8read+0xc6>
 4be:	55 95       	asr	r21
 4c0:	47 95       	ror	r20
 4c2:	8a 95       	dec	r24
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_u8read+0xc2>
 4c6:	ca 01       	movw	r24, r20
 4c8:	89 83       	std	Y+1, r24	; 0x01
 4ca:	3b c0       	rjmp	.+118    	; 0x542 <DIO_u8read+0x146>
		break;
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 4cc:	e3 e3       	ldi	r30, 0x33	; 51
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	80 81       	ld	r24, Z
 4d2:	48 2f       	mov	r20, r24
 4d4:	50 e0       	ldi	r21, 0x00	; 0
 4d6:	8b 81       	ldd	r24, Y+3	; 0x03
 4d8:	28 2f       	mov	r18, r24
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_u8read+0xea>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	2a 95       	dec	r18
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_u8read+0xe6>
 4ea:	9a 01       	movw	r18, r20
 4ec:	28 23       	and	r18, r24
 4ee:	39 23       	and	r19, r25
 4f0:	8b 81       	ldd	r24, Y+3	; 0x03
 4f2:	88 2f       	mov	r24, r24
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	a9 01       	movw	r20, r18
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_u8read+0x102>
 4fa:	55 95       	asr	r21
 4fc:	47 95       	ror	r20
 4fe:	8a 95       	dec	r24
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_u8read+0xfe>
 502:	ca 01       	movw	r24, r20
 504:	89 83       	std	Y+1, r24	; 0x01
 506:	1d c0       	rjmp	.+58     	; 0x542 <DIO_u8read+0x146>
		break;
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 508:	e0 e3       	ldi	r30, 0x30	; 48
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	48 2f       	mov	r20, r24
 510:	50 e0       	ldi	r21, 0x00	; 0
 512:	8b 81       	ldd	r24, Y+3	; 0x03
 514:	28 2f       	mov	r18, r24
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_u8read+0x126>
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	2a 95       	dec	r18
 524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_u8read+0x122>
 526:	9a 01       	movw	r18, r20
 528:	28 23       	and	r18, r24
 52a:	39 23       	and	r19, r25
 52c:	8b 81       	ldd	r24, Y+3	; 0x03
 52e:	88 2f       	mov	r24, r24
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	a9 01       	movw	r20, r18
 534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_u8read+0x13e>
 536:	55 95       	asr	r21
 538:	47 95       	ror	r20
 53a:	8a 95       	dec	r24
 53c:	e2 f7       	brpl	.-8      	; 0x536 <DIO_u8read+0x13a>
 53e:	ca 01       	movw	r24, r20
 540:	89 83       	std	Y+1, r24	; 0x01
		break;
		default: 
		break;
	}
	return return_value ;
 542:	89 81       	ldd	r24, Y+1	; 0x01
}
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	0f 90       	pop	r0
 54a:	0f 90       	pop	r0
 54c:	0f 90       	pop	r0
 54e:	cf 91       	pop	r28
 550:	df 91       	pop	r29
 552:	08 95       	ret

00000554 <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
 554:	df 93       	push	r29
 556:	cf 93       	push	r28
 558:	00 d0       	rcall	.+0      	; 0x55a <DIO_toggle+0x6>
 55a:	00 d0       	rcall	.+0      	; 0x55c <DIO_toggle+0x8>
 55c:	cd b7       	in	r28, 0x3d	; 61
 55e:	de b7       	in	r29, 0x3e	; 62
 560:	89 83       	std	Y+1, r24	; 0x01
 562:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
 564:	89 81       	ldd	r24, Y+1	; 0x01
 566:	28 2f       	mov	r18, r24
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	3c 83       	std	Y+4, r19	; 0x04
 56c:	2b 83       	std	Y+3, r18	; 0x03
 56e:	8b 81       	ldd	r24, Y+3	; 0x03
 570:	9c 81       	ldd	r25, Y+4	; 0x04
 572:	82 34       	cpi	r24, 0x42	; 66
 574:	91 05       	cpc	r25, r1
 576:	51 f1       	breq	.+84     	; 0x5cc <DIO_toggle+0x78>
 578:	2b 81       	ldd	r18, Y+3	; 0x03
 57a:	3c 81       	ldd	r19, Y+4	; 0x04
 57c:	23 34       	cpi	r18, 0x43	; 67
 57e:	31 05       	cpc	r19, r1
 580:	34 f4       	brge	.+12     	; 0x58e <DIO_toggle+0x3a>
 582:	8b 81       	ldd	r24, Y+3	; 0x03
 584:	9c 81       	ldd	r25, Y+4	; 0x04
 586:	81 34       	cpi	r24, 0x41	; 65
 588:	91 05       	cpc	r25, r1
 58a:	61 f0       	breq	.+24     	; 0x5a4 <DIO_toggle+0x50>
 58c:	5a c0       	rjmp	.+180    	; 0x642 <DIO_toggle+0xee>
 58e:	2b 81       	ldd	r18, Y+3	; 0x03
 590:	3c 81       	ldd	r19, Y+4	; 0x04
 592:	23 34       	cpi	r18, 0x43	; 67
 594:	31 05       	cpc	r19, r1
 596:	71 f1       	breq	.+92     	; 0x5f4 <DIO_toggle+0xa0>
 598:	8b 81       	ldd	r24, Y+3	; 0x03
 59a:	9c 81       	ldd	r25, Y+4	; 0x04
 59c:	84 34       	cpi	r24, 0x44	; 68
 59e:	91 05       	cpc	r25, r1
 5a0:	e9 f1       	breq	.+122    	; 0x61c <DIO_toggle+0xc8>
 5a2:	4f c0       	rjmp	.+158    	; 0x642 <DIO_toggle+0xee>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 5a4:	ab e3       	ldi	r26, 0x3B	; 59
 5a6:	b0 e0       	ldi	r27, 0x00	; 0
 5a8:	eb e3       	ldi	r30, 0x3B	; 59
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	80 81       	ld	r24, Z
 5ae:	48 2f       	mov	r20, r24
 5b0:	8a 81       	ldd	r24, Y+2	; 0x02
 5b2:	28 2f       	mov	r18, r24
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	02 2e       	mov	r0, r18
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_toggle+0x6e>
 5be:	88 0f       	add	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	0a 94       	dec	r0
 5c4:	e2 f7       	brpl	.-8      	; 0x5be <DIO_toggle+0x6a>
 5c6:	84 27       	eor	r24, r20
 5c8:	8c 93       	st	X, r24
 5ca:	3b c0       	rjmp	.+118    	; 0x642 <DIO_toggle+0xee>
		break;
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 5cc:	a8 e3       	ldi	r26, 0x38	; 56
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
 5d0:	e8 e3       	ldi	r30, 0x38	; 56
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	80 81       	ld	r24, Z
 5d6:	48 2f       	mov	r20, r24
 5d8:	8a 81       	ldd	r24, Y+2	; 0x02
 5da:	28 2f       	mov	r18, r24
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	02 2e       	mov	r0, r18
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_toggle+0x96>
 5e6:	88 0f       	add	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	0a 94       	dec	r0
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_toggle+0x92>
 5ee:	84 27       	eor	r24, r20
 5f0:	8c 93       	st	X, r24
 5f2:	27 c0       	rjmp	.+78     	; 0x642 <DIO_toggle+0xee>
		break;
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 5f4:	a5 e3       	ldi	r26, 0x35	; 53
 5f6:	b0 e0       	ldi	r27, 0x00	; 0
 5f8:	e5 e3       	ldi	r30, 0x35	; 53
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	80 81       	ld	r24, Z
 5fe:	48 2f       	mov	r20, r24
 600:	8a 81       	ldd	r24, Y+2	; 0x02
 602:	28 2f       	mov	r18, r24
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	02 2e       	mov	r0, r18
 60c:	02 c0       	rjmp	.+4      	; 0x612 <DIO_toggle+0xbe>
 60e:	88 0f       	add	r24, r24
 610:	99 1f       	adc	r25, r25
 612:	0a 94       	dec	r0
 614:	e2 f7       	brpl	.-8      	; 0x60e <DIO_toggle+0xba>
 616:	84 27       	eor	r24, r20
 618:	8c 93       	st	X, r24
 61a:	13 c0       	rjmp	.+38     	; 0x642 <DIO_toggle+0xee>
		break;
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 61c:	a2 e3       	ldi	r26, 0x32	; 50
 61e:	b0 e0       	ldi	r27, 0x00	; 0
 620:	e2 e3       	ldi	r30, 0x32	; 50
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	80 81       	ld	r24, Z
 626:	48 2f       	mov	r20, r24
 628:	8a 81       	ldd	r24, Y+2	; 0x02
 62a:	28 2f       	mov	r18, r24
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	02 2e       	mov	r0, r18
 634:	02 c0       	rjmp	.+4      	; 0x63a <DIO_toggle+0xe6>
 636:	88 0f       	add	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	0a 94       	dec	r0
 63c:	e2 f7       	brpl	.-8      	; 0x636 <DIO_toggle+0xe2>
 63e:	84 27       	eor	r24, r20
 640:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
 642:	0f 90       	pop	r0
 644:	0f 90       	pop	r0
 646:	0f 90       	pop	r0
 648:	0f 90       	pop	r0
 64a:	cf 91       	pop	r28
 64c:	df 91       	pop	r29
 64e:	08 95       	ret

00000650 <DIO_set_port_direction>:
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
 650:	df 93       	push	r29
 652:	cf 93       	push	r28
 654:	00 d0       	rcall	.+0      	; 0x656 <DIO_set_port_direction+0x6>
 656:	00 d0       	rcall	.+0      	; 0x658 <DIO_set_port_direction+0x8>
 658:	cd b7       	in	r28, 0x3d	; 61
 65a:	de b7       	in	r29, 0x3e	; 62
 65c:	89 83       	std	Y+1, r24	; 0x01
 65e:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
 660:	89 81       	ldd	r24, Y+1	; 0x01
 662:	28 2f       	mov	r18, r24
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	3c 83       	std	Y+4, r19	; 0x04
 668:	2b 83       	std	Y+3, r18	; 0x03
 66a:	8b 81       	ldd	r24, Y+3	; 0x03
 66c:	9c 81       	ldd	r25, Y+4	; 0x04
 66e:	82 34       	cpi	r24, 0x42	; 66
 670:	91 05       	cpc	r25, r1
 672:	d9 f0       	breq	.+54     	; 0x6aa <DIO_set_port_direction+0x5a>
 674:	2b 81       	ldd	r18, Y+3	; 0x03
 676:	3c 81       	ldd	r19, Y+4	; 0x04
 678:	23 34       	cpi	r18, 0x43	; 67
 67a:	31 05       	cpc	r19, r1
 67c:	34 f4       	brge	.+12     	; 0x68a <DIO_set_port_direction+0x3a>
 67e:	8b 81       	ldd	r24, Y+3	; 0x03
 680:	9c 81       	ldd	r25, Y+4	; 0x04
 682:	81 34       	cpi	r24, 0x41	; 65
 684:	91 05       	cpc	r25, r1
 686:	61 f0       	breq	.+24     	; 0x6a0 <DIO_set_port_direction+0x50>
 688:	1e c0       	rjmp	.+60     	; 0x6c6 <DIO_set_port_direction+0x76>
 68a:	2b 81       	ldd	r18, Y+3	; 0x03
 68c:	3c 81       	ldd	r19, Y+4	; 0x04
 68e:	23 34       	cpi	r18, 0x43	; 67
 690:	31 05       	cpc	r19, r1
 692:	81 f0       	breq	.+32     	; 0x6b4 <DIO_set_port_direction+0x64>
 694:	8b 81       	ldd	r24, Y+3	; 0x03
 696:	9c 81       	ldd	r25, Y+4	; 0x04
 698:	84 34       	cpi	r24, 0x44	; 68
 69a:	91 05       	cpc	r25, r1
 69c:	81 f0       	breq	.+32     	; 0x6be <DIO_set_port_direction+0x6e>
 69e:	13 c0       	rjmp	.+38     	; 0x6c6 <DIO_set_port_direction+0x76>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
 6a0:	ea e3       	ldi	r30, 0x3A	; 58
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	8a 81       	ldd	r24, Y+2	; 0x02
 6a6:	80 83       	st	Z, r24
 6a8:	0e c0       	rjmp	.+28     	; 0x6c6 <DIO_set_port_direction+0x76>
		break ;
		case 'B':
		DDRB=direction; //set the direction of port B
 6aa:	e7 e3       	ldi	r30, 0x37	; 55
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	8a 81       	ldd	r24, Y+2	; 0x02
 6b0:	80 83       	st	Z, r24
 6b2:	09 c0       	rjmp	.+18     	; 0x6c6 <DIO_set_port_direction+0x76>
		break ;
		case 'C' :
		DDRC=direction; //set the direction of port C
 6b4:	e4 e3       	ldi	r30, 0x34	; 52
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ba:	80 83       	st	Z, r24
 6bc:	04 c0       	rjmp	.+8      	; 0x6c6 <DIO_set_port_direction+0x76>
		break ;
		case 'D':
		DDRD=direction; //set the direction of port D
 6be:	e1 e3       	ldi	r30, 0x31	; 49
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	8a 81       	ldd	r24, Y+2	; 0x02
 6c4:	80 83       	st	Z, r24
		break ;
		default:
		break ;
	}
	
}
 6c6:	0f 90       	pop	r0
 6c8:	0f 90       	pop	r0
 6ca:	0f 90       	pop	r0
 6cc:	0f 90       	pop	r0
 6ce:	cf 91       	pop	r28
 6d0:	df 91       	pop	r29
 6d2:	08 95       	ret

000006d4 <DIO_write_port>:
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
 6d4:	df 93       	push	r29
 6d6:	cf 93       	push	r28
 6d8:	00 d0       	rcall	.+0      	; 0x6da <DIO_write_port+0x6>
 6da:	00 d0       	rcall	.+0      	; 0x6dc <DIO_write_port+0x8>
 6dc:	cd b7       	in	r28, 0x3d	; 61
 6de:	de b7       	in	r29, 0x3e	; 62
 6e0:	89 83       	std	Y+1, r24	; 0x01
 6e2:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
 6e4:	89 81       	ldd	r24, Y+1	; 0x01
 6e6:	28 2f       	mov	r18, r24
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	3c 83       	std	Y+4, r19	; 0x04
 6ec:	2b 83       	std	Y+3, r18	; 0x03
 6ee:	8b 81       	ldd	r24, Y+3	; 0x03
 6f0:	9c 81       	ldd	r25, Y+4	; 0x04
 6f2:	82 34       	cpi	r24, 0x42	; 66
 6f4:	91 05       	cpc	r25, r1
 6f6:	d9 f0       	breq	.+54     	; 0x72e <DIO_write_port+0x5a>
 6f8:	2b 81       	ldd	r18, Y+3	; 0x03
 6fa:	3c 81       	ldd	r19, Y+4	; 0x04
 6fc:	23 34       	cpi	r18, 0x43	; 67
 6fe:	31 05       	cpc	r19, r1
 700:	34 f4       	brge	.+12     	; 0x70e <DIO_write_port+0x3a>
 702:	8b 81       	ldd	r24, Y+3	; 0x03
 704:	9c 81       	ldd	r25, Y+4	; 0x04
 706:	81 34       	cpi	r24, 0x41	; 65
 708:	91 05       	cpc	r25, r1
 70a:	61 f0       	breq	.+24     	; 0x724 <DIO_write_port+0x50>
 70c:	1e c0       	rjmp	.+60     	; 0x74a <DIO_write_port+0x76>
 70e:	2b 81       	ldd	r18, Y+3	; 0x03
 710:	3c 81       	ldd	r19, Y+4	; 0x04
 712:	23 34       	cpi	r18, 0x43	; 67
 714:	31 05       	cpc	r19, r1
 716:	81 f0       	breq	.+32     	; 0x738 <DIO_write_port+0x64>
 718:	8b 81       	ldd	r24, Y+3	; 0x03
 71a:	9c 81       	ldd	r25, Y+4	; 0x04
 71c:	84 34       	cpi	r24, 0x44	; 68
 71e:	91 05       	cpc	r25, r1
 720:	81 f0       	breq	.+32     	; 0x742 <DIO_write_port+0x6e>
 722:	13 c0       	rjmp	.+38     	; 0x74a <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 724:	eb e3       	ldi	r30, 0x3B	; 59
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	8a 81       	ldd	r24, Y+2	; 0x02
 72a:	80 83       	st	Z, r24
 72c:	0e c0       	rjmp	.+28     	; 0x74a <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 72e:	e8 e3       	ldi	r30, 0x38	; 56
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	8a 81       	ldd	r24, Y+2	; 0x02
 734:	80 83       	st	Z, r24
 736:	09 c0       	rjmp	.+18     	; 0x74a <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 738:	e5 e3       	ldi	r30, 0x35	; 53
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	8a 81       	ldd	r24, Y+2	; 0x02
 73e:	80 83       	st	Z, r24
 740:	04 c0       	rjmp	.+8      	; 0x74a <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 742:	e2 e3       	ldi	r30, 0x32	; 50
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	8a 81       	ldd	r24, Y+2	; 0x02
 748:	80 83       	st	Z, r24
		break ;
		default:
		 break ;
	}
}
 74a:	0f 90       	pop	r0
 74c:	0f 90       	pop	r0
 74e:	0f 90       	pop	r0
 750:	0f 90       	pop	r0
 752:	cf 91       	pop	r28
 754:	df 91       	pop	r29
 756:	08 95       	ret

00000758 <DIO_read_port>:

unsigned char DIO_read_port(unsigned char portname)
{
 758:	df 93       	push	r29
 75a:	cf 93       	push	r28
 75c:	00 d0       	rcall	.+0      	; 0x75e <DIO_read_port+0x6>
 75e:	00 d0       	rcall	.+0      	; 0x760 <DIO_read_port+0x8>
 760:	cd b7       	in	r28, 0x3d	; 61
 762:	de b7       	in	r29, 0x3e	; 62
 764:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char return_val=0;
 766:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
 768:	8a 81       	ldd	r24, Y+2	; 0x02
 76a:	28 2f       	mov	r18, r24
 76c:	30 e0       	ldi	r19, 0x00	; 0
 76e:	3c 83       	std	Y+4, r19	; 0x04
 770:	2b 83       	std	Y+3, r18	; 0x03
 772:	8b 81       	ldd	r24, Y+3	; 0x03
 774:	9c 81       	ldd	r25, Y+4	; 0x04
 776:	82 34       	cpi	r24, 0x42	; 66
 778:	91 05       	cpc	r25, r1
 77a:	d9 f0       	breq	.+54     	; 0x7b2 <DIO_read_port+0x5a>
 77c:	2b 81       	ldd	r18, Y+3	; 0x03
 77e:	3c 81       	ldd	r19, Y+4	; 0x04
 780:	23 34       	cpi	r18, 0x43	; 67
 782:	31 05       	cpc	r19, r1
 784:	34 f4       	brge	.+12     	; 0x792 <DIO_read_port+0x3a>
 786:	8b 81       	ldd	r24, Y+3	; 0x03
 788:	9c 81       	ldd	r25, Y+4	; 0x04
 78a:	81 34       	cpi	r24, 0x41	; 65
 78c:	91 05       	cpc	r25, r1
 78e:	61 f0       	breq	.+24     	; 0x7a8 <DIO_read_port+0x50>
 790:	1e c0       	rjmp	.+60     	; 0x7ce <DIO_read_port+0x76>
 792:	2b 81       	ldd	r18, Y+3	; 0x03
 794:	3c 81       	ldd	r19, Y+4	; 0x04
 796:	23 34       	cpi	r18, 0x43	; 67
 798:	31 05       	cpc	r19, r1
 79a:	81 f0       	breq	.+32     	; 0x7bc <DIO_read_port+0x64>
 79c:	8b 81       	ldd	r24, Y+3	; 0x03
 79e:	9c 81       	ldd	r25, Y+4	; 0x04
 7a0:	84 34       	cpi	r24, 0x44	; 68
 7a2:	91 05       	cpc	r25, r1
 7a4:	81 f0       	breq	.+32     	; 0x7c6 <DIO_read_port+0x6e>
 7a6:	13 c0       	rjmp	.+38     	; 0x7ce <DIO_read_port+0x76>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
 7a8:	e9 e3       	ldi	r30, 0x39	; 57
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	80 81       	ld	r24, Z
 7ae:	89 83       	std	Y+1, r24	; 0x01
 7b0:	0e c0       	rjmp	.+28     	; 0x7ce <DIO_read_port+0x76>
		break ;
		case 'B':
		return_val=PINB; // read the value of port B 
 7b2:	e6 e3       	ldi	r30, 0x36	; 54
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	80 81       	ld	r24, Z
 7b8:	89 83       	std	Y+1, r24	; 0x01
 7ba:	09 c0       	rjmp	.+18     	; 0x7ce <DIO_read_port+0x76>
		break ;
		case 'C' :
		return_val=PINC; // read the value of port C 
 7bc:	e3 e3       	ldi	r30, 0x33	; 51
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	80 81       	ld	r24, Z
 7c2:	89 83       	std	Y+1, r24	; 0x01
 7c4:	04 c0       	rjmp	.+8      	; 0x7ce <DIO_read_port+0x76>
		break ;
		case 'D':
		return_val=PIND; // read the value of port D 
 7c6:	e0 e3       	ldi	r30, 0x30	; 48
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	80 81       	ld	r24, Z
 7cc:	89 83       	std	Y+1, r24	; 0x01
		break ;
		default:
		break ;
	}
	return return_val;
 7ce:	89 81       	ldd	r24, Y+1	; 0x01
}
 7d0:	0f 90       	pop	r0
 7d2:	0f 90       	pop	r0
 7d4:	0f 90       	pop	r0
 7d6:	0f 90       	pop	r0
 7d8:	cf 91       	pop	r28
 7da:	df 91       	pop	r29
 7dc:	08 95       	ret

000007de <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
 7de:	df 93       	push	r29
 7e0:	cf 93       	push	r28
 7e2:	00 d0       	rcall	.+0      	; 0x7e4 <DIO_vconnectpullup+0x6>
 7e4:	00 d0       	rcall	.+0      	; 0x7e6 <DIO_vconnectpullup+0x8>
 7e6:	0f 92       	push	r0
 7e8:	cd b7       	in	r28, 0x3d	; 61
 7ea:	de b7       	in	r29, 0x3e	; 62
 7ec:	89 83       	std	Y+1, r24	; 0x01
 7ee:	6a 83       	std	Y+2, r22	; 0x02
 7f0:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
 7f2:	89 81       	ldd	r24, Y+1	; 0x01
 7f4:	28 2f       	mov	r18, r24
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	3d 83       	std	Y+5, r19	; 0x05
 7fa:	2c 83       	std	Y+4, r18	; 0x04
 7fc:	8c 81       	ldd	r24, Y+4	; 0x04
 7fe:	9d 81       	ldd	r25, Y+5	; 0x05
 800:	82 34       	cpi	r24, 0x42	; 66
 802:	91 05       	cpc	r25, r1
 804:	09 f4       	brne	.+2      	; 0x808 <DIO_vconnectpullup+0x2a>
 806:	44 c0       	rjmp	.+136    	; 0x890 <__stack+0x31>
 808:	2c 81       	ldd	r18, Y+4	; 0x04
 80a:	3d 81       	ldd	r19, Y+5	; 0x05
 80c:	23 34       	cpi	r18, 0x43	; 67
 80e:	31 05       	cpc	r19, r1
 810:	34 f4       	brge	.+12     	; 0x81e <DIO_vconnectpullup+0x40>
 812:	8c 81       	ldd	r24, Y+4	; 0x04
 814:	9d 81       	ldd	r25, Y+5	; 0x05
 816:	81 34       	cpi	r24, 0x41	; 65
 818:	91 05       	cpc	r25, r1
 81a:	71 f0       	breq	.+28     	; 0x838 <DIO_vconnectpullup+0x5a>
 81c:	bc c0       	rjmp	.+376    	; 0x996 <__stack+0x137>
 81e:	2c 81       	ldd	r18, Y+4	; 0x04
 820:	3d 81       	ldd	r19, Y+5	; 0x05
 822:	23 34       	cpi	r18, 0x43	; 67
 824:	31 05       	cpc	r19, r1
 826:	09 f4       	brne	.+2      	; 0x82a <DIO_vconnectpullup+0x4c>
 828:	5f c0       	rjmp	.+190    	; 0x8e8 <__stack+0x89>
 82a:	8c 81       	ldd	r24, Y+4	; 0x04
 82c:	9d 81       	ldd	r25, Y+5	; 0x05
 82e:	84 34       	cpi	r24, 0x44	; 68
 830:	91 05       	cpc	r25, r1
 832:	09 f4       	brne	.+2      	; 0x836 <DIO_vconnectpullup+0x58>
 834:	85 c0       	rjmp	.+266    	; 0x940 <__stack+0xe1>
 836:	af c0       	rjmp	.+350    	; 0x996 <__stack+0x137>
	{
		case 'A':
		if(connect_pullup==1)
 838:	8b 81       	ldd	r24, Y+3	; 0x03
 83a:	81 30       	cpi	r24, 0x01	; 1
 83c:	a1 f4       	brne	.+40     	; 0x866 <__stack+0x7>
		{
			SET_BIT(PORTA,pinnumber);
 83e:	ab e3       	ldi	r26, 0x3B	; 59
 840:	b0 e0       	ldi	r27, 0x00	; 0
 842:	eb e3       	ldi	r30, 0x3B	; 59
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	80 81       	ld	r24, Z
 848:	48 2f       	mov	r20, r24
 84a:	8a 81       	ldd	r24, Y+2	; 0x02
 84c:	28 2f       	mov	r18, r24
 84e:	30 e0       	ldi	r19, 0x00	; 0
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	02 2e       	mov	r0, r18
 856:	02 c0       	rjmp	.+4      	; 0x85c <DIO_vconnectpullup+0x7e>
 858:	88 0f       	add	r24, r24
 85a:	99 1f       	adc	r25, r25
 85c:	0a 94       	dec	r0
 85e:	e2 f7       	brpl	.-8      	; 0x858 <DIO_vconnectpullup+0x7a>
 860:	84 2b       	or	r24, r20
 862:	8c 93       	st	X, r24
 864:	98 c0       	rjmp	.+304    	; 0x996 <__stack+0x137>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 866:	ab e3       	ldi	r26, 0x3B	; 59
 868:	b0 e0       	ldi	r27, 0x00	; 0
 86a:	eb e3       	ldi	r30, 0x3B	; 59
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	80 81       	ld	r24, Z
 870:	48 2f       	mov	r20, r24
 872:	8a 81       	ldd	r24, Y+2	; 0x02
 874:	28 2f       	mov	r18, r24
 876:	30 e0       	ldi	r19, 0x00	; 0
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	02 2e       	mov	r0, r18
 87e:	02 c0       	rjmp	.+4      	; 0x884 <__stack+0x25>
 880:	88 0f       	add	r24, r24
 882:	99 1f       	adc	r25, r25
 884:	0a 94       	dec	r0
 886:	e2 f7       	brpl	.-8      	; 0x880 <__stack+0x21>
 888:	80 95       	com	r24
 88a:	84 23       	and	r24, r20
 88c:	8c 93       	st	X, r24
 88e:	83 c0       	rjmp	.+262    	; 0x996 <__stack+0x137>
		}
		break;
		case 'B':
		if(connect_pullup==1)
 890:	8b 81       	ldd	r24, Y+3	; 0x03
 892:	81 30       	cpi	r24, 0x01	; 1
 894:	a1 f4       	brne	.+40     	; 0x8be <__stack+0x5f>
		{
			SET_BIT(PORTB,pinnumber);
 896:	a8 e3       	ldi	r26, 0x38	; 56
 898:	b0 e0       	ldi	r27, 0x00	; 0
 89a:	e8 e3       	ldi	r30, 0x38	; 56
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	80 81       	ld	r24, Z
 8a0:	48 2f       	mov	r20, r24
 8a2:	8a 81       	ldd	r24, Y+2	; 0x02
 8a4:	28 2f       	mov	r18, r24
 8a6:	30 e0       	ldi	r19, 0x00	; 0
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	02 2e       	mov	r0, r18
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__stack+0x55>
 8b0:	88 0f       	add	r24, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	0a 94       	dec	r0
 8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <__stack+0x51>
 8b8:	84 2b       	or	r24, r20
 8ba:	8c 93       	st	X, r24
 8bc:	6c c0       	rjmp	.+216    	; 0x996 <__stack+0x137>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 8be:	a8 e3       	ldi	r26, 0x38	; 56
 8c0:	b0 e0       	ldi	r27, 0x00	; 0
 8c2:	e8 e3       	ldi	r30, 0x38	; 56
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	80 81       	ld	r24, Z
 8c8:	48 2f       	mov	r20, r24
 8ca:	8a 81       	ldd	r24, Y+2	; 0x02
 8cc:	28 2f       	mov	r18, r24
 8ce:	30 e0       	ldi	r19, 0x00	; 0
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	02 2e       	mov	r0, r18
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <__stack+0x7d>
 8d8:	88 0f       	add	r24, r24
 8da:	99 1f       	adc	r25, r25
 8dc:	0a 94       	dec	r0
 8de:	e2 f7       	brpl	.-8      	; 0x8d8 <__stack+0x79>
 8e0:	80 95       	com	r24
 8e2:	84 23       	and	r24, r20
 8e4:	8c 93       	st	X, r24
 8e6:	57 c0       	rjmp	.+174    	; 0x996 <__stack+0x137>
		}
		break;
		case 'C':
		if(connect_pullup==1)
 8e8:	8b 81       	ldd	r24, Y+3	; 0x03
 8ea:	81 30       	cpi	r24, 0x01	; 1
 8ec:	a1 f4       	brne	.+40     	; 0x916 <__stack+0xb7>
		{
			SET_BIT(PORTC,pinnumber);
 8ee:	a5 e3       	ldi	r26, 0x35	; 53
 8f0:	b0 e0       	ldi	r27, 0x00	; 0
 8f2:	e5 e3       	ldi	r30, 0x35	; 53
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	80 81       	ld	r24, Z
 8f8:	48 2f       	mov	r20, r24
 8fa:	8a 81       	ldd	r24, Y+2	; 0x02
 8fc:	28 2f       	mov	r18, r24
 8fe:	30 e0       	ldi	r19, 0x00	; 0
 900:	81 e0       	ldi	r24, 0x01	; 1
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	02 2e       	mov	r0, r18
 906:	02 c0       	rjmp	.+4      	; 0x90c <__stack+0xad>
 908:	88 0f       	add	r24, r24
 90a:	99 1f       	adc	r25, r25
 90c:	0a 94       	dec	r0
 90e:	e2 f7       	brpl	.-8      	; 0x908 <__stack+0xa9>
 910:	84 2b       	or	r24, r20
 912:	8c 93       	st	X, r24
 914:	40 c0       	rjmp	.+128    	; 0x996 <__stack+0x137>
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 916:	a5 e3       	ldi	r26, 0x35	; 53
 918:	b0 e0       	ldi	r27, 0x00	; 0
 91a:	e5 e3       	ldi	r30, 0x35	; 53
 91c:	f0 e0       	ldi	r31, 0x00	; 0
 91e:	80 81       	ld	r24, Z
 920:	48 2f       	mov	r20, r24
 922:	8a 81       	ldd	r24, Y+2	; 0x02
 924:	28 2f       	mov	r18, r24
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	02 2e       	mov	r0, r18
 92e:	02 c0       	rjmp	.+4      	; 0x934 <__stack+0xd5>
 930:	88 0f       	add	r24, r24
 932:	99 1f       	adc	r25, r25
 934:	0a 94       	dec	r0
 936:	e2 f7       	brpl	.-8      	; 0x930 <__stack+0xd1>
 938:	80 95       	com	r24
 93a:	84 23       	and	r24, r20
 93c:	8c 93       	st	X, r24
 93e:	2b c0       	rjmp	.+86     	; 0x996 <__stack+0x137>
		}
		break;
		case 'D':
		if(connect_pullup==1)
 940:	8b 81       	ldd	r24, Y+3	; 0x03
 942:	81 30       	cpi	r24, 0x01	; 1
 944:	a1 f4       	brne	.+40     	; 0x96e <__stack+0x10f>
		{
			SET_BIT(PORTD,pinnumber);
 946:	a2 e3       	ldi	r26, 0x32	; 50
 948:	b0 e0       	ldi	r27, 0x00	; 0
 94a:	e2 e3       	ldi	r30, 0x32	; 50
 94c:	f0 e0       	ldi	r31, 0x00	; 0
 94e:	80 81       	ld	r24, Z
 950:	48 2f       	mov	r20, r24
 952:	8a 81       	ldd	r24, Y+2	; 0x02
 954:	28 2f       	mov	r18, r24
 956:	30 e0       	ldi	r19, 0x00	; 0
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	02 2e       	mov	r0, r18
 95e:	02 c0       	rjmp	.+4      	; 0x964 <__stack+0x105>
 960:	88 0f       	add	r24, r24
 962:	99 1f       	adc	r25, r25
 964:	0a 94       	dec	r0
 966:	e2 f7       	brpl	.-8      	; 0x960 <__stack+0x101>
 968:	84 2b       	or	r24, r20
 96a:	8c 93       	st	X, r24
 96c:	14 c0       	rjmp	.+40     	; 0x996 <__stack+0x137>
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 96e:	a2 e3       	ldi	r26, 0x32	; 50
 970:	b0 e0       	ldi	r27, 0x00	; 0
 972:	e2 e3       	ldi	r30, 0x32	; 50
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	80 81       	ld	r24, Z
 978:	48 2f       	mov	r20, r24
 97a:	8a 81       	ldd	r24, Y+2	; 0x02
 97c:	28 2f       	mov	r18, r24
 97e:	30 e0       	ldi	r19, 0x00	; 0
 980:	81 e0       	ldi	r24, 0x01	; 1
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	02 2e       	mov	r0, r18
 986:	02 c0       	rjmp	.+4      	; 0x98c <__stack+0x12d>
 988:	88 0f       	add	r24, r24
 98a:	99 1f       	adc	r25, r25
 98c:	0a 94       	dec	r0
 98e:	e2 f7       	brpl	.-8      	; 0x988 <__stack+0x129>
 990:	80 95       	com	r24
 992:	84 23       	and	r24, r20
 994:	8c 93       	st	X, r24
		}
		break;
		
	}
}
 996:	0f 90       	pop	r0
 998:	0f 90       	pop	r0
 99a:	0f 90       	pop	r0
 99c:	0f 90       	pop	r0
 99e:	0f 90       	pop	r0
 9a0:	cf 91       	pop	r28
 9a2:	df 91       	pop	r29
 9a4:	08 95       	ret

000009a6 <write_low_nibble>:

void write_low_nibble(unsigned char portname,unsigned char value)
{
 9a6:	df 93       	push	r29
 9a8:	cf 93       	push	r28
 9aa:	00 d0       	rcall	.+0      	; 0x9ac <write_low_nibble+0x6>
 9ac:	00 d0       	rcall	.+0      	; 0x9ae <write_low_nibble+0x8>
 9ae:	cd b7       	in	r28, 0x3d	; 61
 9b0:	de b7       	in	r29, 0x3e	; 62
 9b2:	89 83       	std	Y+1, r24	; 0x01
 9b4:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
 9b6:	8a 81       	ldd	r24, Y+2	; 0x02
 9b8:	8f 70       	andi	r24, 0x0F	; 15
 9ba:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
 9bc:	89 81       	ldd	r24, Y+1	; 0x01
 9be:	28 2f       	mov	r18, r24
 9c0:	30 e0       	ldi	r19, 0x00	; 0
 9c2:	3c 83       	std	Y+4, r19	; 0x04
 9c4:	2b 83       	std	Y+3, r18	; 0x03
 9c6:	8b 81       	ldd	r24, Y+3	; 0x03
 9c8:	9c 81       	ldd	r25, Y+4	; 0x04
 9ca:	82 34       	cpi	r24, 0x42	; 66
 9cc:	91 05       	cpc	r25, r1
 9ce:	29 f1       	breq	.+74     	; 0xa1a <write_low_nibble+0x74>
 9d0:	2b 81       	ldd	r18, Y+3	; 0x03
 9d2:	3c 81       	ldd	r19, Y+4	; 0x04
 9d4:	23 34       	cpi	r18, 0x43	; 67
 9d6:	31 05       	cpc	r19, r1
 9d8:	34 f4       	brge	.+12     	; 0x9e6 <write_low_nibble+0x40>
 9da:	8b 81       	ldd	r24, Y+3	; 0x03
 9dc:	9c 81       	ldd	r25, Y+4	; 0x04
 9de:	81 34       	cpi	r24, 0x41	; 65
 9e0:	91 05       	cpc	r25, r1
 9e2:	61 f0       	breq	.+24     	; 0x9fc <write_low_nibble+0x56>
 9e4:	47 c0       	rjmp	.+142    	; 0xa74 <write_low_nibble+0xce>
 9e6:	2b 81       	ldd	r18, Y+3	; 0x03
 9e8:	3c 81       	ldd	r19, Y+4	; 0x04
 9ea:	23 34       	cpi	r18, 0x43	; 67
 9ec:	31 05       	cpc	r19, r1
 9ee:	21 f1       	breq	.+72     	; 0xa38 <write_low_nibble+0x92>
 9f0:	8b 81       	ldd	r24, Y+3	; 0x03
 9f2:	9c 81       	ldd	r25, Y+4	; 0x04
 9f4:	84 34       	cpi	r24, 0x44	; 68
 9f6:	91 05       	cpc	r25, r1
 9f8:	71 f1       	breq	.+92     	; 0xa56 <write_low_nibble+0xb0>
 9fa:	3c c0       	rjmp	.+120    	; 0xa74 <write_low_nibble+0xce>
	{
		case 'A':
		PORTA&=0xf0;
 9fc:	ab e3       	ldi	r26, 0x3B	; 59
 9fe:	b0 e0       	ldi	r27, 0x00	; 0
 a00:	eb e3       	ldi	r30, 0x3B	; 59
 a02:	f0 e0       	ldi	r31, 0x00	; 0
 a04:	80 81       	ld	r24, Z
 a06:	80 7f       	andi	r24, 0xF0	; 240
 a08:	8c 93       	st	X, r24
		PORTA|=value;
 a0a:	ab e3       	ldi	r26, 0x3B	; 59
 a0c:	b0 e0       	ldi	r27, 0x00	; 0
 a0e:	eb e3       	ldi	r30, 0x3B	; 59
 a10:	f0 e0       	ldi	r31, 0x00	; 0
 a12:	90 81       	ld	r25, Z
 a14:	8a 81       	ldd	r24, Y+2	; 0x02
 a16:	89 2b       	or	r24, r25
 a18:	8c 93       	st	X, r24
		case 'B':
		PORTB&=0xf0;
 a1a:	a8 e3       	ldi	r26, 0x38	; 56
 a1c:	b0 e0       	ldi	r27, 0x00	; 0
 a1e:	e8 e3       	ldi	r30, 0x38	; 56
 a20:	f0 e0       	ldi	r31, 0x00	; 0
 a22:	80 81       	ld	r24, Z
 a24:	80 7f       	andi	r24, 0xF0	; 240
 a26:	8c 93       	st	X, r24
		PORTB|=value;
 a28:	a8 e3       	ldi	r26, 0x38	; 56
 a2a:	b0 e0       	ldi	r27, 0x00	; 0
 a2c:	e8 e3       	ldi	r30, 0x38	; 56
 a2e:	f0 e0       	ldi	r31, 0x00	; 0
 a30:	90 81       	ld	r25, Z
 a32:	8a 81       	ldd	r24, Y+2	; 0x02
 a34:	89 2b       	or	r24, r25
 a36:	8c 93       	st	X, r24
		case 'C':
		PORTC&=0xf0;
 a38:	a5 e3       	ldi	r26, 0x35	; 53
 a3a:	b0 e0       	ldi	r27, 0x00	; 0
 a3c:	e5 e3       	ldi	r30, 0x35	; 53
 a3e:	f0 e0       	ldi	r31, 0x00	; 0
 a40:	80 81       	ld	r24, Z
 a42:	80 7f       	andi	r24, 0xF0	; 240
 a44:	8c 93       	st	X, r24
		PORTC|=value;
 a46:	a5 e3       	ldi	r26, 0x35	; 53
 a48:	b0 e0       	ldi	r27, 0x00	; 0
 a4a:	e5 e3       	ldi	r30, 0x35	; 53
 a4c:	f0 e0       	ldi	r31, 0x00	; 0
 a4e:	90 81       	ld	r25, Z
 a50:	8a 81       	ldd	r24, Y+2	; 0x02
 a52:	89 2b       	or	r24, r25
 a54:	8c 93       	st	X, r24
		case 'D':
		PORTD&=0xf0;
 a56:	a2 e3       	ldi	r26, 0x32	; 50
 a58:	b0 e0       	ldi	r27, 0x00	; 0
 a5a:	e2 e3       	ldi	r30, 0x32	; 50
 a5c:	f0 e0       	ldi	r31, 0x00	; 0
 a5e:	80 81       	ld	r24, Z
 a60:	80 7f       	andi	r24, 0xF0	; 240
 a62:	8c 93       	st	X, r24
		PORTD|=value;
 a64:	a2 e3       	ldi	r26, 0x32	; 50
 a66:	b0 e0       	ldi	r27, 0x00	; 0
 a68:	e2 e3       	ldi	r30, 0x32	; 50
 a6a:	f0 e0       	ldi	r31, 0x00	; 0
 a6c:	90 81       	ld	r25, Z
 a6e:	8a 81       	ldd	r24, Y+2	; 0x02
 a70:	89 2b       	or	r24, r25
 a72:	8c 93       	st	X, r24
	}
}
 a74:	0f 90       	pop	r0
 a76:	0f 90       	pop	r0
 a78:	0f 90       	pop	r0
 a7a:	0f 90       	pop	r0
 a7c:	cf 91       	pop	r28
 a7e:	df 91       	pop	r29
 a80:	08 95       	ret

00000a82 <write_high_nibble>:

void write_high_nibble(unsigned char portname,unsigned char value)
{
 a82:	df 93       	push	r29
 a84:	cf 93       	push	r28
 a86:	00 d0       	rcall	.+0      	; 0xa88 <write_high_nibble+0x6>
 a88:	00 d0       	rcall	.+0      	; 0xa8a <write_high_nibble+0x8>
 a8a:	cd b7       	in	r28, 0x3d	; 61
 a8c:	de b7       	in	r29, 0x3e	; 62
 a8e:	89 83       	std	Y+1, r24	; 0x01
 a90:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
 a92:	8a 81       	ldd	r24, Y+2	; 0x02
 a94:	82 95       	swap	r24
 a96:	80 7f       	andi	r24, 0xF0	; 240
 a98:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
 a9a:	89 81       	ldd	r24, Y+1	; 0x01
 a9c:	28 2f       	mov	r18, r24
 a9e:	30 e0       	ldi	r19, 0x00	; 0
 aa0:	3c 83       	std	Y+4, r19	; 0x04
 aa2:	2b 83       	std	Y+3, r18	; 0x03
 aa4:	8b 81       	ldd	r24, Y+3	; 0x03
 aa6:	9c 81       	ldd	r25, Y+4	; 0x04
 aa8:	82 34       	cpi	r24, 0x42	; 66
 aaa:	91 05       	cpc	r25, r1
 aac:	29 f1       	breq	.+74     	; 0xaf8 <write_high_nibble+0x76>
 aae:	2b 81       	ldd	r18, Y+3	; 0x03
 ab0:	3c 81       	ldd	r19, Y+4	; 0x04
 ab2:	23 34       	cpi	r18, 0x43	; 67
 ab4:	31 05       	cpc	r19, r1
 ab6:	34 f4       	brge	.+12     	; 0xac4 <write_high_nibble+0x42>
 ab8:	8b 81       	ldd	r24, Y+3	; 0x03
 aba:	9c 81       	ldd	r25, Y+4	; 0x04
 abc:	81 34       	cpi	r24, 0x41	; 65
 abe:	91 05       	cpc	r25, r1
 ac0:	61 f0       	breq	.+24     	; 0xada <write_high_nibble+0x58>
 ac2:	47 c0       	rjmp	.+142    	; 0xb52 <write_high_nibble+0xd0>
 ac4:	2b 81       	ldd	r18, Y+3	; 0x03
 ac6:	3c 81       	ldd	r19, Y+4	; 0x04
 ac8:	23 34       	cpi	r18, 0x43	; 67
 aca:	31 05       	cpc	r19, r1
 acc:	21 f1       	breq	.+72     	; 0xb16 <write_high_nibble+0x94>
 ace:	8b 81       	ldd	r24, Y+3	; 0x03
 ad0:	9c 81       	ldd	r25, Y+4	; 0x04
 ad2:	84 34       	cpi	r24, 0x44	; 68
 ad4:	91 05       	cpc	r25, r1
 ad6:	71 f1       	breq	.+92     	; 0xb34 <write_high_nibble+0xb2>
 ad8:	3c c0       	rjmp	.+120    	; 0xb52 <write_high_nibble+0xd0>
	{
		case 'A':
		PORTA&=0x0f;
 ada:	ab e3       	ldi	r26, 0x3B	; 59
 adc:	b0 e0       	ldi	r27, 0x00	; 0
 ade:	eb e3       	ldi	r30, 0x3B	; 59
 ae0:	f0 e0       	ldi	r31, 0x00	; 0
 ae2:	80 81       	ld	r24, Z
 ae4:	8f 70       	andi	r24, 0x0F	; 15
 ae6:	8c 93       	st	X, r24
		PORTA|=value;
 ae8:	ab e3       	ldi	r26, 0x3B	; 59
 aea:	b0 e0       	ldi	r27, 0x00	; 0
 aec:	eb e3       	ldi	r30, 0x3B	; 59
 aee:	f0 e0       	ldi	r31, 0x00	; 0
 af0:	90 81       	ld	r25, Z
 af2:	8a 81       	ldd	r24, Y+2	; 0x02
 af4:	89 2b       	or	r24, r25
 af6:	8c 93       	st	X, r24
		case 'B':
		PORTB&=0x0f;
 af8:	a8 e3       	ldi	r26, 0x38	; 56
 afa:	b0 e0       	ldi	r27, 0x00	; 0
 afc:	e8 e3       	ldi	r30, 0x38	; 56
 afe:	f0 e0       	ldi	r31, 0x00	; 0
 b00:	80 81       	ld	r24, Z
 b02:	8f 70       	andi	r24, 0x0F	; 15
 b04:	8c 93       	st	X, r24
		PORTB|=value;
 b06:	a8 e3       	ldi	r26, 0x38	; 56
 b08:	b0 e0       	ldi	r27, 0x00	; 0
 b0a:	e8 e3       	ldi	r30, 0x38	; 56
 b0c:	f0 e0       	ldi	r31, 0x00	; 0
 b0e:	90 81       	ld	r25, Z
 b10:	8a 81       	ldd	r24, Y+2	; 0x02
 b12:	89 2b       	or	r24, r25
 b14:	8c 93       	st	X, r24
		case 'C':
		PORTC&=0x0f;
 b16:	a5 e3       	ldi	r26, 0x35	; 53
 b18:	b0 e0       	ldi	r27, 0x00	; 0
 b1a:	e5 e3       	ldi	r30, 0x35	; 53
 b1c:	f0 e0       	ldi	r31, 0x00	; 0
 b1e:	80 81       	ld	r24, Z
 b20:	8f 70       	andi	r24, 0x0F	; 15
 b22:	8c 93       	st	X, r24
		PORTC|=value;
 b24:	a5 e3       	ldi	r26, 0x35	; 53
 b26:	b0 e0       	ldi	r27, 0x00	; 0
 b28:	e5 e3       	ldi	r30, 0x35	; 53
 b2a:	f0 e0       	ldi	r31, 0x00	; 0
 b2c:	90 81       	ld	r25, Z
 b2e:	8a 81       	ldd	r24, Y+2	; 0x02
 b30:	89 2b       	or	r24, r25
 b32:	8c 93       	st	X, r24
		case 'D':
		PORTD&=0x0f;
 b34:	a2 e3       	ldi	r26, 0x32	; 50
 b36:	b0 e0       	ldi	r27, 0x00	; 0
 b38:	e2 e3       	ldi	r30, 0x32	; 50
 b3a:	f0 e0       	ldi	r31, 0x00	; 0
 b3c:	80 81       	ld	r24, Z
 b3e:	8f 70       	andi	r24, 0x0F	; 15
 b40:	8c 93       	st	X, r24
		PORTD|=value;
 b42:	a2 e3       	ldi	r26, 0x32	; 50
 b44:	b0 e0       	ldi	r27, 0x00	; 0
 b46:	e2 e3       	ldi	r30, 0x32	; 50
 b48:	f0 e0       	ldi	r31, 0x00	; 0
 b4a:	90 81       	ld	r25, Z
 b4c:	8a 81       	ldd	r24, Y+2	; 0x02
 b4e:	89 2b       	or	r24, r25
 b50:	8c 93       	st	X, r24
	}
 b52:	0f 90       	pop	r0
 b54:	0f 90       	pop	r0
 b56:	0f 90       	pop	r0
 b58:	0f 90       	pop	r0
 b5a:	cf 91       	pop	r28
 b5c:	df 91       	pop	r29
 b5e:	08 95       	ret

00000b60 <LED_vInit>:
* Created: 2/9/2018 7:16:44 PM
*  Author: Mohamed Zaghlol
*/
#include "DIO.h"
void LED_vInit(unsigned char portname,unsigned char pinnumber)
{
 b60:	df 93       	push	r29
 b62:	cf 93       	push	r28
 b64:	00 d0       	rcall	.+0      	; 0xb66 <LED_vInit+0x6>
 b66:	cd b7       	in	r28, 0x3d	; 61
 b68:	de b7       	in	r29, 0x3e	; 62
 b6a:	89 83       	std	Y+1, r24	; 0x01
 b6c:	6a 83       	std	Y+2, r22	; 0x02
	DIO_vsetPINDir(portname,pinnumber,1);//Set the given pin in the given port as an output
 b6e:	89 81       	ldd	r24, Y+1	; 0x01
 b70:	6a 81       	ldd	r22, Y+2	; 0x02
 b72:	41 e0       	ldi	r20, 0x01	; 1
 b74:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_vsetPINDir>
}
 b78:	0f 90       	pop	r0
 b7a:	0f 90       	pop	r0
 b7c:	cf 91       	pop	r28
 b7e:	df 91       	pop	r29
 b80:	08 95       	ret

00000b82 <LED_vTurnOn>:
void LED_vTurnOn(unsigned char portname,unsigned char pinnumber)
{
 b82:	df 93       	push	r29
 b84:	cf 93       	push	r28
 b86:	00 d0       	rcall	.+0      	; 0xb88 <LED_vTurnOn+0x6>
 b88:	cd b7       	in	r28, 0x3d	; 61
 b8a:	de b7       	in	r29, 0x3e	; 62
 b8c:	89 83       	std	Y+1, r24	; 0x01
 b8e:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(portname,pinnumber,1);//Set the given pin in the given port to one(on)
 b90:	89 81       	ldd	r24, Y+1	; 0x01
 b92:	6a 81       	ldd	r22, Y+2	; 0x02
 b94:	41 e0       	ldi	r20, 0x01	; 1
 b96:	0e 94 1a 01 	call	0x234	; 0x234 <DIO_write>
}
 b9a:	0f 90       	pop	r0
 b9c:	0f 90       	pop	r0
 b9e:	cf 91       	pop	r28
 ba0:	df 91       	pop	r29
 ba2:	08 95       	ret

00000ba4 <LED_vTurnOff>:
void LED_vTurnOff(unsigned char portname,unsigned char pinnumber)
{
 ba4:	df 93       	push	r29
 ba6:	cf 93       	push	r28
 ba8:	00 d0       	rcall	.+0      	; 0xbaa <LED_vTurnOff+0x6>
 baa:	cd b7       	in	r28, 0x3d	; 61
 bac:	de b7       	in	r29, 0x3e	; 62
 bae:	89 83       	std	Y+1, r24	; 0x01
 bb0:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
 bb2:	89 81       	ldd	r24, Y+1	; 0x01
 bb4:	6a 81       	ldd	r22, Y+2	; 0x02
 bb6:	40 e0       	ldi	r20, 0x00	; 0
 bb8:	0e 94 1a 01 	call	0x234	; 0x234 <DIO_write>
}
 bbc:	0f 90       	pop	r0
 bbe:	0f 90       	pop	r0
 bc0:	cf 91       	pop	r28
 bc2:	df 91       	pop	r29
 bc4:	08 95       	ret

00000bc6 <LED_vToggle>:
void LED_vToggle(unsigned char portname,unsigned char pinnumber)
{
 bc6:	df 93       	push	r29
 bc8:	cf 93       	push	r28
 bca:	00 d0       	rcall	.+0      	; 0xbcc <LED_vToggle+0x6>
 bcc:	cd b7       	in	r28, 0x3d	; 61
 bce:	de b7       	in	r29, 0x3e	; 62
 bd0:	89 83       	std	Y+1, r24	; 0x01
 bd2:	6a 83       	std	Y+2, r22	; 0x02
	DIO_toggle(portname,pinnumber);//Set the given pin in the given port to zero if it is one or set it to one if it is zero
 bd4:	89 81       	ldd	r24, Y+1	; 0x01
 bd6:	6a 81       	ldd	r22, Y+2	; 0x02
 bd8:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_toggle>
}
 bdc:	0f 90       	pop	r0
 bde:	0f 90       	pop	r0
 be0:	cf 91       	pop	r28
 be2:	df 91       	pop	r29
 be4:	08 95       	ret

00000be6 <main>:


#include <avr/io.h>
#include "timer.h"
int main(void)
{
 be6:	df 93       	push	r29
 be8:	cf 93       	push	r28
 bea:	cd b7       	in	r28, 0x3d	; 61
 bec:	de b7       	in	r29, 0x3e	; 62
	timer_wave_fastPWM();
 bee:	0e 94 50 06 	call	0xca0	; 0xca0 <timer_wave_fastPWM>
 bf2:	ff cf       	rjmp	.-2      	; 0xbf2 <main+0xc>

00000bf4 <timer_CTC_init_interrupt>:
#include "std_macros.h"
#include <avr/io.h>
#include <avr/interrupt.h>
void timer_CTC_init_interrupt(void)
{
 bf4:	df 93       	push	r29
 bf6:	cf 93       	push	r28
 bf8:	cd b7       	in	r28, 0x3d	; 61
 bfa:	de b7       	in	r29, 0x3e	; 62
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
 bfc:	a3 e5       	ldi	r26, 0x53	; 83
 bfe:	b0 e0       	ldi	r27, 0x00	; 0
 c00:	e3 e5       	ldi	r30, 0x53	; 83
 c02:	f0 e0       	ldi	r31, 0x00	; 0
 c04:	80 81       	ld	r24, Z
 c06:	88 60       	ori	r24, 0x08	; 8
 c08:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=80;
 c0a:	ec e5       	ldi	r30, 0x5C	; 92
 c0c:	f0 e0       	ldi	r31, 0x00	; 0
 c0e:	80 e5       	ldi	r24, 0x50	; 80
 c10:	80 83       	st	Z, r24
	/* select timer clock */	
	SET_BIT(TCCR0,CS00);
 c12:	a3 e5       	ldi	r26, 0x53	; 83
 c14:	b0 e0       	ldi	r27, 0x00	; 0
 c16:	e3 e5       	ldi	r30, 0x53	; 83
 c18:	f0 e0       	ldi	r31, 0x00	; 0
 c1a:	80 81       	ld	r24, Z
 c1c:	81 60       	ori	r24, 0x01	; 1
 c1e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
 c20:	a3 e5       	ldi	r26, 0x53	; 83
 c22:	b0 e0       	ldi	r27, 0x00	; 0
 c24:	e3 e5       	ldi	r30, 0x53	; 83
 c26:	f0 e0       	ldi	r31, 0x00	; 0
 c28:	80 81       	ld	r24, Z
 c2a:	84 60       	ori	r24, 0x04	; 4
 c2c:	8c 93       	st	X, r24
	/* enable interrupt*/
	sei();
 c2e:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
 c30:	a9 e5       	ldi	r26, 0x59	; 89
 c32:	b0 e0       	ldi	r27, 0x00	; 0
 c34:	e9 e5       	ldi	r30, 0x59	; 89
 c36:	f0 e0       	ldi	r31, 0x00	; 0
 c38:	80 81       	ld	r24, Z
 c3a:	82 60       	ori	r24, 0x02	; 2
 c3c:	8c 93       	st	X, r24
}
 c3e:	cf 91       	pop	r28
 c40:	df 91       	pop	r29
 c42:	08 95       	ret

00000c44 <timer_wave_nonPWM>:


void timer_wave_nonPWM(void)
{
 c44:	df 93       	push	r29
 c46:	cf 93       	push	r28
 c48:	cd b7       	in	r28, 0x3d	; 61
 c4a:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
 c4c:	a7 e3       	ldi	r26, 0x37	; 55
 c4e:	b0 e0       	ldi	r27, 0x00	; 0
 c50:	e7 e3       	ldi	r30, 0x37	; 55
 c52:	f0 e0       	ldi	r31, 0x00	; 0
 c54:	80 81       	ld	r24, Z
 c56:	88 60       	ori	r24, 0x08	; 8
 c58:	8c 93       	st	X, r24
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
 c5a:	a3 e5       	ldi	r26, 0x53	; 83
 c5c:	b0 e0       	ldi	r27, 0x00	; 0
 c5e:	e3 e5       	ldi	r30, 0x53	; 83
 c60:	f0 e0       	ldi	r31, 0x00	; 0
 c62:	80 81       	ld	r24, Z
 c64:	88 60       	ori	r24, 0x08	; 8
 c66:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=64;
 c68:	ec e5       	ldi	r30, 0x5C	; 92
 c6a:	f0 e0       	ldi	r31, 0x00	; 0
 c6c:	80 e4       	ldi	r24, 0x40	; 64
 c6e:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
 c70:	a3 e5       	ldi	r26, 0x53	; 83
 c72:	b0 e0       	ldi	r27, 0x00	; 0
 c74:	e3 e5       	ldi	r30, 0x53	; 83
 c76:	f0 e0       	ldi	r31, 0x00	; 0
 c78:	80 81       	ld	r24, Z
 c7a:	81 60       	ori	r24, 0x01	; 1
 c7c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
 c7e:	a3 e5       	ldi	r26, 0x53	; 83
 c80:	b0 e0       	ldi	r27, 0x00	; 0
 c82:	e3 e5       	ldi	r30, 0x53	; 83
 c84:	f0 e0       	ldi	r31, 0x00	; 0
 c86:	80 81       	ld	r24, Z
 c88:	84 60       	ori	r24, 0x04	; 4
 c8a:	8c 93       	st	X, r24
	/* toggle OC0 on compare match*/
	SET_BIT(TCCR0,COM00);
 c8c:	a3 e5       	ldi	r26, 0x53	; 83
 c8e:	b0 e0       	ldi	r27, 0x00	; 0
 c90:	e3 e5       	ldi	r30, 0x53	; 83
 c92:	f0 e0       	ldi	r31, 0x00	; 0
 c94:	80 81       	ld	r24, Z
 c96:	80 61       	ori	r24, 0x10	; 16
 c98:	8c 93       	st	X, r24
}
 c9a:	cf 91       	pop	r28
 c9c:	df 91       	pop	r29
 c9e:	08 95       	ret

00000ca0 <timer_wave_fastPWM>:

void timer_wave_fastPWM(void)
{
 ca0:	df 93       	push	r29
 ca2:	cf 93       	push	r28
 ca4:	cd b7       	in	r28, 0x3d	; 61
 ca6:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
 ca8:	a7 e3       	ldi	r26, 0x37	; 55
 caa:	b0 e0       	ldi	r27, 0x00	; 0
 cac:	e7 e3       	ldi	r30, 0x37	; 55
 cae:	f0 e0       	ldi	r31, 0x00	; 0
 cb0:	80 81       	ld	r24, Z
 cb2:	88 60       	ori	r24, 0x08	; 8
 cb4:	8c 93       	st	X, r24
	/* select fast PWM mode*/
	SET_BIT(TCCR0,WGM00);
 cb6:	a3 e5       	ldi	r26, 0x53	; 83
 cb8:	b0 e0       	ldi	r27, 0x00	; 0
 cba:	e3 e5       	ldi	r30, 0x53	; 83
 cbc:	f0 e0       	ldi	r31, 0x00	; 0
 cbe:	80 81       	ld	r24, Z
 cc0:	80 64       	ori	r24, 0x40	; 64
 cc2:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
 cc4:	a3 e5       	ldi	r26, 0x53	; 83
 cc6:	b0 e0       	ldi	r27, 0x00	; 0
 cc8:	e3 e5       	ldi	r30, 0x53	; 83
 cca:	f0 e0       	ldi	r31, 0x00	; 0
 ccc:	80 81       	ld	r24, Z
 cce:	88 60       	ori	r24, 0x08	; 8
 cd0:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=64;
 cd2:	ec e5       	ldi	r30, 0x5C	; 92
 cd4:	f0 e0       	ldi	r31, 0x00	; 0
 cd6:	80 e4       	ldi	r24, 0x40	; 64
 cd8:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
 cda:	a3 e5       	ldi	r26, 0x53	; 83
 cdc:	b0 e0       	ldi	r27, 0x00	; 0
 cde:	e3 e5       	ldi	r30, 0x53	; 83
 ce0:	f0 e0       	ldi	r31, 0x00	; 0
 ce2:	80 81       	ld	r24, Z
 ce4:	81 60       	ori	r24, 0x01	; 1
 ce6:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
 ce8:	a3 e5       	ldi	r26, 0x53	; 83
 cea:	b0 e0       	ldi	r27, 0x00	; 0
 cec:	e3 e5       	ldi	r30, 0x53	; 83
 cee:	f0 e0       	ldi	r31, 0x00	; 0
 cf0:	80 81       	ld	r24, Z
 cf2:	84 60       	ori	r24, 0x04	; 4
 cf4:	8c 93       	st	X, r24
	/* Set OC0 on compare match, clear OC0 at BOTTOM,(inverting mode)*/
	SET_BIT(TCCR0,COM00);
 cf6:	a3 e5       	ldi	r26, 0x53	; 83
 cf8:	b0 e0       	ldi	r27, 0x00	; 0
 cfa:	e3 e5       	ldi	r30, 0x53	; 83
 cfc:	f0 e0       	ldi	r31, 0x00	; 0
 cfe:	80 81       	ld	r24, Z
 d00:	80 61       	ori	r24, 0x10	; 16
 d02:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
 d04:	a3 e5       	ldi	r26, 0x53	; 83
 d06:	b0 e0       	ldi	r27, 0x00	; 0
 d08:	e3 e5       	ldi	r30, 0x53	; 83
 d0a:	f0 e0       	ldi	r31, 0x00	; 0
 d0c:	80 81       	ld	r24, Z
 d0e:	80 62       	ori	r24, 0x20	; 32
 d10:	8c 93       	st	X, r24
}
 d12:	cf 91       	pop	r28
 d14:	df 91       	pop	r29
 d16:	08 95       	ret

00000d18 <timer_wave_phasecorrectPWM>:


void timer_wave_phasecorrectPWM(void)
{
 d18:	df 93       	push	r29
 d1a:	cf 93       	push	r28
 d1c:	cd b7       	in	r28, 0x3d	; 61
 d1e:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
 d20:	a7 e3       	ldi	r26, 0x37	; 55
 d22:	b0 e0       	ldi	r27, 0x00	; 0
 d24:	e7 e3       	ldi	r30, 0x37	; 55
 d26:	f0 e0       	ldi	r31, 0x00	; 0
 d28:	80 81       	ld	r24, Z
 d2a:	88 60       	ori	r24, 0x08	; 8
 d2c:	8c 93       	st	X, r24
	/* select phase correct PWM mode*/
	SET_BIT(TCCR0,WGM00);
 d2e:	a3 e5       	ldi	r26, 0x53	; 83
 d30:	b0 e0       	ldi	r27, 0x00	; 0
 d32:	e3 e5       	ldi	r30, 0x53	; 83
 d34:	f0 e0       	ldi	r31, 0x00	; 0
 d36:	80 81       	ld	r24, Z
 d38:	80 64       	ori	r24, 0x40	; 64
 d3a:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=64;
 d3c:	ec e5       	ldi	r30, 0x5C	; 92
 d3e:	f0 e0       	ldi	r31, 0x00	; 0
 d40:	80 e4       	ldi	r24, 0x40	; 64
 d42:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
 d44:	a3 e5       	ldi	r26, 0x53	; 83
 d46:	b0 e0       	ldi	r27, 0x00	; 0
 d48:	e3 e5       	ldi	r30, 0x53	; 83
 d4a:	f0 e0       	ldi	r31, 0x00	; 0
 d4c:	80 81       	ld	r24, Z
 d4e:	81 60       	ori	r24, 0x01	; 1
 d50:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
 d52:	a3 e5       	ldi	r26, 0x53	; 83
 d54:	b0 e0       	ldi	r27, 0x00	; 0
 d56:	e3 e5       	ldi	r30, 0x53	; 83
 d58:	f0 e0       	ldi	r31, 0x00	; 0
 d5a:	80 81       	ld	r24, Z
 d5c:	84 60       	ori	r24, 0x04	; 4
 d5e:	8c 93       	st	X, r24
	/* Set OC0 on compare match when up-counting. Clear OC0 on compare match when down counting.*/
	SET_BIT(TCCR0,COM00);
 d60:	a3 e5       	ldi	r26, 0x53	; 83
 d62:	b0 e0       	ldi	r27, 0x00	; 0
 d64:	e3 e5       	ldi	r30, 0x53	; 83
 d66:	f0 e0       	ldi	r31, 0x00	; 0
 d68:	80 81       	ld	r24, Z
 d6a:	80 61       	ori	r24, 0x10	; 16
 d6c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
 d6e:	a3 e5       	ldi	r26, 0x53	; 83
 d70:	b0 e0       	ldi	r27, 0x00	; 0
 d72:	e3 e5       	ldi	r30, 0x53	; 83
 d74:	f0 e0       	ldi	r31, 0x00	; 0
 d76:	80 81       	ld	r24, Z
 d78:	80 62       	ori	r24, 0x20	; 32
 d7a:	8c 93       	st	X, r24
}
 d7c:	cf 91       	pop	r28
 d7e:	df 91       	pop	r29
 d80:	08 95       	ret

00000d82 <_exit>:
 d82:	f8 94       	cli

00000d84 <__stop_program>:
 d84:	ff cf       	rjmp	.-2      	; 0xd84 <__stop_program>
