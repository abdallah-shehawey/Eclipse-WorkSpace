
interface_MC_and_EEPROM_via_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002986  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002986  000029fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001e18  00000000  00000000  00002a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b06  00000000  00000000  0000481c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005322  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005462  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000055d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000721b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008106  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000092a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009a6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 4e 13 	call	0x269c	; 0x269c <main>
      7a:	0c 94 c1 14 	jmp	0x2982	; 0x2982 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 96 14 	jmp	0x292c	; 0x292c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 96 14 	jmp	0x292c	; 0x292c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 96 14 	jmp	0x292c	; 0x292c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 96 14 	jmp	0x292c	; 0x292c <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 96 14 	jmp	0x292c	; 0x292c <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_vsetPINDir>:


#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <DIO_vsetPINDir+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <DIO_vsetPINDir+0x8>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	6a 83       	std	Y+2, r22	; 0x02
     b48:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	28 2f       	mov	r18, r24
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	3d 83       	std	Y+5, r19	; 0x05
     b52:	2c 83       	std	Y+4, r18	; 0x04
     b54:	8c 81       	ldd	r24, Y+4	; 0x04
     b56:	9d 81       	ldd	r25, Y+5	; 0x05
     b58:	82 34       	cpi	r24, 0x42	; 66
     b5a:	91 05       	cpc	r25, r1
     b5c:	09 f4       	brne	.+2      	; 0xb60 <DIO_vsetPINDir+0x2a>
     b5e:	44 c0       	rjmp	.+136    	; 0xbe8 <DIO_vsetPINDir+0xb2>
     b60:	2c 81       	ldd	r18, Y+4	; 0x04
     b62:	3d 81       	ldd	r19, Y+5	; 0x05
     b64:	23 34       	cpi	r18, 0x43	; 67
     b66:	31 05       	cpc	r19, r1
     b68:	34 f4       	brge	.+12     	; 0xb76 <DIO_vsetPINDir+0x40>
     b6a:	8c 81       	ldd	r24, Y+4	; 0x04
     b6c:	9d 81       	ldd	r25, Y+5	; 0x05
     b6e:	81 34       	cpi	r24, 0x41	; 65
     b70:	91 05       	cpc	r25, r1
     b72:	71 f0       	breq	.+28     	; 0xb90 <DIO_vsetPINDir+0x5a>
     b74:	bc c0       	rjmp	.+376    	; 0xcee <DIO_vsetPINDir+0x1b8>
     b76:	2c 81       	ldd	r18, Y+4	; 0x04
     b78:	3d 81       	ldd	r19, Y+5	; 0x05
     b7a:	23 34       	cpi	r18, 0x43	; 67
     b7c:	31 05       	cpc	r19, r1
     b7e:	09 f4       	brne	.+2      	; 0xb82 <DIO_vsetPINDir+0x4c>
     b80:	5f c0       	rjmp	.+190    	; 0xc40 <DIO_vsetPINDir+0x10a>
     b82:	8c 81       	ldd	r24, Y+4	; 0x04
     b84:	9d 81       	ldd	r25, Y+5	; 0x05
     b86:	84 34       	cpi	r24, 0x44	; 68
     b88:	91 05       	cpc	r25, r1
     b8a:	09 f4       	brne	.+2      	; 0xb8e <DIO_vsetPINDir+0x58>
     b8c:	85 c0       	rjmp	.+266    	; 0xc98 <DIO_vsetPINDir+0x162>
     b8e:	af c0       	rjmp	.+350    	; 0xcee <DIO_vsetPINDir+0x1b8>
	{
		
		
		case 'A':
		if(direction==1)
     b90:	8b 81       	ldd	r24, Y+3	; 0x03
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	a1 f4       	brne	.+40     	; 0xbbe <DIO_vsetPINDir+0x88>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
     b96:	aa e3       	ldi	r26, 0x3A	; 58
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	ea e3       	ldi	r30, 0x3A	; 58
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	48 2f       	mov	r20, r24
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	28 2f       	mov	r18, r24
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	02 2e       	mov	r0, r18
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <DIO_vsetPINDir+0x7e>
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	0a 94       	dec	r0
     bb6:	e2 f7       	brpl	.-8      	; 0xbb0 <DIO_vsetPINDir+0x7a>
     bb8:	84 2b       	or	r24, r20
     bba:	8c 93       	st	X, r24
     bbc:	98 c0       	rjmp	.+304    	; 0xcee <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
     bbe:	aa e3       	ldi	r26, 0x3A	; 58
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	ea e3       	ldi	r30, 0x3A	; 58
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	48 2f       	mov	r20, r24
     bca:	8a 81       	ldd	r24, Y+2	; 0x02
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	02 2e       	mov	r0, r18
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <DIO_vsetPINDir+0xa6>
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	0a 94       	dec	r0
     bde:	e2 f7       	brpl	.-8      	; 0xbd8 <DIO_vsetPINDir+0xa2>
     be0:	80 95       	com	r24
     be2:	84 23       	and	r24, r20
     be4:	8c 93       	st	X, r24
     be6:	83 c0       	rjmp	.+262    	; 0xcee <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'B':
		if(direction==1)
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	a1 f4       	brne	.+40     	; 0xc16 <DIO_vsetPINDir+0xe0>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
     bee:	a7 e3       	ldi	r26, 0x37	; 55
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e7 e3       	ldi	r30, 0x37	; 55
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	48 2f       	mov	r20, r24
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	28 2f       	mov	r18, r24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	02 2e       	mov	r0, r18
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <DIO_vsetPINDir+0xd6>
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	0a 94       	dec	r0
     c0e:	e2 f7       	brpl	.-8      	; 0xc08 <DIO_vsetPINDir+0xd2>
     c10:	84 2b       	or	r24, r20
     c12:	8c 93       	st	X, r24
     c14:	6c c0       	rjmp	.+216    	; 0xcee <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
     c16:	a7 e3       	ldi	r26, 0x37	; 55
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	e7 e3       	ldi	r30, 0x37	; 55
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	48 2f       	mov	r20, r24
     c22:	8a 81       	ldd	r24, Y+2	; 0x02
     c24:	28 2f       	mov	r18, r24
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	02 2e       	mov	r0, r18
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <DIO_vsetPINDir+0xfe>
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	0a 94       	dec	r0
     c36:	e2 f7       	brpl	.-8      	; 0xc30 <DIO_vsetPINDir+0xfa>
     c38:	80 95       	com	r24
     c3a:	84 23       	and	r24, r20
     c3c:	8c 93       	st	X, r24
     c3e:	57 c0       	rjmp	.+174    	; 0xcee <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'C':
		if(direction==1)
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	81 30       	cpi	r24, 0x01	; 1
     c44:	a1 f4       	brne	.+40     	; 0xc6e <DIO_vsetPINDir+0x138>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
     c46:	a4 e3       	ldi	r26, 0x34	; 52
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e4 e3       	ldi	r30, 0x34	; 52
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	48 2f       	mov	r20, r24
     c52:	8a 81       	ldd	r24, Y+2	; 0x02
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	02 2e       	mov	r0, r18
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <DIO_vsetPINDir+0x12e>
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	0a 94       	dec	r0
     c66:	e2 f7       	brpl	.-8      	; 0xc60 <DIO_vsetPINDir+0x12a>
     c68:	84 2b       	or	r24, r20
     c6a:	8c 93       	st	X, r24
     c6c:	40 c0       	rjmp	.+128    	; 0xcee <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
     c6e:	a4 e3       	ldi	r26, 0x34	; 52
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e4 e3       	ldi	r30, 0x34	; 52
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	48 2f       	mov	r20, r24
     c7a:	8a 81       	ldd	r24, Y+2	; 0x02
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	02 2e       	mov	r0, r18
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <DIO_vsetPINDir+0x156>
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	0a 94       	dec	r0
     c8e:	e2 f7       	brpl	.-8      	; 0xc88 <DIO_vsetPINDir+0x152>
     c90:	80 95       	com	r24
     c92:	84 23       	and	r24, r20
     c94:	8c 93       	st	X, r24
     c96:	2b c0       	rjmp	.+86     	; 0xcee <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'D':
		if(direction==1)
     c98:	8b 81       	ldd	r24, Y+3	; 0x03
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	a1 f4       	brne	.+40     	; 0xcc6 <DIO_vsetPINDir+0x190>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
     c9e:	a1 e3       	ldi	r26, 0x31	; 49
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e1 e3       	ldi	r30, 0x31	; 49
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	48 2f       	mov	r20, r24
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	02 2e       	mov	r0, r18
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <DIO_vsetPINDir+0x186>
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	0a 94       	dec	r0
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <DIO_vsetPINDir+0x182>
     cc0:	84 2b       	or	r24, r20
     cc2:	8c 93       	st	X, r24
     cc4:	14 c0       	rjmp	.+40     	; 0xcee <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
     cc6:	a1 e3       	ldi	r26, 0x31	; 49
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e1 e3       	ldi	r30, 0x31	; 49
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	48 2f       	mov	r20, r24
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	02 2e       	mov	r0, r18
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <DIO_vsetPINDir+0x1ae>
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	0a 94       	dec	r0
     ce6:	e2 f7       	brpl	.-8      	; 0xce0 <DIO_vsetPINDir+0x1aa>
     ce8:	80 95       	com	r24
     cea:	84 23       	and	r24, r20
     cec:	8c 93       	st	X, r24
		}
		break;
		default: 
		break;
	}
}
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <DIO_write>:


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	00 d0       	rcall	.+0      	; 0xd04 <DIO_write+0x6>
     d04:	00 d0       	rcall	.+0      	; 0xd06 <DIO_write+0x8>
     d06:	0f 92       	push	r0
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	89 83       	std	Y+1, r24	; 0x01
     d0e:	6a 83       	std	Y+2, r22	; 0x02
     d10:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	3d 83       	std	Y+5, r19	; 0x05
     d1a:	2c 83       	std	Y+4, r18	; 0x04
     d1c:	8c 81       	ldd	r24, Y+4	; 0x04
     d1e:	9d 81       	ldd	r25, Y+5	; 0x05
     d20:	82 34       	cpi	r24, 0x42	; 66
     d22:	91 05       	cpc	r25, r1
     d24:	09 f4       	brne	.+2      	; 0xd28 <DIO_write+0x2a>
     d26:	44 c0       	rjmp	.+136    	; 0xdb0 <DIO_write+0xb2>
     d28:	2c 81       	ldd	r18, Y+4	; 0x04
     d2a:	3d 81       	ldd	r19, Y+5	; 0x05
     d2c:	23 34       	cpi	r18, 0x43	; 67
     d2e:	31 05       	cpc	r19, r1
     d30:	34 f4       	brge	.+12     	; 0xd3e <DIO_write+0x40>
     d32:	8c 81       	ldd	r24, Y+4	; 0x04
     d34:	9d 81       	ldd	r25, Y+5	; 0x05
     d36:	81 34       	cpi	r24, 0x41	; 65
     d38:	91 05       	cpc	r25, r1
     d3a:	71 f0       	breq	.+28     	; 0xd58 <DIO_write+0x5a>
     d3c:	bc c0       	rjmp	.+376    	; 0xeb6 <DIO_write+0x1b8>
     d3e:	2c 81       	ldd	r18, Y+4	; 0x04
     d40:	3d 81       	ldd	r19, Y+5	; 0x05
     d42:	23 34       	cpi	r18, 0x43	; 67
     d44:	31 05       	cpc	r19, r1
     d46:	09 f4       	brne	.+2      	; 0xd4a <DIO_write+0x4c>
     d48:	5f c0       	rjmp	.+190    	; 0xe08 <DIO_write+0x10a>
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	84 34       	cpi	r24, 0x44	; 68
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <DIO_write+0x58>
     d54:	85 c0       	rjmp	.+266    	; 0xe60 <DIO_write+0x162>
     d56:	af c0       	rjmp	.+350    	; 0xeb6 <DIO_write+0x1b8>
	{
		case 'A' :
		
		if(outputvalue==1)
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	a1 f4       	brne	.+40     	; 0xd86 <DIO_write+0x88>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
     d5e:	ab e3       	ldi	r26, 0x3B	; 59
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	eb e3       	ldi	r30, 0x3B	; 59
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	48 2f       	mov	r20, r24
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 2e       	mov	r0, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_write+0x7e>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_write+0x7a>
     d80:	84 2b       	or	r24, r20
     d82:	8c 93       	st	X, r24
     d84:	98 c0       	rjmp	.+304    	; 0xeb6 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
     d86:	ab e3       	ldi	r26, 0x3B	; 59
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	eb e3       	ldi	r30, 0x3B	; 59
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 2e       	mov	r0, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_write+0xa6>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_write+0xa2>
     da8:	80 95       	com	r24
     daa:	84 23       	and	r24, r20
     dac:	8c 93       	st	X, r24
     dae:	83 c0       	rjmp	.+262    	; 0xeb6 <DIO_write+0x1b8>
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	81 30       	cpi	r24, 0x01	; 1
     db4:	a1 f4       	brne	.+40     	; 0xdde <DIO_write+0xe0>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
     db6:	a8 e3       	ldi	r26, 0x38	; 56
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e8 e3       	ldi	r30, 0x38	; 56
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	48 2f       	mov	r20, r24
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	02 2e       	mov	r0, r18
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <DIO_write+0xd6>
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	0a 94       	dec	r0
     dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <DIO_write+0xd2>
     dd8:	84 2b       	or	r24, r20
     dda:	8c 93       	st	X, r24
     ddc:	6c c0       	rjmp	.+216    	; 0xeb6 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
     dde:	a8 e3       	ldi	r26, 0x38	; 56
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e8 e3       	ldi	r30, 0x38	; 56
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DIO_write+0xfe>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <DIO_write+0xfa>
     e00:	80 95       	com	r24
     e02:	84 23       	and	r24, r20
     e04:	8c 93       	st	X, r24
     e06:	57 c0       	rjmp	.+174    	; 0xeb6 <DIO_write+0x1b8>
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	a1 f4       	brne	.+40     	; 0xe36 <DIO_write+0x138>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
     e0e:	a5 e3       	ldi	r26, 0x35	; 53
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e5 e3       	ldi	r30, 0x35	; 53
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_write+0x12e>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_write+0x12a>
     e30:	84 2b       	or	r24, r20
     e32:	8c 93       	st	X, r24
     e34:	40 c0       	rjmp	.+128    	; 0xeb6 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
     e36:	a5 e3       	ldi	r26, 0x35	; 53
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e5 e3       	ldi	r30, 0x35	; 53
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	48 2f       	mov	r20, r24
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 2e       	mov	r0, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <DIO_write+0x156>
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <DIO_write+0x152>
     e58:	80 95       	com	r24
     e5a:	84 23       	and	r24, r20
     e5c:	8c 93       	st	X, r24
     e5e:	2b c0       	rjmp	.+86     	; 0xeb6 <DIO_write+0x1b8>
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	81 30       	cpi	r24, 0x01	; 1
     e64:	a1 f4       	brne	.+40     	; 0xe8e <DIO_write+0x190>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
     e66:	a2 e3       	ldi	r26, 0x32	; 50
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e2 e3       	ldi	r30, 0x32	; 50
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_write+0x186>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_write+0x182>
     e88:	84 2b       	or	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	14 c0       	rjmp	.+40     	; 0xeb6 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
     e8e:	a2 e3       	ldi	r26, 0x32	; 50
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e2 e3       	ldi	r30, 0x32	; 50
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_write+0x1ae>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_write+0x1aa>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	00 d0       	rcall	.+0      	; 0xecc <DIO_u8read+0x6>
     ecc:	00 d0       	rcall	.+0      	; 0xece <DIO_u8read+0x8>
     ece:	0f 92       	push	r0
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	8a 83       	std	Y+2, r24	; 0x02
     ed6:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char return_value=0;
     ed8:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	3d 83       	std	Y+5, r19	; 0x05
     ee2:	2c 83       	std	Y+4, r18	; 0x04
     ee4:	4c 81       	ldd	r20, Y+4	; 0x04
     ee6:	5d 81       	ldd	r21, Y+5	; 0x05
     ee8:	42 34       	cpi	r20, 0x42	; 66
     eea:	51 05       	cpc	r21, r1
     eec:	b1 f1       	breq	.+108    	; 0xf5a <DIO_u8read+0x94>
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
     ef0:	9d 81       	ldd	r25, Y+5	; 0x05
     ef2:	83 34       	cpi	r24, 0x43	; 67
     ef4:	91 05       	cpc	r25, r1
     ef6:	34 f4       	brge	.+12     	; 0xf04 <DIO_u8read+0x3e>
     ef8:	2c 81       	ldd	r18, Y+4	; 0x04
     efa:	3d 81       	ldd	r19, Y+5	; 0x05
     efc:	21 34       	cpi	r18, 0x41	; 65
     efe:	31 05       	cpc	r19, r1
     f00:	71 f0       	breq	.+28     	; 0xf1e <DIO_u8read+0x58>
     f02:	84 c0       	rjmp	.+264    	; 0x100c <DIO_u8read+0x146>
     f04:	4c 81       	ldd	r20, Y+4	; 0x04
     f06:	5d 81       	ldd	r21, Y+5	; 0x05
     f08:	43 34       	cpi	r20, 0x43	; 67
     f0a:	51 05       	cpc	r21, r1
     f0c:	09 f4       	brne	.+2      	; 0xf10 <DIO_u8read+0x4a>
     f0e:	43 c0       	rjmp	.+134    	; 0xf96 <DIO_u8read+0xd0>
     f10:	8c 81       	ldd	r24, Y+4	; 0x04
     f12:	9d 81       	ldd	r25, Y+5	; 0x05
     f14:	84 34       	cpi	r24, 0x44	; 68
     f16:	91 05       	cpc	r25, r1
     f18:	09 f4       	brne	.+2      	; 0xf1c <DIO_u8read+0x56>
     f1a:	5b c0       	rjmp	.+182    	; 0xfd2 <DIO_u8read+0x10c>
     f1c:	77 c0       	rjmp	.+238    	; 0x100c <DIO_u8read+0x146>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
     f1e:	e9 e3       	ldi	r30, 0x39	; 57
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <DIO_u8read+0x72>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	2a 95       	dec	r18
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <DIO_u8read+0x6e>
     f3c:	9a 01       	movw	r18, r20
     f3e:	28 23       	and	r18, r24
     f40:	39 23       	and	r19, r25
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	a9 01       	movw	r20, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <DIO_u8read+0x8a>
     f4c:	55 95       	asr	r21
     f4e:	47 95       	ror	r20
     f50:	8a 95       	dec	r24
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <DIO_u8read+0x86>
     f54:	ca 01       	movw	r24, r20
     f56:	89 83       	std	Y+1, r24	; 0x01
     f58:	59 c0       	rjmp	.+178    	; 0x100c <DIO_u8read+0x146>
		break;
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
     f5a:	e6 e3       	ldi	r30, 0x36	; 54
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <DIO_u8read+0xae>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	2a 95       	dec	r18
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <DIO_u8read+0xaa>
     f78:	9a 01       	movw	r18, r20
     f7a:	28 23       	and	r18, r24
     f7c:	39 23       	and	r19, r25
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	88 2f       	mov	r24, r24
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	a9 01       	movw	r20, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_u8read+0xc6>
     f88:	55 95       	asr	r21
     f8a:	47 95       	ror	r20
     f8c:	8a 95       	dec	r24
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_u8read+0xc2>
     f90:	ca 01       	movw	r24, r20
     f92:	89 83       	std	Y+1, r24	; 0x01
     f94:	3b c0       	rjmp	.+118    	; 0x100c <DIO_u8read+0x146>
		break;
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
     f96:	e3 e3       	ldi	r30, 0x33	; 51
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <DIO_u8read+0xea>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	2a 95       	dec	r18
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <DIO_u8read+0xe6>
     fb4:	9a 01       	movw	r18, r20
     fb6:	28 23       	and	r18, r24
     fb8:	39 23       	and	r19, r25
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	88 2f       	mov	r24, r24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	a9 01       	movw	r20, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_u8read+0x102>
     fc4:	55 95       	asr	r21
     fc6:	47 95       	ror	r20
     fc8:	8a 95       	dec	r24
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_u8read+0xfe>
     fcc:	ca 01       	movw	r24, r20
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	1d c0       	rjmp	.+58     	; 0x100c <DIO_u8read+0x146>
		break;
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
     fd2:	e0 e3       	ldi	r30, 0x30	; 48
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_u8read+0x126>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	2a 95       	dec	r18
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_u8read+0x122>
     ff0:	9a 01       	movw	r18, r20
     ff2:	28 23       	and	r18, r24
     ff4:	39 23       	and	r19, r25
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	88 2f       	mov	r24, r24
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	a9 01       	movw	r20, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <DIO_u8read+0x13e>
    1000:	55 95       	asr	r21
    1002:	47 95       	ror	r20
    1004:	8a 95       	dec	r24
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <DIO_u8read+0x13a>
    1008:	ca 01       	movw	r24, r20
    100a:	89 83       	std	Y+1, r24	; 0x01
		break;
		default: 
		break;
	}
	return return_value ;
    100c:	89 81       	ldd	r24, Y+1	; 0x01
}
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	00 d0       	rcall	.+0      	; 0x1024 <DIO_toggle+0x6>
    1024:	00 d0       	rcall	.+0      	; 0x1026 <DIO_toggle+0x8>
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	3c 83       	std	Y+4, r19	; 0x04
    1036:	2b 83       	std	Y+3, r18	; 0x03
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	82 34       	cpi	r24, 0x42	; 66
    103e:	91 05       	cpc	r25, r1
    1040:	51 f1       	breq	.+84     	; 0x1096 <DIO_toggle+0x78>
    1042:	2b 81       	ldd	r18, Y+3	; 0x03
    1044:	3c 81       	ldd	r19, Y+4	; 0x04
    1046:	23 34       	cpi	r18, 0x43	; 67
    1048:	31 05       	cpc	r19, r1
    104a:	34 f4       	brge	.+12     	; 0x1058 <DIO_toggle+0x3a>
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	9c 81       	ldd	r25, Y+4	; 0x04
    1050:	81 34       	cpi	r24, 0x41	; 65
    1052:	91 05       	cpc	r25, r1
    1054:	61 f0       	breq	.+24     	; 0x106e <DIO_toggle+0x50>
    1056:	5a c0       	rjmp	.+180    	; 0x110c <DIO_toggle+0xee>
    1058:	2b 81       	ldd	r18, Y+3	; 0x03
    105a:	3c 81       	ldd	r19, Y+4	; 0x04
    105c:	23 34       	cpi	r18, 0x43	; 67
    105e:	31 05       	cpc	r19, r1
    1060:	71 f1       	breq	.+92     	; 0x10be <DIO_toggle+0xa0>
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	9c 81       	ldd	r25, Y+4	; 0x04
    1066:	84 34       	cpi	r24, 0x44	; 68
    1068:	91 05       	cpc	r25, r1
    106a:	e9 f1       	breq	.+122    	; 0x10e6 <DIO_toggle+0xc8>
    106c:	4f c0       	rjmp	.+158    	; 0x110c <DIO_toggle+0xee>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
    106e:	ab e3       	ldi	r26, 0x3B	; 59
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	eb e3       	ldi	r30, 0x3B	; 59
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <DIO_toggle+0x6e>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <DIO_toggle+0x6a>
    1090:	84 27       	eor	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	3b c0       	rjmp	.+118    	; 0x110c <DIO_toggle+0xee>
		break;
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
    1096:	a8 e3       	ldi	r26, 0x38	; 56
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e8 e3       	ldi	r30, 0x38	; 56
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_toggle+0x96>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_toggle+0x92>
    10b8:	84 27       	eor	r24, r20
    10ba:	8c 93       	st	X, r24
    10bc:	27 c0       	rjmp	.+78     	; 0x110c <DIO_toggle+0xee>
		break;
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
    10be:	a5 e3       	ldi	r26, 0x35	; 53
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e5 e3       	ldi	r30, 0x35	; 53
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 2e       	mov	r0, r18
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <DIO_toggle+0xbe>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	0a 94       	dec	r0
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <DIO_toggle+0xba>
    10e0:	84 27       	eor	r24, r20
    10e2:	8c 93       	st	X, r24
    10e4:	13 c0       	rjmp	.+38     	; 0x110c <DIO_toggle+0xee>
		break;
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
    10e6:	a2 e3       	ldi	r26, 0x32	; 50
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e2 e3       	ldi	r30, 0x32	; 50
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	48 2f       	mov	r20, r24
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	02 2e       	mov	r0, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <DIO_toggle+0xe6>
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	0a 94       	dec	r0
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <DIO_toggle+0xe2>
    1108:	84 27       	eor	r24, r20
    110a:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <DIO_set_port_direction>:
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	00 d0       	rcall	.+0      	; 0x1120 <DIO_set_port_direction+0x6>
    1120:	00 d0       	rcall	.+0      	; 0x1122 <DIO_set_port_direction+0x8>
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	3c 83       	std	Y+4, r19	; 0x04
    1132:	2b 83       	std	Y+3, r18	; 0x03
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	9c 81       	ldd	r25, Y+4	; 0x04
    1138:	82 34       	cpi	r24, 0x42	; 66
    113a:	91 05       	cpc	r25, r1
    113c:	d9 f0       	breq	.+54     	; 0x1174 <DIO_set_port_direction+0x5a>
    113e:	2b 81       	ldd	r18, Y+3	; 0x03
    1140:	3c 81       	ldd	r19, Y+4	; 0x04
    1142:	23 34       	cpi	r18, 0x43	; 67
    1144:	31 05       	cpc	r19, r1
    1146:	34 f4       	brge	.+12     	; 0x1154 <DIO_set_port_direction+0x3a>
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	9c 81       	ldd	r25, Y+4	; 0x04
    114c:	81 34       	cpi	r24, 0x41	; 65
    114e:	91 05       	cpc	r25, r1
    1150:	61 f0       	breq	.+24     	; 0x116a <DIO_set_port_direction+0x50>
    1152:	1e c0       	rjmp	.+60     	; 0x1190 <DIO_set_port_direction+0x76>
    1154:	2b 81       	ldd	r18, Y+3	; 0x03
    1156:	3c 81       	ldd	r19, Y+4	; 0x04
    1158:	23 34       	cpi	r18, 0x43	; 67
    115a:	31 05       	cpc	r19, r1
    115c:	81 f0       	breq	.+32     	; 0x117e <DIO_set_port_direction+0x64>
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	84 34       	cpi	r24, 0x44	; 68
    1164:	91 05       	cpc	r25, r1
    1166:	81 f0       	breq	.+32     	; 0x1188 <DIO_set_port_direction+0x6e>
    1168:	13 c0       	rjmp	.+38     	; 0x1190 <DIO_set_port_direction+0x76>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
    116a:	ea e3       	ldi	r30, 0x3A	; 58
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	80 83       	st	Z, r24
    1172:	0e c0       	rjmp	.+28     	; 0x1190 <DIO_set_port_direction+0x76>
		break ;
		case 'B':
		DDRB=direction; //set the direction of port B
    1174:	e7 e3       	ldi	r30, 0x37	; 55
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	80 83       	st	Z, r24
    117c:	09 c0       	rjmp	.+18     	; 0x1190 <DIO_set_port_direction+0x76>
		break ;
		case 'C' :
		DDRC=direction; //set the direction of port C
    117e:	e4 e3       	ldi	r30, 0x34	; 52
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	80 83       	st	Z, r24
    1186:	04 c0       	rjmp	.+8      	; 0x1190 <DIO_set_port_direction+0x76>
		break ;
		case 'D':
		DDRD=direction; //set the direction of port D
    1188:	e1 e3       	ldi	r30, 0x31	; 49
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	80 83       	st	Z, r24
		break ;
		default:
		break ;
	}
	
}
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <DIO_write_port>:
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <DIO_write_port+0x6>
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <DIO_write_port+0x8>
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	3c 83       	std	Y+4, r19	; 0x04
    11b6:	2b 83       	std	Y+3, r18	; 0x03
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	9c 81       	ldd	r25, Y+4	; 0x04
    11bc:	82 34       	cpi	r24, 0x42	; 66
    11be:	91 05       	cpc	r25, r1
    11c0:	d9 f0       	breq	.+54     	; 0x11f8 <DIO_write_port+0x5a>
    11c2:	2b 81       	ldd	r18, Y+3	; 0x03
    11c4:	3c 81       	ldd	r19, Y+4	; 0x04
    11c6:	23 34       	cpi	r18, 0x43	; 67
    11c8:	31 05       	cpc	r19, r1
    11ca:	34 f4       	brge	.+12     	; 0x11d8 <DIO_write_port+0x3a>
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	9c 81       	ldd	r25, Y+4	; 0x04
    11d0:	81 34       	cpi	r24, 0x41	; 65
    11d2:	91 05       	cpc	r25, r1
    11d4:	61 f0       	breq	.+24     	; 0x11ee <DIO_write_port+0x50>
    11d6:	1e c0       	rjmp	.+60     	; 0x1214 <DIO_write_port+0x76>
    11d8:	2b 81       	ldd	r18, Y+3	; 0x03
    11da:	3c 81       	ldd	r19, Y+4	; 0x04
    11dc:	23 34       	cpi	r18, 0x43	; 67
    11de:	31 05       	cpc	r19, r1
    11e0:	81 f0       	breq	.+32     	; 0x1202 <DIO_write_port+0x64>
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	9c 81       	ldd	r25, Y+4	; 0x04
    11e6:	84 34       	cpi	r24, 0x44	; 68
    11e8:	91 05       	cpc	r25, r1
    11ea:	81 f0       	breq	.+32     	; 0x120c <DIO_write_port+0x6e>
    11ec:	13 c0       	rjmp	.+38     	; 0x1214 <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
    11ee:	eb e3       	ldi	r30, 0x3B	; 59
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	80 83       	st	Z, r24
    11f6:	0e c0       	rjmp	.+28     	; 0x1214 <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
    11f8:	e8 e3       	ldi	r30, 0x38	; 56
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	80 83       	st	Z, r24
    1200:	09 c0       	rjmp	.+18     	; 0x1214 <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
    1202:	e5 e3       	ldi	r30, 0x35	; 53
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	80 83       	st	Z, r24
    120a:	04 c0       	rjmp	.+8      	; 0x1214 <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
    120c:	e2 e3       	ldi	r30, 0x32	; 50
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	80 83       	st	Z, r24
		break ;
		default:
		 break ;
	}
}
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <DIO_read_port>:

unsigned char DIO_read_port(unsigned char portname)
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	00 d0       	rcall	.+0      	; 0x1228 <DIO_read_port+0x6>
    1228:	00 d0       	rcall	.+0      	; 0x122a <DIO_read_port+0x8>
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char return_val=0;
    1230:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	3c 83       	std	Y+4, r19	; 0x04
    123a:	2b 83       	std	Y+3, r18	; 0x03
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	82 34       	cpi	r24, 0x42	; 66
    1242:	91 05       	cpc	r25, r1
    1244:	d9 f0       	breq	.+54     	; 0x127c <DIO_read_port+0x5a>
    1246:	2b 81       	ldd	r18, Y+3	; 0x03
    1248:	3c 81       	ldd	r19, Y+4	; 0x04
    124a:	23 34       	cpi	r18, 0x43	; 67
    124c:	31 05       	cpc	r19, r1
    124e:	34 f4       	brge	.+12     	; 0x125c <DIO_read_port+0x3a>
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	9c 81       	ldd	r25, Y+4	; 0x04
    1254:	81 34       	cpi	r24, 0x41	; 65
    1256:	91 05       	cpc	r25, r1
    1258:	61 f0       	breq	.+24     	; 0x1272 <DIO_read_port+0x50>
    125a:	1e c0       	rjmp	.+60     	; 0x1298 <DIO_read_port+0x76>
    125c:	2b 81       	ldd	r18, Y+3	; 0x03
    125e:	3c 81       	ldd	r19, Y+4	; 0x04
    1260:	23 34       	cpi	r18, 0x43	; 67
    1262:	31 05       	cpc	r19, r1
    1264:	81 f0       	breq	.+32     	; 0x1286 <DIO_read_port+0x64>
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9c 81       	ldd	r25, Y+4	; 0x04
    126a:	84 34       	cpi	r24, 0x44	; 68
    126c:	91 05       	cpc	r25, r1
    126e:	81 f0       	breq	.+32     	; 0x1290 <DIO_read_port+0x6e>
    1270:	13 c0       	rjmp	.+38     	; 0x1298 <DIO_read_port+0x76>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
    1272:	e9 e3       	ldi	r30, 0x39	; 57
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	0e c0       	rjmp	.+28     	; 0x1298 <DIO_read_port+0x76>
		break ;
		case 'B':
		return_val=PINB; // read the value of port B 
    127c:	e6 e3       	ldi	r30, 0x36	; 54
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	89 83       	std	Y+1, r24	; 0x01
    1284:	09 c0       	rjmp	.+18     	; 0x1298 <DIO_read_port+0x76>
		break ;
		case 'C' :
		return_val=PINC; // read the value of port C 
    1286:	e3 e3       	ldi	r30, 0x33	; 51
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	89 83       	std	Y+1, r24	; 0x01
    128e:	04 c0       	rjmp	.+8      	; 0x1298 <DIO_read_port+0x76>
		break ;
		case 'D':
		return_val=PIND; // read the value of port D 
    1290:	e0 e3       	ldi	r30, 0x30	; 48
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	89 83       	std	Y+1, r24	; 0x01
		break ;
		default:
		break ;
	}
	return return_val;
    1298:	89 81       	ldd	r24, Y+1	; 0x01
}
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <DIO_vconnectpullup+0x6>
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <DIO_vconnectpullup+0x8>
    12b0:	0f 92       	push	r0
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	6a 83       	std	Y+2, r22	; 0x02
    12ba:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	3d 83       	std	Y+5, r19	; 0x05
    12c4:	2c 83       	std	Y+4, r18	; 0x04
    12c6:	8c 81       	ldd	r24, Y+4	; 0x04
    12c8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ca:	82 34       	cpi	r24, 0x42	; 66
    12cc:	91 05       	cpc	r25, r1
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <DIO_vconnectpullup+0x2a>
    12d0:	44 c0       	rjmp	.+136    	; 0x135a <DIO_vconnectpullup+0xb2>
    12d2:	2c 81       	ldd	r18, Y+4	; 0x04
    12d4:	3d 81       	ldd	r19, Y+5	; 0x05
    12d6:	23 34       	cpi	r18, 0x43	; 67
    12d8:	31 05       	cpc	r19, r1
    12da:	34 f4       	brge	.+12     	; 0x12e8 <DIO_vconnectpullup+0x40>
    12dc:	8c 81       	ldd	r24, Y+4	; 0x04
    12de:	9d 81       	ldd	r25, Y+5	; 0x05
    12e0:	81 34       	cpi	r24, 0x41	; 65
    12e2:	91 05       	cpc	r25, r1
    12e4:	71 f0       	breq	.+28     	; 0x1302 <DIO_vconnectpullup+0x5a>
    12e6:	bc c0       	rjmp	.+376    	; 0x1460 <DIO_vconnectpullup+0x1b8>
    12e8:	2c 81       	ldd	r18, Y+4	; 0x04
    12ea:	3d 81       	ldd	r19, Y+5	; 0x05
    12ec:	23 34       	cpi	r18, 0x43	; 67
    12ee:	31 05       	cpc	r19, r1
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <DIO_vconnectpullup+0x4c>
    12f2:	5f c0       	rjmp	.+190    	; 0x13b2 <DIO_vconnectpullup+0x10a>
    12f4:	8c 81       	ldd	r24, Y+4	; 0x04
    12f6:	9d 81       	ldd	r25, Y+5	; 0x05
    12f8:	84 34       	cpi	r24, 0x44	; 68
    12fa:	91 05       	cpc	r25, r1
    12fc:	09 f4       	brne	.+2      	; 0x1300 <DIO_vconnectpullup+0x58>
    12fe:	85 c0       	rjmp	.+266    	; 0x140a <DIO_vconnectpullup+0x162>
    1300:	af c0       	rjmp	.+350    	; 0x1460 <DIO_vconnectpullup+0x1b8>
	{
		case 'A':
		if(connect_pullup==1)
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	81 30       	cpi	r24, 0x01	; 1
    1306:	a1 f4       	brne	.+40     	; 0x1330 <DIO_vconnectpullup+0x88>
		{
			SET_BIT(PORTA,pinnumber);
    1308:	ab e3       	ldi	r26, 0x3B	; 59
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	eb e3       	ldi	r30, 0x3B	; 59
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	48 2f       	mov	r20, r24
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 2e       	mov	r0, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <DIO_vconnectpullup+0x7e>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	0a 94       	dec	r0
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <DIO_vconnectpullup+0x7a>
    132a:	84 2b       	or	r24, r20
    132c:	8c 93       	st	X, r24
    132e:	98 c0       	rjmp	.+304    	; 0x1460 <DIO_vconnectpullup+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
    1330:	ab e3       	ldi	r26, 0x3B	; 59
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	eb e3       	ldi	r30, 0x3B	; 59
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_vconnectpullup+0xa6>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <DIO_vconnectpullup+0xa2>
    1352:	80 95       	com	r24
    1354:	84 23       	and	r24, r20
    1356:	8c 93       	st	X, r24
    1358:	83 c0       	rjmp	.+262    	; 0x1460 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'B':
		if(connect_pullup==1)
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	a1 f4       	brne	.+40     	; 0x1388 <DIO_vconnectpullup+0xe0>
		{
			SET_BIT(PORTB,pinnumber);
    1360:	a8 e3       	ldi	r26, 0x38	; 56
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e8 e3       	ldi	r30, 0x38	; 56
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 2e       	mov	r0, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_vconnectpullup+0xd6>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	0a 94       	dec	r0
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_vconnectpullup+0xd2>
    1382:	84 2b       	or	r24, r20
    1384:	8c 93       	st	X, r24
    1386:	6c c0       	rjmp	.+216    	; 0x1460 <DIO_vconnectpullup+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
    1388:	a8 e3       	ldi	r26, 0x38	; 56
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e8 e3       	ldi	r30, 0x38	; 56
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	48 2f       	mov	r20, r24
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 2e       	mov	r0, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <DIO_vconnectpullup+0xfe>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <DIO_vconnectpullup+0xfa>
    13aa:	80 95       	com	r24
    13ac:	84 23       	and	r24, r20
    13ae:	8c 93       	st	X, r24
    13b0:	57 c0       	rjmp	.+174    	; 0x1460 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'C':
		if(connect_pullup==1)
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	a1 f4       	brne	.+40     	; 0x13e0 <DIO_vconnectpullup+0x138>
		{
			SET_BIT(PORTC,pinnumber);
    13b8:	a5 e3       	ldi	r26, 0x35	; 53
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e5 e3       	ldi	r30, 0x35	; 53
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_vconnectpullup+0x12e>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <DIO_vconnectpullup+0x12a>
    13da:	84 2b       	or	r24, r20
    13dc:	8c 93       	st	X, r24
    13de:	40 c0       	rjmp	.+128    	; 0x1460 <DIO_vconnectpullup+0x1b8>
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
    13e0:	a5 e3       	ldi	r26, 0x35	; 53
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e5 e3       	ldi	r30, 0x35	; 53
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_vconnectpullup+0x156>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_vconnectpullup+0x152>
    1402:	80 95       	com	r24
    1404:	84 23       	and	r24, r20
    1406:	8c 93       	st	X, r24
    1408:	2b c0       	rjmp	.+86     	; 0x1460 <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'D':
		if(connect_pullup==1)
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	a1 f4       	brne	.+40     	; 0x1438 <DIO_vconnectpullup+0x190>
		{
			SET_BIT(PORTD,pinnumber);
    1410:	a2 e3       	ldi	r26, 0x32	; 50
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e2 e3       	ldi	r30, 0x32	; 50
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_vconnectpullup+0x186>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_vconnectpullup+0x182>
    1432:	84 2b       	or	r24, r20
    1434:	8c 93       	st	X, r24
    1436:	14 c0       	rjmp	.+40     	; 0x1460 <DIO_vconnectpullup+0x1b8>
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
    1438:	a2 e3       	ldi	r26, 0x32	; 50
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e2 e3       	ldi	r30, 0x32	; 50
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DIO_vconnectpullup+0x1ae>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <DIO_vconnectpullup+0x1aa>
    145a:	80 95       	com	r24
    145c:	84 23       	and	r24, r20
    145e:	8c 93       	st	X, r24
		}
		break;
		
	}
}
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	08 95       	ret

00001470 <write_low_nibble>:

void write_low_nibble(unsigned char portname,unsigned char value)
{
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	00 d0       	rcall	.+0      	; 0x1476 <write_low_nibble+0x6>
    1476:	00 d0       	rcall	.+0      	; 0x1478 <write_low_nibble+0x8>
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	8f 70       	andi	r24, 0x0F	; 15
    1484:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	3c 83       	std	Y+4, r19	; 0x04
    148e:	2b 83       	std	Y+3, r18	; 0x03
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	9c 81       	ldd	r25, Y+4	; 0x04
    1494:	82 34       	cpi	r24, 0x42	; 66
    1496:	91 05       	cpc	r25, r1
    1498:	29 f1       	breq	.+74     	; 0x14e4 <write_low_nibble+0x74>
    149a:	2b 81       	ldd	r18, Y+3	; 0x03
    149c:	3c 81       	ldd	r19, Y+4	; 0x04
    149e:	23 34       	cpi	r18, 0x43	; 67
    14a0:	31 05       	cpc	r19, r1
    14a2:	34 f4       	brge	.+12     	; 0x14b0 <write_low_nibble+0x40>
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	9c 81       	ldd	r25, Y+4	; 0x04
    14a8:	81 34       	cpi	r24, 0x41	; 65
    14aa:	91 05       	cpc	r25, r1
    14ac:	61 f0       	breq	.+24     	; 0x14c6 <write_low_nibble+0x56>
    14ae:	47 c0       	rjmp	.+142    	; 0x153e <write_low_nibble+0xce>
    14b0:	2b 81       	ldd	r18, Y+3	; 0x03
    14b2:	3c 81       	ldd	r19, Y+4	; 0x04
    14b4:	23 34       	cpi	r18, 0x43	; 67
    14b6:	31 05       	cpc	r19, r1
    14b8:	21 f1       	breq	.+72     	; 0x1502 <write_low_nibble+0x92>
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	84 34       	cpi	r24, 0x44	; 68
    14c0:	91 05       	cpc	r25, r1
    14c2:	71 f1       	breq	.+92     	; 0x1520 <write_low_nibble+0xb0>
    14c4:	3c c0       	rjmp	.+120    	; 0x153e <write_low_nibble+0xce>
	{
		case 'A':
		PORTA&=0xf0;
    14c6:	ab e3       	ldi	r26, 0x3B	; 59
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	eb e3       	ldi	r30, 0x3B	; 59
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	80 7f       	andi	r24, 0xF0	; 240
    14d2:	8c 93       	st	X, r24
		PORTA|=value;
    14d4:	ab e3       	ldi	r26, 0x3B	; 59
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	eb e3       	ldi	r30, 0x3B	; 59
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	90 81       	ld	r25, Z
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	89 2b       	or	r24, r25
    14e2:	8c 93       	st	X, r24
		case 'B':
		PORTB&=0xf0;
    14e4:	a8 e3       	ldi	r26, 0x38	; 56
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e8 e3       	ldi	r30, 0x38	; 56
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	80 7f       	andi	r24, 0xF0	; 240
    14f0:	8c 93       	st	X, r24
		PORTB|=value;
    14f2:	a8 e3       	ldi	r26, 0x38	; 56
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e8 e3       	ldi	r30, 0x38	; 56
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	90 81       	ld	r25, Z
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	89 2b       	or	r24, r25
    1500:	8c 93       	st	X, r24
		case 'C':
		PORTC&=0xf0;
    1502:	a5 e3       	ldi	r26, 0x35	; 53
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e5 e3       	ldi	r30, 0x35	; 53
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	80 7f       	andi	r24, 0xF0	; 240
    150e:	8c 93       	st	X, r24
		PORTC|=value;
    1510:	a5 e3       	ldi	r26, 0x35	; 53
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e5 e3       	ldi	r30, 0x35	; 53
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	90 81       	ld	r25, Z
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	89 2b       	or	r24, r25
    151e:	8c 93       	st	X, r24
		case 'D':
		PORTD&=0xf0;
    1520:	a2 e3       	ldi	r26, 0x32	; 50
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e2 e3       	ldi	r30, 0x32	; 50
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	80 7f       	andi	r24, 0xF0	; 240
    152c:	8c 93       	st	X, r24
		PORTD|=value;
    152e:	a2 e3       	ldi	r26, 0x32	; 50
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e2 e3       	ldi	r30, 0x32	; 50
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	90 81       	ld	r25, Z
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	89 2b       	or	r24, r25
    153c:	8c 93       	st	X, r24
	}
}
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <write_high_nibble>:

void write_high_nibble(unsigned char portname,unsigned char value)
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	00 d0       	rcall	.+0      	; 0x1552 <write_high_nibble+0x6>
    1552:	00 d0       	rcall	.+0      	; 0x1554 <write_high_nibble+0x8>
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	82 95       	swap	r24
    1560:	80 7f       	andi	r24, 0xF0	; 240
    1562:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	3c 83       	std	Y+4, r19	; 0x04
    156c:	2b 83       	std	Y+3, r18	; 0x03
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	9c 81       	ldd	r25, Y+4	; 0x04
    1572:	82 34       	cpi	r24, 0x42	; 66
    1574:	91 05       	cpc	r25, r1
    1576:	29 f1       	breq	.+74     	; 0x15c2 <write_high_nibble+0x76>
    1578:	2b 81       	ldd	r18, Y+3	; 0x03
    157a:	3c 81       	ldd	r19, Y+4	; 0x04
    157c:	23 34       	cpi	r18, 0x43	; 67
    157e:	31 05       	cpc	r19, r1
    1580:	34 f4       	brge	.+12     	; 0x158e <write_high_nibble+0x42>
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	9c 81       	ldd	r25, Y+4	; 0x04
    1586:	81 34       	cpi	r24, 0x41	; 65
    1588:	91 05       	cpc	r25, r1
    158a:	61 f0       	breq	.+24     	; 0x15a4 <write_high_nibble+0x58>
    158c:	47 c0       	rjmp	.+142    	; 0x161c <write_high_nibble+0xd0>
    158e:	2b 81       	ldd	r18, Y+3	; 0x03
    1590:	3c 81       	ldd	r19, Y+4	; 0x04
    1592:	23 34       	cpi	r18, 0x43	; 67
    1594:	31 05       	cpc	r19, r1
    1596:	21 f1       	breq	.+72     	; 0x15e0 <write_high_nibble+0x94>
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	9c 81       	ldd	r25, Y+4	; 0x04
    159c:	84 34       	cpi	r24, 0x44	; 68
    159e:	91 05       	cpc	r25, r1
    15a0:	71 f1       	breq	.+92     	; 0x15fe <write_high_nibble+0xb2>
    15a2:	3c c0       	rjmp	.+120    	; 0x161c <write_high_nibble+0xd0>
	{
		case 'A':
		PORTA&=0x0f;
    15a4:	ab e3       	ldi	r26, 0x3B	; 59
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	eb e3       	ldi	r30, 0x3B	; 59
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	8f 70       	andi	r24, 0x0F	; 15
    15b0:	8c 93       	st	X, r24
		PORTA|=value;
    15b2:	ab e3       	ldi	r26, 0x3B	; 59
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	eb e3       	ldi	r30, 0x3B	; 59
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	90 81       	ld	r25, Z
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	89 2b       	or	r24, r25
    15c0:	8c 93       	st	X, r24
		case 'B':
		PORTB&=0x0f;
    15c2:	a8 e3       	ldi	r26, 0x38	; 56
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e8 e3       	ldi	r30, 0x38	; 56
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	8f 70       	andi	r24, 0x0F	; 15
    15ce:	8c 93       	st	X, r24
		PORTB|=value;
    15d0:	a8 e3       	ldi	r26, 0x38	; 56
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e8 e3       	ldi	r30, 0x38	; 56
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	90 81       	ld	r25, Z
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	89 2b       	or	r24, r25
    15de:	8c 93       	st	X, r24
		case 'C':
		PORTC&=0x0f;
    15e0:	a5 e3       	ldi	r26, 0x35	; 53
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e5 e3       	ldi	r30, 0x35	; 53
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	8f 70       	andi	r24, 0x0F	; 15
    15ec:	8c 93       	st	X, r24
		PORTC|=value;
    15ee:	a5 e3       	ldi	r26, 0x35	; 53
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e5 e3       	ldi	r30, 0x35	; 53
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	90 81       	ld	r25, Z
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	89 2b       	or	r24, r25
    15fc:	8c 93       	st	X, r24
		case 'D':
		PORTD&=0x0f;
    15fe:	a2 e3       	ldi	r26, 0x32	; 50
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e2 e3       	ldi	r30, 0x32	; 50
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	8f 70       	andi	r24, 0x0F	; 15
    160a:	8c 93       	st	X, r24
		PORTD|=value;
    160c:	a2 e3       	ldi	r26, 0x32	; 50
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e2 e3       	ldi	r30, 0x32	; 50
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	90 81       	ld	r25, Z
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	89 2b       	or	r24, r25
    161a:	8c 93       	st	X, r24
	}
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	08 95       	ret

0000162a <I2C_Master_init>:
	#include <avr/io.h>
	#include "std_macros.h"
	#define F_CPU 8000000UL
	#define prescalar 1
	void I2C_Master_init(unsigned long SCL_Clock)
	{
    162a:	0f 93       	push	r16
    162c:	1f 93       	push	r17
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	00 d0       	rcall	.+0      	; 0x1634 <I2C_Master_init+0xa>
    1634:	00 d0       	rcall	.+0      	; 0x1636 <I2C_Master_init+0xc>
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	69 83       	std	Y+1, r22	; 0x01
    163c:	7a 83       	std	Y+2, r23	; 0x02
    163e:	8b 83       	std	Y+3, r24	; 0x03
    1640:	9c 83       	std	Y+4, r25	; 0x04
		TWBR= (unsigned char) (((F_CPU/SCL_Clock)-16) / (2*prescalar));
    1642:	00 e2       	ldi	r16, 0x20	; 32
    1644:	10 e0       	ldi	r17, 0x00	; 0
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	92 e1       	ldi	r25, 0x12	; 18
    164a:	aa e7       	ldi	r26, 0x7A	; 122
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	29 81       	ldd	r18, Y+1	; 0x01
    1650:	3a 81       	ldd	r19, Y+2	; 0x02
    1652:	4b 81       	ldd	r20, Y+3	; 0x03
    1654:	5c 81       	ldd	r21, Y+4	; 0x04
    1656:	bc 01       	movw	r22, r24
    1658:	cd 01       	movw	r24, r26
    165a:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__udivmodsi4>
    165e:	da 01       	movw	r26, r20
    1660:	c9 01       	movw	r24, r18
    1662:	40 97       	sbiw	r24, 0x10	; 16
    1664:	a1 09       	sbc	r26, r1
    1666:	b1 09       	sbc	r27, r1
    1668:	b6 95       	lsr	r27
    166a:	a7 95       	ror	r26
    166c:	97 95       	ror	r25
    166e:	87 95       	ror	r24
    1670:	f8 01       	movw	r30, r16
    1672:	80 83       	st	Z, r24
		if (prescalar==1)
		{
			TWSR=0;
    1674:	e1 e2       	ldi	r30, 0x21	; 33
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	10 82       	st	Z, r1
		else if (prescalar==64)
		{
			TWSR=3;
		}
		
	}
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	1f 91       	pop	r17
    1688:	0f 91       	pop	r16
    168a:	08 95       	ret

0000168c <I2C_start>:
	
	void I2C_start(void)
	{
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
		TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
    1694:	e6 e5       	ldi	r30, 0x56	; 86
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	84 ea       	ldi	r24, 0xA4	; 164
    169a:	80 83       	st	Z, r24
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish 
    169c:	e6 e5       	ldi	r30, 0x56	; 86
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	88 1f       	adc	r24, r24
    16a4:	88 27       	eor	r24, r24
    16a6:	88 1f       	adc	r24, r24
    16a8:	88 2f       	mov	r24, r24
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	90 70       	andi	r25, 0x00	; 0
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	a9 f3       	breq	.-22     	; 0x169c <I2C_start+0x10>
		while ((TWSR & 0XF8) != 0x08); // start condition has been transmitted
    16b2:	e1 e2       	ldi	r30, 0x21	; 33
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	88 2f       	mov	r24, r24
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	88 7f       	andi	r24, 0xF8	; 248
    16be:	90 70       	andi	r25, 0x00	; 0
    16c0:	88 30       	cpi	r24, 0x08	; 8
    16c2:	91 05       	cpc	r25, r1
    16c4:	b1 f7       	brne	.-20     	; 0x16b2 <I2C_start+0x26>
	}
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <I2C_repeated_start>:
	
	void I2C_repeated_start(void)
	{
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
		TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
    16d4:	e6 e5       	ldi	r30, 0x56	; 86
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	84 ea       	ldi	r24, 0xA4	; 164
    16da:	80 83       	st	Z, r24
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish
    16dc:	e6 e5       	ldi	r30, 0x56	; 86
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	88 1f       	adc	r24, r24
    16e4:	88 27       	eor	r24, r24
    16e6:	88 1f       	adc	r24, r24
    16e8:	88 2f       	mov	r24, r24
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	90 70       	andi	r25, 0x00	; 0
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	a9 f3       	breq	.-22     	; 0x16dc <I2C_repeated_start+0x10>
		while ((TWSR & 0XF8) != 0x10); // repeated start condition has been transmitted
    16f2:	e1 e2       	ldi	r30, 0x21	; 33
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	88 2f       	mov	r24, r24
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	88 7f       	andi	r24, 0xF8	; 248
    16fe:	90 70       	andi	r25, 0x00	; 0
    1700:	80 31       	cpi	r24, 0x10	; 16
    1702:	91 05       	cpc	r25, r1
    1704:	b1 f7       	brne	.-20     	; 0x16f2 <I2C_repeated_start+0x26>
	}
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <I2C_write_address>:
	
	void I2C_write_address(unsigned char address)
	{
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	0f 92       	push	r0
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	89 83       	std	Y+1, r24	; 0x01
		TWDR=address;
    1718:	e3 e2       	ldi	r30, 0x23	; 35
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	80 83       	st	Z, r24
		TWCR=(1<<TWINT)|(1<<TWEN);
    1720:	e6 e5       	ldi	r30, 0x56	; 86
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	84 e8       	ldi	r24, 0x84	; 132
    1726:	80 83       	st	Z, r24
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish 
    1728:	e6 e5       	ldi	r30, 0x56	; 86
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	88 1f       	adc	r24, r24
    1730:	88 27       	eor	r24, r24
    1732:	88 1f       	adc	r24, r24
    1734:	88 2f       	mov	r24, r24
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	90 70       	andi	r25, 0x00	; 0
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	a9 f3       	breq	.-22     	; 0x1728 <I2C_write_address+0x1c>
		while ((TWSR & 0XF8) != 0x18); // SLA+write has been transmitted and ACK has been received 
    173e:	e1 e2       	ldi	r30, 0x21	; 33
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	88 2f       	mov	r24, r24
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	88 7f       	andi	r24, 0xF8	; 248
    174a:	90 70       	andi	r25, 0x00	; 0
    174c:	88 31       	cpi	r24, 0x18	; 24
    174e:	91 05       	cpc	r25, r1
    1750:	b1 f7       	brne	.-20     	; 0x173e <I2C_write_address+0x32>
	}
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <I2C_write_address_and_read>:
	
	void I2C_write_address_and_read(unsigned char address)
	{
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	0f 92       	push	r0
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	89 83       	std	Y+1, r24	; 0x01
		TWDR=address;
    1766:	e3 e2       	ldi	r30, 0x23	; 35
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	80 83       	st	Z, r24
		TWCR=(1<<TWINT)|(1<<TWEN);
    176e:	e6 e5       	ldi	r30, 0x56	; 86
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	84 e8       	ldi	r24, 0x84	; 132
    1774:	80 83       	st	Z, r24
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish
    1776:	e6 e5       	ldi	r30, 0x56	; 86
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	88 1f       	adc	r24, r24
    177e:	88 27       	eor	r24, r24
    1780:	88 1f       	adc	r24, r24
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	90 70       	andi	r25, 0x00	; 0
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	a9 f3       	breq	.-22     	; 0x1776 <I2C_write_address_and_read+0x1c>
		while ((TWSR & 0XF8) != 0x40); // SLA+read has been transmitted and ACK has been received
    178c:	e1 e2       	ldi	r30, 0x21	; 33
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	88 2f       	mov	r24, r24
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	88 7f       	andi	r24, 0xF8	; 248
    1798:	90 70       	andi	r25, 0x00	; 0
    179a:	80 34       	cpi	r24, 0x40	; 64
    179c:	91 05       	cpc	r25, r1
    179e:	b1 f7       	brne	.-20     	; 0x178c <I2C_write_address_and_read+0x32>
	}
    17a0:	0f 90       	pop	r0
    17a2:	cf 91       	pop	r28
    17a4:	df 91       	pop	r29
    17a6:	08 95       	ret

000017a8 <I2C_write_data>:
	void I2C_write_data(unsigned char data)
	{
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	0f 92       	push	r0
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	89 83       	std	Y+1, r24	; 0x01
		TWDR=data;
    17b4:	e3 e2       	ldi	r30, 0x23	; 35
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	80 83       	st	Z, r24
		TWCR=(1<<TWINT)|(1<<TWEN);
    17bc:	e6 e5       	ldi	r30, 0x56	; 86
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	84 e8       	ldi	r24, 0x84	; 132
    17c2:	80 83       	st	Z, r24
		while(READ_BIT(TWCR,TWINT)==0); //wait to finish
    17c4:	e6 e5       	ldi	r30, 0x56	; 86
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	88 1f       	adc	r24, r24
    17cc:	88 27       	eor	r24, r24
    17ce:	88 1f       	adc	r24, r24
    17d0:	88 2f       	mov	r24, r24
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	90 70       	andi	r25, 0x00	; 0
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	a9 f3       	breq	.-22     	; 0x17c4 <I2C_write_data+0x1c>
		while ((TWSR & 0XF8) != 0x28); // data has been transmitted and ACK has been received
    17da:	e1 e2       	ldi	r30, 0x21	; 33
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	88 2f       	mov	r24, r24
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	88 7f       	andi	r24, 0xF8	; 248
    17e6:	90 70       	andi	r25, 0x00	; 0
    17e8:	88 32       	cpi	r24, 0x28	; 40
    17ea:	91 05       	cpc	r25, r1
    17ec:	b1 f7       	brne	.-20     	; 0x17da <I2C_write_data+0x32>
	}
    17ee:	0f 90       	pop	r0
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <I2C_stop>:
	
	void I2C_stop(void)
	{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
		TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    17fe:	e6 e5       	ldi	r30, 0x56	; 86
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	84 e9       	ldi	r24, 0x94	; 148
    1804:	80 83       	st	Z, r24
	}
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <I2C_read_with_NACK>:
	
	unsigned char I2C_read_with_NACK(void)
	{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
		TWCR=(1<<TWINT)|(1<<TWEN);
    1814:	e6 e5       	ldi	r30, 0x56	; 86
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	84 e8       	ldi	r24, 0x84	; 132
    181a:	80 83       	st	Z, r24
		while(READ_BIT(TWCR,TWINT)==0);
    181c:	e6 e5       	ldi	r30, 0x56	; 86
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	88 1f       	adc	r24, r24
    1824:	88 27       	eor	r24, r24
    1826:	88 1f       	adc	r24, r24
    1828:	88 2f       	mov	r24, r24
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	90 70       	andi	r25, 0x00	; 0
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	a9 f3       	breq	.-22     	; 0x181c <I2C_read_with_NACK+0x10>
		while ((TWSR & 0XF8) != 0x58); // data byte has been received and Not ACK has been returned
    1832:	e1 e2       	ldi	r30, 0x21	; 33
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	88 2f       	mov	r24, r24
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	88 7f       	andi	r24, 0xF8	; 248
    183e:	90 70       	andi	r25, 0x00	; 0
    1840:	88 35       	cpi	r24, 0x58	; 88
    1842:	91 05       	cpc	r25, r1
    1844:	b1 f7       	brne	.-20     	; 0x1832 <I2C_read_with_NACK+0x26>
		return TWDR ;
    1846:	e3 e2       	ldi	r30, 0x23	; 35
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
	}
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <I2C_set_address>:
	
	
	void I2C_set_address(unsigned char address)
	{
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	0f 92       	push	r0
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	89 83       	std	Y+1, r24	; 0x01
		TWAR=address;
    185e:	e2 e2       	ldi	r30, 0x22	; 34
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	80 83       	st	Z, r24
	}
    1866:	0f 90       	pop	r0
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <I2C_slave_read>:
	
	unsigned char I2C_slave_read(void)
	{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
		TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1876:	e6 e5       	ldi	r30, 0x56	; 86
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	84 ec       	ldi	r24, 0xC4	; 196
    187c:	80 83       	st	Z, r24
		while(READ_BIT(TWCR,TWINT)==0);
    187e:	e6 e5       	ldi	r30, 0x56	; 86
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	88 1f       	adc	r24, r24
    1886:	88 27       	eor	r24, r24
    1888:	88 1f       	adc	r24, r24
    188a:	88 2f       	mov	r24, r24
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	90 70       	andi	r25, 0x00	; 0
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	a9 f3       	breq	.-22     	; 0x187e <I2C_slave_read+0x10>
		while ((TWSR & 0XF8) != 0x60); // own SLA+W has been received and ACK has been returned
    1894:	e1 e2       	ldi	r30, 0x21	; 33
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	88 2f       	mov	r24, r24
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	88 7f       	andi	r24, 0xF8	; 248
    18a0:	90 70       	andi	r25, 0x00	; 0
    18a2:	80 36       	cpi	r24, 0x60	; 96
    18a4:	91 05       	cpc	r25, r1
    18a6:	b1 f7       	brne	.-20     	; 0x1894 <I2C_slave_read+0x26>
		TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    18a8:	e6 e5       	ldi	r30, 0x56	; 86
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	84 ec       	ldi	r24, 0xC4	; 196
    18ae:	80 83       	st	Z, r24
		while(READ_BIT(TWCR,TWINT)==0);
    18b0:	e6 e5       	ldi	r30, 0x56	; 86
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	88 1f       	adc	r24, r24
    18b8:	88 27       	eor	r24, r24
    18ba:	88 1f       	adc	r24, r24
    18bc:	88 2f       	mov	r24, r24
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	90 70       	andi	r25, 0x00	; 0
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	a9 f3       	breq	.-22     	; 0x18b0 <I2C_slave_read+0x42>
		while ((TWSR & 0XF8) != 0x80); // previously addressed with own SLA+W : data has been received : ACK has been returned
    18c6:	e1 e2       	ldi	r30, 0x21	; 33
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	88 2f       	mov	r24, r24
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	88 7f       	andi	r24, 0xF8	; 248
    18d2:	90 70       	andi	r25, 0x00	; 0
    18d4:	80 38       	cpi	r24, 0x80	; 128
    18d6:	91 05       	cpc	r25, r1
    18d8:	b1 f7       	brne	.-20     	; 0x18c6 <I2C_slave_read+0x58>
		return TWDR ;
    18da:	e3 e2       	ldi	r30, 0x23	; 35
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <LCD_vInit>:
#include "LCD.h"
#define  F_CPU 8000000UL 
#include <util/delay.h>

void LCD_vInit(void)
{
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	c4 55       	subi	r28, 0x54	; 84
    18f4:	d0 40       	sbci	r29, 0x00	; 0
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	fe 01       	movw	r30, r28
    1902:	ef 5a       	subi	r30, 0xAF	; 175
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	a8 e4       	ldi	r26, 0x48	; 72
    190c:	b3 e4       	ldi	r27, 0x43	; 67
    190e:	80 83       	st	Z, r24
    1910:	91 83       	std	Z+1, r25	; 0x01
    1912:	a2 83       	std	Z+2, r26	; 0x02
    1914:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1916:	8e 01       	movw	r16, r28
    1918:	03 5b       	subi	r16, 0xB3	; 179
    191a:	1f 4f       	sbci	r17, 0xFF	; 255
    191c:	fe 01       	movw	r30, r28
    191e:	ef 5a       	subi	r30, 0xAF	; 175
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	60 81       	ld	r22, Z
    1924:	71 81       	ldd	r23, Z+1	; 0x01
    1926:	82 81       	ldd	r24, Z+2	; 0x02
    1928:	93 81       	ldd	r25, Z+3	; 0x03
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	4a ef       	ldi	r20, 0xFA	; 250
    1930:	54 e4       	ldi	r21, 0x44	; 68
    1932:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	f8 01       	movw	r30, r16
    193c:	80 83       	st	Z, r24
    193e:	91 83       	std	Z+1, r25	; 0x01
    1940:	a2 83       	std	Z+2, r26	; 0x02
    1942:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1944:	fe 01       	movw	r30, r28
    1946:	e3 5b       	subi	r30, 0xB3	; 179
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	60 81       	ld	r22, Z
    194c:	71 81       	ldd	r23, Z+1	; 0x01
    194e:	82 81       	ldd	r24, Z+2	; 0x02
    1950:	93 81       	ldd	r25, Z+3	; 0x03
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e8       	ldi	r20, 0x80	; 128
    1958:	5f e3       	ldi	r21, 0x3F	; 63
    195a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    195e:	88 23       	and	r24, r24
    1960:	44 f4       	brge	.+16     	; 0x1972 <LCD_vInit+0x8c>
		__ticks = 1;
    1962:	fe 01       	movw	r30, r28
    1964:	e5 5b       	subi	r30, 0xB5	; 181
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	80 83       	st	Z, r24
    1970:	64 c0       	rjmp	.+200    	; 0x1a3a <LCD_vInit+0x154>
	else if (__tmp > 65535)
    1972:	fe 01       	movw	r30, r28
    1974:	e3 5b       	subi	r30, 0xB3	; 179
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	60 81       	ld	r22, Z
    197a:	71 81       	ldd	r23, Z+1	; 0x01
    197c:	82 81       	ldd	r24, Z+2	; 0x02
    197e:	93 81       	ldd	r25, Z+3	; 0x03
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	3f ef       	ldi	r19, 0xFF	; 255
    1984:	4f e7       	ldi	r20, 0x7F	; 127
    1986:	57 e4       	ldi	r21, 0x47	; 71
    1988:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    198c:	18 16       	cp	r1, r24
    198e:	0c f0       	brlt	.+2      	; 0x1992 <LCD_vInit+0xac>
    1990:	43 c0       	rjmp	.+134    	; 0x1a18 <LCD_vInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1992:	fe 01       	movw	r30, r28
    1994:	ef 5a       	subi	r30, 0xAF	; 175
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	60 81       	ld	r22, Z
    199a:	71 81       	ldd	r23, Z+1	; 0x01
    199c:	82 81       	ldd	r24, Z+2	; 0x02
    199e:	93 81       	ldd	r25, Z+3	; 0x03
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e2       	ldi	r20, 0x20	; 32
    19a6:	51 e4       	ldi	r21, 0x41	; 65
    19a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	8e 01       	movw	r16, r28
    19b2:	05 5b       	subi	r16, 0xB5	; 181
    19b4:	1f 4f       	sbci	r17, 0xFF	; 255
    19b6:	bc 01       	movw	r22, r24
    19b8:	cd 01       	movw	r24, r26
    19ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	f8 01       	movw	r30, r16
    19c4:	91 83       	std	Z+1, r25	; 0x01
    19c6:	80 83       	st	Z, r24
    19c8:	1f c0       	rjmp	.+62     	; 0x1a08 <LCD_vInit+0x122>
    19ca:	fe 01       	movw	r30, r28
    19cc:	e7 5b       	subi	r30, 0xB7	; 183
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	88 ec       	ldi	r24, 0xC8	; 200
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	91 83       	std	Z+1, r25	; 0x01
    19d6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19d8:	fe 01       	movw	r30, r28
    19da:	e7 5b       	subi	r30, 0xB7	; 183
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	80 81       	ld	r24, Z
    19e0:	91 81       	ldd	r25, Z+1	; 0x01
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	f1 f7       	brne	.-4      	; 0x19e2 <LCD_vInit+0xfc>
    19e6:	fe 01       	movw	r30, r28
    19e8:	e7 5b       	subi	r30, 0xB7	; 183
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	91 83       	std	Z+1, r25	; 0x01
    19ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f0:	de 01       	movw	r26, r28
    19f2:	a5 5b       	subi	r26, 0xB5	; 181
    19f4:	bf 4f       	sbci	r27, 0xFF	; 255
    19f6:	fe 01       	movw	r30, r28
    19f8:	e5 5b       	subi	r30, 0xB5	; 181
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	80 81       	ld	r24, Z
    19fe:	91 81       	ldd	r25, Z+1	; 0x01
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	11 96       	adiw	r26, 0x01	; 1
    1a04:	9c 93       	st	X, r25
    1a06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a08:	fe 01       	movw	r30, r28
    1a0a:	e5 5b       	subi	r30, 0xB5	; 181
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	80 81       	ld	r24, Z
    1a10:	91 81       	ldd	r25, Z+1	; 0x01
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	d1 f6       	brne	.-76     	; 0x19ca <LCD_vInit+0xe4>
    1a16:	27 c0       	rjmp	.+78     	; 0x1a66 <LCD_vInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a18:	8e 01       	movw	r16, r28
    1a1a:	05 5b       	subi	r16, 0xB5	; 181
    1a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1e:	fe 01       	movw	r30, r28
    1a20:	e3 5b       	subi	r30, 0xB3	; 179
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	60 81       	ld	r22, Z
    1a26:	71 81       	ldd	r23, Z+1	; 0x01
    1a28:	82 81       	ldd	r24, Z+2	; 0x02
    1a2a:	93 81       	ldd	r25, Z+3	; 0x03
    1a2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	f8 01       	movw	r30, r16
    1a36:	91 83       	std	Z+1, r25	; 0x01
    1a38:	80 83       	st	Z, r24
    1a3a:	de 01       	movw	r26, r28
    1a3c:	a9 5b       	subi	r26, 0xB9	; 185
    1a3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a40:	fe 01       	movw	r30, r28
    1a42:	e5 5b       	subi	r30, 0xB5	; 181
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	80 81       	ld	r24, Z
    1a48:	91 81       	ldd	r25, Z+1	; 0x01
    1a4a:	8d 93       	st	X+, r24
    1a4c:	9c 93       	st	X, r25
    1a4e:	fe 01       	movw	r30, r28
    1a50:	e9 5b       	subi	r30, 0xB9	; 185
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	80 81       	ld	r24, Z
    1a56:	91 81       	ldd	r25, Z+1	; 0x01
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <LCD_vInit+0x172>
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e9 5b       	subi	r30, 0xB9	; 185
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	91 83       	std	Z+1, r25	; 0x01
    1a64:	80 83       	st	Z, r24
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1); 
	
	#elif defined four_bits_mode
	DIO_vsetPINDir('A',4,1);
    1a66:	81 e4       	ldi	r24, 0x41	; 65
    1a68:	64 e0       	ldi	r22, 0x04	; 4
    1a6a:	41 e0       	ldi	r20, 0x01	; 1
    1a6c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
    1a70:	81 e4       	ldi	r24, 0x41	; 65
    1a72:	65 e0       	ldi	r22, 0x05	; 5
    1a74:	41 e0       	ldi	r20, 0x01	; 1
    1a76:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
    1a7a:	81 e4       	ldi	r24, 0x41	; 65
    1a7c:	66 e0       	ldi	r22, 0x06	; 6
    1a7e:	41 e0       	ldi	r20, 0x01	; 1
    1a80:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
    1a84:	81 e4       	ldi	r24, 0x41	; 65
    1a86:	67 e0       	ldi	r22, 0x07	; 7
    1a88:	41 e0       	ldi	r20, 0x01	; 1
    1a8a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
    1a8e:	82 e4       	ldi	r24, 0x42	; 66
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	41 e0       	ldi	r20, 0x01	; 1
    1a94:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
    1a98:	82 e4       	ldi	r24, 0x42	; 66
    1a9a:	62 e0       	ldi	r22, 0x02	; 2
    1a9c:	41 e0       	ldi	r20, 0x01	; 1
    1a9e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
    1aa2:	82 e4       	ldi	r24, 0x42	; 66
    1aa4:	61 e0       	ldi	r22, 0x01	; 1
    1aa6:	41 e0       	ldi	r20, 0x01	; 1
    1aa8:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_vsetPINDir>
   	DIO_write('B',RW,0);
    1aac:	82 e4       	ldi	r24, 0x42	; 66
    1aae:	62 e0       	ldi	r22, 0x02	; 2
    1ab0:	40 e0       	ldi	r20, 0x00	; 0
    1ab2:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_write>
	LCD_vSend_cmd(RETURN_HOME); //return home
    1ab6:	82 e0       	ldi	r24, 0x02	; 2
    1ab8:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_vSend_cmd>
    1abc:	fe 01       	movw	r30, r28
    1abe:	ed 5b       	subi	r30, 0xBD	; 189
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	a0 e2       	ldi	r26, 0x20	; 32
    1ac8:	b1 e4       	ldi	r27, 0x41	; 65
    1aca:	80 83       	st	Z, r24
    1acc:	91 83       	std	Z+1, r25	; 0x01
    1ace:	a2 83       	std	Z+2, r26	; 0x02
    1ad0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad2:	8e 01       	movw	r16, r28
    1ad4:	01 5c       	subi	r16, 0xC1	; 193
    1ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad8:	fe 01       	movw	r30, r28
    1ada:	ed 5b       	subi	r30, 0xBD	; 189
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	60 81       	ld	r22, Z
    1ae0:	71 81       	ldd	r23, Z+1	; 0x01
    1ae2:	82 81       	ldd	r24, Z+2	; 0x02
    1ae4:	93 81       	ldd	r25, Z+3	; 0x03
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	4a ef       	ldi	r20, 0xFA	; 250
    1aec:	54 e4       	ldi	r21, 0x44	; 68
    1aee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	f8 01       	movw	r30, r16
    1af8:	80 83       	st	Z, r24
    1afa:	91 83       	std	Z+1, r25	; 0x01
    1afc:	a2 83       	std	Z+2, r26	; 0x02
    1afe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b00:	fe 01       	movw	r30, r28
    1b02:	ff 96       	adiw	r30, 0x3f	; 63
    1b04:	60 81       	ld	r22, Z
    1b06:	71 81       	ldd	r23, Z+1	; 0x01
    1b08:	82 81       	ldd	r24, Z+2	; 0x02
    1b0a:	93 81       	ldd	r25, Z+3	; 0x03
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	40 e8       	ldi	r20, 0x80	; 128
    1b12:	5f e3       	ldi	r21, 0x3F	; 63
    1b14:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b18:	88 23       	and	r24, r24
    1b1a:	2c f4       	brge	.+10     	; 0x1b26 <LCD_vInit+0x240>
		__ticks = 1;
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	9e af       	std	Y+62, r25	; 0x3e
    1b22:	8d af       	std	Y+61, r24	; 0x3d
    1b24:	46 c0       	rjmp	.+140    	; 0x1bb2 <LCD_vInit+0x2cc>
	else if (__tmp > 65535)
    1b26:	fe 01       	movw	r30, r28
    1b28:	ff 96       	adiw	r30, 0x3f	; 63
    1b2a:	60 81       	ld	r22, Z
    1b2c:	71 81       	ldd	r23, Z+1	; 0x01
    1b2e:	82 81       	ldd	r24, Z+2	; 0x02
    1b30:	93 81       	ldd	r25, Z+3	; 0x03
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	3f ef       	ldi	r19, 0xFF	; 255
    1b36:	4f e7       	ldi	r20, 0x7F	; 127
    1b38:	57 e4       	ldi	r21, 0x47	; 71
    1b3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b3e:	18 16       	cp	r1, r24
    1b40:	64 f5       	brge	.+88     	; 0x1b9a <LCD_vInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b42:	fe 01       	movw	r30, r28
    1b44:	ed 5b       	subi	r30, 0xBD	; 189
    1b46:	ff 4f       	sbci	r31, 0xFF	; 255
    1b48:	60 81       	ld	r22, Z
    1b4a:	71 81       	ldd	r23, Z+1	; 0x01
    1b4c:	82 81       	ldd	r24, Z+2	; 0x02
    1b4e:	93 81       	ldd	r25, Z+3	; 0x03
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e2       	ldi	r20, 0x20	; 32
    1b56:	51 e4       	ldi	r21, 0x41	; 65
    1b58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	bc 01       	movw	r22, r24
    1b62:	cd 01       	movw	r24, r26
    1b64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	9e af       	std	Y+62, r25	; 0x3e
    1b6e:	8d af       	std	Y+61, r24	; 0x3d
    1b70:	0f c0       	rjmp	.+30     	; 0x1b90 <LCD_vInit+0x2aa>
    1b72:	88 ec       	ldi	r24, 0xC8	; 200
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	9c af       	std	Y+60, r25	; 0x3c
    1b78:	8b af       	std	Y+59, r24	; 0x3b
    1b7a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b7c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <LCD_vInit+0x298>
    1b82:	9c af       	std	Y+60, r25	; 0x3c
    1b84:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b86:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b88:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	9e af       	std	Y+62, r25	; 0x3e
    1b8e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b90:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b92:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	69 f7       	brne	.-38     	; 0x1b72 <LCD_vInit+0x28c>
    1b98:	16 c0       	rjmp	.+44     	; 0x1bc6 <LCD_vInit+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	ff 96       	adiw	r30, 0x3f	; 63
    1b9e:	60 81       	ld	r22, Z
    1ba0:	71 81       	ldd	r23, Z+1	; 0x01
    1ba2:	82 81       	ldd	r24, Z+2	; 0x02
    1ba4:	93 81       	ldd	r25, Z+3	; 0x03
    1ba6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	9e af       	std	Y+62, r25	; 0x3e
    1bb0:	8d af       	std	Y+61, r24	; 0x3d
    1bb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bb6:	9a af       	std	Y+58, r25	; 0x3a
    1bb8:	89 af       	std	Y+57, r24	; 0x39
    1bba:	89 ad       	ldd	r24, Y+57	; 0x39
    1bbc:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <LCD_vInit+0x2d8>
    1bc2:	9a af       	std	Y+58, r25	; 0x3a
    1bc4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS); //4bit mode
    1bc6:	88 e2       	ldi	r24, 0x28	; 40
    1bc8:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_vSend_cmd>
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	a0 e8       	ldi	r26, 0x80	; 128
    1bd2:	bf e3       	ldi	r27, 0x3F	; 63
    1bd4:	8d ab       	std	Y+53, r24	; 0x35
    1bd6:	9e ab       	std	Y+54, r25	; 0x36
    1bd8:	af ab       	std	Y+55, r26	; 0x37
    1bda:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bdc:	6d a9       	ldd	r22, Y+53	; 0x35
    1bde:	7e a9       	ldd	r23, Y+54	; 0x36
    1be0:	8f a9       	ldd	r24, Y+55	; 0x37
    1be2:	98 ad       	ldd	r25, Y+56	; 0x38
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	4a ef       	ldi	r20, 0xFA	; 250
    1bea:	54 e4       	ldi	r21, 0x44	; 68
    1bec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	89 ab       	std	Y+49, r24	; 0x31
    1bf6:	9a ab       	std	Y+50, r25	; 0x32
    1bf8:	ab ab       	std	Y+51, r26	; 0x33
    1bfa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bfc:	69 a9       	ldd	r22, Y+49	; 0x31
    1bfe:	7a a9       	ldd	r23, Y+50	; 0x32
    1c00:	8b a9       	ldd	r24, Y+51	; 0x33
    1c02:	9c a9       	ldd	r25, Y+52	; 0x34
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e8       	ldi	r20, 0x80	; 128
    1c0a:	5f e3       	ldi	r21, 0x3F	; 63
    1c0c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c10:	88 23       	and	r24, r24
    1c12:	2c f4       	brge	.+10     	; 0x1c1e <LCD_vInit+0x338>
		__ticks = 1;
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	98 ab       	std	Y+48, r25	; 0x30
    1c1a:	8f a7       	std	Y+47, r24	; 0x2f
    1c1c:	3f c0       	rjmp	.+126    	; 0x1c9c <LCD_vInit+0x3b6>
	else if (__tmp > 65535)
    1c1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c20:	7a a9       	ldd	r23, Y+50	; 0x32
    1c22:	8b a9       	ldd	r24, Y+51	; 0x33
    1c24:	9c a9       	ldd	r25, Y+52	; 0x34
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	3f ef       	ldi	r19, 0xFF	; 255
    1c2a:	4f e7       	ldi	r20, 0x7F	; 127
    1c2c:	57 e4       	ldi	r21, 0x47	; 71
    1c2e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c32:	18 16       	cp	r1, r24
    1c34:	4c f5       	brge	.+82     	; 0x1c88 <LCD_vInit+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c36:	6d a9       	ldd	r22, Y+53	; 0x35
    1c38:	7e a9       	ldd	r23, Y+54	; 0x36
    1c3a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c3c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e2       	ldi	r20, 0x20	; 32
    1c44:	51 e4       	ldi	r21, 0x41	; 65
    1c46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	bc 01       	movw	r22, r24
    1c50:	cd 01       	movw	r24, r26
    1c52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	98 ab       	std	Y+48, r25	; 0x30
    1c5c:	8f a7       	std	Y+47, r24	; 0x2f
    1c5e:	0f c0       	rjmp	.+30     	; 0x1c7e <LCD_vInit+0x398>
    1c60:	88 ec       	ldi	r24, 0xC8	; 200
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	9e a7       	std	Y+46, r25	; 0x2e
    1c66:	8d a7       	std	Y+45, r24	; 0x2d
    1c68:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c6a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <LCD_vInit+0x386>
    1c70:	9e a7       	std	Y+46, r25	; 0x2e
    1c72:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c74:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c76:	98 a9       	ldd	r25, Y+48	; 0x30
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	98 ab       	std	Y+48, r25	; 0x30
    1c7c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c80:	98 a9       	ldd	r25, Y+48	; 0x30
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	69 f7       	brne	.-38     	; 0x1c60 <LCD_vInit+0x37a>
    1c86:	14 c0       	rjmp	.+40     	; 0x1cb0 <LCD_vInit+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c88:	69 a9       	ldd	r22, Y+49	; 0x31
    1c8a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c8c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c8e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	98 ab       	std	Y+48, r25	; 0x30
    1c9a:	8f a7       	std	Y+47, r24	; 0x2f
    1c9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c9e:	98 a9       	ldd	r25, Y+48	; 0x30
    1ca0:	9c a7       	std	Y+44, r25	; 0x2c
    1ca2:	8b a7       	std	Y+43, r24	; 0x2b
    1ca4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ca6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	f1 f7       	brne	.-4      	; 0x1ca8 <LCD_vInit+0x3c2>
    1cac:	9c a7       	std	Y+44, r25	; 0x2c
    1cae:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
    1cb0:	8e e0       	ldi	r24, 0x0E	; 14
    1cb2:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_vSend_cmd>
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	a0 e8       	ldi	r26, 0x80	; 128
    1cbc:	bf e3       	ldi	r27, 0x3F	; 63
    1cbe:	8f a3       	std	Y+39, r24	; 0x27
    1cc0:	98 a7       	std	Y+40, r25	; 0x28
    1cc2:	a9 a7       	std	Y+41, r26	; 0x29
    1cc4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc6:	6f a1       	ldd	r22, Y+39	; 0x27
    1cc8:	78 a5       	ldd	r23, Y+40	; 0x28
    1cca:	89 a5       	ldd	r24, Y+41	; 0x29
    1ccc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	4a ef       	ldi	r20, 0xFA	; 250
    1cd4:	54 e4       	ldi	r21, 0x44	; 68
    1cd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	8b a3       	std	Y+35, r24	; 0x23
    1ce0:	9c a3       	std	Y+36, r25	; 0x24
    1ce2:	ad a3       	std	Y+37, r26	; 0x25
    1ce4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ce6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ce8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cea:	8d a1       	ldd	r24, Y+37	; 0x25
    1cec:	9e a1       	ldd	r25, Y+38	; 0x26
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e8       	ldi	r20, 0x80	; 128
    1cf4:	5f e3       	ldi	r21, 0x3F	; 63
    1cf6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cfa:	88 23       	and	r24, r24
    1cfc:	2c f4       	brge	.+10     	; 0x1d08 <LCD_vInit+0x422>
		__ticks = 1;
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	9a a3       	std	Y+34, r25	; 0x22
    1d04:	89 a3       	std	Y+33, r24	; 0x21
    1d06:	3f c0       	rjmp	.+126    	; 0x1d86 <LCD_vInit+0x4a0>
	else if (__tmp > 65535)
    1d08:	6b a1       	ldd	r22, Y+35	; 0x23
    1d0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	3f ef       	ldi	r19, 0xFF	; 255
    1d14:	4f e7       	ldi	r20, 0x7F	; 127
    1d16:	57 e4       	ldi	r21, 0x47	; 71
    1d18:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d1c:	18 16       	cp	r1, r24
    1d1e:	4c f5       	brge	.+82     	; 0x1d72 <LCD_vInit+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d20:	6f a1       	ldd	r22, Y+39	; 0x27
    1d22:	78 a5       	ldd	r23, Y+40	; 0x28
    1d24:	89 a5       	ldd	r24, Y+41	; 0x29
    1d26:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 e2       	ldi	r20, 0x20	; 32
    1d2e:	51 e4       	ldi	r21, 0x41	; 65
    1d30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	bc 01       	movw	r22, r24
    1d3a:	cd 01       	movw	r24, r26
    1d3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	9a a3       	std	Y+34, r25	; 0x22
    1d46:	89 a3       	std	Y+33, r24	; 0x21
    1d48:	0f c0       	rjmp	.+30     	; 0x1d68 <LCD_vInit+0x482>
    1d4a:	88 ec       	ldi	r24, 0xC8	; 200
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	98 a3       	std	Y+32, r25	; 0x20
    1d50:	8f 8f       	std	Y+31, r24	; 0x1f
    1d52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d54:	98 a1       	ldd	r25, Y+32	; 0x20
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <LCD_vInit+0x470>
    1d5a:	98 a3       	std	Y+32, r25	; 0x20
    1d5c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d60:	9a a1       	ldd	r25, Y+34	; 0x22
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	9a a3       	std	Y+34, r25	; 0x22
    1d66:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d68:	89 a1       	ldd	r24, Y+33	; 0x21
    1d6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	69 f7       	brne	.-38     	; 0x1d4a <LCD_vInit+0x464>
    1d70:	14 c0       	rjmp	.+40     	; 0x1d9a <LCD_vInit+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d72:	6b a1       	ldd	r22, Y+35	; 0x23
    1d74:	7c a1       	ldd	r23, Y+36	; 0x24
    1d76:	8d a1       	ldd	r24, Y+37	; 0x25
    1d78:	9e a1       	ldd	r25, Y+38	; 0x26
    1d7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	9a a3       	std	Y+34, r25	; 0x22
    1d84:	89 a3       	std	Y+33, r24	; 0x21
    1d86:	89 a1       	ldd	r24, Y+33	; 0x21
    1d88:	9a a1       	ldd	r25, Y+34	; 0x22
    1d8a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d8c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <LCD_vInit+0x4ac>
    1d96:	9e 8f       	std	Y+30, r25	; 0x1e
    1d98:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_vSend_cmd>
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a0 e2       	ldi	r26, 0x20	; 32
    1da6:	b1 e4       	ldi	r27, 0x41	; 65
    1da8:	89 8f       	std	Y+25, r24	; 0x19
    1daa:	9a 8f       	std	Y+26, r25	; 0x1a
    1dac:	ab 8f       	std	Y+27, r26	; 0x1b
    1dae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db0:	69 8d       	ldd	r22, Y+25	; 0x19
    1db2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1db4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1db6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	4a ef       	ldi	r20, 0xFA	; 250
    1dbe:	54 e4       	ldi	r21, 0x44	; 68
    1dc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	8d 8b       	std	Y+21, r24	; 0x15
    1dca:	9e 8b       	std	Y+22, r25	; 0x16
    1dcc:	af 8b       	std	Y+23, r26	; 0x17
    1dce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e8       	ldi	r20, 0x80	; 128
    1dde:	5f e3       	ldi	r21, 0x3F	; 63
    1de0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1de4:	88 23       	and	r24, r24
    1de6:	2c f4       	brge	.+10     	; 0x1df2 <LCD_vInit+0x50c>
		__ticks = 1;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9c 8b       	std	Y+20, r25	; 0x14
    1dee:	8b 8b       	std	Y+19, r24	; 0x13
    1df0:	3f c0       	rjmp	.+126    	; 0x1e70 <LCD_vInit+0x58a>
	else if (__tmp > 65535)
    1df2:	6d 89       	ldd	r22, Y+21	; 0x15
    1df4:	7e 89       	ldd	r23, Y+22	; 0x16
    1df6:	8f 89       	ldd	r24, Y+23	; 0x17
    1df8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	3f ef       	ldi	r19, 0xFF	; 255
    1dfe:	4f e7       	ldi	r20, 0x7F	; 127
    1e00:	57 e4       	ldi	r21, 0x47	; 71
    1e02:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e06:	18 16       	cp	r1, r24
    1e08:	4c f5       	brge	.+82     	; 0x1e5c <LCD_vInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e2       	ldi	r20, 0x20	; 32
    1e18:	51 e4       	ldi	r21, 0x41	; 65
    1e1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	bc 01       	movw	r22, r24
    1e24:	cd 01       	movw	r24, r26
    1e26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9c 8b       	std	Y+20, r25	; 0x14
    1e30:	8b 8b       	std	Y+19, r24	; 0x13
    1e32:	0f c0       	rjmp	.+30     	; 0x1e52 <LCD_vInit+0x56c>
    1e34:	88 ec       	ldi	r24, 0xC8	; 200
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	9a 8b       	std	Y+18, r25	; 0x12
    1e3a:	89 8b       	std	Y+17, r24	; 0x11
    1e3c:	89 89       	ldd	r24, Y+17	; 0x11
    1e3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <LCD_vInit+0x55a>
    1e44:	9a 8b       	std	Y+18, r25	; 0x12
    1e46:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e48:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	9c 8b       	std	Y+20, r25	; 0x14
    1e50:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	8b 89       	ldd	r24, Y+19	; 0x13
    1e54:	9c 89       	ldd	r25, Y+20	; 0x14
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	69 f7       	brne	.-38     	; 0x1e34 <LCD_vInit+0x54e>
    1e5a:	14 c0       	rjmp	.+40     	; 0x1e84 <LCD_vInit+0x59e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e60:	8f 89       	ldd	r24, Y+23	; 0x17
    1e62:	98 8d       	ldd	r25, Y+24	; 0x18
    1e64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9c 8b       	std	Y+20, r25	; 0x14
    1e6e:	8b 8b       	std	Y+19, r24	; 0x13
    1e70:	8b 89       	ldd	r24, Y+19	; 0x13
    1e72:	9c 89       	ldd	r25, Y+20	; 0x14
    1e74:	98 8b       	std	Y+16, r25	; 0x10
    1e76:	8f 87       	std	Y+15, r24	; 0x0f
    1e78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e7a:	98 89       	ldd	r25, Y+16	; 0x10
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	f1 f7       	brne	.-4      	; 0x1e7c <LCD_vInit+0x596>
    1e80:	98 8b       	std	Y+16, r25	; 0x10
    1e82:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
    1e84:	86 e0       	ldi	r24, 0x06	; 6
    1e86:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_vSend_cmd>
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	a0 e8       	ldi	r26, 0x80	; 128
    1e90:	bf e3       	ldi	r27, 0x3F	; 63
    1e92:	8b 87       	std	Y+11, r24	; 0x0b
    1e94:	9c 87       	std	Y+12, r25	; 0x0c
    1e96:	ad 87       	std	Y+13, r26	; 0x0d
    1e98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	4a ef       	ldi	r20, 0xFA	; 250
    1ea8:	54 e4       	ldi	r21, 0x44	; 68
    1eaa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	8f 83       	std	Y+7, r24	; 0x07
    1eb4:	98 87       	std	Y+8, r25	; 0x08
    1eb6:	a9 87       	std	Y+9, r26	; 0x09
    1eb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eba:	6f 81       	ldd	r22, Y+7	; 0x07
    1ebc:	78 85       	ldd	r23, Y+8	; 0x08
    1ebe:	89 85       	ldd	r24, Y+9	; 0x09
    1ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e8       	ldi	r20, 0x80	; 128
    1ec8:	5f e3       	ldi	r21, 0x3F	; 63
    1eca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ece:	88 23       	and	r24, r24
    1ed0:	2c f4       	brge	.+10     	; 0x1edc <LCD_vInit+0x5f6>
		__ticks = 1;
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	9e 83       	std	Y+6, r25	; 0x06
    1ed8:	8d 83       	std	Y+5, r24	; 0x05
    1eda:	3f c0       	rjmp	.+126    	; 0x1f5a <LCD_vInit+0x674>
	else if (__tmp > 65535)
    1edc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ede:	78 85       	ldd	r23, Y+8	; 0x08
    1ee0:	89 85       	ldd	r24, Y+9	; 0x09
    1ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	3f ef       	ldi	r19, 0xFF	; 255
    1ee8:	4f e7       	ldi	r20, 0x7F	; 127
    1eea:	57 e4       	ldi	r21, 0x47	; 71
    1eec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ef0:	18 16       	cp	r1, r24
    1ef2:	4c f5       	brge	.+82     	; 0x1f46 <LCD_vInit+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e2       	ldi	r20, 0x20	; 32
    1f02:	51 e4       	ldi	r21, 0x41	; 65
    1f04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	bc 01       	movw	r22, r24
    1f0e:	cd 01       	movw	r24, r26
    1f10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	9e 83       	std	Y+6, r25	; 0x06
    1f1a:	8d 83       	std	Y+5, r24	; 0x05
    1f1c:	0f c0       	rjmp	.+30     	; 0x1f3c <LCD_vInit+0x656>
    1f1e:	88 ec       	ldi	r24, 0xC8	; 200
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	9c 83       	std	Y+4, r25	; 0x04
    1f24:	8b 83       	std	Y+3, r24	; 0x03
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	f1 f7       	brne	.-4      	; 0x1f2a <LCD_vInit+0x644>
    1f2e:	9c 83       	std	Y+4, r25	; 0x04
    1f30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f32:	8d 81       	ldd	r24, Y+5	; 0x05
    1f34:	9e 81       	ldd	r25, Y+6	; 0x06
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	9e 83       	std	Y+6, r25	; 0x06
    1f3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	69 f7       	brne	.-38     	; 0x1f1e <LCD_vInit+0x638>
    1f44:	14 c0       	rjmp	.+40     	; 0x1f6e <LCD_vInit+0x688>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f46:	6f 81       	ldd	r22, Y+7	; 0x07
    1f48:	78 85       	ldd	r23, Y+8	; 0x08
    1f4a:	89 85       	ldd	r24, Y+9	; 0x09
    1f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	9e 83       	std	Y+6, r25	; 0x06
    1f58:	8d 83       	std	Y+5, r24	; 0x05
    1f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5e:	9a 83       	std	Y+2, r25	; 0x02
    1f60:	89 83       	std	Y+1, r24	; 0x01
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	9a 81       	ldd	r25, Y+2	; 0x02
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <LCD_vInit+0x680>
    1f6a:	9a 83       	std	Y+2, r25	; 0x02
    1f6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	#endif
}
    1f6e:	cc 5a       	subi	r28, 0xAC	; 172
    1f70:	df 4f       	sbci	r29, 0xFF	; 255
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	de bf       	out	0x3e, r29	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	1f 91       	pop	r17
    1f82:	0f 91       	pop	r16
    1f84:	08 95       	ret

00001f86 <send_falling_edge>:


static void send_falling_edge(void)
{
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	6c 97       	sbiw	r28, 0x1c	; 28
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
	DIO_write('B',EN,1);
    1f9a:	82 e4       	ldi	r24, 0x42	; 66
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	41 e0       	ldi	r20, 0x01	; 1
    1fa0:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_write>
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a0 e0       	ldi	r26, 0x00	; 0
    1faa:	b0 e4       	ldi	r27, 0x40	; 64
    1fac:	89 8f       	std	Y+25, r24	; 0x19
    1fae:	9a 8f       	std	Y+26, r25	; 0x1a
    1fb0:	ab 8f       	std	Y+27, r26	; 0x1b
    1fb2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb4:	69 8d       	ldd	r22, Y+25	; 0x19
    1fb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	4a ef       	ldi	r20, 0xFA	; 250
    1fc2:	54 e4       	ldi	r21, 0x44	; 68
    1fc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	8d 8b       	std	Y+21, r24	; 0x15
    1fce:	9e 8b       	std	Y+22, r25	; 0x16
    1fd0:	af 8b       	std	Y+23, r26	; 0x17
    1fd2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fda:	98 8d       	ldd	r25, Y+24	; 0x18
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e8       	ldi	r20, 0x80	; 128
    1fe2:	5f e3       	ldi	r21, 0x3F	; 63
    1fe4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fe8:	88 23       	and	r24, r24
    1fea:	2c f4       	brge	.+10     	; 0x1ff6 <send_falling_edge+0x70>
		__ticks = 1;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	9c 8b       	std	Y+20, r25	; 0x14
    1ff2:	8b 8b       	std	Y+19, r24	; 0x13
    1ff4:	3f c0       	rjmp	.+126    	; 0x2074 <send_falling_edge+0xee>
	else if (__tmp > 65535)
    1ff6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff8:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    1ffc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	3f ef       	ldi	r19, 0xFF	; 255
    2002:	4f e7       	ldi	r20, 0x7F	; 127
    2004:	57 e4       	ldi	r21, 0x47	; 71
    2006:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    200a:	18 16       	cp	r1, r24
    200c:	4c f5       	brge	.+82     	; 0x2060 <send_falling_edge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200e:	69 8d       	ldd	r22, Y+25	; 0x19
    2010:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2012:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2014:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e2       	ldi	r20, 0x20	; 32
    201c:	51 e4       	ldi	r21, 0x41	; 65
    201e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	9c 8b       	std	Y+20, r25	; 0x14
    2034:	8b 8b       	std	Y+19, r24	; 0x13
    2036:	0f c0       	rjmp	.+30     	; 0x2056 <send_falling_edge+0xd0>
    2038:	88 ec       	ldi	r24, 0xC8	; 200
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9a 8b       	std	Y+18, r25	; 0x12
    203e:	89 8b       	std	Y+17, r24	; 0x11
    2040:	89 89       	ldd	r24, Y+17	; 0x11
    2042:	9a 89       	ldd	r25, Y+18	; 0x12
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <send_falling_edge+0xbe>
    2048:	9a 8b       	std	Y+18, r25	; 0x12
    204a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204c:	8b 89       	ldd	r24, Y+19	; 0x13
    204e:	9c 89       	ldd	r25, Y+20	; 0x14
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	9c 8b       	std	Y+20, r25	; 0x14
    2054:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2056:	8b 89       	ldd	r24, Y+19	; 0x13
    2058:	9c 89       	ldd	r25, Y+20	; 0x14
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	69 f7       	brne	.-38     	; 0x2038 <send_falling_edge+0xb2>
    205e:	14 c0       	rjmp	.+40     	; 0x2088 <send_falling_edge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2060:	6d 89       	ldd	r22, Y+21	; 0x15
    2062:	7e 89       	ldd	r23, Y+22	; 0x16
    2064:	8f 89       	ldd	r24, Y+23	; 0x17
    2066:	98 8d       	ldd	r25, Y+24	; 0x18
    2068:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	9c 8b       	std	Y+20, r25	; 0x14
    2072:	8b 8b       	std	Y+19, r24	; 0x13
    2074:	8b 89       	ldd	r24, Y+19	; 0x13
    2076:	9c 89       	ldd	r25, Y+20	; 0x14
    2078:	98 8b       	std	Y+16, r25	; 0x10
    207a:	8f 87       	std	Y+15, r24	; 0x0f
    207c:	8f 85       	ldd	r24, Y+15	; 0x0f
    207e:	98 89       	ldd	r25, Y+16	; 0x10
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <send_falling_edge+0xfa>
    2084:	98 8b       	std	Y+16, r25	; 0x10
    2086:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_write('B',EN,0);
    2088:	82 e4       	ldi	r24, 0x42	; 66
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	40 e0       	ldi	r20, 0x00	; 0
    208e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_write>
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	a0 e0       	ldi	r26, 0x00	; 0
    2098:	b0 e4       	ldi	r27, 0x40	; 64
    209a:	8b 87       	std	Y+11, r24	; 0x0b
    209c:	9c 87       	std	Y+12, r25	; 0x0c
    209e:	ad 87       	std	Y+13, r26	; 0x0d
    20a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	4a ef       	ldi	r20, 0xFA	; 250
    20b0:	54 e4       	ldi	r21, 0x44	; 68
    20b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	8f 83       	std	Y+7, r24	; 0x07
    20bc:	98 87       	std	Y+8, r25	; 0x08
    20be:	a9 87       	std	Y+9, r26	; 0x09
    20c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20c2:	6f 81       	ldd	r22, Y+7	; 0x07
    20c4:	78 85       	ldd	r23, Y+8	; 0x08
    20c6:	89 85       	ldd	r24, Y+9	; 0x09
    20c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e8       	ldi	r20, 0x80	; 128
    20d0:	5f e3       	ldi	r21, 0x3F	; 63
    20d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20d6:	88 23       	and	r24, r24
    20d8:	2c f4       	brge	.+10     	; 0x20e4 <send_falling_edge+0x15e>
		__ticks = 1;
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	9e 83       	std	Y+6, r25	; 0x06
    20e0:	8d 83       	std	Y+5, r24	; 0x05
    20e2:	3f c0       	rjmp	.+126    	; 0x2162 <send_falling_edge+0x1dc>
	else if (__tmp > 65535)
    20e4:	6f 81       	ldd	r22, Y+7	; 0x07
    20e6:	78 85       	ldd	r23, Y+8	; 0x08
    20e8:	89 85       	ldd	r24, Y+9	; 0x09
    20ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	3f ef       	ldi	r19, 0xFF	; 255
    20f0:	4f e7       	ldi	r20, 0x7F	; 127
    20f2:	57 e4       	ldi	r21, 0x47	; 71
    20f4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20f8:	18 16       	cp	r1, r24
    20fa:	4c f5       	brge	.+82     	; 0x214e <send_falling_edge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2100:	8d 85       	ldd	r24, Y+13	; 0x0d
    2102:	9e 85       	ldd	r25, Y+14	; 0x0e
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e2       	ldi	r20, 0x20	; 32
    210a:	51 e4       	ldi	r21, 0x41	; 65
    210c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	bc 01       	movw	r22, r24
    2116:	cd 01       	movw	r24, r26
    2118:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	9e 83       	std	Y+6, r25	; 0x06
    2122:	8d 83       	std	Y+5, r24	; 0x05
    2124:	0f c0       	rjmp	.+30     	; 0x2144 <send_falling_edge+0x1be>
    2126:	88 ec       	ldi	r24, 0xC8	; 200
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	9c 83       	std	Y+4, r25	; 0x04
    212c:	8b 83       	std	Y+3, r24	; 0x03
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	9c 81       	ldd	r25, Y+4	; 0x04
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f1 f7       	brne	.-4      	; 0x2132 <send_falling_edge+0x1ac>
    2136:	9c 83       	std	Y+4, r25	; 0x04
    2138:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213a:	8d 81       	ldd	r24, Y+5	; 0x05
    213c:	9e 81       	ldd	r25, Y+6	; 0x06
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	9e 83       	std	Y+6, r25	; 0x06
    2142:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2144:	8d 81       	ldd	r24, Y+5	; 0x05
    2146:	9e 81       	ldd	r25, Y+6	; 0x06
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	69 f7       	brne	.-38     	; 0x2126 <send_falling_edge+0x1a0>
    214c:	14 c0       	rjmp	.+40     	; 0x2176 <send_falling_edge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214e:	6f 81       	ldd	r22, Y+7	; 0x07
    2150:	78 85       	ldd	r23, Y+8	; 0x08
    2152:	89 85       	ldd	r24, Y+9	; 0x09
    2154:	9a 85       	ldd	r25, Y+10	; 0x0a
    2156:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	9e 83       	std	Y+6, r25	; 0x06
    2160:	8d 83       	std	Y+5, r24	; 0x05
    2162:	8d 81       	ldd	r24, Y+5	; 0x05
    2164:	9e 81       	ldd	r25, Y+6	; 0x06
    2166:	9a 83       	std	Y+2, r25	; 0x02
    2168:	89 83       	std	Y+1, r24	; 0x01
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	9a 81       	ldd	r25, Y+2	; 0x02
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	f1 f7       	brne	.-4      	; 0x216e <send_falling_edge+0x1e8>
    2172:	9a 83       	std	Y+2, r25	; 0x02
    2174:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2176:	6c 96       	adiw	r28, 0x1c	; 28
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	2f 97       	sbiw	r28, 0x0f	; 15
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_write_port('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',cmd>>4);
    219e:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a0:	98 2f       	mov	r25, r24
    21a2:	92 95       	swap	r25
    21a4:	9f 70       	andi	r25, 0x0F	; 15
    21a6:	81 e4       	ldi	r24, 0x41	; 65
    21a8:	69 2f       	mov	r22, r25
    21aa:	0e 94 a6 0a 	call	0x154c	; 0x154c <write_high_nibble>
	DIO_write('B',RS,0);
    21ae:	82 e4       	ldi	r24, 0x42	; 66
    21b0:	61 e0       	ldi	r22, 0x01	; 1
    21b2:	40 e0       	ldi	r20, 0x00	; 0
    21b4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_write>
	send_falling_edge();
    21b8:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <send_falling_edge>
	write_high_nibble('A',cmd);
    21bc:	81 e4       	ldi	r24, 0x41	; 65
    21be:	6f 85       	ldd	r22, Y+15	; 0x0f
    21c0:	0e 94 a6 0a 	call	0x154c	; 0x154c <write_high_nibble>
	DIO_write('B',RS,0);
    21c4:	82 e4       	ldi	r24, 0x42	; 66
    21c6:	61 e0       	ldi	r22, 0x01	; 1
    21c8:	40 e0       	ldi	r20, 0x00	; 0
    21ca:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_write>
	send_falling_edge();
    21ce:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <send_falling_edge>
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	a0 e8       	ldi	r26, 0x80	; 128
    21d8:	bf e3       	ldi	r27, 0x3F	; 63
    21da:	8b 87       	std	Y+11, r24	; 0x0b
    21dc:	9c 87       	std	Y+12, r25	; 0x0c
    21de:	ad 87       	std	Y+13, r26	; 0x0d
    21e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	4a ef       	ldi	r20, 0xFA	; 250
    21f0:	54 e4       	ldi	r21, 0x44	; 68
    21f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	8f 83       	std	Y+7, r24	; 0x07
    21fc:	98 87       	std	Y+8, r25	; 0x08
    21fe:	a9 87       	std	Y+9, r26	; 0x09
    2200:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2202:	6f 81       	ldd	r22, Y+7	; 0x07
    2204:	78 85       	ldd	r23, Y+8	; 0x08
    2206:	89 85       	ldd	r24, Y+9	; 0x09
    2208:	9a 85       	ldd	r25, Y+10	; 0x0a
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	40 e8       	ldi	r20, 0x80	; 128
    2210:	5f e3       	ldi	r21, 0x3F	; 63
    2212:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2216:	88 23       	and	r24, r24
    2218:	2c f4       	brge	.+10     	; 0x2224 <LCD_vSend_cmd+0x9c>
		__ticks = 1;
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	9e 83       	std	Y+6, r25	; 0x06
    2220:	8d 83       	std	Y+5, r24	; 0x05
    2222:	3f c0       	rjmp	.+126    	; 0x22a2 <LCD_vSend_cmd+0x11a>
	else if (__tmp > 65535)
    2224:	6f 81       	ldd	r22, Y+7	; 0x07
    2226:	78 85       	ldd	r23, Y+8	; 0x08
    2228:	89 85       	ldd	r24, Y+9	; 0x09
    222a:	9a 85       	ldd	r25, Y+10	; 0x0a
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	3f ef       	ldi	r19, 0xFF	; 255
    2230:	4f e7       	ldi	r20, 0x7F	; 127
    2232:	57 e4       	ldi	r21, 0x47	; 71
    2234:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2238:	18 16       	cp	r1, r24
    223a:	4c f5       	brge	.+82     	; 0x228e <LCD_vSend_cmd+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223c:	6b 85       	ldd	r22, Y+11	; 0x0b
    223e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2240:	8d 85       	ldd	r24, Y+13	; 0x0d
    2242:	9e 85       	ldd	r25, Y+14	; 0x0e
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	40 e2       	ldi	r20, 0x20	; 32
    224a:	51 e4       	ldi	r21, 0x41	; 65
    224c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	bc 01       	movw	r22, r24
    2256:	cd 01       	movw	r24, r26
    2258:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	9e 83       	std	Y+6, r25	; 0x06
    2262:	8d 83       	std	Y+5, r24	; 0x05
    2264:	0f c0       	rjmp	.+30     	; 0x2284 <LCD_vSend_cmd+0xfc>
    2266:	88 ec       	ldi	r24, 0xC8	; 200
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	9c 83       	std	Y+4, r25	; 0x04
    226c:	8b 83       	std	Y+3, r24	; 0x03
    226e:	8b 81       	ldd	r24, Y+3	; 0x03
    2270:	9c 81       	ldd	r25, Y+4	; 0x04
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	f1 f7       	brne	.-4      	; 0x2272 <LCD_vSend_cmd+0xea>
    2276:	9c 83       	std	Y+4, r25	; 0x04
    2278:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227a:	8d 81       	ldd	r24, Y+5	; 0x05
    227c:	9e 81       	ldd	r25, Y+6	; 0x06
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	9e 83       	std	Y+6, r25	; 0x06
    2282:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2284:	8d 81       	ldd	r24, Y+5	; 0x05
    2286:	9e 81       	ldd	r25, Y+6	; 0x06
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	69 f7       	brne	.-38     	; 0x2266 <LCD_vSend_cmd+0xde>
    228c:	14 c0       	rjmp	.+40     	; 0x22b6 <LCD_vSend_cmd+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228e:	6f 81       	ldd	r22, Y+7	; 0x07
    2290:	78 85       	ldd	r23, Y+8	; 0x08
    2292:	89 85       	ldd	r24, Y+9	; 0x09
    2294:	9a 85       	ldd	r25, Y+10	; 0x0a
    2296:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	9e 83       	std	Y+6, r25	; 0x06
    22a0:	8d 83       	std	Y+5, r24	; 0x05
    22a2:	8d 81       	ldd	r24, Y+5	; 0x05
    22a4:	9e 81       	ldd	r25, Y+6	; 0x06
    22a6:	9a 83       	std	Y+2, r25	; 0x02
    22a8:	89 83       	std	Y+1, r24	; 0x01
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	9a 81       	ldd	r25, Y+2	; 0x02
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	f1 f7       	brne	.-4      	; 0x22ae <LCD_vSend_cmd+0x126>
    22b2:	9a 83       	std	Y+2, r25	; 0x02
    22b4:	89 83       	std	Y+1, r24	; 0x01
	#endif
	_delay_ms(1);
}
    22b6:	2f 96       	adiw	r28, 0x0f	; 15
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	de bf       	out	0x3e, r29	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	cd bf       	out	0x3d, r28	; 61
    22c2:	cf 91       	pop	r28
    22c4:	df 91       	pop	r29
    22c6:	08 95       	ret

000022c8 <LCD_vSend_char>:

void LCD_vSend_char(char data)
{
    22c8:	df 93       	push	r29
    22ca:	cf 93       	push	r28
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
    22d0:	2f 97       	sbiw	r28, 0x0f	; 15
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	f8 94       	cli
    22d6:	de bf       	out	0x3e, r29	; 62
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	cd bf       	out	0x3d, r28	; 61
    22dc:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_write_port('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',data>>4);
    22de:	8f 85       	ldd	r24, Y+15	; 0x0f
    22e0:	98 2f       	mov	r25, r24
    22e2:	92 95       	swap	r25
    22e4:	9f 70       	andi	r25, 0x0F	; 15
    22e6:	81 e4       	ldi	r24, 0x41	; 65
    22e8:	69 2f       	mov	r22, r25
    22ea:	0e 94 a6 0a 	call	0x154c	; 0x154c <write_high_nibble>
	DIO_write('B',RS,1);
    22ee:	82 e4       	ldi	r24, 0x42	; 66
    22f0:	61 e0       	ldi	r22, 0x01	; 1
    22f2:	41 e0       	ldi	r20, 0x01	; 1
    22f4:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_write>
	send_falling_edge();
    22f8:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <send_falling_edge>
	write_high_nibble('A',data);
    22fc:	81 e4       	ldi	r24, 0x41	; 65
    22fe:	6f 85       	ldd	r22, Y+15	; 0x0f
    2300:	0e 94 a6 0a 	call	0x154c	; 0x154c <write_high_nibble>
	DIO_write('B',RS,1);
    2304:	82 e4       	ldi	r24, 0x42	; 66
    2306:	61 e0       	ldi	r22, 0x01	; 1
    2308:	41 e0       	ldi	r20, 0x01	; 1
    230a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <DIO_write>
	send_falling_edge();
    230e:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <send_falling_edge>
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	a0 e8       	ldi	r26, 0x80	; 128
    2318:	bf e3       	ldi	r27, 0x3F	; 63
    231a:	8b 87       	std	Y+11, r24	; 0x0b
    231c:	9c 87       	std	Y+12, r25	; 0x0c
    231e:	ad 87       	std	Y+13, r26	; 0x0d
    2320:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2322:	6b 85       	ldd	r22, Y+11	; 0x0b
    2324:	7c 85       	ldd	r23, Y+12	; 0x0c
    2326:	8d 85       	ldd	r24, Y+13	; 0x0d
    2328:	9e 85       	ldd	r25, Y+14	; 0x0e
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	4a ef       	ldi	r20, 0xFA	; 250
    2330:	54 e4       	ldi	r21, 0x44	; 68
    2332:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	8f 83       	std	Y+7, r24	; 0x07
    233c:	98 87       	std	Y+8, r25	; 0x08
    233e:	a9 87       	std	Y+9, r26	; 0x09
    2340:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2342:	6f 81       	ldd	r22, Y+7	; 0x07
    2344:	78 85       	ldd	r23, Y+8	; 0x08
    2346:	89 85       	ldd	r24, Y+9	; 0x09
    2348:	9a 85       	ldd	r25, Y+10	; 0x0a
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e8       	ldi	r20, 0x80	; 128
    2350:	5f e3       	ldi	r21, 0x3F	; 63
    2352:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2356:	88 23       	and	r24, r24
    2358:	2c f4       	brge	.+10     	; 0x2364 <LCD_vSend_char+0x9c>
		__ticks = 1;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	9e 83       	std	Y+6, r25	; 0x06
    2360:	8d 83       	std	Y+5, r24	; 0x05
    2362:	3f c0       	rjmp	.+126    	; 0x23e2 <LCD_vSend_char+0x11a>
	else if (__tmp > 65535)
    2364:	6f 81       	ldd	r22, Y+7	; 0x07
    2366:	78 85       	ldd	r23, Y+8	; 0x08
    2368:	89 85       	ldd	r24, Y+9	; 0x09
    236a:	9a 85       	ldd	r25, Y+10	; 0x0a
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	3f ef       	ldi	r19, 0xFF	; 255
    2370:	4f e7       	ldi	r20, 0x7F	; 127
    2372:	57 e4       	ldi	r21, 0x47	; 71
    2374:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2378:	18 16       	cp	r1, r24
    237a:	4c f5       	brge	.+82     	; 0x23ce <LCD_vSend_char+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237c:	6b 85       	ldd	r22, Y+11	; 0x0b
    237e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2380:	8d 85       	ldd	r24, Y+13	; 0x0d
    2382:	9e 85       	ldd	r25, Y+14	; 0x0e
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e2       	ldi	r20, 0x20	; 32
    238a:	51 e4       	ldi	r21, 0x41	; 65
    238c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	bc 01       	movw	r22, r24
    2396:	cd 01       	movw	r24, r26
    2398:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	9e 83       	std	Y+6, r25	; 0x06
    23a2:	8d 83       	std	Y+5, r24	; 0x05
    23a4:	0f c0       	rjmp	.+30     	; 0x23c4 <LCD_vSend_char+0xfc>
    23a6:	88 ec       	ldi	r24, 0xC8	; 200
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	9c 83       	std	Y+4, r25	; 0x04
    23ac:	8b 83       	std	Y+3, r24	; 0x03
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	9c 81       	ldd	r25, Y+4	; 0x04
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <LCD_vSend_char+0xea>
    23b6:	9c 83       	std	Y+4, r25	; 0x04
    23b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ba:	8d 81       	ldd	r24, Y+5	; 0x05
    23bc:	9e 81       	ldd	r25, Y+6	; 0x06
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	9e 83       	std	Y+6, r25	; 0x06
    23c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c4:	8d 81       	ldd	r24, Y+5	; 0x05
    23c6:	9e 81       	ldd	r25, Y+6	; 0x06
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	69 f7       	brne	.-38     	; 0x23a6 <LCD_vSend_char+0xde>
    23cc:	14 c0       	rjmp	.+40     	; 0x23f6 <LCD_vSend_char+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ce:	6f 81       	ldd	r22, Y+7	; 0x07
    23d0:	78 85       	ldd	r23, Y+8	; 0x08
    23d2:	89 85       	ldd	r24, Y+9	; 0x09
    23d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	9e 83       	std	Y+6, r25	; 0x06
    23e0:	8d 83       	std	Y+5, r24	; 0x05
    23e2:	8d 81       	ldd	r24, Y+5	; 0x05
    23e4:	9e 81       	ldd	r25, Y+6	; 0x06
    23e6:	9a 83       	std	Y+2, r25	; 0x02
    23e8:	89 83       	std	Y+1, r24	; 0x01
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	9a 81       	ldd	r25, Y+2	; 0x02
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <LCD_vSend_char+0x126>
    23f2:	9a 83       	std	Y+2, r25	; 0x02
    23f4:	89 83       	std	Y+1, r24	; 0x01
	#endif
	_delay_ms(1);
}
    23f6:	2f 96       	adiw	r28, 0x0f	; 15
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	00 d0       	rcall	.+0      	; 0x240e <LCD_vSend_string+0x6>
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	9a 83       	std	Y+2, r25	; 0x02
    2414:	89 83       	std	Y+1, r24	; 0x01
    2416:	0a c0       	rjmp	.+20     	; 0x242c <LCD_vSend_string+0x24>
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
    2418:	e9 81       	ldd	r30, Y+1	; 0x01
    241a:	fa 81       	ldd	r31, Y+2	; 0x02
    241c:	80 81       	ld	r24, Z
    241e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_vSend_char>
		data++;
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	9a 81       	ldd	r25, Y+2	; 0x02
    2426:	01 96       	adiw	r24, 0x01	; 1
    2428:	9a 83       	std	Y+2, r25	; 0x02
    242a:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
    242c:	e9 81       	ldd	r30, Y+1	; 0x01
    242e:	fa 81       	ldd	r31, Y+2	; 0x02
    2430:	80 81       	ld	r24, Z
    2432:	88 23       	and	r24, r24
    2434:	89 f7       	brne	.-30     	; 0x2418 <LCD_vSend_string+0x10>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <LCD_clearscreen>:
void LCD_clearscreen()
{
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	2e 97       	sbiw	r28, 0x0e	; 14
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61
	LCD_vSend_cmd(CLR_SCREEN);
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_vSend_cmd>
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	a0 e2       	ldi	r26, 0x20	; 32
    2460:	b1 e4       	ldi	r27, 0x41	; 65
    2462:	8b 87       	std	Y+11, r24	; 0x0b
    2464:	9c 87       	std	Y+12, r25	; 0x0c
    2466:	ad 87       	std	Y+13, r26	; 0x0d
    2468:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246a:	6b 85       	ldd	r22, Y+11	; 0x0b
    246c:	7c 85       	ldd	r23, Y+12	; 0x0c
    246e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2470:	9e 85       	ldd	r25, Y+14	; 0x0e
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	4a ef       	ldi	r20, 0xFA	; 250
    2478:	54 e4       	ldi	r21, 0x44	; 68
    247a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	8f 83       	std	Y+7, r24	; 0x07
    2484:	98 87       	std	Y+8, r25	; 0x08
    2486:	a9 87       	std	Y+9, r26	; 0x09
    2488:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    248a:	6f 81       	ldd	r22, Y+7	; 0x07
    248c:	78 85       	ldd	r23, Y+8	; 0x08
    248e:	89 85       	ldd	r24, Y+9	; 0x09
    2490:	9a 85       	ldd	r25, Y+10	; 0x0a
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e8       	ldi	r20, 0x80	; 128
    2498:	5f e3       	ldi	r21, 0x3F	; 63
    249a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    249e:	88 23       	and	r24, r24
    24a0:	2c f4       	brge	.+10     	; 0x24ac <LCD_clearscreen+0x6c>
		__ticks = 1;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	9e 83       	std	Y+6, r25	; 0x06
    24a8:	8d 83       	std	Y+5, r24	; 0x05
    24aa:	3f c0       	rjmp	.+126    	; 0x252a <LCD_clearscreen+0xea>
	else if (__tmp > 65535)
    24ac:	6f 81       	ldd	r22, Y+7	; 0x07
    24ae:	78 85       	ldd	r23, Y+8	; 0x08
    24b0:	89 85       	ldd	r24, Y+9	; 0x09
    24b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	3f ef       	ldi	r19, 0xFF	; 255
    24b8:	4f e7       	ldi	r20, 0x7F	; 127
    24ba:	57 e4       	ldi	r21, 0x47	; 71
    24bc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24c0:	18 16       	cp	r1, r24
    24c2:	4c f5       	brge	.+82     	; 0x2516 <LCD_clearscreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e2       	ldi	r20, 0x20	; 32
    24d2:	51 e4       	ldi	r21, 0x41	; 65
    24d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	bc 01       	movw	r22, r24
    24de:	cd 01       	movw	r24, r26
    24e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	9e 83       	std	Y+6, r25	; 0x06
    24ea:	8d 83       	std	Y+5, r24	; 0x05
    24ec:	0f c0       	rjmp	.+30     	; 0x250c <LCD_clearscreen+0xcc>
    24ee:	88 ec       	ldi	r24, 0xC8	; 200
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9c 83       	std	Y+4, r25	; 0x04
    24f4:	8b 83       	std	Y+3, r24	; 0x03
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	9c 81       	ldd	r25, Y+4	; 0x04
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	f1 f7       	brne	.-4      	; 0x24fa <LCD_clearscreen+0xba>
    24fe:	9c 83       	std	Y+4, r25	; 0x04
    2500:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2502:	8d 81       	ldd	r24, Y+5	; 0x05
    2504:	9e 81       	ldd	r25, Y+6	; 0x06
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	9e 83       	std	Y+6, r25	; 0x06
    250a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250c:	8d 81       	ldd	r24, Y+5	; 0x05
    250e:	9e 81       	ldd	r25, Y+6	; 0x06
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	69 f7       	brne	.-38     	; 0x24ee <LCD_clearscreen+0xae>
    2514:	14 c0       	rjmp	.+40     	; 0x253e <LCD_clearscreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2516:	6f 81       	ldd	r22, Y+7	; 0x07
    2518:	78 85       	ldd	r23, Y+8	; 0x08
    251a:	89 85       	ldd	r24, Y+9	; 0x09
    251c:	9a 85       	ldd	r25, Y+10	; 0x0a
    251e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	9e 83       	std	Y+6, r25	; 0x06
    2528:	8d 83       	std	Y+5, r24	; 0x05
    252a:	8d 81       	ldd	r24, Y+5	; 0x05
    252c:	9e 81       	ldd	r25, Y+6	; 0x06
    252e:	9a 83       	std	Y+2, r25	; 0x02
    2530:	89 83       	std	Y+1, r24	; 0x01
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	9a 81       	ldd	r25, Y+2	; 0x02
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <LCD_clearscreen+0xf6>
    253a:	9a 83       	std	Y+2, r25	; 0x02
    253c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    253e:	2e 96       	adiw	r28, 0x0e	; 14
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	de bf       	out	0x3e, r29	; 62
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	cd bf       	out	0x3d, r28	; 61
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	61 97       	sbiw	r28, 0x11	; 17
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	f8 94       	cli
    255e:	de bf       	out	0x3e, r29	; 62
    2560:	0f be       	out	0x3f, r0	; 63
    2562:	cd bf       	out	0x3d, r28	; 61
    2564:	88 8b       	std	Y+16, r24	; 0x10
    2566:	69 8b       	std	Y+17, r22	; 0x11
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
    2568:	88 89       	ldd	r24, Y+16	; 0x10
    256a:	83 30       	cpi	r24, 0x03	; 3
    256c:	48 f4       	brcc	.+18     	; 0x2580 <LCD_movecursor+0x30>
    256e:	88 89       	ldd	r24, Y+16	; 0x10
    2570:	88 23       	and	r24, r24
    2572:	31 f0       	breq	.+12     	; 0x2580 <LCD_movecursor+0x30>
    2574:	89 89       	ldd	r24, Y+17	; 0x11
    2576:	81 31       	cpi	r24, 0x11	; 17
    2578:	18 f4       	brcc	.+6      	; 0x2580 <LCD_movecursor+0x30>
    257a:	89 89       	ldd	r24, Y+17	; 0x11
    257c:	88 23       	and	r24, r24
    257e:	19 f4       	brne	.+6      	; 0x2586 <LCD_movecursor+0x36>
	{
		data=0x80;
    2580:	80 e8       	ldi	r24, 0x80	; 128
    2582:	8f 87       	std	Y+15, r24	; 0x0f
    2584:	0d c0       	rjmp	.+26     	; 0x25a0 <LCD_movecursor+0x50>
	}
	else if(row==1)
    2586:	88 89       	ldd	r24, Y+16	; 0x10
    2588:	81 30       	cpi	r24, 0x01	; 1
    258a:	21 f4       	brne	.+8      	; 0x2594 <LCD_movecursor+0x44>
	{
		data=0x80+coloumn-1 ;
    258c:	89 89       	ldd	r24, Y+17	; 0x11
    258e:	81 58       	subi	r24, 0x81	; 129
    2590:	8f 87       	std	Y+15, r24	; 0x0f
    2592:	06 c0       	rjmp	.+12     	; 0x25a0 <LCD_movecursor+0x50>
	}
	else if (row==2)
    2594:	88 89       	ldd	r24, Y+16	; 0x10
    2596:	82 30       	cpi	r24, 0x02	; 2
    2598:	19 f4       	brne	.+6      	; 0x25a0 <LCD_movecursor+0x50>
	{
		data=0xc0+coloumn-1;
    259a:	89 89       	ldd	r24, Y+17	; 0x11
    259c:	81 54       	subi	r24, 0x41	; 65
    259e:	8f 87       	std	Y+15, r24	; 0x0f
	}
	LCD_vSend_cmd(data);
    25a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25a2:	0e 94 c4 10 	call	0x2188	; 0x2188 <LCD_vSend_cmd>
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	a0 e8       	ldi	r26, 0x80	; 128
    25ac:	bf e3       	ldi	r27, 0x3F	; 63
    25ae:	8b 87       	std	Y+11, r24	; 0x0b
    25b0:	9c 87       	std	Y+12, r25	; 0x0c
    25b2:	ad 87       	std	Y+13, r26	; 0x0d
    25b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    25bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	4a ef       	ldi	r20, 0xFA	; 250
    25c4:	54 e4       	ldi	r21, 0x44	; 68
    25c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	8f 83       	std	Y+7, r24	; 0x07
    25d0:	98 87       	std	Y+8, r25	; 0x08
    25d2:	a9 87       	std	Y+9, r26	; 0x09
    25d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25d6:	6f 81       	ldd	r22, Y+7	; 0x07
    25d8:	78 85       	ldd	r23, Y+8	; 0x08
    25da:	89 85       	ldd	r24, Y+9	; 0x09
    25dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e8       	ldi	r20, 0x80	; 128
    25e4:	5f e3       	ldi	r21, 0x3F	; 63
    25e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25ea:	88 23       	and	r24, r24
    25ec:	2c f4       	brge	.+10     	; 0x25f8 <LCD_movecursor+0xa8>
		__ticks = 1;
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	9e 83       	std	Y+6, r25	; 0x06
    25f4:	8d 83       	std	Y+5, r24	; 0x05
    25f6:	3f c0       	rjmp	.+126    	; 0x2676 <LCD_movecursor+0x126>
	else if (__tmp > 65535)
    25f8:	6f 81       	ldd	r22, Y+7	; 0x07
    25fa:	78 85       	ldd	r23, Y+8	; 0x08
    25fc:	89 85       	ldd	r24, Y+9	; 0x09
    25fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	3f ef       	ldi	r19, 0xFF	; 255
    2604:	4f e7       	ldi	r20, 0x7F	; 127
    2606:	57 e4       	ldi	r21, 0x47	; 71
    2608:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    260c:	18 16       	cp	r1, r24
    260e:	4c f5       	brge	.+82     	; 0x2662 <LCD_movecursor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2610:	6b 85       	ldd	r22, Y+11	; 0x0b
    2612:	7c 85       	ldd	r23, Y+12	; 0x0c
    2614:	8d 85       	ldd	r24, Y+13	; 0x0d
    2616:	9e 85       	ldd	r25, Y+14	; 0x0e
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	40 e2       	ldi	r20, 0x20	; 32
    261e:	51 e4       	ldi	r21, 0x41	; 65
    2620:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	bc 01       	movw	r22, r24
    262a:	cd 01       	movw	r24, r26
    262c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	9e 83       	std	Y+6, r25	; 0x06
    2636:	8d 83       	std	Y+5, r24	; 0x05
    2638:	0f c0       	rjmp	.+30     	; 0x2658 <LCD_movecursor+0x108>
    263a:	88 ec       	ldi	r24, 0xC8	; 200
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	9c 83       	std	Y+4, r25	; 0x04
    2640:	8b 83       	std	Y+3, r24	; 0x03
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	9c 81       	ldd	r25, Y+4	; 0x04
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	f1 f7       	brne	.-4      	; 0x2646 <LCD_movecursor+0xf6>
    264a:	9c 83       	std	Y+4, r25	; 0x04
    264c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264e:	8d 81       	ldd	r24, Y+5	; 0x05
    2650:	9e 81       	ldd	r25, Y+6	; 0x06
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	9e 83       	std	Y+6, r25	; 0x06
    2656:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2658:	8d 81       	ldd	r24, Y+5	; 0x05
    265a:	9e 81       	ldd	r25, Y+6	; 0x06
    265c:	00 97       	sbiw	r24, 0x00	; 0
    265e:	69 f7       	brne	.-38     	; 0x263a <LCD_movecursor+0xea>
    2660:	14 c0       	rjmp	.+40     	; 0x268a <LCD_movecursor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2662:	6f 81       	ldd	r22, Y+7	; 0x07
    2664:	78 85       	ldd	r23, Y+8	; 0x08
    2666:	89 85       	ldd	r24, Y+9	; 0x09
    2668:	9a 85       	ldd	r25, Y+10	; 0x0a
    266a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	9e 83       	std	Y+6, r25	; 0x06
    2674:	8d 83       	std	Y+5, r24	; 0x05
    2676:	8d 81       	ldd	r24, Y+5	; 0x05
    2678:	9e 81       	ldd	r25, Y+6	; 0x06
    267a:	9a 83       	std	Y+2, r25	; 0x02
    267c:	89 83       	std	Y+1, r24	; 0x01
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	9a 81       	ldd	r25, Y+2	; 0x02
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	f1 f7       	brne	.-4      	; 0x2682 <LCD_movecursor+0x132>
    2686:	9a 83       	std	Y+2, r25	; 0x02
    2688:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    268a:	61 96       	adiw	r28, 0x11	; 17
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	de bf       	out	0x3e, r29	; 62
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	cd bf       	out	0x3d, r28	; 61
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	08 95       	ret

0000269c <main>:
#define F_CPU 8000000UL
#include <util/delay.h>
#include "I2C.h"
#include "LCD.h"
int main(void)
{
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	6e 97       	sbiw	r28, 0x1e	; 30
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
	LCD_vInit();
    26b0:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_vInit>
	unsigned char x;
	/*write to the location 0b00000000000*/
	unsigned char counter=0;
    26b4:	1d 8e       	std	Y+29, r1	; 0x1d
	I2C_Master_init(50000);
    26b6:	60 e5       	ldi	r22, 0x50	; 80
    26b8:	73 ec       	ldi	r23, 0xC3	; 195
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	0e 94 15 0b 	call	0x162a	; 0x162a <I2C_Master_init>
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	aa ef       	ldi	r26, 0xFA	; 250
    26c8:	b3 e4       	ldi	r27, 0x43	; 67
    26ca:	89 8f       	std	Y+25, r24	; 0x19
    26cc:	9a 8f       	std	Y+26, r25	; 0x1a
    26ce:	ab 8f       	std	Y+27, r26	; 0x1b
    26d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d2:	69 8d       	ldd	r22, Y+25	; 0x19
    26d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	4a ef       	ldi	r20, 0xFA	; 250
    26e0:	54 e4       	ldi	r21, 0x44	; 68
    26e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	8d 8b       	std	Y+21, r24	; 0x15
    26ec:	9e 8b       	std	Y+22, r25	; 0x16
    26ee:	af 8b       	std	Y+23, r26	; 0x17
    26f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26f2:	6d 89       	ldd	r22, Y+21	; 0x15
    26f4:	7e 89       	ldd	r23, Y+22	; 0x16
    26f6:	8f 89       	ldd	r24, Y+23	; 0x17
    26f8:	98 8d       	ldd	r25, Y+24	; 0x18
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e8       	ldi	r20, 0x80	; 128
    2700:	5f e3       	ldi	r21, 0x3F	; 63
    2702:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2706:	88 23       	and	r24, r24
    2708:	2c f4       	brge	.+10     	; 0x2714 <main+0x78>
		__ticks = 1;
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	9c 8b       	std	Y+20, r25	; 0x14
    2710:	8b 8b       	std	Y+19, r24	; 0x13
    2712:	3f c0       	rjmp	.+126    	; 0x2792 <main+0xf6>
	else if (__tmp > 65535)
    2714:	6d 89       	ldd	r22, Y+21	; 0x15
    2716:	7e 89       	ldd	r23, Y+22	; 0x16
    2718:	8f 89       	ldd	r24, Y+23	; 0x17
    271a:	98 8d       	ldd	r25, Y+24	; 0x18
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	3f ef       	ldi	r19, 0xFF	; 255
    2720:	4f e7       	ldi	r20, 0x7F	; 127
    2722:	57 e4       	ldi	r21, 0x47	; 71
    2724:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2728:	18 16       	cp	r1, r24
    272a:	4c f5       	brge	.+82     	; 0x277e <main+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272c:	69 8d       	ldd	r22, Y+25	; 0x19
    272e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2730:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2732:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e2       	ldi	r20, 0x20	; 32
    273a:	51 e4       	ldi	r21, 0x41	; 65
    273c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	bc 01       	movw	r22, r24
    2746:	cd 01       	movw	r24, r26
    2748:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	9c 8b       	std	Y+20, r25	; 0x14
    2752:	8b 8b       	std	Y+19, r24	; 0x13
    2754:	0f c0       	rjmp	.+30     	; 0x2774 <main+0xd8>
    2756:	88 ec       	ldi	r24, 0xC8	; 200
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	9a 8b       	std	Y+18, r25	; 0x12
    275c:	89 8b       	std	Y+17, r24	; 0x11
    275e:	89 89       	ldd	r24, Y+17	; 0x11
    2760:	9a 89       	ldd	r25, Y+18	; 0x12
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <main+0xc6>
    2766:	9a 8b       	std	Y+18, r25	; 0x12
    2768:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276a:	8b 89       	ldd	r24, Y+19	; 0x13
    276c:	9c 89       	ldd	r25, Y+20	; 0x14
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	9c 8b       	std	Y+20, r25	; 0x14
    2772:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2774:	8b 89       	ldd	r24, Y+19	; 0x13
    2776:	9c 89       	ldd	r25, Y+20	; 0x14
    2778:	00 97       	sbiw	r24, 0x00	; 0
    277a:	69 f7       	brne	.-38     	; 0x2756 <main+0xba>
    277c:	14 c0       	rjmp	.+40     	; 0x27a6 <main+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    277e:	6d 89       	ldd	r22, Y+21	; 0x15
    2780:	7e 89       	ldd	r23, Y+22	; 0x16
    2782:	8f 89       	ldd	r24, Y+23	; 0x17
    2784:	98 8d       	ldd	r25, Y+24	; 0x18
    2786:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	9c 8b       	std	Y+20, r25	; 0x14
    2790:	8b 8b       	std	Y+19, r24	; 0x13
    2792:	8b 89       	ldd	r24, Y+19	; 0x13
    2794:	9c 89       	ldd	r25, Y+20	; 0x14
    2796:	98 8b       	std	Y+16, r25	; 0x10
    2798:	8f 87       	std	Y+15, r24	; 0x0f
    279a:	8f 85       	ldd	r24, Y+15	; 0x0f
    279c:	98 89       	ldd	r25, Y+16	; 0x10
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	f1 f7       	brne	.-4      	; 0x279e <main+0x102>
    27a2:	98 8b       	std	Y+16, r25	; 0x10
    27a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	I2C_start(); // transmit start condition
    27a6:	0e 94 46 0b 	call	0x168c	; 0x168c <I2C_start>
	I2C_write_address(0b10100000); // transmit device address and Write
    27aa:	80 ea       	ldi	r24, 0xA0	; 160
    27ac:	0e 94 86 0b 	call	0x170c	; 0x170c <I2C_write_address>
	I2C_write_data(0b00000000); // transmit word address
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <I2C_write_data>
	I2C_write_data(0x32); // transmit data
    27b6:	82 e3       	ldi	r24, 0x32	; 50
    27b8:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <I2C_write_data>
	I2C_stop(); // transmit stop condition
    27bc:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <I2C_stop>
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	a8 e4       	ldi	r26, 0x48	; 72
    27c6:	b3 e4       	ldi	r27, 0x43	; 67
    27c8:	8b 87       	std	Y+11, r24	; 0x0b
    27ca:	9c 87       	std	Y+12, r25	; 0x0c
    27cc:	ad 87       	std	Y+13, r26	; 0x0d
    27ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	4a ef       	ldi	r20, 0xFA	; 250
    27de:	54 e4       	ldi	r21, 0x44	; 68
    27e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	8f 83       	std	Y+7, r24	; 0x07
    27ea:	98 87       	std	Y+8, r25	; 0x08
    27ec:	a9 87       	std	Y+9, r26	; 0x09
    27ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27f0:	6f 81       	ldd	r22, Y+7	; 0x07
    27f2:	78 85       	ldd	r23, Y+8	; 0x08
    27f4:	89 85       	ldd	r24, Y+9	; 0x09
    27f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e8       	ldi	r20, 0x80	; 128
    27fe:	5f e3       	ldi	r21, 0x3F	; 63
    2800:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2804:	88 23       	and	r24, r24
    2806:	2c f4       	brge	.+10     	; 0x2812 <main+0x176>
		__ticks = 1;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	9e 83       	std	Y+6, r25	; 0x06
    280e:	8d 83       	std	Y+5, r24	; 0x05
    2810:	3f c0       	rjmp	.+126    	; 0x2890 <main+0x1f4>
	else if (__tmp > 65535)
    2812:	6f 81       	ldd	r22, Y+7	; 0x07
    2814:	78 85       	ldd	r23, Y+8	; 0x08
    2816:	89 85       	ldd	r24, Y+9	; 0x09
    2818:	9a 85       	ldd	r25, Y+10	; 0x0a
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	3f ef       	ldi	r19, 0xFF	; 255
    281e:	4f e7       	ldi	r20, 0x7F	; 127
    2820:	57 e4       	ldi	r21, 0x47	; 71
    2822:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2826:	18 16       	cp	r1, r24
    2828:	4c f5       	brge	.+82     	; 0x287c <main+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282a:	6b 85       	ldd	r22, Y+11	; 0x0b
    282c:	7c 85       	ldd	r23, Y+12	; 0x0c
    282e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2830:	9e 85       	ldd	r25, Y+14	; 0x0e
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	40 e2       	ldi	r20, 0x20	; 32
    2838:	51 e4       	ldi	r21, 0x41	; 65
    283a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	bc 01       	movw	r22, r24
    2844:	cd 01       	movw	r24, r26
    2846:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	9e 83       	std	Y+6, r25	; 0x06
    2850:	8d 83       	std	Y+5, r24	; 0x05
    2852:	0f c0       	rjmp	.+30     	; 0x2872 <main+0x1d6>
    2854:	88 ec       	ldi	r24, 0xC8	; 200
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	9c 83       	std	Y+4, r25	; 0x04
    285a:	8b 83       	std	Y+3, r24	; 0x03
    285c:	8b 81       	ldd	r24, Y+3	; 0x03
    285e:	9c 81       	ldd	r25, Y+4	; 0x04
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	f1 f7       	brne	.-4      	; 0x2860 <main+0x1c4>
    2864:	9c 83       	std	Y+4, r25	; 0x04
    2866:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2868:	8d 81       	ldd	r24, Y+5	; 0x05
    286a:	9e 81       	ldd	r25, Y+6	; 0x06
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	9e 83       	std	Y+6, r25	; 0x06
    2870:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2872:	8d 81       	ldd	r24, Y+5	; 0x05
    2874:	9e 81       	ldd	r25, Y+6	; 0x06
    2876:	00 97       	sbiw	r24, 0x00	; 0
    2878:	69 f7       	brne	.-38     	; 0x2854 <main+0x1b8>
    287a:	14 c0       	rjmp	.+40     	; 0x28a4 <main+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    287c:	6f 81       	ldd	r22, Y+7	; 0x07
    287e:	78 85       	ldd	r23, Y+8	; 0x08
    2880:	89 85       	ldd	r24, Y+9	; 0x09
    2882:	9a 85       	ldd	r25, Y+10	; 0x0a
    2884:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	9e 83       	std	Y+6, r25	; 0x06
    288e:	8d 83       	std	Y+5, r24	; 0x05
    2890:	8d 81       	ldd	r24, Y+5	; 0x05
    2892:	9e 81       	ldd	r25, Y+6	; 0x06
    2894:	9a 83       	std	Y+2, r25	; 0x02
    2896:	89 83       	std	Y+1, r24	; 0x01
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	9a 81       	ldd	r25, Y+2	; 0x02
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	f1 f7       	brne	.-4      	; 0x289c <main+0x200>
    28a0:	9a 83       	std	Y+2, r25	; 0x02
    28a2:	89 83       	std	Y+1, r24	; 0x01
	
	/*read from the location 0b00000000000*/
	_delay_ms(200);
	I2C_start(); // transmit start condition
    28a4:	0e 94 46 0b 	call	0x168c	; 0x168c <I2C_start>
	I2C_write_address(0b10100000); // transmit device address and Write
    28a8:	80 ea       	ldi	r24, 0xA0	; 160
    28aa:	0e 94 86 0b 	call	0x170c	; 0x170c <I2C_write_address>
	I2C_write_data(0b00000000); // transmit word address
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <I2C_write_data>
	I2C_repeated_start(); // transmit repeated start condition
    28b4:	0e 94 66 0b 	call	0x16cc	; 0x16cc <I2C_repeated_start>
	I2C_write_address_and_read(0b10100001); // transmit device address and read
    28b8:	81 ea       	ldi	r24, 0xA1	; 161
    28ba:	0e 94 ad 0b 	call	0x175a	; 0x175a <I2C_write_address_and_read>
	x=I2C_read_with_NACK();
    28be:	0e 94 06 0c 	call	0x180c	; 0x180c <I2C_read_with_NACK>
    28c2:	8e 8f       	std	Y+30, r24	; 0x1e
	I2C_stop();
    28c4:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <I2C_stop>
	LCD_vSend_char(x);
    28c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28ca:	0e 94 64 11 	call	0x22c8	; 0x22c8 <LCD_vSend_char>
    28ce:	ff cf       	rjmp	.-2      	; 0x28ce <main+0x232>

000028d0 <__udivmodsi4>:
    28d0:	a1 e2       	ldi	r26, 0x21	; 33
    28d2:	1a 2e       	mov	r1, r26
    28d4:	aa 1b       	sub	r26, r26
    28d6:	bb 1b       	sub	r27, r27
    28d8:	fd 01       	movw	r30, r26
    28da:	0d c0       	rjmp	.+26     	; 0x28f6 <__udivmodsi4_ep>

000028dc <__udivmodsi4_loop>:
    28dc:	aa 1f       	adc	r26, r26
    28de:	bb 1f       	adc	r27, r27
    28e0:	ee 1f       	adc	r30, r30
    28e2:	ff 1f       	adc	r31, r31
    28e4:	a2 17       	cp	r26, r18
    28e6:	b3 07       	cpc	r27, r19
    28e8:	e4 07       	cpc	r30, r20
    28ea:	f5 07       	cpc	r31, r21
    28ec:	20 f0       	brcs	.+8      	; 0x28f6 <__udivmodsi4_ep>
    28ee:	a2 1b       	sub	r26, r18
    28f0:	b3 0b       	sbc	r27, r19
    28f2:	e4 0b       	sbc	r30, r20
    28f4:	f5 0b       	sbc	r31, r21

000028f6 <__udivmodsi4_ep>:
    28f6:	66 1f       	adc	r22, r22
    28f8:	77 1f       	adc	r23, r23
    28fa:	88 1f       	adc	r24, r24
    28fc:	99 1f       	adc	r25, r25
    28fe:	1a 94       	dec	r1
    2900:	69 f7       	brne	.-38     	; 0x28dc <__udivmodsi4_loop>
    2902:	60 95       	com	r22
    2904:	70 95       	com	r23
    2906:	80 95       	com	r24
    2908:	90 95       	com	r25
    290a:	9b 01       	movw	r18, r22
    290c:	ac 01       	movw	r20, r24
    290e:	bd 01       	movw	r22, r26
    2910:	cf 01       	movw	r24, r30
    2912:	08 95       	ret

00002914 <__prologue_saves__>:
    2914:	2f 92       	push	r2
    2916:	3f 92       	push	r3
    2918:	4f 92       	push	r4
    291a:	5f 92       	push	r5
    291c:	6f 92       	push	r6
    291e:	7f 92       	push	r7
    2920:	8f 92       	push	r8
    2922:	9f 92       	push	r9
    2924:	af 92       	push	r10
    2926:	bf 92       	push	r11
    2928:	cf 92       	push	r12
    292a:	df 92       	push	r13
    292c:	ef 92       	push	r14
    292e:	ff 92       	push	r15
    2930:	0f 93       	push	r16
    2932:	1f 93       	push	r17
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	ca 1b       	sub	r28, r26
    293e:	db 0b       	sbc	r29, r27
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	cd bf       	out	0x3d, r28	; 61
    294a:	09 94       	ijmp

0000294c <__epilogue_restores__>:
    294c:	2a 88       	ldd	r2, Y+18	; 0x12
    294e:	39 88       	ldd	r3, Y+17	; 0x11
    2950:	48 88       	ldd	r4, Y+16	; 0x10
    2952:	5f 84       	ldd	r5, Y+15	; 0x0f
    2954:	6e 84       	ldd	r6, Y+14	; 0x0e
    2956:	7d 84       	ldd	r7, Y+13	; 0x0d
    2958:	8c 84       	ldd	r8, Y+12	; 0x0c
    295a:	9b 84       	ldd	r9, Y+11	; 0x0b
    295c:	aa 84       	ldd	r10, Y+10	; 0x0a
    295e:	b9 84       	ldd	r11, Y+9	; 0x09
    2960:	c8 84       	ldd	r12, Y+8	; 0x08
    2962:	df 80       	ldd	r13, Y+7	; 0x07
    2964:	ee 80       	ldd	r14, Y+6	; 0x06
    2966:	fd 80       	ldd	r15, Y+5	; 0x05
    2968:	0c 81       	ldd	r16, Y+4	; 0x04
    296a:	1b 81       	ldd	r17, Y+3	; 0x03
    296c:	aa 81       	ldd	r26, Y+2	; 0x02
    296e:	b9 81       	ldd	r27, Y+1	; 0x01
    2970:	ce 0f       	add	r28, r30
    2972:	d1 1d       	adc	r29, r1
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	f8 94       	cli
    2978:	de bf       	out	0x3e, r29	; 62
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	cd bf       	out	0x3d, r28	; 61
    297e:	ed 01       	movw	r28, r26
    2980:	08 95       	ret

00002982 <_exit>:
    2982:	f8 94       	cli

00002984 <__stop_program>:
    2984:	ff cf       	rjmp	.-2      	; 0x2984 <__stop_program>
