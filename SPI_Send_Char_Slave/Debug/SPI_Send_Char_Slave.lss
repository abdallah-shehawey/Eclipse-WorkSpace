
SPI_Send_Char_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00003a02  00003a96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800168  00800168  00003b9e  2**0
                  ALLOC
  3 .stab         00002838  00000000  00000000  00003ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f8f  00000000  00000000  000063d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  00007367  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000277  00000000  00000000  00007587  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002953  00000000  00000000  000077fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016b7  00000000  00000000  0000a151  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001570  00000000  00000000  0000b808  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  0000cd78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000036b  00000000  00000000  0000cfb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bf0  00000000  00000000  0000d323  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000df13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 ed 1b 	jmp	0x37da	; 0x37da <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a3 37       	cpi	r26, 0x73	; 115
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e0       	ldi	r30, 0x02	; 2
      78:	fa e3       	ldi	r31, 0x3A	; 58
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <main>
      8a:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
      be:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__fixsfdi>:
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	7b 01       	movw	r14, r22
      f4:	8c 01       	movw	r16, r24
      f6:	20 e0       	ldi	r18, 0x00	; 0
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     102:	88 23       	and	r24, r24
     104:	0c f0       	brlt	.+2      	; 0x108 <__fixsfdi+0x1e>
     106:	5c c0       	rjmp	.+184    	; 0x1c0 <__fixsfdi+0xd6>
     108:	c8 01       	movw	r24, r16
     10a:	b7 01       	movw	r22, r14
     10c:	90 58       	subi	r25, 0x80	; 128
     10e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     112:	21 95       	neg	r18
     114:	e1 e0       	ldi	r30, 0x01	; 1
     116:	12 16       	cp	r1, r18
     118:	08 f0       	brcs	.+2      	; 0x11c <__fixsfdi+0x32>
     11a:	e0 e0       	ldi	r30, 0x00	; 0
     11c:	31 95       	neg	r19
     11e:	f1 e0       	ldi	r31, 0x01	; 1
     120:	13 16       	cp	r1, r19
     122:	08 f0       	brcs	.+2      	; 0x126 <__fixsfdi+0x3c>
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	e3 2e       	mov	r14, r19
     128:	ee 1a       	sub	r14, r30
     12a:	e1 e0       	ldi	r30, 0x01	; 1
     12c:	3e 15       	cp	r19, r14
     12e:	08 f0       	brcs	.+2      	; 0x132 <__fixsfdi+0x48>
     130:	e0 e0       	ldi	r30, 0x00	; 0
     132:	fe 2b       	or	r31, r30
     134:	41 95       	neg	r20
     136:	a1 e0       	ldi	r26, 0x01	; 1
     138:	14 16       	cp	r1, r20
     13a:	08 f0       	brcs	.+2      	; 0x13e <__fixsfdi+0x54>
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	f4 2e       	mov	r15, r20
     140:	ff 1a       	sub	r15, r31
     142:	e1 e0       	ldi	r30, 0x01	; 1
     144:	4f 15       	cp	r20, r15
     146:	08 f0       	brcs	.+2      	; 0x14a <__fixsfdi+0x60>
     148:	e0 e0       	ldi	r30, 0x00	; 0
     14a:	ae 2b       	or	r26, r30
     14c:	51 95       	neg	r21
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	15 16       	cp	r1, r21
     152:	08 f0       	brcs	.+2      	; 0x156 <__fixsfdi+0x6c>
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	05 2f       	mov	r16, r21
     158:	0a 1b       	sub	r16, r26
     15a:	e1 e0       	ldi	r30, 0x01	; 1
     15c:	50 17       	cp	r21, r16
     15e:	08 f0       	brcs	.+2      	; 0x162 <__fixsfdi+0x78>
     160:	e0 e0       	ldi	r30, 0x00	; 0
     162:	fe 2b       	or	r31, r30
     164:	61 95       	neg	r22
     166:	a1 e0       	ldi	r26, 0x01	; 1
     168:	16 16       	cp	r1, r22
     16a:	08 f0       	brcs	.+2      	; 0x16e <__fixsfdi+0x84>
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	16 2f       	mov	r17, r22
     170:	1f 1b       	sub	r17, r31
     172:	e1 e0       	ldi	r30, 0x01	; 1
     174:	61 17       	cp	r22, r17
     176:	08 f0       	brcs	.+2      	; 0x17a <__fixsfdi+0x90>
     178:	e0 e0       	ldi	r30, 0x00	; 0
     17a:	ae 2b       	or	r26, r30
     17c:	71 95       	neg	r23
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	17 16       	cp	r1, r23
     182:	08 f0       	brcs	.+2      	; 0x186 <__fixsfdi+0x9c>
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	b7 2f       	mov	r27, r23
     188:	ba 1b       	sub	r27, r26
     18a:	e1 e0       	ldi	r30, 0x01	; 1
     18c:	7b 17       	cp	r23, r27
     18e:	08 f0       	brcs	.+2      	; 0x192 <__fixsfdi+0xa8>
     190:	e0 e0       	ldi	r30, 0x00	; 0
     192:	fe 2b       	or	r31, r30
     194:	81 95       	neg	r24
     196:	a1 e0       	ldi	r26, 0x01	; 1
     198:	18 16       	cp	r1, r24
     19a:	08 f0       	brcs	.+2      	; 0x19e <__fixsfdi+0xb4>
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	38 2f       	mov	r19, r24
     1a0:	3f 1b       	sub	r19, r31
     1a2:	f3 2f       	mov	r31, r19
     1a4:	e1 e0       	ldi	r30, 0x01	; 1
     1a6:	83 17       	cp	r24, r19
     1a8:	08 f0       	brcs	.+2      	; 0x1ac <__fixsfdi+0xc2>
     1aa:	e0 e0       	ldi	r30, 0x00	; 0
     1ac:	ae 2b       	or	r26, r30
     1ae:	91 95       	neg	r25
     1b0:	3e 2d       	mov	r19, r14
     1b2:	4f 2d       	mov	r20, r15
     1b4:	50 2f       	mov	r21, r16
     1b6:	61 2f       	mov	r22, r17
     1b8:	7b 2f       	mov	r23, r27
     1ba:	8f 2f       	mov	r24, r31
     1bc:	9a 1b       	sub	r25, r26
     1be:	04 c0       	rjmp	.+8      	; 0x1c8 <__fixsfdi+0xde>
     1c0:	c8 01       	movw	r24, r16
     1c2:	b7 01       	movw	r22, r14
     1c4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	ff 90       	pop	r15
     1ce:	ef 90       	pop	r14
     1d0:	08 95       	ret

000001d2 <__fixunssfdi>:
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	ef ee       	ldi	r30, 0xEF	; 239
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__prologue_saves__>
     1de:	7b 01       	movw	r14, r22
     1e0:	8c 01       	movw	r16, r24
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 e8       	ldi	r20, 0x80	; 128
     1e8:	5f e3       	ldi	r21, 0x3F	; 63
     1ea:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     1ee:	88 23       	and	r24, r24
     1f0:	4c f4       	brge	.+18     	; 0x204 <__fixunssfdi+0x32>
     1f2:	aa 24       	eor	r10, r10
     1f4:	bb 24       	eor	r11, r11
     1f6:	cc 24       	eor	r12, r12
     1f8:	dd 24       	eor	r13, r13
     1fa:	ee 24       	eor	r14, r14
     1fc:	ff 24       	eor	r15, r15
     1fe:	00 e0       	ldi	r16, 0x00	; 0
     200:	10 e0       	ldi	r17, 0x00	; 0
     202:	86 c0       	rjmp	.+268    	; 0x310 <__fixunssfdi+0x13e>
     204:	c8 01       	movw	r24, r16
     206:	b7 01       	movw	r22, r14
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	40 e8       	ldi	r20, 0x80	; 128
     20e:	5f e4       	ldi	r21, 0x4F	; 79
     210:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     214:	88 23       	and	r24, r24
     216:	54 f4       	brge	.+20     	; 0x22c <__fixunssfdi+0x5a>
     218:	c8 01       	movw	r24, r16
     21a:	b7 01       	movw	r22, r14
     21c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     220:	5b 01       	movw	r10, r22
     222:	6c 01       	movw	r12, r24
     224:	ee 24       	eor	r14, r14
     226:	ff 24       	eor	r15, r15
     228:	87 01       	movw	r16, r14
     22a:	72 c0       	rjmp	.+228    	; 0x310 <__fixunssfdi+0x13e>
     22c:	c8 01       	movw	r24, r16
     22e:	b7 01       	movw	r22, r14
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	40 e8       	ldi	r20, 0x80	; 128
     236:	5f e5       	ldi	r21, 0x5F	; 95
     238:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     23c:	87 fd       	sbrc	r24, 7
     23e:	0f c0       	rjmp	.+30     	; 0x25e <__fixunssfdi+0x8c>
     240:	aa 24       	eor	r10, r10
     242:	aa 94       	dec	r10
     244:	bb 24       	eor	r11, r11
     246:	ba 94       	dec	r11
     248:	cc 24       	eor	r12, r12
     24a:	ca 94       	dec	r12
     24c:	dd 24       	eor	r13, r13
     24e:	da 94       	dec	r13
     250:	ee 24       	eor	r14, r14
     252:	ea 94       	dec	r14
     254:	ff 24       	eor	r15, r15
     256:	fa 94       	dec	r15
     258:	0f ef       	ldi	r16, 0xFF	; 255
     25a:	1f ef       	ldi	r17, 0xFF	; 255
     25c:	59 c0       	rjmp	.+178    	; 0x310 <__fixunssfdi+0x13e>
     25e:	c8 01       	movw	r24, r16
     260:	b7 01       	movw	r22, r14
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e8       	ldi	r20, 0x80	; 128
     268:	5f e2       	ldi	r21, 0x2F	; 47
     26a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     26e:	7b 01       	movw	r14, r22
     270:	8c 01       	movw	r16, r24
     272:	22 24       	eor	r2, r2
     274:	33 24       	eor	r3, r3
     276:	21 01       	movw	r4, r2
     278:	90 e1       	ldi	r25, 0x10	; 16
     27a:	a9 2e       	mov	r10, r25
     27c:	b1 2c       	mov	r11, r1
     27e:	c1 2c       	mov	r12, r1
     280:	d1 2c       	mov	r13, r1
     282:	c0 e0       	ldi	r28, 0x00	; 0
     284:	d0 e0       	ldi	r29, 0x00	; 0
     286:	61 e0       	ldi	r22, 0x01	; 1
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0a 2c       	mov	r0, r10
     290:	04 c0       	rjmp	.+8      	; 0x29a <__fixunssfdi+0xc8>
     292:	66 0f       	add	r22, r22
     294:	77 1f       	adc	r23, r23
     296:	88 1f       	adc	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	0a 94       	dec	r0
     29c:	d2 f7       	brpl	.-12     	; 0x292 <__fixunssfdi+0xc0>
     29e:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
     2a2:	3b 01       	movw	r6, r22
     2a4:	4c 01       	movw	r8, r24
     2a6:	c8 01       	movw	r24, r16
     2a8:	b7 01       	movw	r22, r14
     2aa:	a4 01       	movw	r20, r8
     2ac:	93 01       	movw	r18, r6
     2ae:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
     2b2:	88 23       	and	r24, r24
     2b4:	64 f0       	brlt	.+24     	; 0x2ce <__fixunssfdi+0xfc>
     2b6:	2a 28       	or	r2, r10
     2b8:	3b 28       	or	r3, r11
     2ba:	4c 28       	or	r4, r12
     2bc:	5d 28       	or	r5, r13
     2be:	c8 01       	movw	r24, r16
     2c0:	b7 01       	movw	r22, r14
     2c2:	a4 01       	movw	r20, r8
     2c4:	93 01       	movw	r18, r6
     2c6:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
     2ca:	7b 01       	movw	r14, r22
     2cc:	8c 01       	movw	r16, r24
     2ce:	d6 94       	lsr	r13
     2d0:	c7 94       	ror	r12
     2d2:	b7 94       	ror	r11
     2d4:	a7 94       	ror	r10
     2d6:	21 96       	adiw	r28, 0x01	; 1
     2d8:	c5 30       	cpi	r28, 0x05	; 5
     2da:	d1 05       	cpc	r29, r1
     2dc:	a1 f6       	brne	.-88     	; 0x286 <__fixunssfdi+0xb4>
     2de:	c8 01       	movw	r24, r16
     2e0:	b7 01       	movw	r22, r14
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	5f e4       	ldi	r21, 0x4F	; 79
     2ea:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     2ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     2f2:	5b 01       	movw	r10, r22
     2f4:	6c 01       	movw	r12, r24
     2f6:	9b 01       	movw	r18, r22
     2f8:	a6 01       	movw	r20, r12
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	02 2d       	mov	r16, r2
     304:	0e 94 9c 06 	call	0xd38	; 0xd38 <__ashldi3>
     308:	59 01       	movw	r10, r18
     30a:	6a 01       	movw	r12, r20
     30c:	7b 01       	movw	r14, r22
     30e:	8c 01       	movw	r16, r24
     310:	95 01       	movw	r18, r10
     312:	a6 01       	movw	r20, r12
     314:	b7 01       	movw	r22, r14
     316:	c8 01       	movw	r24, r16
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	e2 e1       	ldi	r30, 0x12	; 18
     31e:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__epilogue_restores__>

00000322 <_fpadd_parts>:
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	e7 e9       	ldi	r30, 0x97	; 151
     328:	f1 e0       	ldi	r31, 0x01	; 1
     32a:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__prologue_saves__>
     32e:	dc 01       	movw	r26, r24
     330:	2b 01       	movw	r4, r22
     332:	fa 01       	movw	r30, r20
     334:	9c 91       	ld	r25, X
     336:	92 30       	cpi	r25, 0x02	; 2
     338:	08 f4       	brcc	.+2      	; 0x33c <_fpadd_parts+0x1a>
     33a:	39 c1       	rjmp	.+626    	; 0x5ae <_fpadd_parts+0x28c>
     33c:	eb 01       	movw	r28, r22
     33e:	88 81       	ld	r24, Y
     340:	82 30       	cpi	r24, 0x02	; 2
     342:	08 f4       	brcc	.+2      	; 0x346 <_fpadd_parts+0x24>
     344:	33 c1       	rjmp	.+614    	; 0x5ac <_fpadd_parts+0x28a>
     346:	94 30       	cpi	r25, 0x04	; 4
     348:	69 f4       	brne	.+26     	; 0x364 <_fpadd_parts+0x42>
     34a:	84 30       	cpi	r24, 0x04	; 4
     34c:	09 f0       	breq	.+2      	; 0x350 <_fpadd_parts+0x2e>
     34e:	2f c1       	rjmp	.+606    	; 0x5ae <_fpadd_parts+0x28c>
     350:	11 96       	adiw	r26, 0x01	; 1
     352:	9c 91       	ld	r25, X
     354:	11 97       	sbiw	r26, 0x01	; 1
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	98 17       	cp	r25, r24
     35a:	09 f4       	brne	.+2      	; 0x35e <_fpadd_parts+0x3c>
     35c:	28 c1       	rjmp	.+592    	; 0x5ae <_fpadd_parts+0x28c>
     35e:	a0 e6       	ldi	r26, 0x60	; 96
     360:	b0 e0       	ldi	r27, 0x00	; 0
     362:	25 c1       	rjmp	.+586    	; 0x5ae <_fpadd_parts+0x28c>
     364:	84 30       	cpi	r24, 0x04	; 4
     366:	09 f4       	brne	.+2      	; 0x36a <_fpadd_parts+0x48>
     368:	21 c1       	rjmp	.+578    	; 0x5ac <_fpadd_parts+0x28a>
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	a9 f4       	brne	.+42     	; 0x398 <_fpadd_parts+0x76>
     36e:	92 30       	cpi	r25, 0x02	; 2
     370:	09 f0       	breq	.+2      	; 0x374 <_fpadd_parts+0x52>
     372:	1d c1       	rjmp	.+570    	; 0x5ae <_fpadd_parts+0x28c>
     374:	9a 01       	movw	r18, r20
     376:	ad 01       	movw	r20, r26
     378:	88 e0       	ldi	r24, 0x08	; 8
     37a:	ea 01       	movw	r28, r20
     37c:	09 90       	ld	r0, Y+
     37e:	ae 01       	movw	r20, r28
     380:	e9 01       	movw	r28, r18
     382:	09 92       	st	Y+, r0
     384:	9e 01       	movw	r18, r28
     386:	81 50       	subi	r24, 0x01	; 1
     388:	c1 f7       	brne	.-16     	; 0x37a <_fpadd_parts+0x58>
     38a:	e2 01       	movw	r28, r4
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	11 96       	adiw	r26, 0x01	; 1
     390:	9c 91       	ld	r25, X
     392:	89 23       	and	r24, r25
     394:	81 83       	std	Z+1, r24	; 0x01
     396:	08 c1       	rjmp	.+528    	; 0x5a8 <_fpadd_parts+0x286>
     398:	92 30       	cpi	r25, 0x02	; 2
     39a:	09 f4       	brne	.+2      	; 0x39e <_fpadd_parts+0x7c>
     39c:	07 c1       	rjmp	.+526    	; 0x5ac <_fpadd_parts+0x28a>
     39e:	12 96       	adiw	r26, 0x02	; 2
     3a0:	2d 90       	ld	r2, X+
     3a2:	3c 90       	ld	r3, X
     3a4:	13 97       	sbiw	r26, 0x03	; 3
     3a6:	eb 01       	movw	r28, r22
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	9b 81       	ldd	r25, Y+3	; 0x03
     3ac:	14 96       	adiw	r26, 0x04	; 4
     3ae:	ad 90       	ld	r10, X+
     3b0:	bd 90       	ld	r11, X+
     3b2:	cd 90       	ld	r12, X+
     3b4:	dc 90       	ld	r13, X
     3b6:	17 97       	sbiw	r26, 0x07	; 7
     3b8:	ec 80       	ldd	r14, Y+4	; 0x04
     3ba:	fd 80       	ldd	r15, Y+5	; 0x05
     3bc:	0e 81       	ldd	r16, Y+6	; 0x06
     3be:	1f 81       	ldd	r17, Y+7	; 0x07
     3c0:	91 01       	movw	r18, r2
     3c2:	28 1b       	sub	r18, r24
     3c4:	39 0b       	sbc	r19, r25
     3c6:	b9 01       	movw	r22, r18
     3c8:	37 ff       	sbrs	r19, 7
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <_fpadd_parts+0xb2>
     3cc:	66 27       	eor	r22, r22
     3ce:	77 27       	eor	r23, r23
     3d0:	62 1b       	sub	r22, r18
     3d2:	73 0b       	sbc	r23, r19
     3d4:	60 32       	cpi	r22, 0x20	; 32
     3d6:	71 05       	cpc	r23, r1
     3d8:	0c f0       	brlt	.+2      	; 0x3dc <_fpadd_parts+0xba>
     3da:	61 c0       	rjmp	.+194    	; 0x49e <_fpadd_parts+0x17c>
     3dc:	12 16       	cp	r1, r18
     3de:	13 06       	cpc	r1, r19
     3e0:	6c f5       	brge	.+90     	; 0x43c <_fpadd_parts+0x11a>
     3e2:	37 01       	movw	r6, r14
     3e4:	48 01       	movw	r8, r16
     3e6:	06 2e       	mov	r0, r22
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <_fpadd_parts+0xd0>
     3ea:	96 94       	lsr	r9
     3ec:	87 94       	ror	r8
     3ee:	77 94       	ror	r7
     3f0:	67 94       	ror	r6
     3f2:	0a 94       	dec	r0
     3f4:	d2 f7       	brpl	.-12     	; 0x3ea <_fpadd_parts+0xc8>
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <_fpadd_parts+0xe6>
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	44 1f       	adc	r20, r20
     406:	55 1f       	adc	r21, r21
     408:	6a 95       	dec	r22
     40a:	d2 f7       	brpl	.-12     	; 0x400 <_fpadd_parts+0xde>
     40c:	21 50       	subi	r18, 0x01	; 1
     40e:	30 40       	sbci	r19, 0x00	; 0
     410:	40 40       	sbci	r20, 0x00	; 0
     412:	50 40       	sbci	r21, 0x00	; 0
     414:	2e 21       	and	r18, r14
     416:	3f 21       	and	r19, r15
     418:	40 23       	and	r20, r16
     41a:	51 23       	and	r21, r17
     41c:	21 15       	cp	r18, r1
     41e:	31 05       	cpc	r19, r1
     420:	41 05       	cpc	r20, r1
     422:	51 05       	cpc	r21, r1
     424:	21 f0       	breq	.+8      	; 0x42e <_fpadd_parts+0x10c>
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	79 01       	movw	r14, r18
     430:	8a 01       	movw	r16, r20
     432:	e6 28       	or	r14, r6
     434:	f7 28       	or	r15, r7
     436:	08 29       	or	r16, r8
     438:	19 29       	or	r17, r9
     43a:	3c c0       	rjmp	.+120    	; 0x4b4 <_fpadd_parts+0x192>
     43c:	23 2b       	or	r18, r19
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <_fpadd_parts+0x192>
     440:	26 0e       	add	r2, r22
     442:	37 1e       	adc	r3, r23
     444:	35 01       	movw	r6, r10
     446:	46 01       	movw	r8, r12
     448:	06 2e       	mov	r0, r22
     44a:	04 c0       	rjmp	.+8      	; 0x454 <_fpadd_parts+0x132>
     44c:	96 94       	lsr	r9
     44e:	87 94       	ror	r8
     450:	77 94       	ror	r7
     452:	67 94       	ror	r6
     454:	0a 94       	dec	r0
     456:	d2 f7       	brpl	.-12     	; 0x44c <_fpadd_parts+0x12a>
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	04 c0       	rjmp	.+8      	; 0x46a <_fpadd_parts+0x148>
     462:	22 0f       	add	r18, r18
     464:	33 1f       	adc	r19, r19
     466:	44 1f       	adc	r20, r20
     468:	55 1f       	adc	r21, r21
     46a:	6a 95       	dec	r22
     46c:	d2 f7       	brpl	.-12     	; 0x462 <_fpadd_parts+0x140>
     46e:	21 50       	subi	r18, 0x01	; 1
     470:	30 40       	sbci	r19, 0x00	; 0
     472:	40 40       	sbci	r20, 0x00	; 0
     474:	50 40       	sbci	r21, 0x00	; 0
     476:	2a 21       	and	r18, r10
     478:	3b 21       	and	r19, r11
     47a:	4c 21       	and	r20, r12
     47c:	5d 21       	and	r21, r13
     47e:	21 15       	cp	r18, r1
     480:	31 05       	cpc	r19, r1
     482:	41 05       	cpc	r20, r1
     484:	51 05       	cpc	r21, r1
     486:	21 f0       	breq	.+8      	; 0x490 <_fpadd_parts+0x16e>
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	59 01       	movw	r10, r18
     492:	6a 01       	movw	r12, r20
     494:	a6 28       	or	r10, r6
     496:	b7 28       	or	r11, r7
     498:	c8 28       	or	r12, r8
     49a:	d9 28       	or	r13, r9
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <_fpadd_parts+0x192>
     49e:	82 15       	cp	r24, r2
     4a0:	93 05       	cpc	r25, r3
     4a2:	2c f0       	brlt	.+10     	; 0x4ae <_fpadd_parts+0x18c>
     4a4:	1c 01       	movw	r2, r24
     4a6:	aa 24       	eor	r10, r10
     4a8:	bb 24       	eor	r11, r11
     4aa:	65 01       	movw	r12, r10
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <_fpadd_parts+0x192>
     4ae:	ee 24       	eor	r14, r14
     4b0:	ff 24       	eor	r15, r15
     4b2:	87 01       	movw	r16, r14
     4b4:	11 96       	adiw	r26, 0x01	; 1
     4b6:	9c 91       	ld	r25, X
     4b8:	d2 01       	movw	r26, r4
     4ba:	11 96       	adiw	r26, 0x01	; 1
     4bc:	8c 91       	ld	r24, X
     4be:	98 17       	cp	r25, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <_fpadd_parts+0x1a2>
     4c2:	45 c0       	rjmp	.+138    	; 0x54e <_fpadd_parts+0x22c>
     4c4:	99 23       	and	r25, r25
     4c6:	39 f0       	breq	.+14     	; 0x4d6 <_fpadd_parts+0x1b4>
     4c8:	a8 01       	movw	r20, r16
     4ca:	97 01       	movw	r18, r14
     4cc:	2a 19       	sub	r18, r10
     4ce:	3b 09       	sbc	r19, r11
     4d0:	4c 09       	sbc	r20, r12
     4d2:	5d 09       	sbc	r21, r13
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <_fpadd_parts+0x1c0>
     4d6:	a6 01       	movw	r20, r12
     4d8:	95 01       	movw	r18, r10
     4da:	2e 19       	sub	r18, r14
     4dc:	3f 09       	sbc	r19, r15
     4de:	40 0b       	sbc	r20, r16
     4e0:	51 0b       	sbc	r21, r17
     4e2:	57 fd       	sbrc	r21, 7
     4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <_fpadd_parts+0x1d4>
     4e6:	11 82       	std	Z+1, r1	; 0x01
     4e8:	33 82       	std	Z+3, r3	; 0x03
     4ea:	22 82       	std	Z+2, r2	; 0x02
     4ec:	24 83       	std	Z+4, r18	; 0x04
     4ee:	35 83       	std	Z+5, r19	; 0x05
     4f0:	46 83       	std	Z+6, r20	; 0x06
     4f2:	57 83       	std	Z+7, r21	; 0x07
     4f4:	1d c0       	rjmp	.+58     	; 0x530 <_fpadd_parts+0x20e>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	81 83       	std	Z+1, r24	; 0x01
     4fa:	33 82       	std	Z+3, r3	; 0x03
     4fc:	22 82       	std	Z+2, r2	; 0x02
     4fe:	88 27       	eor	r24, r24
     500:	99 27       	eor	r25, r25
     502:	dc 01       	movw	r26, r24
     504:	82 1b       	sub	r24, r18
     506:	93 0b       	sbc	r25, r19
     508:	a4 0b       	sbc	r26, r20
     50a:	b5 0b       	sbc	r27, r21
     50c:	84 83       	std	Z+4, r24	; 0x04
     50e:	95 83       	std	Z+5, r25	; 0x05
     510:	a6 83       	std	Z+6, r26	; 0x06
     512:	b7 83       	std	Z+7, r27	; 0x07
     514:	0d c0       	rjmp	.+26     	; 0x530 <_fpadd_parts+0x20e>
     516:	22 0f       	add	r18, r18
     518:	33 1f       	adc	r19, r19
     51a:	44 1f       	adc	r20, r20
     51c:	55 1f       	adc	r21, r21
     51e:	24 83       	std	Z+4, r18	; 0x04
     520:	35 83       	std	Z+5, r19	; 0x05
     522:	46 83       	std	Z+6, r20	; 0x06
     524:	57 83       	std	Z+7, r21	; 0x07
     526:	82 81       	ldd	r24, Z+2	; 0x02
     528:	93 81       	ldd	r25, Z+3	; 0x03
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	93 83       	std	Z+3, r25	; 0x03
     52e:	82 83       	std	Z+2, r24	; 0x02
     530:	24 81       	ldd	r18, Z+4	; 0x04
     532:	35 81       	ldd	r19, Z+5	; 0x05
     534:	46 81       	ldd	r20, Z+6	; 0x06
     536:	57 81       	ldd	r21, Z+7	; 0x07
     538:	da 01       	movw	r26, r20
     53a:	c9 01       	movw	r24, r18
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	a1 09       	sbc	r26, r1
     540:	b1 09       	sbc	r27, r1
     542:	8f 5f       	subi	r24, 0xFF	; 255
     544:	9f 4f       	sbci	r25, 0xFF	; 255
     546:	af 4f       	sbci	r26, 0xFF	; 255
     548:	bf 43       	sbci	r27, 0x3F	; 63
     54a:	28 f3       	brcs	.-54     	; 0x516 <_fpadd_parts+0x1f4>
     54c:	0b c0       	rjmp	.+22     	; 0x564 <_fpadd_parts+0x242>
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	33 82       	std	Z+3, r3	; 0x03
     552:	22 82       	std	Z+2, r2	; 0x02
     554:	ea 0c       	add	r14, r10
     556:	fb 1c       	adc	r15, r11
     558:	0c 1d       	adc	r16, r12
     55a:	1d 1d       	adc	r17, r13
     55c:	e4 82       	std	Z+4, r14	; 0x04
     55e:	f5 82       	std	Z+5, r15	; 0x05
     560:	06 83       	std	Z+6, r16	; 0x06
     562:	17 83       	std	Z+7, r17	; 0x07
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	80 83       	st	Z, r24
     568:	24 81       	ldd	r18, Z+4	; 0x04
     56a:	35 81       	ldd	r19, Z+5	; 0x05
     56c:	46 81       	ldd	r20, Z+6	; 0x06
     56e:	57 81       	ldd	r21, Z+7	; 0x07
     570:	57 ff       	sbrs	r21, 7
     572:	1a c0       	rjmp	.+52     	; 0x5a8 <_fpadd_parts+0x286>
     574:	c9 01       	movw	r24, r18
     576:	aa 27       	eor	r26, r26
     578:	97 fd       	sbrc	r25, 7
     57a:	a0 95       	com	r26
     57c:	ba 2f       	mov	r27, r26
     57e:	81 70       	andi	r24, 0x01	; 1
     580:	90 70       	andi	r25, 0x00	; 0
     582:	a0 70       	andi	r26, 0x00	; 0
     584:	b0 70       	andi	r27, 0x00	; 0
     586:	56 95       	lsr	r21
     588:	47 95       	ror	r20
     58a:	37 95       	ror	r19
     58c:	27 95       	ror	r18
     58e:	82 2b       	or	r24, r18
     590:	93 2b       	or	r25, r19
     592:	a4 2b       	or	r26, r20
     594:	b5 2b       	or	r27, r21
     596:	84 83       	std	Z+4, r24	; 0x04
     598:	95 83       	std	Z+5, r25	; 0x05
     59a:	a6 83       	std	Z+6, r26	; 0x06
     59c:	b7 83       	std	Z+7, r27	; 0x07
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	93 81       	ldd	r25, Z+3	; 0x03
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	93 83       	std	Z+3, r25	; 0x03
     5a6:	82 83       	std	Z+2, r24	; 0x02
     5a8:	df 01       	movw	r26, r30
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <_fpadd_parts+0x28c>
     5ac:	d2 01       	movw	r26, r4
     5ae:	cd 01       	movw	r24, r26
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	e2 e1       	ldi	r30, 0x12	; 18
     5b6:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__epilogue_restores__>

000005ba <__subsf3>:
     5ba:	a0 e2       	ldi	r26, 0x20	; 32
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	e3 ee       	ldi	r30, 0xE3	; 227
     5c0:	f2 e0       	ldi	r31, 0x02	; 2
     5c2:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__prologue_saves__+0x18>
     5c6:	69 83       	std	Y+1, r22	; 0x01
     5c8:	7a 83       	std	Y+2, r23	; 0x02
     5ca:	8b 83       	std	Y+3, r24	; 0x03
     5cc:	9c 83       	std	Y+4, r25	; 0x04
     5ce:	2d 83       	std	Y+5, r18	; 0x05
     5d0:	3e 83       	std	Y+6, r19	; 0x06
     5d2:	4f 83       	std	Y+7, r20	; 0x07
     5d4:	58 87       	std	Y+8, r21	; 0x08
     5d6:	e9 e0       	ldi	r30, 0x09	; 9
     5d8:	ee 2e       	mov	r14, r30
     5da:	f1 2c       	mov	r15, r1
     5dc:	ec 0e       	add	r14, r28
     5de:	fd 1e       	adc	r15, r29
     5e0:	ce 01       	movw	r24, r28
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	b7 01       	movw	r22, r14
     5e6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5ea:	8e 01       	movw	r16, r28
     5ec:	0f 5e       	subi	r16, 0xEF	; 239
     5ee:	1f 4f       	sbci	r17, 0xFF	; 255
     5f0:	ce 01       	movw	r24, r28
     5f2:	05 96       	adiw	r24, 0x05	; 5
     5f4:	b8 01       	movw	r22, r16
     5f6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5fa:	8a 89       	ldd	r24, Y+18	; 0x12
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	89 27       	eor	r24, r25
     600:	8a 8b       	std	Y+18, r24	; 0x12
     602:	c7 01       	movw	r24, r14
     604:	b8 01       	movw	r22, r16
     606:	ae 01       	movw	r20, r28
     608:	47 5e       	subi	r20, 0xE7	; 231
     60a:	5f 4f       	sbci	r21, 0xFF	; 255
     60c:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     610:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     614:	a0 96       	adiw	r28, 0x20	; 32
     616:	e6 e0       	ldi	r30, 0x06	; 6
     618:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <__epilogue_restores__+0x18>

0000061c <__addsf3>:
     61c:	a0 e2       	ldi	r26, 0x20	; 32
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	e4 e1       	ldi	r30, 0x14	; 20
     622:	f3 e0       	ldi	r31, 0x03	; 3
     624:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__prologue_saves__+0x18>
     628:	69 83       	std	Y+1, r22	; 0x01
     62a:	7a 83       	std	Y+2, r23	; 0x02
     62c:	8b 83       	std	Y+3, r24	; 0x03
     62e:	9c 83       	std	Y+4, r25	; 0x04
     630:	2d 83       	std	Y+5, r18	; 0x05
     632:	3e 83       	std	Y+6, r19	; 0x06
     634:	4f 83       	std	Y+7, r20	; 0x07
     636:	58 87       	std	Y+8, r21	; 0x08
     638:	f9 e0       	ldi	r31, 0x09	; 9
     63a:	ef 2e       	mov	r14, r31
     63c:	f1 2c       	mov	r15, r1
     63e:	ec 0e       	add	r14, r28
     640:	fd 1e       	adc	r15, r29
     642:	ce 01       	movw	r24, r28
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	b7 01       	movw	r22, r14
     648:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     64c:	8e 01       	movw	r16, r28
     64e:	0f 5e       	subi	r16, 0xEF	; 239
     650:	1f 4f       	sbci	r17, 0xFF	; 255
     652:	ce 01       	movw	r24, r28
     654:	05 96       	adiw	r24, 0x05	; 5
     656:	b8 01       	movw	r22, r16
     658:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     65c:	c7 01       	movw	r24, r14
     65e:	b8 01       	movw	r22, r16
     660:	ae 01       	movw	r20, r28
     662:	47 5e       	subi	r20, 0xE7	; 231
     664:	5f 4f       	sbci	r21, 0xFF	; 255
     666:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     66a:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     66e:	a0 96       	adiw	r28, 0x20	; 32
     670:	e6 e0       	ldi	r30, 0x06	; 6
     672:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <__epilogue_restores__+0x18>

00000676 <__mulsf3>:
     676:	a0 e2       	ldi	r26, 0x20	; 32
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e1 e4       	ldi	r30, 0x41	; 65
     67c:	f3 e0       	ldi	r31, 0x03	; 3
     67e:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__prologue_saves__>
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	7a 83       	std	Y+2, r23	; 0x02
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	2d 83       	std	Y+5, r18	; 0x05
     68c:	3e 83       	std	Y+6, r19	; 0x06
     68e:	4f 83       	std	Y+7, r20	; 0x07
     690:	58 87       	std	Y+8, r21	; 0x08
     692:	ce 01       	movw	r24, r28
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	be 01       	movw	r22, r28
     698:	67 5f       	subi	r22, 0xF7	; 247
     69a:	7f 4f       	sbci	r23, 0xFF	; 255
     69c:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6a0:	ce 01       	movw	r24, r28
     6a2:	05 96       	adiw	r24, 0x05	; 5
     6a4:	be 01       	movw	r22, r28
     6a6:	6f 5e       	subi	r22, 0xEF	; 239
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255
     6aa:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6ae:	99 85       	ldd	r25, Y+9	; 0x09
     6b0:	92 30       	cpi	r25, 0x02	; 2
     6b2:	88 f0       	brcs	.+34     	; 0x6d6 <__mulsf3+0x60>
     6b4:	89 89       	ldd	r24, Y+17	; 0x11
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	c8 f0       	brcs	.+50     	; 0x6ec <__mulsf3+0x76>
     6ba:	94 30       	cpi	r25, 0x04	; 4
     6bc:	19 f4       	brne	.+6      	; 0x6c4 <__mulsf3+0x4e>
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	51 f4       	brne	.+20     	; 0x6d6 <__mulsf3+0x60>
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <__mulsf3+0x56>
     6c4:	84 30       	cpi	r24, 0x04	; 4
     6c6:	29 f4       	brne	.+10     	; 0x6d2 <__mulsf3+0x5c>
     6c8:	92 30       	cpi	r25, 0x02	; 2
     6ca:	81 f4       	brne	.+32     	; 0x6ec <__mulsf3+0x76>
     6cc:	80 e6       	ldi	r24, 0x60	; 96
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	c6 c0       	rjmp	.+396    	; 0x85e <__mulsf3+0x1e8>
     6d2:	92 30       	cpi	r25, 0x02	; 2
     6d4:	49 f4       	brne	.+18     	; 0x6e8 <__mulsf3+0x72>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6da:	8a 89       	ldd	r24, Y+18	; 0x12
     6dc:	98 13       	cpse	r25, r24
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	2a 87       	std	Y+10, r18	; 0x0a
     6e2:	ce 01       	movw	r24, r28
     6e4:	09 96       	adiw	r24, 0x09	; 9
     6e6:	bb c0       	rjmp	.+374    	; 0x85e <__mulsf3+0x1e8>
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	49 f4       	brne	.+18     	; 0x6fe <__mulsf3+0x88>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f0:	8a 89       	ldd	r24, Y+18	; 0x12
     6f2:	98 13       	cpse	r25, r24
     6f4:	21 e0       	ldi	r18, 0x01	; 1
     6f6:	2a 8b       	std	Y+18, r18	; 0x12
     6f8:	ce 01       	movw	r24, r28
     6fa:	41 96       	adiw	r24, 0x11	; 17
     6fc:	b0 c0       	rjmp	.+352    	; 0x85e <__mulsf3+0x1e8>
     6fe:	2d 84       	ldd	r2, Y+13	; 0x0d
     700:	3e 84       	ldd	r3, Y+14	; 0x0e
     702:	4f 84       	ldd	r4, Y+15	; 0x0f
     704:	58 88       	ldd	r5, Y+16	; 0x10
     706:	6d 88       	ldd	r6, Y+21	; 0x15
     708:	7e 88       	ldd	r7, Y+22	; 0x16
     70a:	8f 88       	ldd	r8, Y+23	; 0x17
     70c:	98 8c       	ldd	r9, Y+24	; 0x18
     70e:	ee 24       	eor	r14, r14
     710:	ff 24       	eor	r15, r15
     712:	87 01       	movw	r16, r14
     714:	aa 24       	eor	r10, r10
     716:	bb 24       	eor	r11, r11
     718:	65 01       	movw	r12, r10
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	e0 e0       	ldi	r30, 0x00	; 0
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	c1 01       	movw	r24, r2
     728:	81 70       	andi	r24, 0x01	; 1
     72a:	90 70       	andi	r25, 0x00	; 0
     72c:	89 2b       	or	r24, r25
     72e:	e9 f0       	breq	.+58     	; 0x76a <__mulsf3+0xf4>
     730:	e6 0c       	add	r14, r6
     732:	f7 1c       	adc	r15, r7
     734:	08 1d       	adc	r16, r8
     736:	19 1d       	adc	r17, r9
     738:	9a 01       	movw	r18, r20
     73a:	ab 01       	movw	r20, r22
     73c:	2a 0d       	add	r18, r10
     73e:	3b 1d       	adc	r19, r11
     740:	4c 1d       	adc	r20, r12
     742:	5d 1d       	adc	r21, r13
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	a0 e0       	ldi	r26, 0x00	; 0
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	e6 14       	cp	r14, r6
     74e:	f7 04       	cpc	r15, r7
     750:	08 05       	cpc	r16, r8
     752:	19 05       	cpc	r17, r9
     754:	20 f4       	brcc	.+8      	; 0x75e <__mulsf3+0xe8>
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	a0 e0       	ldi	r26, 0x00	; 0
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	ba 01       	movw	r22, r20
     760:	a9 01       	movw	r20, r18
     762:	48 0f       	add	r20, r24
     764:	59 1f       	adc	r21, r25
     766:	6a 1f       	adc	r22, r26
     768:	7b 1f       	adc	r23, r27
     76a:	aa 0c       	add	r10, r10
     76c:	bb 1c       	adc	r11, r11
     76e:	cc 1c       	adc	r12, r12
     770:	dd 1c       	adc	r13, r13
     772:	97 fe       	sbrs	r9, 7
     774:	08 c0       	rjmp	.+16     	; 0x786 <__mulsf3+0x110>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	a0 e0       	ldi	r26, 0x00	; 0
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	a8 2a       	or	r10, r24
     780:	b9 2a       	or	r11, r25
     782:	ca 2a       	or	r12, r26
     784:	db 2a       	or	r13, r27
     786:	31 96       	adiw	r30, 0x01	; 1
     788:	e0 32       	cpi	r30, 0x20	; 32
     78a:	f1 05       	cpc	r31, r1
     78c:	49 f0       	breq	.+18     	; 0x7a0 <__mulsf3+0x12a>
     78e:	66 0c       	add	r6, r6
     790:	77 1c       	adc	r7, r7
     792:	88 1c       	adc	r8, r8
     794:	99 1c       	adc	r9, r9
     796:	56 94       	lsr	r5
     798:	47 94       	ror	r4
     79a:	37 94       	ror	r3
     79c:	27 94       	ror	r2
     79e:	c3 cf       	rjmp	.-122    	; 0x726 <__mulsf3+0xb0>
     7a0:	fa 85       	ldd	r31, Y+10	; 0x0a
     7a2:	ea 89       	ldd	r30, Y+18	; 0x12
     7a4:	2b 89       	ldd	r18, Y+19	; 0x13
     7a6:	3c 89       	ldd	r19, Y+20	; 0x14
     7a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ac:	28 0f       	add	r18, r24
     7ae:	39 1f       	adc	r19, r25
     7b0:	2e 5f       	subi	r18, 0xFE	; 254
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	17 c0       	rjmp	.+46     	; 0x7e4 <__mulsf3+0x16e>
     7b6:	ca 01       	movw	r24, r20
     7b8:	81 70       	andi	r24, 0x01	; 1
     7ba:	90 70       	andi	r25, 0x00	; 0
     7bc:	89 2b       	or	r24, r25
     7be:	61 f0       	breq	.+24     	; 0x7d8 <__mulsf3+0x162>
     7c0:	16 95       	lsr	r17
     7c2:	07 95       	ror	r16
     7c4:	f7 94       	ror	r15
     7c6:	e7 94       	ror	r14
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	a0 e0       	ldi	r26, 0x00	; 0
     7ce:	b0 e8       	ldi	r27, 0x80	; 128
     7d0:	e8 2a       	or	r14, r24
     7d2:	f9 2a       	or	r15, r25
     7d4:	0a 2b       	or	r16, r26
     7d6:	1b 2b       	or	r17, r27
     7d8:	76 95       	lsr	r23
     7da:	67 95       	ror	r22
     7dc:	57 95       	ror	r21
     7de:	47 95       	ror	r20
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	77 fd       	sbrc	r23, 7
     7e6:	e7 cf       	rjmp	.-50     	; 0x7b6 <__mulsf3+0x140>
     7e8:	0c c0       	rjmp	.+24     	; 0x802 <__mulsf3+0x18c>
     7ea:	44 0f       	add	r20, r20
     7ec:	55 1f       	adc	r21, r21
     7ee:	66 1f       	adc	r22, r22
     7f0:	77 1f       	adc	r23, r23
     7f2:	17 fd       	sbrc	r17, 7
     7f4:	41 60       	ori	r20, 0x01	; 1
     7f6:	ee 0c       	add	r14, r14
     7f8:	ff 1c       	adc	r15, r15
     7fa:	00 1f       	adc	r16, r16
     7fc:	11 1f       	adc	r17, r17
     7fe:	21 50       	subi	r18, 0x01	; 1
     800:	30 40       	sbci	r19, 0x00	; 0
     802:	40 30       	cpi	r20, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	59 07       	cpc	r21, r25
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	69 07       	cpc	r22, r25
     80c:	90 e4       	ldi	r25, 0x40	; 64
     80e:	79 07       	cpc	r23, r25
     810:	60 f3       	brcs	.-40     	; 0x7ea <__mulsf3+0x174>
     812:	2b 8f       	std	Y+27, r18	; 0x1b
     814:	3c 8f       	std	Y+28, r19	; 0x1c
     816:	db 01       	movw	r26, r22
     818:	ca 01       	movw	r24, r20
     81a:	8f 77       	andi	r24, 0x7F	; 127
     81c:	90 70       	andi	r25, 0x00	; 0
     81e:	a0 70       	andi	r26, 0x00	; 0
     820:	b0 70       	andi	r27, 0x00	; 0
     822:	80 34       	cpi	r24, 0x40	; 64
     824:	91 05       	cpc	r25, r1
     826:	a1 05       	cpc	r26, r1
     828:	b1 05       	cpc	r27, r1
     82a:	61 f4       	brne	.+24     	; 0x844 <__mulsf3+0x1ce>
     82c:	47 fd       	sbrc	r20, 7
     82e:	0a c0       	rjmp	.+20     	; 0x844 <__mulsf3+0x1ce>
     830:	e1 14       	cp	r14, r1
     832:	f1 04       	cpc	r15, r1
     834:	01 05       	cpc	r16, r1
     836:	11 05       	cpc	r17, r1
     838:	29 f0       	breq	.+10     	; 0x844 <__mulsf3+0x1ce>
     83a:	40 5c       	subi	r20, 0xC0	; 192
     83c:	5f 4f       	sbci	r21, 0xFF	; 255
     83e:	6f 4f       	sbci	r22, 0xFF	; 255
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	40 78       	andi	r20, 0x80	; 128
     844:	1a 8e       	std	Y+26, r1	; 0x1a
     846:	fe 17       	cp	r31, r30
     848:	11 f0       	breq	.+4      	; 0x84e <__mulsf3+0x1d8>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	8a 8f       	std	Y+26, r24	; 0x1a
     84e:	4d 8f       	std	Y+29, r20	; 0x1d
     850:	5e 8f       	std	Y+30, r21	; 0x1e
     852:	6f 8f       	std	Y+31, r22	; 0x1f
     854:	78 a3       	std	Y+32, r23	; 0x20
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	89 8f       	std	Y+25, r24	; 0x19
     85a:	ce 01       	movw	r24, r28
     85c:	49 96       	adiw	r24, 0x19	; 25
     85e:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     862:	a0 96       	adiw	r28, 0x20	; 32
     864:	e2 e1       	ldi	r30, 0x12	; 18
     866:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__epilogue_restores__>

0000086a <__divsf3>:
     86a:	a8 e1       	ldi	r26, 0x18	; 24
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	eb e3       	ldi	r30, 0x3B	; 59
     870:	f4 e0       	ldi	r31, 0x04	; 4
     872:	0c 94 d0 1c 	jmp	0x39a0	; 0x39a0 <__prologue_saves__+0x10>
     876:	69 83       	std	Y+1, r22	; 0x01
     878:	7a 83       	std	Y+2, r23	; 0x02
     87a:	8b 83       	std	Y+3, r24	; 0x03
     87c:	9c 83       	std	Y+4, r25	; 0x04
     87e:	2d 83       	std	Y+5, r18	; 0x05
     880:	3e 83       	std	Y+6, r19	; 0x06
     882:	4f 83       	std	Y+7, r20	; 0x07
     884:	58 87       	std	Y+8, r21	; 0x08
     886:	b9 e0       	ldi	r27, 0x09	; 9
     888:	eb 2e       	mov	r14, r27
     88a:	f1 2c       	mov	r15, r1
     88c:	ec 0e       	add	r14, r28
     88e:	fd 1e       	adc	r15, r29
     890:	ce 01       	movw	r24, r28
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	b7 01       	movw	r22, r14
     896:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     89a:	8e 01       	movw	r16, r28
     89c:	0f 5e       	subi	r16, 0xEF	; 239
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	ce 01       	movw	r24, r28
     8a2:	05 96       	adiw	r24, 0x05	; 5
     8a4:	b8 01       	movw	r22, r16
     8a6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     8aa:	29 85       	ldd	r18, Y+9	; 0x09
     8ac:	22 30       	cpi	r18, 0x02	; 2
     8ae:	08 f4       	brcc	.+2      	; 0x8b2 <__divsf3+0x48>
     8b0:	7e c0       	rjmp	.+252    	; 0x9ae <__divsf3+0x144>
     8b2:	39 89       	ldd	r19, Y+17	; 0x11
     8b4:	32 30       	cpi	r19, 0x02	; 2
     8b6:	10 f4       	brcc	.+4      	; 0x8bc <__divsf3+0x52>
     8b8:	b8 01       	movw	r22, r16
     8ba:	7c c0       	rjmp	.+248    	; 0x9b4 <__divsf3+0x14a>
     8bc:	8a 85       	ldd	r24, Y+10	; 0x0a
     8be:	9a 89       	ldd	r25, Y+18	; 0x12
     8c0:	89 27       	eor	r24, r25
     8c2:	8a 87       	std	Y+10, r24	; 0x0a
     8c4:	24 30       	cpi	r18, 0x04	; 4
     8c6:	11 f0       	breq	.+4      	; 0x8cc <__divsf3+0x62>
     8c8:	22 30       	cpi	r18, 0x02	; 2
     8ca:	31 f4       	brne	.+12     	; 0x8d8 <__divsf3+0x6e>
     8cc:	23 17       	cp	r18, r19
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <__divsf3+0x68>
     8d0:	6e c0       	rjmp	.+220    	; 0x9ae <__divsf3+0x144>
     8d2:	60 e6       	ldi	r22, 0x60	; 96
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	6e c0       	rjmp	.+220    	; 0x9b4 <__divsf3+0x14a>
     8d8:	34 30       	cpi	r19, 0x04	; 4
     8da:	39 f4       	brne	.+14     	; 0x8ea <__divsf3+0x80>
     8dc:	1d 86       	std	Y+13, r1	; 0x0d
     8de:	1e 86       	std	Y+14, r1	; 0x0e
     8e0:	1f 86       	std	Y+15, r1	; 0x0f
     8e2:	18 8a       	std	Y+16, r1	; 0x10
     8e4:	1c 86       	std	Y+12, r1	; 0x0c
     8e6:	1b 86       	std	Y+11, r1	; 0x0b
     8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <__divsf3+0x88>
     8ea:	32 30       	cpi	r19, 0x02	; 2
     8ec:	21 f4       	brne	.+8      	; 0x8f6 <__divsf3+0x8c>
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	89 87       	std	Y+9, r24	; 0x09
     8f2:	b7 01       	movw	r22, r14
     8f4:	5f c0       	rjmp	.+190    	; 0x9b4 <__divsf3+0x14a>
     8f6:	2b 85       	ldd	r18, Y+11	; 0x0b
     8f8:	3c 85       	ldd	r19, Y+12	; 0x0c
     8fa:	8b 89       	ldd	r24, Y+19	; 0x13
     8fc:	9c 89       	ldd	r25, Y+20	; 0x14
     8fe:	28 1b       	sub	r18, r24
     900:	39 0b       	sbc	r19, r25
     902:	3c 87       	std	Y+12, r19	; 0x0c
     904:	2b 87       	std	Y+11, r18	; 0x0b
     906:	ed 84       	ldd	r14, Y+13	; 0x0d
     908:	fe 84       	ldd	r15, Y+14	; 0x0e
     90a:	0f 85       	ldd	r16, Y+15	; 0x0f
     90c:	18 89       	ldd	r17, Y+16	; 0x10
     90e:	ad 88       	ldd	r10, Y+21	; 0x15
     910:	be 88       	ldd	r11, Y+22	; 0x16
     912:	cf 88       	ldd	r12, Y+23	; 0x17
     914:	d8 8c       	ldd	r13, Y+24	; 0x18
     916:	ea 14       	cp	r14, r10
     918:	fb 04       	cpc	r15, r11
     91a:	0c 05       	cpc	r16, r12
     91c:	1d 05       	cpc	r17, r13
     91e:	40 f4       	brcc	.+16     	; 0x930 <__divsf3+0xc6>
     920:	ee 0c       	add	r14, r14
     922:	ff 1c       	adc	r15, r15
     924:	00 1f       	adc	r16, r16
     926:	11 1f       	adc	r17, r17
     928:	21 50       	subi	r18, 0x01	; 1
     92a:	30 40       	sbci	r19, 0x00	; 0
     92c:	3c 87       	std	Y+12, r19	; 0x0c
     92e:	2b 87       	std	Y+11, r18	; 0x0b
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e4       	ldi	r27, 0x40	; 64
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	ea 14       	cp	r14, r10
     946:	fb 04       	cpc	r15, r11
     948:	0c 05       	cpc	r16, r12
     94a:	1d 05       	cpc	r17, r13
     94c:	40 f0       	brcs	.+16     	; 0x95e <__divsf3+0xf4>
     94e:	28 2b       	or	r18, r24
     950:	39 2b       	or	r19, r25
     952:	4a 2b       	or	r20, r26
     954:	5b 2b       	or	r21, r27
     956:	ea 18       	sub	r14, r10
     958:	fb 08       	sbc	r15, r11
     95a:	0c 09       	sbc	r16, r12
     95c:	1d 09       	sbc	r17, r13
     95e:	b6 95       	lsr	r27
     960:	a7 95       	ror	r26
     962:	97 95       	ror	r25
     964:	87 95       	ror	r24
     966:	ee 0c       	add	r14, r14
     968:	ff 1c       	adc	r15, r15
     96a:	00 1f       	adc	r16, r16
     96c:	11 1f       	adc	r17, r17
     96e:	6f 5f       	subi	r22, 0xFF	; 255
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	6f 31       	cpi	r22, 0x1F	; 31
     974:	71 05       	cpc	r23, r1
     976:	31 f7       	brne	.-52     	; 0x944 <__divsf3+0xda>
     978:	da 01       	movw	r26, r20
     97a:	c9 01       	movw	r24, r18
     97c:	8f 77       	andi	r24, 0x7F	; 127
     97e:	90 70       	andi	r25, 0x00	; 0
     980:	a0 70       	andi	r26, 0x00	; 0
     982:	b0 70       	andi	r27, 0x00	; 0
     984:	80 34       	cpi	r24, 0x40	; 64
     986:	91 05       	cpc	r25, r1
     988:	a1 05       	cpc	r26, r1
     98a:	b1 05       	cpc	r27, r1
     98c:	61 f4       	brne	.+24     	; 0x9a6 <__divsf3+0x13c>
     98e:	27 fd       	sbrc	r18, 7
     990:	0a c0       	rjmp	.+20     	; 0x9a6 <__divsf3+0x13c>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	29 f0       	breq	.+10     	; 0x9a6 <__divsf3+0x13c>
     99c:	20 5c       	subi	r18, 0xC0	; 192
     99e:	3f 4f       	sbci	r19, 0xFF	; 255
     9a0:	4f 4f       	sbci	r20, 0xFF	; 255
     9a2:	5f 4f       	sbci	r21, 0xFF	; 255
     9a4:	20 78       	andi	r18, 0x80	; 128
     9a6:	2d 87       	std	Y+13, r18	; 0x0d
     9a8:	3e 87       	std	Y+14, r19	; 0x0e
     9aa:	4f 87       	std	Y+15, r20	; 0x0f
     9ac:	58 8b       	std	Y+16, r21	; 0x10
     9ae:	be 01       	movw	r22, r28
     9b0:	67 5f       	subi	r22, 0xF7	; 247
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	cb 01       	movw	r24, r22
     9b6:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     9ba:	68 96       	adiw	r28, 0x18	; 24
     9bc:	ea e0       	ldi	r30, 0x0A	; 10
     9be:	0c 94 ec 1c 	jmp	0x39d8	; 0x39d8 <__epilogue_restores__+0x10>

000009c2 <__gtsf2>:
     9c2:	a8 e1       	ldi	r26, 0x18	; 24
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	e7 ee       	ldi	r30, 0xE7	; 231
     9c8:	f4 e0       	ldi	r31, 0x04	; 4
     9ca:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__prologue_saves__+0x18>
     9ce:	69 83       	std	Y+1, r22	; 0x01
     9d0:	7a 83       	std	Y+2, r23	; 0x02
     9d2:	8b 83       	std	Y+3, r24	; 0x03
     9d4:	9c 83       	std	Y+4, r25	; 0x04
     9d6:	2d 83       	std	Y+5, r18	; 0x05
     9d8:	3e 83       	std	Y+6, r19	; 0x06
     9da:	4f 83       	std	Y+7, r20	; 0x07
     9dc:	58 87       	std	Y+8, r21	; 0x08
     9de:	89 e0       	ldi	r24, 0x09	; 9
     9e0:	e8 2e       	mov	r14, r24
     9e2:	f1 2c       	mov	r15, r1
     9e4:	ec 0e       	add	r14, r28
     9e6:	fd 1e       	adc	r15, r29
     9e8:	ce 01       	movw	r24, r28
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	b7 01       	movw	r22, r14
     9ee:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     9f2:	8e 01       	movw	r16, r28
     9f4:	0f 5e       	subi	r16, 0xEF	; 239
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
     9f8:	ce 01       	movw	r24, r28
     9fa:	05 96       	adiw	r24, 0x05	; 5
     9fc:	b8 01       	movw	r22, r16
     9fe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a02:	89 85       	ldd	r24, Y+9	; 0x09
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	40 f0       	brcs	.+16     	; 0xa18 <__gtsf2+0x56>
     a08:	89 89       	ldd	r24, Y+17	; 0x11
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	28 f0       	brcs	.+10     	; 0xa18 <__gtsf2+0x56>
     a0e:	c7 01       	movw	r24, r14
     a10:	b8 01       	movw	r22, r16
     a12:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <__gtsf2+0x58>
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	68 96       	adiw	r28, 0x18	; 24
     a1c:	e6 e0       	ldi	r30, 0x06	; 6
     a1e:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <__epilogue_restores__+0x18>

00000a22 <__gesf2>:
     a22:	a8 e1       	ldi	r26, 0x18	; 24
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e7 e1       	ldi	r30, 0x17	; 23
     a28:	f5 e0       	ldi	r31, 0x05	; 5
     a2a:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__prologue_saves__+0x18>
     a2e:	69 83       	std	Y+1, r22	; 0x01
     a30:	7a 83       	std	Y+2, r23	; 0x02
     a32:	8b 83       	std	Y+3, r24	; 0x03
     a34:	9c 83       	std	Y+4, r25	; 0x04
     a36:	2d 83       	std	Y+5, r18	; 0x05
     a38:	3e 83       	std	Y+6, r19	; 0x06
     a3a:	4f 83       	std	Y+7, r20	; 0x07
     a3c:	58 87       	std	Y+8, r21	; 0x08
     a3e:	89 e0       	ldi	r24, 0x09	; 9
     a40:	e8 2e       	mov	r14, r24
     a42:	f1 2c       	mov	r15, r1
     a44:	ec 0e       	add	r14, r28
     a46:	fd 1e       	adc	r15, r29
     a48:	ce 01       	movw	r24, r28
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	b7 01       	movw	r22, r14
     a4e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a52:	8e 01       	movw	r16, r28
     a54:	0f 5e       	subi	r16, 0xEF	; 239
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
     a58:	ce 01       	movw	r24, r28
     a5a:	05 96       	adiw	r24, 0x05	; 5
     a5c:	b8 01       	movw	r22, r16
     a5e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a62:	89 85       	ldd	r24, Y+9	; 0x09
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	40 f0       	brcs	.+16     	; 0xa78 <__gesf2+0x56>
     a68:	89 89       	ldd	r24, Y+17	; 0x11
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	28 f0       	brcs	.+10     	; 0xa78 <__gesf2+0x56>
     a6e:	c7 01       	movw	r24, r14
     a70:	b8 01       	movw	r22, r16
     a72:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <__gesf2+0x58>
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	68 96       	adiw	r28, 0x18	; 24
     a7c:	e6 e0       	ldi	r30, 0x06	; 6
     a7e:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <__epilogue_restores__+0x18>

00000a82 <__ltsf2>:
     a82:	a8 e1       	ldi	r26, 0x18	; 24
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	e7 e4       	ldi	r30, 0x47	; 71
     a88:	f5 e0       	ldi	r31, 0x05	; 5
     a8a:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__prologue_saves__+0x18>
     a8e:	69 83       	std	Y+1, r22	; 0x01
     a90:	7a 83       	std	Y+2, r23	; 0x02
     a92:	8b 83       	std	Y+3, r24	; 0x03
     a94:	9c 83       	std	Y+4, r25	; 0x04
     a96:	2d 83       	std	Y+5, r18	; 0x05
     a98:	3e 83       	std	Y+6, r19	; 0x06
     a9a:	4f 83       	std	Y+7, r20	; 0x07
     a9c:	58 87       	std	Y+8, r21	; 0x08
     a9e:	89 e0       	ldi	r24, 0x09	; 9
     aa0:	e8 2e       	mov	r14, r24
     aa2:	f1 2c       	mov	r15, r1
     aa4:	ec 0e       	add	r14, r28
     aa6:	fd 1e       	adc	r15, r29
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	b7 01       	movw	r22, r14
     aae:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ab2:	8e 01       	movw	r16, r28
     ab4:	0f 5e       	subi	r16, 0xEF	; 239
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255
     ab8:	ce 01       	movw	r24, r28
     aba:	05 96       	adiw	r24, 0x05	; 5
     abc:	b8 01       	movw	r22, r16
     abe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ac2:	89 85       	ldd	r24, Y+9	; 0x09
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	40 f0       	brcs	.+16     	; 0xad8 <__ltsf2+0x56>
     ac8:	89 89       	ldd	r24, Y+17	; 0x11
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	28 f0       	brcs	.+10     	; 0xad8 <__ltsf2+0x56>
     ace:	c7 01       	movw	r24, r14
     ad0:	b8 01       	movw	r22, r16
     ad2:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     ad6:	01 c0       	rjmp	.+2      	; 0xada <__ltsf2+0x58>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	68 96       	adiw	r28, 0x18	; 24
     adc:	e6 e0       	ldi	r30, 0x06	; 6
     ade:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <__epilogue_restores__+0x18>

00000ae2 <__floatsisf>:
     ae2:	a8 e0       	ldi	r26, 0x08	; 8
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e7 e7       	ldi	r30, 0x77	; 119
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	0c 94 d1 1c 	jmp	0x39a2	; 0x39a2 <__prologue_saves__+0x12>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	da 01       	movw	r26, r20
     af8:	c9 01       	movw	r24, r18
     afa:	88 27       	eor	r24, r24
     afc:	b7 fd       	sbrc	r27, 7
     afe:	83 95       	inc	r24
     b00:	99 27       	eor	r25, r25
     b02:	aa 27       	eor	r26, r26
     b04:	bb 27       	eor	r27, r27
     b06:	b8 2e       	mov	r11, r24
     b08:	21 15       	cp	r18, r1
     b0a:	31 05       	cpc	r19, r1
     b0c:	41 05       	cpc	r20, r1
     b0e:	51 05       	cpc	r21, r1
     b10:	19 f4       	brne	.+6      	; 0xb18 <__floatsisf+0x36>
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	3a c0       	rjmp	.+116    	; 0xb8c <__floatsisf+0xaa>
     b18:	88 23       	and	r24, r24
     b1a:	a9 f0       	breq	.+42     	; 0xb46 <__floatsisf+0x64>
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	38 07       	cpc	r19, r24
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	48 07       	cpc	r20, r24
     b26:	80 e8       	ldi	r24, 0x80	; 128
     b28:	58 07       	cpc	r21, r24
     b2a:	29 f4       	brne	.+10     	; 0xb36 <__floatsisf+0x54>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	9f ec       	ldi	r25, 0xCF	; 207
     b34:	30 c0       	rjmp	.+96     	; 0xb96 <__floatsisf+0xb4>
     b36:	ee 24       	eor	r14, r14
     b38:	ff 24       	eor	r15, r15
     b3a:	87 01       	movw	r16, r14
     b3c:	e2 1a       	sub	r14, r18
     b3e:	f3 0a       	sbc	r15, r19
     b40:	04 0b       	sbc	r16, r20
     b42:	15 0b       	sbc	r17, r21
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <__floatsisf+0x68>
     b46:	79 01       	movw	r14, r18
     b48:	8a 01       	movw	r16, r20
     b4a:	8e e1       	ldi	r24, 0x1E	; 30
     b4c:	c8 2e       	mov	r12, r24
     b4e:	d1 2c       	mov	r13, r1
     b50:	dc 82       	std	Y+4, r13	; 0x04
     b52:	cb 82       	std	Y+3, r12	; 0x03
     b54:	ed 82       	std	Y+5, r14	; 0x05
     b56:	fe 82       	std	Y+6, r15	; 0x06
     b58:	0f 83       	std	Y+7, r16	; 0x07
     b5a:	18 87       	std	Y+8, r17	; 0x08
     b5c:	c8 01       	movw	r24, r16
     b5e:	b7 01       	movw	r22, r14
     b60:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	18 16       	cp	r1, r24
     b68:	19 06       	cpc	r1, r25
     b6a:	84 f4       	brge	.+32     	; 0xb8c <__floatsisf+0xaa>
     b6c:	08 2e       	mov	r0, r24
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__floatsisf+0x96>
     b70:	ee 0c       	add	r14, r14
     b72:	ff 1c       	adc	r15, r15
     b74:	00 1f       	adc	r16, r16
     b76:	11 1f       	adc	r17, r17
     b78:	0a 94       	dec	r0
     b7a:	d2 f7       	brpl	.-12     	; 0xb70 <__floatsisf+0x8e>
     b7c:	ed 82       	std	Y+5, r14	; 0x05
     b7e:	fe 82       	std	Y+6, r15	; 0x06
     b80:	0f 83       	std	Y+7, r16	; 0x07
     b82:	18 87       	std	Y+8, r17	; 0x08
     b84:	c8 1a       	sub	r12, r24
     b86:	d9 0a       	sbc	r13, r25
     b88:	dc 82       	std	Y+4, r13	; 0x04
     b8a:	cb 82       	std	Y+3, r12	; 0x03
     b8c:	ba 82       	std	Y+2, r11	; 0x02
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     b96:	28 96       	adiw	r28, 0x08	; 8
     b98:	e9 e0       	ldi	r30, 0x09	; 9
     b9a:	0c 94 ed 1c 	jmp	0x39da	; 0x39da <__epilogue_restores__+0x12>

00000b9e <__fixsfsi>:
     b9e:	ac e0       	ldi	r26, 0x0C	; 12
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e5 ed       	ldi	r30, 0xD5	; 213
     ba4:	f5 e0       	ldi	r31, 0x05	; 5
     ba6:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__prologue_saves__+0x20>
     baa:	69 83       	std	Y+1, r22	; 0x01
     bac:	7a 83       	std	Y+2, r23	; 0x02
     bae:	8b 83       	std	Y+3, r24	; 0x03
     bb0:	9c 83       	std	Y+4, r25	; 0x04
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	be 01       	movw	r22, r28
     bb8:	6b 5f       	subi	r22, 0xFB	; 251
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	61 f1       	breq	.+88     	; 0xc1e <__fixsfsi+0x80>
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	50 f1       	brcs	.+84     	; 0xc1e <__fixsfsi+0x80>
     bca:	84 30       	cpi	r24, 0x04	; 4
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <__fixsfsi+0x38>
     bce:	8e 81       	ldd	r24, Y+6	; 0x06
     bd0:	88 23       	and	r24, r24
     bd2:	51 f1       	breq	.+84     	; 0xc28 <__fixsfsi+0x8a>
     bd4:	2e c0       	rjmp	.+92     	; 0xc32 <__fixsfsi+0x94>
     bd6:	2f 81       	ldd	r18, Y+7	; 0x07
     bd8:	38 85       	ldd	r19, Y+8	; 0x08
     bda:	37 fd       	sbrc	r19, 7
     bdc:	20 c0       	rjmp	.+64     	; 0xc1e <__fixsfsi+0x80>
     bde:	6e 81       	ldd	r22, Y+6	; 0x06
     be0:	2f 31       	cpi	r18, 0x1F	; 31
     be2:	31 05       	cpc	r19, r1
     be4:	1c f0       	brlt	.+6      	; 0xbec <__fixsfsi+0x4e>
     be6:	66 23       	and	r22, r22
     be8:	f9 f0       	breq	.+62     	; 0xc28 <__fixsfsi+0x8a>
     bea:	23 c0       	rjmp	.+70     	; 0xc32 <__fixsfsi+0x94>
     bec:	8e e1       	ldi	r24, 0x1E	; 30
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	82 1b       	sub	r24, r18
     bf2:	93 0b       	sbc	r25, r19
     bf4:	29 85       	ldd	r18, Y+9	; 0x09
     bf6:	3a 85       	ldd	r19, Y+10	; 0x0a
     bf8:	4b 85       	ldd	r20, Y+11	; 0x0b
     bfa:	5c 85       	ldd	r21, Y+12	; 0x0c
     bfc:	04 c0       	rjmp	.+8      	; 0xc06 <__fixsfsi+0x68>
     bfe:	56 95       	lsr	r21
     c00:	47 95       	ror	r20
     c02:	37 95       	ror	r19
     c04:	27 95       	ror	r18
     c06:	8a 95       	dec	r24
     c08:	d2 f7       	brpl	.-12     	; 0xbfe <__fixsfsi+0x60>
     c0a:	66 23       	and	r22, r22
     c0c:	b1 f0       	breq	.+44     	; 0xc3a <__fixsfsi+0x9c>
     c0e:	50 95       	com	r21
     c10:	40 95       	com	r20
     c12:	30 95       	com	r19
     c14:	21 95       	neg	r18
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	4f 4f       	sbci	r20, 0xFF	; 255
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <__fixsfsi+0x9c>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <__fixsfsi+0x9c>
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	3f ef       	ldi	r19, 0xFF	; 255
     c2c:	4f ef       	ldi	r20, 0xFF	; 255
     c2e:	5f e7       	ldi	r21, 0x7F	; 127
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__fixsfsi+0x9c>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e8       	ldi	r21, 0x80	; 128
     c3a:	b9 01       	movw	r22, r18
     c3c:	ca 01       	movw	r24, r20
     c3e:	2c 96       	adiw	r28, 0x0c	; 12
     c40:	e2 e0       	ldi	r30, 0x02	; 2
     c42:	0c 94 f4 1c 	jmp	0x39e8	; 0x39e8 <__epilogue_restores__+0x20>

00000c46 <__floatunsisf>:
     c46:	a8 e0       	ldi	r26, 0x08	; 8
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e9 e2       	ldi	r30, 0x29	; 41
     c4c:	f6 e0       	ldi	r31, 0x06	; 6
     c4e:	0c 94 d0 1c 	jmp	0x39a0	; 0x39a0 <__prologue_saves__+0x10>
     c52:	7b 01       	movw	r14, r22
     c54:	8c 01       	movw	r16, r24
     c56:	61 15       	cp	r22, r1
     c58:	71 05       	cpc	r23, r1
     c5a:	81 05       	cpc	r24, r1
     c5c:	91 05       	cpc	r25, r1
     c5e:	19 f4       	brne	.+6      	; 0xc66 <__floatunsisf+0x20>
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	60 c0       	rjmp	.+192    	; 0xd26 <__floatunsisf+0xe0>
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	8e e1       	ldi	r24, 0x1E	; 30
     c6c:	c8 2e       	mov	r12, r24
     c6e:	d1 2c       	mov	r13, r1
     c70:	dc 82       	std	Y+4, r13	; 0x04
     c72:	cb 82       	std	Y+3, r12	; 0x03
     c74:	ed 82       	std	Y+5, r14	; 0x05
     c76:	fe 82       	std	Y+6, r15	; 0x06
     c78:	0f 83       	std	Y+7, r16	; 0x07
     c7a:	18 87       	std	Y+8, r17	; 0x08
     c7c:	c8 01       	movw	r24, r16
     c7e:	b7 01       	movw	r22, r14
     c80:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     c84:	fc 01       	movw	r30, r24
     c86:	31 97       	sbiw	r30, 0x01	; 1
     c88:	f7 ff       	sbrs	r31, 7
     c8a:	3b c0       	rjmp	.+118    	; 0xd02 <__floatunsisf+0xbc>
     c8c:	22 27       	eor	r18, r18
     c8e:	33 27       	eor	r19, r19
     c90:	2e 1b       	sub	r18, r30
     c92:	3f 0b       	sbc	r19, r31
     c94:	57 01       	movw	r10, r14
     c96:	68 01       	movw	r12, r16
     c98:	02 2e       	mov	r0, r18
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <__floatunsisf+0x5e>
     c9c:	d6 94       	lsr	r13
     c9e:	c7 94       	ror	r12
     ca0:	b7 94       	ror	r11
     ca2:	a7 94       	ror	r10
     ca4:	0a 94       	dec	r0
     ca6:	d2 f7       	brpl	.-12     	; 0xc9c <__floatunsisf+0x56>
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <__floatunsisf+0x7c>
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	aa 1f       	adc	r26, r26
     cc0:	bb 1f       	adc	r27, r27
     cc2:	2a 95       	dec	r18
     cc4:	d2 f7       	brpl	.-12     	; 0xcba <__floatunsisf+0x74>
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	a1 09       	sbc	r26, r1
     cca:	b1 09       	sbc	r27, r1
     ccc:	8e 21       	and	r24, r14
     cce:	9f 21       	and	r25, r15
     cd0:	a0 23       	and	r26, r16
     cd2:	b1 23       	and	r27, r17
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	a1 05       	cpc	r26, r1
     cd8:	b1 05       	cpc	r27, r1
     cda:	21 f0       	breq	.+8      	; 0xce4 <__floatunsisf+0x9e>
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	4a 29       	or	r20, r10
     ce6:	5b 29       	or	r21, r11
     ce8:	6c 29       	or	r22, r12
     cea:	7d 29       	or	r23, r13
     cec:	4d 83       	std	Y+5, r20	; 0x05
     cee:	5e 83       	std	Y+6, r21	; 0x06
     cf0:	6f 83       	std	Y+7, r22	; 0x07
     cf2:	78 87       	std	Y+8, r23	; 0x08
     cf4:	8e e1       	ldi	r24, 0x1E	; 30
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	8e 1b       	sub	r24, r30
     cfa:	9f 0b       	sbc	r25, r31
     cfc:	9c 83       	std	Y+4, r25	; 0x04
     cfe:	8b 83       	std	Y+3, r24	; 0x03
     d00:	12 c0       	rjmp	.+36     	; 0xd26 <__floatunsisf+0xe0>
     d02:	30 97       	sbiw	r30, 0x00	; 0
     d04:	81 f0       	breq	.+32     	; 0xd26 <__floatunsisf+0xe0>
     d06:	0e 2e       	mov	r0, r30
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <__floatunsisf+0xcc>
     d0a:	ee 0c       	add	r14, r14
     d0c:	ff 1c       	adc	r15, r15
     d0e:	00 1f       	adc	r16, r16
     d10:	11 1f       	adc	r17, r17
     d12:	0a 94       	dec	r0
     d14:	d2 f7       	brpl	.-12     	; 0xd0a <__floatunsisf+0xc4>
     d16:	ed 82       	std	Y+5, r14	; 0x05
     d18:	fe 82       	std	Y+6, r15	; 0x06
     d1a:	0f 83       	std	Y+7, r16	; 0x07
     d1c:	18 87       	std	Y+8, r17	; 0x08
     d1e:	ce 1a       	sub	r12, r30
     d20:	df 0a       	sbc	r13, r31
     d22:	dc 82       	std	Y+4, r13	; 0x04
     d24:	cb 82       	std	Y+3, r12	; 0x03
     d26:	1a 82       	std	Y+2, r1	; 0x02
     d28:	ce 01       	movw	r24, r28
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     d30:	28 96       	adiw	r28, 0x08	; 8
     d32:	ea e0       	ldi	r30, 0x0A	; 10
     d34:	0c 94 ec 1c 	jmp	0x39d8	; 0x39d8 <__epilogue_restores__+0x10>

00000d38 <__ashldi3>:
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	60 97       	sbiw	r28, 0x10	; 16
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	a8 2f       	mov	r26, r24
     d54:	00 23       	and	r16, r16
     d56:	09 f4       	brne	.+2      	; 0xd5a <__ashldi3+0x22>
     d58:	61 c0       	rjmp	.+194    	; 0xe1c <__ashldi3+0xe4>
     d5a:	7e 01       	movw	r14, r28
     d5c:	08 94       	sec
     d5e:	e1 1c       	adc	r14, r1
     d60:	f1 1c       	adc	r15, r1
     d62:	88 e0       	ldi	r24, 0x08	; 8
     d64:	f7 01       	movw	r30, r14
     d66:	11 92       	st	Z+, r1
     d68:	8a 95       	dec	r24
     d6a:	e9 f7       	brne	.-6      	; 0xd66 <__ashldi3+0x2e>
     d6c:	29 83       	std	Y+1, r18	; 0x01
     d6e:	3a 83       	std	Y+2, r19	; 0x02
     d70:	4b 83       	std	Y+3, r20	; 0x03
     d72:	5c 83       	std	Y+4, r21	; 0x04
     d74:	6d 83       	std	Y+5, r22	; 0x05
     d76:	7e 83       	std	Y+6, r23	; 0x06
     d78:	af 83       	std	Y+7, r26	; 0x07
     d7a:	98 87       	std	Y+8, r25	; 0x08
     d7c:	80 e2       	ldi	r24, 0x20	; 32
     d7e:	80 1b       	sub	r24, r16
     d80:	e8 2f       	mov	r30, r24
     d82:	ff 27       	eor	r31, r31
     d84:	e7 fd       	sbrc	r30, 7
     d86:	f0 95       	com	r31
     d88:	49 81       	ldd	r20, Y+1	; 0x01
     d8a:	5a 81       	ldd	r21, Y+2	; 0x02
     d8c:	6b 81       	ldd	r22, Y+3	; 0x03
     d8e:	7c 81       	ldd	r23, Y+4	; 0x04
     d90:	18 16       	cp	r1, r24
     d92:	84 f0       	brlt	.+32     	; 0xdb4 <__ashldi3+0x7c>
     d94:	19 86       	std	Y+9, r1	; 0x09
     d96:	1a 86       	std	Y+10, r1	; 0x0a
     d98:	1b 86       	std	Y+11, r1	; 0x0b
     d9a:	1c 86       	std	Y+12, r1	; 0x0c
     d9c:	88 27       	eor	r24, r24
     d9e:	99 27       	eor	r25, r25
     da0:	8e 1b       	sub	r24, r30
     da2:	9f 0b       	sbc	r25, r31
     da4:	04 c0       	rjmp	.+8      	; 0xdae <__ashldi3+0x76>
     da6:	44 0f       	add	r20, r20
     da8:	55 1f       	adc	r21, r21
     daa:	66 1f       	adc	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	8a 95       	dec	r24
     db0:	d2 f7       	brpl	.-12     	; 0xda6 <__ashldi3+0x6e>
     db2:	28 c0       	rjmp	.+80     	; 0xe04 <__ashldi3+0xcc>
     db4:	20 2f       	mov	r18, r16
     db6:	33 27       	eor	r19, r19
     db8:	27 fd       	sbrc	r18, 7
     dba:	30 95       	com	r19
     dbc:	db 01       	movw	r26, r22
     dbe:	ca 01       	movw	r24, r20
     dc0:	02 2e       	mov	r0, r18
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <__ashldi3+0x94>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	aa 1f       	adc	r26, r26
     dca:	bb 1f       	adc	r27, r27
     dcc:	0a 94       	dec	r0
     dce:	d2 f7       	brpl	.-12     	; 0xdc4 <__ashldi3+0x8c>
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	ab 87       	std	Y+11, r26	; 0x0b
     dd6:	bc 87       	std	Y+12, r27	; 0x0c
     dd8:	04 c0       	rjmp	.+8      	; 0xde2 <__ashldi3+0xaa>
     dda:	76 95       	lsr	r23
     ddc:	67 95       	ror	r22
     dde:	57 95       	ror	r21
     de0:	47 95       	ror	r20
     de2:	ea 95       	dec	r30
     de4:	d2 f7       	brpl	.-12     	; 0xdda <__ashldi3+0xa2>
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	af 81       	ldd	r26, Y+7	; 0x07
     dec:	b8 85       	ldd	r27, Y+8	; 0x08
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__ashldi3+0xc0>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	aa 1f       	adc	r26, r26
     df6:	bb 1f       	adc	r27, r27
     df8:	2a 95       	dec	r18
     dfa:	d2 f7       	brpl	.-12     	; 0xdf0 <__ashldi3+0xb8>
     dfc:	48 2b       	or	r20, r24
     dfe:	59 2b       	or	r21, r25
     e00:	6a 2b       	or	r22, r26
     e02:	7b 2b       	or	r23, r27
     e04:	4d 87       	std	Y+13, r20	; 0x0d
     e06:	5e 87       	std	Y+14, r21	; 0x0e
     e08:	6f 87       	std	Y+15, r22	; 0x0f
     e0a:	78 8b       	std	Y+16, r23	; 0x10
     e0c:	29 85       	ldd	r18, Y+9	; 0x09
     e0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e10:	4b 85       	ldd	r20, Y+11	; 0x0b
     e12:	5c 85       	ldd	r21, Y+12	; 0x0c
     e14:	6d 85       	ldd	r22, Y+13	; 0x0d
     e16:	7e 85       	ldd	r23, Y+14	; 0x0e
     e18:	af 85       	ldd	r26, Y+15	; 0x0f
     e1a:	98 89       	ldd	r25, Y+16	; 0x10
     e1c:	8a 2f       	mov	r24, r26
     e1e:	60 96       	adiw	r28, 0x10	; 16
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	08 95       	ret

00000e36 <__clzsi2>:
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	7b 01       	movw	r14, r22
     e40:	8c 01       	movw	r16, r24
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	e8 16       	cp	r14, r24
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	f8 06       	cpc	r15, r24
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	08 07       	cpc	r16, r24
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	18 07       	cpc	r17, r24
     e52:	88 f4       	brcc	.+34     	; 0xe76 <__clzsi2+0x40>
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	e8 16       	cp	r14, r24
     e58:	f1 04       	cpc	r15, r1
     e5a:	01 05       	cpc	r16, r1
     e5c:	11 05       	cpc	r17, r1
     e5e:	31 f0       	breq	.+12     	; 0xe6c <__clzsi2+0x36>
     e60:	28 f0       	brcs	.+10     	; 0xe6c <__clzsi2+0x36>
     e62:	88 e0       	ldi	r24, 0x08	; 8
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	17 c0       	rjmp	.+46     	; 0xe9a <__clzsi2+0x64>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a0 e0       	ldi	r26, 0x00	; 0
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	12 c0       	rjmp	.+36     	; 0xe9a <__clzsi2+0x64>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	e8 16       	cp	r14, r24
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	f8 06       	cpc	r15, r24
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	08 07       	cpc	r16, r24
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	18 07       	cpc	r17, r24
     e86:	28 f0       	brcs	.+10     	; 0xe92 <__clzsi2+0x5c>
     e88:	88 e1       	ldi	r24, 0x18	; 24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a0 e0       	ldi	r26, 0x00	; 0
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <__clzsi2+0x64>
     e92:	80 e1       	ldi	r24, 0x10	; 16
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	20 e2       	ldi	r18, 0x20	; 32
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	28 1b       	sub	r18, r24
     ea4:	39 0b       	sbc	r19, r25
     ea6:	4a 0b       	sbc	r20, r26
     ea8:	5b 0b       	sbc	r21, r27
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <__clzsi2+0x7e>
     eac:	16 95       	lsr	r17
     eae:	07 95       	ror	r16
     eb0:	f7 94       	ror	r15
     eb2:	e7 94       	ror	r14
     eb4:	8a 95       	dec	r24
     eb6:	d2 f7       	brpl	.-12     	; 0xeac <__clzsi2+0x76>
     eb8:	f7 01       	movw	r30, r14
     eba:	e8 59       	subi	r30, 0x98	; 152
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	80 81       	ld	r24, Z
     ec0:	28 1b       	sub	r18, r24
     ec2:	31 09       	sbc	r19, r1
     ec4:	41 09       	sbc	r20, r1
     ec6:	51 09       	sbc	r21, r1
     ec8:	c9 01       	movw	r24, r18
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	08 95       	ret

00000ed4 <__pack_f>:
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	fc 01       	movw	r30, r24
     ee0:	e4 80       	ldd	r14, Z+4	; 0x04
     ee2:	f5 80       	ldd	r15, Z+5	; 0x05
     ee4:	06 81       	ldd	r16, Z+6	; 0x06
     ee6:	17 81       	ldd	r17, Z+7	; 0x07
     ee8:	d1 80       	ldd	r13, Z+1	; 0x01
     eea:	80 81       	ld	r24, Z
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	48 f4       	brcc	.+18     	; 0xf02 <__pack_f+0x2e>
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	a0 e1       	ldi	r26, 0x10	; 16
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e8 2a       	or	r14, r24
     efa:	f9 2a       	or	r15, r25
     efc:	0a 2b       	or	r16, r26
     efe:	1b 2b       	or	r17, r27
     f00:	a5 c0       	rjmp	.+330    	; 0x104c <__pack_f+0x178>
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	09 f4       	brne	.+2      	; 0xf08 <__pack_f+0x34>
     f06:	9f c0       	rjmp	.+318    	; 0x1046 <__pack_f+0x172>
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	21 f4       	brne	.+8      	; 0xf14 <__pack_f+0x40>
     f0c:	ee 24       	eor	r14, r14
     f0e:	ff 24       	eor	r15, r15
     f10:	87 01       	movw	r16, r14
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <__pack_f+0x4a>
     f14:	e1 14       	cp	r14, r1
     f16:	f1 04       	cpc	r15, r1
     f18:	01 05       	cpc	r16, r1
     f1a:	11 05       	cpc	r17, r1
     f1c:	19 f4       	brne	.+6      	; 0xf24 <__pack_f+0x50>
     f1e:	e0 e0       	ldi	r30, 0x00	; 0
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	96 c0       	rjmp	.+300    	; 0x1050 <__pack_f+0x17c>
     f24:	62 81       	ldd	r22, Z+2	; 0x02
     f26:	73 81       	ldd	r23, Z+3	; 0x03
     f28:	9f ef       	ldi	r25, 0xFF	; 255
     f2a:	62 38       	cpi	r22, 0x82	; 130
     f2c:	79 07       	cpc	r23, r25
     f2e:	0c f0       	brlt	.+2      	; 0xf32 <__pack_f+0x5e>
     f30:	5b c0       	rjmp	.+182    	; 0xfe8 <__pack_f+0x114>
     f32:	22 e8       	ldi	r18, 0x82	; 130
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	26 1b       	sub	r18, r22
     f38:	37 0b       	sbc	r19, r23
     f3a:	2a 31       	cpi	r18, 0x1A	; 26
     f3c:	31 05       	cpc	r19, r1
     f3e:	2c f0       	brlt	.+10     	; 0xf4a <__pack_f+0x76>
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	2a c0       	rjmp	.+84     	; 0xf9e <__pack_f+0xca>
     f4a:	b8 01       	movw	r22, r16
     f4c:	a7 01       	movw	r20, r14
     f4e:	02 2e       	mov	r0, r18
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <__pack_f+0x86>
     f52:	76 95       	lsr	r23
     f54:	67 95       	ror	r22
     f56:	57 95       	ror	r21
     f58:	47 95       	ror	r20
     f5a:	0a 94       	dec	r0
     f5c:	d2 f7       	brpl	.-12     	; 0xf52 <__pack_f+0x7e>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a0 e0       	ldi	r26, 0x00	; 0
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <__pack_f+0x9c>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	aa 1f       	adc	r26, r26
     f6e:	bb 1f       	adc	r27, r27
     f70:	2a 95       	dec	r18
     f72:	d2 f7       	brpl	.-12     	; 0xf68 <__pack_f+0x94>
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	a1 09       	sbc	r26, r1
     f78:	b1 09       	sbc	r27, r1
     f7a:	8e 21       	and	r24, r14
     f7c:	9f 21       	and	r25, r15
     f7e:	a0 23       	and	r26, r16
     f80:	b1 23       	and	r27, r17
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	21 f0       	breq	.+8      	; 0xf92 <__pack_f+0xbe>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	9a 01       	movw	r18, r20
     f94:	ab 01       	movw	r20, r22
     f96:	28 2b       	or	r18, r24
     f98:	39 2b       	or	r19, r25
     f9a:	4a 2b       	or	r20, r26
     f9c:	5b 2b       	or	r21, r27
     f9e:	da 01       	movw	r26, r20
     fa0:	c9 01       	movw	r24, r18
     fa2:	8f 77       	andi	r24, 0x7F	; 127
     fa4:	90 70       	andi	r25, 0x00	; 0
     fa6:	a0 70       	andi	r26, 0x00	; 0
     fa8:	b0 70       	andi	r27, 0x00	; 0
     faa:	80 34       	cpi	r24, 0x40	; 64
     fac:	91 05       	cpc	r25, r1
     fae:	a1 05       	cpc	r26, r1
     fb0:	b1 05       	cpc	r27, r1
     fb2:	39 f4       	brne	.+14     	; 0xfc2 <__pack_f+0xee>
     fb4:	27 ff       	sbrs	r18, 7
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <__pack_f+0xf6>
     fb8:	20 5c       	subi	r18, 0xC0	; 192
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	4f 4f       	sbci	r20, 0xFF	; 255
     fbe:	5f 4f       	sbci	r21, 0xFF	; 255
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <__pack_f+0xf6>
     fc2:	21 5c       	subi	r18, 0xC1	; 193
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	4f 4f       	sbci	r20, 0xFF	; 255
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255
     fca:	e0 e0       	ldi	r30, 0x00	; 0
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	20 30       	cpi	r18, 0x00	; 0
     fd0:	a0 e0       	ldi	r26, 0x00	; 0
     fd2:	3a 07       	cpc	r19, r26
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	4a 07       	cpc	r20, r26
     fd8:	a0 e4       	ldi	r26, 0x40	; 64
     fda:	5a 07       	cpc	r21, r26
     fdc:	10 f0       	brcs	.+4      	; 0xfe2 <__pack_f+0x10e>
     fde:	e1 e0       	ldi	r30, 0x01	; 1
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	79 01       	movw	r14, r18
     fe4:	8a 01       	movw	r16, r20
     fe6:	27 c0       	rjmp	.+78     	; 0x1036 <__pack_f+0x162>
     fe8:	60 38       	cpi	r22, 0x80	; 128
     fea:	71 05       	cpc	r23, r1
     fec:	64 f5       	brge	.+88     	; 0x1046 <__pack_f+0x172>
     fee:	fb 01       	movw	r30, r22
     ff0:	e1 58       	subi	r30, 0x81	; 129
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	d8 01       	movw	r26, r16
     ff6:	c7 01       	movw	r24, r14
     ff8:	8f 77       	andi	r24, 0x7F	; 127
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	a0 70       	andi	r26, 0x00	; 0
     ffe:	b0 70       	andi	r27, 0x00	; 0
    1000:	80 34       	cpi	r24, 0x40	; 64
    1002:	91 05       	cpc	r25, r1
    1004:	a1 05       	cpc	r26, r1
    1006:	b1 05       	cpc	r27, r1
    1008:	39 f4       	brne	.+14     	; 0x1018 <__pack_f+0x144>
    100a:	e7 fe       	sbrs	r14, 7
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <__pack_f+0x154>
    100e:	80 e4       	ldi	r24, 0x40	; 64
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	a0 e0       	ldi	r26, 0x00	; 0
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <__pack_f+0x14c>
    1018:	8f e3       	ldi	r24, 0x3F	; 63
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	a0 e0       	ldi	r26, 0x00	; 0
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e8 0e       	add	r14, r24
    1022:	f9 1e       	adc	r15, r25
    1024:	0a 1f       	adc	r16, r26
    1026:	1b 1f       	adc	r17, r27
    1028:	17 ff       	sbrs	r17, 7
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <__pack_f+0x162>
    102c:	16 95       	lsr	r17
    102e:	07 95       	ror	r16
    1030:	f7 94       	ror	r15
    1032:	e7 94       	ror	r14
    1034:	31 96       	adiw	r30, 0x01	; 1
    1036:	87 e0       	ldi	r24, 0x07	; 7
    1038:	16 95       	lsr	r17
    103a:	07 95       	ror	r16
    103c:	f7 94       	ror	r15
    103e:	e7 94       	ror	r14
    1040:	8a 95       	dec	r24
    1042:	d1 f7       	brne	.-12     	; 0x1038 <__pack_f+0x164>
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <__pack_f+0x17c>
    1046:	ee 24       	eor	r14, r14
    1048:	ff 24       	eor	r15, r15
    104a:	87 01       	movw	r16, r14
    104c:	ef ef       	ldi	r30, 0xFF	; 255
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	6e 2f       	mov	r22, r30
    1052:	67 95       	ror	r22
    1054:	66 27       	eor	r22, r22
    1056:	67 95       	ror	r22
    1058:	90 2f       	mov	r25, r16
    105a:	9f 77       	andi	r25, 0x7F	; 127
    105c:	d7 94       	ror	r13
    105e:	dd 24       	eor	r13, r13
    1060:	d7 94       	ror	r13
    1062:	8e 2f       	mov	r24, r30
    1064:	86 95       	lsr	r24
    1066:	49 2f       	mov	r20, r25
    1068:	46 2b       	or	r20, r22
    106a:	58 2f       	mov	r21, r24
    106c:	5d 29       	or	r21, r13
    106e:	b7 01       	movw	r22, r14
    1070:	ca 01       	movw	r24, r20
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	08 95       	ret

0000107e <__unpack_f>:
    107e:	fc 01       	movw	r30, r24
    1080:	db 01       	movw	r26, r22
    1082:	40 81       	ld	r20, Z
    1084:	51 81       	ldd	r21, Z+1	; 0x01
    1086:	22 81       	ldd	r18, Z+2	; 0x02
    1088:	62 2f       	mov	r22, r18
    108a:	6f 77       	andi	r22, 0x7F	; 127
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	22 1f       	adc	r18, r18
    1090:	22 27       	eor	r18, r18
    1092:	22 1f       	adc	r18, r18
    1094:	93 81       	ldd	r25, Z+3	; 0x03
    1096:	89 2f       	mov	r24, r25
    1098:	88 0f       	add	r24, r24
    109a:	82 2b       	or	r24, r18
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	99 1f       	adc	r25, r25
    10a2:	99 27       	eor	r25, r25
    10a4:	99 1f       	adc	r25, r25
    10a6:	11 96       	adiw	r26, 0x01	; 1
    10a8:	9c 93       	st	X, r25
    10aa:	11 97       	sbiw	r26, 0x01	; 1
    10ac:	21 15       	cp	r18, r1
    10ae:	31 05       	cpc	r19, r1
    10b0:	a9 f5       	brne	.+106    	; 0x111c <__unpack_f+0x9e>
    10b2:	41 15       	cp	r20, r1
    10b4:	51 05       	cpc	r21, r1
    10b6:	61 05       	cpc	r22, r1
    10b8:	71 05       	cpc	r23, r1
    10ba:	11 f4       	brne	.+4      	; 0x10c0 <__unpack_f+0x42>
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	37 c0       	rjmp	.+110    	; 0x112e <__unpack_f+0xb0>
    10c0:	82 e8       	ldi	r24, 0x82	; 130
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    10c4:	13 96       	adiw	r26, 0x03	; 3
    10c6:	9c 93       	st	X, r25
    10c8:	8e 93       	st	-X, r24
    10ca:	12 97       	sbiw	r26, 0x02	; 2
    10cc:	9a 01       	movw	r18, r20
    10ce:	ab 01       	movw	r20, r22
    10d0:	67 e0       	ldi	r22, 0x07	; 7
    10d2:	22 0f       	add	r18, r18
    10d4:	33 1f       	adc	r19, r19
    10d6:	44 1f       	adc	r20, r20
    10d8:	55 1f       	adc	r21, r21
    10da:	6a 95       	dec	r22
    10dc:	d1 f7       	brne	.-12     	; 0x10d2 <__unpack_f+0x54>
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	8c 93       	st	X, r24
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <__unpack_f+0x80>
    10e4:	22 0f       	add	r18, r18
    10e6:	33 1f       	adc	r19, r19
    10e8:	44 1f       	adc	r20, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	12 96       	adiw	r26, 0x02	; 2
    10ee:	8d 91       	ld	r24, X+
    10f0:	9c 91       	ld	r25, X
    10f2:	13 97       	sbiw	r26, 0x03	; 3
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	13 96       	adiw	r26, 0x03	; 3
    10f8:	9c 93       	st	X, r25
    10fa:	8e 93       	st	-X, r24
    10fc:	12 97       	sbiw	r26, 0x02	; 2
    10fe:	20 30       	cpi	r18, 0x00	; 0
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	38 07       	cpc	r19, r24
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	48 07       	cpc	r20, r24
    1108:	80 e4       	ldi	r24, 0x40	; 64
    110a:	58 07       	cpc	r21, r24
    110c:	58 f3       	brcs	.-42     	; 0x10e4 <__unpack_f+0x66>
    110e:	14 96       	adiw	r26, 0x04	; 4
    1110:	2d 93       	st	X+, r18
    1112:	3d 93       	st	X+, r19
    1114:	4d 93       	st	X+, r20
    1116:	5c 93       	st	X, r21
    1118:	17 97       	sbiw	r26, 0x07	; 7
    111a:	08 95       	ret
    111c:	2f 3f       	cpi	r18, 0xFF	; 255
    111e:	31 05       	cpc	r19, r1
    1120:	79 f4       	brne	.+30     	; 0x1140 <__unpack_f+0xc2>
    1122:	41 15       	cp	r20, r1
    1124:	51 05       	cpc	r21, r1
    1126:	61 05       	cpc	r22, r1
    1128:	71 05       	cpc	r23, r1
    112a:	19 f4       	brne	.+6      	; 0x1132 <__unpack_f+0xb4>
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	8c 93       	st	X, r24
    1130:	08 95       	ret
    1132:	64 ff       	sbrs	r22, 4
    1134:	03 c0       	rjmp	.+6      	; 0x113c <__unpack_f+0xbe>
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	8c 93       	st	X, r24
    113a:	12 c0       	rjmp	.+36     	; 0x1160 <__unpack_f+0xe2>
    113c:	1c 92       	st	X, r1
    113e:	10 c0       	rjmp	.+32     	; 0x1160 <__unpack_f+0xe2>
    1140:	2f 57       	subi	r18, 0x7F	; 127
    1142:	30 40       	sbci	r19, 0x00	; 0
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	3c 93       	st	X, r19
    1148:	2e 93       	st	-X, r18
    114a:	12 97       	sbiw	r26, 0x02	; 2
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	8c 93       	st	X, r24
    1150:	87 e0       	ldi	r24, 0x07	; 7
    1152:	44 0f       	add	r20, r20
    1154:	55 1f       	adc	r21, r21
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	8a 95       	dec	r24
    115c:	d1 f7       	brne	.-12     	; 0x1152 <__unpack_f+0xd4>
    115e:	70 64       	ori	r23, 0x40	; 64
    1160:	14 96       	adiw	r26, 0x04	; 4
    1162:	4d 93       	st	X+, r20
    1164:	5d 93       	st	X+, r21
    1166:	6d 93       	st	X+, r22
    1168:	7c 93       	st	X, r23
    116a:	17 97       	sbiw	r26, 0x07	; 7
    116c:	08 95       	ret

0000116e <__fpcmp_parts_f>:
    116e:	1f 93       	push	r17
    1170:	dc 01       	movw	r26, r24
    1172:	fb 01       	movw	r30, r22
    1174:	9c 91       	ld	r25, X
    1176:	92 30       	cpi	r25, 0x02	; 2
    1178:	08 f4       	brcc	.+2      	; 0x117c <__fpcmp_parts_f+0xe>
    117a:	47 c0       	rjmp	.+142    	; 0x120a <__fpcmp_parts_f+0x9c>
    117c:	80 81       	ld	r24, Z
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	08 f4       	brcc	.+2      	; 0x1184 <__fpcmp_parts_f+0x16>
    1182:	43 c0       	rjmp	.+134    	; 0x120a <__fpcmp_parts_f+0x9c>
    1184:	94 30       	cpi	r25, 0x04	; 4
    1186:	51 f4       	brne	.+20     	; 0x119c <__fpcmp_parts_f+0x2e>
    1188:	11 96       	adiw	r26, 0x01	; 1
    118a:	1c 91       	ld	r17, X
    118c:	84 30       	cpi	r24, 0x04	; 4
    118e:	99 f5       	brne	.+102    	; 0x11f6 <__fpcmp_parts_f+0x88>
    1190:	81 81       	ldd	r24, Z+1	; 0x01
    1192:	68 2f       	mov	r22, r24
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	61 1b       	sub	r22, r17
    1198:	71 09       	sbc	r23, r1
    119a:	3f c0       	rjmp	.+126    	; 0x121a <__fpcmp_parts_f+0xac>
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	21 f0       	breq	.+8      	; 0x11a8 <__fpcmp_parts_f+0x3a>
    11a0:	92 30       	cpi	r25, 0x02	; 2
    11a2:	31 f4       	brne	.+12     	; 0x11b0 <__fpcmp_parts_f+0x42>
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	b9 f1       	breq	.+110    	; 0x1216 <__fpcmp_parts_f+0xa8>
    11a8:	81 81       	ldd	r24, Z+1	; 0x01
    11aa:	88 23       	and	r24, r24
    11ac:	89 f1       	breq	.+98     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11ae:	2d c0       	rjmp	.+90     	; 0x120a <__fpcmp_parts_f+0x9c>
    11b0:	11 96       	adiw	r26, 0x01	; 1
    11b2:	1c 91       	ld	r17, X
    11b4:	11 97       	sbiw	r26, 0x01	; 1
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	f1 f0       	breq	.+60     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11ba:	81 81       	ldd	r24, Z+1	; 0x01
    11bc:	18 17       	cp	r17, r24
    11be:	d9 f4       	brne	.+54     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11c0:	12 96       	adiw	r26, 0x02	; 2
    11c2:	2d 91       	ld	r18, X+
    11c4:	3c 91       	ld	r19, X
    11c6:	13 97       	sbiw	r26, 0x03	; 3
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	93 81       	ldd	r25, Z+3	; 0x03
    11cc:	82 17       	cp	r24, r18
    11ce:	93 07       	cpc	r25, r19
    11d0:	94 f0       	brlt	.+36     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11d2:	28 17       	cp	r18, r24
    11d4:	39 07       	cpc	r19, r25
    11d6:	bc f0       	brlt	.+46     	; 0x1206 <__fpcmp_parts_f+0x98>
    11d8:	14 96       	adiw	r26, 0x04	; 4
    11da:	8d 91       	ld	r24, X+
    11dc:	9d 91       	ld	r25, X+
    11de:	0d 90       	ld	r0, X+
    11e0:	bc 91       	ld	r27, X
    11e2:	a0 2d       	mov	r26, r0
    11e4:	24 81       	ldd	r18, Z+4	; 0x04
    11e6:	35 81       	ldd	r19, Z+5	; 0x05
    11e8:	46 81       	ldd	r20, Z+6	; 0x06
    11ea:	57 81       	ldd	r21, Z+7	; 0x07
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	4a 07       	cpc	r20, r26
    11f2:	5b 07       	cpc	r21, r27
    11f4:	18 f4       	brcc	.+6      	; 0x11fc <__fpcmp_parts_f+0x8e>
    11f6:	11 23       	and	r17, r17
    11f8:	41 f0       	breq	.+16     	; 0x120a <__fpcmp_parts_f+0x9c>
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11fc:	82 17       	cp	r24, r18
    11fe:	93 07       	cpc	r25, r19
    1200:	a4 07       	cpc	r26, r20
    1202:	b5 07       	cpc	r27, r21
    1204:	40 f4       	brcc	.+16     	; 0x1216 <__fpcmp_parts_f+0xa8>
    1206:	11 23       	and	r17, r17
    1208:	19 f0       	breq	.+6      	; 0x1210 <__fpcmp_parts_f+0xa2>
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	05 c0       	rjmp	.+10     	; 0x121a <__fpcmp_parts_f+0xac>
    1210:	6f ef       	ldi	r22, 0xFF	; 255
    1212:	7f ef       	ldi	r23, 0xFF	; 255
    1214:	02 c0       	rjmp	.+4      	; 0x121a <__fpcmp_parts_f+0xac>
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	cb 01       	movw	r24, r22
    121c:	1f 91       	pop	r17
    121e:	08 95       	ret

00001220 <CLCD_vInit>:
 *                                              *-------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vInit(void)
{
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	c6 54       	subi	r28, 0x46	; 70
    122e:	d0 40       	sbci	r29, 0x00	; 0
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	fe 01       	movw	r30, r28
    123c:	ed 5b       	subi	r30, 0xBD	; 189
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	a8 e4       	ldi	r26, 0x48	; 72
    1246:	b2 e4       	ldi	r27, 0x42	; 66
    1248:	80 83       	st	Z, r24
    124a:	91 83       	std	Z+1, r25	; 0x01
    124c:	a2 83       	std	Z+2, r26	; 0x02
    124e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1250:	8e 01       	movw	r16, r28
    1252:	01 5c       	subi	r16, 0xC1	; 193
    1254:	1f 4f       	sbci	r17, 0xFF	; 255
    1256:	fe 01       	movw	r30, r28
    1258:	ed 5b       	subi	r30, 0xBD	; 189
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	60 81       	ld	r22, Z
    125e:	71 81       	ldd	r23, Z+1	; 0x01
    1260:	82 81       	ldd	r24, Z+2	; 0x02
    1262:	93 81       	ldd	r25, Z+3	; 0x03
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	4a ef       	ldi	r20, 0xFA	; 250
    126a:	54 e4       	ldi	r21, 0x44	; 68
    126c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	f8 01       	movw	r30, r16
    1276:	80 83       	st	Z, r24
    1278:	91 83       	std	Z+1, r25	; 0x01
    127a:	a2 83       	std	Z+2, r26	; 0x02
    127c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    127e:	fe 01       	movw	r30, r28
    1280:	ff 96       	adiw	r30, 0x3f	; 63
    1282:	60 81       	ld	r22, Z
    1284:	71 81       	ldd	r23, Z+1	; 0x01
    1286:	82 81       	ldd	r24, Z+2	; 0x02
    1288:	93 81       	ldd	r25, Z+3	; 0x03
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e8       	ldi	r20, 0x80	; 128
    1290:	5f e3       	ldi	r21, 0x3F	; 63
    1292:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1296:	88 23       	and	r24, r24
    1298:	2c f4       	brge	.+10     	; 0x12a4 <CLCD_vInit+0x84>
		__ticks = 1;
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	9e af       	std	Y+62, r25	; 0x3e
    12a0:	8d af       	std	Y+61, r24	; 0x3d
    12a2:	46 c0       	rjmp	.+140    	; 0x1330 <CLCD_vInit+0x110>
	else if (__tmp > 65535)
    12a4:	fe 01       	movw	r30, r28
    12a6:	ff 96       	adiw	r30, 0x3f	; 63
    12a8:	60 81       	ld	r22, Z
    12aa:	71 81       	ldd	r23, Z+1	; 0x01
    12ac:	82 81       	ldd	r24, Z+2	; 0x02
    12ae:	93 81       	ldd	r25, Z+3	; 0x03
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	3f ef       	ldi	r19, 0xFF	; 255
    12b4:	4f e7       	ldi	r20, 0x7F	; 127
    12b6:	57 e4       	ldi	r21, 0x47	; 71
    12b8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    12bc:	18 16       	cp	r1, r24
    12be:	64 f5       	brge	.+88     	; 0x1318 <CLCD_vInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c0:	fe 01       	movw	r30, r28
    12c2:	ed 5b       	subi	r30, 0xBD	; 189
    12c4:	ff 4f       	sbci	r31, 0xFF	; 255
    12c6:	60 81       	ld	r22, Z
    12c8:	71 81       	ldd	r23, Z+1	; 0x01
    12ca:	82 81       	ldd	r24, Z+2	; 0x02
    12cc:	93 81       	ldd	r25, Z+3	; 0x03
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e2       	ldi	r20, 0x20	; 32
    12d4:	51 e4       	ldi	r21, 0x41	; 65
    12d6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	9e af       	std	Y+62, r25	; 0x3e
    12ec:	8d af       	std	Y+61, r24	; 0x3d
    12ee:	0f c0       	rjmp	.+30     	; 0x130e <CLCD_vInit+0xee>
    12f0:	88 ec       	ldi	r24, 0xC8	; 200
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9c af       	std	Y+60, r25	; 0x3c
    12f6:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12f8:	8b ad       	ldd	r24, Y+59	; 0x3b
    12fa:	9c ad       	ldd	r25, Y+60	; 0x3c
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <CLCD_vInit+0xdc>
    1300:	9c af       	std	Y+60, r25	; 0x3c
    1302:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1304:	8d ad       	ldd	r24, Y+61	; 0x3d
    1306:	9e ad       	ldd	r25, Y+62	; 0x3e
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	9e af       	std	Y+62, r25	; 0x3e
    130c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1310:	9e ad       	ldd	r25, Y+62	; 0x3e
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	69 f7       	brne	.-38     	; 0x12f0 <CLCD_vInit+0xd0>
    1316:	16 c0       	rjmp	.+44     	; 0x1344 <CLCD_vInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1318:	fe 01       	movw	r30, r28
    131a:	ff 96       	adiw	r30, 0x3f	; 63
    131c:	60 81       	ld	r22, Z
    131e:	71 81       	ldd	r23, Z+1	; 0x01
    1320:	82 81       	ldd	r24, Z+2	; 0x02
    1322:	93 81       	ldd	r25, Z+3	; 0x03
    1324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	9e af       	std	Y+62, r25	; 0x3e
    132e:	8d af       	std	Y+61, r24	; 0x3d
    1330:	8d ad       	ldd	r24, Y+61	; 0x3d
    1332:	9e ad       	ldd	r25, Y+62	; 0x3e
    1334:	9a af       	std	Y+58, r25	; 0x3a
    1336:	89 af       	std	Y+57, r24	; 0x39
    1338:	89 ad       	ldd	r24, Y+57	; 0x39
    133a:	9a ad       	ldd	r25, Y+58	; 0x3a
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	f1 f7       	brne	.-4      	; 0x133c <CLCD_vInit+0x11c>
    1340:	9a af       	std	Y+58, r25	; 0x3a
    1342:	89 af       	std	Y+57, r24	; 0x39
  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    8 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
#if CLCD_MODE == 8

  _delay_ms(50); // must wait more than 30 ms befor any action (VDD rises to 4.5 v)

  DIO_enumSetPortDir(CLCD_DATA_PORT, DIO_PORT_OUTPUT);
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	6f ef       	ldi	r22, 0xFF	; 255
    1348:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <DIO_enumSetPortDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_OUTPUT);
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	62 e0       	ldi	r22, 0x02	; 2
    1350:	41 e0       	ldi	r20, 0x01	; 1
    1352:	0e 94 a0 10 	call	0x2140	; 0x2140 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_OUTPUT);
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	61 e0       	ldi	r22, 0x01	; 1
    135a:	41 e0       	ldi	r20, 0x01	; 1
    135c:	0e 94 a0 10 	call	0x2140	; 0x2140 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_OUTPUT);
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	41 e0       	ldi	r20, 0x01	; 1
    1366:	0e 94 a0 10 	call	0x2140	; 0x2140 <DIO_enumSetPinDir>

  CLCD_vSendCommand(CLCD_HOME);
    136a:	82 e0       	ldi	r24, 0x02	; 2
    136c:	0e 94 b1 0b 	call	0x1762	; 0x1762 <CLCD_vSendCommand>
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	a0 e2       	ldi	r26, 0x20	; 32
    1376:	b1 e4       	ldi	r27, 0x41	; 65
    1378:	8d ab       	std	Y+53, r24	; 0x35
    137a:	9e ab       	std	Y+54, r25	; 0x36
    137c:	af ab       	std	Y+55, r26	; 0x37
    137e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1380:	6d a9       	ldd	r22, Y+53	; 0x35
    1382:	7e a9       	ldd	r23, Y+54	; 0x36
    1384:	8f a9       	ldd	r24, Y+55	; 0x37
    1386:	98 ad       	ldd	r25, Y+56	; 0x38
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	4a ef       	ldi	r20, 0xFA	; 250
    138e:	54 e4       	ldi	r21, 0x44	; 68
    1390:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	89 ab       	std	Y+49, r24	; 0x31
    139a:	9a ab       	std	Y+50, r25	; 0x32
    139c:	ab ab       	std	Y+51, r26	; 0x33
    139e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13a0:	69 a9       	ldd	r22, Y+49	; 0x31
    13a2:	7a a9       	ldd	r23, Y+50	; 0x32
    13a4:	8b a9       	ldd	r24, Y+51	; 0x33
    13a6:	9c a9       	ldd	r25, Y+52	; 0x34
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e8       	ldi	r20, 0x80	; 128
    13ae:	5f e3       	ldi	r21, 0x3F	; 63
    13b0:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    13b4:	88 23       	and	r24, r24
    13b6:	2c f4       	brge	.+10     	; 0x13c2 <CLCD_vInit+0x1a2>
		__ticks = 1;
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	98 ab       	std	Y+48, r25	; 0x30
    13be:	8f a7       	std	Y+47, r24	; 0x2f
    13c0:	3f c0       	rjmp	.+126    	; 0x1440 <CLCD_vInit+0x220>
	else if (__tmp > 65535)
    13c2:	69 a9       	ldd	r22, Y+49	; 0x31
    13c4:	7a a9       	ldd	r23, Y+50	; 0x32
    13c6:	8b a9       	ldd	r24, Y+51	; 0x33
    13c8:	9c a9       	ldd	r25, Y+52	; 0x34
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	3f ef       	ldi	r19, 0xFF	; 255
    13ce:	4f e7       	ldi	r20, 0x7F	; 127
    13d0:	57 e4       	ldi	r21, 0x47	; 71
    13d2:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    13d6:	18 16       	cp	r1, r24
    13d8:	4c f5       	brge	.+82     	; 0x142c <CLCD_vInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13da:	6d a9       	ldd	r22, Y+53	; 0x35
    13dc:	7e a9       	ldd	r23, Y+54	; 0x36
    13de:	8f a9       	ldd	r24, Y+55	; 0x37
    13e0:	98 ad       	ldd	r25, Y+56	; 0x38
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e2       	ldi	r20, 0x20	; 32
    13e8:	51 e4       	ldi	r21, 0x41	; 65
    13ea:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	bc 01       	movw	r22, r24
    13f4:	cd 01       	movw	r24, r26
    13f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	98 ab       	std	Y+48, r25	; 0x30
    1400:	8f a7       	std	Y+47, r24	; 0x2f
    1402:	0f c0       	rjmp	.+30     	; 0x1422 <CLCD_vInit+0x202>
    1404:	88 ec       	ldi	r24, 0xC8	; 200
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	9e a7       	std	Y+46, r25	; 0x2e
    140a:	8d a7       	std	Y+45, r24	; 0x2d
    140c:	8d a5       	ldd	r24, Y+45	; 0x2d
    140e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	f1 f7       	brne	.-4      	; 0x1410 <CLCD_vInit+0x1f0>
    1414:	9e a7       	std	Y+46, r25	; 0x2e
    1416:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1418:	8f a5       	ldd	r24, Y+47	; 0x2f
    141a:	98 a9       	ldd	r25, Y+48	; 0x30
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	98 ab       	std	Y+48, r25	; 0x30
    1420:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1422:	8f a5       	ldd	r24, Y+47	; 0x2f
    1424:	98 a9       	ldd	r25, Y+48	; 0x30
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	69 f7       	brne	.-38     	; 0x1404 <CLCD_vInit+0x1e4>
    142a:	14 c0       	rjmp	.+40     	; 0x1454 <CLCD_vInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142c:	69 a9       	ldd	r22, Y+49	; 0x31
    142e:	7a a9       	ldd	r23, Y+50	; 0x32
    1430:	8b a9       	ldd	r24, Y+51	; 0x33
    1432:	9c a9       	ldd	r25, Y+52	; 0x34
    1434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	98 ab       	std	Y+48, r25	; 0x30
    143e:	8f a7       	std	Y+47, r24	; 0x2f
    1440:	8f a5       	ldd	r24, Y+47	; 0x2f
    1442:	98 a9       	ldd	r25, Y+48	; 0x30
    1444:	9c a7       	std	Y+44, r25	; 0x2c
    1446:	8b a7       	std	Y+43, r24	; 0x2b
    1448:	8b a5       	ldd	r24, Y+43	; 0x2b
    144a:	9c a5       	ldd	r25, Y+44	; 0x2c
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	f1 f7       	brne	.-4      	; 0x144c <CLCD_vInit+0x22c>
    1450:	9c a7       	std	Y+44, r25	; 0x2c
    1452:	8b a7       	std	Y+43, r24	; 0x2b
  _delay_ms(10);

  CLCD_vSendCommand(EIGHT_BITS);
    1454:	88 e3       	ldi	r24, 0x38	; 56
    1456:	0e 94 b1 0b 	call	0x1762	; 0x1762 <CLCD_vSendCommand>
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	a0 e8       	ldi	r26, 0x80	; 128
    1460:	bf e3       	ldi	r27, 0x3F	; 63
    1462:	8f a3       	std	Y+39, r24	; 0x27
    1464:	98 a7       	std	Y+40, r25	; 0x28
    1466:	a9 a7       	std	Y+41, r26	; 0x29
    1468:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146a:	6f a1       	ldd	r22, Y+39	; 0x27
    146c:	78 a5       	ldd	r23, Y+40	; 0x28
    146e:	89 a5       	ldd	r24, Y+41	; 0x29
    1470:	9a a5       	ldd	r25, Y+42	; 0x2a
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	4a ef       	ldi	r20, 0xFA	; 250
    1478:	54 e4       	ldi	r21, 0x44	; 68
    147a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	8b a3       	std	Y+35, r24	; 0x23
    1484:	9c a3       	std	Y+36, r25	; 0x24
    1486:	ad a3       	std	Y+37, r26	; 0x25
    1488:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    148a:	6b a1       	ldd	r22, Y+35	; 0x23
    148c:	7c a1       	ldd	r23, Y+36	; 0x24
    148e:	8d a1       	ldd	r24, Y+37	; 0x25
    1490:	9e a1       	ldd	r25, Y+38	; 0x26
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	40 e8       	ldi	r20, 0x80	; 128
    1498:	5f e3       	ldi	r21, 0x3F	; 63
    149a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    149e:	88 23       	and	r24, r24
    14a0:	2c f4       	brge	.+10     	; 0x14ac <CLCD_vInit+0x28c>
		__ticks = 1;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	9a a3       	std	Y+34, r25	; 0x22
    14a8:	89 a3       	std	Y+33, r24	; 0x21
    14aa:	3f c0       	rjmp	.+126    	; 0x152a <CLCD_vInit+0x30a>
	else if (__tmp > 65535)
    14ac:	6b a1       	ldd	r22, Y+35	; 0x23
    14ae:	7c a1       	ldd	r23, Y+36	; 0x24
    14b0:	8d a1       	ldd	r24, Y+37	; 0x25
    14b2:	9e a1       	ldd	r25, Y+38	; 0x26
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	3f ef       	ldi	r19, 0xFF	; 255
    14b8:	4f e7       	ldi	r20, 0x7F	; 127
    14ba:	57 e4       	ldi	r21, 0x47	; 71
    14bc:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    14c0:	18 16       	cp	r1, r24
    14c2:	4c f5       	brge	.+82     	; 0x1516 <CLCD_vInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c4:	6f a1       	ldd	r22, Y+39	; 0x27
    14c6:	78 a5       	ldd	r23, Y+40	; 0x28
    14c8:	89 a5       	ldd	r24, Y+41	; 0x29
    14ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e2       	ldi	r20, 0x20	; 32
    14d2:	51 e4       	ldi	r21, 0x41	; 65
    14d4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	bc 01       	movw	r22, r24
    14de:	cd 01       	movw	r24, r26
    14e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	9a a3       	std	Y+34, r25	; 0x22
    14ea:	89 a3       	std	Y+33, r24	; 0x21
    14ec:	0f c0       	rjmp	.+30     	; 0x150c <CLCD_vInit+0x2ec>
    14ee:	88 ec       	ldi	r24, 0xC8	; 200
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	98 a3       	std	Y+32, r25	; 0x20
    14f4:	8f 8f       	std	Y+31, r24	; 0x1f
    14f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14f8:	98 a1       	ldd	r25, Y+32	; 0x20
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <CLCD_vInit+0x2da>
    14fe:	98 a3       	std	Y+32, r25	; 0x20
    1500:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1502:	89 a1       	ldd	r24, Y+33	; 0x21
    1504:	9a a1       	ldd	r25, Y+34	; 0x22
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	9a a3       	std	Y+34, r25	; 0x22
    150a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150c:	89 a1       	ldd	r24, Y+33	; 0x21
    150e:	9a a1       	ldd	r25, Y+34	; 0x22
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	69 f7       	brne	.-38     	; 0x14ee <CLCD_vInit+0x2ce>
    1514:	14 c0       	rjmp	.+40     	; 0x153e <CLCD_vInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1516:	6b a1       	ldd	r22, Y+35	; 0x23
    1518:	7c a1       	ldd	r23, Y+36	; 0x24
    151a:	8d a1       	ldd	r24, Y+37	; 0x25
    151c:	9e a1       	ldd	r25, Y+38	; 0x26
    151e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	9a a3       	std	Y+34, r25	; 0x22
    1528:	89 a3       	std	Y+33, r24	; 0x21
    152a:	89 a1       	ldd	r24, Y+33	; 0x21
    152c:	9a a1       	ldd	r25, Y+34	; 0x22
    152e:	9e 8f       	std	Y+30, r25	; 0x1e
    1530:	8d 8f       	std	Y+29, r24	; 0x1d
    1532:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1534:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	f1 f7       	brne	.-4      	; 0x1536 <CLCD_vInit+0x316>
    153a:	9e 8f       	std	Y+30, r25	; 0x1e
    153c:	8d 8f       	std	Y+29, r24	; 0x1d
  _delay_ms(1);

  CLCD_vSendCommand(CLCD_DISPLAY_CURSOR);
    153e:	8e e0       	ldi	r24, 0x0E	; 14
    1540:	0e 94 b1 0b 	call	0x1762	; 0x1762 <CLCD_vSendCommand>
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	a0 e8       	ldi	r26, 0x80	; 128
    154a:	bf e3       	ldi	r27, 0x3F	; 63
    154c:	89 8f       	std	Y+25, r24	; 0x19
    154e:	9a 8f       	std	Y+26, r25	; 0x1a
    1550:	ab 8f       	std	Y+27, r26	; 0x1b
    1552:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1554:	69 8d       	ldd	r22, Y+25	; 0x19
    1556:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1558:	8b 8d       	ldd	r24, Y+27	; 0x1b
    155a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	4a ef       	ldi	r20, 0xFA	; 250
    1562:	54 e4       	ldi	r21, 0x44	; 68
    1564:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	8d 8b       	std	Y+21, r24	; 0x15
    156e:	9e 8b       	std	Y+22, r25	; 0x16
    1570:	af 8b       	std	Y+23, r26	; 0x17
    1572:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1574:	6d 89       	ldd	r22, Y+21	; 0x15
    1576:	7e 89       	ldd	r23, Y+22	; 0x16
    1578:	8f 89       	ldd	r24, Y+23	; 0x17
    157a:	98 8d       	ldd	r25, Y+24	; 0x18
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e8       	ldi	r20, 0x80	; 128
    1582:	5f e3       	ldi	r21, 0x3F	; 63
    1584:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1588:	88 23       	and	r24, r24
    158a:	2c f4       	brge	.+10     	; 0x1596 <CLCD_vInit+0x376>
		__ticks = 1;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	9c 8b       	std	Y+20, r25	; 0x14
    1592:	8b 8b       	std	Y+19, r24	; 0x13
    1594:	3f c0       	rjmp	.+126    	; 0x1614 <CLCD_vInit+0x3f4>
	else if (__tmp > 65535)
    1596:	6d 89       	ldd	r22, Y+21	; 0x15
    1598:	7e 89       	ldd	r23, Y+22	; 0x16
    159a:	8f 89       	ldd	r24, Y+23	; 0x17
    159c:	98 8d       	ldd	r25, Y+24	; 0x18
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	3f ef       	ldi	r19, 0xFF	; 255
    15a2:	4f e7       	ldi	r20, 0x7F	; 127
    15a4:	57 e4       	ldi	r21, 0x47	; 71
    15a6:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    15aa:	18 16       	cp	r1, r24
    15ac:	4c f5       	brge	.+82     	; 0x1600 <CLCD_vInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ae:	69 8d       	ldd	r22, Y+25	; 0x19
    15b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e2       	ldi	r20, 0x20	; 32
    15bc:	51 e4       	ldi	r21, 0x41	; 65
    15be:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	bc 01       	movw	r22, r24
    15c8:	cd 01       	movw	r24, r26
    15ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	9c 8b       	std	Y+20, r25	; 0x14
    15d4:	8b 8b       	std	Y+19, r24	; 0x13
    15d6:	0f c0       	rjmp	.+30     	; 0x15f6 <CLCD_vInit+0x3d6>
    15d8:	88 ec       	ldi	r24, 0xC8	; 200
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	9a 8b       	std	Y+18, r25	; 0x12
    15de:	89 8b       	std	Y+17, r24	; 0x11
    15e0:	89 89       	ldd	r24, Y+17	; 0x11
    15e2:	9a 89       	ldd	r25, Y+18	; 0x12
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <CLCD_vInit+0x3c4>
    15e8:	9a 8b       	std	Y+18, r25	; 0x12
    15ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ec:	8b 89       	ldd	r24, Y+19	; 0x13
    15ee:	9c 89       	ldd	r25, Y+20	; 0x14
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	9c 8b       	std	Y+20, r25	; 0x14
    15f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f6:	8b 89       	ldd	r24, Y+19	; 0x13
    15f8:	9c 89       	ldd	r25, Y+20	; 0x14
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	69 f7       	brne	.-38     	; 0x15d8 <CLCD_vInit+0x3b8>
    15fe:	14 c0       	rjmp	.+40     	; 0x1628 <CLCD_vInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1600:	6d 89       	ldd	r22, Y+21	; 0x15
    1602:	7e 89       	ldd	r23, Y+22	; 0x16
    1604:	8f 89       	ldd	r24, Y+23	; 0x17
    1606:	98 8d       	ldd	r25, Y+24	; 0x18
    1608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	9c 8b       	std	Y+20, r25	; 0x14
    1612:	8b 8b       	std	Y+19, r24	; 0x13
    1614:	8b 89       	ldd	r24, Y+19	; 0x13
    1616:	9c 89       	ldd	r25, Y+20	; 0x14
    1618:	98 8b       	std	Y+16, r25	; 0x10
    161a:	8f 87       	std	Y+15, r24	; 0x0f
    161c:	8f 85       	ldd	r24, Y+15	; 0x0f
    161e:	98 89       	ldd	r25, Y+16	; 0x10
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	f1 f7       	brne	.-4      	; 0x1620 <CLCD_vInit+0x400>
    1624:	98 8b       	std	Y+16, r25	; 0x10
    1626:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);

  CLCD_vClearScreen();
    1628:	0e 94 cc 0c 	call	0x1998	; 0x1998 <CLCD_vClearScreen>

  CLCD_vSendCommand(CLCD_ENTRY_MODE);
    162c:	86 e0       	ldi	r24, 0x06	; 6
    162e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <CLCD_vSendCommand>
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	a0 e8       	ldi	r26, 0x80	; 128
    1638:	bf e3       	ldi	r27, 0x3F	; 63
    163a:	8b 87       	std	Y+11, r24	; 0x0b
    163c:	9c 87       	std	Y+12, r25	; 0x0c
    163e:	ad 87       	std	Y+13, r26	; 0x0d
    1640:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1642:	6b 85       	ldd	r22, Y+11	; 0x0b
    1644:	7c 85       	ldd	r23, Y+12	; 0x0c
    1646:	8d 85       	ldd	r24, Y+13	; 0x0d
    1648:	9e 85       	ldd	r25, Y+14	; 0x0e
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	4a ef       	ldi	r20, 0xFA	; 250
    1650:	54 e4       	ldi	r21, 0x44	; 68
    1652:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	8f 83       	std	Y+7, r24	; 0x07
    165c:	98 87       	std	Y+8, r25	; 0x08
    165e:	a9 87       	std	Y+9, r26	; 0x09
    1660:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1662:	6f 81       	ldd	r22, Y+7	; 0x07
    1664:	78 85       	ldd	r23, Y+8	; 0x08
    1666:	89 85       	ldd	r24, Y+9	; 0x09
    1668:	9a 85       	ldd	r25, Y+10	; 0x0a
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e8       	ldi	r20, 0x80	; 128
    1670:	5f e3       	ldi	r21, 0x3F	; 63
    1672:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1676:	88 23       	and	r24, r24
    1678:	2c f4       	brge	.+10     	; 0x1684 <CLCD_vInit+0x464>
		__ticks = 1;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	9e 83       	std	Y+6, r25	; 0x06
    1680:	8d 83       	std	Y+5, r24	; 0x05
    1682:	3f c0       	rjmp	.+126    	; 0x1702 <CLCD_vInit+0x4e2>
	else if (__tmp > 65535)
    1684:	6f 81       	ldd	r22, Y+7	; 0x07
    1686:	78 85       	ldd	r23, Y+8	; 0x08
    1688:	89 85       	ldd	r24, Y+9	; 0x09
    168a:	9a 85       	ldd	r25, Y+10	; 0x0a
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	3f ef       	ldi	r19, 0xFF	; 255
    1690:	4f e7       	ldi	r20, 0x7F	; 127
    1692:	57 e4       	ldi	r21, 0x47	; 71
    1694:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1698:	18 16       	cp	r1, r24
    169a:	4c f5       	brge	.+82     	; 0x16ee <CLCD_vInit+0x4ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169c:	6b 85       	ldd	r22, Y+11	; 0x0b
    169e:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e2       	ldi	r20, 0x20	; 32
    16aa:	51 e4       	ldi	r21, 0x41	; 65
    16ac:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	9e 83       	std	Y+6, r25	; 0x06
    16c2:	8d 83       	std	Y+5, r24	; 0x05
    16c4:	0f c0       	rjmp	.+30     	; 0x16e4 <CLCD_vInit+0x4c4>
    16c6:	88 ec       	ldi	r24, 0xC8	; 200
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	9c 83       	std	Y+4, r25	; 0x04
    16cc:	8b 83       	std	Y+3, r24	; 0x03
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <CLCD_vInit+0x4b2>
    16d6:	9c 83       	std	Y+4, r25	; 0x04
    16d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16da:	8d 81       	ldd	r24, Y+5	; 0x05
    16dc:	9e 81       	ldd	r25, Y+6	; 0x06
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	9e 83       	std	Y+6, r25	; 0x06
    16e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	9e 81       	ldd	r25, Y+6	; 0x06
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	69 f7       	brne	.-38     	; 0x16c6 <CLCD_vInit+0x4a6>
    16ec:	14 c0       	rjmp	.+40     	; 0x1716 <CLCD_vInit+0x4f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ee:	6f 81       	ldd	r22, Y+7	; 0x07
    16f0:	78 85       	ldd	r23, Y+8	; 0x08
    16f2:	89 85       	ldd	r24, Y+9	; 0x09
    16f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	9e 83       	std	Y+6, r25	; 0x06
    1700:	8d 83       	std	Y+5, r24	; 0x05
    1702:	8d 81       	ldd	r24, Y+5	; 0x05
    1704:	9e 81       	ldd	r25, Y+6	; 0x06
    1706:	9a 83       	std	Y+2, r25	; 0x02
    1708:	89 83       	std	Y+1, r24	; 0x01
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	9a 81       	ldd	r25, Y+2	; 0x02
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f1 f7       	brne	.-4      	; 0x170e <CLCD_vInit+0x4ee>
    1712:	9a 83       	std	Y+2, r25	; 0x02
    1714:	89 83       	std	Y+1, r24	; 0x01
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    1716:	ca 5b       	subi	r28, 0xBA	; 186
    1718:	df 4f       	sbci	r29, 0xFF	; 255
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	08 95       	ret

0000172e <CLCD_vSendData>:
 * Parameters :
 *		=> Copy_u8Data --> Data that you want to display (for every location )
 * return     : nothing
 */
void CLCD_vSendData(u8 Copy_u8Data)
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	0f 92       	push	r0
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	89 83       	std	Y+1, r24	; 0x01
  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    8 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#if CLCD_MODE == 8

  DIO_enumWritePortVal(CLCD_DATA_PORT, Copy_u8Data);
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	69 81       	ldd	r22, Y+1	; 0x01
    173e:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <DIO_enumWritePortVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_HIGH);
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	62 e0       	ldi	r22, 0x02	; 2
    1746:	41 e0       	ldi	r20, 0x01	; 1
    1748:	0e 94 af 11 	call	0x235e	; 0x235e <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	61 e0       	ldi	r22, 0x01	; 1
    1750:	40 e0       	ldi	r20, 0x00	; 0
    1752:	0e 94 af 11 	call	0x235e	; 0x235e <DIO_enumWritePinVal>
  CLCD_vSendFallingEdge();
    1756:	0e 94 cb 0b 	call	0x1796	; 0x1796 <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    175a:	0f 90       	pop	r0
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <CLCD_vSendCommand>:
 * Parameters :
 *		=> Copy_u8Command --> Command number
 * return     : nothing
 */
void CLCD_vSendCommand(u8 Copy_u8Command)
{
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	0f 92       	push	r0
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	89 83       	std	Y+1, r24	; 0x01
  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    8 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#if CLCD_MODE == 8

  DIO_enumWritePortVal(CLCD_DATA_PORT, Copy_u8Command);
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	69 81       	ldd	r22, Y+1	; 0x01
    1772:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <DIO_enumWritePortVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_LOW);
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	62 e0       	ldi	r22, 0x02	; 2
    177a:	40 e0       	ldi	r20, 0x00	; 0
    177c:	0e 94 af 11 	call	0x235e	; 0x235e <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	61 e0       	ldi	r22, 0x01	; 1
    1784:	40 e0       	ldi	r20, 0x00	; 0
    1786:	0e 94 af 11 	call	0x235e	; 0x235e <DIO_enumWritePinVal>
  CLCD_vSendFallingEdge();
    178a:	0e 94 cb 0b 	call	0x1796	; 0x1796 <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    178e:	0f 90       	pop	r0
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <CLCD_vSendFallingEdge>:
 * Parameters : nothing
 * return     : nothing
 */

static void CLCD_vSendFallingEdge(void)
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	6c 97       	sbiw	r28, 0x1c	; 28
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	60 e0       	ldi	r22, 0x00	; 0
    17ae:	41 e0       	ldi	r20, 0x01	; 1
    17b0:	0e 94 af 11 	call	0x235e	; 0x235e <DIO_enumWritePinVal>
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	a0 e8       	ldi	r26, 0x80	; 128
    17ba:	bf e3       	ldi	r27, 0x3F	; 63
    17bc:	89 8f       	std	Y+25, r24	; 0x19
    17be:	9a 8f       	std	Y+26, r25	; 0x1a
    17c0:	ab 8f       	std	Y+27, r26	; 0x1b
    17c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c4:	69 8d       	ldd	r22, Y+25	; 0x19
    17c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	4a ef       	ldi	r20, 0xFA	; 250
    17d2:	54 e4       	ldi	r21, 0x44	; 68
    17d4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	8d 8b       	std	Y+21, r24	; 0x15
    17de:	9e 8b       	std	Y+22, r25	; 0x16
    17e0:	af 8b       	std	Y+23, r26	; 0x17
    17e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17e4:	6d 89       	ldd	r22, Y+21	; 0x15
    17e6:	7e 89       	ldd	r23, Y+22	; 0x16
    17e8:	8f 89       	ldd	r24, Y+23	; 0x17
    17ea:	98 8d       	ldd	r25, Y+24	; 0x18
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e8       	ldi	r20, 0x80	; 128
    17f2:	5f e3       	ldi	r21, 0x3F	; 63
    17f4:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    17f8:	88 23       	and	r24, r24
    17fa:	2c f4       	brge	.+10     	; 0x1806 <CLCD_vSendFallingEdge+0x70>
		__ticks = 1;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	9c 8b       	std	Y+20, r25	; 0x14
    1802:	8b 8b       	std	Y+19, r24	; 0x13
    1804:	3f c0       	rjmp	.+126    	; 0x1884 <CLCD_vSendFallingEdge+0xee>
	else if (__tmp > 65535)
    1806:	6d 89       	ldd	r22, Y+21	; 0x15
    1808:	7e 89       	ldd	r23, Y+22	; 0x16
    180a:	8f 89       	ldd	r24, Y+23	; 0x17
    180c:	98 8d       	ldd	r25, Y+24	; 0x18
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	3f ef       	ldi	r19, 0xFF	; 255
    1812:	4f e7       	ldi	r20, 0x7F	; 127
    1814:	57 e4       	ldi	r21, 0x47	; 71
    1816:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    181a:	18 16       	cp	r1, r24
    181c:	4c f5       	brge	.+82     	; 0x1870 <CLCD_vSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181e:	69 8d       	ldd	r22, Y+25	; 0x19
    1820:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1822:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1824:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e2       	ldi	r20, 0x20	; 32
    182c:	51 e4       	ldi	r21, 0x41	; 65
    182e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	bc 01       	movw	r22, r24
    1838:	cd 01       	movw	r24, r26
    183a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	9c 8b       	std	Y+20, r25	; 0x14
    1844:	8b 8b       	std	Y+19, r24	; 0x13
    1846:	0f c0       	rjmp	.+30     	; 0x1866 <CLCD_vSendFallingEdge+0xd0>
    1848:	88 ec       	ldi	r24, 0xC8	; 200
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	9a 8b       	std	Y+18, r25	; 0x12
    184e:	89 8b       	std	Y+17, r24	; 0x11
    1850:	89 89       	ldd	r24, Y+17	; 0x11
    1852:	9a 89       	ldd	r25, Y+18	; 0x12
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	f1 f7       	brne	.-4      	; 0x1854 <CLCD_vSendFallingEdge+0xbe>
    1858:	9a 8b       	std	Y+18, r25	; 0x12
    185a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185c:	8b 89       	ldd	r24, Y+19	; 0x13
    185e:	9c 89       	ldd	r25, Y+20	; 0x14
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	9c 8b       	std	Y+20, r25	; 0x14
    1864:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1866:	8b 89       	ldd	r24, Y+19	; 0x13
    1868:	9c 89       	ldd	r25, Y+20	; 0x14
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	69 f7       	brne	.-38     	; 0x1848 <CLCD_vSendFallingEdge+0xb2>
    186e:	14 c0       	rjmp	.+40     	; 0x1898 <CLCD_vSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1870:	6d 89       	ldd	r22, Y+21	; 0x15
    1872:	7e 89       	ldd	r23, Y+22	; 0x16
    1874:	8f 89       	ldd	r24, Y+23	; 0x17
    1876:	98 8d       	ldd	r25, Y+24	; 0x18
    1878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	9c 8b       	std	Y+20, r25	; 0x14
    1882:	8b 8b       	std	Y+19, r24	; 0x13
    1884:	8b 89       	ldd	r24, Y+19	; 0x13
    1886:	9c 89       	ldd	r25, Y+20	; 0x14
    1888:	98 8b       	std	Y+16, r25	; 0x10
    188a:	8f 87       	std	Y+15, r24	; 0x0f
    188c:	8f 85       	ldd	r24, Y+15	; 0x0f
    188e:	98 89       	ldd	r25, Y+16	; 0x10
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	f1 f7       	brne	.-4      	; 0x1890 <CLCD_vSendFallingEdge+0xfa>
    1894:	98 8b       	std	Y+16, r25	; 0x10
    1896:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	60 e0       	ldi	r22, 0x00	; 0
    189c:	40 e0       	ldi	r20, 0x00	; 0
    189e:	0e 94 af 11 	call	0x235e	; 0x235e <DIO_enumWritePinVal>
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	a0 e8       	ldi	r26, 0x80	; 128
    18a8:	bf e3       	ldi	r27, 0x3F	; 63
    18aa:	8b 87       	std	Y+11, r24	; 0x0b
    18ac:	9c 87       	std	Y+12, r25	; 0x0c
    18ae:	ad 87       	std	Y+13, r26	; 0x0d
    18b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	4a ef       	ldi	r20, 0xFA	; 250
    18c0:	54 e4       	ldi	r21, 0x44	; 68
    18c2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	8f 83       	std	Y+7, r24	; 0x07
    18cc:	98 87       	std	Y+8, r25	; 0x08
    18ce:	a9 87       	std	Y+9, r26	; 0x09
    18d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18d2:	6f 81       	ldd	r22, Y+7	; 0x07
    18d4:	78 85       	ldd	r23, Y+8	; 0x08
    18d6:	89 85       	ldd	r24, Y+9	; 0x09
    18d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e8       	ldi	r20, 0x80	; 128
    18e0:	5f e3       	ldi	r21, 0x3F	; 63
    18e2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    18e6:	88 23       	and	r24, r24
    18e8:	2c f4       	brge	.+10     	; 0x18f4 <CLCD_vSendFallingEdge+0x15e>
		__ticks = 1;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	9e 83       	std	Y+6, r25	; 0x06
    18f0:	8d 83       	std	Y+5, r24	; 0x05
    18f2:	3f c0       	rjmp	.+126    	; 0x1972 <CLCD_vSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    18f4:	6f 81       	ldd	r22, Y+7	; 0x07
    18f6:	78 85       	ldd	r23, Y+8	; 0x08
    18f8:	89 85       	ldd	r24, Y+9	; 0x09
    18fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	3f ef       	ldi	r19, 0xFF	; 255
    1900:	4f e7       	ldi	r20, 0x7F	; 127
    1902:	57 e4       	ldi	r21, 0x47	; 71
    1904:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1908:	18 16       	cp	r1, r24
    190a:	4c f5       	brge	.+82     	; 0x195e <CLCD_vSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190c:	6b 85       	ldd	r22, Y+11	; 0x0b
    190e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1910:	8d 85       	ldd	r24, Y+13	; 0x0d
    1912:	9e 85       	ldd	r25, Y+14	; 0x0e
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e2       	ldi	r20, 0x20	; 32
    191a:	51 e4       	ldi	r21, 0x41	; 65
    191c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	bc 01       	movw	r22, r24
    1926:	cd 01       	movw	r24, r26
    1928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	9e 83       	std	Y+6, r25	; 0x06
    1932:	8d 83       	std	Y+5, r24	; 0x05
    1934:	0f c0       	rjmp	.+30     	; 0x1954 <CLCD_vSendFallingEdge+0x1be>
    1936:	88 ec       	ldi	r24, 0xC8	; 200
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	9c 83       	std	Y+4, r25	; 0x04
    193c:	8b 83       	std	Y+3, r24	; 0x03
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	9c 81       	ldd	r25, Y+4	; 0x04
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <CLCD_vSendFallingEdge+0x1ac>
    1946:	9c 83       	std	Y+4, r25	; 0x04
    1948:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194a:	8d 81       	ldd	r24, Y+5	; 0x05
    194c:	9e 81       	ldd	r25, Y+6	; 0x06
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	9e 83       	std	Y+6, r25	; 0x06
    1952:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1954:	8d 81       	ldd	r24, Y+5	; 0x05
    1956:	9e 81       	ldd	r25, Y+6	; 0x06
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	69 f7       	brne	.-38     	; 0x1936 <CLCD_vSendFallingEdge+0x1a0>
    195c:	14 c0       	rjmp	.+40     	; 0x1986 <CLCD_vSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195e:	6f 81       	ldd	r22, Y+7	; 0x07
    1960:	78 85       	ldd	r23, Y+8	; 0x08
    1962:	89 85       	ldd	r24, Y+9	; 0x09
    1964:	9a 85       	ldd	r25, Y+10	; 0x0a
    1966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	9e 83       	std	Y+6, r25	; 0x06
    1970:	8d 83       	std	Y+5, r24	; 0x05
    1972:	8d 81       	ldd	r24, Y+5	; 0x05
    1974:	9e 81       	ldd	r25, Y+6	; 0x06
    1976:	9a 83       	std	Y+2, r25	; 0x02
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	9a 81       	ldd	r25, Y+2	; 0x02
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <CLCD_vSendFallingEdge+0x1e8>
    1982:	9a 83       	std	Y+2, r25	; 0x02
    1984:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    1986:	6c 96       	adiw	r28, 0x1c	; 28
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	cd bf       	out	0x3d, r28	; 61
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <CLCD_vClearScreen>:
 *                                    *-----------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vClearScreen(void)
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	2e 97       	sbiw	r28, 0x0e	; 14
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	de bf       	out	0x3e, r29	; 62
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_ClEAR);
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	0e 94 b1 0b 	call	0x1762	; 0x1762 <CLCD_vSendCommand>
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	a0 e2       	ldi	r26, 0x20	; 32
    19b8:	b1 e4       	ldi	r27, 0x41	; 65
    19ba:	8b 87       	std	Y+11, r24	; 0x0b
    19bc:	9c 87       	std	Y+12, r25	; 0x0c
    19be:	ad 87       	std	Y+13, r26	; 0x0d
    19c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	4a ef       	ldi	r20, 0xFA	; 250
    19d0:	54 e4       	ldi	r21, 0x44	; 68
    19d2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	8f 83       	std	Y+7, r24	; 0x07
    19dc:	98 87       	std	Y+8, r25	; 0x08
    19de:	a9 87       	std	Y+9, r26	; 0x09
    19e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19e2:	6f 81       	ldd	r22, Y+7	; 0x07
    19e4:	78 85       	ldd	r23, Y+8	; 0x08
    19e6:	89 85       	ldd	r24, Y+9	; 0x09
    19e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e8       	ldi	r20, 0x80	; 128
    19f0:	5f e3       	ldi	r21, 0x3F	; 63
    19f2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    19f6:	88 23       	and	r24, r24
    19f8:	2c f4       	brge	.+10     	; 0x1a04 <CLCD_vClearScreen+0x6c>
		__ticks = 1;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	9e 83       	std	Y+6, r25	; 0x06
    1a00:	8d 83       	std	Y+5, r24	; 0x05
    1a02:	3f c0       	rjmp	.+126    	; 0x1a82 <CLCD_vClearScreen+0xea>
	else if (__tmp > 65535)
    1a04:	6f 81       	ldd	r22, Y+7	; 0x07
    1a06:	78 85       	ldd	r23, Y+8	; 0x08
    1a08:	89 85       	ldd	r24, Y+9	; 0x09
    1a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	3f ef       	ldi	r19, 0xFF	; 255
    1a10:	4f e7       	ldi	r20, 0x7F	; 127
    1a12:	57 e4       	ldi	r21, 0x47	; 71
    1a14:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1a18:	18 16       	cp	r1, r24
    1a1a:	4c f5       	brge	.+82     	; 0x1a6e <CLCD_vClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e2       	ldi	r20, 0x20	; 32
    1a2a:	51 e4       	ldi	r21, 0x41	; 65
    1a2c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	bc 01       	movw	r22, r24
    1a36:	cd 01       	movw	r24, r26
    1a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	9e 83       	std	Y+6, r25	; 0x06
    1a42:	8d 83       	std	Y+5, r24	; 0x05
    1a44:	0f c0       	rjmp	.+30     	; 0x1a64 <CLCD_vClearScreen+0xcc>
    1a46:	88 ec       	ldi	r24, 0xC8	; 200
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	9c 83       	std	Y+4, r25	; 0x04
    1a4c:	8b 83       	std	Y+3, r24	; 0x03
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	9c 81       	ldd	r25, Y+4	; 0x04
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <CLCD_vClearScreen+0xba>
    1a56:	9c 83       	std	Y+4, r25	; 0x04
    1a58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	9e 83       	std	Y+6, r25	; 0x06
    1a62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a64:	8d 81       	ldd	r24, Y+5	; 0x05
    1a66:	9e 81       	ldd	r25, Y+6	; 0x06
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	69 f7       	brne	.-38     	; 0x1a46 <CLCD_vClearScreen+0xae>
    1a6c:	14 c0       	rjmp	.+40     	; 0x1a96 <CLCD_vClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a70:	78 85       	ldd	r23, Y+8	; 0x08
    1a72:	89 85       	ldd	r24, Y+9	; 0x09
    1a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	9e 83       	std	Y+6, r25	; 0x06
    1a80:	8d 83       	std	Y+5, r24	; 0x05
    1a82:	8d 81       	ldd	r24, Y+5	; 0x05
    1a84:	9e 81       	ldd	r25, Y+6	; 0x06
    1a86:	9a 83       	std	Y+2, r25	; 0x02
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <CLCD_vClearScreen+0xf6>
    1a92:	9a 83       	std	Y+2, r25	; 0x02
    1a94:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(10); // wait more than 1.53 ms
}
    1a96:	2e 96       	adiw	r28, 0x0e	; 14
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <CLCD_vSendString>:
 *		=> Copy_u8ptrString  --> Pointer to the string
 * return     : nothing
 */

void CLCD_vSendString(const u8 *Copy_u8PrtStrign)
{
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <CLCD_vSendString+0x6>
    1aae:	0f 92       	push	r0
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	9b 83       	std	Y+3, r25	; 0x03
    1ab6:	8a 83       	std	Y+2, r24	; 0x02
  u8 LOC_u8Iterator = 0;
    1ab8:	19 82       	std	Y+1, r1	; 0x01
    1aba:	0e c0       	rjmp	.+28     	; 0x1ad8 <CLCD_vSendString+0x30>
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	e2 0f       	add	r30, r18
    1aca:	f3 1f       	adc	r31, r19
    1acc:	80 81       	ld	r24, Z
    1ace:	0e 94 97 0b 	call	0x172e	; 0x172e <CLCD_vSendData>
    LOC_u8Iterator++;
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	8f 5f       	subi	r24, 0xFF	; 255
    1ad6:	89 83       	std	Y+1, r24	; 0x01
 */

void CLCD_vSendString(const u8 *Copy_u8PrtStrign)
{
  u8 LOC_u8Iterator = 0;
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	e2 0f       	add	r30, r18
    1ae6:	f3 1f       	adc	r31, r19
    1ae8:	80 81       	ld	r24, Z
    1aea:	88 23       	and	r24, r24
    1aec:	39 f7       	brne	.-50     	; 0x1abc <CLCD_vSendString+0x14>
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    LOC_u8Iterator++;
  }
}
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <CLCD_vSendIntNumber>:
 *		=> Copy_s32Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendIntNumber(s32 Copy_s32Number)
{
    1afa:	ef 92       	push	r14
    1afc:	ff 92       	push	r15
    1afe:	0f 93       	push	r16
    1b00:	1f 93       	push	r17
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	28 97       	sbiw	r28, 0x08	; 8
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	6d 83       	std	Y+5, r22	; 0x05
    1b18:	7e 83       	std	Y+6, r23	; 0x06
    1b1a:	8f 83       	std	Y+7, r24	; 0x07
    1b1c:	98 87       	std	Y+8, r25	; 0x08

  u32 LOC_u32Reverse = 1;
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	a0 e0       	ldi	r26, 0x00	; 0
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	89 83       	std	Y+1, r24	; 0x01
    1b28:	9a 83       	std	Y+2, r25	; 0x02
    1b2a:	ab 83       	std	Y+3, r26	; 0x03
    1b2c:	bc 83       	std	Y+4, r27	; 0x04

  if (Copy_s32Number == 0)
    1b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b30:	9e 81       	ldd	r25, Y+6	; 0x06
    1b32:	af 81       	ldd	r26, Y+7	; 0x07
    1b34:	b8 85       	ldd	r27, Y+8	; 0x08
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	a1 05       	cpc	r26, r1
    1b3a:	b1 05       	cpc	r27, r1
    1b3c:	21 f4       	brne	.+8      	; 0x1b46 <CLCD_vSendIntNumber+0x4c>
  {
    CLCD_vSendData('0');
    1b3e:	80 e3       	ldi	r24, 0x30	; 48
    1b40:	0e 94 97 0b 	call	0x172e	; 0x172e <CLCD_vSendData>
    1b44:	85 c0       	rjmp	.+266    	; 0x1c50 <CLCD_vSendIntNumber+0x156>
  }
  else
  {
    if (Copy_s32Number < 0)
    1b46:	8d 81       	ldd	r24, Y+5	; 0x05
    1b48:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4a:	af 81       	ldd	r26, Y+7	; 0x07
    1b4c:	b8 85       	ldd	r27, Y+8	; 0x08
    1b4e:	bb 23       	and	r27, r27
    1b50:	0c f0       	brlt	.+2      	; 0x1b54 <CLCD_vSendIntNumber+0x5a>
    1b52:	49 c0       	rjmp	.+146    	; 0x1be6 <CLCD_vSendIntNumber+0xec>
    {
      CLCD_vSendData('-');
    1b54:	8d e2       	ldi	r24, 0x2D	; 45
    1b56:	0e 94 97 0b 	call	0x172e	; 0x172e <CLCD_vSendData>
      Copy_s32Number = (-1 * Copy_s32Number);
    1b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5e:	af 81       	ldd	r26, Y+7	; 0x07
    1b60:	b8 85       	ldd	r27, Y+8	; 0x08
    1b62:	b0 95       	com	r27
    1b64:	a0 95       	com	r26
    1b66:	90 95       	com	r25
    1b68:	81 95       	neg	r24
    1b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6c:	af 4f       	sbci	r26, 0xFF	; 255
    1b6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b70:	8d 83       	std	Y+5, r24	; 0x05
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	af 83       	std	Y+7, r26	; 0x07
    1b76:	b8 87       	std	Y+8, r27	; 0x08
    1b78:	36 c0       	rjmp	.+108    	; 0x1be6 <CLCD_vSendIntNumber+0xec>
    }
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7e:	ab 81       	ldd	r26, Y+3	; 0x03
    1b80:	bc 81       	ldd	r27, Y+4	; 0x04
    1b82:	2a e0       	ldi	r18, 0x0A	; 10
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e0       	ldi	r20, 0x00	; 0
    1b88:	50 e0       	ldi	r21, 0x00	; 0
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	cd 01       	movw	r24, r26
    1b8e:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__mulsi3>
    1b92:	7b 01       	movw	r14, r22
    1b94:	8c 01       	movw	r16, r24
    1b96:	8d 81       	ldd	r24, Y+5	; 0x05
    1b98:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9a:	af 81       	ldd	r26, Y+7	; 0x07
    1b9c:	b8 85       	ldd	r27, Y+8	; 0x08
    1b9e:	2a e0       	ldi	r18, 0x0A	; 10
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e0       	ldi	r20, 0x00	; 0
    1ba4:	50 e0       	ldi	r21, 0x00	; 0
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	0e 94 ad 1c 	call	0x395a	; 0x395a <__divmodsi4>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	8e 0d       	add	r24, r14
    1bb4:	9f 1d       	adc	r25, r15
    1bb6:	a0 1f       	adc	r26, r16
    1bb8:	b1 1f       	adc	r27, r17
    1bba:	89 83       	std	Y+1, r24	; 0x01
    1bbc:	9a 83       	std	Y+2, r25	; 0x02
    1bbe:	ab 83       	std	Y+3, r26	; 0x03
    1bc0:	bc 83       	std	Y+4, r27	; 0x04
      Copy_s32Number /= 10;
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc6:	af 81       	ldd	r26, Y+7	; 0x07
    1bc8:	b8 85       	ldd	r27, Y+8	; 0x08
    1bca:	2a e0       	ldi	r18, 0x0A	; 10
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	0e 94 ad 1c 	call	0x395a	; 0x395a <__divmodsi4>
    1bda:	da 01       	movw	r26, r20
    1bdc:	c9 01       	movw	r24, r18
    1bde:	8d 83       	std	Y+5, r24	; 0x05
    1be0:	9e 83       	std	Y+6, r25	; 0x06
    1be2:	af 83       	std	Y+7, r26	; 0x07
    1be4:	b8 87       	std	Y+8, r27	; 0x08
    if (Copy_s32Number < 0)
    {
      CLCD_vSendData('-');
      Copy_s32Number = (-1 * Copy_s32Number);
    }
    while (Copy_s32Number != 0)
    1be6:	8d 81       	ldd	r24, Y+5	; 0x05
    1be8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bea:	af 81       	ldd	r26, Y+7	; 0x07
    1bec:	b8 85       	ldd	r27, Y+8	; 0x08
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	a1 05       	cpc	r26, r1
    1bf2:	b1 05       	cpc	r27, r1
    1bf4:	11 f6       	brne	.-124    	; 0x1b7a <CLCD_vSendIntNumber+0x80>
    1bf6:	23 c0       	rjmp	.+70     	; 0x1c3e <CLCD_vSendIntNumber+0x144>
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfc:	ab 81       	ldd	r26, Y+3	; 0x03
    1bfe:	bc 81       	ldd	r27, Y+4	; 0x04
    1c00:	2a e0       	ldi	r18, 0x0A	; 10
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e0       	ldi	r20, 0x00	; 0
    1c06:	50 e0       	ldi	r21, 0x00	; 0
    1c08:	bc 01       	movw	r22, r24
    1c0a:	cd 01       	movw	r24, r26
    1c0c:	0e 94 8b 1c 	call	0x3916	; 0x3916 <__udivmodsi4>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	80 5d       	subi	r24, 0xD0	; 208
    1c16:	0e 94 97 0b 	call	0x172e	; 0x172e <CLCD_vSendData>
      LOC_u32Reverse /= 10;
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1e:	ab 81       	ldd	r26, Y+3	; 0x03
    1c20:	bc 81       	ldd	r27, Y+4	; 0x04
    1c22:	2a e0       	ldi	r18, 0x0A	; 10
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 e0       	ldi	r20, 0x00	; 0
    1c28:	50 e0       	ldi	r21, 0x00	; 0
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	0e 94 8b 1c 	call	0x3916	; 0x3916 <__udivmodsi4>
    1c32:	da 01       	movw	r26, r20
    1c34:	c9 01       	movw	r24, r18
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	9a 83       	std	Y+2, r25	; 0x02
    1c3a:	ab 83       	std	Y+3, r26	; 0x03
    1c3c:	bc 83       	std	Y+4, r27	; 0x04
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	9a 81       	ldd	r25, Y+2	; 0x02
    1c42:	ab 81       	ldd	r26, Y+3	; 0x03
    1c44:	bc 81       	ldd	r27, Y+4	; 0x04
    1c46:	81 30       	cpi	r24, 0x01	; 1
    1c48:	91 05       	cpc	r25, r1
    1c4a:	a1 05       	cpc	r26, r1
    1c4c:	b1 05       	cpc	r27, r1
    1c4e:	a1 f6       	brne	.-88     	; 0x1bf8 <CLCD_vSendIntNumber+0xfe>
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
      LOC_u32Reverse /= 10;
    }
  }
}
    1c50:	28 96       	adiw	r28, 0x08	; 8
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	de bf       	out	0x3e, r29	; 62
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	cd bf       	out	0x3d, r28	; 61
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	1f 91       	pop	r17
    1c62:	0f 91       	pop	r16
    1c64:	ff 90       	pop	r15
    1c66:	ef 90       	pop	r14
    1c68:	08 95       	ret

00001c6a <CLCD_vSendFloatNumber>:
 *		=> Copy_f64Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendFloatNumber(f64 Copy_f64Number)
{
    1c6a:	af 92       	push	r10
    1c6c:	bf 92       	push	r11
    1c6e:	cf 92       	push	r12
    1c70:	df 92       	push	r13
    1c72:	ef 92       	push	r14
    1c74:	ff 92       	push	r15
    1c76:	0f 93       	push	r16
    1c78:	1f 93       	push	r17
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	00 d0       	rcall	.+0      	; 0x1c80 <CLCD_vSendFloatNumber+0x16>
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <CLCD_vSendFloatNumber+0x18>
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	69 83       	std	Y+1, r22	; 0x01
    1c88:	7a 83       	std	Y+2, r23	; 0x02
    1c8a:	8b 83       	std	Y+3, r24	; 0x03
    1c8c:	9c 83       	std	Y+4, r25	; 0x04
  CLCD_vSendIntNumber((s32)Copy_f64Number);
    1c8e:	69 81       	ldd	r22, Y+1	; 0x01
    1c90:	7a 81       	ldd	r23, Y+2	; 0x02
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	bc 01       	movw	r22, r24
    1ca0:	cd 01       	movw	r24, r26
    1ca2:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <CLCD_vSendIntNumber>
  if (Copy_f64Number < 0)
    1ca6:	69 81       	ldd	r22, Y+1	; 0x01
    1ca8:	7a 81       	ldd	r23, Y+2	; 0x02
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	9c 81       	ldd	r25, Y+4	; 0x04
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	40 e0       	ldi	r20, 0x00	; 0
    1cb4:	50 e0       	ldi	r21, 0x00	; 0
    1cb6:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1cba:	88 23       	and	r24, r24
    1cbc:	4c f4       	brge	.+18     	; 0x1cd0 <CLCD_vSendFloatNumber+0x66>
  {
    Copy_f64Number *= -1;
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc2:	ab 81       	ldd	r26, Y+3	; 0x03
    1cc4:	bc 81       	ldd	r27, Y+4	; 0x04
    1cc6:	b0 58       	subi	r27, 0x80	; 128
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    1cca:	9a 83       	std	Y+2, r25	; 0x02
    1ccc:	ab 83       	std	Y+3, r26	; 0x03
    1cce:	bc 83       	std	Y+4, r27	; 0x04
  }
  Copy_f64Number = (f64)Copy_f64Number - (s32)Copy_f64Number;
    1cd0:	69 81       	ldd	r22, Y+1	; 0x01
    1cd2:	7a 81       	ldd	r23, Y+2	; 0x02
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	bc 01       	movw	r22, r24
    1ce2:	cd 01       	movw	r24, r26
    1ce4:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatsisf>
    1ce8:	9b 01       	movw	r18, r22
    1cea:	ac 01       	movw	r20, r24
    1cec:	69 81       	ldd	r22, Y+1	; 0x01
    1cee:	7a 81       	ldd	r23, Y+2	; 0x02
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	9a 83       	std	Y+2, r25	; 0x02
    1d00:	ab 83       	std	Y+3, r26	; 0x03
    1d02:	bc 83       	std	Y+4, r27	; 0x04
  Copy_f64Number *= 10000;
    1d04:	69 81       	ldd	r22, Y+1	; 0x01
    1d06:	7a 81       	ldd	r23, Y+2	; 0x02
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e4       	ldi	r19, 0x40	; 64
    1d10:	4c e1       	ldi	r20, 0x1C	; 28
    1d12:	56 e4       	ldi	r21, 0x46	; 70
    1d14:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    1d1e:	9a 83       	std	Y+2, r25	; 0x02
    1d20:	ab 83       	std	Y+3, r26	; 0x03
    1d22:	bc 83       	std	Y+4, r27	; 0x04
  if ((s64)Copy_f64Number != 0)
    1d24:	69 81       	ldd	r22, Y+1	; 0x01
    1d26:	7a 81       	ldd	r23, Y+2	; 0x02
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	0e 94 75 00 	call	0xea	; 0xea <__fixsfdi>
    1d30:	a2 2e       	mov	r10, r18
    1d32:	b3 2e       	mov	r11, r19
    1d34:	c4 2e       	mov	r12, r20
    1d36:	d5 2e       	mov	r13, r21
    1d38:	e6 2e       	mov	r14, r22
    1d3a:	f7 2e       	mov	r15, r23
    1d3c:	08 2f       	mov	r16, r24
    1d3e:	19 2f       	mov	r17, r25
    1d40:	8a 2d       	mov	r24, r10
    1d42:	8b 29       	or	r24, r11
    1d44:	8c 29       	or	r24, r12
    1d46:	8d 29       	or	r24, r13
    1d48:	8e 29       	or	r24, r14
    1d4a:	8f 29       	or	r24, r15
    1d4c:	80 2b       	or	r24, r16
    1d4e:	81 2b       	or	r24, r17
    1d50:	88 23       	and	r24, r24
    1d52:	79 f0       	breq	.+30     	; 0x1d72 <CLCD_vSendFloatNumber+0x108>
  {
    CLCD_vSendData('.');
    1d54:	8e e2       	ldi	r24, 0x2E	; 46
    1d56:	0e 94 97 0b 	call	0x172e	; 0x172e <CLCD_vSendData>
    CLCD_vSendIntNumber((s32)Copy_f64Number);
    1d5a:	69 81       	ldd	r22, Y+1	; 0x01
    1d5c:	7a 81       	ldd	r23, Y+2	; 0x02
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	9c 81       	ldd	r25, Y+4	; 0x04
    1d62:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	bc 01       	movw	r22, r24
    1d6c:	cd 01       	movw	r24, r26
    1d6e:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <CLCD_vSendIntNumber>
  }
}
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	1f 91       	pop	r17
    1d80:	0f 91       	pop	r16
    1d82:	ff 90       	pop	r15
    1d84:	ef 90       	pop	r14
    1d86:	df 90       	pop	r13
    1d88:	cf 90       	pop	r12
    1d8a:	bf 90       	pop	r11
    1d8c:	af 90       	pop	r10
    1d8e:	08 95       	ret

00001d90 <CLCD_vSetPosition>:
 *		MSB = 1  ===> refers that it is command to set cursor
 *		xxxxxxx  ===> refers to AC ( Address Counter 7Bits / DDRAM Locations 128Location )
 */

void CLCD_vSetPosition(u8 Copy_u8ROW, u8 Copy_u8Col)
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	61 97       	sbiw	r28, 0x11	; 17
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	88 8b       	std	Y+16, r24	; 0x10
    1da6:	69 8b       	std	Y+17, r22	; 0x11
  u8 LOC_u8Data;

  if ((Copy_u8ROW < CLCD_ROW_1) || (Copy_u8ROW > CLCD_ROW_2) || (Copy_u8Col < CLCD_COL_1) || (Copy_u8Col > CLCD_COL_16))
    1da8:	88 89       	ldd	r24, Y+16	; 0x10
    1daa:	88 23       	and	r24, r24
    1dac:	49 f0       	breq	.+18     	; 0x1dc0 <CLCD_vSetPosition+0x30>
    1dae:	88 89       	ldd	r24, Y+16	; 0x10
    1db0:	83 30       	cpi	r24, 0x03	; 3
    1db2:	30 f4       	brcc	.+12     	; 0x1dc0 <CLCD_vSetPosition+0x30>
    1db4:	89 89       	ldd	r24, Y+17	; 0x11
    1db6:	88 23       	and	r24, r24
    1db8:	19 f0       	breq	.+6      	; 0x1dc0 <CLCD_vSetPosition+0x30>
    1dba:	89 89       	ldd	r24, Y+17	; 0x11
    1dbc:	81 31       	cpi	r24, 0x11	; 17
    1dbe:	18 f0       	brcs	.+6      	; 0x1dc6 <CLCD_vSetPosition+0x36>
  {
    LOC_u8Data = CLCD_SET_CURSOR;
    1dc0:	80 e8       	ldi	r24, 0x80	; 128
    1dc2:	8f 87       	std	Y+15, r24	; 0x0f
    1dc4:	0d c0       	rjmp	.+26     	; 0x1de0 <CLCD_vSetPosition+0x50>
  }
  else if (Copy_u8ROW == CLCD_ROW_1)
    1dc6:	88 89       	ldd	r24, Y+16	; 0x10
    1dc8:	81 30       	cpi	r24, 0x01	; 1
    1dca:	21 f4       	brne	.+8      	; 0x1dd4 <CLCD_vSetPosition+0x44>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (Copy_u8Col - 1));
    1dcc:	89 89       	ldd	r24, Y+17	; 0x11
    1dce:	81 58       	subi	r24, 0x81	; 129
    1dd0:	8f 87       	std	Y+15, r24	; 0x0f
    1dd2:	06 c0       	rjmp	.+12     	; 0x1de0 <CLCD_vSetPosition+0x50>
  }
  else if (Copy_u8ROW == CLCD_ROW_2)
    1dd4:	88 89       	ldd	r24, Y+16	; 0x10
    1dd6:	82 30       	cpi	r24, 0x02	; 2
    1dd8:	19 f4       	brne	.+6      	; 0x1de0 <CLCD_vSetPosition+0x50>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (64) + (Copy_u8Col - 1));
    1dda:	89 89       	ldd	r24, Y+17	; 0x11
    1ddc:	81 54       	subi	r24, 0x41	; 65
    1dde:	8f 87       	std	Y+15, r24	; 0x0f
  }

  CLCD_vSendCommand(LOC_u8Data);
    1de0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1de2:	0e 94 b1 0b 	call	0x1762	; 0x1762 <CLCD_vSendCommand>
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	a0 e8       	ldi	r26, 0x80	; 128
    1dec:	bf e3       	ldi	r27, 0x3F	; 63
    1dee:	8b 87       	std	Y+11, r24	; 0x0b
    1df0:	9c 87       	std	Y+12, r25	; 0x0c
    1df2:	ad 87       	std	Y+13, r26	; 0x0d
    1df4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	4a ef       	ldi	r20, 0xFA	; 250
    1e04:	54 e4       	ldi	r21, 0x44	; 68
    1e06:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	8f 83       	std	Y+7, r24	; 0x07
    1e10:	98 87       	std	Y+8, r25	; 0x08
    1e12:	a9 87       	std	Y+9, r26	; 0x09
    1e14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e16:	6f 81       	ldd	r22, Y+7	; 0x07
    1e18:	78 85       	ldd	r23, Y+8	; 0x08
    1e1a:	89 85       	ldd	r24, Y+9	; 0x09
    1e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e8       	ldi	r20, 0x80	; 128
    1e24:	5f e3       	ldi	r21, 0x3F	; 63
    1e26:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1e2a:	88 23       	and	r24, r24
    1e2c:	2c f4       	brge	.+10     	; 0x1e38 <CLCD_vSetPosition+0xa8>
		__ticks = 1;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	9e 83       	std	Y+6, r25	; 0x06
    1e34:	8d 83       	std	Y+5, r24	; 0x05
    1e36:	3f c0       	rjmp	.+126    	; 0x1eb6 <CLCD_vSetPosition+0x126>
	else if (__tmp > 65535)
    1e38:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3a:	78 85       	ldd	r23, Y+8	; 0x08
    1e3c:	89 85       	ldd	r24, Y+9	; 0x09
    1e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	3f ef       	ldi	r19, 0xFF	; 255
    1e44:	4f e7       	ldi	r20, 0x7F	; 127
    1e46:	57 e4       	ldi	r21, 0x47	; 71
    1e48:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1e4c:	18 16       	cp	r1, r24
    1e4e:	4c f5       	brge	.+82     	; 0x1ea2 <CLCD_vSetPosition+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e2       	ldi	r20, 0x20	; 32
    1e5e:	51 e4       	ldi	r21, 0x41	; 65
    1e60:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	bc 01       	movw	r22, r24
    1e6a:	cd 01       	movw	r24, r26
    1e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	9e 83       	std	Y+6, r25	; 0x06
    1e76:	8d 83       	std	Y+5, r24	; 0x05
    1e78:	0f c0       	rjmp	.+30     	; 0x1e98 <CLCD_vSetPosition+0x108>
    1e7a:	88 ec       	ldi	r24, 0xC8	; 200
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	9c 83       	std	Y+4, r25	; 0x04
    1e80:	8b 83       	std	Y+3, r24	; 0x03
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <CLCD_vSetPosition+0xf6>
    1e8a:	9c 83       	std	Y+4, r25	; 0x04
    1e8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e90:	9e 81       	ldd	r25, Y+6	; 0x06
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	9e 83       	std	Y+6, r25	; 0x06
    1e96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e98:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	69 f7       	brne	.-38     	; 0x1e7a <CLCD_vSetPosition+0xea>
    1ea0:	14 c0       	rjmp	.+40     	; 0x1eca <CLCD_vSetPosition+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea4:	78 85       	ldd	r23, Y+8	; 0x08
    1ea6:	89 85       	ldd	r24, Y+9	; 0x09
    1ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	9e 83       	std	Y+6, r25	; 0x06
    1eb4:	8d 83       	std	Y+5, r24	; 0x05
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eba:	9a 83       	std	Y+2, r25	; 0x02
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <CLCD_vSetPosition+0x132>
    1ec6:	9a 83       	std	Y+2, r25	; 0x02
    1ec8:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    1eca:	61 96       	adiw	r28, 0x11	; 17
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <CLCD_vSendExtraChar>:
 * Hint       :-
 *	    Address Counter can refer to CGRAM and DDRAM
 */

void CLCD_vSendExtraChar(u8 Copy_u8Row, u8 Copy_u8Col)
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <CLCD_vSendExtraChar+0x6>
    1ee2:	0f 92       	push	r0
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	8a 83       	std	Y+2, r24	; 0x02
    1eea:	6b 83       	std	Y+3, r22	; 0x03

  u8 LOC_u8Iterator = 0;
    1eec:	19 82       	std	Y+1, r1	; 0x01

  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM
    1eee:	80 e4       	ldi	r24, 0x40	; 64
    1ef0:	0e 94 b1 0b 	call	0x1762	; 0x1762 <CLCD_vSendCommand>

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    1ef4:	19 82       	std	Y+1, r1	; 0x01
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
  }

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	6b 81       	ldd	r22, Y+3	; 0x03
    1efa:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <CLCD_vSetPosition>

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    1efe:	19 82       	std	Y+1, r1	; 0x01
    1f00:	06 c0       	rjmp	.+12     	; 0x1f0e <CLCD_vSendExtraChar+0x32>
  {
    CLCD_vSendData(LOC_u8Iterator);
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	0e 94 97 0b 	call	0x172e	; 0x172e <CLCD_vSendData>

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	8f 5f       	subi	r24, 0xFF	; 255
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	88 30       	cpi	r24, 0x08	; 8
    1f12:	b8 f3       	brcs	.-18     	; 0x1f02 <CLCD_vSendExtraChar+0x26>
  {
    CLCD_vSendData(LOC_u8Iterator);
  }
}
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	0f 90       	pop	r0
    1f1a:	cf 91       	pop	r28
    1f1c:	df 91       	pop	r29
    1f1e:	08 95       	ret

00001f20 <CLCD_voidShiftDisplayRight>:
 *                                                *------------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayRight(void)
{
    1f20:	df 93       	push	r29
    1f22:	cf 93       	push	r28
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	2e 97       	sbiw	r28, 0x0e	; 14
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	de bf       	out	0x3e, r29	; 62
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_RIGHT);
    1f34:	8c e1       	ldi	r24, 0x1C	; 28
    1f36:	0e 94 b1 0b 	call	0x1762	; 0x1762 <CLCD_vSendCommand>
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	a0 e8       	ldi	r26, 0x80	; 128
    1f40:	bf e3       	ldi	r27, 0x3F	; 63
    1f42:	8b 87       	std	Y+11, r24	; 0x0b
    1f44:	9c 87       	std	Y+12, r25	; 0x0c
    1f46:	ad 87       	std	Y+13, r26	; 0x0d
    1f48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	4a ef       	ldi	r20, 0xFA	; 250
    1f58:	54 e4       	ldi	r21, 0x44	; 68
    1f5a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	8f 83       	std	Y+7, r24	; 0x07
    1f64:	98 87       	std	Y+8, r25	; 0x08
    1f66:	a9 87       	std	Y+9, r26	; 0x09
    1f68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6c:	78 85       	ldd	r23, Y+8	; 0x08
    1f6e:	89 85       	ldd	r24, Y+9	; 0x09
    1f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e8       	ldi	r20, 0x80	; 128
    1f78:	5f e3       	ldi	r21, 0x3F	; 63
    1f7a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1f7e:	88 23       	and	r24, r24
    1f80:	2c f4       	brge	.+10     	; 0x1f8c <CLCD_voidShiftDisplayRight+0x6c>
		__ticks = 1;
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	9e 83       	std	Y+6, r25	; 0x06
    1f88:	8d 83       	std	Y+5, r24	; 0x05
    1f8a:	3f c0       	rjmp	.+126    	; 0x200a <CLCD_voidShiftDisplayRight+0xea>
	else if (__tmp > 65535)
    1f8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8e:	78 85       	ldd	r23, Y+8	; 0x08
    1f90:	89 85       	ldd	r24, Y+9	; 0x09
    1f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	3f ef       	ldi	r19, 0xFF	; 255
    1f98:	4f e7       	ldi	r20, 0x7F	; 127
    1f9a:	57 e4       	ldi	r21, 0x47	; 71
    1f9c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1fa0:	18 16       	cp	r1, r24
    1fa2:	4c f5       	brge	.+82     	; 0x1ff6 <CLCD_voidShiftDisplayRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1faa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e2       	ldi	r20, 0x20	; 32
    1fb2:	51 e4       	ldi	r21, 0x41	; 65
    1fb4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	9e 83       	std	Y+6, r25	; 0x06
    1fca:	8d 83       	std	Y+5, r24	; 0x05
    1fcc:	0f c0       	rjmp	.+30     	; 0x1fec <CLCD_voidShiftDisplayRight+0xcc>
    1fce:	88 ec       	ldi	r24, 0xC8	; 200
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	9c 83       	std	Y+4, r25	; 0x04
    1fd4:	8b 83       	std	Y+3, r24	; 0x03
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <CLCD_voidShiftDisplayRight+0xba>
    1fde:	9c 83       	std	Y+4, r25	; 0x04
    1fe0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	9e 83       	std	Y+6, r25	; 0x06
    1fea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fec:	8d 81       	ldd	r24, Y+5	; 0x05
    1fee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	69 f7       	brne	.-38     	; 0x1fce <CLCD_voidShiftDisplayRight+0xae>
    1ff4:	14 c0       	rjmp	.+40     	; 0x201e <CLCD_voidShiftDisplayRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff8:	78 85       	ldd	r23, Y+8	; 0x08
    1ffa:	89 85       	ldd	r24, Y+9	; 0x09
    1ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	8d 83       	std	Y+5, r24	; 0x05
    200a:	8d 81       	ldd	r24, Y+5	; 0x05
    200c:	9e 81       	ldd	r25, Y+6	; 0x06
    200e:	9a 83       	std	Y+2, r25	; 0x02
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	9a 81       	ldd	r25, Y+2	; 0x02
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	f1 f7       	brne	.-4      	; 0x2016 <CLCD_voidShiftDisplayRight+0xf6>
    201a:	9a 83       	std	Y+2, r25	; 0x02
    201c:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    201e:	2e 96       	adiw	r28, 0x0e	; 14
    2020:	0f b6       	in	r0, 0x3f	; 63
    2022:	f8 94       	cli
    2024:	de bf       	out	0x3e, r29	; 62
    2026:	0f be       	out	0x3f, r0	; 63
    2028:	cd bf       	out	0x3d, r28	; 61
    202a:	cf 91       	pop	r28
    202c:	df 91       	pop	r29
    202e:	08 95       	ret

00002030 <CLCD_voidShiftDisplayLeft>:
 *                                                *-----------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayLeft(void)
{
    2030:	df 93       	push	r29
    2032:	cf 93       	push	r28
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
    2038:	2e 97       	sbiw	r28, 0x0e	; 14
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	de bf       	out	0x3e, r29	; 62
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_LEFT);
    2044:	88 e1       	ldi	r24, 0x18	; 24
    2046:	0e 94 b1 0b 	call	0x1762	; 0x1762 <CLCD_vSendCommand>
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	a0 e8       	ldi	r26, 0x80	; 128
    2050:	bf e3       	ldi	r27, 0x3F	; 63
    2052:	8b 87       	std	Y+11, r24	; 0x0b
    2054:	9c 87       	std	Y+12, r25	; 0x0c
    2056:	ad 87       	std	Y+13, r26	; 0x0d
    2058:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205a:	6b 85       	ldd	r22, Y+11	; 0x0b
    205c:	7c 85       	ldd	r23, Y+12	; 0x0c
    205e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2060:	9e 85       	ldd	r25, Y+14	; 0x0e
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	4a ef       	ldi	r20, 0xFA	; 250
    2068:	54 e4       	ldi	r21, 0x44	; 68
    206a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	8f 83       	std	Y+7, r24	; 0x07
    2074:	98 87       	std	Y+8, r25	; 0x08
    2076:	a9 87       	std	Y+9, r26	; 0x09
    2078:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    207a:	6f 81       	ldd	r22, Y+7	; 0x07
    207c:	78 85       	ldd	r23, Y+8	; 0x08
    207e:	89 85       	ldd	r24, Y+9	; 0x09
    2080:	9a 85       	ldd	r25, Y+10	; 0x0a
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e8       	ldi	r20, 0x80	; 128
    2088:	5f e3       	ldi	r21, 0x3F	; 63
    208a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    208e:	88 23       	and	r24, r24
    2090:	2c f4       	brge	.+10     	; 0x209c <CLCD_voidShiftDisplayLeft+0x6c>
		__ticks = 1;
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9e 83       	std	Y+6, r25	; 0x06
    2098:	8d 83       	std	Y+5, r24	; 0x05
    209a:	3f c0       	rjmp	.+126    	; 0x211a <CLCD_voidShiftDisplayLeft+0xea>
	else if (__tmp > 65535)
    209c:	6f 81       	ldd	r22, Y+7	; 0x07
    209e:	78 85       	ldd	r23, Y+8	; 0x08
    20a0:	89 85       	ldd	r24, Y+9	; 0x09
    20a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	3f ef       	ldi	r19, 0xFF	; 255
    20a8:	4f e7       	ldi	r20, 0x7F	; 127
    20aa:	57 e4       	ldi	r21, 0x47	; 71
    20ac:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    20b0:	18 16       	cp	r1, r24
    20b2:	4c f5       	brge	.+82     	; 0x2106 <CLCD_voidShiftDisplayLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e2       	ldi	r20, 0x20	; 32
    20c2:	51 e4       	ldi	r21, 0x41	; 65
    20c4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	bc 01       	movw	r22, r24
    20ce:	cd 01       	movw	r24, r26
    20d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9e 83       	std	Y+6, r25	; 0x06
    20da:	8d 83       	std	Y+5, r24	; 0x05
    20dc:	0f c0       	rjmp	.+30     	; 0x20fc <CLCD_voidShiftDisplayLeft+0xcc>
    20de:	88 ec       	ldi	r24, 0xC8	; 200
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	9c 83       	std	Y+4, r25	; 0x04
    20e4:	8b 83       	std	Y+3, r24	; 0x03
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <CLCD_voidShiftDisplayLeft+0xba>
    20ee:	9c 83       	std	Y+4, r25	; 0x04
    20f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f2:	8d 81       	ldd	r24, Y+5	; 0x05
    20f4:	9e 81       	ldd	r25, Y+6	; 0x06
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	9e 83       	std	Y+6, r25	; 0x06
    20fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fc:	8d 81       	ldd	r24, Y+5	; 0x05
    20fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	69 f7       	brne	.-38     	; 0x20de <CLCD_voidShiftDisplayLeft+0xae>
    2104:	14 c0       	rjmp	.+40     	; 0x212e <CLCD_voidShiftDisplayLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2106:	6f 81       	ldd	r22, Y+7	; 0x07
    2108:	78 85       	ldd	r23, Y+8	; 0x08
    210a:	89 85       	ldd	r24, Y+9	; 0x09
    210c:	9a 85       	ldd	r25, Y+10	; 0x0a
    210e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9e 83       	std	Y+6, r25	; 0x06
    2118:	8d 83       	std	Y+5, r24	; 0x05
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	9e 81       	ldd	r25, Y+6	; 0x06
    211e:	9a 83       	std	Y+2, r25	; 0x02
    2120:	89 83       	std	Y+1, r24	; 0x01
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	9a 81       	ldd	r25, Y+2	; 0x02
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <CLCD_voidShiftDisplayLeft+0xf6>
    212a:	9a 83       	std	Y+2, r25	; 0x02
    212c:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    212e:	2e 96       	adiw	r28, 0x0e	; 14
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <DIO_enumSetPinDir>:
      =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */

DIO_errorStatus DIO_enumSetPinDir(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Direction)
{
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	28 97       	sbiw	r28, 0x08	; 8
    214a:	0f b6       	in	r0, 0x3f	; 63
    214c:	f8 94       	cli
    214e:	de bf       	out	0x3e, r29	; 62
    2150:	0f be       	out	0x3f, r0	; 63
    2152:	cd bf       	out	0x3d, r28	; 61
    2154:	8a 83       	std	Y+2, r24	; 0x02
    2156:	6b 83       	std	Y+3, r22	; 0x03
    2158:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	84 30       	cpi	r24, 0x04	; 4
    2162:	08 f0       	brcs	.+2      	; 0x2166 <DIO_enumSetPinDir+0x26>
    2164:	f1 c0       	rjmp	.+482    	; 0x2348 <DIO_enumSetPinDir+0x208>
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	88 30       	cpi	r24, 0x08	; 8
    216a:	08 f0       	brcs	.+2      	; 0x216e <DIO_enumSetPinDir+0x2e>
    216c:	ed c0       	rjmp	.+474    	; 0x2348 <DIO_enumSetPinDir+0x208>
  {
    if (Copy_u8Direction == DIO_PIN_OUTPUT)
    216e:	8c 81       	ldd	r24, Y+4	; 0x04
    2170:	81 30       	cpi	r24, 0x01	; 1
    2172:	09 f0       	breq	.+2      	; 0x2176 <DIO_enumSetPinDir+0x36>
    2174:	6f c0       	rjmp	.+222    	; 0x2254 <DIO_enumSetPinDir+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	28 2f       	mov	r18, r24
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	38 87       	std	Y+8, r19	; 0x08
    217e:	2f 83       	std	Y+7, r18	; 0x07
    2180:	8f 81       	ldd	r24, Y+7	; 0x07
    2182:	98 85       	ldd	r25, Y+8	; 0x08
    2184:	81 30       	cpi	r24, 0x01	; 1
    2186:	91 05       	cpc	r25, r1
    2188:	49 f1       	breq	.+82     	; 0x21dc <DIO_enumSetPinDir+0x9c>
    218a:	2f 81       	ldd	r18, Y+7	; 0x07
    218c:	38 85       	ldd	r19, Y+8	; 0x08
    218e:	22 30       	cpi	r18, 0x02	; 2
    2190:	31 05       	cpc	r19, r1
    2192:	2c f4       	brge	.+10     	; 0x219e <DIO_enumSetPinDir+0x5e>
    2194:	8f 81       	ldd	r24, Y+7	; 0x07
    2196:	98 85       	ldd	r25, Y+8	; 0x08
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	61 f0       	breq	.+24     	; 0x21b4 <DIO_enumSetPinDir+0x74>
    219c:	d6 c0       	rjmp	.+428    	; 0x234a <DIO_enumSetPinDir+0x20a>
    219e:	2f 81       	ldd	r18, Y+7	; 0x07
    21a0:	38 85       	ldd	r19, Y+8	; 0x08
    21a2:	22 30       	cpi	r18, 0x02	; 2
    21a4:	31 05       	cpc	r19, r1
    21a6:	71 f1       	breq	.+92     	; 0x2204 <DIO_enumSetPinDir+0xc4>
    21a8:	8f 81       	ldd	r24, Y+7	; 0x07
    21aa:	98 85       	ldd	r25, Y+8	; 0x08
    21ac:	83 30       	cpi	r24, 0x03	; 3
    21ae:	91 05       	cpc	r25, r1
    21b0:	e9 f1       	breq	.+122    	; 0x222c <DIO_enumSetPinDir+0xec>
    21b2:	cb c0       	rjmp	.+406    	; 0x234a <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(DDRA_REG, Copy_u8PIN);
    21b4:	aa e3       	ldi	r26, 0x3A	; 58
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	ea e3       	ldi	r30, 0x3A	; 58
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	48 2f       	mov	r20, r24
    21c0:	8b 81       	ldd	r24, Y+3	; 0x03
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	02 2e       	mov	r0, r18
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <DIO_enumSetPinDir+0x92>
    21ce:	88 0f       	add	r24, r24
    21d0:	99 1f       	adc	r25, r25
    21d2:	0a 94       	dec	r0
    21d4:	e2 f7       	brpl	.-8      	; 0x21ce <DIO_enumSetPinDir+0x8e>
    21d6:	84 2b       	or	r24, r20
    21d8:	8c 93       	st	X, r24
    21da:	b7 c0       	rjmp	.+366    	; 0x234a <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(DDRB_REG, Copy_u8PIN);
    21dc:	a7 e3       	ldi	r26, 0x37	; 55
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e7 e3       	ldi	r30, 0x37	; 55
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	48 2f       	mov	r20, r24
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	28 2f       	mov	r18, r24
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	02 2e       	mov	r0, r18
    21f4:	02 c0       	rjmp	.+4      	; 0x21fa <DIO_enumSetPinDir+0xba>
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	0a 94       	dec	r0
    21fc:	e2 f7       	brpl	.-8      	; 0x21f6 <DIO_enumSetPinDir+0xb6>
    21fe:	84 2b       	or	r24, r20
    2200:	8c 93       	st	X, r24
    2202:	a3 c0       	rjmp	.+326    	; 0x234a <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(DDRC_REG, Copy_u8PIN);
    2204:	a4 e3       	ldi	r26, 0x34	; 52
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e4 e3       	ldi	r30, 0x34	; 52
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	48 2f       	mov	r20, r24
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	02 2e       	mov	r0, r18
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <DIO_enumSetPinDir+0xe2>
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	0a 94       	dec	r0
    2224:	e2 f7       	brpl	.-8      	; 0x221e <DIO_enumSetPinDir+0xde>
    2226:	84 2b       	or	r24, r20
    2228:	8c 93       	st	X, r24
    222a:	8f c0       	rjmp	.+286    	; 0x234a <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(DDRD_REG, Copy_u8PIN);
    222c:	a1 e3       	ldi	r26, 0x31	; 49
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e1 e3       	ldi	r30, 0x31	; 49
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	48 2f       	mov	r20, r24
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	02 2e       	mov	r0, r18
    2244:	02 c0       	rjmp	.+4      	; 0x224a <DIO_enumSetPinDir+0x10a>
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	0a 94       	dec	r0
    224c:	e2 f7       	brpl	.-8      	; 0x2246 <DIO_enumSetPinDir+0x106>
    224e:	84 2b       	or	r24, r20
    2250:	8c 93       	st	X, r24
    2252:	7b c0       	rjmp	.+246    	; 0x234a <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else if (Copy_u8Direction == DIO_PIN_INPUT)
    2254:	8c 81       	ldd	r24, Y+4	; 0x04
    2256:	88 23       	and	r24, r24
    2258:	09 f0       	breq	.+2      	; 0x225c <DIO_enumSetPinDir+0x11c>
    225a:	74 c0       	rjmp	.+232    	; 0x2344 <DIO_enumSetPinDir+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	3e 83       	std	Y+6, r19	; 0x06
    2264:	2d 83       	std	Y+5, r18	; 0x05
    2266:	8d 81       	ldd	r24, Y+5	; 0x05
    2268:	9e 81       	ldd	r25, Y+6	; 0x06
    226a:	81 30       	cpi	r24, 0x01	; 1
    226c:	91 05       	cpc	r25, r1
    226e:	59 f1       	breq	.+86     	; 0x22c6 <DIO_enumSetPinDir+0x186>
    2270:	2d 81       	ldd	r18, Y+5	; 0x05
    2272:	3e 81       	ldd	r19, Y+6	; 0x06
    2274:	22 30       	cpi	r18, 0x02	; 2
    2276:	31 05       	cpc	r19, r1
    2278:	2c f4       	brge	.+10     	; 0x2284 <DIO_enumSetPinDir+0x144>
    227a:	8d 81       	ldd	r24, Y+5	; 0x05
    227c:	9e 81       	ldd	r25, Y+6	; 0x06
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	69 f0       	breq	.+26     	; 0x229c <DIO_enumSetPinDir+0x15c>
    2282:	63 c0       	rjmp	.+198    	; 0x234a <DIO_enumSetPinDir+0x20a>
    2284:	2d 81       	ldd	r18, Y+5	; 0x05
    2286:	3e 81       	ldd	r19, Y+6	; 0x06
    2288:	22 30       	cpi	r18, 0x02	; 2
    228a:	31 05       	cpc	r19, r1
    228c:	89 f1       	breq	.+98     	; 0x22f0 <DIO_enumSetPinDir+0x1b0>
    228e:	8d 81       	ldd	r24, Y+5	; 0x05
    2290:	9e 81       	ldd	r25, Y+6	; 0x06
    2292:	83 30       	cpi	r24, 0x03	; 3
    2294:	91 05       	cpc	r25, r1
    2296:	09 f4       	brne	.+2      	; 0x229a <DIO_enumSetPinDir+0x15a>
    2298:	40 c0       	rjmp	.+128    	; 0x231a <DIO_enumSetPinDir+0x1da>
    229a:	57 c0       	rjmp	.+174    	; 0x234a <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    229c:	aa e3       	ldi	r26, 0x3A	; 58
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	ea e3       	ldi	r30, 0x3A	; 58
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	48 2f       	mov	r20, r24
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	02 2e       	mov	r0, r18
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <DIO_enumSetPinDir+0x17a>
    22b6:	88 0f       	add	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	0a 94       	dec	r0
    22bc:	e2 f7       	brpl	.-8      	; 0x22b6 <DIO_enumSetPinDir+0x176>
    22be:	80 95       	com	r24
    22c0:	84 23       	and	r24, r20
    22c2:	8c 93       	st	X, r24
    22c4:	42 c0       	rjmp	.+132    	; 0x234a <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    22c6:	a7 e3       	ldi	r26, 0x37	; 55
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	e7 e3       	ldi	r30, 0x37	; 55
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	48 2f       	mov	r20, r24
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	28 2f       	mov	r18, r24
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	02 2e       	mov	r0, r18
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <DIO_enumSetPinDir+0x1a4>
    22e0:	88 0f       	add	r24, r24
    22e2:	99 1f       	adc	r25, r25
    22e4:	0a 94       	dec	r0
    22e6:	e2 f7       	brpl	.-8      	; 0x22e0 <DIO_enumSetPinDir+0x1a0>
    22e8:	80 95       	com	r24
    22ea:	84 23       	and	r24, r20
    22ec:	8c 93       	st	X, r24
    22ee:	2d c0       	rjmp	.+90     	; 0x234a <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    22f0:	a4 e3       	ldi	r26, 0x34	; 52
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	e4 e3       	ldi	r30, 0x34	; 52
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	48 2f       	mov	r20, r24
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	28 2f       	mov	r18, r24
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	02 2e       	mov	r0, r18
    2308:	02 c0       	rjmp	.+4      	; 0x230e <DIO_enumSetPinDir+0x1ce>
    230a:	88 0f       	add	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	0a 94       	dec	r0
    2310:	e2 f7       	brpl	.-8      	; 0x230a <DIO_enumSetPinDir+0x1ca>
    2312:	80 95       	com	r24
    2314:	84 23       	and	r24, r20
    2316:	8c 93       	st	X, r24
    2318:	18 c0       	rjmp	.+48     	; 0x234a <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    231a:	a1 e3       	ldi	r26, 0x31	; 49
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e1 e3       	ldi	r30, 0x31	; 49
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	48 2f       	mov	r20, r24
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	28 2f       	mov	r18, r24
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	02 2e       	mov	r0, r18
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <DIO_enumSetPinDir+0x1f8>
    2334:	88 0f       	add	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	0a 94       	dec	r0
    233a:	e2 f7       	brpl	.-8      	; 0x2334 <DIO_enumSetPinDir+0x1f4>
    233c:	80 95       	com	r24
    233e:	84 23       	and	r24, r20
    2340:	8c 93       	st	X, r24
    2342:	03 c0       	rjmp	.+6      	; 0x234a <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    2344:	19 82       	std	Y+1, r1	; 0x01
    2346:	01 c0       	rjmp	.+2      	; 0x234a <DIO_enumSetPinDir+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2348:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    234a:	89 81       	ldd	r24, Y+1	; 0x01
}
    234c:	28 96       	adiw	r28, 0x08	; 8
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	de bf       	out	0x3e, r29	; 62
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	cd bf       	out	0x3d, r28	; 61
    2358:	cf 91       	pop	r28
    235a:	df 91       	pop	r29
    235c:	08 95       	ret

0000235e <DIO_enumWritePinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Value)
{
    235e:	df 93       	push	r29
    2360:	cf 93       	push	r28
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	28 97       	sbiw	r28, 0x08	; 8
    2368:	0f b6       	in	r0, 0x3f	; 63
    236a:	f8 94       	cli
    236c:	de bf       	out	0x3e, r29	; 62
    236e:	0f be       	out	0x3f, r0	; 63
    2370:	cd bf       	out	0x3d, r28	; 61
    2372:	8a 83       	std	Y+2, r24	; 0x02
    2374:	6b 83       	std	Y+3, r22	; 0x03
    2376:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	84 30       	cpi	r24, 0x04	; 4
    2380:	08 f0       	brcs	.+2      	; 0x2384 <DIO_enumWritePinVal+0x26>
    2382:	f1 c0       	rjmp	.+482    	; 0x2566 <DIO_enumWritePinVal+0x208>
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	88 30       	cpi	r24, 0x08	; 8
    2388:	08 f0       	brcs	.+2      	; 0x238c <DIO_enumWritePinVal+0x2e>
    238a:	ed c0       	rjmp	.+474    	; 0x2566 <DIO_enumWritePinVal+0x208>
  {
    if (Copy_u8Value == DIO_PIN_OUTPUT)
    238c:	8c 81       	ldd	r24, Y+4	; 0x04
    238e:	81 30       	cpi	r24, 0x01	; 1
    2390:	09 f0       	breq	.+2      	; 0x2394 <DIO_enumWritePinVal+0x36>
    2392:	6f c0       	rjmp	.+222    	; 0x2472 <DIO_enumWritePinVal+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	38 87       	std	Y+8, r19	; 0x08
    239c:	2f 83       	std	Y+7, r18	; 0x07
    239e:	8f 81       	ldd	r24, Y+7	; 0x07
    23a0:	98 85       	ldd	r25, Y+8	; 0x08
    23a2:	81 30       	cpi	r24, 0x01	; 1
    23a4:	91 05       	cpc	r25, r1
    23a6:	49 f1       	breq	.+82     	; 0x23fa <DIO_enumWritePinVal+0x9c>
    23a8:	2f 81       	ldd	r18, Y+7	; 0x07
    23aa:	38 85       	ldd	r19, Y+8	; 0x08
    23ac:	22 30       	cpi	r18, 0x02	; 2
    23ae:	31 05       	cpc	r19, r1
    23b0:	2c f4       	brge	.+10     	; 0x23bc <DIO_enumWritePinVal+0x5e>
    23b2:	8f 81       	ldd	r24, Y+7	; 0x07
    23b4:	98 85       	ldd	r25, Y+8	; 0x08
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	61 f0       	breq	.+24     	; 0x23d2 <DIO_enumWritePinVal+0x74>
    23ba:	d6 c0       	rjmp	.+428    	; 0x2568 <DIO_enumWritePinVal+0x20a>
    23bc:	2f 81       	ldd	r18, Y+7	; 0x07
    23be:	38 85       	ldd	r19, Y+8	; 0x08
    23c0:	22 30       	cpi	r18, 0x02	; 2
    23c2:	31 05       	cpc	r19, r1
    23c4:	71 f1       	breq	.+92     	; 0x2422 <DIO_enumWritePinVal+0xc4>
    23c6:	8f 81       	ldd	r24, Y+7	; 0x07
    23c8:	98 85       	ldd	r25, Y+8	; 0x08
    23ca:	83 30       	cpi	r24, 0x03	; 3
    23cc:	91 05       	cpc	r25, r1
    23ce:	e9 f1       	breq	.+122    	; 0x244a <DIO_enumWritePinVal+0xec>
    23d0:	cb c0       	rjmp	.+406    	; 0x2568 <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(PORTA_REG, Copy_u8PIN);
    23d2:	ab e3       	ldi	r26, 0x3B	; 59
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	eb e3       	ldi	r30, 0x3B	; 59
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	48 2f       	mov	r20, r24
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	28 2f       	mov	r18, r24
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	02 2e       	mov	r0, r18
    23ea:	02 c0       	rjmp	.+4      	; 0x23f0 <DIO_enumWritePinVal+0x92>
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	0a 94       	dec	r0
    23f2:	e2 f7       	brpl	.-8      	; 0x23ec <DIO_enumWritePinVal+0x8e>
    23f4:	84 2b       	or	r24, r20
    23f6:	8c 93       	st	X, r24
    23f8:	b7 c0       	rjmp	.+366    	; 0x2568 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(PORTB_REG, Copy_u8PIN);
    23fa:	a8 e3       	ldi	r26, 0x38	; 56
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e8 e3       	ldi	r30, 0x38	; 56
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	48 2f       	mov	r20, r24
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	28 2f       	mov	r18, r24
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	02 2e       	mov	r0, r18
    2412:	02 c0       	rjmp	.+4      	; 0x2418 <DIO_enumWritePinVal+0xba>
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	0a 94       	dec	r0
    241a:	e2 f7       	brpl	.-8      	; 0x2414 <DIO_enumWritePinVal+0xb6>
    241c:	84 2b       	or	r24, r20
    241e:	8c 93       	st	X, r24
    2420:	a3 c0       	rjmp	.+326    	; 0x2568 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(PORTC_REG, Copy_u8PIN);
    2422:	a5 e3       	ldi	r26, 0x35	; 53
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	e5 e3       	ldi	r30, 0x35	; 53
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	48 2f       	mov	r20, r24
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	28 2f       	mov	r18, r24
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	02 2e       	mov	r0, r18
    243a:	02 c0       	rjmp	.+4      	; 0x2440 <DIO_enumWritePinVal+0xe2>
    243c:	88 0f       	add	r24, r24
    243e:	99 1f       	adc	r25, r25
    2440:	0a 94       	dec	r0
    2442:	e2 f7       	brpl	.-8      	; 0x243c <DIO_enumWritePinVal+0xde>
    2444:	84 2b       	or	r24, r20
    2446:	8c 93       	st	X, r24
    2448:	8f c0       	rjmp	.+286    	; 0x2568 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(PORTD_REG, Copy_u8PIN);
    244a:	a2 e3       	ldi	r26, 0x32	; 50
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	e2 e3       	ldi	r30, 0x32	; 50
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	48 2f       	mov	r20, r24
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	28 2f       	mov	r18, r24
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	02 2e       	mov	r0, r18
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <DIO_enumWritePinVal+0x10a>
    2464:	88 0f       	add	r24, r24
    2466:	99 1f       	adc	r25, r25
    2468:	0a 94       	dec	r0
    246a:	e2 f7       	brpl	.-8      	; 0x2464 <DIO_enumWritePinVal+0x106>
    246c:	84 2b       	or	r24, r20
    246e:	8c 93       	st	X, r24
    2470:	7b c0       	rjmp	.+246    	; 0x2568 <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else if (Copy_u8Value == DIO_PIN_INPUT)
    2472:	8c 81       	ldd	r24, Y+4	; 0x04
    2474:	88 23       	and	r24, r24
    2476:	09 f0       	breq	.+2      	; 0x247a <DIO_enumWritePinVal+0x11c>
    2478:	74 c0       	rjmp	.+232    	; 0x2562 <DIO_enumWritePinVal+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    247a:	8a 81       	ldd	r24, Y+2	; 0x02
    247c:	28 2f       	mov	r18, r24
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	3e 83       	std	Y+6, r19	; 0x06
    2482:	2d 83       	std	Y+5, r18	; 0x05
    2484:	8d 81       	ldd	r24, Y+5	; 0x05
    2486:	9e 81       	ldd	r25, Y+6	; 0x06
    2488:	81 30       	cpi	r24, 0x01	; 1
    248a:	91 05       	cpc	r25, r1
    248c:	59 f1       	breq	.+86     	; 0x24e4 <DIO_enumWritePinVal+0x186>
    248e:	2d 81       	ldd	r18, Y+5	; 0x05
    2490:	3e 81       	ldd	r19, Y+6	; 0x06
    2492:	22 30       	cpi	r18, 0x02	; 2
    2494:	31 05       	cpc	r19, r1
    2496:	2c f4       	brge	.+10     	; 0x24a2 <DIO_enumWritePinVal+0x144>
    2498:	8d 81       	ldd	r24, Y+5	; 0x05
    249a:	9e 81       	ldd	r25, Y+6	; 0x06
    249c:	00 97       	sbiw	r24, 0x00	; 0
    249e:	69 f0       	breq	.+26     	; 0x24ba <DIO_enumWritePinVal+0x15c>
    24a0:	63 c0       	rjmp	.+198    	; 0x2568 <DIO_enumWritePinVal+0x20a>
    24a2:	2d 81       	ldd	r18, Y+5	; 0x05
    24a4:	3e 81       	ldd	r19, Y+6	; 0x06
    24a6:	22 30       	cpi	r18, 0x02	; 2
    24a8:	31 05       	cpc	r19, r1
    24aa:	89 f1       	breq	.+98     	; 0x250e <DIO_enumWritePinVal+0x1b0>
    24ac:	8d 81       	ldd	r24, Y+5	; 0x05
    24ae:	9e 81       	ldd	r25, Y+6	; 0x06
    24b0:	83 30       	cpi	r24, 0x03	; 3
    24b2:	91 05       	cpc	r25, r1
    24b4:	09 f4       	brne	.+2      	; 0x24b8 <DIO_enumWritePinVal+0x15a>
    24b6:	40 c0       	rjmp	.+128    	; 0x2538 <DIO_enumWritePinVal+0x1da>
    24b8:	57 c0       	rjmp	.+174    	; 0x2568 <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    24ba:	ab e3       	ldi	r26, 0x3B	; 59
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	eb e3       	ldi	r30, 0x3B	; 59
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	48 2f       	mov	r20, r24
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	28 2f       	mov	r18, r24
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	02 2e       	mov	r0, r18
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <DIO_enumWritePinVal+0x17a>
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	0a 94       	dec	r0
    24da:	e2 f7       	brpl	.-8      	; 0x24d4 <DIO_enumWritePinVal+0x176>
    24dc:	80 95       	com	r24
    24de:	84 23       	and	r24, r20
    24e0:	8c 93       	st	X, r24
    24e2:	42 c0       	rjmp	.+132    	; 0x2568 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    24e4:	a8 e3       	ldi	r26, 0x38	; 56
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e8 e3       	ldi	r30, 0x38	; 56
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	48 2f       	mov	r20, r24
    24f0:	8b 81       	ldd	r24, Y+3	; 0x03
    24f2:	28 2f       	mov	r18, r24
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	02 2e       	mov	r0, r18
    24fc:	02 c0       	rjmp	.+4      	; 0x2502 <DIO_enumWritePinVal+0x1a4>
    24fe:	88 0f       	add	r24, r24
    2500:	99 1f       	adc	r25, r25
    2502:	0a 94       	dec	r0
    2504:	e2 f7       	brpl	.-8      	; 0x24fe <DIO_enumWritePinVal+0x1a0>
    2506:	80 95       	com	r24
    2508:	84 23       	and	r24, r20
    250a:	8c 93       	st	X, r24
    250c:	2d c0       	rjmp	.+90     	; 0x2568 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    250e:	a5 e3       	ldi	r26, 0x35	; 53
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	e5 e3       	ldi	r30, 0x35	; 53
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 81       	ld	r24, Z
    2518:	48 2f       	mov	r20, r24
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	28 2f       	mov	r18, r24
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	02 2e       	mov	r0, r18
    2526:	02 c0       	rjmp	.+4      	; 0x252c <DIO_enumWritePinVal+0x1ce>
    2528:	88 0f       	add	r24, r24
    252a:	99 1f       	adc	r25, r25
    252c:	0a 94       	dec	r0
    252e:	e2 f7       	brpl	.-8      	; 0x2528 <DIO_enumWritePinVal+0x1ca>
    2530:	80 95       	com	r24
    2532:	84 23       	and	r24, r20
    2534:	8c 93       	st	X, r24
    2536:	18 c0       	rjmp	.+48     	; 0x2568 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    2538:	a2 e3       	ldi	r26, 0x32	; 50
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	e2 e3       	ldi	r30, 0x32	; 50
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	48 2f       	mov	r20, r24
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	28 2f       	mov	r18, r24
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	02 2e       	mov	r0, r18
    2550:	02 c0       	rjmp	.+4      	; 0x2556 <DIO_enumWritePinVal+0x1f8>
    2552:	88 0f       	add	r24, r24
    2554:	99 1f       	adc	r25, r25
    2556:	0a 94       	dec	r0
    2558:	e2 f7       	brpl	.-8      	; 0x2552 <DIO_enumWritePinVal+0x1f4>
    255a:	80 95       	com	r24
    255c:	84 23       	and	r24, r20
    255e:	8c 93       	st	X, r24
    2560:	03 c0       	rjmp	.+6      	; 0x2568 <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    2562:	19 82       	std	Y+1, r1	; 0x01
    2564:	01 c0       	rjmp	.+2      	; 0x2568 <DIO_enumWritePinVal+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2566:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    2568:	89 81       	ldd	r24, Y+1	; 0x01
}
    256a:	28 96       	adiw	r28, 0x08	; 8
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	f8 94       	cli
    2570:	de bf       	out	0x3e, r29	; 62
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	cd bf       	out	0x3d, r28	; 61
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <DIO_enumReadPinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */
DIO_errorStatus DIO_enumReadPinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 *Copy_Pu8Data)
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	27 97       	sbiw	r28, 0x07	; 7
    2586:	0f b6       	in	r0, 0x3f	; 63
    2588:	f8 94       	cli
    258a:	de bf       	out	0x3e, r29	; 62
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	cd bf       	out	0x3d, r28	; 61
    2590:	8a 83       	std	Y+2, r24	; 0x02
    2592:	6b 83       	std	Y+3, r22	; 0x03
    2594:	5d 83       	std	Y+5, r21	; 0x05
    2596:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	84 30       	cpi	r24, 0x04	; 4
    25a0:	08 f0       	brcs	.+2      	; 0x25a4 <DIO_enumReadPinVal+0x28>
    25a2:	a6 c0       	rjmp	.+332    	; 0x26f0 <DIO_enumReadPinVal+0x174>
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	88 30       	cpi	r24, 0x08	; 8
    25a8:	08 f0       	brcs	.+2      	; 0x25ac <DIO_enumReadPinVal+0x30>
    25aa:	a2 c0       	rjmp	.+324    	; 0x26f0 <DIO_enumReadPinVal+0x174>
  {
    /* Check on the Required PORT Number */
    switch (Copy_u8PORT)
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	28 2f       	mov	r18, r24
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	3f 83       	std	Y+7, r19	; 0x07
    25b4:	2e 83       	std	Y+6, r18	; 0x06
    25b6:	4e 81       	ldd	r20, Y+6	; 0x06
    25b8:	5f 81       	ldd	r21, Y+7	; 0x07
    25ba:	41 30       	cpi	r20, 0x01	; 1
    25bc:	51 05       	cpc	r21, r1
    25be:	c1 f1       	breq	.+112    	; 0x2630 <DIO_enumReadPinVal+0xb4>
    25c0:	8e 81       	ldd	r24, Y+6	; 0x06
    25c2:	9f 81       	ldd	r25, Y+7	; 0x07
    25c4:	82 30       	cpi	r24, 0x02	; 2
    25c6:	91 05       	cpc	r25, r1
    25c8:	34 f4       	brge	.+12     	; 0x25d6 <DIO_enumReadPinVal+0x5a>
    25ca:	2e 81       	ldd	r18, Y+6	; 0x06
    25cc:	3f 81       	ldd	r19, Y+7	; 0x07
    25ce:	21 15       	cp	r18, r1
    25d0:	31 05       	cpc	r19, r1
    25d2:	71 f0       	breq	.+28     	; 0x25f0 <DIO_enumReadPinVal+0x74>
    25d4:	8e c0       	rjmp	.+284    	; 0x26f2 <DIO_enumReadPinVal+0x176>
    25d6:	4e 81       	ldd	r20, Y+6	; 0x06
    25d8:	5f 81       	ldd	r21, Y+7	; 0x07
    25da:	42 30       	cpi	r20, 0x02	; 2
    25dc:	51 05       	cpc	r21, r1
    25de:	09 f4       	brne	.+2      	; 0x25e2 <DIO_enumReadPinVal+0x66>
    25e0:	47 c0       	rjmp	.+142    	; 0x2670 <DIO_enumReadPinVal+0xf4>
    25e2:	8e 81       	ldd	r24, Y+6	; 0x06
    25e4:	9f 81       	ldd	r25, Y+7	; 0x07
    25e6:	83 30       	cpi	r24, 0x03	; 3
    25e8:	91 05       	cpc	r25, r1
    25ea:	09 f4       	brne	.+2      	; 0x25ee <DIO_enumReadPinVal+0x72>
    25ec:	61 c0       	rjmp	.+194    	; 0x26b0 <DIO_enumReadPinVal+0x134>
    25ee:	81 c0       	rjmp	.+258    	; 0x26f2 <DIO_enumReadPinVal+0x176>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = READ_BIT(PINA_REG, Copy_u8PIN);
    25f0:	e9 e3       	ldi	r30, 0x39	; 57
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	48 2f       	mov	r20, r24
    25f8:	50 e0       	ldi	r21, 0x00	; 0
    25fa:	8b 81       	ldd	r24, Y+3	; 0x03
    25fc:	28 2f       	mov	r18, r24
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	02 c0       	rjmp	.+4      	; 0x260a <DIO_enumReadPinVal+0x8e>
    2606:	88 0f       	add	r24, r24
    2608:	99 1f       	adc	r25, r25
    260a:	2a 95       	dec	r18
    260c:	e2 f7       	brpl	.-8      	; 0x2606 <DIO_enumReadPinVal+0x8a>
    260e:	9a 01       	movw	r18, r20
    2610:	28 23       	and	r18, r24
    2612:	39 23       	and	r19, r25
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	88 2f       	mov	r24, r24
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	a9 01       	movw	r20, r18
    261c:	02 c0       	rjmp	.+4      	; 0x2622 <DIO_enumReadPinVal+0xa6>
    261e:	55 95       	asr	r21
    2620:	47 95       	ror	r20
    2622:	8a 95       	dec	r24
    2624:	e2 f7       	brpl	.-8      	; 0x261e <DIO_enumReadPinVal+0xa2>
    2626:	ca 01       	movw	r24, r20
    2628:	ec 81       	ldd	r30, Y+4	; 0x04
    262a:	fd 81       	ldd	r31, Y+5	; 0x05
    262c:	80 83       	st	Z, r24
    262e:	61 c0       	rjmp	.+194    	; 0x26f2 <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = READ_BIT(PINB_REG, Copy_u8PIN);
    2630:	e6 e3       	ldi	r30, 0x36	; 54
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	48 2f       	mov	r20, r24
    2638:	50 e0       	ldi	r21, 0x00	; 0
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	28 2f       	mov	r18, r24
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	02 c0       	rjmp	.+4      	; 0x264a <DIO_enumReadPinVal+0xce>
    2646:	88 0f       	add	r24, r24
    2648:	99 1f       	adc	r25, r25
    264a:	2a 95       	dec	r18
    264c:	e2 f7       	brpl	.-8      	; 0x2646 <DIO_enumReadPinVal+0xca>
    264e:	9a 01       	movw	r18, r20
    2650:	28 23       	and	r18, r24
    2652:	39 23       	and	r19, r25
    2654:	8b 81       	ldd	r24, Y+3	; 0x03
    2656:	88 2f       	mov	r24, r24
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	a9 01       	movw	r20, r18
    265c:	02 c0       	rjmp	.+4      	; 0x2662 <DIO_enumReadPinVal+0xe6>
    265e:	55 95       	asr	r21
    2660:	47 95       	ror	r20
    2662:	8a 95       	dec	r24
    2664:	e2 f7       	brpl	.-8      	; 0x265e <DIO_enumReadPinVal+0xe2>
    2666:	ca 01       	movw	r24, r20
    2668:	ec 81       	ldd	r30, Y+4	; 0x04
    266a:	fd 81       	ldd	r31, Y+5	; 0x05
    266c:	80 83       	st	Z, r24
    266e:	41 c0       	rjmp	.+130    	; 0x26f2 <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = READ_BIT(PINC_REG, Copy_u8PIN);
    2670:	e3 e3       	ldi	r30, 0x33	; 51
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	48 2f       	mov	r20, r24
    2678:	50 e0       	ldi	r21, 0x00	; 0
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	28 2f       	mov	r18, r24
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	02 c0       	rjmp	.+4      	; 0x268a <DIO_enumReadPinVal+0x10e>
    2686:	88 0f       	add	r24, r24
    2688:	99 1f       	adc	r25, r25
    268a:	2a 95       	dec	r18
    268c:	e2 f7       	brpl	.-8      	; 0x2686 <DIO_enumReadPinVal+0x10a>
    268e:	9a 01       	movw	r18, r20
    2690:	28 23       	and	r18, r24
    2692:	39 23       	and	r19, r25
    2694:	8b 81       	ldd	r24, Y+3	; 0x03
    2696:	88 2f       	mov	r24, r24
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	a9 01       	movw	r20, r18
    269c:	02 c0       	rjmp	.+4      	; 0x26a2 <DIO_enumReadPinVal+0x126>
    269e:	55 95       	asr	r21
    26a0:	47 95       	ror	r20
    26a2:	8a 95       	dec	r24
    26a4:	e2 f7       	brpl	.-8      	; 0x269e <DIO_enumReadPinVal+0x122>
    26a6:	ca 01       	movw	r24, r20
    26a8:	ec 81       	ldd	r30, Y+4	; 0x04
    26aa:	fd 81       	ldd	r31, Y+5	; 0x05
    26ac:	80 83       	st	Z, r24
    26ae:	21 c0       	rjmp	.+66     	; 0x26f2 <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = READ_BIT(PIND_REG, Copy_u8PIN);
    26b0:	e0 e3       	ldi	r30, 0x30	; 48
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 81       	ld	r24, Z
    26b6:	48 2f       	mov	r20, r24
    26b8:	50 e0       	ldi	r21, 0x00	; 0
    26ba:	8b 81       	ldd	r24, Y+3	; 0x03
    26bc:	28 2f       	mov	r18, r24
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	02 c0       	rjmp	.+4      	; 0x26ca <DIO_enumReadPinVal+0x14e>
    26c6:	88 0f       	add	r24, r24
    26c8:	99 1f       	adc	r25, r25
    26ca:	2a 95       	dec	r18
    26cc:	e2 f7       	brpl	.-8      	; 0x26c6 <DIO_enumReadPinVal+0x14a>
    26ce:	9a 01       	movw	r18, r20
    26d0:	28 23       	and	r18, r24
    26d2:	39 23       	and	r19, r25
    26d4:	8b 81       	ldd	r24, Y+3	; 0x03
    26d6:	88 2f       	mov	r24, r24
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	a9 01       	movw	r20, r18
    26dc:	02 c0       	rjmp	.+4      	; 0x26e2 <DIO_enumReadPinVal+0x166>
    26de:	55 95       	asr	r21
    26e0:	47 95       	ror	r20
    26e2:	8a 95       	dec	r24
    26e4:	e2 f7       	brpl	.-8      	; 0x26de <DIO_enumReadPinVal+0x162>
    26e6:	ca 01       	movw	r24, r20
    26e8:	ec 81       	ldd	r30, Y+4	; 0x04
    26ea:	fd 81       	ldd	r31, Y+5	; 0x05
    26ec:	80 83       	st	Z, r24
    26ee:	01 c0       	rjmp	.+2      	; 0x26f2 <DIO_enumReadPinVal+0x176>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    26f0:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    26f4:	27 96       	adiw	r28, 0x07	; 7
    26f6:	0f b6       	in	r0, 0x3f	; 63
    26f8:	f8 94       	cli
    26fa:	de bf       	out	0x3e, r29	; 62
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	cd bf       	out	0x3d, r28	; 61
    2700:	cf 91       	pop	r28
    2702:	df 91       	pop	r29
    2704:	08 95       	ret

00002706 <DIO_enumTogglePinVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN)
{
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	00 d0       	rcall	.+0      	; 0x270c <DIO_enumTogglePinVal+0x6>
    270c:	00 d0       	rcall	.+0      	; 0x270e <DIO_enumTogglePinVal+0x8>
    270e:	0f 92       	push	r0
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
    2714:	8a 83       	std	Y+2, r24	; 0x02
    2716:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	84 30       	cpi	r24, 0x04	; 4
    2720:	08 f0       	brcs	.+2      	; 0x2724 <DIO_enumTogglePinVal+0x1e>
    2722:	73 c0       	rjmp	.+230    	; 0x280a <DIO_enumTogglePinVal+0x104>
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	88 30       	cpi	r24, 0x08	; 8
    2728:	08 f0       	brcs	.+2      	; 0x272c <DIO_enumTogglePinVal+0x26>
    272a:	6f c0       	rjmp	.+222    	; 0x280a <DIO_enumTogglePinVal+0x104>
  {
    switch (Copy_u8PORT)
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	28 2f       	mov	r18, r24
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	3d 83       	std	Y+5, r19	; 0x05
    2734:	2c 83       	std	Y+4, r18	; 0x04
    2736:	8c 81       	ldd	r24, Y+4	; 0x04
    2738:	9d 81       	ldd	r25, Y+5	; 0x05
    273a:	81 30       	cpi	r24, 0x01	; 1
    273c:	91 05       	cpc	r25, r1
    273e:	49 f1       	breq	.+82     	; 0x2792 <DIO_enumTogglePinVal+0x8c>
    2740:	2c 81       	ldd	r18, Y+4	; 0x04
    2742:	3d 81       	ldd	r19, Y+5	; 0x05
    2744:	22 30       	cpi	r18, 0x02	; 2
    2746:	31 05       	cpc	r19, r1
    2748:	2c f4       	brge	.+10     	; 0x2754 <DIO_enumTogglePinVal+0x4e>
    274a:	8c 81       	ldd	r24, Y+4	; 0x04
    274c:	9d 81       	ldd	r25, Y+5	; 0x05
    274e:	00 97       	sbiw	r24, 0x00	; 0
    2750:	61 f0       	breq	.+24     	; 0x276a <DIO_enumTogglePinVal+0x64>
    2752:	5c c0       	rjmp	.+184    	; 0x280c <DIO_enumTogglePinVal+0x106>
    2754:	2c 81       	ldd	r18, Y+4	; 0x04
    2756:	3d 81       	ldd	r19, Y+5	; 0x05
    2758:	22 30       	cpi	r18, 0x02	; 2
    275a:	31 05       	cpc	r19, r1
    275c:	71 f1       	breq	.+92     	; 0x27ba <DIO_enumTogglePinVal+0xb4>
    275e:	8c 81       	ldd	r24, Y+4	; 0x04
    2760:	9d 81       	ldd	r25, Y+5	; 0x05
    2762:	83 30       	cpi	r24, 0x03	; 3
    2764:	91 05       	cpc	r25, r1
    2766:	e9 f1       	breq	.+122    	; 0x27e2 <DIO_enumTogglePinVal+0xdc>
    2768:	51 c0       	rjmp	.+162    	; 0x280c <DIO_enumTogglePinVal+0x106>
    {
    case DIO_PORTA:
      TOG_BIT(PORTA_REG, Copy_u8PIN);
    276a:	ab e3       	ldi	r26, 0x3B	; 59
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	eb e3       	ldi	r30, 0x3B	; 59
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	48 2f       	mov	r20, r24
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	28 2f       	mov	r18, r24
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	02 2e       	mov	r0, r18
    2782:	02 c0       	rjmp	.+4      	; 0x2788 <DIO_enumTogglePinVal+0x82>
    2784:	88 0f       	add	r24, r24
    2786:	99 1f       	adc	r25, r25
    2788:	0a 94       	dec	r0
    278a:	e2 f7       	brpl	.-8      	; 0x2784 <DIO_enumTogglePinVal+0x7e>
    278c:	84 27       	eor	r24, r20
    278e:	8c 93       	st	X, r24
    2790:	3d c0       	rjmp	.+122    	; 0x280c <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTB:
      TOG_BIT(PORTB_REG, Copy_u8PIN);
    2792:	a8 e3       	ldi	r26, 0x38	; 56
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	e8 e3       	ldi	r30, 0x38	; 56
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	48 2f       	mov	r20, r24
    279e:	8b 81       	ldd	r24, Y+3	; 0x03
    27a0:	28 2f       	mov	r18, r24
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	02 2e       	mov	r0, r18
    27aa:	02 c0       	rjmp	.+4      	; 0x27b0 <DIO_enumTogglePinVal+0xaa>
    27ac:	88 0f       	add	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	0a 94       	dec	r0
    27b2:	e2 f7       	brpl	.-8      	; 0x27ac <DIO_enumTogglePinVal+0xa6>
    27b4:	84 27       	eor	r24, r20
    27b6:	8c 93       	st	X, r24
    27b8:	29 c0       	rjmp	.+82     	; 0x280c <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTC:
      TOG_BIT(PORTC_REG, Copy_u8PIN);
    27ba:	a5 e3       	ldi	r26, 0x35	; 53
    27bc:	b0 e0       	ldi	r27, 0x00	; 0
    27be:	e5 e3       	ldi	r30, 0x35	; 53
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	48 2f       	mov	r20, r24
    27c6:	8b 81       	ldd	r24, Y+3	; 0x03
    27c8:	28 2f       	mov	r18, r24
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	02 2e       	mov	r0, r18
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <DIO_enumTogglePinVal+0xd2>
    27d4:	88 0f       	add	r24, r24
    27d6:	99 1f       	adc	r25, r25
    27d8:	0a 94       	dec	r0
    27da:	e2 f7       	brpl	.-8      	; 0x27d4 <DIO_enumTogglePinVal+0xce>
    27dc:	84 27       	eor	r24, r20
    27de:	8c 93       	st	X, r24
    27e0:	15 c0       	rjmp	.+42     	; 0x280c <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTD:
      TOG_BIT(PORTD_REG, Copy_u8PIN);
    27e2:	a2 e3       	ldi	r26, 0x32	; 50
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	e2 e3       	ldi	r30, 0x32	; 50
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	80 81       	ld	r24, Z
    27ec:	48 2f       	mov	r20, r24
    27ee:	8b 81       	ldd	r24, Y+3	; 0x03
    27f0:	28 2f       	mov	r18, r24
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	02 2e       	mov	r0, r18
    27fa:	02 c0       	rjmp	.+4      	; 0x2800 <DIO_enumTogglePinVal+0xfa>
    27fc:	88 0f       	add	r24, r24
    27fe:	99 1f       	adc	r25, r25
    2800:	0a 94       	dec	r0
    2802:	e2 f7       	brpl	.-8      	; 0x27fc <DIO_enumTogglePinVal+0xf6>
    2804:	84 27       	eor	r24, r20
    2806:	8c 93       	st	X, r24
    2808:	01 c0       	rjmp	.+2      	; 0x280c <DIO_enumTogglePinVal+0x106>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    280a:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    280c:	89 81       	ldd	r24, Y+1	; 0x01
}
    280e:	0f 90       	pop	r0
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	cf 91       	pop	r28
    281a:	df 91       	pop	r29
    281c:	08 95       	ret

0000281e <DIO_enumConnectPullUp>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
    =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumConnectPullUp(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    281e:	df 93       	push	r29
    2820:	cf 93       	push	r28
    2822:	00 d0       	rcall	.+0      	; 0x2824 <DIO_enumConnectPullUp+0x6>
    2824:	00 d0       	rcall	.+0      	; 0x2826 <DIO_enumConnectPullUp+0x8>
    2826:	00 d0       	rcall	.+0      	; 0x2828 <DIO_enumConnectPullUp+0xa>
    2828:	cd b7       	in	r28, 0x3d	; 61
    282a:	de b7       	in	r29, 0x3e	; 62
    282c:	8a 83       	std	Y+2, r24	; 0x02
    282e:	6b 83       	std	Y+3, r22	; 0x03
    2830:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2836:	8a 81       	ldd	r24, Y+2	; 0x02
    2838:	84 30       	cpi	r24, 0x04	; 4
    283a:	08 f0       	brcs	.+2      	; 0x283e <DIO_enumConnectPullUp+0x20>
    283c:	3e c1       	rjmp	.+636    	; 0x2aba <DIO_enumConnectPullUp+0x29c>
    283e:	8b 81       	ldd	r24, Y+3	; 0x03
    2840:	88 30       	cpi	r24, 0x08	; 8
    2842:	08 f0       	brcs	.+2      	; 0x2846 <DIO_enumConnectPullUp+0x28>
    2844:	3a c1       	rjmp	.+628    	; 0x2aba <DIO_enumConnectPullUp+0x29c>
  {
    switch (Copy_u8PORT)
    2846:	8a 81       	ldd	r24, Y+2	; 0x02
    2848:	28 2f       	mov	r18, r24
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	3e 83       	std	Y+6, r19	; 0x06
    284e:	2d 83       	std	Y+5, r18	; 0x05
    2850:	8d 81       	ldd	r24, Y+5	; 0x05
    2852:	9e 81       	ldd	r25, Y+6	; 0x06
    2854:	81 30       	cpi	r24, 0x01	; 1
    2856:	91 05       	cpc	r25, r1
    2858:	09 f4       	brne	.+2      	; 0x285c <DIO_enumConnectPullUp+0x3e>
    285a:	5d c0       	rjmp	.+186    	; 0x2916 <DIO_enumConnectPullUp+0xf8>
    285c:	2d 81       	ldd	r18, Y+5	; 0x05
    285e:	3e 81       	ldd	r19, Y+6	; 0x06
    2860:	22 30       	cpi	r18, 0x02	; 2
    2862:	31 05       	cpc	r19, r1
    2864:	2c f4       	brge	.+10     	; 0x2870 <DIO_enumConnectPullUp+0x52>
    2866:	8d 81       	ldd	r24, Y+5	; 0x05
    2868:	9e 81       	ldd	r25, Y+6	; 0x06
    286a:	00 97       	sbiw	r24, 0x00	; 0
    286c:	71 f0       	breq	.+28     	; 0x288a <DIO_enumConnectPullUp+0x6c>
    286e:	26 c1       	rjmp	.+588    	; 0x2abc <DIO_enumConnectPullUp+0x29e>
    2870:	2d 81       	ldd	r18, Y+5	; 0x05
    2872:	3e 81       	ldd	r19, Y+6	; 0x06
    2874:	22 30       	cpi	r18, 0x02	; 2
    2876:	31 05       	cpc	r19, r1
    2878:	09 f4       	brne	.+2      	; 0x287c <DIO_enumConnectPullUp+0x5e>
    287a:	93 c0       	rjmp	.+294    	; 0x29a2 <DIO_enumConnectPullUp+0x184>
    287c:	8d 81       	ldd	r24, Y+5	; 0x05
    287e:	9e 81       	ldd	r25, Y+6	; 0x06
    2880:	83 30       	cpi	r24, 0x03	; 3
    2882:	91 05       	cpc	r25, r1
    2884:	09 f4       	brne	.+2      	; 0x2888 <DIO_enumConnectPullUp+0x6a>
    2886:	d3 c0       	rjmp	.+422    	; 0x2a2e <DIO_enumConnectPullUp+0x210>
    2888:	19 c1       	rjmp	.+562    	; 0x2abc <DIO_enumConnectPullUp+0x29e>
    {
    /* Connect or disconnect the pull up resistance to the given pin in port A */
    case DIO_PORTA:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    288a:	8c 81       	ldd	r24, Y+4	; 0x04
    288c:	81 30       	cpi	r24, 0x01	; 1
    288e:	71 f5       	brne	.+92     	; 0x28ec <DIO_enumConnectPullUp+0xce>
      {
        CLR_BIT(SFIOR_REG, PUD); // It's default is zero
    2890:	a0 e5       	ldi	r26, 0x50	; 80
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	e0 e5       	ldi	r30, 0x50	; 80
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	8b 7f       	andi	r24, 0xFB	; 251
    289c:	8c 93       	st	X, r24
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    289e:	aa e3       	ldi	r26, 0x3A	; 58
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	ea e3       	ldi	r30, 0x3A	; 58
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	48 2f       	mov	r20, r24
    28aa:	8b 81       	ldd	r24, Y+3	; 0x03
    28ac:	28 2f       	mov	r18, r24
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	02 c0       	rjmp	.+4      	; 0x28ba <DIO_enumConnectPullUp+0x9c>
    28b6:	88 0f       	add	r24, r24
    28b8:	99 1f       	adc	r25, r25
    28ba:	2a 95       	dec	r18
    28bc:	e2 f7       	brpl	.-8      	; 0x28b6 <DIO_enumConnectPullUp+0x98>
    28be:	80 95       	com	r24
    28c0:	84 23       	and	r24, r20
    28c2:	8c 93       	st	X, r24
        SET_BIT(PORTA_REG, Copy_u8PIN);
    28c4:	ab e3       	ldi	r26, 0x3B	; 59
    28c6:	b0 e0       	ldi	r27, 0x00	; 0
    28c8:	eb e3       	ldi	r30, 0x3B	; 59
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	80 81       	ld	r24, Z
    28ce:	48 2f       	mov	r20, r24
    28d0:	8b 81       	ldd	r24, Y+3	; 0x03
    28d2:	28 2f       	mov	r18, r24
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	02 2e       	mov	r0, r18
    28dc:	02 c0       	rjmp	.+4      	; 0x28e2 <DIO_enumConnectPullUp+0xc4>
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	0a 94       	dec	r0
    28e4:	e2 f7       	brpl	.-8      	; 0x28de <DIO_enumConnectPullUp+0xc0>
    28e6:	84 2b       	or	r24, r20
    28e8:	8c 93       	st	X, r24
    28ea:	e8 c0       	rjmp	.+464    	; 0x2abc <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    28ec:	ab e3       	ldi	r26, 0x3B	; 59
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	eb e3       	ldi	r30, 0x3B	; 59
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	48 2f       	mov	r20, r24
    28f8:	8b 81       	ldd	r24, Y+3	; 0x03
    28fa:	28 2f       	mov	r18, r24
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	02 2e       	mov	r0, r18
    2904:	02 c0       	rjmp	.+4      	; 0x290a <DIO_enumConnectPullUp+0xec>
    2906:	88 0f       	add	r24, r24
    2908:	99 1f       	adc	r25, r25
    290a:	0a 94       	dec	r0
    290c:	e2 f7       	brpl	.-8      	; 0x2906 <DIO_enumConnectPullUp+0xe8>
    290e:	80 95       	com	r24
    2910:	84 23       	and	r24, r20
    2912:	8c 93       	st	X, r24
    2914:	d3 c0       	rjmp	.+422    	; 0x2abc <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port B */
    case DIO_PORTB:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    2916:	8c 81       	ldd	r24, Y+4	; 0x04
    2918:	81 30       	cpi	r24, 0x01	; 1
    291a:	71 f5       	brne	.+92     	; 0x2978 <DIO_enumConnectPullUp+0x15a>
      {
        CLR_BIT(SFIOR_REG, PUD);
    291c:	a0 e5       	ldi	r26, 0x50	; 80
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	e0 e5       	ldi	r30, 0x50	; 80
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	8b 7f       	andi	r24, 0xFB	; 251
    2928:	8c 93       	st	X, r24
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    292a:	a7 e3       	ldi	r26, 0x37	; 55
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	e7 e3       	ldi	r30, 0x37	; 55
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 81       	ld	r24, Z
    2934:	48 2f       	mov	r20, r24
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
    2938:	28 2f       	mov	r18, r24
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	02 c0       	rjmp	.+4      	; 0x2946 <DIO_enumConnectPullUp+0x128>
    2942:	88 0f       	add	r24, r24
    2944:	99 1f       	adc	r25, r25
    2946:	2a 95       	dec	r18
    2948:	e2 f7       	brpl	.-8      	; 0x2942 <DIO_enumConnectPullUp+0x124>
    294a:	80 95       	com	r24
    294c:	84 23       	and	r24, r20
    294e:	8c 93       	st	X, r24
        SET_BIT(PORTB_REG, Copy_u8PIN);
    2950:	a8 e3       	ldi	r26, 0x38	; 56
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	e8 e3       	ldi	r30, 0x38	; 56
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	48 2f       	mov	r20, r24
    295c:	8b 81       	ldd	r24, Y+3	; 0x03
    295e:	28 2f       	mov	r18, r24
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	02 2e       	mov	r0, r18
    2968:	02 c0       	rjmp	.+4      	; 0x296e <DIO_enumConnectPullUp+0x150>
    296a:	88 0f       	add	r24, r24
    296c:	99 1f       	adc	r25, r25
    296e:	0a 94       	dec	r0
    2970:	e2 f7       	brpl	.-8      	; 0x296a <DIO_enumConnectPullUp+0x14c>
    2972:	84 2b       	or	r24, r20
    2974:	8c 93       	st	X, r24
    2976:	a2 c0       	rjmp	.+324    	; 0x2abc <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    2978:	a8 e3       	ldi	r26, 0x38	; 56
    297a:	b0 e0       	ldi	r27, 0x00	; 0
    297c:	e8 e3       	ldi	r30, 0x38	; 56
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	80 81       	ld	r24, Z
    2982:	48 2f       	mov	r20, r24
    2984:	8b 81       	ldd	r24, Y+3	; 0x03
    2986:	28 2f       	mov	r18, r24
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	02 2e       	mov	r0, r18
    2990:	02 c0       	rjmp	.+4      	; 0x2996 <DIO_enumConnectPullUp+0x178>
    2992:	88 0f       	add	r24, r24
    2994:	99 1f       	adc	r25, r25
    2996:	0a 94       	dec	r0
    2998:	e2 f7       	brpl	.-8      	; 0x2992 <DIO_enumConnectPullUp+0x174>
    299a:	80 95       	com	r24
    299c:	84 23       	and	r24, r20
    299e:	8c 93       	st	X, r24
    29a0:	8d c0       	rjmp	.+282    	; 0x2abc <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port C */
    case DIO_PORTC:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    29a2:	8c 81       	ldd	r24, Y+4	; 0x04
    29a4:	81 30       	cpi	r24, 0x01	; 1
    29a6:	71 f5       	brne	.+92     	; 0x2a04 <DIO_enumConnectPullUp+0x1e6>
      {
        CLR_BIT(SFIOR_REG, PUD);
    29a8:	a0 e5       	ldi	r26, 0x50	; 80
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	e0 e5       	ldi	r30, 0x50	; 80
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	8b 7f       	andi	r24, 0xFB	; 251
    29b4:	8c 93       	st	X, r24
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    29b6:	a4 e3       	ldi	r26, 0x34	; 52
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	e4 e3       	ldi	r30, 0x34	; 52
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	48 2f       	mov	r20, r24
    29c2:	8b 81       	ldd	r24, Y+3	; 0x03
    29c4:	28 2f       	mov	r18, r24
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	02 c0       	rjmp	.+4      	; 0x29d2 <DIO_enumConnectPullUp+0x1b4>
    29ce:	88 0f       	add	r24, r24
    29d0:	99 1f       	adc	r25, r25
    29d2:	2a 95       	dec	r18
    29d4:	e2 f7       	brpl	.-8      	; 0x29ce <DIO_enumConnectPullUp+0x1b0>
    29d6:	80 95       	com	r24
    29d8:	84 23       	and	r24, r20
    29da:	8c 93       	st	X, r24
        SET_BIT(PORTC_REG, Copy_u8PIN);
    29dc:	a5 e3       	ldi	r26, 0x35	; 53
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	e5 e3       	ldi	r30, 0x35	; 53
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	48 2f       	mov	r20, r24
    29e8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ea:	28 2f       	mov	r18, r24
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	02 2e       	mov	r0, r18
    29f4:	02 c0       	rjmp	.+4      	; 0x29fa <DIO_enumConnectPullUp+0x1dc>
    29f6:	88 0f       	add	r24, r24
    29f8:	99 1f       	adc	r25, r25
    29fa:	0a 94       	dec	r0
    29fc:	e2 f7       	brpl	.-8      	; 0x29f6 <DIO_enumConnectPullUp+0x1d8>
    29fe:	84 2b       	or	r24, r20
    2a00:	8c 93       	st	X, r24
    2a02:	5c c0       	rjmp	.+184    	; 0x2abc <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    2a04:	a5 e3       	ldi	r26, 0x35	; 53
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	e5 e3       	ldi	r30, 0x35	; 53
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	48 2f       	mov	r20, r24
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
    2a12:	28 2f       	mov	r18, r24
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	02 2e       	mov	r0, r18
    2a1c:	02 c0       	rjmp	.+4      	; 0x2a22 <DIO_enumConnectPullUp+0x204>
    2a1e:	88 0f       	add	r24, r24
    2a20:	99 1f       	adc	r25, r25
    2a22:	0a 94       	dec	r0
    2a24:	e2 f7       	brpl	.-8      	; 0x2a1e <DIO_enumConnectPullUp+0x200>
    2a26:	80 95       	com	r24
    2a28:	84 23       	and	r24, r20
    2a2a:	8c 93       	st	X, r24
    2a2c:	47 c0       	rjmp	.+142    	; 0x2abc <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port D */
    case DIO_PORTD:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    2a2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a30:	81 30       	cpi	r24, 0x01	; 1
    2a32:	71 f5       	brne	.+92     	; 0x2a90 <DIO_enumConnectPullUp+0x272>
      {
        CLR_BIT(SFIOR_REG, PUD);
    2a34:	a0 e5       	ldi	r26, 0x50	; 80
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	e0 e5       	ldi	r30, 0x50	; 80
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	8b 7f       	andi	r24, 0xFB	; 251
    2a40:	8c 93       	st	X, r24
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    2a42:	a1 e3       	ldi	r26, 0x31	; 49
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	e1 e3       	ldi	r30, 0x31	; 49
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	48 2f       	mov	r20, r24
    2a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a50:	28 2f       	mov	r18, r24
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	02 c0       	rjmp	.+4      	; 0x2a5e <DIO_enumConnectPullUp+0x240>
    2a5a:	88 0f       	add	r24, r24
    2a5c:	99 1f       	adc	r25, r25
    2a5e:	2a 95       	dec	r18
    2a60:	e2 f7       	brpl	.-8      	; 0x2a5a <DIO_enumConnectPullUp+0x23c>
    2a62:	80 95       	com	r24
    2a64:	84 23       	and	r24, r20
    2a66:	8c 93       	st	X, r24
        SET_BIT(PORTD_REG, Copy_u8PIN);
    2a68:	a2 e3       	ldi	r26, 0x32	; 50
    2a6a:	b0 e0       	ldi	r27, 0x00	; 0
    2a6c:	e2 e3       	ldi	r30, 0x32	; 50
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	48 2f       	mov	r20, r24
    2a74:	8b 81       	ldd	r24, Y+3	; 0x03
    2a76:	28 2f       	mov	r18, r24
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	02 2e       	mov	r0, r18
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <DIO_enumConnectPullUp+0x268>
    2a82:	88 0f       	add	r24, r24
    2a84:	99 1f       	adc	r25, r25
    2a86:	0a 94       	dec	r0
    2a88:	e2 f7       	brpl	.-8      	; 0x2a82 <DIO_enumConnectPullUp+0x264>
    2a8a:	84 2b       	or	r24, r20
    2a8c:	8c 93       	st	X, r24
    2a8e:	16 c0       	rjmp	.+44     	; 0x2abc <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    2a90:	a2 e3       	ldi	r26, 0x32	; 50
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	e2 e3       	ldi	r30, 0x32	; 50
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	48 2f       	mov	r20, r24
    2a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9e:	28 2f       	mov	r18, r24
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	02 2e       	mov	r0, r18
    2aa8:	02 c0       	rjmp	.+4      	; 0x2aae <DIO_enumConnectPullUp+0x290>
    2aaa:	88 0f       	add	r24, r24
    2aac:	99 1f       	adc	r25, r25
    2aae:	0a 94       	dec	r0
    2ab0:	e2 f7       	brpl	.-8      	; 0x2aaa <DIO_enumConnectPullUp+0x28c>
    2ab2:	80 95       	com	r24
    2ab4:	84 23       	and	r24, r20
    2ab6:	8c 93       	st	X, r24
    2ab8:	01 c0       	rjmp	.+2      	; 0x2abc <DIO_enumConnectPullUp+0x29e>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    2aba:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2abc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2abe:	26 96       	adiw	r28, 0x06	; 6
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	f8 94       	cli
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	cd bf       	out	0x3d, r28	; 61
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	08 95       	ret

00002ad0 <DIO_enumSetPortDir>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_errorStatus DIO_enumSetPortDir(u8 Copy_u8PORT, u8 Copy_u8Direction)
{
    2ad0:	df 93       	push	r29
    2ad2:	cf 93       	push	r28
    2ad4:	00 d0       	rcall	.+0      	; 0x2ad6 <DIO_enumSetPortDir+0x6>
    2ad6:	00 d0       	rcall	.+0      	; 0x2ad8 <DIO_enumSetPortDir+0x8>
    2ad8:	0f 92       	push	r0
    2ada:	cd b7       	in	r28, 0x3d	; 61
    2adc:	de b7       	in	r29, 0x3e	; 62
    2ade:	8a 83       	std	Y+2, r24	; 0x02
    2ae0:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD))
    2ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae8:	84 30       	cpi	r24, 0x04	; 4
    2aea:	a8 f5       	brcc	.+106    	; 0x2b56 <DIO_enumSetPortDir+0x86>
  {
    switch (Copy_u8PORT)
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	3d 83       	std	Y+5, r19	; 0x05
    2af4:	2c 83       	std	Y+4, r18	; 0x04
    2af6:	8c 81       	ldd	r24, Y+4	; 0x04
    2af8:	9d 81       	ldd	r25, Y+5	; 0x05
    2afa:	81 30       	cpi	r24, 0x01	; 1
    2afc:	91 05       	cpc	r25, r1
    2afe:	d1 f0       	breq	.+52     	; 0x2b34 <DIO_enumSetPortDir+0x64>
    2b00:	2c 81       	ldd	r18, Y+4	; 0x04
    2b02:	3d 81       	ldd	r19, Y+5	; 0x05
    2b04:	22 30       	cpi	r18, 0x02	; 2
    2b06:	31 05       	cpc	r19, r1
    2b08:	2c f4       	brge	.+10     	; 0x2b14 <DIO_enumSetPortDir+0x44>
    2b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b0c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b0e:	00 97       	sbiw	r24, 0x00	; 0
    2b10:	61 f0       	breq	.+24     	; 0x2b2a <DIO_enumSetPortDir+0x5a>
    2b12:	1f c0       	rjmp	.+62     	; 0x2b52 <DIO_enumSetPortDir+0x82>
    2b14:	2c 81       	ldd	r18, Y+4	; 0x04
    2b16:	3d 81       	ldd	r19, Y+5	; 0x05
    2b18:	22 30       	cpi	r18, 0x02	; 2
    2b1a:	31 05       	cpc	r19, r1
    2b1c:	81 f0       	breq	.+32     	; 0x2b3e <DIO_enumSetPortDir+0x6e>
    2b1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b20:	9d 81       	ldd	r25, Y+5	; 0x05
    2b22:	83 30       	cpi	r24, 0x03	; 3
    2b24:	91 05       	cpc	r25, r1
    2b26:	81 f0       	breq	.+32     	; 0x2b48 <DIO_enumSetPortDir+0x78>
    2b28:	14 c0       	rjmp	.+40     	; 0x2b52 <DIO_enumSetPortDir+0x82>
    {
    case DIO_PORTA:
      DDRA_REG = Copy_u8Direction;
    2b2a:	ea e3       	ldi	r30, 0x3A	; 58
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b30:	80 83       	st	Z, r24
    2b32:	12 c0       	rjmp	.+36     	; 0x2b58 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTB:
      DDRB_REG = Copy_u8Direction;
    2b34:	e7 e3       	ldi	r30, 0x37	; 55
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3a:	80 83       	st	Z, r24
    2b3c:	0d c0       	rjmp	.+26     	; 0x2b58 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTC:
      DDRC_REG = Copy_u8Direction;
    2b3e:	e4 e3       	ldi	r30, 0x34	; 52
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	8b 81       	ldd	r24, Y+3	; 0x03
    2b44:	80 83       	st	Z, r24
    2b46:	08 c0       	rjmp	.+16     	; 0x2b58 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTD:
      DDRD_REG = Copy_u8Direction;
    2b48:	e1 e3       	ldi	r30, 0x31	; 49
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4e:	80 83       	st	Z, r24
    2b50:	03 c0       	rjmp	.+6      	; 0x2b58 <DIO_enumSetPortDir+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    2b52:	19 82       	std	Y+1, r1	; 0x01
    2b54:	01 c0       	rjmp	.+2      	; 0x2b58 <DIO_enumSetPortDir+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2b56:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    2b58:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b5a:	0f 90       	pop	r0
    2b5c:	0f 90       	pop	r0
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	cf 91       	pop	r28
    2b66:	df 91       	pop	r29
    2b68:	08 95       	ret

00002b6a <DIO_enumWritePortVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePortVal(u8 Copy_u8PORT, u8 Copy_u8Value)
{
    2b6a:	df 93       	push	r29
    2b6c:	cf 93       	push	r28
    2b6e:	00 d0       	rcall	.+0      	; 0x2b70 <DIO_enumWritePortVal+0x6>
    2b70:	00 d0       	rcall	.+0      	; 0x2b72 <DIO_enumWritePortVal+0x8>
    2b72:	0f 92       	push	r0
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
    2b78:	8a 83       	std	Y+2, r24	; 0x02
    2b7a:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD) && ((Copy_u8Value <= 255) || (Copy_u8Value == DIO_PORT_LOW) || (Copy_u8Value == DIO_PORT_HIGH)))
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
    2b82:	84 30       	cpi	r24, 0x04	; 4
    2b84:	a8 f5       	brcc	.+106    	; 0x2bf0 <DIO_enumWritePortVal+0x86>
  {
    switch (Copy_u8PORT)
    2b86:	8a 81       	ldd	r24, Y+2	; 0x02
    2b88:	28 2f       	mov	r18, r24
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	3d 83       	std	Y+5, r19	; 0x05
    2b8e:	2c 83       	std	Y+4, r18	; 0x04
    2b90:	8c 81       	ldd	r24, Y+4	; 0x04
    2b92:	9d 81       	ldd	r25, Y+5	; 0x05
    2b94:	81 30       	cpi	r24, 0x01	; 1
    2b96:	91 05       	cpc	r25, r1
    2b98:	d1 f0       	breq	.+52     	; 0x2bce <DIO_enumWritePortVal+0x64>
    2b9a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b9c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b9e:	22 30       	cpi	r18, 0x02	; 2
    2ba0:	31 05       	cpc	r19, r1
    2ba2:	2c f4       	brge	.+10     	; 0x2bae <DIO_enumWritePortVal+0x44>
    2ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ba8:	00 97       	sbiw	r24, 0x00	; 0
    2baa:	61 f0       	breq	.+24     	; 0x2bc4 <DIO_enumWritePortVal+0x5a>
    2bac:	1f c0       	rjmp	.+62     	; 0x2bec <DIO_enumWritePortVal+0x82>
    2bae:	2c 81       	ldd	r18, Y+4	; 0x04
    2bb0:	3d 81       	ldd	r19, Y+5	; 0x05
    2bb2:	22 30       	cpi	r18, 0x02	; 2
    2bb4:	31 05       	cpc	r19, r1
    2bb6:	81 f0       	breq	.+32     	; 0x2bd8 <DIO_enumWritePortVal+0x6e>
    2bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bba:	9d 81       	ldd	r25, Y+5	; 0x05
    2bbc:	83 30       	cpi	r24, 0x03	; 3
    2bbe:	91 05       	cpc	r25, r1
    2bc0:	81 f0       	breq	.+32     	; 0x2be2 <DIO_enumWritePortVal+0x78>
    2bc2:	14 c0       	rjmp	.+40     	; 0x2bec <DIO_enumWritePortVal+0x82>
    {
    case DIO_PORTA:
      PORTA_REG= Copy_u8Value;
    2bc4:	eb e3       	ldi	r30, 0x3B	; 59
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bca:	80 83       	st	Z, r24
    2bcc:	12 c0       	rjmp	.+36     	; 0x2bf2 <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTB:
      PORTB_REG = Copy_u8Value;
    2bce:	e8 e3       	ldi	r30, 0x38	; 56
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd4:	80 83       	st	Z, r24
    2bd6:	0d c0       	rjmp	.+26     	; 0x2bf2 <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTC:
      PORTC_REG = Copy_u8Value;
    2bd8:	e5 e3       	ldi	r30, 0x35	; 53
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bde:	80 83       	st	Z, r24
    2be0:	08 c0       	rjmp	.+16     	; 0x2bf2 <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTD:
      PORTD_REG = Copy_u8Value;
    2be2:	e2 e3       	ldi	r30, 0x32	; 50
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	8b 81       	ldd	r24, Y+3	; 0x03
    2be8:	80 83       	st	Z, r24
    2bea:	03 c0       	rjmp	.+6      	; 0x2bf2 <DIO_enumWritePortVal+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    2bec:	19 82       	std	Y+1, r1	; 0x01
    2bee:	01 c0       	rjmp	.+2      	; 0x2bf2 <DIO_enumWritePortVal+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2bf0:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    2bf2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bf4:	0f 90       	pop	r0
    2bf6:	0f 90       	pop	r0
    2bf8:	0f 90       	pop	r0
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	cf 91       	pop	r28
    2c00:	df 91       	pop	r29
    2c02:	08 95       	ret

00002c04 <DIO_enumReadPorVal>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_errorStatus DIO_enumReadPorVal(u8 Copy_u8PORT, u8 *Copy_Pu8Data)
{
    2c04:	df 93       	push	r29
    2c06:	cf 93       	push	r28
    2c08:	cd b7       	in	r28, 0x3d	; 61
    2c0a:	de b7       	in	r29, 0x3e	; 62
    2c0c:	27 97       	sbiw	r28, 0x07	; 7
    2c0e:	0f b6       	in	r0, 0x3f	; 63
    2c10:	f8 94       	cli
    2c12:	de bf       	out	0x3e, r29	; 62
    2c14:	0f be       	out	0x3f, r0	; 63
    2c16:	cd bf       	out	0x3d, r28	; 61
    2c18:	8a 83       	std	Y+2, r24	; 0x02
    2c1a:	7c 83       	std	Y+4, r23	; 0x04
    2c1c:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2c22:	8a 81       	ldd	r24, Y+2	; 0x02
    2c24:	84 30       	cpi	r24, 0x04	; 4
    2c26:	08 f0       	brcs	.+2      	; 0x2c2a <DIO_enumReadPorVal+0x26>
    2c28:	3f c0       	rjmp	.+126    	; 0x2ca8 <DIO_enumReadPorVal+0xa4>
  {
    switch (Copy_u8PORT)
    2c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2c:	28 2f       	mov	r18, r24
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	3f 83       	std	Y+7, r19	; 0x07
    2c32:	2e 83       	std	Y+6, r18	; 0x06
    2c34:	8e 81       	ldd	r24, Y+6	; 0x06
    2c36:	9f 81       	ldd	r25, Y+7	; 0x07
    2c38:	81 30       	cpi	r24, 0x01	; 1
    2c3a:	91 05       	cpc	r25, r1
    2c3c:	e1 f0       	breq	.+56     	; 0x2c76 <DIO_enumReadPorVal+0x72>
    2c3e:	2e 81       	ldd	r18, Y+6	; 0x06
    2c40:	3f 81       	ldd	r19, Y+7	; 0x07
    2c42:	22 30       	cpi	r18, 0x02	; 2
    2c44:	31 05       	cpc	r19, r1
    2c46:	2c f4       	brge	.+10     	; 0x2c52 <DIO_enumReadPorVal+0x4e>
    2c48:	8e 81       	ldd	r24, Y+6	; 0x06
    2c4a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c4c:	00 97       	sbiw	r24, 0x00	; 0
    2c4e:	61 f0       	breq	.+24     	; 0x2c68 <DIO_enumReadPorVal+0x64>
    2c50:	27 c0       	rjmp	.+78     	; 0x2ca0 <DIO_enumReadPorVal+0x9c>
    2c52:	2e 81       	ldd	r18, Y+6	; 0x06
    2c54:	3f 81       	ldd	r19, Y+7	; 0x07
    2c56:	22 30       	cpi	r18, 0x02	; 2
    2c58:	31 05       	cpc	r19, r1
    2c5a:	a1 f0       	breq	.+40     	; 0x2c84 <DIO_enumReadPorVal+0x80>
    2c5c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c5e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c60:	83 30       	cpi	r24, 0x03	; 3
    2c62:	91 05       	cpc	r25, r1
    2c64:	b1 f0       	breq	.+44     	; 0x2c92 <DIO_enumReadPorVal+0x8e>
    2c66:	1c c0       	rjmp	.+56     	; 0x2ca0 <DIO_enumReadPorVal+0x9c>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = PINA_REG;
    2c68:	e9 e3       	ldi	r30, 0x39	; 57
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	80 81       	ld	r24, Z
    2c6e:	eb 81       	ldd	r30, Y+3	; 0x03
    2c70:	fc 81       	ldd	r31, Y+4	; 0x04
    2c72:	80 83       	st	Z, r24
    2c74:	16 c0       	rjmp	.+44     	; 0x2ca2 <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = PINB_REG;
    2c76:	e6 e3       	ldi	r30, 0x36	; 54
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c7e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c80:	80 83       	st	Z, r24
    2c82:	0f c0       	rjmp	.+30     	; 0x2ca2 <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = PINC_REG;
    2c84:	e3 e3       	ldi	r30, 0x33	; 51
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	80 81       	ld	r24, Z
    2c8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2c8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2c8e:	80 83       	st	Z, r24
    2c90:	08 c0       	rjmp	.+16     	; 0x2ca2 <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = PIND_REG;
    2c92:	e0 e3       	ldi	r30, 0x30	; 48
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 81       	ld	r24, Z
    2c98:	eb 81       	ldd	r30, Y+3	; 0x03
    2c9a:	fc 81       	ldd	r31, Y+4	; 0x04
    2c9c:	80 83       	st	Z, r24
    2c9e:	01 c0       	rjmp	.+2      	; 0x2ca2 <DIO_enumReadPorVal+0x9e>
      break;
    default:
      LOC_enumState = DIO_NOK;
    2ca0:	19 82       	std	Y+1, r1	; 0x01
      break;
    }
    return LOC_enumState;
    2ca2:	99 81       	ldd	r25, Y+1	; 0x01
    2ca4:	9d 83       	std	Y+5, r25	; 0x05
    2ca6:	03 c0       	rjmp	.+6      	; 0x2cae <DIO_enumReadPorVal+0xaa>
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2ca8:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    2caa:	29 81       	ldd	r18, Y+1	; 0x01
    2cac:	2d 83       	std	Y+5, r18	; 0x05
    2cae:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2cb0:	27 96       	adiw	r28, 0x07	; 7
    2cb2:	0f b6       	in	r0, 0x3f	; 63
    2cb4:	f8 94       	cli
    2cb6:	de bf       	out	0x3e, r29	; 62
    2cb8:	0f be       	out	0x3f, r0	; 63
    2cba:	cd bf       	out	0x3d, r28	; 61
    2cbc:	cf 91       	pop	r28
    2cbe:	df 91       	pop	r29
    2cc0:	08 95       	ret

00002cc2 <DIO_enumTogglePortValue>:
 * Parameters :
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePortValue(u8 Copy_u8PORT)
{
    2cc2:	df 93       	push	r29
    2cc4:	cf 93       	push	r28
    2cc6:	00 d0       	rcall	.+0      	; 0x2cc8 <DIO_enumTogglePortValue+0x6>
    2cc8:	00 d0       	rcall	.+0      	; 0x2cca <DIO_enumTogglePortValue+0x8>
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
    2cce:	8a 83       	std	Y+2, r24	; 0x02
  DIO_errorStatus LOC_enumState = DIO_OK;
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8PORT <= DIO_PORTD)
    2cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd6:	84 30       	cpi	r24, 0x04	; 4
    2cd8:	08 f0       	brcs	.+2      	; 0x2cdc <DIO_enumTogglePortValue+0x1a>
    2cda:	3f c0       	rjmp	.+126    	; 0x2d5a <DIO_enumTogglePortValue+0x98>
  {
    switch (Copy_u8PORT)
    2cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cde:	28 2f       	mov	r18, r24
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	3c 83       	std	Y+4, r19	; 0x04
    2ce4:	2b 83       	std	Y+3, r18	; 0x03
    2ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cea:	81 30       	cpi	r24, 0x01	; 1
    2cec:	91 05       	cpc	r25, r1
    2cee:	e9 f0       	breq	.+58     	; 0x2d2a <DIO_enumTogglePortValue+0x68>
    2cf0:	2b 81       	ldd	r18, Y+3	; 0x03
    2cf2:	3c 81       	ldd	r19, Y+4	; 0x04
    2cf4:	22 30       	cpi	r18, 0x02	; 2
    2cf6:	31 05       	cpc	r19, r1
    2cf8:	2c f4       	brge	.+10     	; 0x2d04 <DIO_enumTogglePortValue+0x42>
    2cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cfe:	00 97       	sbiw	r24, 0x00	; 0
    2d00:	61 f0       	breq	.+24     	; 0x2d1a <DIO_enumTogglePortValue+0x58>
    2d02:	2c c0       	rjmp	.+88     	; 0x2d5c <DIO_enumTogglePortValue+0x9a>
    2d04:	2b 81       	ldd	r18, Y+3	; 0x03
    2d06:	3c 81       	ldd	r19, Y+4	; 0x04
    2d08:	22 30       	cpi	r18, 0x02	; 2
    2d0a:	31 05       	cpc	r19, r1
    2d0c:	b1 f0       	breq	.+44     	; 0x2d3a <DIO_enumTogglePortValue+0x78>
    2d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d10:	9c 81       	ldd	r25, Y+4	; 0x04
    2d12:	83 30       	cpi	r24, 0x03	; 3
    2d14:	91 05       	cpc	r25, r1
    2d16:	c9 f0       	breq	.+50     	; 0x2d4a <DIO_enumTogglePortValue+0x88>
    2d18:	21 c0       	rjmp	.+66     	; 0x2d5c <DIO_enumTogglePortValue+0x9a>
    {
    case DIO_PORTA:
      PORTA_REG = ~PORTA_REG;
    2d1a:	ab e3       	ldi	r26, 0x3B	; 59
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	eb e3       	ldi	r30, 0x3B	; 59
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	80 95       	com	r24
    2d26:	8c 93       	st	X, r24
    2d28:	19 c0       	rjmp	.+50     	; 0x2d5c <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTB:
      PORTB_REG = ~PORTB_REG;
    2d2a:	a8 e3       	ldi	r26, 0x38	; 56
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	e8 e3       	ldi	r30, 0x38	; 56
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	80 95       	com	r24
    2d36:	8c 93       	st	X, r24
    2d38:	11 c0       	rjmp	.+34     	; 0x2d5c <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTC:
      PORTC_REG = ~PORTC_REG;
    2d3a:	a5 e3       	ldi	r26, 0x35	; 53
    2d3c:	b0 e0       	ldi	r27, 0x00	; 0
    2d3e:	e5 e3       	ldi	r30, 0x35	; 53
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	80 81       	ld	r24, Z
    2d44:	80 95       	com	r24
    2d46:	8c 93       	st	X, r24
    2d48:	09 c0       	rjmp	.+18     	; 0x2d5c <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTD:
      PORTD_REG = ~PORTD_REG;
    2d4a:	a2 e3       	ldi	r26, 0x32	; 50
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	e2 e3       	ldi	r30, 0x32	; 50
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	80 81       	ld	r24, Z
    2d54:	80 95       	com	r24
    2d56:	8c 93       	st	X, r24
    2d58:	01 c0       	rjmp	.+2      	; 0x2d5c <DIO_enumTogglePortValue+0x9a>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2d5a:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d5e:	0f 90       	pop	r0
    2d60:	0f 90       	pop	r0
    2d62:	0f 90       	pop	r0
    2d64:	0f 90       	pop	r0
    2d66:	cf 91       	pop	r28
    2d68:	df 91       	pop	r29
    2d6a:	08 95       	ret

00002d6c <DIO_vWriteLowNibble>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_errorStatus DIO_vWriteLowNibble(u8 Copy_u8PORT, u8 value)
{
    2d6c:	df 93       	push	r29
    2d6e:	cf 93       	push	r28
    2d70:	00 d0       	rcall	.+0      	; 0x2d72 <DIO_vWriteLowNibble+0x6>
    2d72:	00 d0       	rcall	.+0      	; 0x2d74 <DIO_vWriteLowNibble+0x8>
    2d74:	0f 92       	push	r0
    2d76:	cd b7       	in	r28, 0x3d	; 61
    2d78:	de b7       	in	r29, 0x3e	; 62
    2d7a:	8a 83       	std	Y+2, r24	; 0x02
    2d7c:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2d82:	8a 81       	ldd	r24, Y+2	; 0x02
    2d84:	84 30       	cpi	r24, 0x04	; 4
    2d86:	08 f0       	brcs	.+2      	; 0x2d8a <DIO_vWriteLowNibble+0x1e>
    2d88:	62 c0       	rjmp	.+196    	; 0x2e4e <DIO_vWriteLowNibble+0xe2>
  {
    value &= 0x0F;
    2d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8c:	8f 70       	andi	r24, 0x0F	; 15
    2d8e:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    2d90:	8a 81       	ldd	r24, Y+2	; 0x02
    2d92:	28 2f       	mov	r18, r24
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	3d 83       	std	Y+5, r19	; 0x05
    2d98:	2c 83       	std	Y+4, r18	; 0x04
    2d9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d9e:	81 30       	cpi	r24, 0x01	; 1
    2da0:	91 05       	cpc	r25, r1
    2da2:	29 f1       	breq	.+74     	; 0x2dee <DIO_vWriteLowNibble+0x82>
    2da4:	2c 81       	ldd	r18, Y+4	; 0x04
    2da6:	3d 81       	ldd	r19, Y+5	; 0x05
    2da8:	22 30       	cpi	r18, 0x02	; 2
    2daa:	31 05       	cpc	r19, r1
    2dac:	2c f4       	brge	.+10     	; 0x2db8 <DIO_vWriteLowNibble+0x4c>
    2dae:	8c 81       	ldd	r24, Y+4	; 0x04
    2db0:	9d 81       	ldd	r25, Y+5	; 0x05
    2db2:	00 97       	sbiw	r24, 0x00	; 0
    2db4:	61 f0       	breq	.+24     	; 0x2dce <DIO_vWriteLowNibble+0x62>
    2db6:	4c c0       	rjmp	.+152    	; 0x2e50 <DIO_vWriteLowNibble+0xe4>
    2db8:	2c 81       	ldd	r18, Y+4	; 0x04
    2dba:	3d 81       	ldd	r19, Y+5	; 0x05
    2dbc:	22 30       	cpi	r18, 0x02	; 2
    2dbe:	31 05       	cpc	r19, r1
    2dc0:	31 f1       	breq	.+76     	; 0x2e0e <DIO_vWriteLowNibble+0xa2>
    2dc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc4:	9d 81       	ldd	r25, Y+5	; 0x05
    2dc6:	83 30       	cpi	r24, 0x03	; 3
    2dc8:	91 05       	cpc	r25, r1
    2dca:	89 f1       	breq	.+98     	; 0x2e2e <DIO_vWriteLowNibble+0xc2>
    2dcc:	41 c0       	rjmp	.+130    	; 0x2e50 <DIO_vWriteLowNibble+0xe4>
    {
    case DIO_PORTA:
      PORTA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    2dce:	ab e3       	ldi	r26, 0x3B	; 59
    2dd0:	b0 e0       	ldi	r27, 0x00	; 0
    2dd2:	eb e3       	ldi	r30, 0x3B	; 59
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	80 81       	ld	r24, Z
    2dd8:	80 7f       	andi	r24, 0xF0	; 240
    2dda:	8c 93       	st	X, r24
      PORTA_REG |= value;
    2ddc:	ab e3       	ldi	r26, 0x3B	; 59
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	eb e3       	ldi	r30, 0x3B	; 59
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	90 81       	ld	r25, Z
    2de6:	8b 81       	ldd	r24, Y+3	; 0x03
    2de8:	89 2b       	or	r24, r25
    2dea:	8c 93       	st	X, r24
    2dec:	31 c0       	rjmp	.+98     	; 0x2e50 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    2dee:	a8 e3       	ldi	r26, 0x38	; 56
    2df0:	b0 e0       	ldi	r27, 0x00	; 0
    2df2:	e8 e3       	ldi	r30, 0x38	; 56
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	80 81       	ld	r24, Z
    2df8:	80 7f       	andi	r24, 0xF0	; 240
    2dfa:	8c 93       	st	X, r24
      PORTB_REG |= value;
    2dfc:	a8 e3       	ldi	r26, 0x38	; 56
    2dfe:	b0 e0       	ldi	r27, 0x00	; 0
    2e00:	e8 e3       	ldi	r30, 0x38	; 56
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	90 81       	ld	r25, Z
    2e06:	8b 81       	ldd	r24, Y+3	; 0x03
    2e08:	89 2b       	or	r24, r25
    2e0a:	8c 93       	st	X, r24
    2e0c:	21 c0       	rjmp	.+66     	; 0x2e50 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    2e0e:	a5 e3       	ldi	r26, 0x35	; 53
    2e10:	b0 e0       	ldi	r27, 0x00	; 0
    2e12:	e5 e3       	ldi	r30, 0x35	; 53
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	80 81       	ld	r24, Z
    2e18:	80 7f       	andi	r24, 0xF0	; 240
    2e1a:	8c 93       	st	X, r24
      PORTC_REG |= value;
    2e1c:	a5 e3       	ldi	r26, 0x35	; 53
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	e5 e3       	ldi	r30, 0x35	; 53
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	90 81       	ld	r25, Z
    2e26:	8b 81       	ldd	r24, Y+3	; 0x03
    2e28:	89 2b       	or	r24, r25
    2e2a:	8c 93       	st	X, r24
    2e2c:	11 c0       	rjmp	.+34     	; 0x2e50 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    2e2e:	a2 e3       	ldi	r26, 0x32	; 50
    2e30:	b0 e0       	ldi	r27, 0x00	; 0
    2e32:	e2 e3       	ldi	r30, 0x32	; 50
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	80 81       	ld	r24, Z
    2e38:	80 7f       	andi	r24, 0xF0	; 240
    2e3a:	8c 93       	st	X, r24
      PORTD_REG |= value;
    2e3c:	a2 e3       	ldi	r26, 0x32	; 50
    2e3e:	b0 e0       	ldi	r27, 0x00	; 0
    2e40:	e2 e3       	ldi	r30, 0x32	; 50
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	90 81       	ld	r25, Z
    2e46:	8b 81       	ldd	r24, Y+3	; 0x03
    2e48:	89 2b       	or	r24, r25
    2e4a:	8c 93       	st	X, r24
    2e4c:	01 c0       	rjmp	.+2      	; 0x2e50 <DIO_vWriteLowNibble+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    2e4e:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	cf 91       	pop	r28
    2e5e:	df 91       	pop	r29
    2e60:	08 95       	ret

00002e62 <DIO_vWriteHighNibble>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_errorStatus DIO_vWriteHighNibble(u8 Copy_u8PORT, u8 value)
{
    2e62:	df 93       	push	r29
    2e64:	cf 93       	push	r28
    2e66:	00 d0       	rcall	.+0      	; 0x2e68 <DIO_vWriteHighNibble+0x6>
    2e68:	00 d0       	rcall	.+0      	; 0x2e6a <DIO_vWriteHighNibble+0x8>
    2e6a:	0f 92       	push	r0
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
    2e70:	8a 83       	std	Y+2, r24	; 0x02
    2e72:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2e78:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7a:	84 30       	cpi	r24, 0x04	; 4
    2e7c:	08 f0       	brcs	.+2      	; 0x2e80 <DIO_vWriteHighNibble+0x1e>
    2e7e:	63 c0       	rjmp	.+198    	; 0x2f46 <DIO_vWriteHighNibble+0xe4>
  {
    value <<= 4;
    2e80:	8b 81       	ldd	r24, Y+3	; 0x03
    2e82:	82 95       	swap	r24
    2e84:	80 7f       	andi	r24, 0xF0	; 240
    2e86:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    2e88:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8a:	28 2f       	mov	r18, r24
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	3d 83       	std	Y+5, r19	; 0x05
    2e90:	2c 83       	std	Y+4, r18	; 0x04
    2e92:	8c 81       	ldd	r24, Y+4	; 0x04
    2e94:	9d 81       	ldd	r25, Y+5	; 0x05
    2e96:	81 30       	cpi	r24, 0x01	; 1
    2e98:	91 05       	cpc	r25, r1
    2e9a:	29 f1       	breq	.+74     	; 0x2ee6 <DIO_vWriteHighNibble+0x84>
    2e9c:	2c 81       	ldd	r18, Y+4	; 0x04
    2e9e:	3d 81       	ldd	r19, Y+5	; 0x05
    2ea0:	22 30       	cpi	r18, 0x02	; 2
    2ea2:	31 05       	cpc	r19, r1
    2ea4:	2c f4       	brge	.+10     	; 0x2eb0 <DIO_vWriteHighNibble+0x4e>
    2ea6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea8:	9d 81       	ldd	r25, Y+5	; 0x05
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	61 f0       	breq	.+24     	; 0x2ec6 <DIO_vWriteHighNibble+0x64>
    2eae:	4c c0       	rjmp	.+152    	; 0x2f48 <DIO_vWriteHighNibble+0xe6>
    2eb0:	2c 81       	ldd	r18, Y+4	; 0x04
    2eb2:	3d 81       	ldd	r19, Y+5	; 0x05
    2eb4:	22 30       	cpi	r18, 0x02	; 2
    2eb6:	31 05       	cpc	r19, r1
    2eb8:	31 f1       	breq	.+76     	; 0x2f06 <DIO_vWriteHighNibble+0xa4>
    2eba:	8c 81       	ldd	r24, Y+4	; 0x04
    2ebc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ebe:	83 30       	cpi	r24, 0x03	; 3
    2ec0:	91 05       	cpc	r25, r1
    2ec2:	89 f1       	breq	.+98     	; 0x2f26 <DIO_vWriteHighNibble+0xc4>
    2ec4:	41 c0       	rjmp	.+130    	; 0x2f48 <DIO_vWriteHighNibble+0xe6>
    {
    case DIO_PORTA:
      PORTA_REG &= 0x0F;
    2ec6:	ab e3       	ldi	r26, 0x3B	; 59
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	eb e3       	ldi	r30, 0x3B	; 59
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	80 81       	ld	r24, Z
    2ed0:	8f 70       	andi	r24, 0x0F	; 15
    2ed2:	8c 93       	st	X, r24
      PORTA_REG|= value;
    2ed4:	ab e3       	ldi	r26, 0x3B	; 59
    2ed6:	b0 e0       	ldi	r27, 0x00	; 0
    2ed8:	eb e3       	ldi	r30, 0x3B	; 59
    2eda:	f0 e0       	ldi	r31, 0x00	; 0
    2edc:	90 81       	ld	r25, Z
    2ede:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee0:	89 2b       	or	r24, r25
    2ee2:	8c 93       	st	X, r24
    2ee4:	31 c0       	rjmp	.+98     	; 0x2f48 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0x0F;
    2ee6:	a8 e3       	ldi	r26, 0x38	; 56
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	e8 e3       	ldi	r30, 0x38	; 56
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	8f 70       	andi	r24, 0x0F	; 15
    2ef2:	8c 93       	st	X, r24
      PORTB_REG |= value;
    2ef4:	a8 e3       	ldi	r26, 0x38	; 56
    2ef6:	b0 e0       	ldi	r27, 0x00	; 0
    2ef8:	e8 e3       	ldi	r30, 0x38	; 56
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	90 81       	ld	r25, Z
    2efe:	8b 81       	ldd	r24, Y+3	; 0x03
    2f00:	89 2b       	or	r24, r25
    2f02:	8c 93       	st	X, r24
    2f04:	21 c0       	rjmp	.+66     	; 0x2f48 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0x0F;
    2f06:	a5 e3       	ldi	r26, 0x35	; 53
    2f08:	b0 e0       	ldi	r27, 0x00	; 0
    2f0a:	e5 e3       	ldi	r30, 0x35	; 53
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	80 81       	ld	r24, Z
    2f10:	8f 70       	andi	r24, 0x0F	; 15
    2f12:	8c 93       	st	X, r24
      PORTC_REG |= value;
    2f14:	a5 e3       	ldi	r26, 0x35	; 53
    2f16:	b0 e0       	ldi	r27, 0x00	; 0
    2f18:	e5 e3       	ldi	r30, 0x35	; 53
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	90 81       	ld	r25, Z
    2f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f20:	89 2b       	or	r24, r25
    2f22:	8c 93       	st	X, r24
    2f24:	11 c0       	rjmp	.+34     	; 0x2f48 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0x0F;
    2f26:	a2 e3       	ldi	r26, 0x32	; 50
    2f28:	b0 e0       	ldi	r27, 0x00	; 0
    2f2a:	e2 e3       	ldi	r30, 0x32	; 50
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	80 81       	ld	r24, Z
    2f30:	8f 70       	andi	r24, 0x0F	; 15
    2f32:	8c 93       	st	X, r24
      PORTD_REG |= value;
    2f34:	a2 e3       	ldi	r26, 0x32	; 50
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	e2 e3       	ldi	r30, 0x32	; 50
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	90 81       	ld	r25, Z
    2f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f40:	89 2b       	or	r24, r25
    2f42:	8c 93       	st	X, r24
    2f44:	01 c0       	rjmp	.+2      	; 0x2f48 <DIO_vWriteHighNibble+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2f46:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2f48:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	0f 90       	pop	r0
    2f52:	0f 90       	pop	r0
    2f54:	cf 91       	pop	r28
    2f56:	df 91       	pop	r29
    2f58:	08 95       	ret

00002f5a <DIO_vSetLowNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetLowNibbleDir(u8 Copy_u8PORT, u8 value)
{
    2f5a:	df 93       	push	r29
    2f5c:	cf 93       	push	r28
    2f5e:	00 d0       	rcall	.+0      	; 0x2f60 <DIO_vSetLowNibbleDir+0x6>
    2f60:	00 d0       	rcall	.+0      	; 0x2f62 <DIO_vSetLowNibbleDir+0x8>
    2f62:	0f 92       	push	r0
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	8a 83       	std	Y+2, r24	; 0x02
    2f6a:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2f70:	8a 81       	ldd	r24, Y+2	; 0x02
    2f72:	84 30       	cpi	r24, 0x04	; 4
    2f74:	08 f0       	brcs	.+2      	; 0x2f78 <DIO_vSetLowNibbleDir+0x1e>
    2f76:	62 c0       	rjmp	.+196    	; 0x303c <DIO_vSetLowNibbleDir+0xe2>
  {
    value &= 0x0F;
    2f78:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7a:	8f 70       	andi	r24, 0x0F	; 15
    2f7c:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    2f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f80:	28 2f       	mov	r18, r24
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	3d 83       	std	Y+5, r19	; 0x05
    2f86:	2c 83       	std	Y+4, r18	; 0x04
    2f88:	8c 81       	ldd	r24, Y+4	; 0x04
    2f8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f8c:	81 30       	cpi	r24, 0x01	; 1
    2f8e:	91 05       	cpc	r25, r1
    2f90:	29 f1       	breq	.+74     	; 0x2fdc <DIO_vSetLowNibbleDir+0x82>
    2f92:	2c 81       	ldd	r18, Y+4	; 0x04
    2f94:	3d 81       	ldd	r19, Y+5	; 0x05
    2f96:	22 30       	cpi	r18, 0x02	; 2
    2f98:	31 05       	cpc	r19, r1
    2f9a:	2c f4       	brge	.+10     	; 0x2fa6 <DIO_vSetLowNibbleDir+0x4c>
    2f9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2fa0:	00 97       	sbiw	r24, 0x00	; 0
    2fa2:	61 f0       	breq	.+24     	; 0x2fbc <DIO_vSetLowNibbleDir+0x62>
    2fa4:	4c c0       	rjmp	.+152    	; 0x303e <DIO_vSetLowNibbleDir+0xe4>
    2fa6:	2c 81       	ldd	r18, Y+4	; 0x04
    2fa8:	3d 81       	ldd	r19, Y+5	; 0x05
    2faa:	22 30       	cpi	r18, 0x02	; 2
    2fac:	31 05       	cpc	r19, r1
    2fae:	31 f1       	breq	.+76     	; 0x2ffc <DIO_vSetLowNibbleDir+0xa2>
    2fb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb2:	9d 81       	ldd	r25, Y+5	; 0x05
    2fb4:	83 30       	cpi	r24, 0x03	; 3
    2fb6:	91 05       	cpc	r25, r1
    2fb8:	89 f1       	breq	.+98     	; 0x301c <DIO_vSetLowNibbleDir+0xc2>
    2fba:	41 c0       	rjmp	.+130    	; 0x303e <DIO_vSetLowNibbleDir+0xe4>
    {
    case DIO_PORTA:
      DDRA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    2fbc:	aa e3       	ldi	r26, 0x3A	; 58
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	ea e3       	ldi	r30, 0x3A	; 58
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	80 81       	ld	r24, Z
    2fc6:	80 7f       	andi	r24, 0xF0	; 240
    2fc8:	8c 93       	st	X, r24
      DDRA_REG |= value;
    2fca:	aa e3       	ldi	r26, 0x3A	; 58
    2fcc:	b0 e0       	ldi	r27, 0x00	; 0
    2fce:	ea e3       	ldi	r30, 0x3A	; 58
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	90 81       	ld	r25, Z
    2fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd6:	89 2b       	or	r24, r25
    2fd8:	8c 93       	st	X, r24
    2fda:	31 c0       	rjmp	.+98     	; 0x303e <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    2fdc:	a7 e3       	ldi	r26, 0x37	; 55
    2fde:	b0 e0       	ldi	r27, 0x00	; 0
    2fe0:	e7 e3       	ldi	r30, 0x37	; 55
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	80 81       	ld	r24, Z
    2fe6:	80 7f       	andi	r24, 0xF0	; 240
    2fe8:	8c 93       	st	X, r24
      DDRB_REG |= value;
    2fea:	a7 e3       	ldi	r26, 0x37	; 55
    2fec:	b0 e0       	ldi	r27, 0x00	; 0
    2fee:	e7 e3       	ldi	r30, 0x37	; 55
    2ff0:	f0 e0       	ldi	r31, 0x00	; 0
    2ff2:	90 81       	ld	r25, Z
    2ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff6:	89 2b       	or	r24, r25
    2ff8:	8c 93       	st	X, r24
    2ffa:	21 c0       	rjmp	.+66     	; 0x303e <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    2ffc:	a4 e3       	ldi	r26, 0x34	; 52
    2ffe:	b0 e0       	ldi	r27, 0x00	; 0
    3000:	e4 e3       	ldi	r30, 0x34	; 52
    3002:	f0 e0       	ldi	r31, 0x00	; 0
    3004:	80 81       	ld	r24, Z
    3006:	80 7f       	andi	r24, 0xF0	; 240
    3008:	8c 93       	st	X, r24
      DDRC_REG |= value;
    300a:	a4 e3       	ldi	r26, 0x34	; 52
    300c:	b0 e0       	ldi	r27, 0x00	; 0
    300e:	e4 e3       	ldi	r30, 0x34	; 52
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	90 81       	ld	r25, Z
    3014:	8b 81       	ldd	r24, Y+3	; 0x03
    3016:	89 2b       	or	r24, r25
    3018:	8c 93       	st	X, r24
    301a:	11 c0       	rjmp	.+34     	; 0x303e <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    301c:	a1 e3       	ldi	r26, 0x31	; 49
    301e:	b0 e0       	ldi	r27, 0x00	; 0
    3020:	e1 e3       	ldi	r30, 0x31	; 49
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	80 81       	ld	r24, Z
    3026:	80 7f       	andi	r24, 0xF0	; 240
    3028:	8c 93       	st	X, r24
      DDRD_REG|= value;
    302a:	a1 e3       	ldi	r26, 0x31	; 49
    302c:	b0 e0       	ldi	r27, 0x00	; 0
    302e:	e1 e3       	ldi	r30, 0x31	; 49
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	90 81       	ld	r25, Z
    3034:	8b 81       	ldd	r24, Y+3	; 0x03
    3036:	89 2b       	or	r24, r25
    3038:	8c 93       	st	X, r24
    303a:	01 c0       	rjmp	.+2      	; 0x303e <DIO_vSetLowNibbleDir+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    303c:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    303e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	cf 91       	pop	r28
    304c:	df 91       	pop	r29
    304e:	08 95       	ret

00003050 <DIO_vSetHighNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetHighNibbleDir(u8 Copy_u8PORT, u8 value)
{
    3050:	df 93       	push	r29
    3052:	cf 93       	push	r28
    3054:	00 d0       	rcall	.+0      	; 0x3056 <DIO_vSetHighNibbleDir+0x6>
    3056:	00 d0       	rcall	.+0      	; 0x3058 <DIO_vSetHighNibbleDir+0x8>
    3058:	0f 92       	push	r0
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
    305e:	8a 83       	std	Y+2, r24	; 0x02
    3060:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    3066:	8a 81       	ldd	r24, Y+2	; 0x02
    3068:	84 30       	cpi	r24, 0x04	; 4
    306a:	08 f0       	brcs	.+2      	; 0x306e <DIO_vSetHighNibbleDir+0x1e>
    306c:	63 c0       	rjmp	.+198    	; 0x3134 <DIO_vSetHighNibbleDir+0xe4>
  {
    value <<= 4;
    306e:	8b 81       	ldd	r24, Y+3	; 0x03
    3070:	82 95       	swap	r24
    3072:	80 7f       	andi	r24, 0xF0	; 240
    3074:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	28 2f       	mov	r18, r24
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	3d 83       	std	Y+5, r19	; 0x05
    307e:	2c 83       	std	Y+4, r18	; 0x04
    3080:	8c 81       	ldd	r24, Y+4	; 0x04
    3082:	9d 81       	ldd	r25, Y+5	; 0x05
    3084:	81 30       	cpi	r24, 0x01	; 1
    3086:	91 05       	cpc	r25, r1
    3088:	29 f1       	breq	.+74     	; 0x30d4 <DIO_vSetHighNibbleDir+0x84>
    308a:	2c 81       	ldd	r18, Y+4	; 0x04
    308c:	3d 81       	ldd	r19, Y+5	; 0x05
    308e:	22 30       	cpi	r18, 0x02	; 2
    3090:	31 05       	cpc	r19, r1
    3092:	2c f4       	brge	.+10     	; 0x309e <DIO_vSetHighNibbleDir+0x4e>
    3094:	8c 81       	ldd	r24, Y+4	; 0x04
    3096:	9d 81       	ldd	r25, Y+5	; 0x05
    3098:	00 97       	sbiw	r24, 0x00	; 0
    309a:	61 f0       	breq	.+24     	; 0x30b4 <DIO_vSetHighNibbleDir+0x64>
    309c:	4c c0       	rjmp	.+152    	; 0x3136 <DIO_vSetHighNibbleDir+0xe6>
    309e:	2c 81       	ldd	r18, Y+4	; 0x04
    30a0:	3d 81       	ldd	r19, Y+5	; 0x05
    30a2:	22 30       	cpi	r18, 0x02	; 2
    30a4:	31 05       	cpc	r19, r1
    30a6:	31 f1       	breq	.+76     	; 0x30f4 <DIO_vSetHighNibbleDir+0xa4>
    30a8:	8c 81       	ldd	r24, Y+4	; 0x04
    30aa:	9d 81       	ldd	r25, Y+5	; 0x05
    30ac:	83 30       	cpi	r24, 0x03	; 3
    30ae:	91 05       	cpc	r25, r1
    30b0:	89 f1       	breq	.+98     	; 0x3114 <DIO_vSetHighNibbleDir+0xc4>
    30b2:	41 c0       	rjmp	.+130    	; 0x3136 <DIO_vSetHighNibbleDir+0xe6>
    {
    case DIO_PORTA:
      DDRA_REG &= 0x0F;
    30b4:	aa e3       	ldi	r26, 0x3A	; 58
    30b6:	b0 e0       	ldi	r27, 0x00	; 0
    30b8:	ea e3       	ldi	r30, 0x3A	; 58
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	80 81       	ld	r24, Z
    30be:	8f 70       	andi	r24, 0x0F	; 15
    30c0:	8c 93       	st	X, r24
      DDRA_REG |= value;
    30c2:	aa e3       	ldi	r26, 0x3A	; 58
    30c4:	b0 e0       	ldi	r27, 0x00	; 0
    30c6:	ea e3       	ldi	r30, 0x3A	; 58
    30c8:	f0 e0       	ldi	r31, 0x00	; 0
    30ca:	90 81       	ld	r25, Z
    30cc:	8b 81       	ldd	r24, Y+3	; 0x03
    30ce:	89 2b       	or	r24, r25
    30d0:	8c 93       	st	X, r24
    30d2:	31 c0       	rjmp	.+98     	; 0x3136 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0x0F;
    30d4:	a7 e3       	ldi	r26, 0x37	; 55
    30d6:	b0 e0       	ldi	r27, 0x00	; 0
    30d8:	e7 e3       	ldi	r30, 0x37	; 55
    30da:	f0 e0       	ldi	r31, 0x00	; 0
    30dc:	80 81       	ld	r24, Z
    30de:	8f 70       	andi	r24, 0x0F	; 15
    30e0:	8c 93       	st	X, r24
      DDRB_REG |= value;
    30e2:	a7 e3       	ldi	r26, 0x37	; 55
    30e4:	b0 e0       	ldi	r27, 0x00	; 0
    30e6:	e7 e3       	ldi	r30, 0x37	; 55
    30e8:	f0 e0       	ldi	r31, 0x00	; 0
    30ea:	90 81       	ld	r25, Z
    30ec:	8b 81       	ldd	r24, Y+3	; 0x03
    30ee:	89 2b       	or	r24, r25
    30f0:	8c 93       	st	X, r24
    30f2:	21 c0       	rjmp	.+66     	; 0x3136 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0x0F;
    30f4:	a4 e3       	ldi	r26, 0x34	; 52
    30f6:	b0 e0       	ldi	r27, 0x00	; 0
    30f8:	e4 e3       	ldi	r30, 0x34	; 52
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	80 81       	ld	r24, Z
    30fe:	8f 70       	andi	r24, 0x0F	; 15
    3100:	8c 93       	st	X, r24
      DDRC_REG |= value;
    3102:	a4 e3       	ldi	r26, 0x34	; 52
    3104:	b0 e0       	ldi	r27, 0x00	; 0
    3106:	e4 e3       	ldi	r30, 0x34	; 52
    3108:	f0 e0       	ldi	r31, 0x00	; 0
    310a:	90 81       	ld	r25, Z
    310c:	8b 81       	ldd	r24, Y+3	; 0x03
    310e:	89 2b       	or	r24, r25
    3110:	8c 93       	st	X, r24
    3112:	11 c0       	rjmp	.+34     	; 0x3136 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0x0F;
    3114:	a1 e3       	ldi	r26, 0x31	; 49
    3116:	b0 e0       	ldi	r27, 0x00	; 0
    3118:	e1 e3       	ldi	r30, 0x31	; 49
    311a:	f0 e0       	ldi	r31, 0x00	; 0
    311c:	80 81       	ld	r24, Z
    311e:	8f 70       	andi	r24, 0x0F	; 15
    3120:	8c 93       	st	X, r24
      DDRD_REG |= value;
    3122:	a1 e3       	ldi	r26, 0x31	; 49
    3124:	b0 e0       	ldi	r27, 0x00	; 0
    3126:	e1 e3       	ldi	r30, 0x31	; 49
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	90 81       	ld	r25, Z
    312c:	8b 81       	ldd	r24, Y+3	; 0x03
    312e:	89 2b       	or	r24, r25
    3130:	8c 93       	st	X, r24
    3132:	01 c0       	rjmp	.+2      	; 0x3136 <DIO_vSetHighNibbleDir+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    3134:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    3136:	89 81       	ldd	r24, Y+1	; 0x01
}
    3138:	0f 90       	pop	r0
    313a:	0f 90       	pop	r0
    313c:	0f 90       	pop	r0
    313e:	0f 90       	pop	r0
    3140:	0f 90       	pop	r0
    3142:	cf 91       	pop	r28
    3144:	df 91       	pop	r29
    3146:	08 95       	ret

00003148 <SPI_vInit>:
static u8 SPI_u8State = IDLE;

/*___________________________________________________________________________________________________________________*/

void SPI_vInit(void)
{
    3148:	df 93       	push	r29
    314a:	cf 93       	push	r28
    314c:	cd b7       	in	r28, 0x3d	; 61
    314e:	de b7       	in	r29, 0x3e	; 62
	/*Data Order*/
#if SPI_DATA_ORDER == SPI_DATA_LSB_FIRST
	SET_BIT(SPCR, SPCR_DORD);
#elif SPI_DATA_ORDER == SPI_DATA_MSP_FIRST
	CLR_BIT(SPCR, SPCR_DORD);
    3150:	ad e2       	ldi	r26, 0x2D	; 45
    3152:	b0 e0       	ldi	r27, 0x00	; 0
    3154:	ed e2       	ldi	r30, 0x2D	; 45
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	80 81       	ld	r24, Z
    315a:	8f 7d       	andi	r24, 0xDF	; 223
    315c:	8c 93       	st	X, r24
#if SPI_MASTER_SLAVE_SELECT == SPI_MASTER
	SET_BIT(SPCR, SPCR_MSTR);
	DIO_enumSetPinDir(DIO_PORTB, DIO_PIN5, DIO_PIN_OUTPUT);
	DIO_enumSetPinDir(DIO_PORTB, DIO_PIN7, DIO_PIN_OUTPUT);
#elif SPI_MASTER_SLAVE_SELECT == SPI_SLAVE
	CLR_BIT(SPCR, SPCR_MSTR);
    315e:	ad e2       	ldi	r26, 0x2D	; 45
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	ed e2       	ldi	r30, 0x2D	; 45
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
    3168:	8f 7e       	andi	r24, 0xEF	; 239
    316a:	8c 93       	st	X, r24
	DIO_enumSetPinDir(DIO_PORTB, DIO_PIN6, DIO_PIN_OUTPUT);
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	66 e0       	ldi	r22, 0x06	; 6
    3170:	41 e0       	ldi	r20, 0x01	; 1
    3172:	0e 94 a0 10 	call	0x2140	; 0x2140 <DIO_enumSetPinDir>
#error "wrong SPI_MASTER_SLAVE_SELECT config"
#endif

	/*Clock Polarity*/
#if SPI_CLOCK_POLARITY == SPI_RISING_LEADING_FALLING_TRAILING
	CLR_BIT(SPCR, SPCR_CPOL);
    3176:	ad e2       	ldi	r26, 0x2D	; 45
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	ed e2       	ldi	r30, 0x2D	; 45
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	80 81       	ld	r24, Z
    3180:	87 7f       	andi	r24, 0xF7	; 247
    3182:	8c 93       	st	X, r24
#error "wrong SPI_CLOCK_POLARITY config"
#endif

	/*Clock Phase*/
#if SPI_CLOCK_PHASE == SPI_SAMPLE_LEADING_SETUP_TRAILING
	CLR_BIT(SPCR, SPCR_CPHA);
    3184:	ad e2       	ldi	r26, 0x2D	; 45
    3186:	b0 e0       	ldi	r27, 0x00	; 0
    3188:	ed e2       	ldi	r30, 0x2D	; 45
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	80 81       	ld	r24, Z
    318e:	8b 7f       	andi	r24, 0xFB	; 251
    3190:	8c 93       	st	X, r24
#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_8
	SET_BIT(SPCR, SPCR_SPR0);
	CLR_BIT(SPCR, SPCR_SPR1);
	SET_BIT(SPSR, SPSR_SPI2X);
#elif SPI_CLOCK_RATE == SPI_FREQ_DIVIDED_BY_16
	SET_BIT(SPCR, SPCR_SPR0);
    3192:	ad e2       	ldi	r26, 0x2D	; 45
    3194:	b0 e0       	ldi	r27, 0x00	; 0
    3196:	ed e2       	ldi	r30, 0x2D	; 45
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	80 81       	ld	r24, Z
    319c:	81 60       	ori	r24, 0x01	; 1
    319e:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPCR_SPR1);
    31a0:	ad e2       	ldi	r26, 0x2D	; 45
    31a2:	b0 e0       	ldi	r27, 0x00	; 0
    31a4:	ed e2       	ldi	r30, 0x2D	; 45
    31a6:	f0 e0       	ldi	r31, 0x00	; 0
    31a8:	80 81       	ld	r24, Z
    31aa:	8d 7f       	andi	r24, 0xFD	; 253
    31ac:	8c 93       	st	X, r24
	CLR_BIT(SPSR, SPSR_SPI2X);
    31ae:	ae e2       	ldi	r26, 0x2E	; 46
    31b0:	b0 e0       	ldi	r27, 0x00	; 0
    31b2:	ee e2       	ldi	r30, 0x2E	; 46
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	80 81       	ld	r24, Z
    31b8:	8e 7f       	andi	r24, 0xFE	; 254
    31ba:	8c 93       	st	X, r24
#error "wrong SPI_CLOCK_RATE config"
#endif

	/*SPI Interrupt Enable*/
#if SPI_INTERRUPT_ENABLE_MODE == SPI_INTERRUPT_DISABLE
	CLR_BIT(SPCR, SPCR_SPIE);
    31bc:	ad e2       	ldi	r26, 0x2D	; 45
    31be:	b0 e0       	ldi	r27, 0x00	; 0
    31c0:	ed e2       	ldi	r30, 0x2D	; 45
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	80 81       	ld	r24, Z
    31c6:	8f 77       	andi	r24, 0x7F	; 127
    31c8:	8c 93       	st	X, r24
#error "wrong SPI_INTERRUPT_ENABLE_MODE config"
#endif

	/*SPI Enable*/
#if SPI_ENABLE_MODE == SPI_ENABLE
	SET_BIT(SPCR, SPCR_SPE);
    31ca:	ad e2       	ldi	r26, 0x2D	; 45
    31cc:	b0 e0       	ldi	r27, 0x00	; 0
    31ce:	ed e2       	ldi	r30, 0x2D	; 45
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	80 81       	ld	r24, Z
    31d4:	80 64       	ori	r24, 0x40	; 64
    31d6:	8c 93       	st	X, r24
#elif SPI_ENABLE_MODE == SPI_DISABLE
	CLR_BIT(SPCR, SPCR_SPE);
#else
#error "wrong SPI_ENABLE_MODE config"
#endif
}
    31d8:	cf 91       	pop	r28
    31da:	df 91       	pop	r29
    31dc:	08 95       	ret

000031de <SPI_u8InitConfig>:
			6-SPI_FREQ_DIVIDED_BY_64
			7-SPI_FREQ_DIVIDED_BY_128
 */

u8 SPI_u8InitConfig(SPI_CONFIG *spi)
{
    31de:	df 93       	push	r29
    31e0:	cf 93       	push	r28
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
    31e6:	61 97       	sbiw	r28, 0x11	; 17
    31e8:	0f b6       	in	r0, 0x3f	; 63
    31ea:	f8 94       	cli
    31ec:	de bf       	out	0x3e, r29	; 62
    31ee:	0f be       	out	0x3f, r0	; 63
    31f0:	cd bf       	out	0x3d, r28	; 61
    31f2:	9b 83       	std	Y+3, r25	; 0x03
    31f4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    31f6:	19 82       	std	Y+1, r1	; 0x01

	if (
    31f8:	8a 81       	ldd	r24, Y+2	; 0x02
    31fa:	9b 81       	ldd	r25, Y+3	; 0x03
    31fc:	00 97       	sbiw	r24, 0x00	; 0
    31fe:	09 f4       	brne	.+2      	; 0x3202 <SPI_u8InitConfig+0x24>
    3200:	cd c1       	rjmp	.+922    	; 0x359c <SPI_u8InitConfig+0x3be>
    3202:	ea 81       	ldd	r30, Y+2	; 0x02
    3204:	fb 81       	ldd	r31, Y+3	; 0x03
    3206:	85 81       	ldd	r24, Z+5	; 0x05
    3208:	88 23       	and	r24, r24
    320a:	09 f4       	brne	.+2      	; 0x320e <SPI_u8InitConfig+0x30>
    320c:	c7 c1       	rjmp	.+910    	; 0x359c <SPI_u8InitConfig+0x3be>
    320e:	ea 81       	ldd	r30, Y+2	; 0x02
    3210:	fb 81       	ldd	r31, Y+3	; 0x03
    3212:	84 81       	ldd	r24, Z+4	; 0x04
    3214:	88 23       	and	r24, r24
    3216:	09 f4       	brne	.+2      	; 0x321a <SPI_u8InitConfig+0x3c>
    3218:	c1 c1       	rjmp	.+898    	; 0x359c <SPI_u8InitConfig+0x3be>
    321a:	ea 81       	ldd	r30, Y+2	; 0x02
    321c:	fb 81       	ldd	r31, Y+3	; 0x03
    321e:	86 81       	ldd	r24, Z+6	; 0x06
    3220:	88 23       	and	r24, r24
    3222:	09 f4       	brne	.+2      	; 0x3226 <SPI_u8InitConfig+0x48>
    3224:	bb c1       	rjmp	.+886    	; 0x359c <SPI_u8InitConfig+0x3be>
    3226:	ea 81       	ldd	r30, Y+2	; 0x02
    3228:	fb 81       	ldd	r31, Y+3	; 0x03
    322a:	82 81       	ldd	r24, Z+2	; 0x02
    322c:	88 23       	and	r24, r24
    322e:	09 f4       	brne	.+2      	; 0x3232 <SPI_u8InitConfig+0x54>
    3230:	b5 c1       	rjmp	.+874    	; 0x359c <SPI_u8InitConfig+0x3be>
    3232:	ea 81       	ldd	r30, Y+2	; 0x02
    3234:	fb 81       	ldd	r31, Y+3	; 0x03
    3236:	80 81       	ld	r24, Z
    3238:	88 23       	and	r24, r24
    323a:	09 f4       	brne	.+2      	; 0x323e <SPI_u8InitConfig+0x60>
    323c:	af c1       	rjmp	.+862    	; 0x359c <SPI_u8InitConfig+0x3be>
    323e:	ea 81       	ldd	r30, Y+2	; 0x02
    3240:	fb 81       	ldd	r31, Y+3	; 0x03
    3242:	83 81       	ldd	r24, Z+3	; 0x03
    3244:	88 23       	and	r24, r24
    3246:	09 f4       	brne	.+2      	; 0x324a <SPI_u8InitConfig+0x6c>
    3248:	a9 c1       	rjmp	.+850    	; 0x359c <SPI_u8InitConfig+0x3be>
    324a:	ea 81       	ldd	r30, Y+2	; 0x02
    324c:	fb 81       	ldd	r31, Y+3	; 0x03
    324e:	81 81       	ldd	r24, Z+1	; 0x01
    3250:	88 23       	and	r24, r24
    3252:	09 f4       	brne	.+2      	; 0x3256 <SPI_u8InitConfig+0x78>
    3254:	a3 c1       	rjmp	.+838    	; 0x359c <SPI_u8InitConfig+0x3be>
			(spi->SPI_u8DataOrder != NULL)         &&
			(spi->SPI_u8InterruptEnable != NULL)   &&
			(spi->SPI_u8MasterSlaveSelect != NULL) &&
			(spi->SPI_u8SPIEnable != NULL))
	{
		switch (spi->SPI_u8ClockPhase)
    3256:	ea 81       	ldd	r30, Y+2	; 0x02
    3258:	fb 81       	ldd	r31, Y+3	; 0x03
    325a:	85 81       	ldd	r24, Z+5	; 0x05
    325c:	28 2f       	mov	r18, r24
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	39 8b       	std	Y+17, r19	; 0x11
    3262:	28 8b       	std	Y+16, r18	; 0x10
    3264:	88 89       	ldd	r24, Y+16	; 0x10
    3266:	99 89       	ldd	r25, Y+17	; 0x11
    3268:	00 97       	sbiw	r24, 0x00	; 0
    326a:	31 f0       	breq	.+12     	; 0x3278 <SPI_u8InitConfig+0x9a>
    326c:	28 89       	ldd	r18, Y+16	; 0x10
    326e:	39 89       	ldd	r19, Y+17	; 0x11
    3270:	21 30       	cpi	r18, 0x01	; 1
    3272:	31 05       	cpc	r19, r1
    3274:	49 f0       	breq	.+18     	; 0x3288 <SPI_u8InitConfig+0xaa>
    3276:	10 c0       	rjmp	.+32     	; 0x3298 <SPI_u8InitConfig+0xba>
		{
		case SPI_SAMPLE_LEADING_SETUP_TRAILING:
			CLR_BIT(SPCR, SPCR_CPHA);
    3278:	ad e2       	ldi	r26, 0x2D	; 45
    327a:	b0 e0       	ldi	r27, 0x00	; 0
    327c:	ed e2       	ldi	r30, 0x2D	; 45
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	80 81       	ld	r24, Z
    3282:	8b 7f       	andi	r24, 0xFB	; 251
    3284:	8c 93       	st	X, r24
    3286:	0a c0       	rjmp	.+20     	; 0x329c <SPI_u8InitConfig+0xbe>
			break;
		case SPI_SETUP_LEADING_SAMPLE_TRAILING:
			SET_BIT(SPCR, SPCR_CPHA);
    3288:	ad e2       	ldi	r26, 0x2D	; 45
    328a:	b0 e0       	ldi	r27, 0x00	; 0
    328c:	ed e2       	ldi	r30, 0x2D	; 45
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	80 81       	ld	r24, Z
    3292:	84 60       	ori	r24, 0x04	; 4
    3294:	8c 93       	st	X, r24
    3296:	02 c0       	rjmp	.+4      	; 0x329c <SPI_u8InitConfig+0xbe>
			break;
		default:
			Local_u8ErrorState = NOK;
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		switch (spi->SPI_u8ClockPolarity)
    329c:	ea 81       	ldd	r30, Y+2	; 0x02
    329e:	fb 81       	ldd	r31, Y+3	; 0x03
    32a0:	84 81       	ldd	r24, Z+4	; 0x04
    32a2:	28 2f       	mov	r18, r24
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	3f 87       	std	Y+15, r19	; 0x0f
    32a8:	2e 87       	std	Y+14, r18	; 0x0e
    32aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    32ac:	9f 85       	ldd	r25, Y+15	; 0x0f
    32ae:	00 97       	sbiw	r24, 0x00	; 0
    32b0:	31 f0       	breq	.+12     	; 0x32be <SPI_u8InitConfig+0xe0>
    32b2:	2e 85       	ldd	r18, Y+14	; 0x0e
    32b4:	3f 85       	ldd	r19, Y+15	; 0x0f
    32b6:	21 30       	cpi	r18, 0x01	; 1
    32b8:	31 05       	cpc	r19, r1
    32ba:	49 f0       	breq	.+18     	; 0x32ce <SPI_u8InitConfig+0xf0>
    32bc:	10 c0       	rjmp	.+32     	; 0x32de <SPI_u8InitConfig+0x100>
		{
		case SPI_RISING_LEADING_FALLING_TRAILING:
			CLR_BIT(SPCR, SPCR_CPOL);
    32be:	ad e2       	ldi	r26, 0x2D	; 45
    32c0:	b0 e0       	ldi	r27, 0x00	; 0
    32c2:	ed e2       	ldi	r30, 0x2D	; 45
    32c4:	f0 e0       	ldi	r31, 0x00	; 0
    32c6:	80 81       	ld	r24, Z
    32c8:	87 7f       	andi	r24, 0xF7	; 247
    32ca:	8c 93       	st	X, r24
    32cc:	0a c0       	rjmp	.+20     	; 0x32e2 <SPI_u8InitConfig+0x104>
			break;
		case SPI_FALLING_LEADING_RISING_TRAILING:
			SET_BIT(SPCR, SPCR_CPOL);
    32ce:	ad e2       	ldi	r26, 0x2D	; 45
    32d0:	b0 e0       	ldi	r27, 0x00	; 0
    32d2:	ed e2       	ldi	r30, 0x2D	; 45
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	80 81       	ld	r24, Z
    32d8:	88 60       	ori	r24, 0x08	; 8
    32da:	8c 93       	st	X, r24
    32dc:	02 c0       	rjmp	.+4      	; 0x32e2 <SPI_u8InitConfig+0x104>
			break;
		default:
			Local_u8ErrorState = NOK;
    32de:	81 e0       	ldi	r24, 0x01	; 1
    32e0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		switch (spi->SPI_u8ClockRate)
    32e2:	ea 81       	ldd	r30, Y+2	; 0x02
    32e4:	fb 81       	ldd	r31, Y+3	; 0x03
    32e6:	86 81       	ldd	r24, Z+6	; 0x06
    32e8:	28 2f       	mov	r18, r24
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	3d 87       	std	Y+13, r19	; 0x0d
    32ee:	2c 87       	std	Y+12, r18	; 0x0c
    32f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    32f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    32f4:	83 30       	cpi	r24, 0x03	; 3
    32f6:	91 05       	cpc	r25, r1
    32f8:	09 f4       	brne	.+2      	; 0x32fc <SPI_u8InitConfig+0x11e>
    32fa:	6a c0       	rjmp	.+212    	; 0x33d0 <SPI_u8InitConfig+0x1f2>
    32fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    32fe:	3d 85       	ldd	r19, Y+13	; 0x0d
    3300:	24 30       	cpi	r18, 0x04	; 4
    3302:	31 05       	cpc	r19, r1
    3304:	84 f4       	brge	.+32     	; 0x3326 <SPI_u8InitConfig+0x148>
    3306:	8c 85       	ldd	r24, Y+12	; 0x0c
    3308:	9d 85       	ldd	r25, Y+13	; 0x0d
    330a:	81 30       	cpi	r24, 0x01	; 1
    330c:	91 05       	cpc	r25, r1
    330e:	a1 f1       	breq	.+104    	; 0x3378 <SPI_u8InitConfig+0x19a>
    3310:	2c 85       	ldd	r18, Y+12	; 0x0c
    3312:	3d 85       	ldd	r19, Y+13	; 0x0d
    3314:	22 30       	cpi	r18, 0x02	; 2
    3316:	31 05       	cpc	r19, r1
    3318:	0c f0       	brlt	.+2      	; 0x331c <SPI_u8InitConfig+0x13e>
    331a:	44 c0       	rjmp	.+136    	; 0x33a4 <SPI_u8InitConfig+0x1c6>
    331c:	8c 85       	ldd	r24, Y+12	; 0x0c
    331e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3320:	00 97       	sbiw	r24, 0x00	; 0
    3322:	a1 f0       	breq	.+40     	; 0x334c <SPI_u8InitConfig+0x16e>
    3324:	ad c0       	rjmp	.+346    	; 0x3480 <SPI_u8InitConfig+0x2a2>
    3326:	2c 85       	ldd	r18, Y+12	; 0x0c
    3328:	3d 85       	ldd	r19, Y+13	; 0x0d
    332a:	25 30       	cpi	r18, 0x05	; 5
    332c:	31 05       	cpc	r19, r1
    332e:	09 f4       	brne	.+2      	; 0x3332 <SPI_u8InitConfig+0x154>
    3330:	7b c0       	rjmp	.+246    	; 0x3428 <SPI_u8InitConfig+0x24a>
    3332:	8c 85       	ldd	r24, Y+12	; 0x0c
    3334:	9d 85       	ldd	r25, Y+13	; 0x0d
    3336:	85 30       	cpi	r24, 0x05	; 5
    3338:	91 05       	cpc	r25, r1
    333a:	0c f4       	brge	.+2      	; 0x333e <SPI_u8InitConfig+0x160>
    333c:	5f c0       	rjmp	.+190    	; 0x33fc <SPI_u8InitConfig+0x21e>
    333e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3340:	3d 85       	ldd	r19, Y+13	; 0x0d
    3342:	26 30       	cpi	r18, 0x06	; 6
    3344:	31 05       	cpc	r19, r1
    3346:	09 f4       	brne	.+2      	; 0x334a <SPI_u8InitConfig+0x16c>
    3348:	85 c0       	rjmp	.+266    	; 0x3454 <SPI_u8InitConfig+0x276>
    334a:	9a c0       	rjmp	.+308    	; 0x3480 <SPI_u8InitConfig+0x2a2>
		{
		case SPI_FREQ_DIVIDED_BY_2:
			CLR_BIT(SPCR, SPCR_SPR0);
    334c:	ad e2       	ldi	r26, 0x2D	; 45
    334e:	b0 e0       	ldi	r27, 0x00	; 0
    3350:	ed e2       	ldi	r30, 0x2D	; 45
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	80 81       	ld	r24, Z
    3356:	8e 7f       	andi	r24, 0xFE	; 254
    3358:	8c 93       	st	X, r24
			CLR_BIT(SPCR, SPCR_SPR1);
    335a:	ad e2       	ldi	r26, 0x2D	; 45
    335c:	b0 e0       	ldi	r27, 0x00	; 0
    335e:	ed e2       	ldi	r30, 0x2D	; 45
    3360:	f0 e0       	ldi	r31, 0x00	; 0
    3362:	80 81       	ld	r24, Z
    3364:	8d 7f       	andi	r24, 0xFD	; 253
    3366:	8c 93       	st	X, r24
			SET_BIT(SPSR, SPSR_SPI2X);
    3368:	ae e2       	ldi	r26, 0x2E	; 46
    336a:	b0 e0       	ldi	r27, 0x00	; 0
    336c:	ee e2       	ldi	r30, 0x2E	; 46
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	81 60       	ori	r24, 0x01	; 1
    3374:	8c 93       	st	X, r24
    3376:	86 c0       	rjmp	.+268    	; 0x3484 <SPI_u8InitConfig+0x2a6>
			break;
		case SPI_FREQ_DIVIDED_BY_4:
			CLR_BIT(SPCR, SPCR_SPR0);
    3378:	ad e2       	ldi	r26, 0x2D	; 45
    337a:	b0 e0       	ldi	r27, 0x00	; 0
    337c:	ed e2       	ldi	r30, 0x2D	; 45
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	80 81       	ld	r24, Z
    3382:	8e 7f       	andi	r24, 0xFE	; 254
    3384:	8c 93       	st	X, r24
			CLR_BIT(SPCR, SPCR_SPR1);
    3386:	ad e2       	ldi	r26, 0x2D	; 45
    3388:	b0 e0       	ldi	r27, 0x00	; 0
    338a:	ed e2       	ldi	r30, 0x2D	; 45
    338c:	f0 e0       	ldi	r31, 0x00	; 0
    338e:	80 81       	ld	r24, Z
    3390:	8d 7f       	andi	r24, 0xFD	; 253
    3392:	8c 93       	st	X, r24
			CLR_BIT(SPSR, SPSR_SPI2X);
    3394:	ae e2       	ldi	r26, 0x2E	; 46
    3396:	b0 e0       	ldi	r27, 0x00	; 0
    3398:	ee e2       	ldi	r30, 0x2E	; 46
    339a:	f0 e0       	ldi	r31, 0x00	; 0
    339c:	80 81       	ld	r24, Z
    339e:	8e 7f       	andi	r24, 0xFE	; 254
    33a0:	8c 93       	st	X, r24
    33a2:	70 c0       	rjmp	.+224    	; 0x3484 <SPI_u8InitConfig+0x2a6>
			break;
		case SPI_FREQ_DIVIDED_BY_8:
			SET_BIT(SPCR, SPCR_SPR0);
    33a4:	ad e2       	ldi	r26, 0x2D	; 45
    33a6:	b0 e0       	ldi	r27, 0x00	; 0
    33a8:	ed e2       	ldi	r30, 0x2D	; 45
    33aa:	f0 e0       	ldi	r31, 0x00	; 0
    33ac:	80 81       	ld	r24, Z
    33ae:	81 60       	ori	r24, 0x01	; 1
    33b0:	8c 93       	st	X, r24
			CLR_BIT(SPCR, SPCR_SPR1);
    33b2:	ad e2       	ldi	r26, 0x2D	; 45
    33b4:	b0 e0       	ldi	r27, 0x00	; 0
    33b6:	ed e2       	ldi	r30, 0x2D	; 45
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	80 81       	ld	r24, Z
    33bc:	8d 7f       	andi	r24, 0xFD	; 253
    33be:	8c 93       	st	X, r24
			SET_BIT(SPSR, SPSR_SPI2X);
    33c0:	ae e2       	ldi	r26, 0x2E	; 46
    33c2:	b0 e0       	ldi	r27, 0x00	; 0
    33c4:	ee e2       	ldi	r30, 0x2E	; 46
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	80 81       	ld	r24, Z
    33ca:	81 60       	ori	r24, 0x01	; 1
    33cc:	8c 93       	st	X, r24
    33ce:	5a c0       	rjmp	.+180    	; 0x3484 <SPI_u8InitConfig+0x2a6>
			break;
		case SPI_FREQ_DIVIDED_BY_16:
			SET_BIT(SPCR, SPCR_SPR0);
    33d0:	ad e2       	ldi	r26, 0x2D	; 45
    33d2:	b0 e0       	ldi	r27, 0x00	; 0
    33d4:	ed e2       	ldi	r30, 0x2D	; 45
    33d6:	f0 e0       	ldi	r31, 0x00	; 0
    33d8:	80 81       	ld	r24, Z
    33da:	81 60       	ori	r24, 0x01	; 1
    33dc:	8c 93       	st	X, r24
			CLR_BIT(SPCR, SPCR_SPR1);
    33de:	ad e2       	ldi	r26, 0x2D	; 45
    33e0:	b0 e0       	ldi	r27, 0x00	; 0
    33e2:	ed e2       	ldi	r30, 0x2D	; 45
    33e4:	f0 e0       	ldi	r31, 0x00	; 0
    33e6:	80 81       	ld	r24, Z
    33e8:	8d 7f       	andi	r24, 0xFD	; 253
    33ea:	8c 93       	st	X, r24
			CLR_BIT(SPSR, SPSR_SPI2X);
    33ec:	ae e2       	ldi	r26, 0x2E	; 46
    33ee:	b0 e0       	ldi	r27, 0x00	; 0
    33f0:	ee e2       	ldi	r30, 0x2E	; 46
    33f2:	f0 e0       	ldi	r31, 0x00	; 0
    33f4:	80 81       	ld	r24, Z
    33f6:	8e 7f       	andi	r24, 0xFE	; 254
    33f8:	8c 93       	st	X, r24
    33fa:	44 c0       	rjmp	.+136    	; 0x3484 <SPI_u8InitConfig+0x2a6>
			break;
		case SPI_FREQ_DIVIDED_BY_32:
			CLR_BIT(SPCR, SPCR_SPR0);
    33fc:	ad e2       	ldi	r26, 0x2D	; 45
    33fe:	b0 e0       	ldi	r27, 0x00	; 0
    3400:	ed e2       	ldi	r30, 0x2D	; 45
    3402:	f0 e0       	ldi	r31, 0x00	; 0
    3404:	80 81       	ld	r24, Z
    3406:	8e 7f       	andi	r24, 0xFE	; 254
    3408:	8c 93       	st	X, r24
			SET_BIT(SPCR, SPCR_SPR1);
    340a:	ad e2       	ldi	r26, 0x2D	; 45
    340c:	b0 e0       	ldi	r27, 0x00	; 0
    340e:	ed e2       	ldi	r30, 0x2D	; 45
    3410:	f0 e0       	ldi	r31, 0x00	; 0
    3412:	80 81       	ld	r24, Z
    3414:	82 60       	ori	r24, 0x02	; 2
    3416:	8c 93       	st	X, r24
			SET_BIT(SPSR, SPSR_SPI2X);
    3418:	ae e2       	ldi	r26, 0x2E	; 46
    341a:	b0 e0       	ldi	r27, 0x00	; 0
    341c:	ee e2       	ldi	r30, 0x2E	; 46
    341e:	f0 e0       	ldi	r31, 0x00	; 0
    3420:	80 81       	ld	r24, Z
    3422:	81 60       	ori	r24, 0x01	; 1
    3424:	8c 93       	st	X, r24
    3426:	2e c0       	rjmp	.+92     	; 0x3484 <SPI_u8InitConfig+0x2a6>
			break;
		case SPI_FREQ_DIVIDED_BY_64:
			CLR_BIT(SPCR, SPCR_SPR0);
    3428:	ad e2       	ldi	r26, 0x2D	; 45
    342a:	b0 e0       	ldi	r27, 0x00	; 0
    342c:	ed e2       	ldi	r30, 0x2D	; 45
    342e:	f0 e0       	ldi	r31, 0x00	; 0
    3430:	80 81       	ld	r24, Z
    3432:	8e 7f       	andi	r24, 0xFE	; 254
    3434:	8c 93       	st	X, r24
			SET_BIT(SPCR, SPCR_SPR1);
    3436:	ad e2       	ldi	r26, 0x2D	; 45
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	ed e2       	ldi	r30, 0x2D	; 45
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	80 81       	ld	r24, Z
    3440:	82 60       	ori	r24, 0x02	; 2
    3442:	8c 93       	st	X, r24
			CLR_BIT(SPSR, SPSR_SPI2X);
    3444:	ae e2       	ldi	r26, 0x2E	; 46
    3446:	b0 e0       	ldi	r27, 0x00	; 0
    3448:	ee e2       	ldi	r30, 0x2E	; 46
    344a:	f0 e0       	ldi	r31, 0x00	; 0
    344c:	80 81       	ld	r24, Z
    344e:	8e 7f       	andi	r24, 0xFE	; 254
    3450:	8c 93       	st	X, r24
    3452:	18 c0       	rjmp	.+48     	; 0x3484 <SPI_u8InitConfig+0x2a6>
			break;
		case SPI_FREQ_DIVIDED_BY_128:
			SET_BIT(SPCR, SPCR_SPR0);
    3454:	ad e2       	ldi	r26, 0x2D	; 45
    3456:	b0 e0       	ldi	r27, 0x00	; 0
    3458:	ed e2       	ldi	r30, 0x2D	; 45
    345a:	f0 e0       	ldi	r31, 0x00	; 0
    345c:	80 81       	ld	r24, Z
    345e:	81 60       	ori	r24, 0x01	; 1
    3460:	8c 93       	st	X, r24
			SET_BIT(SPCR, SPCR_SPR1);
    3462:	ad e2       	ldi	r26, 0x2D	; 45
    3464:	b0 e0       	ldi	r27, 0x00	; 0
    3466:	ed e2       	ldi	r30, 0x2D	; 45
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	80 81       	ld	r24, Z
    346c:	82 60       	ori	r24, 0x02	; 2
    346e:	8c 93       	st	X, r24
			CLR_BIT(SPSR, SPSR_SPI2X);
    3470:	ae e2       	ldi	r26, 0x2E	; 46
    3472:	b0 e0       	ldi	r27, 0x00	; 0
    3474:	ee e2       	ldi	r30, 0x2E	; 46
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	80 81       	ld	r24, Z
    347a:	8e 7f       	andi	r24, 0xFE	; 254
    347c:	8c 93       	st	X, r24
    347e:	02 c0       	rjmp	.+4      	; 0x3484 <SPI_u8InitConfig+0x2a6>
			break;
		default:
			Local_u8ErrorState = NOK;
    3480:	81 e0       	ldi	r24, 0x01	; 1
    3482:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		switch (spi->SPI_u8DataOrder)
    3484:	ea 81       	ldd	r30, Y+2	; 0x02
    3486:	fb 81       	ldd	r31, Y+3	; 0x03
    3488:	82 81       	ldd	r24, Z+2	; 0x02
    348a:	28 2f       	mov	r18, r24
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	3b 87       	std	Y+11, r19	; 0x0b
    3490:	2a 87       	std	Y+10, r18	; 0x0a
    3492:	8a 85       	ldd	r24, Y+10	; 0x0a
    3494:	9b 85       	ldd	r25, Y+11	; 0x0b
    3496:	00 97       	sbiw	r24, 0x00	; 0
    3498:	69 f0       	breq	.+26     	; 0x34b4 <SPI_u8InitConfig+0x2d6>
    349a:	2a 85       	ldd	r18, Y+10	; 0x0a
    349c:	3b 85       	ldd	r19, Y+11	; 0x0b
    349e:	21 30       	cpi	r18, 0x01	; 1
    34a0:	31 05       	cpc	r19, r1
    34a2:	81 f4       	brne	.+32     	; 0x34c4 <SPI_u8InitConfig+0x2e6>
		{
		case SPI_DATA_MSP_FIRST:
			CLR_BIT(SPCR, SPCR_DORD);
    34a4:	ad e2       	ldi	r26, 0x2D	; 45
    34a6:	b0 e0       	ldi	r27, 0x00	; 0
    34a8:	ed e2       	ldi	r30, 0x2D	; 45
    34aa:	f0 e0       	ldi	r31, 0x00	; 0
    34ac:	80 81       	ld	r24, Z
    34ae:	8f 7d       	andi	r24, 0xDF	; 223
    34b0:	8c 93       	st	X, r24
    34b2:	0a c0       	rjmp	.+20     	; 0x34c8 <SPI_u8InitConfig+0x2ea>
			break;
		case SPI_DATA_LSB_FIRST:
			SET_BIT(SPCR, SPCR_DORD);
    34b4:	ad e2       	ldi	r26, 0x2D	; 45
    34b6:	b0 e0       	ldi	r27, 0x00	; 0
    34b8:	ed e2       	ldi	r30, 0x2D	; 45
    34ba:	f0 e0       	ldi	r31, 0x00	; 0
    34bc:	80 81       	ld	r24, Z
    34be:	80 62       	ori	r24, 0x20	; 32
    34c0:	8c 93       	st	X, r24
    34c2:	02 c0       	rjmp	.+4      	; 0x34c8 <SPI_u8InitConfig+0x2ea>
			break;
		default:
			Local_u8ErrorState = NOK;
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		switch (spi->SPI_u8MasterSlaveSelect)
    34c8:	ea 81       	ldd	r30, Y+2	; 0x02
    34ca:	fb 81       	ldd	r31, Y+3	; 0x03
    34cc:	83 81       	ldd	r24, Z+3	; 0x03
    34ce:	28 2f       	mov	r18, r24
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	39 87       	std	Y+9, r19	; 0x09
    34d4:	28 87       	std	Y+8, r18	; 0x08
    34d6:	88 85       	ldd	r24, Y+8	; 0x08
    34d8:	99 85       	ldd	r25, Y+9	; 0x09
    34da:	00 97       	sbiw	r24, 0x00	; 0
    34dc:	31 f0       	breq	.+12     	; 0x34ea <SPI_u8InitConfig+0x30c>
    34de:	28 85       	ldd	r18, Y+8	; 0x08
    34e0:	39 85       	ldd	r19, Y+9	; 0x09
    34e2:	21 30       	cpi	r18, 0x01	; 1
    34e4:	31 05       	cpc	r19, r1
    34e6:	49 f0       	breq	.+18     	; 0x34fa <SPI_u8InitConfig+0x31c>
    34e8:	10 c0       	rjmp	.+32     	; 0x350a <SPI_u8InitConfig+0x32c>
		{
		case SPI_MASTER:
			SET_BIT(SPCR, SPCR_MSTR);
    34ea:	ad e2       	ldi	r26, 0x2D	; 45
    34ec:	b0 e0       	ldi	r27, 0x00	; 0
    34ee:	ed e2       	ldi	r30, 0x2D	; 45
    34f0:	f0 e0       	ldi	r31, 0x00	; 0
    34f2:	80 81       	ld	r24, Z
    34f4:	80 61       	ori	r24, 0x10	; 16
    34f6:	8c 93       	st	X, r24
    34f8:	0a c0       	rjmp	.+20     	; 0x350e <SPI_u8InitConfig+0x330>
			break;
		case SPI_SLAVE:
			CLR_BIT(SPCR, SPCR_MSTR);
    34fa:	ad e2       	ldi	r26, 0x2D	; 45
    34fc:	b0 e0       	ldi	r27, 0x00	; 0
    34fe:	ed e2       	ldi	r30, 0x2D	; 45
    3500:	f0 e0       	ldi	r31, 0x00	; 0
    3502:	80 81       	ld	r24, Z
    3504:	8f 7e       	andi	r24, 0xEF	; 239
    3506:	8c 93       	st	X, r24
    3508:	02 c0       	rjmp	.+4      	; 0x350e <SPI_u8InitConfig+0x330>
			break;
		default:
			Local_u8ErrorState = NOK;
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		switch (spi->SPI_u8InterruptEnable)
    350e:	ea 81       	ldd	r30, Y+2	; 0x02
    3510:	fb 81       	ldd	r31, Y+3	; 0x03
    3512:	80 81       	ld	r24, Z
    3514:	28 2f       	mov	r18, r24
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	3f 83       	std	Y+7, r19	; 0x07
    351a:	2e 83       	std	Y+6, r18	; 0x06
    351c:	8e 81       	ldd	r24, Y+6	; 0x06
    351e:	9f 81       	ldd	r25, Y+7	; 0x07
    3520:	00 97       	sbiw	r24, 0x00	; 0
    3522:	31 f0       	breq	.+12     	; 0x3530 <SPI_u8InitConfig+0x352>
    3524:	2e 81       	ldd	r18, Y+6	; 0x06
    3526:	3f 81       	ldd	r19, Y+7	; 0x07
    3528:	21 30       	cpi	r18, 0x01	; 1
    352a:	31 05       	cpc	r19, r1
    352c:	49 f0       	breq	.+18     	; 0x3540 <SPI_u8InitConfig+0x362>
    352e:	10 c0       	rjmp	.+32     	; 0x3550 <SPI_u8InitConfig+0x372>
		{
		case SPI_INTERRUPT_DISABLE:
			CLR_BIT(SPCR, SPCR_SPIE);
    3530:	ad e2       	ldi	r26, 0x2D	; 45
    3532:	b0 e0       	ldi	r27, 0x00	; 0
    3534:	ed e2       	ldi	r30, 0x2D	; 45
    3536:	f0 e0       	ldi	r31, 0x00	; 0
    3538:	80 81       	ld	r24, Z
    353a:	8f 77       	andi	r24, 0x7F	; 127
    353c:	8c 93       	st	X, r24
    353e:	0a c0       	rjmp	.+20     	; 0x3554 <SPI_u8InitConfig+0x376>
			break;
		case SPI_INTERRUPT_ENABLE:
			SET_BIT(SPCR, SPCR_SPIE);
    3540:	ad e2       	ldi	r26, 0x2D	; 45
    3542:	b0 e0       	ldi	r27, 0x00	; 0
    3544:	ed e2       	ldi	r30, 0x2D	; 45
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	80 81       	ld	r24, Z
    354a:	80 68       	ori	r24, 0x80	; 128
    354c:	8c 93       	st	X, r24
    354e:	02 c0       	rjmp	.+4      	; 0x3554 <SPI_u8InitConfig+0x376>
			break;
		default:
			Local_u8ErrorState = NOK;
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		switch (spi->SPI_u8SPIEnable)
    3554:	ea 81       	ldd	r30, Y+2	; 0x02
    3556:	fb 81       	ldd	r31, Y+3	; 0x03
    3558:	81 81       	ldd	r24, Z+1	; 0x01
    355a:	28 2f       	mov	r18, r24
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	3d 83       	std	Y+5, r19	; 0x05
    3560:	2c 83       	std	Y+4, r18	; 0x04
    3562:	8c 81       	ldd	r24, Y+4	; 0x04
    3564:	9d 81       	ldd	r25, Y+5	; 0x05
    3566:	00 97       	sbiw	r24, 0x00	; 0
    3568:	31 f0       	breq	.+12     	; 0x3576 <SPI_u8InitConfig+0x398>
    356a:	2c 81       	ldd	r18, Y+4	; 0x04
    356c:	3d 81       	ldd	r19, Y+5	; 0x05
    356e:	21 30       	cpi	r18, 0x01	; 1
    3570:	31 05       	cpc	r19, r1
    3572:	49 f0       	breq	.+18     	; 0x3586 <SPI_u8InitConfig+0x3a8>
    3574:	10 c0       	rjmp	.+32     	; 0x3596 <SPI_u8InitConfig+0x3b8>
		{
		case SPI_DISABLE:
			CLR_BIT(SPCR, SPCR_SPE);
    3576:	ad e2       	ldi	r26, 0x2D	; 45
    3578:	b0 e0       	ldi	r27, 0x00	; 0
    357a:	ed e2       	ldi	r30, 0x2D	; 45
    357c:	f0 e0       	ldi	r31, 0x00	; 0
    357e:	80 81       	ld	r24, Z
    3580:	8f 7b       	andi	r24, 0xBF	; 191
    3582:	8c 93       	st	X, r24
    3584:	0d c0       	rjmp	.+26     	; 0x35a0 <SPI_u8InitConfig+0x3c2>
			break;
		case SPI_ENABLE:
			SET_BIT(SPCR, SPCR_SPE);
    3586:	ad e2       	ldi	r26, 0x2D	; 45
    3588:	b0 e0       	ldi	r27, 0x00	; 0
    358a:	ed e2       	ldi	r30, 0x2D	; 45
    358c:	f0 e0       	ldi	r31, 0x00	; 0
    358e:	80 81       	ld	r24, Z
    3590:	80 64       	ori	r24, 0x40	; 64
    3592:	8c 93       	st	X, r24
    3594:	05 c0       	rjmp	.+10     	; 0x35a0 <SPI_u8InitConfig+0x3c2>
			break;
		default:
			Local_u8ErrorState = NOK;
    3596:	81 e0       	ldi	r24, 0x01	; 1
    3598:	89 83       	std	Y+1, r24	; 0x01
    359a:	02 c0       	rjmp	.+4      	; 0x35a0 <SPI_u8InitConfig+0x3c2>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
    359c:	82 e0       	ldi	r24, 0x02	; 2
    359e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    35a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    35a2:	61 96       	adiw	r28, 0x11	; 17
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	f8 94       	cli
    35a8:	de bf       	out	0x3e, r29	; 62
    35aa:	0f be       	out	0x3f, r0	; 63
    35ac:	cd bf       	out	0x3d, r28	; 61
    35ae:	cf 91       	pop	r28
    35b0:	df 91       	pop	r29
    35b2:	08 95       	ret

000035b4 <SPI_u8Tranceive>:
 *		Copy_u8RData => pointer to carry received data
 *
 * return     : Error status with type u8
 */
u8 SPI_u8Tranceive(u8 Copy_u8TData, u8 *Copy_u8RData)
{
    35b4:	df 93       	push	r29
    35b6:	cf 93       	push	r28
    35b8:	cd b7       	in	r28, 0x3d	; 61
    35ba:	de b7       	in	r29, 0x3e	; 62
    35bc:	28 97       	sbiw	r28, 0x08	; 8
    35be:	0f b6       	in	r0, 0x3f	; 63
    35c0:	f8 94       	cli
    35c2:	de bf       	out	0x3e, r29	; 62
    35c4:	0f be       	out	0x3f, r0	; 63
    35c6:	cd bf       	out	0x3d, r28	; 61
    35c8:	8e 83       	std	Y+6, r24	; 0x06
    35ca:	78 87       	std	Y+8, r23	; 0x08
    35cc:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = OK;
    35ce:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32TimeoutCounter = 0;
    35d0:	19 82       	std	Y+1, r1	; 0x01
    35d2:	1a 82       	std	Y+2, r1	; 0x02
    35d4:	1b 82       	std	Y+3, r1	; 0x03
    35d6:	1c 82       	std	Y+4, r1	; 0x04

	if (SPI_u8State == IDLE)
    35d8:	80 91 6e 01 	lds	r24, 0x016E
    35dc:	88 23       	and	r24, r24
    35de:	09 f0       	breq	.+2      	; 0x35e2 <SPI_u8Tranceive+0x2e>
    35e0:	42 c0       	rjmp	.+132    	; 0x3666 <SPI_u8Tranceive+0xb2>
	{
		SPI_u8State = BUSY;
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	80 93 6e 01 	sts	0x016E, r24

		SPDR = Copy_u8TData;
    35e8:	ef e2       	ldi	r30, 0x2F	; 47
    35ea:	f0 e0       	ldi	r31, 0x00	; 0
    35ec:	8e 81       	ldd	r24, Y+6	; 0x06
    35ee:	80 83       	st	Z, r24
    35f0:	0b c0       	rjmp	.+22     	; 0x3608 <SPI_u8Tranceive+0x54>

		while (((READ_BIT(SPSR, SPSR_SPIF)) == 0) && (Local_u32TimeoutCounter < SPI_u32TIMEOUT))
		{
			Local_u32TimeoutCounter++;
    35f2:	89 81       	ldd	r24, Y+1	; 0x01
    35f4:	9a 81       	ldd	r25, Y+2	; 0x02
    35f6:	ab 81       	ldd	r26, Y+3	; 0x03
    35f8:	bc 81       	ldd	r27, Y+4	; 0x04
    35fa:	01 96       	adiw	r24, 0x01	; 1
    35fc:	a1 1d       	adc	r26, r1
    35fe:	b1 1d       	adc	r27, r1
    3600:	89 83       	std	Y+1, r24	; 0x01
    3602:	9a 83       	std	Y+2, r25	; 0x02
    3604:	ab 83       	std	Y+3, r26	; 0x03
    3606:	bc 83       	std	Y+4, r27	; 0x04
	{
		SPI_u8State = BUSY;

		SPDR = Copy_u8TData;

		while (((READ_BIT(SPSR, SPSR_SPIF)) == 0) && (Local_u32TimeoutCounter < SPI_u32TIMEOUT))
    3608:	ee e2       	ldi	r30, 0x2E	; 46
    360a:	f0 e0       	ldi	r31, 0x00	; 0
    360c:	80 81       	ld	r24, Z
    360e:	88 1f       	adc	r24, r24
    3610:	88 27       	eor	r24, r24
    3612:	88 1f       	adc	r24, r24
    3614:	88 2f       	mov	r24, r24
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	90 70       	andi	r25, 0x00	; 0
    361a:	00 97       	sbiw	r24, 0x00	; 0
    361c:	61 f4       	brne	.+24     	; 0x3636 <SPI_u8Tranceive+0x82>
    361e:	89 81       	ldd	r24, Y+1	; 0x01
    3620:	9a 81       	ldd	r25, Y+2	; 0x02
    3622:	ab 81       	ldd	r26, Y+3	; 0x03
    3624:	bc 81       	ldd	r27, Y+4	; 0x04
    3626:	80 31       	cpi	r24, 0x10	; 16
    3628:	27 e2       	ldi	r18, 0x27	; 39
    362a:	92 07       	cpc	r25, r18
    362c:	20 e0       	ldi	r18, 0x00	; 0
    362e:	a2 07       	cpc	r26, r18
    3630:	20 e0       	ldi	r18, 0x00	; 0
    3632:	b2 07       	cpc	r27, r18
    3634:	f0 f2       	brcs	.-68     	; 0x35f2 <SPI_u8Tranceive+0x3e>
		{
			Local_u32TimeoutCounter++;
		}
		if (Local_u32TimeoutCounter == SPI_u32TIMEOUT)
    3636:	89 81       	ldd	r24, Y+1	; 0x01
    3638:	9a 81       	ldd	r25, Y+2	; 0x02
    363a:	ab 81       	ldd	r26, Y+3	; 0x03
    363c:	bc 81       	ldd	r27, Y+4	; 0x04
    363e:	80 31       	cpi	r24, 0x10	; 16
    3640:	27 e2       	ldi	r18, 0x27	; 39
    3642:	92 07       	cpc	r25, r18
    3644:	20 e0       	ldi	r18, 0x00	; 0
    3646:	a2 07       	cpc	r26, r18
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	b2 07       	cpc	r27, r18
    364c:	19 f4       	brne	.+6      	; 0x3654 <SPI_u8Tranceive+0xa0>
		{
			Local_u8ErrorState = TIMEOUT_STATE;
    364e:	84 e0       	ldi	r24, 0x04	; 4
    3650:	8d 83       	std	Y+5, r24	; 0x05
    3652:	06 c0       	rjmp	.+12     	; 0x3660 <SPI_u8Tranceive+0xac>
		}
		else
		{
			*Copy_u8RData = SPDR;
    3654:	ef e2       	ldi	r30, 0x2F	; 47
    3656:	f0 e0       	ldi	r31, 0x00	; 0
    3658:	80 81       	ld	r24, Z
    365a:	ef 81       	ldd	r30, Y+7	; 0x07
    365c:	f8 85       	ldd	r31, Y+8	; 0x08
    365e:	80 83       	st	Z, r24
		}
		SPI_u8State = IDLE;
    3660:	10 92 6e 01 	sts	0x016E, r1
    3664:	02 c0       	rjmp	.+4      	; 0x366a <SPI_u8Tranceive+0xb6>
	}
	else
	{
		Local_u8ErrorState = BUSY_STATE;
    3666:	83 e0       	ldi	r24, 0x03	; 3
    3668:	8d 83       	std	Y+5, r24	; 0x05
	}

	return Local_u8ErrorState;
    366a:	8d 81       	ldd	r24, Y+5	; 0x05

}
    366c:	28 96       	adiw	r28, 0x08	; 8
    366e:	0f b6       	in	r0, 0x3f	; 63
    3670:	f8 94       	cli
    3672:	de bf       	out	0x3e, r29	; 62
    3674:	0f be       	out	0x3f, r0	; 63
    3676:	cd bf       	out	0x3d, r28	; 61
    3678:	cf 91       	pop	r28
    367a:	df 91       	pop	r29
    367c:	08 95       	ret

0000367e <SPI_u8BufferTranceiverSynch>:
 *      Copy_u32BufferSize => size of array
 *
 * return     : Error status with type u8
 */
u8 SPI_u8BufferTranceiverSynch(u8 *Copy_u8TData, u8 *Copy_u8RData, u8 Copy_u8BufferSize)
{
    367e:	df 93       	push	r29
    3680:	cf 93       	push	r28
    3682:	cd b7       	in	r28, 0x3d	; 61
    3684:	de b7       	in	r29, 0x3e	; 62
    3686:	27 97       	sbiw	r28, 0x07	; 7
    3688:	0f b6       	in	r0, 0x3f	; 63
    368a:	f8 94       	cli
    368c:	de bf       	out	0x3e, r29	; 62
    368e:	0f be       	out	0x3f, r0	; 63
    3690:	cd bf       	out	0x3d, r28	; 61
    3692:	9c 83       	std	Y+4, r25	; 0x04
    3694:	8b 83       	std	Y+3, r24	; 0x03
    3696:	7e 83       	std	Y+6, r23	; 0x06
    3698:	6d 83       	std	Y+5, r22	; 0x05
    369a:	4f 83       	std	Y+7, r20	; 0x07
	u8 Local_u8ErrorState = OK;
    369c:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter = 0;
    369e:	19 82       	std	Y+1, r1	; 0x01
	if ((Copy_u8TData != NULL) && (Copy_u8RData != NULL))
    36a0:	8b 81       	ldd	r24, Y+3	; 0x03
    36a2:	9c 81       	ldd	r25, Y+4	; 0x04
    36a4:	00 97       	sbiw	r24, 0x00	; 0
    36a6:	09 f1       	breq	.+66     	; 0x36ea <SPI_u8BufferTranceiverSynch+0x6c>
    36a8:	8d 81       	ldd	r24, Y+5	; 0x05
    36aa:	9e 81       	ldd	r25, Y+6	; 0x06
    36ac:	00 97       	sbiw	r24, 0x00	; 0
    36ae:	e9 f0       	breq	.+58     	; 0x36ea <SPI_u8BufferTranceiverSynch+0x6c>
    36b0:	17 c0       	rjmp	.+46     	; 0x36e0 <SPI_u8BufferTranceiverSynch+0x62>
	{
		while (Local_u8Counter < Copy_u8BufferSize)
		{
			SPI_u8Tranceive(Copy_u8TData[Local_u8Counter], &Copy_u8RData[Local_u8Counter]);
    36b2:	89 81       	ldd	r24, Y+1	; 0x01
    36b4:	28 2f       	mov	r18, r24
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ba:	9c 81       	ldd	r25, Y+4	; 0x04
    36bc:	fc 01       	movw	r30, r24
    36be:	e2 0f       	add	r30, r18
    36c0:	f3 1f       	adc	r31, r19
    36c2:	40 81       	ld	r20, Z
    36c4:	89 81       	ldd	r24, Y+1	; 0x01
    36c6:	28 2f       	mov	r18, r24
    36c8:	30 e0       	ldi	r19, 0x00	; 0
    36ca:	8d 81       	ldd	r24, Y+5	; 0x05
    36cc:	9e 81       	ldd	r25, Y+6	; 0x06
    36ce:	28 0f       	add	r18, r24
    36d0:	39 1f       	adc	r19, r25
    36d2:	84 2f       	mov	r24, r20
    36d4:	b9 01       	movw	r22, r18
    36d6:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <SPI_u8Tranceive>
			Local_u8Counter++;
    36da:	89 81       	ldd	r24, Y+1	; 0x01
    36dc:	8f 5f       	subi	r24, 0xFF	; 255
    36de:	89 83       	std	Y+1, r24	; 0x01
{
	u8 Local_u8ErrorState = OK;
	u8 Local_u8Counter = 0;
	if ((Copy_u8TData != NULL) && (Copy_u8RData != NULL))
	{
		while (Local_u8Counter < Copy_u8BufferSize)
    36e0:	99 81       	ldd	r25, Y+1	; 0x01
    36e2:	8f 81       	ldd	r24, Y+7	; 0x07
    36e4:	98 17       	cp	r25, r24
    36e6:	28 f3       	brcs	.-54     	; 0x36b2 <SPI_u8BufferTranceiverSynch+0x34>
    36e8:	02 c0       	rjmp	.+4      	; 0x36ee <SPI_u8BufferTranceiverSynch+0x70>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
    36ea:	82 e0       	ldi	r24, 0x02	; 2
    36ec:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    36ee:	8a 81       	ldd	r24, Y+2	; 0x02
}
    36f0:	27 96       	adiw	r28, 0x07	; 7
    36f2:	0f b6       	in	r0, 0x3f	; 63
    36f4:	f8 94       	cli
    36f6:	de bf       	out	0x3e, r29	; 62
    36f8:	0f be       	out	0x3f, r0	; 63
    36fa:	cd bf       	out	0x3d, r28	; 61
    36fc:	cf 91       	pop	r28
    36fe:	df 91       	pop	r29
    3700:	08 95       	ret

00003702 <SPI_u8BufferTranceiverAsynch>:
 *		      NotificationFuncn => function that called after the tranceive complete
 *
 * return     : Error status with type u8
 */
u8 SPI_u8BufferTranceiverAsynch(SPI_BUFFER *spi_buffer)
{
    3702:	df 93       	push	r29
    3704:	cf 93       	push	r28
    3706:	00 d0       	rcall	.+0      	; 0x3708 <SPI_u8BufferTranceiverAsynch+0x6>
    3708:	0f 92       	push	r0
    370a:	cd b7       	in	r28, 0x3d	; 61
    370c:	de b7       	in	r29, 0x3e	; 62
    370e:	9b 83       	std	Y+3, r25	; 0x03
    3710:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    3712:	19 82       	std	Y+1, r1	; 0x01

	if (SPI_u8State == IDLE)
    3714:	80 91 6e 01 	lds	r24, 0x016E
    3718:	88 23       	and	r24, r24
    371a:	09 f0       	breq	.+2      	; 0x371e <SPI_u8BufferTranceiverAsynch+0x1c>
    371c:	55 c0       	rjmp	.+170    	; 0x37c8 <SPI_u8BufferTranceiverAsynch+0xc6>
	{
		if ((spi_buffer != NULL) &&
    371e:	8a 81       	ldd	r24, Y+2	; 0x02
    3720:	9b 81       	ldd	r25, Y+3	; 0x03
    3722:	00 97       	sbiw	r24, 0x00	; 0
    3724:	09 f4       	brne	.+2      	; 0x3728 <SPI_u8BufferTranceiverAsynch+0x26>
    3726:	4d c0       	rjmp	.+154    	; 0x37c2 <SPI_u8BufferTranceiverAsynch+0xc0>
    3728:	ea 81       	ldd	r30, Y+2	; 0x02
    372a:	fb 81       	ldd	r31, Y+3	; 0x03
    372c:	80 81       	ld	r24, Z
    372e:	91 81       	ldd	r25, Z+1	; 0x01
    3730:	00 97       	sbiw	r24, 0x00	; 0
    3732:	09 f4       	brne	.+2      	; 0x3736 <SPI_u8BufferTranceiverAsynch+0x34>
    3734:	46 c0       	rjmp	.+140    	; 0x37c2 <SPI_u8BufferTranceiverAsynch+0xc0>
    3736:	ea 81       	ldd	r30, Y+2	; 0x02
    3738:	fb 81       	ldd	r31, Y+3	; 0x03
    373a:	82 81       	ldd	r24, Z+2	; 0x02
    373c:	93 81       	ldd	r25, Z+3	; 0x03
    373e:	00 97       	sbiw	r24, 0x00	; 0
    3740:	09 f4       	brne	.+2      	; 0x3744 <SPI_u8BufferTranceiverAsynch+0x42>
    3742:	3f c0       	rjmp	.+126    	; 0x37c2 <SPI_u8BufferTranceiverAsynch+0xc0>
    3744:	ea 81       	ldd	r30, Y+2	; 0x02
    3746:	fb 81       	ldd	r31, Y+3	; 0x03
    3748:	85 81       	ldd	r24, Z+5	; 0x05
    374a:	96 81       	ldd	r25, Z+6	; 0x06
    374c:	00 97       	sbiw	r24, 0x00	; 0
    374e:	c9 f1       	breq	.+114    	; 0x37c2 <SPI_u8BufferTranceiverAsynch+0xc0>
				(spi_buffer->Copy_u8TData != NULL) &&
				(spi_buffer->Copy_u8RData != NULL) &&
				(spi_buffer->NotificationFuncn != NULL))
		{
			/*SPI is now Busy*/
			SPI_u8State = BUSY;
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	80 93 6e 01 	sts	0x016E, r24

			/*Assign the SPI data globally*/
			SPI_pu8TData           = spi_buffer->Copy_u8TData     ;
    3756:	ea 81       	ldd	r30, Y+2	; 0x02
    3758:	fb 81       	ldd	r31, Y+3	; 0x03
    375a:	80 81       	ld	r24, Z
    375c:	91 81       	ldd	r25, Z+1	; 0x01
    375e:	90 93 69 01 	sts	0x0169, r25
    3762:	80 93 68 01 	sts	0x0168, r24
			SPI_pu8RData           = spi_buffer->Copy_u8RData     ;
    3766:	ea 81       	ldd	r30, Y+2	; 0x02
    3768:	fb 81       	ldd	r31, Y+3	; 0x03
    376a:	82 81       	ldd	r24, Z+2	; 0x02
    376c:	93 81       	ldd	r25, Z+3	; 0x03
    376e:	90 93 6b 01 	sts	0x016B, r25
    3772:	80 93 6a 01 	sts	0x016A, r24
			SPI_u8BufferSize       = spi_buffer->Copy_u8BufferSize;
    3776:	ea 81       	ldd	r30, Y+2	; 0x02
    3778:	fb 81       	ldd	r31, Y+3	; 0x03
    377a:	84 81       	ldd	r24, Z+4	; 0x04
    377c:	80 93 6f 01 	sts	0x016F, r24
			SPI_pvNotificationFunc = spi_buffer->NotificationFuncn;
    3780:	ea 81       	ldd	r30, Y+2	; 0x02
    3782:	fb 81       	ldd	r31, Y+3	; 0x03
    3784:	85 81       	ldd	r24, Z+5	; 0x05
    3786:	96 81       	ldd	r25, Z+6	; 0x06
    3788:	90 93 6d 01 	sts	0x016D, r25
    378c:	80 93 6c 01 	sts	0x016C, r24

			/*Set Index to first element*/
			SPI_u8Index = 0;
    3790:	10 92 70 01 	sts	0x0170, r1

			/*Transmit first Data */
			SPDR = SPI_pu8TData[SPI_u8Index];
    3794:	af e2       	ldi	r26, 0x2F	; 47
    3796:	b0 e0       	ldi	r27, 0x00	; 0
    3798:	20 91 68 01 	lds	r18, 0x0168
    379c:	30 91 69 01 	lds	r19, 0x0169
    37a0:	80 91 70 01 	lds	r24, 0x0170
    37a4:	88 2f       	mov	r24, r24
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	f9 01       	movw	r30, r18
    37aa:	e8 0f       	add	r30, r24
    37ac:	f9 1f       	adc	r31, r25
    37ae:	80 81       	ld	r24, Z
    37b0:	8c 93       	st	X, r24

			/*SPI Interrupt Enable*/
			SET_BIT(SPCR, SPCR_SPIE);
    37b2:	ad e2       	ldi	r26, 0x2D	; 45
    37b4:	b0 e0       	ldi	r27, 0x00	; 0
    37b6:	ed e2       	ldi	r30, 0x2D	; 45
    37b8:	f0 e0       	ldi	r31, 0x00	; 0
    37ba:	80 81       	ld	r24, Z
    37bc:	80 68       	ori	r24, 0x80	; 128
    37be:	8c 93       	st	X, r24
    37c0:	05 c0       	rjmp	.+10     	; 0x37cc <SPI_u8BufferTranceiverAsynch+0xca>
		}
		else
		{
			Local_u8ErrorState = NULL_POINTER;
    37c2:	82 e0       	ldi	r24, 0x02	; 2
    37c4:	89 83       	std	Y+1, r24	; 0x01
    37c6:	02 c0       	rjmp	.+4      	; 0x37cc <SPI_u8BufferTranceiverAsynch+0xca>
		}
	}
	else
	{
		Local_u8ErrorState = BUSY_STATE;
    37c8:	83 e0       	ldi	r24, 0x03	; 3
    37ca:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    37cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    37ce:	0f 90       	pop	r0
    37d0:	0f 90       	pop	r0
    37d2:	0f 90       	pop	r0
    37d4:	cf 91       	pop	r28
    37d6:	df 91       	pop	r29
    37d8:	08 95       	ret

000037da <__vector_12>:

//-------------------------------------------------------------------------------------------------------------------------------

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
    37da:	1f 92       	push	r1
    37dc:	0f 92       	push	r0
    37de:	0f b6       	in	r0, 0x3f	; 63
    37e0:	0f 92       	push	r0
    37e2:	11 24       	eor	r1, r1
    37e4:	2f 93       	push	r18
    37e6:	3f 93       	push	r19
    37e8:	4f 93       	push	r20
    37ea:	5f 93       	push	r21
    37ec:	6f 93       	push	r22
    37ee:	7f 93       	push	r23
    37f0:	8f 93       	push	r24
    37f2:	9f 93       	push	r25
    37f4:	af 93       	push	r26
    37f6:	bf 93       	push	r27
    37f8:	ef 93       	push	r30
    37fa:	ff 93       	push	r31
    37fc:	df 93       	push	r29
    37fe:	cf 93       	push	r28
    3800:	cd b7       	in	r28, 0x3d	; 61
    3802:	de b7       	in	r29, 0x3e	; 62
	/*Receive Data*/
	SPI_pu8RData[SPI_u8Index] = SPDR;
    3804:	20 91 6a 01 	lds	r18, 0x016A
    3808:	30 91 6b 01 	lds	r19, 0x016B
    380c:	80 91 70 01 	lds	r24, 0x0170
    3810:	88 2f       	mov	r24, r24
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	d9 01       	movw	r26, r18
    3816:	a8 0f       	add	r26, r24
    3818:	b9 1f       	adc	r27, r25
    381a:	ef e2       	ldi	r30, 0x2F	; 47
    381c:	f0 e0       	ldi	r31, 0x00	; 0
    381e:	80 81       	ld	r24, Z
    3820:	8c 93       	st	X, r24

	/*Increment Data index of the buffer*/
	SPI_u8Index++;
    3822:	80 91 70 01 	lds	r24, 0x0170
    3826:	8f 5f       	subi	r24, 0xFF	; 255
    3828:	80 93 70 01 	sts	0x0170, r24

	if (SPI_u8Index == SPI_u8BufferSize)
    382c:	90 91 70 01 	lds	r25, 0x0170
    3830:	80 91 6f 01 	lds	r24, 0x016F
    3834:	98 17       	cp	r25, r24
    3836:	a9 f4       	brne	.+42     	; 0x3862 <__vector_12+0x88>
	{
		/*Buffer Complete*/

		/*SPI is now IDLE*/
		SPI_u8State = IDLE;
    3838:	10 92 6e 01 	sts	0x016E, r1

		/*SPI Interrupt Disable*/
		CLR_BIT(SPCR, SPCR_SPIE);
    383c:	ad e2       	ldi	r26, 0x2D	; 45
    383e:	b0 e0       	ldi	r27, 0x00	; 0
    3840:	ed e2       	ldi	r30, 0x2D	; 45
    3842:	f0 e0       	ldi	r31, 0x00	; 0
    3844:	80 81       	ld	r24, Z
    3846:	8f 77       	andi	r24, 0x7F	; 127
    3848:	8c 93       	st	X, r24

		/*Call Notification Function*/
		if (SPI_pvNotificationFunc != NULL)
    384a:	80 91 6c 01 	lds	r24, 0x016C
    384e:	90 91 6d 01 	lds	r25, 0x016D
    3852:	00 97       	sbiw	r24, 0x00	; 0
    3854:	a9 f0       	breq	.+42     	; 0x3880 <__vector_12+0xa6>
		{
			SPI_pvNotificationFunc();
    3856:	e0 91 6c 01 	lds	r30, 0x016C
    385a:	f0 91 6d 01 	lds	r31, 0x016D
    385e:	09 95       	icall
    3860:	0f c0       	rjmp	.+30     	; 0x3880 <__vector_12+0xa6>
	else
	{
		/*Buffer not Complete*/

		/*Transmit next Data*/
		SPDR = SPI_pu8TData[SPI_u8Index];
    3862:	af e2       	ldi	r26, 0x2F	; 47
    3864:	b0 e0       	ldi	r27, 0x00	; 0
    3866:	20 91 68 01 	lds	r18, 0x0168
    386a:	30 91 69 01 	lds	r19, 0x0169
    386e:	80 91 70 01 	lds	r24, 0x0170
    3872:	88 2f       	mov	r24, r24
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	f9 01       	movw	r30, r18
    3878:	e8 0f       	add	r30, r24
    387a:	f9 1f       	adc	r31, r25
    387c:	80 81       	ld	r24, Z
    387e:	8c 93       	st	X, r24
	}
}
    3880:	cf 91       	pop	r28
    3882:	df 91       	pop	r29
    3884:	ff 91       	pop	r31
    3886:	ef 91       	pop	r30
    3888:	bf 91       	pop	r27
    388a:	af 91       	pop	r26
    388c:	9f 91       	pop	r25
    388e:	8f 91       	pop	r24
    3890:	7f 91       	pop	r23
    3892:	6f 91       	pop	r22
    3894:	5f 91       	pop	r21
    3896:	4f 91       	pop	r20
    3898:	3f 91       	pop	r19
    389a:	2f 91       	pop	r18
    389c:	0f 90       	pop	r0
    389e:	0f be       	out	0x3f, r0	; 63
    38a0:	0f 90       	pop	r0
    38a2:	1f 90       	pop	r1
    38a4:	18 95       	reti

000038a6 <main>:
#define DIPPY_Date 0xff

volatile u8 Error_State, KPD_Press;

void main()
{
    38a6:	df 93       	push	r29
    38a8:	cf 93       	push	r28
    38aa:	cd b7       	in	r28, 0x3d	; 61
    38ac:	de b7       	in	r29, 0x3e	; 62
	CLCD_vInit();
    38ae:	0e 94 10 09 	call	0x1220	; 0x1220 <CLCD_vInit>
	SPI_vInit();
    38b2:	0e 94 a4 18 	call	0x3148	; 0x3148 <SPI_vInit>
	while(1)
	{
		Error_State = SPI_u8Tranceive(DIPPY_Date, &KPD_Press);
    38b6:	21 e7       	ldi	r18, 0x71	; 113
    38b8:	31 e0       	ldi	r19, 0x01	; 1
    38ba:	8f ef       	ldi	r24, 0xFF	; 255
    38bc:	b9 01       	movw	r22, r18
    38be:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <SPI_u8Tranceive>
    38c2:	80 93 72 01 	sts	0x0172, r24
		if (Error_State == OK)
    38c6:	80 91 72 01 	lds	r24, 0x0172
    38ca:	88 23       	and	r24, r24
    38cc:	a1 f7       	brne	.-24     	; 0x38b6 <main+0x10>
		{
			CLCD_vSendData(KPD_Press);
    38ce:	80 91 71 01 	lds	r24, 0x0171
    38d2:	0e 94 97 0b 	call	0x172e	; 0x172e <CLCD_vSendData>
    38d6:	ef cf       	rjmp	.-34     	; 0x38b6 <main+0x10>

000038d8 <__mulsi3>:
    38d8:	62 9f       	mul	r22, r18
    38da:	d0 01       	movw	r26, r0
    38dc:	73 9f       	mul	r23, r19
    38de:	f0 01       	movw	r30, r0
    38e0:	82 9f       	mul	r24, r18
    38e2:	e0 0d       	add	r30, r0
    38e4:	f1 1d       	adc	r31, r1
    38e6:	64 9f       	mul	r22, r20
    38e8:	e0 0d       	add	r30, r0
    38ea:	f1 1d       	adc	r31, r1
    38ec:	92 9f       	mul	r25, r18
    38ee:	f0 0d       	add	r31, r0
    38f0:	83 9f       	mul	r24, r19
    38f2:	f0 0d       	add	r31, r0
    38f4:	74 9f       	mul	r23, r20
    38f6:	f0 0d       	add	r31, r0
    38f8:	65 9f       	mul	r22, r21
    38fa:	f0 0d       	add	r31, r0
    38fc:	99 27       	eor	r25, r25
    38fe:	72 9f       	mul	r23, r18
    3900:	b0 0d       	add	r27, r0
    3902:	e1 1d       	adc	r30, r1
    3904:	f9 1f       	adc	r31, r25
    3906:	63 9f       	mul	r22, r19
    3908:	b0 0d       	add	r27, r0
    390a:	e1 1d       	adc	r30, r1
    390c:	f9 1f       	adc	r31, r25
    390e:	bd 01       	movw	r22, r26
    3910:	cf 01       	movw	r24, r30
    3912:	11 24       	eor	r1, r1
    3914:	08 95       	ret

00003916 <__udivmodsi4>:
    3916:	a1 e2       	ldi	r26, 0x21	; 33
    3918:	1a 2e       	mov	r1, r26
    391a:	aa 1b       	sub	r26, r26
    391c:	bb 1b       	sub	r27, r27
    391e:	fd 01       	movw	r30, r26
    3920:	0d c0       	rjmp	.+26     	; 0x393c <__udivmodsi4_ep>

00003922 <__udivmodsi4_loop>:
    3922:	aa 1f       	adc	r26, r26
    3924:	bb 1f       	adc	r27, r27
    3926:	ee 1f       	adc	r30, r30
    3928:	ff 1f       	adc	r31, r31
    392a:	a2 17       	cp	r26, r18
    392c:	b3 07       	cpc	r27, r19
    392e:	e4 07       	cpc	r30, r20
    3930:	f5 07       	cpc	r31, r21
    3932:	20 f0       	brcs	.+8      	; 0x393c <__udivmodsi4_ep>
    3934:	a2 1b       	sub	r26, r18
    3936:	b3 0b       	sbc	r27, r19
    3938:	e4 0b       	sbc	r30, r20
    393a:	f5 0b       	sbc	r31, r21

0000393c <__udivmodsi4_ep>:
    393c:	66 1f       	adc	r22, r22
    393e:	77 1f       	adc	r23, r23
    3940:	88 1f       	adc	r24, r24
    3942:	99 1f       	adc	r25, r25
    3944:	1a 94       	dec	r1
    3946:	69 f7       	brne	.-38     	; 0x3922 <__udivmodsi4_loop>
    3948:	60 95       	com	r22
    394a:	70 95       	com	r23
    394c:	80 95       	com	r24
    394e:	90 95       	com	r25
    3950:	9b 01       	movw	r18, r22
    3952:	ac 01       	movw	r20, r24
    3954:	bd 01       	movw	r22, r26
    3956:	cf 01       	movw	r24, r30
    3958:	08 95       	ret

0000395a <__divmodsi4>:
    395a:	97 fb       	bst	r25, 7
    395c:	09 2e       	mov	r0, r25
    395e:	05 26       	eor	r0, r21
    3960:	0e d0       	rcall	.+28     	; 0x397e <__divmodsi4_neg1>
    3962:	57 fd       	sbrc	r21, 7
    3964:	04 d0       	rcall	.+8      	; 0x396e <__divmodsi4_neg2>
    3966:	d7 df       	rcall	.-82     	; 0x3916 <__udivmodsi4>
    3968:	0a d0       	rcall	.+20     	; 0x397e <__divmodsi4_neg1>
    396a:	00 1c       	adc	r0, r0
    396c:	38 f4       	brcc	.+14     	; 0x397c <__divmodsi4_exit>

0000396e <__divmodsi4_neg2>:
    396e:	50 95       	com	r21
    3970:	40 95       	com	r20
    3972:	30 95       	com	r19
    3974:	21 95       	neg	r18
    3976:	3f 4f       	sbci	r19, 0xFF	; 255
    3978:	4f 4f       	sbci	r20, 0xFF	; 255
    397a:	5f 4f       	sbci	r21, 0xFF	; 255

0000397c <__divmodsi4_exit>:
    397c:	08 95       	ret

0000397e <__divmodsi4_neg1>:
    397e:	f6 f7       	brtc	.-4      	; 0x397c <__divmodsi4_exit>
    3980:	90 95       	com	r25
    3982:	80 95       	com	r24
    3984:	70 95       	com	r23
    3986:	61 95       	neg	r22
    3988:	7f 4f       	sbci	r23, 0xFF	; 255
    398a:	8f 4f       	sbci	r24, 0xFF	; 255
    398c:	9f 4f       	sbci	r25, 0xFF	; 255
    398e:	08 95       	ret

00003990 <__prologue_saves__>:
    3990:	2f 92       	push	r2
    3992:	3f 92       	push	r3
    3994:	4f 92       	push	r4
    3996:	5f 92       	push	r5
    3998:	6f 92       	push	r6
    399a:	7f 92       	push	r7
    399c:	8f 92       	push	r8
    399e:	9f 92       	push	r9
    39a0:	af 92       	push	r10
    39a2:	bf 92       	push	r11
    39a4:	cf 92       	push	r12
    39a6:	df 92       	push	r13
    39a8:	ef 92       	push	r14
    39aa:	ff 92       	push	r15
    39ac:	0f 93       	push	r16
    39ae:	1f 93       	push	r17
    39b0:	cf 93       	push	r28
    39b2:	df 93       	push	r29
    39b4:	cd b7       	in	r28, 0x3d	; 61
    39b6:	de b7       	in	r29, 0x3e	; 62
    39b8:	ca 1b       	sub	r28, r26
    39ba:	db 0b       	sbc	r29, r27
    39bc:	0f b6       	in	r0, 0x3f	; 63
    39be:	f8 94       	cli
    39c0:	de bf       	out	0x3e, r29	; 62
    39c2:	0f be       	out	0x3f, r0	; 63
    39c4:	cd bf       	out	0x3d, r28	; 61
    39c6:	09 94       	ijmp

000039c8 <__epilogue_restores__>:
    39c8:	2a 88       	ldd	r2, Y+18	; 0x12
    39ca:	39 88       	ldd	r3, Y+17	; 0x11
    39cc:	48 88       	ldd	r4, Y+16	; 0x10
    39ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    39d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    39d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    39d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    39d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    39d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    39da:	b9 84       	ldd	r11, Y+9	; 0x09
    39dc:	c8 84       	ldd	r12, Y+8	; 0x08
    39de:	df 80       	ldd	r13, Y+7	; 0x07
    39e0:	ee 80       	ldd	r14, Y+6	; 0x06
    39e2:	fd 80       	ldd	r15, Y+5	; 0x05
    39e4:	0c 81       	ldd	r16, Y+4	; 0x04
    39e6:	1b 81       	ldd	r17, Y+3	; 0x03
    39e8:	aa 81       	ldd	r26, Y+2	; 0x02
    39ea:	b9 81       	ldd	r27, Y+1	; 0x01
    39ec:	ce 0f       	add	r28, r30
    39ee:	d1 1d       	adc	r29, r1
    39f0:	0f b6       	in	r0, 0x3f	; 63
    39f2:	f8 94       	cli
    39f4:	de bf       	out	0x3e, r29	; 62
    39f6:	0f be       	out	0x3f, r0	; 63
    39f8:	cd bf       	out	0x3d, r28	; 61
    39fa:	ed 01       	movw	r28, r26
    39fc:	08 95       	ret

000039fe <_exit>:
    39fe:	f8 94       	cli

00003a00 <__stop_program>:
    3a00:	ff cf       	rjmp	.-2      	; 0x3a00 <__stop_program>
