
RTOS_Semaphore.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000055d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000055d8  0000566c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003ba  00800074  00800074  00005680  2**0
                  ALLOC
  3 .stab         00006e88  00000000  00000000  00005680  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000378f  00000000  00000000  0000c508  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000fc97  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000fdd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000ff47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00011b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00012a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00013828  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00013988  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00013c15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000143e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d0 1a 	jmp	0x35a0	; 0x35a0 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	f5 e5       	ldi	r31, 0x55	; 85
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 32       	cpi	r26, 0x2E	; 46
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 75 19 	call	0x32ea	; 0x32ea <main>
      8a:	0c 94 ea 2a 	jmp	0x55d4	; 0x55d4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 aa 2a 	jmp	0x5554	; 0x5554 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e6       	ldi	r26, 0x67	; 103
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c6 2a 	jmp	0x558c	; 0x558c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b6 2a 	jmp	0x556c	; 0x556c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d2 2a 	jmp	0x55a4	; 0x55a4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b6 2a 	jmp	0x556c	; 0x556c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d2 2a 	jmp	0x55a4	; 0x55a4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 aa 2a 	jmp	0x5554	; 0x5554 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e6       	ldi	r24, 0x67	; 103
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c6 2a 	jmp	0x558c	; 0x558c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b6 2a 	jmp	0x556c	; 0x556c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d2 2a 	jmp	0x55a4	; 0x55a4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b6 2a 	jmp	0x556c	; 0x556c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d2 2a 	jmp	0x55a4	; 0x55a4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b6 2a 	jmp	0x556c	; 0x556c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d2 2a 	jmp	0x55a4	; 0x55a4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ba 2a 	jmp	0x5574	; 0x5574 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d6 2a 	jmp	0x55ac	; 0x55ac <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_vsetPINDir>:




void DIO_vsetPINDir(char portname,char pinnumber,char direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_vsetPINDir+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_vsetPINDir+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	82 34       	cpi	r24, 0x42	; 66
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <DIO_vsetPINDir+0x2a>
     b6e:	44 c0       	rjmp	.+136    	; 0xbf8 <DIO_vsetPINDir+0xb2>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	23 34       	cpi	r18, 0x43	; 67
     b76:	31 05       	cpc	r19, r1
     b78:	34 f4       	brge	.+12     	; 0xb86 <DIO_vsetPINDir+0x40>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	81 34       	cpi	r24, 0x41	; 65
     b80:	91 05       	cpc	r25, r1
     b82:	71 f0       	breq	.+28     	; 0xba0 <DIO_vsetPINDir+0x5a>
     b84:	bc c0       	rjmp	.+376    	; 0xcfe <DIO_vsetPINDir+0x1b8>
     b86:	2c 81       	ldd	r18, Y+4	; 0x04
     b88:	3d 81       	ldd	r19, Y+5	; 0x05
     b8a:	23 34       	cpi	r18, 0x43	; 67
     b8c:	31 05       	cpc	r19, r1
     b8e:	09 f4       	brne	.+2      	; 0xb92 <DIO_vsetPINDir+0x4c>
     b90:	5f c0       	rjmp	.+190    	; 0xc50 <DIO_vsetPINDir+0x10a>
     b92:	8c 81       	ldd	r24, Y+4	; 0x04
     b94:	9d 81       	ldd	r25, Y+5	; 0x05
     b96:	84 34       	cpi	r24, 0x44	; 68
     b98:	91 05       	cpc	r25, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <DIO_vsetPINDir+0x58>
     b9c:	85 c0       	rjmp	.+266    	; 0xca8 <DIO_vsetPINDir+0x162>
     b9e:	af c0       	rjmp	.+350    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	{
		
	
	case 'A':
	if(direction==1)
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	a1 f4       	brne	.+40     	; 0xbce <DIO_vsetPINDir+0x88>
	{
		DDRA|=(1<<pinnumber);
     ba6:	aa e3       	ldi	r26, 0x3A	; 58
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ea e3       	ldi	r30, 0x3A	; 58
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	48 2f       	mov	r20, r24
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 2e       	mov	r0, r18
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <DIO_vsetPINDir+0x7e>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <DIO_vsetPINDir+0x7a>
     bc8:	84 2b       	or	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	98 c0       	rjmp	.+304    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	else
	{
		DDRA&=(~(1<<pinnumber));
     bce:	aa e3       	ldi	r26, 0x3A	; 58
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	ea e3       	ldi	r30, 0x3A	; 58
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	48 2f       	mov	r20, r24
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 2e       	mov	r0, r18
     be6:	02 c0       	rjmp	.+4      	; 0xbec <DIO_vsetPINDir+0xa6>
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <DIO_vsetPINDir+0xa2>
     bf0:	80 95       	com	r24
     bf2:	84 23       	and	r24, r20
     bf4:	8c 93       	st	X, r24
     bf6:	83 c0       	rjmp	.+262    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	break;
	case 'B':
	if(direction==1)
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	a1 f4       	brne	.+40     	; 0xc26 <DIO_vsetPINDir+0xe0>
	{
		DDRB|=(1<<pinnumber);
     bfe:	a7 e3       	ldi	r26, 0x37	; 55
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e7 e3       	ldi	r30, 0x37	; 55
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	48 2f       	mov	r20, r24
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	02 2e       	mov	r0, r18
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <DIO_vsetPINDir+0xd6>
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	0a 94       	dec	r0
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <DIO_vsetPINDir+0xd2>
     c20:	84 2b       	or	r24, r20
     c22:	8c 93       	st	X, r24
     c24:	6c c0       	rjmp	.+216    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	else
	{
		DDRB&=(~(1<<pinnumber));
     c26:	a7 e3       	ldi	r26, 0x37	; 55
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e7 e3       	ldi	r30, 0x37	; 55
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	48 2f       	mov	r20, r24
     c32:	8a 81       	ldd	r24, Y+2	; 0x02
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	02 2e       	mov	r0, r18
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_vsetPINDir+0xfe>
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <DIO_vsetPINDir+0xfa>
     c48:	80 95       	com	r24
     c4a:	84 23       	and	r24, r20
     c4c:	8c 93       	st	X, r24
     c4e:	57 c0       	rjmp	.+174    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	break;
	case 'C':
	if(direction==1)
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	a1 f4       	brne	.+40     	; 0xc7e <DIO_vsetPINDir+0x138>
	{
		DDRC|=(1<<pinnumber);
     c56:	a4 e3       	ldi	r26, 0x34	; 52
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	e4 e3       	ldi	r30, 0x34	; 52
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	48 2f       	mov	r20, r24
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 2e       	mov	r0, r18
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <DIO_vsetPINDir+0x12e>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	0a 94       	dec	r0
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <DIO_vsetPINDir+0x12a>
     c78:	84 2b       	or	r24, r20
     c7a:	8c 93       	st	X, r24
     c7c:	40 c0       	rjmp	.+128    	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	else
	{
		DDRC&=(~(1<<pinnumber));
     c7e:	a4 e3       	ldi	r26, 0x34	; 52
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e4 e3       	ldi	r30, 0x34	; 52
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	48 2f       	mov	r20, r24
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	02 2e       	mov	r0, r18
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <DIO_vsetPINDir+0x156>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	0a 94       	dec	r0
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <DIO_vsetPINDir+0x152>
     ca0:	80 95       	com	r24
     ca2:	84 23       	and	r24, r20
     ca4:	8c 93       	st	X, r24
     ca6:	2b c0       	rjmp	.+86     	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	break;
	case 'D':
	if(direction==1)
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	a1 f4       	brne	.+40     	; 0xcd6 <DIO_vsetPINDir+0x190>
	{
		DDRD|=(1<<pinnumber);
     cae:	a1 e3       	ldi	r26, 0x31	; 49
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e1 e3       	ldi	r30, 0x31	; 49
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	48 2f       	mov	r20, r24
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 2e       	mov	r0, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <DIO_vsetPINDir+0x186>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	0a 94       	dec	r0
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <DIO_vsetPINDir+0x182>
     cd0:	84 2b       	or	r24, r20
     cd2:	8c 93       	st	X, r24
     cd4:	14 c0       	rjmp	.+40     	; 0xcfe <DIO_vsetPINDir+0x1b8>
	}
	else
	{
		DDRD&=(~(1<<pinnumber));
     cd6:	a1 e3       	ldi	r26, 0x31	; 49
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e1 e3       	ldi	r30, 0x31	; 49
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 2e       	mov	r0, r18
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <DIO_vsetPINDir+0x1ae>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <DIO_vsetPINDir+0x1aa>
     cf8:	80 95       	com	r24
     cfa:	84 23       	and	r24, r20
     cfc:	8c 93       	st	X, r24
	}
	break;
	default: break;
	}	
}
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <DIO_write>:


void DIO_write(char portname,char pinnumber,char outputvalue)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <DIO_write+0x6>
     d14:	00 d0       	rcall	.+0      	; 0xd16 <DIO_write+0x8>
     d16:	0f 92       	push	r0
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	89 83       	std	Y+1, r24	; 0x01
     d1e:	6a 83       	std	Y+2, r22	; 0x02
     d20:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	3d 83       	std	Y+5, r19	; 0x05
     d2a:	2c 83       	std	Y+4, r18	; 0x04
     d2c:	8c 81       	ldd	r24, Y+4	; 0x04
     d2e:	9d 81       	ldd	r25, Y+5	; 0x05
     d30:	82 34       	cpi	r24, 0x42	; 66
     d32:	91 05       	cpc	r25, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <DIO_write+0x2a>
     d36:	44 c0       	rjmp	.+136    	; 0xdc0 <DIO_write+0xb2>
     d38:	2c 81       	ldd	r18, Y+4	; 0x04
     d3a:	3d 81       	ldd	r19, Y+5	; 0x05
     d3c:	23 34       	cpi	r18, 0x43	; 67
     d3e:	31 05       	cpc	r19, r1
     d40:	34 f4       	brge	.+12     	; 0xd4e <DIO_write+0x40>
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	9d 81       	ldd	r25, Y+5	; 0x05
     d46:	81 34       	cpi	r24, 0x41	; 65
     d48:	91 05       	cpc	r25, r1
     d4a:	71 f0       	breq	.+28     	; 0xd68 <DIO_write+0x5a>
     d4c:	bc c0       	rjmp	.+376    	; 0xec6 <DIO_write+0x1b8>
     d4e:	2c 81       	ldd	r18, Y+4	; 0x04
     d50:	3d 81       	ldd	r19, Y+5	; 0x05
     d52:	23 34       	cpi	r18, 0x43	; 67
     d54:	31 05       	cpc	r19, r1
     d56:	09 f4       	brne	.+2      	; 0xd5a <DIO_write+0x4c>
     d58:	5f c0       	rjmp	.+190    	; 0xe18 <DIO_write+0x10a>
     d5a:	8c 81       	ldd	r24, Y+4	; 0x04
     d5c:	9d 81       	ldd	r25, Y+5	; 0x05
     d5e:	84 34       	cpi	r24, 0x44	; 68
     d60:	91 05       	cpc	r25, r1
     d62:	09 f4       	brne	.+2      	; 0xd66 <DIO_write+0x58>
     d64:	85 c0       	rjmp	.+266    	; 0xe70 <DIO_write+0x162>
     d66:	af c0       	rjmp	.+350    	; 0xec6 <DIO_write+0x1b8>
	{
		case 'A' :
		
			if(outputvalue==1)
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	a1 f4       	brne	.+40     	; 0xd96 <DIO_write+0x88>
			{
				PORTA|=(1<<pinnumber);
     d6e:	ab e3       	ldi	r26, 0x3B	; 59
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	eb e3       	ldi	r30, 0x3B	; 59
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 2e       	mov	r0, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <DIO_write+0x7e>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <DIO_write+0x7a>
     d90:	84 2b       	or	r24, r20
     d92:	8c 93       	st	X, r24
     d94:	98 c0       	rjmp	.+304    	; 0xec6 <DIO_write+0x1b8>
			}
			else
			{
				PORTA&=(~(1<<pinnumber));
     d96:	ab e3       	ldi	r26, 0x3B	; 59
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	eb e3       	ldi	r30, 0x3B	; 59
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <DIO_write+0xa6>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <DIO_write+0xa2>
     db8:	80 95       	com	r24
     dba:	84 23       	and	r24, r20
     dbc:	8c 93       	st	X, r24
     dbe:	83 c0       	rjmp	.+262    	; 0xec6 <DIO_write+0x1b8>
			}
			break ;
			case 'B':
			
			if(outputvalue==1)
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	a1 f4       	brne	.+40     	; 0xdee <DIO_write+0xe0>
			{
				PORTB|=(1<<pinnumber);
     dc6:	a8 e3       	ldi	r26, 0x38	; 56
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e3       	ldi	r30, 0x38	; 56
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	48 2f       	mov	r20, r24
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 2e       	mov	r0, r18
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <DIO_write+0xd6>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	0a 94       	dec	r0
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <DIO_write+0xd2>
     de8:	84 2b       	or	r24, r20
     dea:	8c 93       	st	X, r24
     dec:	6c c0       	rjmp	.+216    	; 0xec6 <DIO_write+0x1b8>
			}
			else
			{
				PORTB&=(~(1<<pinnumber));
     dee:	a8 e3       	ldi	r26, 0x38	; 56
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e8 e3       	ldi	r30, 0x38	; 56
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	48 2f       	mov	r20, r24
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 2e       	mov	r0, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_write+0xfe>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_write+0xfa>
     e10:	80 95       	com	r24
     e12:	84 23       	and	r24, r20
     e14:	8c 93       	st	X, r24
     e16:	57 c0       	rjmp	.+174    	; 0xec6 <DIO_write+0x1b8>
			}
			break ;
			case 'C' :
			
			if(outputvalue==1)
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	a1 f4       	brne	.+40     	; 0xe46 <DIO_write+0x138>
			{
				PORTC|=(1<<pinnumber);
     e1e:	a5 e3       	ldi	r26, 0x35	; 53
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e5 e3       	ldi	r30, 0x35	; 53
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_write+0x12e>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_write+0x12a>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	40 c0       	rjmp	.+128    	; 0xec6 <DIO_write+0x1b8>
			}
			else
			{
				PORTC&=(~(1<<pinnumber));
     e46:	a5 e3       	ldi	r26, 0x35	; 53
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e5 e3       	ldi	r30, 0x35	; 53
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <DIO_write+0x156>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <DIO_write+0x152>
     e68:	80 95       	com	r24
     e6a:	84 23       	and	r24, r20
     e6c:	8c 93       	st	X, r24
     e6e:	2b c0       	rjmp	.+86     	; 0xec6 <DIO_write+0x1b8>
			}
			break ;
		case 'D':
		
		if(outputvalue==1)
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	a1 f4       	brne	.+40     	; 0xe9e <DIO_write+0x190>
		{
			PORTD|=(1<<pinnumber);
     e76:	a2 e3       	ldi	r26, 0x32	; 50
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e2 e3       	ldi	r30, 0x32	; 50
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_write+0x186>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_write+0x182>
     e98:	84 2b       	or	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	14 c0       	rjmp	.+40     	; 0xec6 <DIO_write+0x1b8>
		}
		else
	{
			PORTD&=(~(1<<pinnumber));
     e9e:	a2 e3       	ldi	r26, 0x32	; 50
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e2 e3       	ldi	r30, 0x32	; 50
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DIO_write+0x1ae>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <DIO_write+0x1aa>
     ec0:	80 95       	com	r24
     ec2:	84 23       	and	r24, r20
     ec4:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <DIO_u8read>:


char DIO_u8read(char portname,char pinnumber)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	00 d0       	rcall	.+0      	; 0xedc <DIO_u8read+0x6>
     edc:	00 d0       	rcall	.+0      	; 0xede <DIO_u8read+0x8>
     ede:	0f 92       	push	r0
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	8a 83       	std	Y+2, r24	; 0x02
     ee6:	6b 83       	std	Y+3, r22	; 0x03
	char x ;
	switch(portname)
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	3d 83       	std	Y+5, r19	; 0x05
     ef0:	2c 83       	std	Y+4, r18	; 0x04
     ef2:	4c 81       	ldd	r20, Y+4	; 0x04
     ef4:	5d 81       	ldd	r21, Y+5	; 0x05
     ef6:	42 34       	cpi	r20, 0x42	; 66
     ef8:	51 05       	cpc	r21, r1
     efa:	b1 f1       	breq	.+108    	; 0xf68 <DIO_u8read+0x92>
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	9d 81       	ldd	r25, Y+5	; 0x05
     f00:	83 34       	cpi	r24, 0x43	; 67
     f02:	91 05       	cpc	r25, r1
     f04:	34 f4       	brge	.+12     	; 0xf12 <DIO_u8read+0x3c>
     f06:	2c 81       	ldd	r18, Y+4	; 0x04
     f08:	3d 81       	ldd	r19, Y+5	; 0x05
     f0a:	21 34       	cpi	r18, 0x41	; 65
     f0c:	31 05       	cpc	r19, r1
     f0e:	71 f0       	breq	.+28     	; 0xf2c <DIO_u8read+0x56>
     f10:	84 c0       	rjmp	.+264    	; 0x101a <DIO_u8read+0x144>
     f12:	4c 81       	ldd	r20, Y+4	; 0x04
     f14:	5d 81       	ldd	r21, Y+5	; 0x05
     f16:	43 34       	cpi	r20, 0x43	; 67
     f18:	51 05       	cpc	r21, r1
     f1a:	09 f4       	brne	.+2      	; 0xf1e <DIO_u8read+0x48>
     f1c:	43 c0       	rjmp	.+134    	; 0xfa4 <DIO_u8read+0xce>
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	9d 81       	ldd	r25, Y+5	; 0x05
     f22:	84 34       	cpi	r24, 0x44	; 68
     f24:	91 05       	cpc	r25, r1
     f26:	09 f4       	brne	.+2      	; 0xf2a <DIO_u8read+0x54>
     f28:	5b c0       	rjmp	.+182    	; 0xfe0 <DIO_u8read+0x10a>
     f2a:	77 c0       	rjmp	.+238    	; 0x101a <DIO_u8read+0x144>
	{
		case 'A' :
		x=((PINA&(1<<pinnumber))>>pinnumber);
     f2c:	e9 e3       	ldi	r30, 0x39	; 57
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <DIO_u8read+0x70>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	2a 95       	dec	r18
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <DIO_u8read+0x6c>
     f4a:	9a 01       	movw	r18, r20
     f4c:	28 23       	and	r18, r24
     f4e:	39 23       	and	r19, r25
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	a9 01       	movw	r20, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_u8read+0x88>
     f5a:	55 95       	asr	r21
     f5c:	47 95       	ror	r20
     f5e:	8a 95       	dec	r24
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_u8read+0x84>
     f62:	ca 01       	movw	r24, r20
     f64:	89 83       	std	Y+1, r24	; 0x01
     f66:	59 c0       	rjmp	.+178    	; 0x101a <DIO_u8read+0x144>
		break;
		
	case 'B' :
	x=((PINB&(1<<pinnumber))>>pinnumber) ;
     f68:	e6 e3       	ldi	r30, 0x36	; 54
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <DIO_u8read+0xac>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	2a 95       	dec	r18
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <DIO_u8read+0xa8>
     f86:	9a 01       	movw	r18, r20
     f88:	28 23       	and	r18, r24
     f8a:	39 23       	and	r19, r25
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	a9 01       	movw	r20, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_u8read+0xc4>
     f96:	55 95       	asr	r21
     f98:	47 95       	ror	r20
     f9a:	8a 95       	dec	r24
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_u8read+0xc0>
     f9e:	ca 01       	movw	r24, r20
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	3b c0       	rjmp	.+118    	; 0x101a <DIO_u8read+0x144>
	break;
	
	case 'C' :
	x=((PINC&(1<<pinnumber))>>pinnumber) ;
     fa4:	e3 e3       	ldi	r30, 0x33	; 51
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_u8read+0xe8>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	2a 95       	dec	r18
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_u8read+0xe4>
     fc2:	9a 01       	movw	r18, r20
     fc4:	28 23       	and	r18, r24
     fc6:	39 23       	and	r19, r25
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a9 01       	movw	r20, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_u8read+0x100>
     fd2:	55 95       	asr	r21
     fd4:	47 95       	ror	r20
     fd6:	8a 95       	dec	r24
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_u8read+0xfc>
     fda:	ca 01       	movw	r24, r20
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	1d c0       	rjmp	.+58     	; 0x101a <DIO_u8read+0x144>
	break;
	
	case 'D' :
	x=((PIND&(1<<pinnumber))>>pinnumber) ;
     fe0:	e0 e3       	ldi	r30, 0x30	; 48
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_u8read+0x124>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	2a 95       	dec	r18
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_u8read+0x120>
     ffe:	9a 01       	movw	r18, r20
    1000:	28 23       	and	r18, r24
    1002:	39 23       	and	r19, r25
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	88 2f       	mov	r24, r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a9 01       	movw	r20, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_u8read+0x13c>
    100e:	55 95       	asr	r21
    1010:	47 95       	ror	r20
    1012:	8a 95       	dec	r24
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_u8read+0x138>
    1016:	ca 01       	movw	r24, r20
    1018:	89 83       	std	Y+1, r24	; 0x01
	break;
	default: break;
}
return x ;
    101a:	89 81       	ldd	r24, Y+1	; 0x01
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <DIO_toggle>:
void DIO_toggle(char portname,char pinnumber)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	00 d0       	rcall	.+0      	; 0x1032 <DIO_toggle+0x6>
    1032:	00 d0       	rcall	.+0      	; 0x1034 <DIO_toggle+0x8>
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	89 83       	std	Y+1, r24	; 0x01
    103a:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	3c 83       	std	Y+4, r19	; 0x04
    1044:	2b 83       	std	Y+3, r18	; 0x03
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	82 34       	cpi	r24, 0x42	; 66
    104c:	91 05       	cpc	r25, r1
    104e:	51 f1       	breq	.+84     	; 0x10a4 <DIO_toggle+0x78>
    1050:	2b 81       	ldd	r18, Y+3	; 0x03
    1052:	3c 81       	ldd	r19, Y+4	; 0x04
    1054:	23 34       	cpi	r18, 0x43	; 67
    1056:	31 05       	cpc	r19, r1
    1058:	34 f4       	brge	.+12     	; 0x1066 <DIO_toggle+0x3a>
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	9c 81       	ldd	r25, Y+4	; 0x04
    105e:	81 34       	cpi	r24, 0x41	; 65
    1060:	91 05       	cpc	r25, r1
    1062:	61 f0       	breq	.+24     	; 0x107c <DIO_toggle+0x50>
    1064:	5a c0       	rjmp	.+180    	; 0x111a <DIO_toggle+0xee>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	23 34       	cpi	r18, 0x43	; 67
    106c:	31 05       	cpc	r19, r1
    106e:	71 f1       	breq	.+92     	; 0x10cc <DIO_toggle+0xa0>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	84 34       	cpi	r24, 0x44	; 68
    1076:	91 05       	cpc	r25, r1
    1078:	e9 f1       	breq	.+122    	; 0x10f4 <DIO_toggle+0xc8>
    107a:	4f c0       	rjmp	.+158    	; 0x111a <DIO_toggle+0xee>
	{
		case 'A':
		PORTA^=(1<<pinnumber);
    107c:	ab e3       	ldi	r26, 0x3B	; 59
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	eb e3       	ldi	r30, 0x3B	; 59
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_toggle+0x6e>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_toggle+0x6a>
    109e:	84 27       	eor	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	3b c0       	rjmp	.+118    	; 0x111a <DIO_toggle+0xee>
		break;
		case 'B':
		PORTB^=(1<<pinnumber);
    10a4:	a8 e3       	ldi	r26, 0x38	; 56
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e8 e3       	ldi	r30, 0x38	; 56
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_toggle+0x96>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_toggle+0x92>
    10c6:	84 27       	eor	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	27 c0       	rjmp	.+78     	; 0x111a <DIO_toggle+0xee>
		break;
		case 'C':
		PORTC^=(1<<pinnumber);
    10cc:	a5 e3       	ldi	r26, 0x35	; 53
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e5 e3       	ldi	r30, 0x35	; 53
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_toggle+0xbe>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_toggle+0xba>
    10ee:	84 27       	eor	r24, r20
    10f0:	8c 93       	st	X, r24
    10f2:	13 c0       	rjmp	.+38     	; 0x111a <DIO_toggle+0xee>
		break;
		case 'D':
		PORTD^=(1<<pinnumber);
    10f4:	a2 e3       	ldi	r26, 0x32	; 50
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e2 e3       	ldi	r30, 0x32	; 50
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_toggle+0xe6>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_toggle+0xe2>
    1116:	84 27       	eor	r24, r20
    1118:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <DIO_write_port>:
void DIO_write_port(char portname,char portvalue)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	00 d0       	rcall	.+0      	; 0x112e <DIO_write_port+0x6>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <DIO_write_port+0x8>
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	89 83       	std	Y+1, r24	; 0x01
    1136:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	3c 83       	std	Y+4, r19	; 0x04
    1140:	2b 83       	std	Y+3, r18	; 0x03
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	9c 81       	ldd	r25, Y+4	; 0x04
    1146:	82 34       	cpi	r24, 0x42	; 66
    1148:	91 05       	cpc	r25, r1
    114a:	d9 f0       	breq	.+54     	; 0x1182 <DIO_write_port+0x5a>
    114c:	2b 81       	ldd	r18, Y+3	; 0x03
    114e:	3c 81       	ldd	r19, Y+4	; 0x04
    1150:	23 34       	cpi	r18, 0x43	; 67
    1152:	31 05       	cpc	r19, r1
    1154:	34 f4       	brge	.+12     	; 0x1162 <DIO_write_port+0x3a>
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	81 34       	cpi	r24, 0x41	; 65
    115c:	91 05       	cpc	r25, r1
    115e:	61 f0       	breq	.+24     	; 0x1178 <DIO_write_port+0x50>
    1160:	1e c0       	rjmp	.+60     	; 0x119e <DIO_write_port+0x76>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	23 34       	cpi	r18, 0x43	; 67
    1168:	31 05       	cpc	r19, r1
    116a:	81 f0       	breq	.+32     	; 0x118c <DIO_write_port+0x64>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	84 34       	cpi	r24, 0x44	; 68
    1172:	91 05       	cpc	r25, r1
    1174:	81 f0       	breq	.+32     	; 0x1196 <DIO_write_port+0x6e>
    1176:	13 c0       	rjmp	.+38     	; 0x119e <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue;
    1178:	eb e3       	ldi	r30, 0x3B	; 59
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	80 83       	st	Z, r24
    1180:	0e c0       	rjmp	.+28     	; 0x119e <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue;
    1182:	e8 e3       	ldi	r30, 0x38	; 56
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	80 83       	st	Z, r24
    118a:	09 c0       	rjmp	.+18     	; 0x119e <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue;
    118c:	e5 e3       	ldi	r30, 0x35	; 53
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	80 83       	st	Z, r24
    1194:	04 c0       	rjmp	.+8      	; 0x119e <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue;
    1196:	e2 e3       	ldi	r30, 0x32	; 50
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	80 83       	st	Z, r24
		break ;
		default: break ;
	}
}
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <dio_write_highnibble>:
void dio_write_highnibble(char portname,char value)
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <dio_write_highnibble+0x6>
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <dio_write_highnibble+0x8>
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	6a 83       	std	Y+2, r22	; 0x02
		switch(portname)
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	3c 83       	std	Y+4, r19	; 0x04
    11c4:	2b 83       	std	Y+3, r18	; 0x03
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	82 34       	cpi	r24, 0x42	; 66
    11cc:	91 05       	cpc	r25, r1
    11ce:	09 f1       	breq	.+66     	; 0x1212 <dio_write_highnibble+0x66>
    11d0:	2b 81       	ldd	r18, Y+3	; 0x03
    11d2:	3c 81       	ldd	r19, Y+4	; 0x04
    11d4:	23 34       	cpi	r18, 0x43	; 67
    11d6:	31 05       	cpc	r19, r1
    11d8:	34 f4       	brge	.+12     	; 0x11e6 <dio_write_highnibble+0x3a>
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	81 34       	cpi	r24, 0x41	; 65
    11e0:	91 05       	cpc	r25, r1
    11e2:	61 f0       	breq	.+24     	; 0x11fc <dio_write_highnibble+0x50>
    11e4:	36 c0       	rjmp	.+108    	; 0x1252 <dio_write_highnibble+0xa6>
    11e6:	2b 81       	ldd	r18, Y+3	; 0x03
    11e8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ea:	23 34       	cpi	r18, 0x43	; 67
    11ec:	31 05       	cpc	r19, r1
    11ee:	e1 f0       	breq	.+56     	; 0x1228 <dio_write_highnibble+0x7c>
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	84 34       	cpi	r24, 0x44	; 68
    11f6:	91 05       	cpc	r25, r1
    11f8:	11 f1       	breq	.+68     	; 0x123e <dio_write_highnibble+0x92>
    11fa:	2b c0       	rjmp	.+86     	; 0x1252 <dio_write_highnibble+0xa6>
		{
			case 'A' :
			PORTA|=(value&0xf0);
    11fc:	ab e3       	ldi	r26, 0x3B	; 59
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	eb e3       	ldi	r30, 0x3B	; 59
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	98 2f       	mov	r25, r24
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	80 7f       	andi	r24, 0xF0	; 240
    120c:	89 2b       	or	r24, r25
    120e:	8c 93       	st	X, r24
    1210:	20 c0       	rjmp	.+64     	; 0x1252 <dio_write_highnibble+0xa6>
			break ;
			case 'B':
			PORTB|=(value&0xf0);
    1212:	a8 e3       	ldi	r26, 0x38	; 56
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e8 e3       	ldi	r30, 0x38	; 56
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	98 2f       	mov	r25, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	80 7f       	andi	r24, 0xF0	; 240
    1222:	89 2b       	or	r24, r25
    1224:	8c 93       	st	X, r24
    1226:	15 c0       	rjmp	.+42     	; 0x1252 <dio_write_highnibble+0xa6>
			break ;
			case 'C' :
			PORTC|=(value&0xf0);
    1228:	a5 e3       	ldi	r26, 0x35	; 53
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e5 e3       	ldi	r30, 0x35	; 53
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	98 2f       	mov	r25, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	80 7f       	andi	r24, 0xF0	; 240
    1238:	89 2b       	or	r24, r25
    123a:	8c 93       	st	X, r24
    123c:	0a c0       	rjmp	.+20     	; 0x1252 <dio_write_highnibble+0xa6>
			break ;
			case 'D':
			PORTD|=(value&0xf0);
    123e:	a2 e3       	ldi	r26, 0x32	; 50
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e2 e3       	ldi	r30, 0x32	; 50
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	98 2f       	mov	r25, r24
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	80 7f       	andi	r24, 0xF0	; 240
    124e:	89 2b       	or	r24, r25
    1250:	8c 93       	st	X, r24
			break ;
			default: break ;
	
}
}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <clear_high_nibble>:
void clear_high_nibble(char portname)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <clear_high_nibble+0x6>
    1266:	0f 92       	push	r0
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	3b 83       	std	Y+3, r19	; 0x03
    1276:	2a 83       	std	Y+2, r18	; 0x02
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	9b 81       	ldd	r25, Y+3	; 0x03
    127c:	82 34       	cpi	r24, 0x42	; 66
    127e:	91 05       	cpc	r25, r1
    1280:	f1 f0       	breq	.+60     	; 0x12be <clear_high_nibble+0x5e>
    1282:	2a 81       	ldd	r18, Y+2	; 0x02
    1284:	3b 81       	ldd	r19, Y+3	; 0x03
    1286:	23 34       	cpi	r18, 0x43	; 67
    1288:	31 05       	cpc	r19, r1
    128a:	34 f4       	brge	.+12     	; 0x1298 <clear_high_nibble+0x38>
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	9b 81       	ldd	r25, Y+3	; 0x03
    1290:	81 34       	cpi	r24, 0x41	; 65
    1292:	91 05       	cpc	r25, r1
    1294:	61 f0       	breq	.+24     	; 0x12ae <clear_high_nibble+0x4e>
    1296:	2a c0       	rjmp	.+84     	; 0x12ec <clear_high_nibble+0x8c>
    1298:	2a 81       	ldd	r18, Y+2	; 0x02
    129a:	3b 81       	ldd	r19, Y+3	; 0x03
    129c:	23 34       	cpi	r18, 0x43	; 67
    129e:	31 05       	cpc	r19, r1
    12a0:	b1 f0       	breq	.+44     	; 0x12ce <clear_high_nibble+0x6e>
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	9b 81       	ldd	r25, Y+3	; 0x03
    12a6:	84 34       	cpi	r24, 0x44	; 68
    12a8:	91 05       	cpc	r25, r1
    12aa:	c9 f0       	breq	.+50     	; 0x12de <clear_high_nibble+0x7e>
    12ac:	1f c0       	rjmp	.+62     	; 0x12ec <clear_high_nibble+0x8c>
	{
		case 'A' :
		PORTA&=0x0f;
    12ae:	ab e3       	ldi	r26, 0x3B	; 59
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	eb e3       	ldi	r30, 0x3B	; 59
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	8f 70       	andi	r24, 0x0F	; 15
    12ba:	8c 93       	st	X, r24
    12bc:	17 c0       	rjmp	.+46     	; 0x12ec <clear_high_nibble+0x8c>
		break ;
		case 'B':
		PORTB&=0x0f;
    12be:	a8 e3       	ldi	r26, 0x38	; 56
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e8 e3       	ldi	r30, 0x38	; 56
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	8f 70       	andi	r24, 0x0F	; 15
    12ca:	8c 93       	st	X, r24
    12cc:	0f c0       	rjmp	.+30     	; 0x12ec <clear_high_nibble+0x8c>
		break ;
		case 'C' :
		PORTC&=0x0f;
    12ce:	a5 e3       	ldi	r26, 0x35	; 53
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e5 e3       	ldi	r30, 0x35	; 53
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	8f 70       	andi	r24, 0x0F	; 15
    12da:	8c 93       	st	X, r24
    12dc:	07 c0       	rjmp	.+14     	; 0x12ec <clear_high_nibble+0x8c>
		break ;
		case 'D':
		PORTD&=0x0f;
    12de:	a2 e3       	ldi	r26, 0x32	; 50
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e2 e3       	ldi	r30, 0x32	; 50
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	8f 70       	andi	r24, 0x0F	; 15
    12ea:	8c 93       	st	X, r24
		break ;
		default: break ;
		
	}
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <xEventGroupCreate+0x6>
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
    1302:	8b e0       	ldi	r24, 0x0B	; 11
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0e 94 bc 0c 	call	0x1978	; 0x1978 <pvPortMalloc>
    130a:	9a 83       	std	Y+2, r25	; 0x02
    130c:	89 83       	std	Y+1, r24	; 0x01

		if( pxEventBits != NULL )
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	9a 81       	ldd	r25, Y+2	; 0x02
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	49 f0       	breq	.+18     	; 0x1328 <xEventGroupCreate+0x30>
		{
			pxEventBits->uxEventBits = 0;
    1316:	e9 81       	ldd	r30, Y+1	; 0x01
    1318:	fa 81       	ldd	r31, Y+2	; 0x02
    131a:	11 82       	std	Z+1, r1	; 0x01
    131c:	10 82       	st	Z, r1
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	02 96       	adiw	r24, 0x02	; 2
    1324:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	60 97       	sbiw	r28, 0x10	; 16
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	9a 87       	std	Y+10, r25	; 0x0a
    134c:	89 87       	std	Y+9, r24	; 0x09
    134e:	7c 87       	std	Y+12, r23	; 0x0c
    1350:	6b 87       	std	Y+11, r22	; 0x0b
    1352:	5e 87       	std	Y+14, r21	; 0x0e
    1354:	4d 87       	std	Y+13, r20	; 0x0d
    1356:	38 8b       	std	Y+16, r19	; 0x10
    1358:	2f 87       	std	Y+15, r18	; 0x0f
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    135a:	89 85       	ldd	r24, Y+9	; 0x09
    135c:	9a 85       	ldd	r25, Y+10	; 0x0a
    135e:	9c 83       	std	Y+4, r25	; 0x04
    1360:	8b 83       	std	Y+3, r24	; 0x03
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    1362:	19 82       	std	Y+1, r1	; 0x01
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    1364:	0e 94 7e 20 	call	0x40fc	; 0x40fc <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
    1368:	eb 81       	ldd	r30, Y+3	; 0x03
    136a:	fc 81       	ldd	r31, Y+4	; 0x04
    136c:	80 81       	ld	r24, Z
    136e:	91 81       	ldd	r25, Z+1	; 0x01
    1370:	98 87       	std	Y+8, r25	; 0x08
    1372:	8f 83       	std	Y+7, r24	; 0x07

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
    1374:	89 85       	ldd	r24, Y+9	; 0x09
    1376:	9a 85       	ldd	r25, Y+10	; 0x0a
    1378:	2b 85       	ldd	r18, Y+11	; 0x0b
    137a:	3c 85       	ldd	r19, Y+12	; 0x0c
    137c:	b9 01       	movw	r22, r18
    137e:	0e 94 6d 0b 	call	0x16da	; 0x16da <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1382:	2f 81       	ldd	r18, Y+7	; 0x07
    1384:	38 85       	ldd	r19, Y+8	; 0x08
    1386:	8b 85       	ldd	r24, Y+11	; 0x0b
    1388:	9c 85       	ldd	r25, Y+12	; 0x0c
    138a:	28 2b       	or	r18, r24
    138c:	39 2b       	or	r19, r25
    138e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1390:	9e 85       	ldd	r25, Y+14	; 0x0e
    1392:	28 23       	and	r18, r24
    1394:	39 23       	and	r19, r25
    1396:	8d 85       	ldd	r24, Y+13	; 0x0d
    1398:	9e 85       	ldd	r25, Y+14	; 0x0e
    139a:	28 17       	cp	r18, r24
    139c:	39 07       	cpc	r19, r25
    139e:	c9 f4       	brne	.+50     	; 0x13d2 <xEventGroupSync+0x9c>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
    13a0:	2f 81       	ldd	r18, Y+7	; 0x07
    13a2:	38 85       	ldd	r19, Y+8	; 0x08
    13a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    13a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    13a8:	82 2b       	or	r24, r18
    13aa:	93 2b       	or	r25, r19
    13ac:	9e 83       	std	Y+6, r25	; 0x06
    13ae:	8d 83       	std	Y+5, r24	; 0x05

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    13b0:	eb 81       	ldd	r30, Y+3	; 0x03
    13b2:	fc 81       	ldd	r31, Y+4	; 0x04
    13b4:	20 81       	ld	r18, Z
    13b6:	31 81       	ldd	r19, Z+1	; 0x01
    13b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    13bc:	80 95       	com	r24
    13be:	90 95       	com	r25
    13c0:	82 23       	and	r24, r18
    13c2:	93 23       	and	r25, r19
    13c4:	eb 81       	ldd	r30, Y+3	; 0x03
    13c6:	fc 81       	ldd	r31, Y+4	; 0x04
    13c8:	91 83       	std	Z+1, r25	; 0x01
    13ca:	80 83       	st	Z, r24

			xTicksToWait = 0;
    13cc:	18 8a       	std	Y+16, r1	; 0x10
    13ce:	1f 86       	std	Y+15, r1	; 0x0f
    13d0:	1c c0       	rjmp	.+56     	; 0x140a <xEventGroupSync+0xd4>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
    13d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d4:	98 89       	ldd	r25, Y+16	; 0x10
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	91 f0       	breq	.+36     	; 0x13fe <xEventGroupSync+0xc8>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	bc 01       	movw	r22, r24
    13e0:	6e 5f       	subi	r22, 0xFE	; 254
    13e2:	7f 4f       	sbci	r23, 0xFF	; 255
    13e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e8:	9c 01       	movw	r18, r24
    13ea:	35 60       	ori	r19, 0x05	; 5
    13ec:	4f 85       	ldd	r20, Y+15	; 0x0f
    13ee:	58 89       	ldd	r21, Y+16	; 0x10
    13f0:	cb 01       	movw	r24, r22
    13f2:	b9 01       	movw	r22, r18
    13f4:	0e 94 d5 22 	call	0x45aa	; 0x45aa <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
    13f8:	1e 82       	std	Y+6, r1	; 0x06
    13fa:	1d 82       	std	Y+5, r1	; 0x05
    13fc:	06 c0       	rjmp	.+12     	; 0x140a <xEventGroupSync+0xd4>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    13fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1400:	fc 81       	ldd	r31, Y+4	; 0x04
    1402:	80 81       	ld	r24, Z
    1404:	91 81       	ldd	r25, Z+1	; 0x01
    1406:	9e 83       	std	Y+6, r25	; 0x06
    1408:	8d 83       	std	Y+5, r24	; 0x05
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    140a:	0e 94 8a 20 	call	0x4114	; 0x4114 <xTaskResumeAll>
    140e:	8a 83       	std	Y+2, r24	; 0x02

	if( xTicksToWait != ( TickType_t ) 0 )
    1410:	8f 85       	ldd	r24, Y+15	; 0x0f
    1412:	98 89       	ldd	r25, Y+16	; 0x10
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	09 f4       	brne	.+2      	; 0x141a <xEventGroupSync+0xe4>
    1418:	3a c0       	rjmp	.+116    	; 0x148e <xEventGroupSync+0x158>
	{
		if( xAlreadyYielded == pdFALSE )
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	88 23       	and	r24, r24
    141e:	11 f4       	brne	.+4      	; 0x1424 <xEventGroupSync+0xee>
		{
			portYIELD_WITHIN_API();
    1420:	0e 94 4d 11 	call	0x229a	; 0x229a <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    1424:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <uxTaskResetEventItemValue>
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 83       	std	Y+5, r24	; 0x05

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	9e 81       	ldd	r25, Y+6	; 0x06
    1430:	80 70       	andi	r24, 0x00	; 0
    1432:	92 70       	andi	r25, 0x02	; 2
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	31 f5       	brne	.+76     	; 0x1484 <xEventGroupSync+0x14e>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	0f 92       	push	r0
			{
				uxReturn = pxEventBits->uxEventBits;
    143e:	eb 81       	ldd	r30, Y+3	; 0x03
    1440:	fc 81       	ldd	r31, Y+4	; 0x04
    1442:	80 81       	ld	r24, Z
    1444:	91 81       	ldd	r25, Z+1	; 0x01
    1446:	9e 83       	std	Y+6, r25	; 0x06
    1448:	8d 83       	std	Y+5, r24	; 0x05

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
    144a:	2d 81       	ldd	r18, Y+5	; 0x05
    144c:	3e 81       	ldd	r19, Y+6	; 0x06
    144e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1450:	9e 85       	ldd	r25, Y+14	; 0x0e
    1452:	28 23       	and	r18, r24
    1454:	39 23       	and	r19, r25
    1456:	8d 85       	ldd	r24, Y+13	; 0x0d
    1458:	9e 85       	ldd	r25, Y+14	; 0x0e
    145a:	28 17       	cp	r18, r24
    145c:	39 07       	cpc	r19, r25
    145e:	71 f4       	brne	.+28     	; 0x147c <xEventGroupSync+0x146>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    1460:	eb 81       	ldd	r30, Y+3	; 0x03
    1462:	fc 81       	ldd	r31, Y+4	; 0x04
    1464:	20 81       	ld	r18, Z
    1466:	31 81       	ldd	r19, Z+1	; 0x01
    1468:	8d 85       	ldd	r24, Y+13	; 0x0d
    146a:	9e 85       	ldd	r25, Y+14	; 0x0e
    146c:	80 95       	com	r24
    146e:	90 95       	com	r25
    1470:	82 23       	and	r24, r18
    1472:	93 23       	and	r25, r19
    1474:	eb 81       	ldd	r30, Y+3	; 0x03
    1476:	fc 81       	ldd	r31, Y+4	; 0x04
    1478:	91 83       	std	Z+1, r25	; 0x01
    147a:	80 83       	st	Z, r24
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    147c:	0f 90       	pop	r0
    147e:	0f be       	out	0x3f, r0	; 63

			xTimeoutOccurred = pdTRUE;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	89 83       	std	Y+1, r24	; 0x01
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	90 70       	andi	r25, 0x00	; 0
    148a:	9e 83       	std	Y+6, r25	; 0x06
    148c:	8d 83       	std	Y+5, r24	; 0x05
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
}
    1492:	60 96       	adiw	r28, 0x10	; 16
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	63 97       	sbiw	r28, 0x13	; 19
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	9d 87       	std	Y+13, r25	; 0x0d
    14be:	8c 87       	std	Y+12, r24	; 0x0c
    14c0:	7f 87       	std	Y+15, r23	; 0x0f
    14c2:	6e 87       	std	Y+14, r22	; 0x0e
    14c4:	48 8b       	std	Y+16, r20	; 0x10
    14c6:	29 8b       	std	Y+17, r18	; 0x11
    14c8:	1b 8b       	std	Y+19, r17	; 0x13
    14ca:	0a 8b       	std	Y+18, r16	; 0x12
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    14cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    14ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    14d0:	9b 87       	std	Y+11, r25	; 0x0b
    14d2:	8a 87       	std	Y+10, r24	; 0x0a
EventBits_t uxReturn, uxControlBits = 0;
    14d4:	1f 82       	std	Y+7, r1	; 0x07
    14d6:	1e 82       	std	Y+6, r1	; 0x06
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    14d8:	1b 82       	std	Y+3, r1	; 0x03
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
	}
	#endif

	vTaskSuspendAll();
    14da:	0e 94 7e 20 	call	0x40fc	; 0x40fc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    14de:	ea 85       	ldd	r30, Y+10	; 0x0a
    14e0:	fb 85       	ldd	r31, Y+11	; 0x0b
    14e2:	80 81       	ld	r24, Z
    14e4:	91 81       	ldd	r25, Z+1	; 0x01
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	89 83       	std	Y+1, r24	; 0x01

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	2e 85       	ldd	r18, Y+14	; 0x0e
    14f0:	3f 85       	ldd	r19, Y+15	; 0x0f
    14f2:	b9 01       	movw	r22, r18
    14f4:	49 89       	ldd	r20, Y+17	; 0x11
    14f6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <prvTestWaitCondition>
    14fa:	8d 83       	std	Y+5, r24	; 0x05

		if( xWaitConditionMet != pdFALSE )
    14fc:	8d 81       	ldd	r24, Y+5	; 0x05
    14fe:	88 23       	and	r24, r24
    1500:	c1 f0       	breq	.+48     	; 0x1532 <xEventGroupWaitBits+0x8e>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	9a 81       	ldd	r25, Y+2	; 0x02
    1506:	99 87       	std	Y+9, r25	; 0x09
    1508:	88 87       	std	Y+8, r24	; 0x08
			xTicksToWait = ( TickType_t ) 0;
    150a:	1b 8a       	std	Y+19, r1	; 0x13
    150c:	1a 8a       	std	Y+18, r1	; 0x12

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
    150e:	88 89       	ldd	r24, Y+16	; 0x10
    1510:	88 23       	and	r24, r24
    1512:	d9 f1       	breq	.+118    	; 0x158a <xEventGroupWaitBits+0xe6>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    1514:	ea 85       	ldd	r30, Y+10	; 0x0a
    1516:	fb 85       	ldd	r31, Y+11	; 0x0b
    1518:	20 81       	ld	r18, Z
    151a:	31 81       	ldd	r19, Z+1	; 0x01
    151c:	8e 85       	ldd	r24, Y+14	; 0x0e
    151e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1520:	80 95       	com	r24
    1522:	90 95       	com	r25
    1524:	82 23       	and	r24, r18
    1526:	93 23       	and	r25, r19
    1528:	ea 85       	ldd	r30, Y+10	; 0x0a
    152a:	fb 85       	ldd	r31, Y+11	; 0x0b
    152c:	91 83       	std	Z+1, r25	; 0x01
    152e:	80 83       	st	Z, r24
    1530:	2c c0       	rjmp	.+88     	; 0x158a <xEventGroupWaitBits+0xe6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
    1532:	8a 89       	ldd	r24, Y+18	; 0x12
    1534:	9b 89       	ldd	r25, Y+19	; 0x13
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	29 f4       	brne	.+10     	; 0x1544 <xEventGroupWaitBits+0xa0>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	99 87       	std	Y+9, r25	; 0x09
    1540:	88 87       	std	Y+8, r24	; 0x08
    1542:	23 c0       	rjmp	.+70     	; 0x158a <xEventGroupWaitBits+0xe6>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
    1544:	88 89       	ldd	r24, Y+16	; 0x10
    1546:	88 23       	and	r24, r24
    1548:	29 f0       	breq	.+10     	; 0x1554 <xEventGroupWaitBits+0xb0>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
    154a:	8e 81       	ldd	r24, Y+6	; 0x06
    154c:	9f 81       	ldd	r25, Y+7	; 0x07
    154e:	91 60       	ori	r25, 0x01	; 1
    1550:	9f 83       	std	Y+7, r25	; 0x07
    1552:	8e 83       	std	Y+6, r24	; 0x06
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
    1554:	89 89       	ldd	r24, Y+17	; 0x11
    1556:	88 23       	and	r24, r24
    1558:	29 f0       	breq	.+10     	; 0x1564 <xEventGroupWaitBits+0xc0>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
    155a:	8e 81       	ldd	r24, Y+6	; 0x06
    155c:	9f 81       	ldd	r25, Y+7	; 0x07
    155e:	94 60       	ori	r25, 0x04	; 4
    1560:	9f 83       	std	Y+7, r25	; 0x07
    1562:	8e 83       	std	Y+6, r24	; 0x06
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
    1564:	8a 85       	ldd	r24, Y+10	; 0x0a
    1566:	9b 85       	ldd	r25, Y+11	; 0x0b
    1568:	bc 01       	movw	r22, r24
    156a:	6e 5f       	subi	r22, 0xFE	; 254
    156c:	7f 4f       	sbci	r23, 0xFF	; 255
    156e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1570:	3f 85       	ldd	r19, Y+15	; 0x0f
    1572:	8e 81       	ldd	r24, Y+6	; 0x06
    1574:	9f 81       	ldd	r25, Y+7	; 0x07
    1576:	28 2b       	or	r18, r24
    1578:	39 2b       	or	r19, r25
    157a:	4a 89       	ldd	r20, Y+18	; 0x12
    157c:	5b 89       	ldd	r21, Y+19	; 0x13
    157e:	cb 01       	movw	r24, r22
    1580:	b9 01       	movw	r22, r18
    1582:	0e 94 d5 22 	call	0x45aa	; 0x45aa <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
    1586:	19 86       	std	Y+9, r1	; 0x09
    1588:	18 86       	std	Y+8, r1	; 0x08

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    158a:	0e 94 8a 20 	call	0x4114	; 0x4114 <xTaskResumeAll>
    158e:	8c 83       	std	Y+4, r24	; 0x04

	if( xTicksToWait != ( TickType_t ) 0 )
    1590:	8a 89       	ldd	r24, Y+18	; 0x12
    1592:	9b 89       	ldd	r25, Y+19	; 0x13
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	09 f4       	brne	.+2      	; 0x159a <xEventGroupWaitBits+0xf6>
    1598:	3b c0       	rjmp	.+118    	; 0x1610 <xEventGroupWaitBits+0x16c>
	{
		if( xAlreadyYielded == pdFALSE )
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	88 23       	and	r24, r24
    159e:	11 f4       	brne	.+4      	; 0x15a4 <xEventGroupWaitBits+0x100>
		{
			portYIELD_WITHIN_API();
    15a0:	0e 94 4d 11 	call	0x229a	; 0x229a <vPortYield>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    15a4:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <uxTaskResetEventItemValue>
    15a8:	99 87       	std	Y+9, r25	; 0x09
    15aa:	88 87       	std	Y+8, r24	; 0x08

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    15ac:	88 85       	ldd	r24, Y+8	; 0x08
    15ae:	99 85       	ldd	r25, Y+9	; 0x09
    15b0:	80 70       	andi	r24, 0x00	; 0
    15b2:	92 70       	andi	r25, 0x02	; 2
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	39 f5       	brne	.+78     	; 0x1606 <xEventGroupWaitBits+0x162>
		{
			taskENTER_CRITICAL();
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	0f 92       	push	r0
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    15be:	ea 85       	ldd	r30, Y+10	; 0x0a
    15c0:	fb 85       	ldd	r31, Y+11	; 0x0b
    15c2:	80 81       	ld	r24, Z
    15c4:	91 81       	ldd	r25, Z+1	; 0x01
    15c6:	99 87       	std	Y+9, r25	; 0x09
    15c8:	88 87       	std	Y+8, r24	; 0x08

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
    15ca:	88 85       	ldd	r24, Y+8	; 0x08
    15cc:	99 85       	ldd	r25, Y+9	; 0x09
    15ce:	2e 85       	ldd	r18, Y+14	; 0x0e
    15d0:	3f 85       	ldd	r19, Y+15	; 0x0f
    15d2:	b9 01       	movw	r22, r18
    15d4:	49 89       	ldd	r20, Y+17	; 0x11
    15d6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <prvTestWaitCondition>
    15da:	88 23       	and	r24, r24
    15dc:	89 f0       	breq	.+34     	; 0x1600 <xEventGroupWaitBits+0x15c>
				{
					if( xClearOnExit != pdFALSE )
    15de:	88 89       	ldd	r24, Y+16	; 0x10
    15e0:	88 23       	and	r24, r24
    15e2:	71 f0       	breq	.+28     	; 0x1600 <xEventGroupWaitBits+0x15c>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    15e4:	ea 85       	ldd	r30, Y+10	; 0x0a
    15e6:	fb 85       	ldd	r31, Y+11	; 0x0b
    15e8:	20 81       	ld	r18, Z
    15ea:	31 81       	ldd	r19, Z+1	; 0x01
    15ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    15ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    15f0:	80 95       	com	r24
    15f2:	90 95       	com	r25
    15f4:	82 23       	and	r24, r18
    15f6:	93 23       	and	r25, r19
    15f8:	ea 85       	ldd	r30, Y+10	; 0x0a
    15fa:	fb 85       	ldd	r31, Y+11	; 0x0b
    15fc:	91 83       	std	Z+1, r25	; 0x01
    15fe:	80 83       	st	Z, r24
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    1600:	0f 90       	pop	r0
    1602:	0f be       	out	0x3f, r0	; 63

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
    1604:	1b 82       	std	Y+3, r1	; 0x03
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    1606:	88 85       	ldd	r24, Y+8	; 0x08
    1608:	99 85       	ldd	r25, Y+9	; 0x09
    160a:	90 70       	andi	r25, 0x00	; 0
    160c:	99 87       	std	Y+9, r25	; 0x09
    160e:	88 87       	std	Y+8, r24	; 0x08
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
    1610:	88 85       	ldd	r24, Y+8	; 0x08
    1612:	99 85       	ldd	r25, Y+9	; 0x09
}
    1614:	63 96       	adiw	r28, 0x13	; 19
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	08 95       	ret

0000162a <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	28 97       	sbiw	r28, 0x08	; 8
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	9e 83       	std	Y+6, r25	; 0x06
    1640:	8d 83       	std	Y+5, r24	; 0x05
    1642:	78 87       	std	Y+8, r23	; 0x08
    1644:	6f 83       	std	Y+7, r22	; 0x07
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    1646:	8d 81       	ldd	r24, Y+5	; 0x05
    1648:	9e 81       	ldd	r25, Y+6	; 0x06
    164a:	9c 83       	std	Y+4, r25	; 0x04
    164c:	8b 83       	std	Y+3, r24	; 0x03
	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	taskENTER_CRITICAL();
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	0f 92       	push	r0
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
    1654:	eb 81       	ldd	r30, Y+3	; 0x03
    1656:	fc 81       	ldd	r31, Y+4	; 0x04
    1658:	80 81       	ld	r24, Z
    165a:	91 81       	ldd	r25, Z+1	; 0x01
    165c:	9a 83       	std	Y+2, r25	; 0x02
    165e:	89 83       	std	Y+1, r24	; 0x01

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    1660:	eb 81       	ldd	r30, Y+3	; 0x03
    1662:	fc 81       	ldd	r31, Y+4	; 0x04
    1664:	20 81       	ld	r18, Z
    1666:	31 81       	ldd	r19, Z+1	; 0x01
    1668:	8f 81       	ldd	r24, Y+7	; 0x07
    166a:	98 85       	ldd	r25, Y+8	; 0x08
    166c:	80 95       	com	r24
    166e:	90 95       	com	r25
    1670:	82 23       	and	r24, r18
    1672:	93 23       	and	r25, r19
    1674:	eb 81       	ldd	r30, Y+3	; 0x03
    1676:	fc 81       	ldd	r31, Y+4	; 0x04
    1678:	91 83       	std	Z+1, r25	; 0x01
    167a:	80 83       	st	Z, r24
	}
	taskEXIT_CRITICAL();
    167c:	0f 90       	pop	r0
    167e:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1684:	28 96       	adiw	r28, 0x08	; 8
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	27 97       	sbiw	r28, 0x07	; 7
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	9f 83       	std	Y+7, r25	; 0x07
    16ac:	8e 83       	std	Y+6, r24	; 0x06
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    16ae:	8e 81       	ldd	r24, Y+6	; 0x06
    16b0:	9f 81       	ldd	r25, Y+7	; 0x07
    16b2:	9c 83       	std	Y+4, r25	; 0x04
    16b4:	8b 83       	std	Y+3, r24	; 0x03
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    16b6:	1d 82       	std	Y+5, r1	; 0x05
	{
		uxReturn = pxEventBits->uxEventBits;
    16b8:	eb 81       	ldd	r30, Y+3	; 0x03
    16ba:	fc 81       	ldd	r31, Y+4	; 0x04
    16bc:	80 81       	ld	r24, Z
    16be:	91 81       	ldd	r25, Z+1	; 0x01
    16c0:	9a 83       	std	Y+2, r25	; 0x02
    16c2:	89 83       	std	Y+1, r24	; 0x01
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    16c8:	27 96       	adiw	r28, 0x07	; 7
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    16e2:	65 97       	sbiw	r28, 0x15	; 21
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	f8 94       	cli
    16e8:	de bf       	out	0x3e, r29	; 62
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	cd bf       	out	0x3d, r28	; 61
    16ee:	9b 8b       	std	Y+19, r25	; 0x13
    16f0:	8a 8b       	std	Y+18, r24	; 0x12
    16f2:	7d 8b       	std	Y+21, r23	; 0x15
    16f4:	6c 8b       	std	Y+20, r22	; 0x14
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    16f6:	19 86       	std	Y+9, r1	; 0x09
    16f8:	18 86       	std	Y+8, r1	; 0x08
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    16fa:	8a 89       	ldd	r24, Y+18	; 0x12
    16fc:	9b 89       	ldd	r25, Y+19	; 0x13
    16fe:	9b 83       	std	Y+3, r25	; 0x03
    1700:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xMatchFound = pdFALSE;
    1702:	19 82       	std	Y+1, r1	; 0x01
	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

	pxList = &( pxEventBits->xTasksWaitingForBits );
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	9b 81       	ldd	r25, Y+3	; 0x03
    1708:	02 96       	adiw	r24, 0x02	; 2
    170a:	9b 87       	std	Y+11, r25	; 0x0b
    170c:	8a 87       	std	Y+10, r24	; 0x0a
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    170e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1710:	9b 85       	ldd	r25, Y+11	; 0x0b
    1712:	03 96       	adiw	r24, 0x03	; 3
    1714:	9d 87       	std	Y+13, r25	; 0x0d
    1716:	8c 87       	std	Y+12, r24	; 0x0c
	vTaskSuspendAll();
    1718:	0e 94 7e 20 	call	0x40fc	; 0x40fc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
    171c:	ea 85       	ldd	r30, Y+10	; 0x0a
    171e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1720:	85 81       	ldd	r24, Z+5	; 0x05
    1722:	96 81       	ldd	r25, Z+6	; 0x06
    1724:	99 8b       	std	Y+17, r25	; 0x11
    1726:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
    1728:	ea 81       	ldd	r30, Y+2	; 0x02
    172a:	fb 81       	ldd	r31, Y+3	; 0x03
    172c:	20 81       	ld	r18, Z
    172e:	31 81       	ldd	r19, Z+1	; 0x01
    1730:	8c 89       	ldd	r24, Y+20	; 0x14
    1732:	9d 89       	ldd	r25, Y+21	; 0x15
    1734:	82 2b       	or	r24, r18
    1736:	93 2b       	or	r25, r19
    1738:	ea 81       	ldd	r30, Y+2	; 0x02
    173a:	fb 81       	ldd	r31, Y+3	; 0x03
    173c:	91 83       	std	Z+1, r25	; 0x01
    173e:	80 83       	st	Z, r24
    1740:	59 c0       	rjmp	.+178    	; 0x17f4 <xEventGroupSetBits+0x11a>

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
		{
			pxNext = listGET_NEXT( pxListItem );
    1742:	e8 89       	ldd	r30, Y+16	; 0x10
    1744:	f9 89       	ldd	r31, Y+17	; 0x11
    1746:	82 81       	ldd	r24, Z+2	; 0x02
    1748:	93 81       	ldd	r25, Z+3	; 0x03
    174a:	9f 87       	std	Y+15, r25	; 0x0f
    174c:	8e 87       	std	Y+14, r24	; 0x0e
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    174e:	e8 89       	ldd	r30, Y+16	; 0x10
    1750:	f9 89       	ldd	r31, Y+17	; 0x11
    1752:	80 81       	ld	r24, Z
    1754:	91 81       	ldd	r25, Z+1	; 0x01
    1756:	9f 83       	std	Y+7, r25	; 0x07
    1758:	8e 83       	std	Y+6, r24	; 0x06
			xMatchFound = pdFALSE;
    175a:	19 82       	std	Y+1, r1	; 0x01

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
    175c:	8e 81       	ldd	r24, Y+6	; 0x06
    175e:	9f 81       	ldd	r25, Y+7	; 0x07
    1760:	80 70       	andi	r24, 0x00	; 0
    1762:	9d 83       	std	Y+5, r25	; 0x05
    1764:	8c 83       	std	Y+4, r24	; 0x04
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    1766:	8e 81       	ldd	r24, Y+6	; 0x06
    1768:	9f 81       	ldd	r25, Y+7	; 0x07
    176a:	90 70       	andi	r25, 0x00	; 0
    176c:	9f 83       	std	Y+7, r25	; 0x07
    176e:	8e 83       	std	Y+6, r24	; 0x06

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    1770:	8c 81       	ldd	r24, Y+4	; 0x04
    1772:	9d 81       	ldd	r25, Y+5	; 0x05
    1774:	80 70       	andi	r24, 0x00	; 0
    1776:	94 70       	andi	r25, 0x04	; 4
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	69 f4       	brne	.+26     	; 0x1796 <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    177c:	ea 81       	ldd	r30, Y+2	; 0x02
    177e:	fb 81       	ldd	r31, Y+3	; 0x03
    1780:	20 81       	ld	r18, Z
    1782:	31 81       	ldd	r19, Z+1	; 0x01
    1784:	8e 81       	ldd	r24, Y+6	; 0x06
    1786:	9f 81       	ldd	r25, Y+7	; 0x07
    1788:	82 23       	and	r24, r18
    178a:	93 23       	and	r25, r19
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	91 f0       	breq	.+36     	; 0x17b4 <xEventGroupSetBits+0xda>
				{
					xMatchFound = pdTRUE;
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	0f c0       	rjmp	.+30     	; 0x17b4 <xEventGroupSetBits+0xda>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    1796:	ea 81       	ldd	r30, Y+2	; 0x02
    1798:	fb 81       	ldd	r31, Y+3	; 0x03
    179a:	20 81       	ld	r18, Z
    179c:	31 81       	ldd	r19, Z+1	; 0x01
    179e:	8e 81       	ldd	r24, Y+6	; 0x06
    17a0:	9f 81       	ldd	r25, Y+7	; 0x07
    17a2:	28 23       	and	r18, r24
    17a4:	39 23       	and	r19, r25
    17a6:	8e 81       	ldd	r24, Y+6	; 0x06
    17a8:	9f 81       	ldd	r25, Y+7	; 0x07
    17aa:	28 17       	cp	r18, r24
    17ac:	39 07       	cpc	r19, r25
    17ae:	11 f4       	brne	.+4      	; 0x17b4 <xEventGroupSetBits+0xda>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	88 23       	and	r24, r24
    17b8:	c9 f0       	breq	.+50     	; 0x17ec <xEventGroupSetBits+0x112>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    17ba:	8c 81       	ldd	r24, Y+4	; 0x04
    17bc:	9d 81       	ldd	r25, Y+5	; 0x05
    17be:	80 70       	andi	r24, 0x00	; 0
    17c0:	91 70       	andi	r25, 0x01	; 1
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	41 f0       	breq	.+16     	; 0x17d6 <xEventGroupSetBits+0xfc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
    17c6:	88 85       	ldd	r24, Y+8	; 0x08
    17c8:	99 85       	ldd	r25, Y+9	; 0x09
    17ca:	2e 81       	ldd	r18, Y+6	; 0x06
    17cc:	3f 81       	ldd	r19, Y+7	; 0x07
    17ce:	82 2b       	or	r24, r18
    17d0:	93 2b       	or	r25, r19
    17d2:	99 87       	std	Y+9, r25	; 0x09
    17d4:	88 87       	std	Y+8, r24	; 0x08
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    17d6:	ea 81       	ldd	r30, Y+2	; 0x02
    17d8:	fb 81       	ldd	r31, Y+3	; 0x03
    17da:	80 81       	ld	r24, Z
    17dc:	91 81       	ldd	r25, Z+1	; 0x01
    17de:	9c 01       	movw	r18, r24
    17e0:	32 60       	ori	r19, 0x02	; 2
    17e2:	88 89       	ldd	r24, Y+16	; 0x10
    17e4:	99 89       	ldd	r25, Y+17	; 0x11
    17e6:	b9 01       	movw	r22, r18
    17e8:	0e 94 70 23 	call	0x46e0	; 0x46e0 <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
    17ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    17ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    17f0:	99 8b       	std	Y+17, r25	; 0x11
    17f2:	88 8b       	std	Y+16, r24	; 0x10

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
    17f4:	28 89       	ldd	r18, Y+16	; 0x10
    17f6:	39 89       	ldd	r19, Y+17	; 0x11
    17f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    17fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    17fc:	28 17       	cp	r18, r24
    17fe:	39 07       	cpc	r19, r25
    1800:	09 f0       	breq	.+2      	; 0x1804 <xEventGroupSetBits+0x12a>
    1802:	9f cf       	rjmp	.-194    	; 0x1742 <xEventGroupSetBits+0x68>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    1804:	ea 81       	ldd	r30, Y+2	; 0x02
    1806:	fb 81       	ldd	r31, Y+3	; 0x03
    1808:	20 81       	ld	r18, Z
    180a:	31 81       	ldd	r19, Z+1	; 0x01
    180c:	88 85       	ldd	r24, Y+8	; 0x08
    180e:	99 85       	ldd	r25, Y+9	; 0x09
    1810:	80 95       	com	r24
    1812:	90 95       	com	r25
    1814:	82 23       	and	r24, r18
    1816:	93 23       	and	r25, r19
    1818:	ea 81       	ldd	r30, Y+2	; 0x02
    181a:	fb 81       	ldd	r31, Y+3	; 0x03
    181c:	91 83       	std	Z+1, r25	; 0x01
    181e:	80 83       	st	Z, r24
	}
	( void ) xTaskResumeAll();
    1820:	0e 94 8a 20 	call	0x4114	; 0x4114 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
    1824:	ea 81       	ldd	r30, Y+2	; 0x02
    1826:	fb 81       	ldd	r31, Y+3	; 0x03
    1828:	80 81       	ld	r24, Z
    182a:	91 81       	ldd	r25, Z+1	; 0x01
}
    182c:	65 96       	adiw	r28, 0x15	; 21
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	08 95       	ret

0000183e <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	00 d0       	rcall	.+0      	; 0x1844 <vEventGroupDelete+0x6>
    1844:	00 d0       	rcall	.+0      	; 0x1846 <vEventGroupDelete+0x8>
    1846:	00 d0       	rcall	.+0      	; 0x1848 <vEventGroupDelete+0xa>
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	9e 83       	std	Y+6, r25	; 0x06
    184e:	8d 83       	std	Y+5, r24	; 0x05
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    1850:	8d 81       	ldd	r24, Y+5	; 0x05
    1852:	9e 81       	ldd	r25, Y+6	; 0x06
    1854:	9c 83       	std	Y+4, r25	; 0x04
    1856:	8b 83       	std	Y+3, r24	; 0x03
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	9c 81       	ldd	r25, Y+4	; 0x04
    185c:	02 96       	adiw	r24, 0x02	; 2
    185e:	9a 83       	std	Y+2, r25	; 0x02
    1860:	89 83       	std	Y+1, r24	; 0x01

	vTaskSuspendAll();
    1862:	0e 94 7e 20 	call	0x40fc	; 0x40fc <vTaskSuspendAll>
    1866:	08 c0       	rjmp	.+16     	; 0x1878 <vEventGroupDelete+0x3a>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
    1868:	e9 81       	ldd	r30, Y+1	; 0x01
    186a:	fa 81       	ldd	r31, Y+2	; 0x02
    186c:	85 81       	ldd	r24, Z+5	; 0x05
    186e:	96 81       	ldd	r25, Z+6	; 0x06
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	72 e0       	ldi	r23, 0x02	; 2
    1874:	0e 94 70 23 	call	0x46e0	; 0x46e0 <xTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    1878:	e9 81       	ldd	r30, Y+1	; 0x01
    187a:	fa 81       	ldd	r31, Y+2	; 0x02
    187c:	80 81       	ld	r24, Z
    187e:	88 23       	and	r24, r24
    1880:	99 f7       	brne	.-26     	; 0x1868 <vEventGroupDelete+0x2a>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	9c 81       	ldd	r25, Y+4	; 0x04
    1886:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
    188a:	0e 94 8a 20 	call	0x4114	; 0x4114 <xTaskResumeAll>
}
    188e:	26 96       	adiw	r28, 0x06	; 6
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <vEventGroupSetBitsCallback+0x6>
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <vEventGroupSetBitsCallback+0x8>
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <vEventGroupSetBitsCallback+0xa>
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	9a 83       	std	Y+2, r25	; 0x02
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	4b 83       	std	Y+3, r20	; 0x03
    18b4:	5c 83       	std	Y+4, r21	; 0x04
    18b6:	6d 83       	std	Y+5, r22	; 0x05
    18b8:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
    18ba:	2b 81       	ldd	r18, Y+3	; 0x03
    18bc:	3c 81       	ldd	r19, Y+4	; 0x04
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	9a 81       	ldd	r25, Y+2	; 0x02
    18c2:	b9 01       	movw	r22, r18
    18c4:	0e 94 6d 0b 	call	0x16da	; 0x16da <xEventGroupSetBits>
}
    18c8:	26 96       	adiw	r28, 0x06	; 6
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	f8 94       	cli
    18ce:	de bf       	out	0x3e, r29	; 62
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	cd bf       	out	0x3d, r28	; 61
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <vEventGroupClearBitsCallback+0x6>
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <vEventGroupClearBitsCallback+0x8>
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <vEventGroupClearBitsCallback+0xa>
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	9a 83       	std	Y+2, r25	; 0x02
    18ea:	89 83       	std	Y+1, r24	; 0x01
    18ec:	4b 83       	std	Y+3, r20	; 0x03
    18ee:	5c 83       	std	Y+4, r21	; 0x04
    18f0:	6d 83       	std	Y+5, r22	; 0x05
    18f2:	7e 83       	std	Y+6, r23	; 0x06
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
    18f4:	2b 81       	ldd	r18, Y+3	; 0x03
    18f6:	3c 81       	ldd	r19, Y+4	; 0x04
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	b9 01       	movw	r22, r18
    18fe:	0e 94 15 0b 	call	0x162a	; 0x162a <xEventGroupClearBits>
}
    1902:	26 96       	adiw	r28, 0x06	; 6
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	00 d0       	rcall	.+0      	; 0x191a <prvTestWaitCondition+0x6>
    191a:	00 d0       	rcall	.+0      	; 0x191c <prvTestWaitCondition+0x8>
    191c:	00 d0       	rcall	.+0      	; 0x191e <prvTestWaitCondition+0xa>
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	9b 83       	std	Y+3, r25	; 0x03
    1924:	8a 83       	std	Y+2, r24	; 0x02
    1926:	7d 83       	std	Y+5, r23	; 0x05
    1928:	6c 83       	std	Y+4, r22	; 0x04
    192a:	4e 83       	std	Y+6, r20	; 0x06
BaseType_t xWaitConditionMet = pdFALSE;
    192c:	19 82       	std	Y+1, r1	; 0x01

	if( xWaitForAllBits == pdFALSE )
    192e:	8e 81       	ldd	r24, Y+6	; 0x06
    1930:	88 23       	and	r24, r24
    1932:	59 f4       	brne	.+22     	; 0x194a <prvTestWaitCondition+0x36>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	9b 81       	ldd	r25, Y+3	; 0x03
    1938:	2c 81       	ldd	r18, Y+4	; 0x04
    193a:	3d 81       	ldd	r19, Y+5	; 0x05
    193c:	82 23       	and	r24, r18
    193e:	93 23       	and	r25, r19
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	81 f0       	breq	.+32     	; 0x1964 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	89 83       	std	Y+1, r24	; 0x01
    1948:	0d c0       	rjmp	.+26     	; 0x1964 <prvTestWaitCondition+0x50>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    194a:	2a 81       	ldd	r18, Y+2	; 0x02
    194c:	3b 81       	ldd	r19, Y+3	; 0x03
    194e:	8c 81       	ldd	r24, Y+4	; 0x04
    1950:	9d 81       	ldd	r25, Y+5	; 0x05
    1952:	28 23       	and	r18, r24
    1954:	39 23       	and	r19, r25
    1956:	8c 81       	ldd	r24, Y+4	; 0x04
    1958:	9d 81       	ldd	r25, Y+5	; 0x05
    195a:	28 17       	cp	r18, r24
    195c:	39 07       	cpc	r19, r25
    195e:	11 f4       	brne	.+4      	; 0x1964 <prvTestWaitCondition+0x50>
		{
			xWaitConditionMet = pdTRUE;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
    1964:	89 81       	ldd	r24, Y+1	; 0x01
}
    1966:	26 96       	adiw	r28, 0x06	; 6
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	2e 97       	sbiw	r28, 0x0e	; 14
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	9e 87       	std	Y+14, r25	; 0x0e
    198e:	8d 87       	std	Y+13, r24	; 0x0d
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    1990:	1e 82       	std	Y+6, r1	; 0x06
    1992:	1d 82       	std	Y+5, r1	; 0x05

	vTaskSuspendAll();
    1994:	0e 94 7e 20 	call	0x40fc	; 0x40fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    1998:	80 91 74 00 	lds	r24, 0x0074
    199c:	88 23       	and	r24, r24
    199e:	29 f4       	brne	.+10     	; 0x19aa <pvPortMalloc+0x32>
		{
			prvHeapInit();
    19a0:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	80 93 74 00 	sts	0x0074, r24
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    19aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	51 f0       	breq	.+20     	; 0x19c6 <pvPortMalloc+0x4e>
		{
			xWantedSize += heapSTRUCT_SIZE;
    19b2:	80 91 71 00 	lds	r24, 0x0071
    19b6:	90 91 72 00 	lds	r25, 0x0072
    19ba:	2d 85       	ldd	r18, Y+13	; 0x0d
    19bc:	3e 85       	ldd	r19, Y+14	; 0x0e
    19be:	82 0f       	add	r24, r18
    19c0:	93 1f       	adc	r25, r19
    19c2:	9e 87       	std	Y+14, r25	; 0x0e
    19c4:	8d 87       	std	Y+13, r24	; 0x0d
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    19c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	09 f4       	brne	.+2      	; 0x19d0 <pvPortMalloc+0x58>
    19ce:	af c0       	rjmp	.+350    	; 0x1b2e <pvPortMalloc+0x1b6>
    19d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d4:	23 e0       	ldi	r18, 0x03	; 3
    19d6:	8f 31       	cpi	r24, 0x1F	; 31
    19d8:	92 07       	cpc	r25, r18
    19da:	08 f0       	brcs	.+2      	; 0x19de <pvPortMalloc+0x66>
    19dc:	a8 c0       	rjmp	.+336    	; 0x1b2e <pvPortMalloc+0x1b6>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    19de:	85 e9       	ldi	r24, 0x95	; 149
    19e0:	93 e0       	ldi	r25, 0x03	; 3
    19e2:	9a 87       	std	Y+10, r25	; 0x0a
    19e4:	89 87       	std	Y+9, r24	; 0x09
			pxBlock = xStart.pxNextFreeBlock;
    19e6:	80 91 95 03 	lds	r24, 0x0395
    19ea:	90 91 96 03 	lds	r25, 0x0396
    19ee:	9c 87       	std	Y+12, r25	; 0x0c
    19f0:	8b 87       	std	Y+11, r24	; 0x0b
    19f2:	0a c0       	rjmp	.+20     	; 0x1a08 <pvPortMalloc+0x90>
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
			{
				pxPreviousBlock = pxBlock;
    19f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    19f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    19f8:	9a 87       	std	Y+10, r25	; 0x0a
    19fa:	89 87       	std	Y+9, r24	; 0x09
				pxBlock = pxBlock->pxNextFreeBlock;
    19fc:	eb 85       	ldd	r30, Y+11	; 0x0b
    19fe:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	9c 87       	std	Y+12, r25	; 0x0c
    1a06:	8b 87       	std	Y+11, r24	; 0x0b
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1a08:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a0a:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a0c:	22 81       	ldd	r18, Z+2	; 0x02
    1a0e:	33 81       	ldd	r19, Z+3	; 0x03
    1a10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a14:	28 17       	cp	r18, r24
    1a16:	39 07       	cpc	r19, r25
    1a18:	30 f4       	brcc	.+12     	; 0x1a26 <pvPortMalloc+0xae>
    1a1a:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a1c:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a1e:	80 81       	ld	r24, Z
    1a20:	91 81       	ldd	r25, Z+1	; 0x01
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	39 f7       	brne	.-50     	; 0x19f4 <pvPortMalloc+0x7c>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    1a26:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a28:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a2a:	43 e0       	ldi	r20, 0x03	; 3
    1a2c:	89 39       	cpi	r24, 0x99	; 153
    1a2e:	94 07       	cpc	r25, r20
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <pvPortMalloc+0xbc>
    1a32:	7d c0       	rjmp	.+250    	; 0x1b2e <pvPortMalloc+0x1b6>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    1a34:	e9 85       	ldd	r30, Y+9	; 0x09
    1a36:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a38:	20 81       	ld	r18, Z
    1a3a:	31 81       	ldd	r19, Z+1	; 0x01
    1a3c:	80 91 71 00 	lds	r24, 0x0071
    1a40:	90 91 72 00 	lds	r25, 0x0072
    1a44:	82 0f       	add	r24, r18
    1a46:	93 1f       	adc	r25, r19
    1a48:	9e 83       	std	Y+6, r25	; 0x06
    1a4a:	8d 83       	std	Y+5, r24	; 0x05

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    1a4c:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a4e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a50:	80 81       	ld	r24, Z
    1a52:	91 81       	ldd	r25, Z+1	; 0x01
    1a54:	e9 85       	ldd	r30, Y+9	; 0x09
    1a56:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a58:	91 83       	std	Z+1, r25	; 0x01
    1a5a:	80 83       	st	Z, r24

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    1a5c:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a5e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a60:	22 81       	ldd	r18, Z+2	; 0x02
    1a62:	33 81       	ldd	r19, Z+3	; 0x03
    1a64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a68:	28 1b       	sub	r18, r24
    1a6a:	39 0b       	sbc	r19, r25
    1a6c:	80 91 71 00 	lds	r24, 0x0071
    1a70:	90 91 72 00 	lds	r25, 0x0072
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	82 17       	cp	r24, r18
    1a7a:	93 07       	cpc	r25, r19
    1a7c:	08 f0       	brcs	.+2      	; 0x1a80 <pvPortMalloc+0x108>
    1a7e:	47 c0       	rjmp	.+142    	; 0x1b0e <pvPortMalloc+0x196>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    1a80:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a82:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a88:	82 0f       	add	r24, r18
    1a8a:	93 1f       	adc	r25, r19
    1a8c:	98 87       	std	Y+8, r25	; 0x08
    1a8e:	8f 83       	std	Y+7, r24	; 0x07

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    1a90:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a92:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a94:	22 81       	ldd	r18, Z+2	; 0x02
    1a96:	33 81       	ldd	r19, Z+3	; 0x03
    1a98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a9c:	a9 01       	movw	r20, r18
    1a9e:	48 1b       	sub	r20, r24
    1aa0:	59 0b       	sbc	r21, r25
    1aa2:	ca 01       	movw	r24, r20
    1aa4:	ef 81       	ldd	r30, Y+7	; 0x07
    1aa6:	f8 85       	ldd	r31, Y+8	; 0x08
    1aa8:	93 83       	std	Z+3, r25	; 0x03
    1aaa:	82 83       	std	Z+2, r24	; 0x02
					pxBlock->xBlockSize = xWantedSize;
    1aac:	eb 85       	ldd	r30, Y+11	; 0x0b
    1aae:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab4:	93 83       	std	Z+3, r25	; 0x03
    1ab6:	82 83       	std	Z+2, r24	; 0x02

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    1ab8:	ef 81       	ldd	r30, Y+7	; 0x07
    1aba:	f8 85       	ldd	r31, Y+8	; 0x08
    1abc:	82 81       	ldd	r24, Z+2	; 0x02
    1abe:	93 81       	ldd	r25, Z+3	; 0x03
    1ac0:	9a 83       	std	Y+2, r25	; 0x02
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	85 e9       	ldi	r24, 0x95	; 149
    1ac6:	93 e0       	ldi	r25, 0x03	; 3
    1ac8:	9c 83       	std	Y+4, r25	; 0x04
    1aca:	8b 83       	std	Y+3, r24	; 0x03
    1acc:	06 c0       	rjmp	.+12     	; 0x1ada <pvPortMalloc+0x162>
    1ace:	eb 81       	ldd	r30, Y+3	; 0x03
    1ad0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ad2:	80 81       	ld	r24, Z
    1ad4:	91 81       	ldd	r25, Z+1	; 0x01
    1ad6:	9c 83       	std	Y+4, r25	; 0x04
    1ad8:	8b 83       	std	Y+3, r24	; 0x03
    1ada:	eb 81       	ldd	r30, Y+3	; 0x03
    1adc:	fc 81       	ldd	r31, Y+4	; 0x04
    1ade:	01 90       	ld	r0, Z+
    1ae0:	f0 81       	ld	r31, Z
    1ae2:	e0 2d       	mov	r30, r0
    1ae4:	22 81       	ldd	r18, Z+2	; 0x02
    1ae6:	33 81       	ldd	r19, Z+3	; 0x03
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	9a 81       	ldd	r25, Y+2	; 0x02
    1aec:	28 17       	cp	r18, r24
    1aee:	39 07       	cpc	r19, r25
    1af0:	70 f3       	brcs	.-36     	; 0x1ace <pvPortMalloc+0x156>
    1af2:	eb 81       	ldd	r30, Y+3	; 0x03
    1af4:	fc 81       	ldd	r31, Y+4	; 0x04
    1af6:	80 81       	ld	r24, Z
    1af8:	91 81       	ldd	r25, Z+1	; 0x01
    1afa:	ef 81       	ldd	r30, Y+7	; 0x07
    1afc:	f8 85       	ldd	r31, Y+8	; 0x08
    1afe:	91 83       	std	Z+1, r25	; 0x01
    1b00:	80 83       	st	Z, r24
    1b02:	eb 81       	ldd	r30, Y+3	; 0x03
    1b04:	fc 81       	ldd	r31, Y+4	; 0x04
    1b06:	8f 81       	ldd	r24, Y+7	; 0x07
    1b08:	98 85       	ldd	r25, Y+8	; 0x08
    1b0a:	91 83       	std	Z+1, r25	; 0x01
    1b0c:	80 83       	st	Z, r24
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
    1b0e:	20 91 6f 00 	lds	r18, 0x006F
    1b12:	30 91 70 00 	lds	r19, 0x0070
    1b16:	eb 85       	ldd	r30, Y+11	; 0x0b
    1b18:	fc 85       	ldd	r31, Y+12	; 0x0c
    1b1a:	82 81       	ldd	r24, Z+2	; 0x02
    1b1c:	93 81       	ldd	r25, Z+3	; 0x03
    1b1e:	a9 01       	movw	r20, r18
    1b20:	48 1b       	sub	r20, r24
    1b22:	59 0b       	sbc	r21, r25
    1b24:	ca 01       	movw	r24, r20
    1b26:	90 93 70 00 	sts	0x0070, r25
    1b2a:	80 93 6f 00 	sts	0x006F, r24
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1b2e:	0e 94 8a 20 	call	0x4114	; 0x4114 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
    1b34:	9e 81       	ldd	r25, Y+6	; 0x06
}
    1b36:	2e 96       	adiw	r28, 0x0e	; 14
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	2a 97       	sbiw	r28, 0x0a	; 10
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	9a 87       	std	Y+10, r25	; 0x0a
    1b5e:	89 87       	std	Y+9, r24	; 0x09
uint8_t *puc = ( uint8_t * ) pv;
    1b60:	89 85       	ldd	r24, Y+9	; 0x09
    1b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b64:	98 87       	std	Y+8, r25	; 0x08
    1b66:	8f 83       	std	Y+7, r24	; 0x07
BlockLink_t *pxLink;

	if( pv != NULL )
    1b68:	89 85       	ldd	r24, Y+9	; 0x09
    1b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <vPortFree+0x2a>
    1b70:	4f c0       	rjmp	.+158    	; 0x1c10 <vPortFree+0xc8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    1b72:	80 91 71 00 	lds	r24, 0x0071
    1b76:	90 91 72 00 	lds	r25, 0x0072
    1b7a:	22 27       	eor	r18, r18
    1b7c:	33 27       	eor	r19, r19
    1b7e:	28 1b       	sub	r18, r24
    1b80:	39 0b       	sbc	r19, r25
    1b82:	8f 81       	ldd	r24, Y+7	; 0x07
    1b84:	98 85       	ldd	r25, Y+8	; 0x08
    1b86:	82 0f       	add	r24, r18
    1b88:	93 1f       	adc	r25, r19
    1b8a:	98 87       	std	Y+8, r25	; 0x08
    1b8c:	8f 83       	std	Y+7, r24	; 0x07

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
    1b8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b90:	98 85       	ldd	r25, Y+8	; 0x08
    1b92:	9e 83       	std	Y+6, r25	; 0x06
    1b94:	8d 83       	std	Y+5, r24	; 0x05

		vTaskSuspendAll();
    1b96:	0e 94 7e 20 	call	0x40fc	; 0x40fc <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1b9a:	ed 81       	ldd	r30, Y+5	; 0x05
    1b9c:	fe 81       	ldd	r31, Y+6	; 0x06
    1b9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ba0:	93 81       	ldd	r25, Z+3	; 0x03
    1ba2:	9a 83       	std	Y+2, r25	; 0x02
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	85 e9       	ldi	r24, 0x95	; 149
    1ba8:	93 e0       	ldi	r25, 0x03	; 3
    1baa:	9c 83       	std	Y+4, r25	; 0x04
    1bac:	8b 83       	std	Y+3, r24	; 0x03
    1bae:	06 c0       	rjmp	.+12     	; 0x1bbc <vPortFree+0x74>
    1bb0:	eb 81       	ldd	r30, Y+3	; 0x03
    1bb2:	fc 81       	ldd	r31, Y+4	; 0x04
    1bb4:	80 81       	ld	r24, Z
    1bb6:	91 81       	ldd	r25, Z+1	; 0x01
    1bb8:	9c 83       	std	Y+4, r25	; 0x04
    1bba:	8b 83       	std	Y+3, r24	; 0x03
    1bbc:	eb 81       	ldd	r30, Y+3	; 0x03
    1bbe:	fc 81       	ldd	r31, Y+4	; 0x04
    1bc0:	01 90       	ld	r0, Z+
    1bc2:	f0 81       	ld	r31, Z
    1bc4:	e0 2d       	mov	r30, r0
    1bc6:	22 81       	ldd	r18, Z+2	; 0x02
    1bc8:	33 81       	ldd	r19, Z+3	; 0x03
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bce:	28 17       	cp	r18, r24
    1bd0:	39 07       	cpc	r19, r25
    1bd2:	70 f3       	brcs	.-36     	; 0x1bb0 <vPortFree+0x68>
    1bd4:	eb 81       	ldd	r30, Y+3	; 0x03
    1bd6:	fc 81       	ldd	r31, Y+4	; 0x04
    1bd8:	80 81       	ld	r24, Z
    1bda:	91 81       	ldd	r25, Z+1	; 0x01
    1bdc:	ed 81       	ldd	r30, Y+5	; 0x05
    1bde:	fe 81       	ldd	r31, Y+6	; 0x06
    1be0:	91 83       	std	Z+1, r25	; 0x01
    1be2:	80 83       	st	Z, r24
    1be4:	eb 81       	ldd	r30, Y+3	; 0x03
    1be6:	fc 81       	ldd	r31, Y+4	; 0x04
    1be8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bea:	9e 81       	ldd	r25, Y+6	; 0x06
    1bec:	91 83       	std	Z+1, r25	; 0x01
    1bee:	80 83       	st	Z, r24
			xFreeBytesRemaining += pxLink->xBlockSize;
    1bf0:	ed 81       	ldd	r30, Y+5	; 0x05
    1bf2:	fe 81       	ldd	r31, Y+6	; 0x06
    1bf4:	22 81       	ldd	r18, Z+2	; 0x02
    1bf6:	33 81       	ldd	r19, Z+3	; 0x03
    1bf8:	80 91 6f 00 	lds	r24, 0x006F
    1bfc:	90 91 70 00 	lds	r25, 0x0070
    1c00:	82 0f       	add	r24, r18
    1c02:	93 1f       	adc	r25, r19
    1c04:	90 93 70 00 	sts	0x0070, r25
    1c08:	80 93 6f 00 	sts	0x006F, r24
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
    1c0c:	0e 94 8a 20 	call	0x4114	; 0x4114 <xTaskResumeAll>
	}
}
    1c10:	2a 96       	adiw	r28, 0x0a	; 10
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	cd bf       	out	0x3d, r28	; 61
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
	return xFreeBytesRemaining;
    1c2a:	80 91 6f 00 	lds	r24, 0x006F
    1c2e:	90 91 70 00 	lds	r25, 0x0070
}
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
	/* This just exists to keep the linker quiet. */
}
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <prvHeapInit+0x6>
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <prvHeapInit+0x8>
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1c52:	86 e7       	ldi	r24, 0x76	; 118
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	9a 83       	std	Y+2, r25	; 0x02
    1c58:	89 83       	std	Y+1, r24	; 0x01

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5e:	90 93 96 03 	sts	0x0396, r25
    1c62:	80 93 95 03 	sts	0x0395, r24
	xStart.xBlockSize = ( size_t ) 0;
    1c66:	10 92 98 03 	sts	0x0398, r1
    1c6a:	10 92 97 03 	sts	0x0397, r1

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    1c6e:	8f e1       	ldi	r24, 0x1F	; 31
    1c70:	93 e0       	ldi	r25, 0x03	; 3
    1c72:	90 93 9c 03 	sts	0x039C, r25
    1c76:	80 93 9b 03 	sts	0x039B, r24
	xEnd.pxNextFreeBlock = NULL;
    1c7a:	10 92 9a 03 	sts	0x039A, r1
    1c7e:	10 92 99 03 	sts	0x0399, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	9a 81       	ldd	r25, Y+2	; 0x02
    1c86:	9c 83       	std	Y+4, r25	; 0x04
    1c88:	8b 83       	std	Y+3, r24	; 0x03
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    1c8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c8e:	8f e1       	ldi	r24, 0x1F	; 31
    1c90:	93 e0       	ldi	r25, 0x03	; 3
    1c92:	93 83       	std	Z+3, r25	; 0x03
    1c94:	82 83       	std	Z+2, r24	; 0x02
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    1c96:	eb 81       	ldd	r30, Y+3	; 0x03
    1c98:	fc 81       	ldd	r31, Y+4	; 0x04
    1c9a:	89 e9       	ldi	r24, 0x99	; 153
    1c9c:	93 e0       	ldi	r25, 0x03	; 3
    1c9e:	91 83       	std	Z+1, r25	; 0x01
    1ca0:	80 83       	st	Z, r24
}
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <vListInitialise+0x6>
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc2:	03 96       	adiw	r24, 0x03	; 3
    1cc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc8:	92 83       	std	Z+2, r25	; 0x02
    1cca:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1ccc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cce:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd0:	8f ef       	ldi	r24, 0xFF	; 255
    1cd2:	9f ef       	ldi	r25, 0xFF	; 255
    1cd4:	94 83       	std	Z+4, r25	; 0x04
    1cd6:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	9a 81       	ldd	r25, Y+2	; 0x02
    1cdc:	03 96       	adiw	r24, 0x03	; 3
    1cde:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce2:	96 83       	std	Z+6, r25	; 0x06
    1ce4:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cea:	03 96       	adiw	r24, 0x03	; 3
    1cec:	e9 81       	ldd	r30, Y+1	; 0x01
    1cee:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf0:	90 87       	std	Z+8, r25	; 0x08
    1cf2:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1cf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf8:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <vListInitialiseItem+0x6>
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	9a 83       	std	Y+2, r25	; 0x02
    1d10:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1d12:	e9 81       	ldd	r30, Y+1	; 0x01
    1d14:	fa 81       	ldd	r31, Y+2	; 0x02
    1d16:	11 86       	std	Z+9, r1	; 0x09
    1d18:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <vListInsertEnd+0x6>
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <vListInsertEnd+0x8>
    1d2c:	00 d0       	rcall	.+0      	; 0x1d2e <vListInsertEnd+0xa>
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	9c 83       	std	Y+4, r25	; 0x04
    1d34:	8b 83       	std	Y+3, r24	; 0x03
    1d36:	7e 83       	std	Y+6, r23	; 0x06
    1d38:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    1d3a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d3c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d3e:	81 81       	ldd	r24, Z+1	; 0x01
    1d40:	92 81       	ldd	r25, Z+2	; 0x02
    1d42:	9a 83       	std	Y+2, r25	; 0x02
    1d44:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1d46:	ed 81       	ldd	r30, Y+5	; 0x05
    1d48:	fe 81       	ldd	r31, Y+6	; 0x06
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4e:	93 83       	std	Z+3, r25	; 0x03
    1d50:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1d52:	e9 81       	ldd	r30, Y+1	; 0x01
    1d54:	fa 81       	ldd	r31, Y+2	; 0x02
    1d56:	84 81       	ldd	r24, Z+4	; 0x04
    1d58:	95 81       	ldd	r25, Z+5	; 0x05
    1d5a:	ed 81       	ldd	r30, Y+5	; 0x05
    1d5c:	fe 81       	ldd	r31, Y+6	; 0x06
    1d5e:	95 83       	std	Z+5, r25	; 0x05
    1d60:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1d62:	e9 81       	ldd	r30, Y+1	; 0x01
    1d64:	fa 81       	ldd	r31, Y+2	; 0x02
    1d66:	04 80       	ldd	r0, Z+4	; 0x04
    1d68:	f5 81       	ldd	r31, Z+5	; 0x05
    1d6a:	e0 2d       	mov	r30, r0
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d70:	93 83       	std	Z+3, r25	; 0x03
    1d72:	82 83       	std	Z+2, r24	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    1d74:	e9 81       	ldd	r30, Y+1	; 0x01
    1d76:	fa 81       	ldd	r31, Y+2	; 0x02
    1d78:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7c:	95 83       	std	Z+5, r25	; 0x05
    1d7e:	84 83       	std	Z+4, r24	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1d80:	ed 81       	ldd	r30, Y+5	; 0x05
    1d82:	fe 81       	ldd	r31, Y+6	; 0x06
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	9c 81       	ldd	r25, Y+4	; 0x04
    1d88:	91 87       	std	Z+9, r25	; 0x09
    1d8a:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1d8c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d8e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d90:	80 81       	ld	r24, Z
    1d92:	8f 5f       	subi	r24, 0xFF	; 255
    1d94:	eb 81       	ldd	r30, Y+3	; 0x03
    1d96:	fc 81       	ldd	r31, Y+4	; 0x04
    1d98:	80 83       	st	Z, r24
}
    1d9a:	26 96       	adiw	r28, 0x06	; 6
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	28 97       	sbiw	r28, 0x08	; 8
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	9e 83       	std	Y+6, r25	; 0x06
    1dc2:	8d 83       	std	Y+5, r24	; 0x05
    1dc4:	78 87       	std	Y+8, r23	; 0x08
    1dc6:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1dc8:	ef 81       	ldd	r30, Y+7	; 0x07
    1dca:	f8 85       	ldd	r31, Y+8	; 0x08
    1dcc:	80 81       	ld	r24, Z
    1dce:	91 81       	ldd	r25, Z+1	; 0x01
    1dd0:	9a 83       	std	Y+2, r25	; 0x02
    1dd2:	89 83       	std	Y+1, r24	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd8:	2f ef       	ldi	r18, 0xFF	; 255
    1dda:	8f 3f       	cpi	r24, 0xFF	; 255
    1ddc:	92 07       	cpc	r25, r18
    1dde:	39 f4       	brne	.+14     	; 0x1dee <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1de0:	ed 81       	ldd	r30, Y+5	; 0x05
    1de2:	fe 81       	ldd	r31, Y+6	; 0x06
    1de4:	87 81       	ldd	r24, Z+7	; 0x07
    1de6:	90 85       	ldd	r25, Z+8	; 0x08
    1de8:	9c 83       	std	Y+4, r25	; 0x04
    1dea:	8b 83       	std	Y+3, r24	; 0x03
    1dec:	18 c0       	rjmp	.+48     	; 0x1e1e <vListInsert+0x72>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1dee:	8d 81       	ldd	r24, Y+5	; 0x05
    1df0:	9e 81       	ldd	r25, Y+6	; 0x06
    1df2:	03 96       	adiw	r24, 0x03	; 3
    1df4:	9c 83       	std	Y+4, r25	; 0x04
    1df6:	8b 83       	std	Y+3, r24	; 0x03
    1df8:	06 c0       	rjmp	.+12     	; 0x1e06 <vListInsert+0x5a>
    1dfa:	eb 81       	ldd	r30, Y+3	; 0x03
    1dfc:	fc 81       	ldd	r31, Y+4	; 0x04
    1dfe:	82 81       	ldd	r24, Z+2	; 0x02
    1e00:	93 81       	ldd	r25, Z+3	; 0x03
    1e02:	9c 83       	std	Y+4, r25	; 0x04
    1e04:	8b 83       	std	Y+3, r24	; 0x03
    1e06:	eb 81       	ldd	r30, Y+3	; 0x03
    1e08:	fc 81       	ldd	r31, Y+4	; 0x04
    1e0a:	02 80       	ldd	r0, Z+2	; 0x02
    1e0c:	f3 81       	ldd	r31, Z+3	; 0x03
    1e0e:	e0 2d       	mov	r30, r0
    1e10:	20 81       	ld	r18, Z
    1e12:	31 81       	ldd	r19, Z+1	; 0x01
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	9a 81       	ldd	r25, Y+2	; 0x02
    1e18:	82 17       	cp	r24, r18
    1e1a:	93 07       	cpc	r25, r19
    1e1c:	70 f7       	brcc	.-36     	; 0x1dfa <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1e1e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e20:	fc 81       	ldd	r31, Y+4	; 0x04
    1e22:	82 81       	ldd	r24, Z+2	; 0x02
    1e24:	93 81       	ldd	r25, Z+3	; 0x03
    1e26:	ef 81       	ldd	r30, Y+7	; 0x07
    1e28:	f8 85       	ldd	r31, Y+8	; 0x08
    1e2a:	93 83       	std	Z+3, r25	; 0x03
    1e2c:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1e2e:	ef 81       	ldd	r30, Y+7	; 0x07
    1e30:	f8 85       	ldd	r31, Y+8	; 0x08
    1e32:	02 80       	ldd	r0, Z+2	; 0x02
    1e34:	f3 81       	ldd	r31, Z+3	; 0x03
    1e36:	e0 2d       	mov	r30, r0
    1e38:	8f 81       	ldd	r24, Y+7	; 0x07
    1e3a:	98 85       	ldd	r25, Y+8	; 0x08
    1e3c:	95 83       	std	Z+5, r25	; 0x05
    1e3e:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1e40:	ef 81       	ldd	r30, Y+7	; 0x07
    1e42:	f8 85       	ldd	r31, Y+8	; 0x08
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	9c 81       	ldd	r25, Y+4	; 0x04
    1e48:	95 83       	std	Z+5, r25	; 0x05
    1e4a:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = pxNewListItem;
    1e4c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e4e:	fc 81       	ldd	r31, Y+4	; 0x04
    1e50:	8f 81       	ldd	r24, Y+7	; 0x07
    1e52:	98 85       	ldd	r25, Y+8	; 0x08
    1e54:	93 83       	std	Z+3, r25	; 0x03
    1e56:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1e58:	ef 81       	ldd	r30, Y+7	; 0x07
    1e5a:	f8 85       	ldd	r31, Y+8	; 0x08
    1e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e60:	91 87       	std	Z+9, r25	; 0x09
    1e62:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1e64:	ed 81       	ldd	r30, Y+5	; 0x05
    1e66:	fe 81       	ldd	r31, Y+6	; 0x06
    1e68:	80 81       	ld	r24, Z
    1e6a:	8f 5f       	subi	r24, 0xFF	; 255
    1e6c:	ed 81       	ldd	r30, Y+5	; 0x05
    1e6e:	fe 81       	ldd	r31, Y+6	; 0x06
    1e70:	80 83       	st	Z, r24
}
    1e72:	28 96       	adiw	r28, 0x08	; 8
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <uxListRemove+0x6>
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <uxListRemove+0x8>
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	9c 83       	std	Y+4, r25	; 0x04
    1e92:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1e94:	eb 81       	ldd	r30, Y+3	; 0x03
    1e96:	fc 81       	ldd	r31, Y+4	; 0x04
    1e98:	80 85       	ldd	r24, Z+8	; 0x08
    1e9a:	91 85       	ldd	r25, Z+9	; 0x09
    1e9c:	9a 83       	std	Y+2, r25	; 0x02
    1e9e:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1ea0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ea2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ea4:	a2 81       	ldd	r26, Z+2	; 0x02
    1ea6:	b3 81       	ldd	r27, Z+3	; 0x03
    1ea8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eaa:	fc 81       	ldd	r31, Y+4	; 0x04
    1eac:	84 81       	ldd	r24, Z+4	; 0x04
    1eae:	95 81       	ldd	r25, Z+5	; 0x05
    1eb0:	15 96       	adiw	r26, 0x05	; 5
    1eb2:	9c 93       	st	X, r25
    1eb4:	8e 93       	st	-X, r24
    1eb6:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1eb8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eba:	fc 81       	ldd	r31, Y+4	; 0x04
    1ebc:	a4 81       	ldd	r26, Z+4	; 0x04
    1ebe:	b5 81       	ldd	r27, Z+5	; 0x05
    1ec0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ec2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ec4:	82 81       	ldd	r24, Z+2	; 0x02
    1ec6:	93 81       	ldd	r25, Z+3	; 0x03
    1ec8:	13 96       	adiw	r26, 0x03	; 3
    1eca:	9c 93       	st	X, r25
    1ecc:	8e 93       	st	-X, r24
    1ece:	12 97       	sbiw	r26, 0x02	; 2

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1ed0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed4:	21 81       	ldd	r18, Z+1	; 0x01
    1ed6:	32 81       	ldd	r19, Z+2	; 0x02
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	28 17       	cp	r18, r24
    1ede:	39 07       	cpc	r19, r25
    1ee0:	41 f4       	brne	.+16     	; 0x1ef2 <uxListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1ee2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ee4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ee6:	84 81       	ldd	r24, Z+4	; 0x04
    1ee8:	95 81       	ldd	r25, Z+5	; 0x05
    1eea:	e9 81       	ldd	r30, Y+1	; 0x01
    1eec:	fa 81       	ldd	r31, Y+2	; 0x02
    1eee:	92 83       	std	Z+2, r25	; 0x02
    1ef0:	81 83       	std	Z+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1ef2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ef4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ef6:	11 86       	std	Z+9, r1	; 0x09
    1ef8:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1efa:	e9 81       	ldd	r30, Y+1	; 0x01
    1efc:	fa 81       	ldd	r31, Y+2	; 0x02
    1efe:	80 81       	ld	r24, Z
    1f00:	81 50       	subi	r24, 0x01	; 1
    1f02:	e9 81       	ldd	r30, Y+1	; 0x01
    1f04:	fa 81       	ldd	r31, Y+2	; 0x02
    1f06:	80 83       	st	Z, r24

	return pxList->uxNumberOfItems;
    1f08:	e9 81       	ldd	r30, Y+1	; 0x01
    1f0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f0c:	80 81       	ld	r24, Z
}
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	28 97       	sbiw	r28, 0x08	; 8
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
    1f30:	9c 83       	std	Y+4, r25	; 0x04
    1f32:	8b 83       	std	Y+3, r24	; 0x03
    1f34:	7e 83       	std	Y+6, r23	; 0x06
    1f36:	6d 83       	std	Y+5, r22	; 0x05
    1f38:	58 87       	std	Y+8, r21	; 0x08
    1f3a:	4f 83       	std	Y+7, r20	; 0x07
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    1f3c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f3e:	fc 81       	ldd	r31, Y+4	; 0x04
    1f40:	81 e1       	ldi	r24, 0x11	; 17
    1f42:	80 83       	st	Z, r24
	pxTopOfStack--;
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	9c 81       	ldd	r25, Y+4	; 0x04
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	9c 83       	std	Y+4, r25	; 0x04
    1f4c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    1f4e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f50:	fc 81       	ldd	r31, Y+4	; 0x04
    1f52:	82 e2       	ldi	r24, 0x22	; 34
    1f54:	80 83       	st	Z, r24
	pxTopOfStack--;
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	9c 83       	std	Y+4, r25	; 0x04
    1f5e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    1f60:	eb 81       	ldd	r30, Y+3	; 0x03
    1f62:	fc 81       	ldd	r31, Y+4	; 0x04
    1f64:	83 e3       	ldi	r24, 0x33	; 51
    1f66:	80 83       	st	Z, r24
	pxTopOfStack--;
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	9c 83       	std	Y+4, r25	; 0x04
    1f70:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
    1f72:	8d 81       	ldd	r24, Y+5	; 0x05
    1f74:	9e 81       	ldd	r25, Y+6	; 0x06
    1f76:	9a 83       	std	Y+2, r25	; 0x02
    1f78:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f7e:	fc 81       	ldd	r31, Y+4	; 0x04
    1f80:	80 83       	st	Z, r24
	pxTopOfStack--;
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	9c 81       	ldd	r25, Y+4	; 0x04
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	9c 83       	std	Y+4, r25	; 0x04
    1f8a:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f90:	89 2f       	mov	r24, r25
    1f92:	99 27       	eor	r25, r25
    1f94:	9a 83       	std	Y+2, r25	; 0x02
    1f96:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f9c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f9e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	9c 83       	std	Y+4, r25	; 0x04
    1fa8:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    1faa:	eb 81       	ldd	r30, Y+3	; 0x03
    1fac:	fc 81       	ldd	r31, Y+4	; 0x04
    1fae:	10 82       	st	Z, r1
	pxTopOfStack--;
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	9c 83       	std	Y+4, r25	; 0x04
    1fb8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    1fba:	eb 81       	ldd	r30, Y+3	; 0x03
    1fbc:	fc 81       	ldd	r31, Y+4	; 0x04
    1fbe:	80 e8       	ldi	r24, 0x80	; 128
    1fc0:	80 83       	st	Z, r24
	pxTopOfStack--;
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	9c 83       	std	Y+4, r25	; 0x04
    1fca:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    1fcc:	eb 81       	ldd	r30, Y+3	; 0x03
    1fce:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd0:	10 82       	st	Z, r1
	pxTopOfStack--;
    1fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd6:	01 97       	sbiw	r24, 0x01	; 1
    1fd8:	9c 83       	std	Y+4, r25	; 0x04
    1fda:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    1fdc:	eb 81       	ldd	r30, Y+3	; 0x03
    1fde:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe0:	82 e0       	ldi	r24, 0x02	; 2
    1fe2:	80 83       	st	Z, r24
	pxTopOfStack--;
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	9c 83       	std	Y+4, r25	; 0x04
    1fec:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    1fee:	eb 81       	ldd	r30, Y+3	; 0x03
    1ff0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ff2:	83 e0       	ldi	r24, 0x03	; 3
    1ff4:	80 83       	st	Z, r24
	pxTopOfStack--;
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	9c 83       	std	Y+4, r25	; 0x04
    1ffe:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    2000:	eb 81       	ldd	r30, Y+3	; 0x03
    2002:	fc 81       	ldd	r31, Y+4	; 0x04
    2004:	84 e0       	ldi	r24, 0x04	; 4
    2006:	80 83       	st	Z, r24
	pxTopOfStack--;
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	9c 83       	std	Y+4, r25	; 0x04
    2010:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    2012:	eb 81       	ldd	r30, Y+3	; 0x03
    2014:	fc 81       	ldd	r31, Y+4	; 0x04
    2016:	85 e0       	ldi	r24, 0x05	; 5
    2018:	80 83       	st	Z, r24
	pxTopOfStack--;
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	9c 81       	ldd	r25, Y+4	; 0x04
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	9c 83       	std	Y+4, r25	; 0x04
    2022:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    2024:	eb 81       	ldd	r30, Y+3	; 0x03
    2026:	fc 81       	ldd	r31, Y+4	; 0x04
    2028:	86 e0       	ldi	r24, 0x06	; 6
    202a:	80 83       	st	Z, r24
	pxTopOfStack--;
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	9c 81       	ldd	r25, Y+4	; 0x04
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	9c 83       	std	Y+4, r25	; 0x04
    2034:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    2036:	eb 81       	ldd	r30, Y+3	; 0x03
    2038:	fc 81       	ldd	r31, Y+4	; 0x04
    203a:	87 e0       	ldi	r24, 0x07	; 7
    203c:	80 83       	st	Z, r24
	pxTopOfStack--;
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	9c 81       	ldd	r25, Y+4	; 0x04
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	9c 83       	std	Y+4, r25	; 0x04
    2046:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    2048:	eb 81       	ldd	r30, Y+3	; 0x03
    204a:	fc 81       	ldd	r31, Y+4	; 0x04
    204c:	88 e0       	ldi	r24, 0x08	; 8
    204e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	9c 81       	ldd	r25, Y+4	; 0x04
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	9c 83       	std	Y+4, r25	; 0x04
    2058:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    205a:	eb 81       	ldd	r30, Y+3	; 0x03
    205c:	fc 81       	ldd	r31, Y+4	; 0x04
    205e:	89 e0       	ldi	r24, 0x09	; 9
    2060:	80 83       	st	Z, r24
	pxTopOfStack--;
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	9c 81       	ldd	r25, Y+4	; 0x04
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	9c 83       	std	Y+4, r25	; 0x04
    206a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    206c:	eb 81       	ldd	r30, Y+3	; 0x03
    206e:	fc 81       	ldd	r31, Y+4	; 0x04
    2070:	80 e1       	ldi	r24, 0x10	; 16
    2072:	80 83       	st	Z, r24
	pxTopOfStack--;
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	9c 81       	ldd	r25, Y+4	; 0x04
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	9c 83       	std	Y+4, r25	; 0x04
    207c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    207e:	eb 81       	ldd	r30, Y+3	; 0x03
    2080:	fc 81       	ldd	r31, Y+4	; 0x04
    2082:	81 e1       	ldi	r24, 0x11	; 17
    2084:	80 83       	st	Z, r24
	pxTopOfStack--;
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	9c 81       	ldd	r25, Y+4	; 0x04
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	9c 83       	std	Y+4, r25	; 0x04
    208e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    2090:	eb 81       	ldd	r30, Y+3	; 0x03
    2092:	fc 81       	ldd	r31, Y+4	; 0x04
    2094:	82 e1       	ldi	r24, 0x12	; 18
    2096:	80 83       	st	Z, r24
	pxTopOfStack--;
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	9c 81       	ldd	r25, Y+4	; 0x04
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	9c 83       	std	Y+4, r25	; 0x04
    20a0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    20a2:	eb 81       	ldd	r30, Y+3	; 0x03
    20a4:	fc 81       	ldd	r31, Y+4	; 0x04
    20a6:	83 e1       	ldi	r24, 0x13	; 19
    20a8:	80 83       	st	Z, r24
	pxTopOfStack--;
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	9c 81       	ldd	r25, Y+4	; 0x04
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	9c 83       	std	Y+4, r25	; 0x04
    20b2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    20b4:	eb 81       	ldd	r30, Y+3	; 0x03
    20b6:	fc 81       	ldd	r31, Y+4	; 0x04
    20b8:	84 e1       	ldi	r24, 0x14	; 20
    20ba:	80 83       	st	Z, r24
	pxTopOfStack--;
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	9c 83       	std	Y+4, r25	; 0x04
    20c4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    20c6:	eb 81       	ldd	r30, Y+3	; 0x03
    20c8:	fc 81       	ldd	r31, Y+4	; 0x04
    20ca:	85 e1       	ldi	r24, 0x15	; 21
    20cc:	80 83       	st	Z, r24
	pxTopOfStack--;
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	9c 81       	ldd	r25, Y+4	; 0x04
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	9c 83       	std	Y+4, r25	; 0x04
    20d6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    20d8:	eb 81       	ldd	r30, Y+3	; 0x03
    20da:	fc 81       	ldd	r31, Y+4	; 0x04
    20dc:	86 e1       	ldi	r24, 0x16	; 22
    20de:	80 83       	st	Z, r24
	pxTopOfStack--;
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	9c 81       	ldd	r25, Y+4	; 0x04
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	9c 83       	std	Y+4, r25	; 0x04
    20e8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    20ea:	eb 81       	ldd	r30, Y+3	; 0x03
    20ec:	fc 81       	ldd	r31, Y+4	; 0x04
    20ee:	87 e1       	ldi	r24, 0x17	; 23
    20f0:	80 83       	st	Z, r24
	pxTopOfStack--;
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	9c 83       	std	Y+4, r25	; 0x04
    20fa:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    20fc:	eb 81       	ldd	r30, Y+3	; 0x03
    20fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2100:	88 e1       	ldi	r24, 0x18	; 24
    2102:	80 83       	st	Z, r24
	pxTopOfStack--;
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	9c 81       	ldd	r25, Y+4	; 0x04
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	9c 83       	std	Y+4, r25	; 0x04
    210c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    210e:	eb 81       	ldd	r30, Y+3	; 0x03
    2110:	fc 81       	ldd	r31, Y+4	; 0x04
    2112:	89 e1       	ldi	r24, 0x19	; 25
    2114:	80 83       	st	Z, r24
	pxTopOfStack--;
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	9c 81       	ldd	r25, Y+4	; 0x04
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	9c 83       	std	Y+4, r25	; 0x04
    211e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    2120:	eb 81       	ldd	r30, Y+3	; 0x03
    2122:	fc 81       	ldd	r31, Y+4	; 0x04
    2124:	80 e2       	ldi	r24, 0x20	; 32
    2126:	80 83       	st	Z, r24
	pxTopOfStack--;
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	9c 81       	ldd	r25, Y+4	; 0x04
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	9c 83       	std	Y+4, r25	; 0x04
    2130:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    2132:	eb 81       	ldd	r30, Y+3	; 0x03
    2134:	fc 81       	ldd	r31, Y+4	; 0x04
    2136:	81 e2       	ldi	r24, 0x21	; 33
    2138:	80 83       	st	Z, r24
	pxTopOfStack--;
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	9c 81       	ldd	r25, Y+4	; 0x04
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	9c 83       	std	Y+4, r25	; 0x04
    2142:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    2144:	eb 81       	ldd	r30, Y+3	; 0x03
    2146:	fc 81       	ldd	r31, Y+4	; 0x04
    2148:	82 e2       	ldi	r24, 0x22	; 34
    214a:	80 83       	st	Z, r24
	pxTopOfStack--;
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	9c 81       	ldd	r25, Y+4	; 0x04
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	9c 83       	std	Y+4, r25	; 0x04
    2154:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    2156:	eb 81       	ldd	r30, Y+3	; 0x03
    2158:	fc 81       	ldd	r31, Y+4	; 0x04
    215a:	83 e2       	ldi	r24, 0x23	; 35
    215c:	80 83       	st	Z, r24
	pxTopOfStack--;
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	9c 81       	ldd	r25, Y+4	; 0x04
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	9c 83       	std	Y+4, r25	; 0x04
    2166:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
    2168:	8f 81       	ldd	r24, Y+7	; 0x07
    216a:	98 85       	ldd	r25, Y+8	; 0x08
    216c:	9a 83       	std	Y+2, r25	; 0x02
    216e:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	eb 81       	ldd	r30, Y+3	; 0x03
    2174:	fc 81       	ldd	r31, Y+4	; 0x04
    2176:	80 83       	st	Z, r24
	pxTopOfStack--;
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	9c 81       	ldd	r25, Y+4	; 0x04
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	9c 83       	std	Y+4, r25	; 0x04
    2180:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	9a 81       	ldd	r25, Y+2	; 0x02
    2186:	89 2f       	mov	r24, r25
    2188:	99 27       	eor	r25, r25
    218a:	9a 83       	std	Y+2, r25	; 0x02
    218c:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	eb 81       	ldd	r30, Y+3	; 0x03
    2192:	fc 81       	ldd	r31, Y+4	; 0x04
    2194:	80 83       	st	Z, r24
	pxTopOfStack--;
    2196:	8b 81       	ldd	r24, Y+3	; 0x03
    2198:	9c 81       	ldd	r25, Y+4	; 0x04
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	9c 83       	std	Y+4, r25	; 0x04
    219e:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    21a0:	eb 81       	ldd	r30, Y+3	; 0x03
    21a2:	fc 81       	ldd	r31, Y+4	; 0x04
    21a4:	86 e2       	ldi	r24, 0x26	; 38
    21a6:	80 83       	st	Z, r24
	pxTopOfStack--;
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	9c 81       	ldd	r25, Y+4	; 0x04
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	9c 83       	std	Y+4, r25	; 0x04
    21b0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    21b2:	eb 81       	ldd	r30, Y+3	; 0x03
    21b4:	fc 81       	ldd	r31, Y+4	; 0x04
    21b6:	87 e2       	ldi	r24, 0x27	; 39
    21b8:	80 83       	st	Z, r24
	pxTopOfStack--;
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	9c 81       	ldd	r25, Y+4	; 0x04
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	9c 83       	std	Y+4, r25	; 0x04
    21c2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    21c4:	eb 81       	ldd	r30, Y+3	; 0x03
    21c6:	fc 81       	ldd	r31, Y+4	; 0x04
    21c8:	88 e2       	ldi	r24, 0x28	; 40
    21ca:	80 83       	st	Z, r24
	pxTopOfStack--;
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	9c 81       	ldd	r25, Y+4	; 0x04
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	9c 83       	std	Y+4, r25	; 0x04
    21d4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    21d6:	eb 81       	ldd	r30, Y+3	; 0x03
    21d8:	fc 81       	ldd	r31, Y+4	; 0x04
    21da:	89 e2       	ldi	r24, 0x29	; 41
    21dc:	80 83       	st	Z, r24
	pxTopOfStack--;
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	9c 81       	ldd	r25, Y+4	; 0x04
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	9c 83       	std	Y+4, r25	; 0x04
    21e6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    21e8:	eb 81       	ldd	r30, Y+3	; 0x03
    21ea:	fc 81       	ldd	r31, Y+4	; 0x04
    21ec:	80 e3       	ldi	r24, 0x30	; 48
    21ee:	80 83       	st	Z, r24
	pxTopOfStack--;
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	9c 81       	ldd	r25, Y+4	; 0x04
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	9c 83       	std	Y+4, r25	; 0x04
    21f8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    21fa:	eb 81       	ldd	r30, Y+3	; 0x03
    21fc:	fc 81       	ldd	r31, Y+4	; 0x04
    21fe:	81 e3       	ldi	r24, 0x31	; 49
    2200:	80 83       	st	Z, r24
	pxTopOfStack--;
    2202:	8b 81       	ldd	r24, Y+3	; 0x03
    2204:	9c 81       	ldd	r25, Y+4	; 0x04
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	9c 83       	std	Y+4, r25	; 0x04
    220a:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2210:	28 96       	adiw	r28, 0x08	; 8
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    222a:	0e 94 03 12 	call	0x2406	; 0x2406 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    222e:	a0 91 9d 03 	lds	r26, 0x039D
    2232:	b0 91 9e 03 	lds	r27, 0x039E
    2236:	cd 91       	ld	r28, X+
    2238:	cd bf       	out	0x3d, r28	; 61
    223a:	dd 91       	ld	r29, X+
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	ff 91       	pop	r31
    2240:	ef 91       	pop	r30
    2242:	df 91       	pop	r29
    2244:	cf 91       	pop	r28
    2246:	bf 91       	pop	r27
    2248:	af 91       	pop	r26
    224a:	9f 91       	pop	r25
    224c:	8f 91       	pop	r24
    224e:	7f 91       	pop	r23
    2250:	6f 91       	pop	r22
    2252:	5f 91       	pop	r21
    2254:	4f 91       	pop	r20
    2256:	3f 91       	pop	r19
    2258:	2f 91       	pop	r18
    225a:	1f 91       	pop	r17
    225c:	0f 91       	pop	r16
    225e:	ff 90       	pop	r15
    2260:	ef 90       	pop	r14
    2262:	df 90       	pop	r13
    2264:	cf 90       	pop	r12
    2266:	bf 90       	pop	r11
    2268:	af 90       	pop	r10
    226a:	9f 90       	pop	r9
    226c:	8f 90       	pop	r8
    226e:	7f 90       	pop	r7
    2270:	6f 90       	pop	r6
    2272:	5f 90       	pop	r5
    2274:	4f 90       	pop	r4
    2276:	3f 90       	pop	r3
    2278:	2f 90       	pop	r2
    227a:	1f 90       	pop	r1
    227c:	0f 90       	pop	r0
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    2282:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    2284:	81 e0       	ldi	r24, 0x01	; 1
}
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	08 95       	ret

0000229a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    229a:	0f 92       	push	r0
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	f8 94       	cli
    22a0:	0f 92       	push	r0
    22a2:	1f 92       	push	r1
    22a4:	11 24       	eor	r1, r1
    22a6:	2f 92       	push	r2
    22a8:	3f 92       	push	r3
    22aa:	4f 92       	push	r4
    22ac:	5f 92       	push	r5
    22ae:	6f 92       	push	r6
    22b0:	7f 92       	push	r7
    22b2:	8f 92       	push	r8
    22b4:	9f 92       	push	r9
    22b6:	af 92       	push	r10
    22b8:	bf 92       	push	r11
    22ba:	cf 92       	push	r12
    22bc:	df 92       	push	r13
    22be:	ef 92       	push	r14
    22c0:	ff 92       	push	r15
    22c2:	0f 93       	push	r16
    22c4:	1f 93       	push	r17
    22c6:	2f 93       	push	r18
    22c8:	3f 93       	push	r19
    22ca:	4f 93       	push	r20
    22cc:	5f 93       	push	r21
    22ce:	6f 93       	push	r22
    22d0:	7f 93       	push	r23
    22d2:	8f 93       	push	r24
    22d4:	9f 93       	push	r25
    22d6:	af 93       	push	r26
    22d8:	bf 93       	push	r27
    22da:	cf 93       	push	r28
    22dc:	df 93       	push	r29
    22de:	ef 93       	push	r30
    22e0:	ff 93       	push	r31
    22e2:	a0 91 9d 03 	lds	r26, 0x039D
    22e6:	b0 91 9e 03 	lds	r27, 0x039E
    22ea:	0d b6       	in	r0, 0x3d	; 61
    22ec:	0d 92       	st	X+, r0
    22ee:	0e b6       	in	r0, 0x3e	; 62
    22f0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    22f2:	0e 94 46 22 	call	0x448c	; 0x448c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    22f6:	a0 91 9d 03 	lds	r26, 0x039D
    22fa:	b0 91 9e 03 	lds	r27, 0x039E
    22fe:	cd 91       	ld	r28, X+
    2300:	cd bf       	out	0x3d, r28	; 61
    2302:	dd 91       	ld	r29, X+
    2304:	de bf       	out	0x3e, r29	; 62
    2306:	ff 91       	pop	r31
    2308:	ef 91       	pop	r30
    230a:	df 91       	pop	r29
    230c:	cf 91       	pop	r28
    230e:	bf 91       	pop	r27
    2310:	af 91       	pop	r26
    2312:	9f 91       	pop	r25
    2314:	8f 91       	pop	r24
    2316:	7f 91       	pop	r23
    2318:	6f 91       	pop	r22
    231a:	5f 91       	pop	r21
    231c:	4f 91       	pop	r20
    231e:	3f 91       	pop	r19
    2320:	2f 91       	pop	r18
    2322:	1f 91       	pop	r17
    2324:	0f 91       	pop	r16
    2326:	ff 90       	pop	r15
    2328:	ef 90       	pop	r14
    232a:	df 90       	pop	r13
    232c:	cf 90       	pop	r12
    232e:	bf 90       	pop	r11
    2330:	af 90       	pop	r10
    2332:	9f 90       	pop	r9
    2334:	8f 90       	pop	r8
    2336:	7f 90       	pop	r7
    2338:	6f 90       	pop	r6
    233a:	5f 90       	pop	r5
    233c:	4f 90       	pop	r4
    233e:	3f 90       	pop	r3
    2340:	2f 90       	pop	r2
    2342:	1f 90       	pop	r1
    2344:	0f 90       	pop	r0
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	0f 90       	pop	r0

	asm volatile ( "ret" );
    234a:	08 95       	ret

0000234c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    234c:	0f 92       	push	r0
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	0f 92       	push	r0
    2354:	1f 92       	push	r1
    2356:	11 24       	eor	r1, r1
    2358:	2f 92       	push	r2
    235a:	3f 92       	push	r3
    235c:	4f 92       	push	r4
    235e:	5f 92       	push	r5
    2360:	6f 92       	push	r6
    2362:	7f 92       	push	r7
    2364:	8f 92       	push	r8
    2366:	9f 92       	push	r9
    2368:	af 92       	push	r10
    236a:	bf 92       	push	r11
    236c:	cf 92       	push	r12
    236e:	df 92       	push	r13
    2370:	ef 92       	push	r14
    2372:	ff 92       	push	r15
    2374:	0f 93       	push	r16
    2376:	1f 93       	push	r17
    2378:	2f 93       	push	r18
    237a:	3f 93       	push	r19
    237c:	4f 93       	push	r20
    237e:	5f 93       	push	r21
    2380:	6f 93       	push	r22
    2382:	7f 93       	push	r23
    2384:	8f 93       	push	r24
    2386:	9f 93       	push	r25
    2388:	af 93       	push	r26
    238a:	bf 93       	push	r27
    238c:	cf 93       	push	r28
    238e:	df 93       	push	r29
    2390:	ef 93       	push	r30
    2392:	ff 93       	push	r31
    2394:	a0 91 9d 03 	lds	r26, 0x039D
    2398:	b0 91 9e 03 	lds	r27, 0x039E
    239c:	0d b6       	in	r0, 0x3d	; 61
    239e:	0d 92       	st	X+, r0
    23a0:	0e b6       	in	r0, 0x3e	; 62
    23a2:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    23a4:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <xTaskIncrementTick>
    23a8:	88 23       	and	r24, r24
    23aa:	11 f0       	breq	.+4      	; 0x23b0 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    23ac:	0e 94 46 22 	call	0x448c	; 0x448c <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    23b0:	a0 91 9d 03 	lds	r26, 0x039D
    23b4:	b0 91 9e 03 	lds	r27, 0x039E
    23b8:	cd 91       	ld	r28, X+
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	dd 91       	ld	r29, X+
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	ff 91       	pop	r31
    23c2:	ef 91       	pop	r30
    23c4:	df 91       	pop	r29
    23c6:	cf 91       	pop	r28
    23c8:	bf 91       	pop	r27
    23ca:	af 91       	pop	r26
    23cc:	9f 91       	pop	r25
    23ce:	8f 91       	pop	r24
    23d0:	7f 91       	pop	r23
    23d2:	6f 91       	pop	r22
    23d4:	5f 91       	pop	r21
    23d6:	4f 91       	pop	r20
    23d8:	3f 91       	pop	r19
    23da:	2f 91       	pop	r18
    23dc:	1f 91       	pop	r17
    23de:	0f 91       	pop	r16
    23e0:	ff 90       	pop	r15
    23e2:	ef 90       	pop	r14
    23e4:	df 90       	pop	r13
    23e6:	cf 90       	pop	r12
    23e8:	bf 90       	pop	r11
    23ea:	af 90       	pop	r10
    23ec:	9f 90       	pop	r9
    23ee:	8f 90       	pop	r8
    23f0:	7f 90       	pop	r7
    23f2:	6f 90       	pop	r6
    23f4:	5f 90       	pop	r5
    23f6:	4f 90       	pop	r4
    23f8:	3f 90       	pop	r3
    23fa:	2f 90       	pop	r2
    23fc:	1f 90       	pop	r1
    23fe:	0f 90       	pop	r0
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2404:	08 95       	ret

00002406 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	00 d0       	rcall	.+0      	; 0x240c <prvSetupTimerInterrupt+0x6>
    240c:	00 d0       	rcall	.+0      	; 0x240e <prvSetupTimerInterrupt+0x8>
    240e:	00 d0       	rcall	.+0      	; 0x2410 <prvSetupTimerInterrupt+0xa>
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    2414:	80 e4       	ldi	r24, 0x40	; 64
    2416:	9f e1       	ldi	r25, 0x1F	; 31
    2418:	a0 e0       	ldi	r26, 0x00	; 0
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	8b 83       	std	Y+3, r24	; 0x03
    241e:	9c 83       	std	Y+4, r25	; 0x04
    2420:	ad 83       	std	Y+5, r26	; 0x05
    2422:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	9c 81       	ldd	r25, Y+4	; 0x04
    2428:	ad 81       	ldd	r26, Y+5	; 0x05
    242a:	be 81       	ldd	r27, Y+6	; 0x06
    242c:	68 94       	set
    242e:	15 f8       	bld	r1, 5
    2430:	b6 95       	lsr	r27
    2432:	a7 95       	ror	r26
    2434:	97 95       	ror	r25
    2436:	87 95       	ror	r24
    2438:	16 94       	lsr	r1
    243a:	d1 f7       	brne	.-12     	; 0x2430 <prvSetupTimerInterrupt+0x2a>
    243c:	8b 83       	std	Y+3, r24	; 0x03
    243e:	9c 83       	std	Y+4, r25	; 0x04
    2440:	ad 83       	std	Y+5, r26	; 0x05
    2442:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    2444:	8b 81       	ldd	r24, Y+3	; 0x03
    2446:	9c 81       	ldd	r25, Y+4	; 0x04
    2448:	ad 81       	ldd	r26, Y+5	; 0x05
    244a:	be 81       	ldd	r27, Y+6	; 0x06
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	a1 09       	sbc	r26, r1
    2450:	b1 09       	sbc	r27, r1
    2452:	8b 83       	std	Y+3, r24	; 0x03
    2454:	9c 83       	std	Y+4, r25	; 0x04
    2456:	ad 83       	std	Y+5, r26	; 0x05
    2458:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    245a:	8b 81       	ldd	r24, Y+3	; 0x03
    245c:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    245e:	8b 81       	ldd	r24, Y+3	; 0x03
    2460:	9c 81       	ldd	r25, Y+4	; 0x04
    2462:	ad 81       	ldd	r26, Y+5	; 0x05
    2464:	be 81       	ldd	r27, Y+6	; 0x06
    2466:	89 2f       	mov	r24, r25
    2468:	9a 2f       	mov	r25, r26
    246a:	ab 2f       	mov	r26, r27
    246c:	bb 27       	eor	r27, r27
    246e:	8b 83       	std	Y+3, r24	; 0x03
    2470:	9c 83       	std	Y+4, r25	; 0x04
    2472:	ad 83       	std	Y+5, r26	; 0x05
    2474:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    2476:	8b 81       	ldd	r24, Y+3	; 0x03
    2478:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    247a:	eb e4       	ldi	r30, 0x4B	; 75
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	8a 81       	ldd	r24, Y+2	; 0x02
    2480:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    2482:	ea e4       	ldi	r30, 0x4A	; 74
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    248a:	8b e0       	ldi	r24, 0x0B	; 11
    248c:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    248e:	ee e4       	ldi	r30, 0x4E	; 78
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    2496:	e9 e5       	ldi	r30, 0x59	; 89
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	80 61       	ori	r24, 0x10	; 16
    24a2:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    24a4:	e9 e5       	ldi	r30, 0x59	; 89
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	89 81       	ldd	r24, Y+1	; 0x01
    24aa:	80 83       	st	Z, r24
}
    24ac:	26 96       	adiw	r28, 0x06	; 6
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	f8 94       	cli
    24b2:	de bf       	out	0x3e, r29	; 62
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	cd bf       	out	0x3d, r28	; 61
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	08 95       	ret

000024be <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    24be:	0e 94 a6 11 	call	0x234c	; 0x234c <vPortYieldFromTick>
		asm volatile ( "reti" );
    24c2:	18 95       	reti

000024c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <xQueueGenericReset+0x6>
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <xQueueGenericReset+0x8>
    24cc:	0f 92       	push	r0
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	9c 83       	std	Y+4, r25	; 0x04
    24d4:	8b 83       	std	Y+3, r24	; 0x03
    24d6:	6d 83       	std	Y+5, r22	; 0x05
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    24d8:	8b 81       	ldd	r24, Y+3	; 0x03
    24da:	9c 81       	ldd	r25, Y+4	; 0x04
    24dc:	9a 83       	std	Y+2, r25	; 0x02
    24de:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    24e0:	0f b6       	in	r0, 0x3f	; 63
    24e2:	f8 94       	cli
    24e4:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    24e6:	e9 81       	ldd	r30, Y+1	; 0x01
    24e8:	fa 81       	ldd	r31, Y+2	; 0x02
    24ea:	40 81       	ld	r20, Z
    24ec:	51 81       	ldd	r21, Z+1	; 0x01
    24ee:	e9 81       	ldd	r30, Y+1	; 0x01
    24f0:	fa 81       	ldd	r31, Y+2	; 0x02
    24f2:	83 8d       	ldd	r24, Z+27	; 0x1b
    24f4:	28 2f       	mov	r18, r24
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	e9 81       	ldd	r30, Y+1	; 0x01
    24fa:	fa 81       	ldd	r31, Y+2	; 0x02
    24fc:	84 8d       	ldd	r24, Z+28	; 0x1c
    24fe:	88 2f       	mov	r24, r24
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	bc 01       	movw	r22, r24
    2504:	26 9f       	mul	r18, r22
    2506:	c0 01       	movw	r24, r0
    2508:	27 9f       	mul	r18, r23
    250a:	90 0d       	add	r25, r0
    250c:	36 9f       	mul	r19, r22
    250e:	90 0d       	add	r25, r0
    2510:	11 24       	eor	r1, r1
    2512:	84 0f       	add	r24, r20
    2514:	95 1f       	adc	r25, r21
    2516:	e9 81       	ldd	r30, Y+1	; 0x01
    2518:	fa 81       	ldd	r31, Y+2	; 0x02
    251a:	93 83       	std	Z+3, r25	; 0x03
    251c:	82 83       	std	Z+2, r24	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    251e:	e9 81       	ldd	r30, Y+1	; 0x01
    2520:	fa 81       	ldd	r31, Y+2	; 0x02
    2522:	12 8e       	std	Z+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2524:	e9 81       	ldd	r30, Y+1	; 0x01
    2526:	fa 81       	ldd	r31, Y+2	; 0x02
    2528:	80 81       	ld	r24, Z
    252a:	91 81       	ldd	r25, Z+1	; 0x01
    252c:	e9 81       	ldd	r30, Y+1	; 0x01
    252e:	fa 81       	ldd	r31, Y+2	; 0x02
    2530:	95 83       	std	Z+5, r25	; 0x05
    2532:	84 83       	std	Z+4, r24	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    2534:	e9 81       	ldd	r30, Y+1	; 0x01
    2536:	fa 81       	ldd	r31, Y+2	; 0x02
    2538:	40 81       	ld	r20, Z
    253a:	51 81       	ldd	r21, Z+1	; 0x01
    253c:	e9 81       	ldd	r30, Y+1	; 0x01
    253e:	fa 81       	ldd	r31, Y+2	; 0x02
    2540:	83 8d       	ldd	r24, Z+27	; 0x1b
    2542:	88 2f       	mov	r24, r24
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	9c 01       	movw	r18, r24
    2548:	21 50       	subi	r18, 0x01	; 1
    254a:	30 40       	sbci	r19, 0x00	; 0
    254c:	e9 81       	ldd	r30, Y+1	; 0x01
    254e:	fa 81       	ldd	r31, Y+2	; 0x02
    2550:	84 8d       	ldd	r24, Z+28	; 0x1c
    2552:	88 2f       	mov	r24, r24
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	bc 01       	movw	r22, r24
    2558:	26 9f       	mul	r18, r22
    255a:	c0 01       	movw	r24, r0
    255c:	27 9f       	mul	r18, r23
    255e:	90 0d       	add	r25, r0
    2560:	36 9f       	mul	r19, r22
    2562:	90 0d       	add	r25, r0
    2564:	11 24       	eor	r1, r1
    2566:	84 0f       	add	r24, r20
    2568:	95 1f       	adc	r25, r21
    256a:	e9 81       	ldd	r30, Y+1	; 0x01
    256c:	fa 81       	ldd	r31, Y+2	; 0x02
    256e:	97 83       	std	Z+7, r25	; 0x07
    2570:	86 83       	std	Z+6, r24	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
    2572:	e9 81       	ldd	r30, Y+1	; 0x01
    2574:	fa 81       	ldd	r31, Y+2	; 0x02
    2576:	8f ef       	ldi	r24, 0xFF	; 255
    2578:	85 8f       	std	Z+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
    257a:	e9 81       	ldd	r30, Y+1	; 0x01
    257c:	fa 81       	ldd	r31, Y+2	; 0x02
    257e:	8f ef       	ldi	r24, 0xFF	; 255
    2580:	86 8f       	std	Z+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    2582:	8d 81       	ldd	r24, Y+5	; 0x05
    2584:	88 23       	and	r24, r24
    2586:	79 f4       	brne	.+30     	; 0x25a6 <xQueueGenericReset+0xe2>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2588:	e9 81       	ldd	r30, Y+1	; 0x01
    258a:	fa 81       	ldd	r31, Y+2	; 0x02
    258c:	80 85       	ldd	r24, Z+8	; 0x08
    258e:	88 23       	and	r24, r24
    2590:	a1 f0       	breq	.+40     	; 0x25ba <xQueueGenericReset+0xf6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	9a 81       	ldd	r25, Y+2	; 0x02
    2596:	08 96       	adiw	r24, 0x08	; 8
    2598:	0e 94 05 23 	call	0x460a	; 0x460a <xTaskRemoveFromEventList>
    259c:	88 23       	and	r24, r24
    259e:	69 f0       	breq	.+26     	; 0x25ba <xQueueGenericReset+0xf6>
				{
					queueYIELD_IF_USING_PREEMPTION();
    25a0:	0e 94 4d 11 	call	0x229a	; 0x229a <vPortYield>
    25a4:	0a c0       	rjmp	.+20     	; 0x25ba <xQueueGenericReset+0xf6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	9a 81       	ldd	r25, Y+2	; 0x02
    25aa:	08 96       	adiw	r24, 0x08	; 8
    25ac:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	9a 81       	ldd	r25, Y+2	; 0x02
    25b4:	41 96       	adiw	r24, 0x11	; 17
    25b6:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    25ba:	0f 90       	pop	r0
    25bc:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    25be:	81 e0       	ldi	r24, 0x01	; 1
}
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    25d0:	0f 93       	push	r16
    25d2:	1f 93       	push	r17
    25d4:	df 93       	push	r29
    25d6:	cf 93       	push	r28
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	29 97       	sbiw	r28, 0x09	; 9
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	f8 94       	cli
    25e2:	de bf       	out	0x3e, r29	; 62
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	cd bf       	out	0x3d, r28	; 61
    25e8:	8f 83       	std	Y+7, r24	; 0x07
    25ea:	68 87       	std	Y+8, r22	; 0x08
    25ec:	49 87       	std	Y+9, r20	; 0x09
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    25ee:	88 85       	ldd	r24, Y+8	; 0x08
    25f0:	88 23       	and	r24, r24
    25f2:	19 f4       	brne	.+6      	; 0x25fa <xQueueGenericCreate+0x2a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    25f4:	1c 82       	std	Y+4, r1	; 0x04
    25f6:	1b 82       	std	Y+3, r1	; 0x03
    25f8:	10 c0       	rjmp	.+32     	; 0x261a <xQueueGenericCreate+0x4a>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    25fa:	8f 81       	ldd	r24, Y+7	; 0x07
    25fc:	28 2f       	mov	r18, r24
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	88 85       	ldd	r24, Y+8	; 0x08
    2602:	88 2f       	mov	r24, r24
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	ac 01       	movw	r20, r24
    2608:	24 9f       	mul	r18, r20
    260a:	c0 01       	movw	r24, r0
    260c:	25 9f       	mul	r18, r21
    260e:	90 0d       	add	r25, r0
    2610:	34 9f       	mul	r19, r20
    2612:	90 0d       	add	r25, r0
    2614:	11 24       	eor	r1, r1
    2616:	9c 83       	std	Y+4, r25	; 0x04
    2618:	8b 83       	std	Y+3, r24	; 0x03
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    261a:	8b 81       	ldd	r24, Y+3	; 0x03
    261c:	9c 81       	ldd	r25, Y+4	; 0x04
    261e:	4f 96       	adiw	r24, 0x1f	; 31
    2620:	0e 94 bc 0c 	call	0x1978	; 0x1978 <pvPortMalloc>
    2624:	9e 83       	std	Y+6, r25	; 0x06
    2626:	8d 83       	std	Y+5, r24	; 0x05

		if( pxNewQueue != NULL )
    2628:	8d 81       	ldd	r24, Y+5	; 0x05
    262a:	9e 81       	ldd	r25, Y+6	; 0x06
    262c:	00 97       	sbiw	r24, 0x00	; 0
    262e:	81 f0       	breq	.+32     	; 0x2650 <xQueueGenericCreate+0x80>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    2630:	8d 81       	ldd	r24, Y+5	; 0x05
    2632:	9e 81       	ldd	r25, Y+6	; 0x06
    2634:	4f 96       	adiw	r24, 0x1f	; 31
    2636:	9a 83       	std	Y+2, r25	; 0x02
    2638:	89 83       	std	Y+1, r24	; 0x01
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    263a:	29 81       	ldd	r18, Y+1	; 0x01
    263c:	3a 81       	ldd	r19, Y+2	; 0x02
    263e:	ed 81       	ldd	r30, Y+5	; 0x05
    2640:	fe 81       	ldd	r31, Y+6	; 0x06
    2642:	8f 81       	ldd	r24, Y+7	; 0x07
    2644:	68 85       	ldd	r22, Y+8	; 0x08
    2646:	a9 01       	movw	r20, r18
    2648:	29 85       	ldd	r18, Y+9	; 0x09
    264a:	8f 01       	movw	r16, r30
    264c:	0e 94 35 13 	call	0x266a	; 0x266a <prvInitialiseNewQueue>
		}

		return pxNewQueue;
    2650:	8d 81       	ldd	r24, Y+5	; 0x05
    2652:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    2654:	29 96       	adiw	r28, 0x09	; 9
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	de bf       	out	0x3e, r29	; 62
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	cd bf       	out	0x3d, r28	; 61
    2660:	cf 91       	pop	r28
    2662:	df 91       	pop	r29
    2664:	1f 91       	pop	r17
    2666:	0f 91       	pop	r16
    2668:	08 95       	ret

0000266a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    266a:	0f 93       	push	r16
    266c:	1f 93       	push	r17
    266e:	df 93       	push	r29
    2670:	cf 93       	push	r28
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	27 97       	sbiw	r28, 0x07	; 7
    2678:	0f b6       	in	r0, 0x3f	; 63
    267a:	f8 94       	cli
    267c:	de bf       	out	0x3e, r29	; 62
    267e:	0f be       	out	0x3f, r0	; 63
    2680:	cd bf       	out	0x3d, r28	; 61
    2682:	89 83       	std	Y+1, r24	; 0x01
    2684:	6a 83       	std	Y+2, r22	; 0x02
    2686:	5c 83       	std	Y+4, r21	; 0x04
    2688:	4b 83       	std	Y+3, r20	; 0x03
    268a:	2d 83       	std	Y+5, r18	; 0x05
    268c:	1f 83       	std	Y+7, r17	; 0x07
    268e:	0e 83       	std	Y+6, r16	; 0x06
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    2690:	8a 81       	ldd	r24, Y+2	; 0x02
    2692:	88 23       	and	r24, r24
    2694:	39 f4       	brne	.+14     	; 0x26a4 <prvInitialiseNewQueue+0x3a>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    2696:	8e 81       	ldd	r24, Y+6	; 0x06
    2698:	9f 81       	ldd	r25, Y+7	; 0x07
    269a:	ee 81       	ldd	r30, Y+6	; 0x06
    269c:	ff 81       	ldd	r31, Y+7	; 0x07
    269e:	91 83       	std	Z+1, r25	; 0x01
    26a0:	80 83       	st	Z, r24
    26a2:	06 c0       	rjmp	.+12     	; 0x26b0 <prvInitialiseNewQueue+0x46>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    26a4:	8b 81       	ldd	r24, Y+3	; 0x03
    26a6:	9c 81       	ldd	r25, Y+4	; 0x04
    26a8:	ee 81       	ldd	r30, Y+6	; 0x06
    26aa:	ff 81       	ldd	r31, Y+7	; 0x07
    26ac:	91 83       	std	Z+1, r25	; 0x01
    26ae:	80 83       	st	Z, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    26b0:	ee 81       	ldd	r30, Y+6	; 0x06
    26b2:	ff 81       	ldd	r31, Y+7	; 0x07
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	83 8f       	std	Z+27, r24	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
    26b8:	ee 81       	ldd	r30, Y+6	; 0x06
    26ba:	ff 81       	ldd	r31, Y+7	; 0x07
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	84 8f       	std	Z+28, r24	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    26c0:	8e 81       	ldd	r24, Y+6	; 0x06
    26c2:	9f 81       	ldd	r25, Y+7	; 0x07
    26c4:	61 e0       	ldi	r22, 0x01	; 1
    26c6:	0e 94 62 12 	call	0x24c4	; 0x24c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    26ca:	27 96       	adiw	r28, 0x07	; 7
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	de bf       	out	0x3e, r29	; 62
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	cd bf       	out	0x3d, r28	; 61
    26d6:	cf 91       	pop	r28
    26d8:	df 91       	pop	r29
    26da:	1f 91       	pop	r17
    26dc:	0f 91       	pop	r16
    26de:	08 95       	ret

000026e0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <prvInitialiseMutex+0x6>
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	9a 83       	std	Y+2, r25	; 0x02
    26ec:	89 83       	std	Y+1, r24	; 0x01
		if( pxNewQueue != NULL )
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	9a 81       	ldd	r25, Y+2	; 0x02
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	a1 f0       	breq	.+40     	; 0x271e <prvInitialiseMutex+0x3e>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    26f6:	e9 81       	ldd	r30, Y+1	; 0x01
    26f8:	fa 81       	ldd	r31, Y+2	; 0x02
    26fa:	13 82       	std	Z+3, r1	; 0x03
    26fc:	12 82       	std	Z+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    26fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2700:	fa 81       	ldd	r31, Y+2	; 0x02
    2702:	11 82       	std	Z+1, r1	; 0x01
    2704:	10 82       	st	Z, r1

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    2706:	e9 81       	ldd	r30, Y+1	; 0x01
    2708:	fa 81       	ldd	r31, Y+2	; 0x02
    270a:	16 82       	std	Z+6, r1	; 0x06

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	9a 81       	ldd	r25, Y+2	; 0x02
    2710:	60 e0       	ldi	r22, 0x00	; 0
    2712:	70 e0       	ldi	r23, 0x00	; 0
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	50 e0       	ldi	r21, 0x00	; 0
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	0e 94 b4 13 	call	0x2768	; 0x2768 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    271e:	0f 90       	pop	r0
    2720:	0f 90       	pop	r0
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	08 95       	ret

00002728 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    2728:	df 93       	push	r29
    272a:	cf 93       	push	r28
    272c:	00 d0       	rcall	.+0      	; 0x272e <xQueueCreateMutex+0x6>
    272e:	00 d0       	rcall	.+0      	; 0x2730 <xQueueCreateMutex+0x8>
    2730:	0f 92       	push	r0
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
    2736:	8d 83       	std	Y+5, r24	; 0x05
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	8a 83       	std	Y+2, r24	; 0x02
    273c:	19 82       	std	Y+1, r1	; 0x01

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    273e:	8a 81       	ldd	r24, Y+2	; 0x02
    2740:	69 81       	ldd	r22, Y+1	; 0x01
    2742:	4d 81       	ldd	r20, Y+5	; 0x05
    2744:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <xQueueGenericCreate>
    2748:	9c 83       	std	Y+4, r25	; 0x04
    274a:	8b 83       	std	Y+3, r24	; 0x03
		prvInitialiseMutex( pxNewQueue );
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	9c 81       	ldd	r25, Y+4	; 0x04
    2750:	0e 94 70 13 	call	0x26e0	; 0x26e0 <prvInitialiseMutex>

		return pxNewQueue;
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	9c 81       	ldd	r25, Y+4	; 0x04
	}
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	cf 91       	pop	r28
    2764:	df 91       	pop	r29
    2766:	08 95       	ret

00002768 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	2f 97       	sbiw	r28, 0x0f	; 15
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
    277c:	99 87       	std	Y+9, r25	; 0x09
    277e:	88 87       	std	Y+8, r24	; 0x08
    2780:	7b 87       	std	Y+11, r23	; 0x0b
    2782:	6a 87       	std	Y+10, r22	; 0x0a
    2784:	5d 87       	std	Y+13, r21	; 0x0d
    2786:	4c 87       	std	Y+12, r20	; 0x0c
    2788:	2e 87       	std	Y+14, r18	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    278a:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    278c:	88 85       	ldd	r24, Y+8	; 0x08
    278e:	99 85       	ldd	r25, Y+9	; 0x09
    2790:	9a 83       	std	Y+2, r25	; 0x02
    2792:	89 83       	std	Y+1, r24	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2794:	0f b6       	in	r0, 0x3f	; 63
    2796:	f8 94       	cli
    2798:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    279a:	e9 81       	ldd	r30, Y+1	; 0x01
    279c:	fa 81       	ldd	r31, Y+2	; 0x02
    279e:	92 8d       	ldd	r25, Z+26	; 0x1a
    27a0:	e9 81       	ldd	r30, Y+1	; 0x01
    27a2:	fa 81       	ldd	r31, Y+2	; 0x02
    27a4:	83 8d       	ldd	r24, Z+27	; 0x1b
    27a6:	98 17       	cp	r25, r24
    27a8:	18 f0       	brcs	.+6      	; 0x27b0 <xQueueGenericSend+0x48>
    27aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    27ac:	82 30       	cpi	r24, 0x02	; 2
    27ae:	11 f5       	brne	.+68     	; 0x27f4 <xQueueGenericSend+0x8c>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	9a 81       	ldd	r25, Y+2	; 0x02
    27b4:	2a 85       	ldd	r18, Y+10	; 0x0a
    27b6:	3b 85       	ldd	r19, Y+11	; 0x0b
    27b8:	b9 01       	movw	r22, r18
    27ba:	4e 85       	ldd	r20, Y+14	; 0x0e
    27bc:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <prvCopyDataToQueue>
    27c0:	8b 83       	std	Y+3, r24	; 0x03
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    27c2:	e9 81       	ldd	r30, Y+1	; 0x01
    27c4:	fa 81       	ldd	r31, Y+2	; 0x02
    27c6:	81 89       	ldd	r24, Z+17	; 0x11
    27c8:	88 23       	and	r24, r24
    27ca:	51 f0       	breq	.+20     	; 0x27e0 <xQueueGenericSend+0x78>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	41 96       	adiw	r24, 0x11	; 17
    27d2:	0e 94 05 23 	call	0x460a	; 0x460a <xTaskRemoveFromEventList>
    27d6:	88 23       	and	r24, r24
    27d8:	41 f0       	breq	.+16     	; 0x27ea <xQueueGenericSend+0x82>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    27da:	0e 94 4d 11 	call	0x229a	; 0x229a <vPortYield>
    27de:	05 c0       	rjmp	.+10     	; 0x27ea <xQueueGenericSend+0x82>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	88 23       	and	r24, r24
    27e4:	11 f0       	breq	.+4      	; 0x27ea <xQueueGenericSend+0x82>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    27e6:	0e 94 4d 11 	call	0x229a	; 0x229a <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    27ea:	0f 90       	pop	r0
    27ec:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	8f 87       	std	Y+15, r24	; 0x0f
    27f2:	5c c0       	rjmp	.+184    	; 0x28ac <xQueueGenericSend+0x144>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    27f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    27f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	21 f4       	brne	.+8      	; 0x2804 <xQueueGenericSend+0x9c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    27fc:	0f 90       	pop	r0
    27fe:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    2800:	1f 86       	std	Y+15, r1	; 0x0f
    2802:	54 c0       	rjmp	.+168    	; 0x28ac <xQueueGenericSend+0x144>
				}
				else if( xEntryTimeSet == pdFALSE )
    2804:	8c 81       	ldd	r24, Y+4	; 0x04
    2806:	88 23       	and	r24, r24
    2808:	31 f4       	brne	.+12     	; 0x2816 <xQueueGenericSend+0xae>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    280a:	ce 01       	movw	r24, r28
    280c:	05 96       	adiw	r24, 0x05	; 5
    280e:	0e 94 d5 23 	call	0x47aa	; 0x47aa <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    2816:	0f 90       	pop	r0
    2818:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    281a:	0e 94 7e 20 	call	0x40fc	; 0x40fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	0f 92       	push	r0
    2824:	e9 81       	ldd	r30, Y+1	; 0x01
    2826:	fa 81       	ldd	r31, Y+2	; 0x02
    2828:	85 8d       	ldd	r24, Z+29	; 0x1d
    282a:	8f 3f       	cpi	r24, 0xFF	; 255
    282c:	19 f4       	brne	.+6      	; 0x2834 <xQueueGenericSend+0xcc>
    282e:	e9 81       	ldd	r30, Y+1	; 0x01
    2830:	fa 81       	ldd	r31, Y+2	; 0x02
    2832:	15 8e       	std	Z+29, r1	; 0x1d
    2834:	e9 81       	ldd	r30, Y+1	; 0x01
    2836:	fa 81       	ldd	r31, Y+2	; 0x02
    2838:	86 8d       	ldd	r24, Z+30	; 0x1e
    283a:	8f 3f       	cpi	r24, 0xFF	; 255
    283c:	19 f4       	brne	.+6      	; 0x2844 <xQueueGenericSend+0xdc>
    283e:	e9 81       	ldd	r30, Y+1	; 0x01
    2840:	fa 81       	ldd	r31, Y+2	; 0x02
    2842:	16 8e       	std	Z+30, r1	; 0x1e
    2844:	0f 90       	pop	r0
    2846:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2848:	ce 01       	movw	r24, r28
    284a:	05 96       	adiw	r24, 0x05	; 5
    284c:	9e 01       	movw	r18, r28
    284e:	24 5f       	subi	r18, 0xF4	; 244
    2850:	3f 4f       	sbci	r19, 0xFF	; 255
    2852:	b9 01       	movw	r22, r18
    2854:	0e 94 ee 23 	call	0x47dc	; 0x47dc <xTaskCheckForTimeOut>
    2858:	88 23       	and	r24, r24
    285a:	09 f5       	brne	.+66     	; 0x289e <xQueueGenericSend+0x136>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	9a 81       	ldd	r25, Y+2	; 0x02
    2860:	0e 94 73 18 	call	0x30e6	; 0x30e6 <prvIsQueueFull>
    2864:	88 23       	and	r24, r24
    2866:	a1 f0       	breq	.+40     	; 0x2890 <xQueueGenericSend+0x128>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	9a 81       	ldd	r25, Y+2	; 0x02
    286c:	08 96       	adiw	r24, 0x08	; 8
    286e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2870:	3d 85       	ldd	r19, Y+13	; 0x0d
    2872:	b9 01       	movw	r22, r18
    2874:	0e 94 b3 22 	call	0x4566	; 0x4566 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	9a 81       	ldd	r25, Y+2	; 0x02
    287c:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2880:	0e 94 8a 20 	call	0x4114	; 0x4114 <xTaskResumeAll>
    2884:	88 23       	and	r24, r24
    2886:	09 f0       	breq	.+2      	; 0x288a <xQueueGenericSend+0x122>
    2888:	85 cf       	rjmp	.-246    	; 0x2794 <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
    288a:	0e 94 4d 11 	call	0x229a	; 0x229a <vPortYield>
    288e:	82 cf       	rjmp	.-252    	; 0x2794 <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	9a 81       	ldd	r25, Y+2	; 0x02
    2894:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2898:	0e 94 8a 20 	call	0x4114	; 0x4114 <xTaskResumeAll>
    289c:	7b cf       	rjmp	.-266    	; 0x2794 <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    289e:	89 81       	ldd	r24, Y+1	; 0x01
    28a0:	9a 81       	ldd	r25, Y+2	; 0x02
    28a2:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    28a6:	0e 94 8a 20 	call	0x4114	; 0x4114 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    28aa:	1f 86       	std	Y+15, r1	; 0x0f
    28ac:	8f 85       	ldd	r24, Y+15	; 0x0f
		}
	}
}
    28ae:	2f 96       	adiw	r28, 0x0f	; 15
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	cd bf       	out	0x3d, r28	; 61
    28ba:	cf 91       	pop	r28
    28bc:	df 91       	pop	r29
    28be:	08 95       	ret

000028c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    28c0:	df 93       	push	r29
    28c2:	cf 93       	push	r28
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	2c 97       	sbiw	r28, 0x0c	; 12
    28ca:	0f b6       	in	r0, 0x3f	; 63
    28cc:	f8 94       	cli
    28ce:	de bf       	out	0x3e, r29	; 62
    28d0:	0f be       	out	0x3f, r0	; 63
    28d2:	cd bf       	out	0x3d, r28	; 61
    28d4:	9f 83       	std	Y+7, r25	; 0x07
    28d6:	8e 83       	std	Y+6, r24	; 0x06
    28d8:	79 87       	std	Y+9, r23	; 0x09
    28da:	68 87       	std	Y+8, r22	; 0x08
    28dc:	5b 87       	std	Y+11, r21	; 0x0b
    28de:	4a 87       	std	Y+10, r20	; 0x0a
    28e0:	2c 87       	std	Y+12, r18	; 0x0c
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    28e2:	8e 81       	ldd	r24, Y+6	; 0x06
    28e4:	9f 81       	ldd	r25, Y+7	; 0x07
    28e6:	9b 83       	std	Y+3, r25	; 0x03
    28e8:	8a 83       	std	Y+2, r24	; 0x02
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    28ea:	1c 82       	std	Y+4, r1	; 0x04
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    28ec:	ea 81       	ldd	r30, Y+2	; 0x02
    28ee:	fb 81       	ldd	r31, Y+3	; 0x03
    28f0:	92 8d       	ldd	r25, Z+26	; 0x1a
    28f2:	ea 81       	ldd	r30, Y+2	; 0x02
    28f4:	fb 81       	ldd	r31, Y+3	; 0x03
    28f6:	83 8d       	ldd	r24, Z+27	; 0x1b
    28f8:	98 17       	cp	r25, r24
    28fa:	18 f0       	brcs	.+6      	; 0x2902 <xQueueGenericSendFromISR+0x42>
    28fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    28fe:	82 30       	cpi	r24, 0x02	; 2
    2900:	61 f5       	brne	.+88     	; 0x295a <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    2902:	ea 81       	ldd	r30, Y+2	; 0x02
    2904:	fb 81       	ldd	r31, Y+3	; 0x03
    2906:	86 8d       	ldd	r24, Z+30	; 0x1e
    2908:	89 83       	std	Y+1, r24	; 0x01
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    290a:	8a 81       	ldd	r24, Y+2	; 0x02
    290c:	9b 81       	ldd	r25, Y+3	; 0x03
    290e:	28 85       	ldd	r18, Y+8	; 0x08
    2910:	39 85       	ldd	r19, Y+9	; 0x09
    2912:	b9 01       	movw	r22, r18
    2914:	4c 85       	ldd	r20, Y+12	; 0x0c
    2916:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	8f 3f       	cpi	r24, 0xFF	; 255
    291e:	a9 f4       	brne	.+42     	; 0x294a <xQueueGenericSendFromISR+0x8a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2920:	ea 81       	ldd	r30, Y+2	; 0x02
    2922:	fb 81       	ldd	r31, Y+3	; 0x03
    2924:	81 89       	ldd	r24, Z+17	; 0x11
    2926:	88 23       	and	r24, r24
    2928:	a9 f0       	breq	.+42     	; 0x2954 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    292a:	8a 81       	ldd	r24, Y+2	; 0x02
    292c:	9b 81       	ldd	r25, Y+3	; 0x03
    292e:	41 96       	adiw	r24, 0x11	; 17
    2930:	0e 94 05 23 	call	0x460a	; 0x460a <xTaskRemoveFromEventList>
    2934:	88 23       	and	r24, r24
    2936:	71 f0       	breq	.+28     	; 0x2954 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2938:	8a 85       	ldd	r24, Y+10	; 0x0a
    293a:	9b 85       	ldd	r25, Y+11	; 0x0b
    293c:	00 97       	sbiw	r24, 0x00	; 0
    293e:	51 f0       	breq	.+20     	; 0x2954 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2940:	ea 85       	ldd	r30, Y+10	; 0x0a
    2942:	fb 85       	ldd	r31, Y+11	; 0x0b
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	80 83       	st	Z, r24
    2948:	05 c0       	rjmp	.+10     	; 0x2954 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	8f 5f       	subi	r24, 0xFF	; 255
    294e:	ea 81       	ldd	r30, Y+2	; 0x02
    2950:	fb 81       	ldd	r31, Y+3	; 0x03
    2952:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	8d 83       	std	Y+5, r24	; 0x05
    2958:	01 c0       	rjmp	.+2      	; 0x295c <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    295a:	1d 82       	std	Y+5, r1	; 0x05
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    295c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    295e:	2c 96       	adiw	r28, 0x0c	; 12
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
    296a:	cf 91       	pop	r28
    296c:	df 91       	pop	r29
    296e:	08 95       	ret

00002970 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    2970:	df 93       	push	r29
    2972:	cf 93       	push	r28
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
    2978:	2a 97       	sbiw	r28, 0x0a	; 10
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	f8 94       	cli
    297e:	de bf       	out	0x3e, r29	; 62
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	cd bf       	out	0x3d, r28	; 61
    2984:	98 87       	std	Y+8, r25	; 0x08
    2986:	8f 83       	std	Y+7, r24	; 0x07
    2988:	7a 87       	std	Y+10, r23	; 0x0a
    298a:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    298c:	8f 81       	ldd	r24, Y+7	; 0x07
    298e:	98 85       	ldd	r25, Y+8	; 0x08
    2990:	9c 83       	std	Y+4, r25	; 0x04
    2992:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2994:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2996:	eb 81       	ldd	r30, Y+3	; 0x03
    2998:	fc 81       	ldd	r31, Y+4	; 0x04
    299a:	82 8d       	ldd	r24, Z+26	; 0x1a
    299c:	8a 83       	std	Y+2, r24	; 0x02

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    299e:	eb 81       	ldd	r30, Y+3	; 0x03
    29a0:	fc 81       	ldd	r31, Y+4	; 0x04
    29a2:	93 8d       	ldd	r25, Z+27	; 0x1b
    29a4:	8a 81       	ldd	r24, Y+2	; 0x02
    29a6:	89 17       	cp	r24, r25
    29a8:	48 f5       	brcc	.+82     	; 0x29fc <xQueueGiveFromISR+0x8c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    29aa:	eb 81       	ldd	r30, Y+3	; 0x03
    29ac:	fc 81       	ldd	r31, Y+4	; 0x04
    29ae:	86 8d       	ldd	r24, Z+30	; 0x1e
    29b0:	89 83       	std	Y+1, r24	; 0x01
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    29b2:	8a 81       	ldd	r24, Y+2	; 0x02
    29b4:	8f 5f       	subi	r24, 0xFF	; 255
    29b6:	eb 81       	ldd	r30, Y+3	; 0x03
    29b8:	fc 81       	ldd	r31, Y+4	; 0x04
    29ba:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	8f 3f       	cpi	r24, 0xFF	; 255
    29c0:	a9 f4       	brne	.+42     	; 0x29ec <xQueueGiveFromISR+0x7c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    29c2:	eb 81       	ldd	r30, Y+3	; 0x03
    29c4:	fc 81       	ldd	r31, Y+4	; 0x04
    29c6:	81 89       	ldd	r24, Z+17	; 0x11
    29c8:	88 23       	and	r24, r24
    29ca:	a9 f0       	breq	.+42     	; 0x29f6 <xQueueGiveFromISR+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
    29ce:	9c 81       	ldd	r25, Y+4	; 0x04
    29d0:	41 96       	adiw	r24, 0x11	; 17
    29d2:	0e 94 05 23 	call	0x460a	; 0x460a <xTaskRemoveFromEventList>
    29d6:	88 23       	and	r24, r24
    29d8:	71 f0       	breq	.+28     	; 0x29f6 <xQueueGiveFromISR+0x86>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    29da:	89 85       	ldd	r24, Y+9	; 0x09
    29dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	51 f0       	breq	.+20     	; 0x29f6 <xQueueGiveFromISR+0x86>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    29e2:	e9 85       	ldd	r30, Y+9	; 0x09
    29e4:	fa 85       	ldd	r31, Y+10	; 0x0a
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	80 83       	st	Z, r24
    29ea:	05 c0       	rjmp	.+10     	; 0x29f6 <xQueueGiveFromISR+0x86>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	8f 5f       	subi	r24, 0xFF	; 255
    29f0:	eb 81       	ldd	r30, Y+3	; 0x03
    29f2:	fc 81       	ldd	r31, Y+4	; 0x04
    29f4:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	8e 83       	std	Y+6, r24	; 0x06
    29fa:	01 c0       	rjmp	.+2      	; 0x29fe <xQueueGiveFromISR+0x8e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    29fc:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    29fe:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2a00:	2a 96       	adiw	r28, 0x0a	; 10
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	f8 94       	cli
    2a06:	de bf       	out	0x3e, r29	; 62
    2a08:	0f be       	out	0x3f, r0	; 63
    2a0a:	cd bf       	out	0x3d, r28	; 61
    2a0c:	cf 91       	pop	r28
    2a0e:	df 91       	pop	r29
    2a10:	08 95       	ret

00002a12 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	61 97       	sbiw	r28, 0x11	; 17
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	cd bf       	out	0x3d, r28	; 61
    2a26:	9b 87       	std	Y+11, r25	; 0x0b
    2a28:	8a 87       	std	Y+10, r24	; 0x0a
    2a2a:	7d 87       	std	Y+13, r23	; 0x0d
    2a2c:	6c 87       	std	Y+12, r22	; 0x0c
    2a2e:	5f 87       	std	Y+15, r21	; 0x0f
    2a30:	4e 87       	std	Y+14, r20	; 0x0e
    2a32:	28 8b       	std	Y+16, r18	; 0x10
BaseType_t xEntryTimeSet = pdFALSE;
    2a34:	1e 82       	std	Y+6, r1	; 0x06
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2a36:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a38:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a3a:	9b 83       	std	Y+3, r25	; 0x03
    2a3c:	8a 83       	std	Y+2, r24	; 0x02
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2a3e:	0f b6       	in	r0, 0x3f	; 63
    2a40:	f8 94       	cli
    2a42:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2a44:	ea 81       	ldd	r30, Y+2	; 0x02
    2a46:	fb 81       	ldd	r31, Y+3	; 0x03
    2a48:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a4a:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	88 23       	and	r24, r24
    2a50:	09 f4       	brne	.+2      	; 0x2a54 <xQueueGenericReceive+0x42>
    2a52:	49 c0       	rjmp	.+146    	; 0x2ae6 <xQueueGenericReceive+0xd4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    2a54:	ea 81       	ldd	r30, Y+2	; 0x02
    2a56:	fb 81       	ldd	r31, Y+3	; 0x03
    2a58:	86 81       	ldd	r24, Z+6	; 0x06
    2a5a:	97 81       	ldd	r25, Z+7	; 0x07
    2a5c:	9d 83       	std	Y+5, r25	; 0x05
    2a5e:	8c 83       	std	Y+4, r24	; 0x04

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2a60:	8a 81       	ldd	r24, Y+2	; 0x02
    2a62:	9b 81       	ldd	r25, Y+3	; 0x03
    2a64:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a66:	3d 85       	ldd	r19, Y+13	; 0x0d
    2a68:	b9 01       	movw	r22, r18
    2a6a:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2a6e:	88 89       	ldd	r24, Y+16	; 0x10
    2a70:	88 23       	and	r24, r24
    2a72:	01 f5       	brne	.+64     	; 0x2ab4 <xQueueGenericReceive+0xa2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	81 50       	subi	r24, 0x01	; 1
    2a78:	ea 81       	ldd	r30, Y+2	; 0x02
    2a7a:	fb 81       	ldd	r31, Y+3	; 0x03
    2a7c:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2a7e:	ea 81       	ldd	r30, Y+2	; 0x02
    2a80:	fb 81       	ldd	r31, Y+3	; 0x03
    2a82:	80 81       	ld	r24, Z
    2a84:	91 81       	ldd	r25, Z+1	; 0x01
    2a86:	00 97       	sbiw	r24, 0x00	; 0
    2a88:	31 f4       	brne	.+12     	; 0x2a96 <xQueueGenericReceive+0x84>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    2a8a:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <pvTaskIncrementMutexHeldCount>
    2a8e:	ea 81       	ldd	r30, Y+2	; 0x02
    2a90:	fb 81       	ldd	r31, Y+3	; 0x03
    2a92:	93 83       	std	Z+3, r25	; 0x03
    2a94:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2a96:	ea 81       	ldd	r30, Y+2	; 0x02
    2a98:	fb 81       	ldd	r31, Y+3	; 0x03
    2a9a:	80 85       	ldd	r24, Z+8	; 0x08
    2a9c:	88 23       	and	r24, r24
    2a9e:	f1 f0       	breq	.+60     	; 0x2adc <xQueueGenericReceive+0xca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa4:	08 96       	adiw	r24, 0x08	; 8
    2aa6:	0e 94 05 23 	call	0x460a	; 0x460a <xTaskRemoveFromEventList>
    2aaa:	88 23       	and	r24, r24
    2aac:	b9 f0       	breq	.+46     	; 0x2adc <xQueueGenericReceive+0xca>
						{
							queueYIELD_IF_USING_PREEMPTION();
    2aae:	0e 94 4d 11 	call	0x229a	; 0x229a <vPortYield>
    2ab2:	14 c0       	rjmp	.+40     	; 0x2adc <xQueueGenericReceive+0xca>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    2ab4:	ea 81       	ldd	r30, Y+2	; 0x02
    2ab6:	fb 81       	ldd	r31, Y+3	; 0x03
    2ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aba:	9d 81       	ldd	r25, Y+5	; 0x05
    2abc:	97 83       	std	Z+7, r25	; 0x07
    2abe:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2ac0:	ea 81       	ldd	r30, Y+2	; 0x02
    2ac2:	fb 81       	ldd	r31, Y+3	; 0x03
    2ac4:	81 89       	ldd	r24, Z+17	; 0x11
    2ac6:	88 23       	and	r24, r24
    2ac8:	49 f0       	breq	.+18     	; 0x2adc <xQueueGenericReceive+0xca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2aca:	8a 81       	ldd	r24, Y+2	; 0x02
    2acc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ace:	41 96       	adiw	r24, 0x11	; 17
    2ad0:	0e 94 05 23 	call	0x460a	; 0x460a <xTaskRemoveFromEventList>
    2ad4:	88 23       	and	r24, r24
    2ad6:	11 f0       	breq	.+4      	; 0x2adc <xQueueGenericReceive+0xca>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    2ad8:	0e 94 4d 11 	call	0x229a	; 0x229a <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    2adc:	0f 90       	pop	r0
    2ade:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	89 8b       	std	Y+17, r24	; 0x11
    2ae4:	74 c0       	rjmp	.+232    	; 0x2bce <xQueueGenericReceive+0x1bc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    2ae6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ae8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2aea:	00 97       	sbiw	r24, 0x00	; 0
    2aec:	21 f4       	brne	.+8      	; 0x2af6 <xQueueGenericReceive+0xe4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2aee:	0f 90       	pop	r0
    2af0:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    2af2:	19 8a       	std	Y+17, r1	; 0x11
    2af4:	6c c0       	rjmp	.+216    	; 0x2bce <xQueueGenericReceive+0x1bc>
				}
				else if( xEntryTimeSet == pdFALSE )
    2af6:	8e 81       	ldd	r24, Y+6	; 0x06
    2af8:	88 23       	and	r24, r24
    2afa:	31 f4       	brne	.+12     	; 0x2b08 <xQueueGenericReceive+0xf6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2afc:	ce 01       	movw	r24, r28
    2afe:	07 96       	adiw	r24, 0x07	; 7
    2b00:	0e 94 d5 23 	call	0x47aa	; 0x47aa <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	8e 83       	std	Y+6, r24	; 0x06
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    2b08:	0f 90       	pop	r0
    2b0a:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2b0c:	0e 94 7e 20 	call	0x40fc	; 0x40fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	f8 94       	cli
    2b14:	0f 92       	push	r0
    2b16:	ea 81       	ldd	r30, Y+2	; 0x02
    2b18:	fb 81       	ldd	r31, Y+3	; 0x03
    2b1a:	85 8d       	ldd	r24, Z+29	; 0x1d
    2b1c:	8f 3f       	cpi	r24, 0xFF	; 255
    2b1e:	19 f4       	brne	.+6      	; 0x2b26 <xQueueGenericReceive+0x114>
    2b20:	ea 81       	ldd	r30, Y+2	; 0x02
    2b22:	fb 81       	ldd	r31, Y+3	; 0x03
    2b24:	15 8e       	std	Z+29, r1	; 0x1d
    2b26:	ea 81       	ldd	r30, Y+2	; 0x02
    2b28:	fb 81       	ldd	r31, Y+3	; 0x03
    2b2a:	86 8d       	ldd	r24, Z+30	; 0x1e
    2b2c:	8f 3f       	cpi	r24, 0xFF	; 255
    2b2e:	19 f4       	brne	.+6      	; 0x2b36 <xQueueGenericReceive+0x124>
    2b30:	ea 81       	ldd	r30, Y+2	; 0x02
    2b32:	fb 81       	ldd	r31, Y+3	; 0x03
    2b34:	16 8e       	std	Z+30, r1	; 0x1e
    2b36:	0f 90       	pop	r0
    2b38:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2b3a:	ce 01       	movw	r24, r28
    2b3c:	07 96       	adiw	r24, 0x07	; 7
    2b3e:	9e 01       	movw	r18, r28
    2b40:	22 5f       	subi	r18, 0xF2	; 242
    2b42:	3f 4f       	sbci	r19, 0xFF	; 255
    2b44:	b9 01       	movw	r22, r18
    2b46:	0e 94 ee 23 	call	0x47dc	; 0x47dc <xTaskCheckForTimeOut>
    2b4a:	88 23       	and	r24, r24
    2b4c:	91 f5       	brne	.+100    	; 0x2bb2 <xQueueGenericReceive+0x1a0>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b50:	9b 81       	ldd	r25, Y+3	; 0x03
    2b52:	0e 94 3e 18 	call	0x307c	; 0x307c <prvIsQueueEmpty>
    2b56:	88 23       	and	r24, r24
    2b58:	29 f1       	breq	.+74     	; 0x2ba4 <xQueueGenericReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2b5a:	ea 81       	ldd	r30, Y+2	; 0x02
    2b5c:	fb 81       	ldd	r31, Y+3	; 0x03
    2b5e:	80 81       	ld	r24, Z
    2b60:	91 81       	ldd	r25, Z+1	; 0x01
    2b62:	00 97       	sbiw	r24, 0x00	; 0
    2b64:	59 f4       	brne	.+22     	; 0x2b7c <xQueueGenericReceive+0x16a>
					{
						taskENTER_CRITICAL();
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	f8 94       	cli
    2b6a:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2b6c:	ea 81       	ldd	r30, Y+2	; 0x02
    2b6e:	fb 81       	ldd	r31, Y+3	; 0x03
    2b70:	82 81       	ldd	r24, Z+2	; 0x02
    2b72:	93 81       	ldd	r25, Z+3	; 0x03
    2b74:	0e 94 48 25 	call	0x4a90	; 0x4a90 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    2b78:	0f 90       	pop	r0
    2b7a:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b80:	41 96       	adiw	r24, 0x11	; 17
    2b82:	2e 85       	ldd	r18, Y+14	; 0x0e
    2b84:	3f 85       	ldd	r19, Y+15	; 0x0f
    2b86:	b9 01       	movw	r22, r18
    2b88:	0e 94 b3 22 	call	0x4566	; 0x4566 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b90:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2b94:	0e 94 8a 20 	call	0x4114	; 0x4114 <xTaskResumeAll>
    2b98:	88 23       	and	r24, r24
    2b9a:	09 f0       	breq	.+2      	; 0x2b9e <xQueueGenericReceive+0x18c>
    2b9c:	50 cf       	rjmp	.-352    	; 0x2a3e <xQueueGenericReceive+0x2c>
				{
					portYIELD_WITHIN_API();
    2b9e:	0e 94 4d 11 	call	0x229a	; 0x229a <vPortYield>
    2ba2:	4d cf       	rjmp	.-358    	; 0x2a3e <xQueueGenericReceive+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba8:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2bac:	0e 94 8a 20 	call	0x4114	; 0x4114 <xTaskResumeAll>
    2bb0:	46 cf       	rjmp	.-372    	; 0x2a3e <xQueueGenericReceive+0x2c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    2bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb6:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2bba:	0e 94 8a 20 	call	0x4114	; 0x4114 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc2:	0e 94 3e 18 	call	0x307c	; 0x307c <prvIsQueueEmpty>
    2bc6:	88 23       	and	r24, r24
    2bc8:	09 f4       	brne	.+2      	; 0x2bcc <xQueueGenericReceive+0x1ba>
    2bca:	39 cf       	rjmp	.-398    	; 0x2a3e <xQueueGenericReceive+0x2c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    2bcc:	19 8a       	std	Y+17, r1	; 0x11
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    2bce:	89 89       	ldd	r24, Y+17	; 0x11
}
    2bd0:	61 96       	adiw	r28, 0x11	; 17
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	f8 94       	cli
    2bd6:	de bf       	out	0x3e, r29	; 62
    2bd8:	0f be       	out	0x3f, r0	; 63
    2bda:	cd bf       	out	0x3d, r28	; 61
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	08 95       	ret

00002be2 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    2be2:	df 93       	push	r29
    2be4:	cf 93       	push	r28
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	2c 97       	sbiw	r28, 0x0c	; 12
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	de bf       	out	0x3e, r29	; 62
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	cd bf       	out	0x3d, r28	; 61
    2bf6:	98 87       	std	Y+8, r25	; 0x08
    2bf8:	8f 83       	std	Y+7, r24	; 0x07
    2bfa:	7a 87       	std	Y+10, r23	; 0x0a
    2bfc:	69 87       	std	Y+9, r22	; 0x09
    2bfe:	5c 87       	std	Y+12, r21	; 0x0c
    2c00:	4b 87       	std	Y+11, r20	; 0x0b
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2c02:	8f 81       	ldd	r24, Y+7	; 0x07
    2c04:	98 85       	ldd	r25, Y+8	; 0x08
    2c06:	9c 83       	std	Y+4, r25	; 0x04
    2c08:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2c0a:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2c0c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c0e:	fc 81       	ldd	r31, Y+4	; 0x04
    2c10:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c12:	8a 83       	std	Y+2, r24	; 0x02

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    2c14:	8a 81       	ldd	r24, Y+2	; 0x02
    2c16:	88 23       	and	r24, r24
    2c18:	81 f1       	breq	.+96     	; 0x2c7a <xQueueReceiveFromISR+0x98>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    2c1a:	eb 81       	ldd	r30, Y+3	; 0x03
    2c1c:	fc 81       	ldd	r31, Y+4	; 0x04
    2c1e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2c20:	89 83       	std	Y+1, r24	; 0x01

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2c22:	8b 81       	ldd	r24, Y+3	; 0x03
    2c24:	9c 81       	ldd	r25, Y+4	; 0x04
    2c26:	29 85       	ldd	r18, Y+9	; 0x09
    2c28:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c2a:	b9 01       	movw	r22, r18
    2c2c:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    2c30:	8a 81       	ldd	r24, Y+2	; 0x02
    2c32:	81 50       	subi	r24, 0x01	; 1
    2c34:	eb 81       	ldd	r30, Y+3	; 0x03
    2c36:	fc 81       	ldd	r31, Y+4	; 0x04
    2c38:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c3e:	a9 f4       	brne	.+42     	; 0x2c6a <xQueueReceiveFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2c40:	eb 81       	ldd	r30, Y+3	; 0x03
    2c42:	fc 81       	ldd	r31, Y+4	; 0x04
    2c44:	80 85       	ldd	r24, Z+8	; 0x08
    2c46:	88 23       	and	r24, r24
    2c48:	a9 f0       	breq	.+42     	; 0x2c74 <xQueueReceiveFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4e:	08 96       	adiw	r24, 0x08	; 8
    2c50:	0e 94 05 23 	call	0x460a	; 0x460a <xTaskRemoveFromEventList>
    2c54:	88 23       	and	r24, r24
    2c56:	71 f0       	breq	.+28     	; 0x2c74 <xQueueReceiveFromISR+0x92>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    2c58:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c5a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c5c:	00 97       	sbiw	r24, 0x00	; 0
    2c5e:	51 f0       	breq	.+20     	; 0x2c74 <xQueueReceiveFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    2c60:	eb 85       	ldd	r30, Y+11	; 0x0b
    2c62:	fc 85       	ldd	r31, Y+12	; 0x0c
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	80 83       	st	Z, r24
    2c68:	05 c0       	rjmp	.+10     	; 0x2c74 <xQueueReceiveFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
    2c6c:	8f 5f       	subi	r24, 0xFF	; 255
    2c6e:	eb 81       	ldd	r30, Y+3	; 0x03
    2c70:	fc 81       	ldd	r31, Y+4	; 0x04
    2c72:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	8e 83       	std	Y+6, r24	; 0x06
    2c78:	01 c0       	rjmp	.+2      	; 0x2c7c <xQueueReceiveFromISR+0x9a>
		}
		else
		{
			xReturn = pdFAIL;
    2c7a:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2c7c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2c7e:	2c 96       	adiw	r28, 0x0c	; 12
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	f8 94       	cli
    2c84:	de bf       	out	0x3e, r29	; 62
    2c86:	0f be       	out	0x3f, r0	; 63
    2c88:	cd bf       	out	0x3d, r28	; 61
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	08 95       	ret

00002c90 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
    2c98:	2a 97       	sbiw	r28, 0x0a	; 10
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	f8 94       	cli
    2c9e:	de bf       	out	0x3e, r29	; 62
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	cd bf       	out	0x3d, r28	; 61
    2ca4:	98 87       	std	Y+8, r25	; 0x08
    2ca6:	8f 83       	std	Y+7, r24	; 0x07
    2ca8:	7a 87       	std	Y+10, r23	; 0x0a
    2caa:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2cac:	8f 81       	ldd	r24, Y+7	; 0x07
    2cae:	98 85       	ldd	r25, Y+8	; 0x08
    2cb0:	9a 83       	std	Y+2, r25	; 0x02
    2cb2:	89 83       	std	Y+1, r24	; 0x01
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2cb4:	1d 82       	std	Y+5, r1	; 0x05
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2cb6:	e9 81       	ldd	r30, Y+1	; 0x01
    2cb8:	fa 81       	ldd	r31, Y+2	; 0x02
    2cba:	82 8d       	ldd	r24, Z+26	; 0x1a
    2cbc:	88 23       	and	r24, r24
    2cbe:	b1 f0       	breq	.+44     	; 0x2cec <xQueuePeekFromISR+0x5c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    2cc0:	e9 81       	ldd	r30, Y+1	; 0x01
    2cc2:	fa 81       	ldd	r31, Y+2	; 0x02
    2cc4:	86 81       	ldd	r24, Z+6	; 0x06
    2cc6:	97 81       	ldd	r25, Z+7	; 0x07
    2cc8:	9c 83       	std	Y+4, r25	; 0x04
    2cca:	8b 83       	std	Y+3, r24	; 0x03
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd0:	29 85       	ldd	r18, Y+9	; 0x09
    2cd2:	3a 85       	ldd	r19, Y+10	; 0x0a
    2cd4:	b9 01       	movw	r22, r18
    2cd6:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    2cda:	e9 81       	ldd	r30, Y+1	; 0x01
    2cdc:	fa 81       	ldd	r31, Y+2	; 0x02
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce2:	97 83       	std	Z+7, r25	; 0x07
    2ce4:	86 83       	std	Z+6, r24	; 0x06

			xReturn = pdPASS;
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	8e 83       	std	Y+6, r24	; 0x06
    2cea:	01 c0       	rjmp	.+2      	; 0x2cee <xQueuePeekFromISR+0x5e>
		}
		else
		{
			xReturn = pdFAIL;
    2cec:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2cee:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2cf0:	2a 96       	adiw	r28, 0x0a	; 10
    2cf2:	0f b6       	in	r0, 0x3f	; 63
    2cf4:	f8 94       	cli
    2cf6:	de bf       	out	0x3e, r29	; 62
    2cf8:	0f be       	out	0x3f, r0	; 63
    2cfa:	cd bf       	out	0x3d, r28	; 61
    2cfc:	cf 91       	pop	r28
    2cfe:	df 91       	pop	r29
    2d00:	08 95       	ret

00002d02 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	00 d0       	rcall	.+0      	; 0x2d08 <uxQueueMessagesWaiting+0x6>
    2d08:	0f 92       	push	r0
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
    2d0e:	9b 83       	std	Y+3, r25	; 0x03
    2d10:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    2d12:	0f b6       	in	r0, 0x3f	; 63
    2d14:	f8 94       	cli
    2d16:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    2d18:	ea 81       	ldd	r30, Y+2	; 0x02
    2d1a:	fb 81       	ldd	r31, Y+3	; 0x03
    2d1c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d1e:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    2d20:	0f 90       	pop	r0
    2d22:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2d26:	0f 90       	pop	r0
    2d28:	0f 90       	pop	r0
    2d2a:	0f 90       	pop	r0
    2d2c:	cf 91       	pop	r28
    2d2e:	df 91       	pop	r29
    2d30:	08 95       	ret

00002d32 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    2d32:	df 93       	push	r29
    2d34:	cf 93       	push	r28
    2d36:	00 d0       	rcall	.+0      	; 0x2d38 <uxQueueSpacesAvailable+0x6>
    2d38:	00 d0       	rcall	.+0      	; 0x2d3a <uxQueueSpacesAvailable+0x8>
    2d3a:	0f 92       	push	r0
    2d3c:	cd b7       	in	r28, 0x3d	; 61
    2d3e:	de b7       	in	r29, 0x3e	; 62
    2d40:	9d 83       	std	Y+5, r25	; 0x05
    2d42:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    2d44:	8c 81       	ldd	r24, Y+4	; 0x04
    2d46:	9d 81       	ldd	r25, Y+5	; 0x05
    2d48:	9a 83       	std	Y+2, r25	; 0x02
    2d4a:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    2d4c:	0f b6       	in	r0, 0x3f	; 63
    2d4e:	f8 94       	cli
    2d50:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    2d52:	e9 81       	ldd	r30, Y+1	; 0x01
    2d54:	fa 81       	ldd	r31, Y+2	; 0x02
    2d56:	93 8d       	ldd	r25, Z+27	; 0x1b
    2d58:	e9 81       	ldd	r30, Y+1	; 0x01
    2d5a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d5c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d5e:	29 2f       	mov	r18, r25
    2d60:	28 1b       	sub	r18, r24
    2d62:	82 2f       	mov	r24, r18
    2d64:	8b 83       	std	Y+3, r24	; 0x03
	}
	taskEXIT_CRITICAL();
    2d66:	0f 90       	pop	r0
    2d68:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    2d6a:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2d6c:	0f 90       	pop	r0
    2d6e:	0f 90       	pop	r0
    2d70:	0f 90       	pop	r0
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	cf 91       	pop	r28
    2d78:	df 91       	pop	r29
    2d7a:	08 95       	ret

00002d7c <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    2d7c:	df 93       	push	r29
    2d7e:	cf 93       	push	r28
    2d80:	00 d0       	rcall	.+0      	; 0x2d82 <uxQueueMessagesWaitingFromISR+0x6>
    2d82:	0f 92       	push	r0
    2d84:	cd b7       	in	r28, 0x3d	; 61
    2d86:	de b7       	in	r29, 0x3e	; 62
    2d88:	9b 83       	std	Y+3, r25	; 0x03
    2d8a:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    2d8c:	ea 81       	ldd	r30, Y+2	; 0x02
    2d8e:	fb 81       	ldd	r31, Y+3	; 0x03
    2d90:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d92:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2d96:	0f 90       	pop	r0
    2d98:	0f 90       	pop	r0
    2d9a:	0f 90       	pop	r0
    2d9c:	cf 91       	pop	r28
    2d9e:	df 91       	pop	r29
    2da0:	08 95       	ret

00002da2 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    2da2:	df 93       	push	r29
    2da4:	cf 93       	push	r28
    2da6:	00 d0       	rcall	.+0      	; 0x2da8 <vQueueDelete+0x6>
    2da8:	00 d0       	rcall	.+0      	; 0x2daa <vQueueDelete+0x8>
    2daa:	cd b7       	in	r28, 0x3d	; 61
    2dac:	de b7       	in	r29, 0x3e	; 62
    2dae:	9c 83       	std	Y+4, r25	; 0x04
    2db0:	8b 83       	std	Y+3, r24	; 0x03
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2db2:	8b 81       	ldd	r24, Y+3	; 0x03
    2db4:	9c 81       	ldd	r25, Y+4	; 0x04
    2db6:	9a 83       	std	Y+2, r25	; 0x02
    2db8:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
    2dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dbe:	0e 94 33 19 	call	0x3266	; 0x3266 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc6:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    2dca:	0f 90       	pop	r0
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	cf 91       	pop	r28
    2dd4:	df 91       	pop	r29
    2dd6:	08 95       	ret

00002dd8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    2dd8:	df 93       	push	r29
    2dda:	cf 93       	push	r28
    2ddc:	cd b7       	in	r28, 0x3d	; 61
    2dde:	de b7       	in	r29, 0x3e	; 62
    2de0:	27 97       	sbiw	r28, 0x07	; 7
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	de bf       	out	0x3e, r29	; 62
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	cd bf       	out	0x3d, r28	; 61
    2dec:	9c 83       	std	Y+4, r25	; 0x04
    2dee:	8b 83       	std	Y+3, r24	; 0x03
    2df0:	7e 83       	std	Y+6, r23	; 0x06
    2df2:	6d 83       	std	Y+5, r22	; 0x05
    2df4:	4f 83       	std	Y+7, r20	; 0x07
BaseType_t xReturn = pdFALSE;
    2df6:	1a 82       	std	Y+2, r1	; 0x02
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2df8:	eb 81       	ldd	r30, Y+3	; 0x03
    2dfa:	fc 81       	ldd	r31, Y+4	; 0x04
    2dfc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2dfe:	89 83       	std	Y+1, r24	; 0x01

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    2e00:	eb 81       	ldd	r30, Y+3	; 0x03
    2e02:	fc 81       	ldd	r31, Y+4	; 0x04
    2e04:	84 8d       	ldd	r24, Z+28	; 0x1c
    2e06:	88 23       	and	r24, r24
    2e08:	99 f4       	brne	.+38     	; 0x2e30 <prvCopyDataToQueue+0x58>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2e0a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e0c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e0e:	80 81       	ld	r24, Z
    2e10:	91 81       	ldd	r25, Z+1	; 0x01
    2e12:	00 97       	sbiw	r24, 0x00	; 0
    2e14:	09 f0       	breq	.+2      	; 0x2e18 <prvCopyDataToQueue+0x40>
    2e16:	89 c0       	rjmp	.+274    	; 0x2f2a <prvCopyDataToQueue+0x152>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    2e18:	eb 81       	ldd	r30, Y+3	; 0x03
    2e1a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e1c:	82 81       	ldd	r24, Z+2	; 0x02
    2e1e:	93 81       	ldd	r25, Z+3	; 0x03
    2e20:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <xTaskPriorityDisinherit>
    2e24:	8a 83       	std	Y+2, r24	; 0x02
				pxQueue->pxMutexHolder = NULL;
    2e26:	eb 81       	ldd	r30, Y+3	; 0x03
    2e28:	fc 81       	ldd	r31, Y+4	; 0x04
    2e2a:	13 82       	std	Z+3, r1	; 0x03
    2e2c:	12 82       	std	Z+2, r1	; 0x02
    2e2e:	7d c0       	rjmp	.+250    	; 0x2f2a <prvCopyDataToQueue+0x152>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    2e30:	8f 81       	ldd	r24, Y+7	; 0x07
    2e32:	88 23       	and	r24, r24
    2e34:	99 f5       	brne	.+102    	; 0x2e9c <prvCopyDataToQueue+0xc4>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    2e36:	eb 81       	ldd	r30, Y+3	; 0x03
    2e38:	fc 81       	ldd	r31, Y+4	; 0x04
    2e3a:	64 81       	ldd	r22, Z+4	; 0x04
    2e3c:	75 81       	ldd	r23, Z+5	; 0x05
    2e3e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e40:	fc 81       	ldd	r31, Y+4	; 0x04
    2e42:	84 8d       	ldd	r24, Z+28	; 0x1c
    2e44:	48 2f       	mov	r20, r24
    2e46:	50 e0       	ldi	r21, 0x00	; 0
    2e48:	2d 81       	ldd	r18, Y+5	; 0x05
    2e4a:	3e 81       	ldd	r19, Y+6	; 0x06
    2e4c:	cb 01       	movw	r24, r22
    2e4e:	b9 01       	movw	r22, r18
    2e50:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2e54:	eb 81       	ldd	r30, Y+3	; 0x03
    2e56:	fc 81       	ldd	r31, Y+4	; 0x04
    2e58:	24 81       	ldd	r18, Z+4	; 0x04
    2e5a:	35 81       	ldd	r19, Z+5	; 0x05
    2e5c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e5e:	fc 81       	ldd	r31, Y+4	; 0x04
    2e60:	84 8d       	ldd	r24, Z+28	; 0x1c
    2e62:	88 2f       	mov	r24, r24
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	82 0f       	add	r24, r18
    2e68:	93 1f       	adc	r25, r19
    2e6a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e6c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e6e:	95 83       	std	Z+5, r25	; 0x05
    2e70:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2e72:	eb 81       	ldd	r30, Y+3	; 0x03
    2e74:	fc 81       	ldd	r31, Y+4	; 0x04
    2e76:	24 81       	ldd	r18, Z+4	; 0x04
    2e78:	35 81       	ldd	r19, Z+5	; 0x05
    2e7a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e7c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e7e:	82 81       	ldd	r24, Z+2	; 0x02
    2e80:	93 81       	ldd	r25, Z+3	; 0x03
    2e82:	28 17       	cp	r18, r24
    2e84:	39 07       	cpc	r19, r25
    2e86:	08 f4       	brcc	.+2      	; 0x2e8a <prvCopyDataToQueue+0xb2>
    2e88:	50 c0       	rjmp	.+160    	; 0x2f2a <prvCopyDataToQueue+0x152>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    2e8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e8e:	80 81       	ld	r24, Z
    2e90:	91 81       	ldd	r25, Z+1	; 0x01
    2e92:	eb 81       	ldd	r30, Y+3	; 0x03
    2e94:	fc 81       	ldd	r31, Y+4	; 0x04
    2e96:	95 83       	std	Z+5, r25	; 0x05
    2e98:	84 83       	std	Z+4, r24	; 0x04
    2e9a:	47 c0       	rjmp	.+142    	; 0x2f2a <prvCopyDataToQueue+0x152>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2e9c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e9e:	fc 81       	ldd	r31, Y+4	; 0x04
    2ea0:	66 81       	ldd	r22, Z+6	; 0x06
    2ea2:	77 81       	ldd	r23, Z+7	; 0x07
    2ea4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ea6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ea8:	84 8d       	ldd	r24, Z+28	; 0x1c
    2eaa:	48 2f       	mov	r20, r24
    2eac:	50 e0       	ldi	r21, 0x00	; 0
    2eae:	2d 81       	ldd	r18, Y+5	; 0x05
    2eb0:	3e 81       	ldd	r19, Y+6	; 0x06
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	b9 01       	movw	r22, r18
    2eb6:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    2eba:	eb 81       	ldd	r30, Y+3	; 0x03
    2ebc:	fc 81       	ldd	r31, Y+4	; 0x04
    2ebe:	26 81       	ldd	r18, Z+6	; 0x06
    2ec0:	37 81       	ldd	r19, Z+7	; 0x07
    2ec2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ec4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ec6:	84 8d       	ldd	r24, Z+28	; 0x1c
    2ec8:	88 2f       	mov	r24, r24
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	90 95       	com	r25
    2ece:	81 95       	neg	r24
    2ed0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ed2:	82 0f       	add	r24, r18
    2ed4:	93 1f       	adc	r25, r19
    2ed6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ed8:	fc 81       	ldd	r31, Y+4	; 0x04
    2eda:	97 83       	std	Z+7, r25	; 0x07
    2edc:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2ede:	eb 81       	ldd	r30, Y+3	; 0x03
    2ee0:	fc 81       	ldd	r31, Y+4	; 0x04
    2ee2:	26 81       	ldd	r18, Z+6	; 0x06
    2ee4:	37 81       	ldd	r19, Z+7	; 0x07
    2ee6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ee8:	fc 81       	ldd	r31, Y+4	; 0x04
    2eea:	80 81       	ld	r24, Z
    2eec:	91 81       	ldd	r25, Z+1	; 0x01
    2eee:	28 17       	cp	r18, r24
    2ef0:	39 07       	cpc	r19, r25
    2ef2:	90 f4       	brcc	.+36     	; 0x2f18 <prvCopyDataToQueue+0x140>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    2ef4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ef6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ef8:	22 81       	ldd	r18, Z+2	; 0x02
    2efa:	33 81       	ldd	r19, Z+3	; 0x03
    2efc:	eb 81       	ldd	r30, Y+3	; 0x03
    2efe:	fc 81       	ldd	r31, Y+4	; 0x04
    2f00:	84 8d       	ldd	r24, Z+28	; 0x1c
    2f02:	88 2f       	mov	r24, r24
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	90 95       	com	r25
    2f08:	81 95       	neg	r24
    2f0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f0c:	82 0f       	add	r24, r18
    2f0e:	93 1f       	adc	r25, r19
    2f10:	eb 81       	ldd	r30, Y+3	; 0x03
    2f12:	fc 81       	ldd	r31, Y+4	; 0x04
    2f14:	97 83       	std	Z+7, r25	; 0x07
    2f16:	86 83       	std	Z+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    2f18:	8f 81       	ldd	r24, Y+7	; 0x07
    2f1a:	82 30       	cpi	r24, 0x02	; 2
    2f1c:	31 f4       	brne	.+12     	; 0x2f2a <prvCopyDataToQueue+0x152>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    2f1e:	89 81       	ldd	r24, Y+1	; 0x01
    2f20:	88 23       	and	r24, r24
    2f22:	19 f0       	breq	.+6      	; 0x2f2a <prvCopyDataToQueue+0x152>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
    2f26:	81 50       	subi	r24, 0x01	; 1
    2f28:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    2f2a:	89 81       	ldd	r24, Y+1	; 0x01
    2f2c:	8f 5f       	subi	r24, 0xFF	; 255
    2f2e:	eb 81       	ldd	r30, Y+3	; 0x03
    2f30:	fc 81       	ldd	r31, Y+4	; 0x04
    2f32:	82 8f       	std	Z+26, r24	; 0x1a

	return xReturn;
    2f34:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2f36:	27 96       	adiw	r28, 0x07	; 7
    2f38:	0f b6       	in	r0, 0x3f	; 63
    2f3a:	f8 94       	cli
    2f3c:	de bf       	out	0x3e, r29	; 62
    2f3e:	0f be       	out	0x3f, r0	; 63
    2f40:	cd bf       	out	0x3d, r28	; 61
    2f42:	cf 91       	pop	r28
    2f44:	df 91       	pop	r29
    2f46:	08 95       	ret

00002f48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    2f48:	df 93       	push	r29
    2f4a:	cf 93       	push	r28
    2f4c:	00 d0       	rcall	.+0      	; 0x2f4e <prvCopyDataFromQueue+0x6>
    2f4e:	00 d0       	rcall	.+0      	; 0x2f50 <prvCopyDataFromQueue+0x8>
    2f50:	cd b7       	in	r28, 0x3d	; 61
    2f52:	de b7       	in	r29, 0x3e	; 62
    2f54:	9a 83       	std	Y+2, r25	; 0x02
    2f56:	89 83       	std	Y+1, r24	; 0x01
    2f58:	7c 83       	std	Y+4, r23	; 0x04
    2f5a:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    2f5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f60:	84 8d       	ldd	r24, Z+28	; 0x1c
    2f62:	88 23       	and	r24, r24
    2f64:	89 f1       	breq	.+98     	; 0x2fc8 <prvCopyDataFromQueue+0x80>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    2f66:	e9 81       	ldd	r30, Y+1	; 0x01
    2f68:	fa 81       	ldd	r31, Y+2	; 0x02
    2f6a:	26 81       	ldd	r18, Z+6	; 0x06
    2f6c:	37 81       	ldd	r19, Z+7	; 0x07
    2f6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f70:	fa 81       	ldd	r31, Y+2	; 0x02
    2f72:	84 8d       	ldd	r24, Z+28	; 0x1c
    2f74:	88 2f       	mov	r24, r24
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	82 0f       	add	r24, r18
    2f7a:	93 1f       	adc	r25, r19
    2f7c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f7e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f80:	97 83       	std	Z+7, r25	; 0x07
    2f82:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    2f84:	e9 81       	ldd	r30, Y+1	; 0x01
    2f86:	fa 81       	ldd	r31, Y+2	; 0x02
    2f88:	26 81       	ldd	r18, Z+6	; 0x06
    2f8a:	37 81       	ldd	r19, Z+7	; 0x07
    2f8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f90:	82 81       	ldd	r24, Z+2	; 0x02
    2f92:	93 81       	ldd	r25, Z+3	; 0x03
    2f94:	28 17       	cp	r18, r24
    2f96:	39 07       	cpc	r19, r25
    2f98:	40 f0       	brcs	.+16     	; 0x2faa <prvCopyDataFromQueue+0x62>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    2f9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f9e:	80 81       	ld	r24, Z
    2fa0:	91 81       	ldd	r25, Z+1	; 0x01
    2fa2:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa4:	fa 81       	ldd	r31, Y+2	; 0x02
    2fa6:	97 83       	std	Z+7, r25	; 0x07
    2fa8:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    2faa:	e9 81       	ldd	r30, Y+1	; 0x01
    2fac:	fa 81       	ldd	r31, Y+2	; 0x02
    2fae:	46 81       	ldd	r20, Z+6	; 0x06
    2fb0:	57 81       	ldd	r21, Z+7	; 0x07
    2fb2:	e9 81       	ldd	r30, Y+1	; 0x01
    2fb4:	fa 81       	ldd	r31, Y+2	; 0x02
    2fb6:	84 8d       	ldd	r24, Z+28	; 0x1c
    2fb8:	28 2f       	mov	r18, r24
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc0:	ba 01       	movw	r22, r20
    2fc2:	a9 01       	movw	r20, r18
    2fc4:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <memcpy>
	}
}
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	cf 91       	pop	r28
    2fd2:	df 91       	pop	r29
    2fd4:	08 95       	ret

00002fd6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    2fd6:	df 93       	push	r29
    2fd8:	cf 93       	push	r28
    2fda:	00 d0       	rcall	.+0      	; 0x2fdc <prvUnlockQueue+0x6>
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <prvUnlockQueue+0x8>
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	9c 83       	std	Y+4, r25	; 0x04
    2fe4:	8b 83       	std	Y+3, r24	; 0x03

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	f8 94       	cli
    2fea:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
    2fec:	eb 81       	ldd	r30, Y+3	; 0x03
    2fee:	fc 81       	ldd	r31, Y+4	; 0x04
    2ff0:	86 8d       	ldd	r24, Z+30	; 0x1e
    2ff2:	8a 83       	std	Y+2, r24	; 0x02
    2ff4:	11 c0       	rjmp	.+34     	; 0x3018 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2ff6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ff8:	fc 81       	ldd	r31, Y+4	; 0x04
    2ffa:	81 89       	ldd	r24, Z+17	; 0x11
    2ffc:	88 23       	and	r24, r24
    2ffe:	79 f0       	breq	.+30     	; 0x301e <prvUnlockQueue+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3000:	8b 81       	ldd	r24, Y+3	; 0x03
    3002:	9c 81       	ldd	r25, Y+4	; 0x04
    3004:	41 96       	adiw	r24, 0x11	; 17
    3006:	0e 94 05 23 	call	0x460a	; 0x460a <xTaskRemoveFromEventList>
    300a:	88 23       	and	r24, r24
    300c:	11 f0       	breq	.+4      	; 0x3012 <prvUnlockQueue+0x3c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    300e:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    3012:	8a 81       	ldd	r24, Y+2	; 0x02
    3014:	81 50       	subi	r24, 0x01	; 1
    3016:	8a 83       	std	Y+2, r24	; 0x02
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    3018:	8a 81       	ldd	r24, Y+2	; 0x02
    301a:	18 16       	cp	r1, r24
    301c:	64 f3       	brlt	.-40     	; 0x2ff6 <prvUnlockQueue+0x20>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    301e:	eb 81       	ldd	r30, Y+3	; 0x03
    3020:	fc 81       	ldd	r31, Y+4	; 0x04
    3022:	8f ef       	ldi	r24, 0xFF	; 255
    3024:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    3026:	0f 90       	pop	r0
    3028:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    302a:	0f b6       	in	r0, 0x3f	; 63
    302c:	f8 94       	cli
    302e:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
    3030:	eb 81       	ldd	r30, Y+3	; 0x03
    3032:	fc 81       	ldd	r31, Y+4	; 0x04
    3034:	85 8d       	ldd	r24, Z+29	; 0x1d
    3036:	89 83       	std	Y+1, r24	; 0x01
    3038:	11 c0       	rjmp	.+34     	; 0x305c <prvUnlockQueue+0x86>

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    303a:	eb 81       	ldd	r30, Y+3	; 0x03
    303c:	fc 81       	ldd	r31, Y+4	; 0x04
    303e:	80 85       	ldd	r24, Z+8	; 0x08
    3040:	88 23       	and	r24, r24
    3042:	79 f0       	breq	.+30     	; 0x3062 <prvUnlockQueue+0x8c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3044:	8b 81       	ldd	r24, Y+3	; 0x03
    3046:	9c 81       	ldd	r25, Y+4	; 0x04
    3048:	08 96       	adiw	r24, 0x08	; 8
    304a:	0e 94 05 23 	call	0x460a	; 0x460a <xTaskRemoveFromEventList>
    304e:	88 23       	and	r24, r24
    3050:	11 f0       	breq	.+4      	; 0x3056 <prvUnlockQueue+0x80>
				{
					vTaskMissedYield();
    3052:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    3056:	89 81       	ldd	r24, Y+1	; 0x01
    3058:	81 50       	subi	r24, 0x01	; 1
    305a:	89 83       	std	Y+1, r24	; 0x01
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	18 16       	cp	r1, r24
    3060:	64 f3       	brlt	.-40     	; 0x303a <prvUnlockQueue+0x64>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    3062:	eb 81       	ldd	r30, Y+3	; 0x03
    3064:	fc 81       	ldd	r31, Y+4	; 0x04
    3066:	8f ef       	ldi	r24, 0xFF	; 255
    3068:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    306a:	0f 90       	pop	r0
    306c:	0f be       	out	0x3f, r0	; 63
}
    306e:	0f 90       	pop	r0
    3070:	0f 90       	pop	r0
    3072:	0f 90       	pop	r0
    3074:	0f 90       	pop	r0
    3076:	cf 91       	pop	r28
    3078:	df 91       	pop	r29
    307a:	08 95       	ret

0000307c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    307c:	df 93       	push	r29
    307e:	cf 93       	push	r28
    3080:	00 d0       	rcall	.+0      	; 0x3082 <prvIsQueueEmpty+0x6>
    3082:	0f 92       	push	r0
    3084:	cd b7       	in	r28, 0x3d	; 61
    3086:	de b7       	in	r29, 0x3e	; 62
    3088:	9b 83       	std	Y+3, r25	; 0x03
    308a:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    308c:	0f b6       	in	r0, 0x3f	; 63
    308e:	f8 94       	cli
    3090:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    3092:	ea 81       	ldd	r30, Y+2	; 0x02
    3094:	fb 81       	ldd	r31, Y+3	; 0x03
    3096:	82 8d       	ldd	r24, Z+26	; 0x1a
    3098:	88 23       	and	r24, r24
    309a:	19 f4       	brne	.+6      	; 0x30a2 <prvIsQueueEmpty+0x26>
		{
			xReturn = pdTRUE;
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	89 83       	std	Y+1, r24	; 0x01
    30a0:	01 c0       	rjmp	.+2      	; 0x30a4 <prvIsQueueEmpty+0x28>
		}
		else
		{
			xReturn = pdFALSE;
    30a2:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    30a4:	0f 90       	pop	r0
    30a6:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    30aa:	0f 90       	pop	r0
    30ac:	0f 90       	pop	r0
    30ae:	0f 90       	pop	r0
    30b0:	cf 91       	pop	r28
    30b2:	df 91       	pop	r29
    30b4:	08 95       	ret

000030b6 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    30b6:	df 93       	push	r29
    30b8:	cf 93       	push	r28
    30ba:	00 d0       	rcall	.+0      	; 0x30bc <xQueueIsQueueEmptyFromISR+0x6>
    30bc:	0f 92       	push	r0
    30be:	cd b7       	in	r28, 0x3d	; 61
    30c0:	de b7       	in	r29, 0x3e	; 62
    30c2:	9b 83       	std	Y+3, r25	; 0x03
    30c4:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    30c6:	ea 81       	ldd	r30, Y+2	; 0x02
    30c8:	fb 81       	ldd	r31, Y+3	; 0x03
    30ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    30cc:	88 23       	and	r24, r24
    30ce:	19 f4       	brne	.+6      	; 0x30d6 <xQueueIsQueueEmptyFromISR+0x20>
	{
		xReturn = pdTRUE;
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	89 83       	std	Y+1, r24	; 0x01
    30d4:	01 c0       	rjmp	.+2      	; 0x30d8 <xQueueIsQueueEmptyFromISR+0x22>
	}
	else
	{
		xReturn = pdFALSE;
    30d6:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    30d8:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    30da:	0f 90       	pop	r0
    30dc:	0f 90       	pop	r0
    30de:	0f 90       	pop	r0
    30e0:	cf 91       	pop	r28
    30e2:	df 91       	pop	r29
    30e4:	08 95       	ret

000030e6 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    30e6:	df 93       	push	r29
    30e8:	cf 93       	push	r28
    30ea:	00 d0       	rcall	.+0      	; 0x30ec <prvIsQueueFull+0x6>
    30ec:	0f 92       	push	r0
    30ee:	cd b7       	in	r28, 0x3d	; 61
    30f0:	de b7       	in	r29, 0x3e	; 62
    30f2:	9b 83       	std	Y+3, r25	; 0x03
    30f4:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    30f6:	0f b6       	in	r0, 0x3f	; 63
    30f8:	f8 94       	cli
    30fa:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    30fc:	ea 81       	ldd	r30, Y+2	; 0x02
    30fe:	fb 81       	ldd	r31, Y+3	; 0x03
    3100:	92 8d       	ldd	r25, Z+26	; 0x1a
    3102:	ea 81       	ldd	r30, Y+2	; 0x02
    3104:	fb 81       	ldd	r31, Y+3	; 0x03
    3106:	83 8d       	ldd	r24, Z+27	; 0x1b
    3108:	98 17       	cp	r25, r24
    310a:	19 f4       	brne	.+6      	; 0x3112 <prvIsQueueFull+0x2c>
		{
			xReturn = pdTRUE;
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	89 83       	std	Y+1, r24	; 0x01
    3110:	01 c0       	rjmp	.+2      	; 0x3114 <prvIsQueueFull+0x2e>
		}
		else
		{
			xReturn = pdFALSE;
    3112:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    3114:	0f 90       	pop	r0
    3116:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3118:	89 81       	ldd	r24, Y+1	; 0x01
}
    311a:	0f 90       	pop	r0
    311c:	0f 90       	pop	r0
    311e:	0f 90       	pop	r0
    3120:	cf 91       	pop	r28
    3122:	df 91       	pop	r29
    3124:	08 95       	ret

00003126 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    3126:	df 93       	push	r29
    3128:	cf 93       	push	r28
    312a:	00 d0       	rcall	.+0      	; 0x312c <xQueueIsQueueFullFromISR+0x6>
    312c:	0f 92       	push	r0
    312e:	cd b7       	in	r28, 0x3d	; 61
    3130:	de b7       	in	r29, 0x3e	; 62
    3132:	9b 83       	std	Y+3, r25	; 0x03
    3134:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    3136:	ea 81       	ldd	r30, Y+2	; 0x02
    3138:	fb 81       	ldd	r31, Y+3	; 0x03
    313a:	92 8d       	ldd	r25, Z+26	; 0x1a
    313c:	ea 81       	ldd	r30, Y+2	; 0x02
    313e:	fb 81       	ldd	r31, Y+3	; 0x03
    3140:	83 8d       	ldd	r24, Z+27	; 0x1b
    3142:	98 17       	cp	r25, r24
    3144:	19 f4       	brne	.+6      	; 0x314c <xQueueIsQueueFullFromISR+0x26>
	{
		xReturn = pdTRUE;
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	89 83       	std	Y+1, r24	; 0x01
    314a:	01 c0       	rjmp	.+2      	; 0x314e <xQueueIsQueueFullFromISR+0x28>
	}
	else
	{
		xReturn = pdFALSE;
    314c:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    314e:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	0f 90       	pop	r0
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	08 95       	ret

0000315c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    315c:	df 93       	push	r29
    315e:	cf 93       	push	r28
    3160:	00 d0       	rcall	.+0      	; 0x3162 <vQueueAddToRegistry+0x6>
    3162:	00 d0       	rcall	.+0      	; 0x3164 <vQueueAddToRegistry+0x8>
    3164:	0f 92       	push	r0
    3166:	cd b7       	in	r28, 0x3d	; 61
    3168:	de b7       	in	r29, 0x3e	; 62
    316a:	9b 83       	std	Y+3, r25	; 0x03
    316c:	8a 83       	std	Y+2, r24	; 0x02
    316e:	7d 83       	std	Y+5, r23	; 0x05
    3170:	6c 83       	std	Y+4, r22	; 0x04
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    3172:	19 82       	std	Y+1, r1	; 0x01
    3174:	2f c0       	rjmp	.+94     	; 0x31d4 <vQueueAddToRegistry+0x78>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    3176:	89 81       	ldd	r24, Y+1	; 0x01
    3178:	88 2f       	mov	r24, r24
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	88 0f       	add	r24, r24
    317e:	99 1f       	adc	r25, r25
    3180:	88 0f       	add	r24, r24
    3182:	99 1f       	adc	r25, r25
    3184:	fc 01       	movw	r30, r24
    3186:	e4 5f       	subi	r30, 0xF4	; 244
    3188:	fb 4f       	sbci	r31, 0xFB	; 251
    318a:	80 81       	ld	r24, Z
    318c:	91 81       	ldd	r25, Z+1	; 0x01
    318e:	00 97       	sbiw	r24, 0x00	; 0
    3190:	f1 f4       	brne	.+60     	; 0x31ce <vQueueAddToRegistry+0x72>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    3192:	89 81       	ldd	r24, Y+1	; 0x01
    3194:	88 2f       	mov	r24, r24
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	88 0f       	add	r24, r24
    319a:	99 1f       	adc	r25, r25
    319c:	88 0f       	add	r24, r24
    319e:	99 1f       	adc	r25, r25
    31a0:	fc 01       	movw	r30, r24
    31a2:	e4 5f       	subi	r30, 0xF4	; 244
    31a4:	fb 4f       	sbci	r31, 0xFB	; 251
    31a6:	8c 81       	ldd	r24, Y+4	; 0x04
    31a8:	9d 81       	ldd	r25, Y+5	; 0x05
    31aa:	91 83       	std	Z+1, r25	; 0x01
    31ac:	80 83       	st	Z, r24
				xQueueRegistry[ ux ].xHandle = xQueue;
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	88 2f       	mov	r24, r24
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	88 0f       	add	r24, r24
    31b6:	99 1f       	adc	r25, r25
    31b8:	01 96       	adiw	r24, 0x01	; 1
    31ba:	88 0f       	add	r24, r24
    31bc:	99 1f       	adc	r25, r25
    31be:	fc 01       	movw	r30, r24
    31c0:	e4 5f       	subi	r30, 0xF4	; 244
    31c2:	fb 4f       	sbci	r31, 0xFB	; 251
    31c4:	8a 81       	ldd	r24, Y+2	; 0x02
    31c6:	9b 81       	ldd	r25, Y+3	; 0x03
    31c8:	91 83       	std	Z+1, r25	; 0x01
    31ca:	80 83       	st	Z, r24
    31cc:	06 c0       	rjmp	.+12     	; 0x31da <vQueueAddToRegistry+0x7e>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	8f 5f       	subi	r24, 0xFF	; 255
    31d2:	89 83       	std	Y+1, r24	; 0x01
    31d4:	89 81       	ldd	r24, Y+1	; 0x01
    31d6:	88 30       	cpi	r24, 0x08	; 8
    31d8:	70 f2       	brcs	.-100    	; 0x3176 <vQueueAddToRegistry+0x1a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	0f 90       	pop	r0
    31e0:	0f 90       	pop	r0
    31e2:	0f 90       	pop	r0
    31e4:	cf 91       	pop	r28
    31e6:	df 91       	pop	r29
    31e8:	08 95       	ret

000031ea <pcQueueGetName>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    31ea:	df 93       	push	r29
    31ec:	cf 93       	push	r28
    31ee:	00 d0       	rcall	.+0      	; 0x31f0 <pcQueueGetName+0x6>
    31f0:	00 d0       	rcall	.+0      	; 0x31f2 <pcQueueGetName+0x8>
    31f2:	0f 92       	push	r0
    31f4:	cd b7       	in	r28, 0x3d	; 61
    31f6:	de b7       	in	r29, 0x3e	; 62
    31f8:	9d 83       	std	Y+5, r25	; 0x05
    31fa:	8c 83       	std	Y+4, r24	; 0x04
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    31fc:	1a 82       	std	Y+2, r1	; 0x02
    31fe:	19 82       	std	Y+1, r1	; 0x01

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    3200:	1b 82       	std	Y+3, r1	; 0x03
    3202:	24 c0       	rjmp	.+72     	; 0x324c <pcQueueGetName+0x62>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    3204:	8b 81       	ldd	r24, Y+3	; 0x03
    3206:	88 2f       	mov	r24, r24
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	88 0f       	add	r24, r24
    320c:	99 1f       	adc	r25, r25
    320e:	01 96       	adiw	r24, 0x01	; 1
    3210:	88 0f       	add	r24, r24
    3212:	99 1f       	adc	r25, r25
    3214:	fc 01       	movw	r30, r24
    3216:	e4 5f       	subi	r30, 0xF4	; 244
    3218:	fb 4f       	sbci	r31, 0xFB	; 251
    321a:	20 81       	ld	r18, Z
    321c:	31 81       	ldd	r19, Z+1	; 0x01
    321e:	8c 81       	ldd	r24, Y+4	; 0x04
    3220:	9d 81       	ldd	r25, Y+5	; 0x05
    3222:	28 17       	cp	r18, r24
    3224:	39 07       	cpc	r19, r25
    3226:	79 f4       	brne	.+30     	; 0x3246 <pcQueueGetName+0x5c>
			{
				pcReturn = xQueueRegistry[ ux ].pcQueueName;
    3228:	8b 81       	ldd	r24, Y+3	; 0x03
    322a:	88 2f       	mov	r24, r24
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	88 0f       	add	r24, r24
    3230:	99 1f       	adc	r25, r25
    3232:	88 0f       	add	r24, r24
    3234:	99 1f       	adc	r25, r25
    3236:	fc 01       	movw	r30, r24
    3238:	e4 5f       	subi	r30, 0xF4	; 244
    323a:	fb 4f       	sbci	r31, 0xFB	; 251
    323c:	80 81       	ld	r24, Z
    323e:	91 81       	ldd	r25, Z+1	; 0x01
    3240:	9a 83       	std	Y+2, r25	; 0x02
    3242:	89 83       	std	Y+1, r24	; 0x01
    3244:	06 c0       	rjmp	.+12     	; 0x3252 <pcQueueGetName+0x68>
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    3246:	8b 81       	ldd	r24, Y+3	; 0x03
    3248:	8f 5f       	subi	r24, 0xFF	; 255
    324a:	8b 83       	std	Y+3, r24	; 0x03
    324c:	8b 81       	ldd	r24, Y+3	; 0x03
    324e:	88 30       	cpi	r24, 0x08	; 8
    3250:	c8 f2       	brcs	.-78     	; 0x3204 <pcQueueGetName+0x1a>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return pcReturn;
    3252:	89 81       	ldd	r24, Y+1	; 0x01
    3254:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    3256:	0f 90       	pop	r0
    3258:	0f 90       	pop	r0
    325a:	0f 90       	pop	r0
    325c:	0f 90       	pop	r0
    325e:	0f 90       	pop	r0
    3260:	cf 91       	pop	r28
    3262:	df 91       	pop	r29
    3264:	08 95       	ret

00003266 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
    3266:	df 93       	push	r29
    3268:	cf 93       	push	r28
    326a:	00 d0       	rcall	.+0      	; 0x326c <vQueueUnregisterQueue+0x6>
    326c:	0f 92       	push	r0
    326e:	cd b7       	in	r28, 0x3d	; 61
    3270:	de b7       	in	r29, 0x3e	; 62
    3272:	9b 83       	std	Y+3, r25	; 0x03
    3274:	8a 83       	std	Y+2, r24	; 0x02
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    3276:	19 82       	std	Y+1, r1	; 0x01
    3278:	2f c0       	rjmp	.+94     	; 0x32d8 <vQueueUnregisterQueue+0x72>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
    327a:	89 81       	ldd	r24, Y+1	; 0x01
    327c:	88 2f       	mov	r24, r24
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	88 0f       	add	r24, r24
    3282:	99 1f       	adc	r25, r25
    3284:	01 96       	adiw	r24, 0x01	; 1
    3286:	88 0f       	add	r24, r24
    3288:	99 1f       	adc	r25, r25
    328a:	fc 01       	movw	r30, r24
    328c:	e4 5f       	subi	r30, 0xF4	; 244
    328e:	fb 4f       	sbci	r31, 0xFB	; 251
    3290:	20 81       	ld	r18, Z
    3292:	31 81       	ldd	r19, Z+1	; 0x01
    3294:	8a 81       	ldd	r24, Y+2	; 0x02
    3296:	9b 81       	ldd	r25, Y+3	; 0x03
    3298:	28 17       	cp	r18, r24
    329a:	39 07       	cpc	r19, r25
    329c:	d1 f4       	brne	.+52     	; 0x32d2 <vQueueUnregisterQueue+0x6c>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
    329e:	89 81       	ldd	r24, Y+1	; 0x01
    32a0:	88 2f       	mov	r24, r24
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	88 0f       	add	r24, r24
    32a6:	99 1f       	adc	r25, r25
    32a8:	88 0f       	add	r24, r24
    32aa:	99 1f       	adc	r25, r25
    32ac:	fc 01       	movw	r30, r24
    32ae:	e4 5f       	subi	r30, 0xF4	; 244
    32b0:	fb 4f       	sbci	r31, 0xFB	; 251
    32b2:	11 82       	std	Z+1, r1	; 0x01
    32b4:	10 82       	st	Z, r1

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
    32b8:	88 2f       	mov	r24, r24
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	88 0f       	add	r24, r24
    32be:	99 1f       	adc	r25, r25
    32c0:	01 96       	adiw	r24, 0x01	; 1
    32c2:	88 0f       	add	r24, r24
    32c4:	99 1f       	adc	r25, r25
    32c6:	fc 01       	movw	r30, r24
    32c8:	e4 5f       	subi	r30, 0xF4	; 244
    32ca:	fb 4f       	sbci	r31, 0xFB	; 251
    32cc:	11 82       	std	Z+1, r1	; 0x01
    32ce:	10 82       	st	Z, r1
    32d0:	06 c0       	rjmp	.+12     	; 0x32de <vQueueUnregisterQueue+0x78>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    32d2:	89 81       	ldd	r24, Y+1	; 0x01
    32d4:	8f 5f       	subi	r24, 0xFF	; 255
    32d6:	89 83       	std	Y+1, r24	; 0x01
    32d8:	89 81       	ldd	r24, Y+1	; 0x01
    32da:	88 30       	cpi	r24, 0x08	; 8
    32dc:	70 f2       	brcs	.-100    	; 0x327a <vQueueUnregisterQueue+0x14>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    32de:	0f 90       	pop	r0
    32e0:	0f 90       	pop	r0
    32e2:	0f 90       	pop	r0
    32e4:	cf 91       	pop	r28
    32e6:	df 91       	pop	r29
    32e8:	08 95       	ret

000032ea <main>:
#include "semphr.h"
void task1(void *PV);

SemaphoreHandle_t my_sem ;
int main(void)
{
    32ea:	ef 92       	push	r14
    32ec:	ff 92       	push	r15
    32ee:	0f 93       	push	r16
    32f0:	df 93       	push	r29
    32f2:	cf 93       	push	r28
    32f4:	cd b7       	in	r28, 0x3d	; 61
    32f6:	de b7       	in	r29, 0x3e	; 62
	
	xTaskCreate(task1,"M",100,NULL,1,NULL);
    32f8:	85 ea       	ldi	r24, 0xA5	; 165
    32fa:	99 e1       	ldi	r25, 0x19	; 25
    32fc:	20 e6       	ldi	r18, 0x60	; 96
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	b9 01       	movw	r22, r18
    3302:	44 e6       	ldi	r20, 0x64	; 100
    3304:	50 e0       	ldi	r21, 0x00	; 0
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	01 e0       	ldi	r16, 0x01	; 1
    330c:	ee 24       	eor	r14, r14
    330e:	ff 24       	eor	r15, r15
    3310:	0e 94 00 1b 	call	0x3600	; 0x3600 <xTaskCreate>
	sei();
    3314:	78 94       	sei
	GICR|=(1<<INT0);
    3316:	ab e5       	ldi	r26, 0x5B	; 91
    3318:	b0 e0       	ldi	r27, 0x00	; 0
    331a:	eb e5       	ldi	r30, 0x5B	; 91
    331c:	f0 e0       	ldi	r31, 0x00	; 0
    331e:	80 81       	ld	r24, Z
    3320:	80 64       	ori	r24, 0x40	; 64
    3322:	8c 93       	st	X, r24
	MCUCR|=(1<<ISC00)|(1<<ISC01);
    3324:	a5 e5       	ldi	r26, 0x55	; 85
    3326:	b0 e0       	ldi	r27, 0x00	; 0
    3328:	e5 e5       	ldi	r30, 0x55	; 85
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	80 81       	ld	r24, Z
    332e:	83 60       	ori	r24, 0x03	; 3
    3330:	8c 93       	st	X, r24
	my_sem = xSemaphoreCreateBinary();
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	60 e0       	ldi	r22, 0x00	; 0
    3336:	43 e0       	ldi	r20, 0x03	; 3
    3338:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <xQueueGenericCreate>
    333c:	90 93 2d 04 	sts	0x042D, r25
    3340:	80 93 2c 04 	sts	0x042C, r24
	vTaskStartScheduler();
    3344:	0e 94 40 20 	call	0x4080	; 0x4080 <vTaskStartScheduler>
    3348:	ff cf       	rjmp	.-2      	; 0x3348 <main+0x5e>

0000334a <task1>:
        
    }
}

void task1(void *PV)
{
    334a:	df 93       	push	r29
    334c:	cf 93       	push	r28
    334e:	cd b7       	in	r28, 0x3d	; 61
    3350:	de b7       	in	r29, 0x3e	; 62
    3352:	6f 97       	sbiw	r28, 0x1f	; 31
    3354:	0f b6       	in	r0, 0x3f	; 63
    3356:	f8 94       	cli
    3358:	de bf       	out	0x3e, r29	; 62
    335a:	0f be       	out	0x3f, r0	; 63
    335c:	cd bf       	out	0x3d, r28	; 61
    335e:	9f 8f       	std	Y+31, r25	; 0x1f
    3360:	8e 8f       	std	Y+30, r24	; 0x1e
	char x;
	DDRD |= (1<<7);
    3362:	a1 e3       	ldi	r26, 0x31	; 49
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	e1 e3       	ldi	r30, 0x31	; 49
    3368:	f0 e0       	ldi	r31, 0x00	; 0
    336a:	80 81       	ld	r24, Z
    336c:	80 68       	ori	r24, 0x80	; 128
    336e:	8c 93       	st	X, r24
	DDRB |= (1<<7);
    3370:	a7 e3       	ldi	r26, 0x37	; 55
    3372:	b0 e0       	ldi	r27, 0x00	; 0
    3374:	e7 e3       	ldi	r30, 0x37	; 55
    3376:	f0 e0       	ldi	r31, 0x00	; 0
    3378:	80 81       	ld	r24, Z
    337a:	80 68       	ori	r24, 0x80	; 128
    337c:	8c 93       	st	X, r24
	while(1)
	{
	x = xSemaphoreTake(my_sem, 10000);
    337e:	80 91 2c 04 	lds	r24, 0x042C
    3382:	90 91 2d 04 	lds	r25, 0x042D
    3386:	60 e0       	ldi	r22, 0x00	; 0
    3388:	70 e0       	ldi	r23, 0x00	; 0
    338a:	40 e1       	ldi	r20, 0x10	; 16
    338c:	57 e2       	ldi	r21, 0x27	; 39
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	0e 94 09 15 	call	0x2a12	; 0x2a12 <xQueueGenericReceive>
    3394:	8d 8f       	std	Y+29, r24	; 0x1d
	if(x==1)
    3396:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3398:	81 30       	cpi	r24, 0x01	; 1
    339a:	09 f0       	breq	.+2      	; 0x339e <task1+0x54>
    339c:	7a c0       	rjmp	.+244    	; 0x3492 <task1+0x148>
		{
		PORTD ^= (1<<7);
    339e:	a2 e3       	ldi	r26, 0x32	; 50
    33a0:	b0 e0       	ldi	r27, 0x00	; 0
    33a2:	e2 e3       	ldi	r30, 0x32	; 50
    33a4:	f0 e0       	ldi	r31, 0x00	; 0
    33a6:	90 81       	ld	r25, Z
    33a8:	80 e8       	ldi	r24, 0x80	; 128
    33aa:	89 27       	eor	r24, r25
    33ac:	8c 93       	st	X, r24
    33ae:	80 e0       	ldi	r24, 0x00	; 0
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	aa e7       	ldi	r26, 0x7A	; 122
    33b4:	b4 e4       	ldi	r27, 0x44	; 68
    33b6:	89 8f       	std	Y+25, r24	; 0x19
    33b8:	9a 8f       	std	Y+26, r25	; 0x1a
    33ba:	ab 8f       	std	Y+27, r26	; 0x1b
    33bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33be:	69 8d       	ldd	r22, Y+25	; 0x19
    33c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	4a ef       	ldi	r20, 0xFA	; 250
    33cc:	54 e4       	ldi	r21, 0x44	; 68
    33ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d2:	dc 01       	movw	r26, r24
    33d4:	cb 01       	movw	r24, r22
    33d6:	8d 8b       	std	Y+21, r24	; 0x15
    33d8:	9e 8b       	std	Y+22, r25	; 0x16
    33da:	af 8b       	std	Y+23, r26	; 0x17
    33dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33de:	6d 89       	ldd	r22, Y+21	; 0x15
    33e0:	7e 89       	ldd	r23, Y+22	; 0x16
    33e2:	8f 89       	ldd	r24, Y+23	; 0x17
    33e4:	98 8d       	ldd	r25, Y+24	; 0x18
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	40 e8       	ldi	r20, 0x80	; 128
    33ec:	5f e3       	ldi	r21, 0x3F	; 63
    33ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33f2:	88 23       	and	r24, r24
    33f4:	2c f4       	brge	.+10     	; 0x3400 <task1+0xb6>
		__ticks = 1;
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	9c 8b       	std	Y+20, r25	; 0x14
    33fc:	8b 8b       	std	Y+19, r24	; 0x13
    33fe:	3f c0       	rjmp	.+126    	; 0x347e <task1+0x134>
	else if (__tmp > 65535)
    3400:	6d 89       	ldd	r22, Y+21	; 0x15
    3402:	7e 89       	ldd	r23, Y+22	; 0x16
    3404:	8f 89       	ldd	r24, Y+23	; 0x17
    3406:	98 8d       	ldd	r25, Y+24	; 0x18
    3408:	20 e0       	ldi	r18, 0x00	; 0
    340a:	3f ef       	ldi	r19, 0xFF	; 255
    340c:	4f e7       	ldi	r20, 0x7F	; 127
    340e:	57 e4       	ldi	r21, 0x47	; 71
    3410:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3414:	18 16       	cp	r1, r24
    3416:	4c f5       	brge	.+82     	; 0x346a <task1+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3418:	69 8d       	ldd	r22, Y+25	; 0x19
    341a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    341c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    341e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	40 e2       	ldi	r20, 0x20	; 32
    3426:	51 e4       	ldi	r21, 0x41	; 65
    3428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	bc 01       	movw	r22, r24
    3432:	cd 01       	movw	r24, r26
    3434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3438:	dc 01       	movw	r26, r24
    343a:	cb 01       	movw	r24, r22
    343c:	9c 8b       	std	Y+20, r25	; 0x14
    343e:	8b 8b       	std	Y+19, r24	; 0x13
    3440:	0f c0       	rjmp	.+30     	; 0x3460 <task1+0x116>
    3442:	88 ec       	ldi	r24, 0xC8	; 200
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	9a 8b       	std	Y+18, r25	; 0x12
    3448:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    344a:	89 89       	ldd	r24, Y+17	; 0x11
    344c:	9a 89       	ldd	r25, Y+18	; 0x12
    344e:	01 97       	sbiw	r24, 0x01	; 1
    3450:	f1 f7       	brne	.-4      	; 0x344e <task1+0x104>
    3452:	9a 8b       	std	Y+18, r25	; 0x12
    3454:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3456:	8b 89       	ldd	r24, Y+19	; 0x13
    3458:	9c 89       	ldd	r25, Y+20	; 0x14
    345a:	01 97       	sbiw	r24, 0x01	; 1
    345c:	9c 8b       	std	Y+20, r25	; 0x14
    345e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3460:	8b 89       	ldd	r24, Y+19	; 0x13
    3462:	9c 89       	ldd	r25, Y+20	; 0x14
    3464:	00 97       	sbiw	r24, 0x00	; 0
    3466:	69 f7       	brne	.-38     	; 0x3442 <task1+0xf8>
    3468:	14 c0       	rjmp	.+40     	; 0x3492 <task1+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    346a:	6d 89       	ldd	r22, Y+21	; 0x15
    346c:	7e 89       	ldd	r23, Y+22	; 0x16
    346e:	8f 89       	ldd	r24, Y+23	; 0x17
    3470:	98 8d       	ldd	r25, Y+24	; 0x18
    3472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	9c 8b       	std	Y+20, r25	; 0x14
    347c:	8b 8b       	std	Y+19, r24	; 0x13
    347e:	8b 89       	ldd	r24, Y+19	; 0x13
    3480:	9c 89       	ldd	r25, Y+20	; 0x14
    3482:	98 8b       	std	Y+16, r25	; 0x10
    3484:	8f 87       	std	Y+15, r24	; 0x0f
    3486:	8f 85       	ldd	r24, Y+15	; 0x0f
    3488:	98 89       	ldd	r25, Y+16	; 0x10
    348a:	01 97       	sbiw	r24, 0x01	; 1
    348c:	f1 f7       	brne	.-4      	; 0x348a <task1+0x140>
    348e:	98 8b       	std	Y+16, r25	; 0x10
    3490:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		//xSemaphoreGive(my_sem);
		}
	if (x == 0)
    3492:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3494:	88 23       	and	r24, r24
    3496:	09 f0       	breq	.+2      	; 0x349a <task1+0x150>
    3498:	72 cf       	rjmp	.-284    	; 0x337e <task1+0x34>
	{
		PORTB ^= (1<<7);
    349a:	a8 e3       	ldi	r26, 0x38	; 56
    349c:	b0 e0       	ldi	r27, 0x00	; 0
    349e:	e8 e3       	ldi	r30, 0x38	; 56
    34a0:	f0 e0       	ldi	r31, 0x00	; 0
    34a2:	90 81       	ld	r25, Z
    34a4:	80 e8       	ldi	r24, 0x80	; 128
    34a6:	89 27       	eor	r24, r25
    34a8:	8c 93       	st	X, r24
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	aa ef       	ldi	r26, 0xFA	; 250
    34b0:	b3 e4       	ldi	r27, 0x43	; 67
    34b2:	8b 87       	std	Y+11, r24	; 0x0b
    34b4:	9c 87       	std	Y+12, r25	; 0x0c
    34b6:	ad 87       	std	Y+13, r26	; 0x0d
    34b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    34bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    34be:	8d 85       	ldd	r24, Y+13	; 0x0d
    34c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	4a ef       	ldi	r20, 0xFA	; 250
    34c8:	54 e4       	ldi	r21, 0x44	; 68
    34ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	8f 83       	std	Y+7, r24	; 0x07
    34d4:	98 87       	std	Y+8, r25	; 0x08
    34d6:	a9 87       	std	Y+9, r26	; 0x09
    34d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34da:	6f 81       	ldd	r22, Y+7	; 0x07
    34dc:	78 85       	ldd	r23, Y+8	; 0x08
    34de:	89 85       	ldd	r24, Y+9	; 0x09
    34e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	40 e8       	ldi	r20, 0x80	; 128
    34e8:	5f e3       	ldi	r21, 0x3F	; 63
    34ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34ee:	88 23       	and	r24, r24
    34f0:	2c f4       	brge	.+10     	; 0x34fc <task1+0x1b2>
		__ticks = 1;
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	9e 83       	std	Y+6, r25	; 0x06
    34f8:	8d 83       	std	Y+5, r24	; 0x05
    34fa:	3f c0       	rjmp	.+126    	; 0x357a <task1+0x230>
	else if (__tmp > 65535)
    34fc:	6f 81       	ldd	r22, Y+7	; 0x07
    34fe:	78 85       	ldd	r23, Y+8	; 0x08
    3500:	89 85       	ldd	r24, Y+9	; 0x09
    3502:	9a 85       	ldd	r25, Y+10	; 0x0a
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	3f ef       	ldi	r19, 0xFF	; 255
    3508:	4f e7       	ldi	r20, 0x7F	; 127
    350a:	57 e4       	ldi	r21, 0x47	; 71
    350c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3510:	18 16       	cp	r1, r24
    3512:	4c f5       	brge	.+82     	; 0x3566 <task1+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3514:	6b 85       	ldd	r22, Y+11	; 0x0b
    3516:	7c 85       	ldd	r23, Y+12	; 0x0c
    3518:	8d 85       	ldd	r24, Y+13	; 0x0d
    351a:	9e 85       	ldd	r25, Y+14	; 0x0e
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	40 e2       	ldi	r20, 0x20	; 32
    3522:	51 e4       	ldi	r21, 0x41	; 65
    3524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	bc 01       	movw	r22, r24
    352e:	cd 01       	movw	r24, r26
    3530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	9e 83       	std	Y+6, r25	; 0x06
    353a:	8d 83       	std	Y+5, r24	; 0x05
    353c:	0f c0       	rjmp	.+30     	; 0x355c <task1+0x212>
    353e:	88 ec       	ldi	r24, 0xC8	; 200
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	9c 83       	std	Y+4, r25	; 0x04
    3544:	8b 83       	std	Y+3, r24	; 0x03
    3546:	8b 81       	ldd	r24, Y+3	; 0x03
    3548:	9c 81       	ldd	r25, Y+4	; 0x04
    354a:	01 97       	sbiw	r24, 0x01	; 1
    354c:	f1 f7       	brne	.-4      	; 0x354a <task1+0x200>
    354e:	9c 83       	std	Y+4, r25	; 0x04
    3550:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3552:	8d 81       	ldd	r24, Y+5	; 0x05
    3554:	9e 81       	ldd	r25, Y+6	; 0x06
    3556:	01 97       	sbiw	r24, 0x01	; 1
    3558:	9e 83       	std	Y+6, r25	; 0x06
    355a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    355c:	8d 81       	ldd	r24, Y+5	; 0x05
    355e:	9e 81       	ldd	r25, Y+6	; 0x06
    3560:	00 97       	sbiw	r24, 0x00	; 0
    3562:	69 f7       	brne	.-38     	; 0x353e <task1+0x1f4>
    3564:	14 c0       	rjmp	.+40     	; 0x358e <task1+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3566:	6f 81       	ldd	r22, Y+7	; 0x07
    3568:	78 85       	ldd	r23, Y+8	; 0x08
    356a:	89 85       	ldd	r24, Y+9	; 0x09
    356c:	9a 85       	ldd	r25, Y+10	; 0x0a
    356e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	9e 83       	std	Y+6, r25	; 0x06
    3578:	8d 83       	std	Y+5, r24	; 0x05
    357a:	8d 81       	ldd	r24, Y+5	; 0x05
    357c:	9e 81       	ldd	r25, Y+6	; 0x06
    357e:	9a 83       	std	Y+2, r25	; 0x02
    3580:	89 83       	std	Y+1, r24	; 0x01
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	9a 81       	ldd	r25, Y+2	; 0x02
    3586:	01 97       	sbiw	r24, 0x01	; 1
    3588:	f1 f7       	brne	.-4      	; 0x3586 <task1+0x23c>
    358a:	9a 83       	std	Y+2, r25	; 0x02
    358c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		PORTB ^= (1<<7);
    358e:	a8 e3       	ldi	r26, 0x38	; 56
    3590:	b0 e0       	ldi	r27, 0x00	; 0
    3592:	e8 e3       	ldi	r30, 0x38	; 56
    3594:	f0 e0       	ldi	r31, 0x00	; 0
    3596:	90 81       	ld	r25, Z
    3598:	80 e8       	ldi	r24, 0x80	; 128
    359a:	89 27       	eor	r24, r25
    359c:	8c 93       	st	X, r24
    359e:	ef ce       	rjmp	.-546    	; 0x337e <task1+0x34>

000035a0 <__vector_1>:
	}
	}
}

ISR (INT0_vect)
{
    35a0:	1f 92       	push	r1
    35a2:	0f 92       	push	r0
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	0f 92       	push	r0
    35a8:	11 24       	eor	r1, r1
    35aa:	2f 93       	push	r18
    35ac:	3f 93       	push	r19
    35ae:	4f 93       	push	r20
    35b0:	5f 93       	push	r21
    35b2:	6f 93       	push	r22
    35b4:	7f 93       	push	r23
    35b6:	8f 93       	push	r24
    35b8:	9f 93       	push	r25
    35ba:	af 93       	push	r26
    35bc:	bf 93       	push	r27
    35be:	ef 93       	push	r30
    35c0:	ff 93       	push	r31
    35c2:	df 93       	push	r29
    35c4:	cf 93       	push	r28
    35c6:	cd b7       	in	r28, 0x3d	; 61
    35c8:	de b7       	in	r29, 0x3e	; 62
	xSemaphoreGiveFromISR(my_sem, NULL);
    35ca:	80 91 2c 04 	lds	r24, 0x042C
    35ce:	90 91 2d 04 	lds	r25, 0x042D
    35d2:	60 e0       	ldi	r22, 0x00	; 0
    35d4:	70 e0       	ldi	r23, 0x00	; 0
    35d6:	0e 94 b8 14 	call	0x2970	; 0x2970 <xQueueGiveFromISR>
}
    35da:	cf 91       	pop	r28
    35dc:	df 91       	pop	r29
    35de:	ff 91       	pop	r31
    35e0:	ef 91       	pop	r30
    35e2:	bf 91       	pop	r27
    35e4:	af 91       	pop	r26
    35e6:	9f 91       	pop	r25
    35e8:	8f 91       	pop	r24
    35ea:	7f 91       	pop	r23
    35ec:	6f 91       	pop	r22
    35ee:	5f 91       	pop	r21
    35f0:	4f 91       	pop	r20
    35f2:	3f 91       	pop	r19
    35f4:	2f 91       	pop	r18
    35f6:	0f 90       	pop	r0
    35f8:	0f be       	out	0x3f, r0	; 63
    35fa:	0f 90       	pop	r0
    35fc:	1f 90       	pop	r1
    35fe:	18 95       	reti

00003600 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    3600:	8f 92       	push	r8
    3602:	9f 92       	push	r9
    3604:	af 92       	push	r10
    3606:	bf 92       	push	r11
    3608:	cf 92       	push	r12
    360a:	df 92       	push	r13
    360c:	ef 92       	push	r14
    360e:	ff 92       	push	r15
    3610:	0f 93       	push	r16
    3612:	1f 93       	push	r17
    3614:	df 93       	push	r29
    3616:	cf 93       	push	r28
    3618:	cd b7       	in	r28, 0x3d	; 61
    361a:	de b7       	in	r29, 0x3e	; 62
    361c:	60 97       	sbiw	r28, 0x10	; 16
    361e:	0f b6       	in	r0, 0x3f	; 63
    3620:	f8 94       	cli
    3622:	de bf       	out	0x3e, r29	; 62
    3624:	0f be       	out	0x3f, r0	; 63
    3626:	cd bf       	out	0x3d, r28	; 61
    3628:	9f 83       	std	Y+7, r25	; 0x07
    362a:	8e 83       	std	Y+6, r24	; 0x06
    362c:	79 87       	std	Y+9, r23	; 0x09
    362e:	68 87       	std	Y+8, r22	; 0x08
    3630:	5b 87       	std	Y+11, r21	; 0x0b
    3632:	4a 87       	std	Y+10, r20	; 0x0a
    3634:	3d 87       	std	Y+13, r19	; 0x0d
    3636:	2c 87       	std	Y+12, r18	; 0x0c
    3638:	0e 87       	std	Y+14, r16	; 0x0e
    363a:	f8 8a       	std	Y+16, r15	; 0x10
    363c:	ef 86       	std	Y+15, r14	; 0x0f
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    363e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3640:	9b 85       	ldd	r25, Y+11	; 0x0b
    3642:	0e 94 bc 0c 	call	0x1978	; 0x1978 <pvPortMalloc>
    3646:	9a 83       	std	Y+2, r25	; 0x02
    3648:	89 83       	std	Y+1, r24	; 0x01

			if( pxStack != NULL )
    364a:	89 81       	ldd	r24, Y+1	; 0x01
    364c:	9a 81       	ldd	r25, Y+2	; 0x02
    364e:	00 97       	sbiw	r24, 0x00	; 0
    3650:	b1 f0       	breq	.+44     	; 0x367e <xTaskCreate+0x7e>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    3652:	8a e2       	ldi	r24, 0x2A	; 42
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	0e 94 bc 0c 	call	0x1978	; 0x1978 <pvPortMalloc>
    365a:	9d 83       	std	Y+5, r25	; 0x05
    365c:	8c 83       	std	Y+4, r24	; 0x04

				if( pxNewTCB != NULL )
    365e:	8c 81       	ldd	r24, Y+4	; 0x04
    3660:	9d 81       	ldd	r25, Y+5	; 0x05
    3662:	00 97       	sbiw	r24, 0x00	; 0
    3664:	39 f0       	breq	.+14     	; 0x3674 <xTaskCreate+0x74>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    3666:	ec 81       	ldd	r30, Y+4	; 0x04
    3668:	fd 81       	ldd	r31, Y+5	; 0x05
    366a:	89 81       	ldd	r24, Y+1	; 0x01
    366c:	9a 81       	ldd	r25, Y+2	; 0x02
    366e:	90 8f       	std	Z+24, r25	; 0x18
    3670:	87 8b       	std	Z+23, r24	; 0x17
    3672:	07 c0       	rjmp	.+14     	; 0x3682 <xTaskCreate+0x82>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    3674:	89 81       	ldd	r24, Y+1	; 0x01
    3676:	9a 81       	ldd	r25, Y+2	; 0x02
    3678:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <vPortFree>
    367c:	02 c0       	rjmp	.+4      	; 0x3682 <xTaskCreate+0x82>
				}
			}
			else
			{
				pxNewTCB = NULL;
    367e:	1d 82       	std	Y+5, r1	; 0x05
    3680:	1c 82       	std	Y+4, r1	; 0x04
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    3682:	8c 81       	ldd	r24, Y+4	; 0x04
    3684:	9d 81       	ldd	r25, Y+5	; 0x05
    3686:	00 97       	sbiw	r24, 0x00	; 0
    3688:	e9 f0       	breq	.+58     	; 0x36c4 <xTaskCreate+0xc4>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    368a:	8a 85       	ldd	r24, Y+10	; 0x0a
    368c:	9b 85       	ldd	r25, Y+11	; 0x0b
    368e:	9c 01       	movw	r18, r24
    3690:	40 e0       	ldi	r20, 0x00	; 0
    3692:	50 e0       	ldi	r21, 0x00	; 0
    3694:	8e 81       	ldd	r24, Y+6	; 0x06
    3696:	9f 81       	ldd	r25, Y+7	; 0x07
    3698:	68 85       	ldd	r22, Y+8	; 0x08
    369a:	79 85       	ldd	r23, Y+9	; 0x09
    369c:	ec 85       	ldd	r30, Y+12	; 0x0c
    369e:	fd 85       	ldd	r31, Y+13	; 0x0d
    36a0:	af 85       	ldd	r26, Y+15	; 0x0f
    36a2:	b8 89       	ldd	r27, Y+16	; 0x10
    36a4:	ac 80       	ldd	r10, Y+4	; 0x04
    36a6:	bd 80       	ldd	r11, Y+5	; 0x05
    36a8:	8f 01       	movw	r16, r30
    36aa:	ee 84       	ldd	r14, Y+14	; 0x0e
    36ac:	6d 01       	movw	r12, r26
    36ae:	88 24       	eor	r8, r8
    36b0:	99 24       	eor	r9, r9
    36b2:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    36b6:	8c 81       	ldd	r24, Y+4	; 0x04
    36b8:	9d 81       	ldd	r25, Y+5	; 0x05
    36ba:	0e 94 33 1c 	call	0x3866	; 0x3866 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	8b 83       	std	Y+3, r24	; 0x03
    36c2:	02 c0       	rjmp	.+4      	; 0x36c8 <xTaskCreate+0xc8>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    36c4:	8f ef       	ldi	r24, 0xFF	; 255
    36c6:	8b 83       	std	Y+3, r24	; 0x03
		}

		return xReturn;
    36c8:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    36ca:	60 96       	adiw	r28, 0x10	; 16
    36cc:	0f b6       	in	r0, 0x3f	; 63
    36ce:	f8 94       	cli
    36d0:	de bf       	out	0x3e, r29	; 62
    36d2:	0f be       	out	0x3f, r0	; 63
    36d4:	cd bf       	out	0x3d, r28	; 61
    36d6:	cf 91       	pop	r28
    36d8:	df 91       	pop	r29
    36da:	1f 91       	pop	r17
    36dc:	0f 91       	pop	r16
    36de:	ff 90       	pop	r15
    36e0:	ef 90       	pop	r14
    36e2:	df 90       	pop	r13
    36e4:	cf 90       	pop	r12
    36e6:	bf 90       	pop	r11
    36e8:	af 90       	pop	r10
    36ea:	9f 90       	pop	r9
    36ec:	8f 90       	pop	r8
    36ee:	08 95       	ret

000036f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    36f0:	8f 92       	push	r8
    36f2:	9f 92       	push	r9
    36f4:	af 92       	push	r10
    36f6:	bf 92       	push	r11
    36f8:	cf 92       	push	r12
    36fa:	df 92       	push	r13
    36fc:	ef 92       	push	r14
    36fe:	0f 93       	push	r16
    3700:	1f 93       	push	r17
    3702:	df 93       	push	r29
    3704:	cf 93       	push	r28
    3706:	cd b7       	in	r28, 0x3d	; 61
    3708:	de b7       	in	r29, 0x3e	; 62
    370a:	64 97       	sbiw	r28, 0x14	; 20
    370c:	0f b6       	in	r0, 0x3f	; 63
    370e:	f8 94       	cli
    3710:	de bf       	out	0x3e, r29	; 62
    3712:	0f be       	out	0x3f, r0	; 63
    3714:	cd bf       	out	0x3d, r28	; 61
    3716:	9d 83       	std	Y+5, r25	; 0x05
    3718:	8c 83       	std	Y+4, r24	; 0x04
    371a:	7f 83       	std	Y+7, r23	; 0x07
    371c:	6e 83       	std	Y+6, r22	; 0x06
    371e:	28 87       	std	Y+8, r18	; 0x08
    3720:	39 87       	std	Y+9, r19	; 0x09
    3722:	4a 87       	std	Y+10, r20	; 0x0a
    3724:	5b 87       	std	Y+11, r21	; 0x0b
    3726:	1d 87       	std	Y+13, r17	; 0x0d
    3728:	0c 87       	std	Y+12, r16	; 0x0c
    372a:	ee 86       	std	Y+14, r14	; 0x0e
    372c:	d8 8a       	std	Y+16, r13	; 0x10
    372e:	cf 86       	std	Y+15, r12	; 0x0f
    3730:	ba 8a       	std	Y+18, r11	; 0x12
    3732:	a9 8a       	std	Y+17, r10	; 0x11
    3734:	9c 8a       	std	Y+20, r9	; 0x14
    3736:	8b 8a       	std	Y+19, r8	; 0x13
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    3738:	e9 89       	ldd	r30, Y+17	; 0x11
    373a:	fa 89       	ldd	r31, Y+18	; 0x12
    373c:	27 89       	ldd	r18, Z+23	; 0x17
    373e:	30 8d       	ldd	r19, Z+24	; 0x18
    3740:	88 85       	ldd	r24, Y+8	; 0x08
    3742:	99 85       	ldd	r25, Y+9	; 0x09
    3744:	01 97       	sbiw	r24, 0x01	; 1
    3746:	82 0f       	add	r24, r18
    3748:	93 1f       	adc	r25, r19
    374a:	9b 83       	std	Y+3, r25	; 0x03
    374c:	8a 83       	std	Y+2, r24	; 0x02
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    374e:	19 82       	std	Y+1, r1	; 0x01
    3750:	21 c0       	rjmp	.+66     	; 0x3794 <prvInitialiseNewTask+0xa4>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    3752:	89 81       	ldd	r24, Y+1	; 0x01
    3754:	48 2f       	mov	r20, r24
    3756:	50 e0       	ldi	r21, 0x00	; 0
    3758:	89 81       	ldd	r24, Y+1	; 0x01
    375a:	28 2f       	mov	r18, r24
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	8e 81       	ldd	r24, Y+6	; 0x06
    3760:	9f 81       	ldd	r25, Y+7	; 0x07
    3762:	fc 01       	movw	r30, r24
    3764:	e2 0f       	add	r30, r18
    3766:	f3 1f       	adc	r31, r19
    3768:	20 81       	ld	r18, Z
    376a:	89 89       	ldd	r24, Y+17	; 0x11
    376c:	9a 89       	ldd	r25, Y+18	; 0x12
    376e:	84 0f       	add	r24, r20
    3770:	95 1f       	adc	r25, r21
    3772:	fc 01       	movw	r30, r24
    3774:	79 96       	adiw	r30, 0x19	; 25
    3776:	20 83       	st	Z, r18

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    3778:	89 81       	ldd	r24, Y+1	; 0x01
    377a:	28 2f       	mov	r18, r24
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	8e 81       	ldd	r24, Y+6	; 0x06
    3780:	9f 81       	ldd	r25, Y+7	; 0x07
    3782:	fc 01       	movw	r30, r24
    3784:	e2 0f       	add	r30, r18
    3786:	f3 1f       	adc	r31, r19
    3788:	80 81       	ld	r24, Z
    378a:	88 23       	and	r24, r24
    378c:	31 f0       	breq	.+12     	; 0x379a <prvInitialiseNewTask+0xaa>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    378e:	89 81       	ldd	r24, Y+1	; 0x01
    3790:	8f 5f       	subi	r24, 0xFF	; 255
    3792:	89 83       	std	Y+1, r24	; 0x01
    3794:	89 81       	ldd	r24, Y+1	; 0x01
    3796:	8a 30       	cpi	r24, 0x0A	; 10
    3798:	e0 f2       	brcs	.-72     	; 0x3752 <prvInitialiseNewTask+0x62>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    379a:	e9 89       	ldd	r30, Y+17	; 0x11
    379c:	fa 89       	ldd	r31, Y+18	; 0x12
    379e:	12 a2       	std	Z+34, r1	; 0x22

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    37a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    37a2:	85 30       	cpi	r24, 0x05	; 5
    37a4:	10 f0       	brcs	.+4      	; 0x37aa <prvInitialiseNewTask+0xba>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    37a6:	84 e0       	ldi	r24, 0x04	; 4
    37a8:	8e 87       	std	Y+14, r24	; 0x0e
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    37aa:	e9 89       	ldd	r30, Y+17	; 0x11
    37ac:	fa 89       	ldd	r31, Y+18	; 0x12
    37ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    37b0:	86 8b       	std	Z+22, r24	; 0x16
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    37b2:	e9 89       	ldd	r30, Y+17	; 0x11
    37b4:	fa 89       	ldd	r31, Y+18	; 0x12
    37b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    37b8:	83 a3       	std	Z+35, r24	; 0x23
		pxNewTCB->uxMutexesHeld = 0;
    37ba:	e9 89       	ldd	r30, Y+17	; 0x11
    37bc:	fa 89       	ldd	r31, Y+18	; 0x12
    37be:	14 a2       	std	Z+36, r1	; 0x24
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    37c0:	89 89       	ldd	r24, Y+17	; 0x11
    37c2:	9a 89       	ldd	r25, Y+18	; 0x12
    37c4:	02 96       	adiw	r24, 0x02	; 2
    37c6:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    37ca:	89 89       	ldd	r24, Y+17	; 0x11
    37cc:	9a 89       	ldd	r25, Y+18	; 0x12
    37ce:	0c 96       	adiw	r24, 0x0c	; 12
    37d0:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    37d4:	e9 89       	ldd	r30, Y+17	; 0x11
    37d6:	fa 89       	ldd	r31, Y+18	; 0x12
    37d8:	89 89       	ldd	r24, Y+17	; 0x11
    37da:	9a 89       	ldd	r25, Y+18	; 0x12
    37dc:	91 87       	std	Z+9, r25	; 0x09
    37de:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    37e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    37e2:	28 2f       	mov	r18, r24
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	85 e0       	ldi	r24, 0x05	; 5
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	82 1b       	sub	r24, r18
    37ec:	93 0b       	sbc	r25, r19
    37ee:	e9 89       	ldd	r30, Y+17	; 0x11
    37f0:	fa 89       	ldd	r31, Y+18	; 0x12
    37f2:	95 87       	std	Z+13, r25	; 0x0d
    37f4:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    37f6:	e9 89       	ldd	r30, Y+17	; 0x11
    37f8:	fa 89       	ldd	r31, Y+18	; 0x12
    37fa:	89 89       	ldd	r24, Y+17	; 0x11
    37fc:	9a 89       	ldd	r25, Y+18	; 0x12
    37fe:	93 8b       	std	Z+19, r25	; 0x13
    3800:	82 8b       	std	Z+18, r24	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    3802:	e9 89       	ldd	r30, Y+17	; 0x11
    3804:	fa 89       	ldd	r31, Y+18	; 0x12
    3806:	15 a2       	std	Z+37, r1	; 0x25
    3808:	16 a2       	std	Z+38, r1	; 0x26
    380a:	17 a2       	std	Z+39, r1	; 0x27
    380c:	10 a6       	std	Z+40, r1	; 0x28
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    380e:	e9 89       	ldd	r30, Y+17	; 0x11
    3810:	fa 89       	ldd	r31, Y+18	; 0x12
    3812:	11 a6       	std	Z+41, r1	; 0x29
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    3814:	8a 81       	ldd	r24, Y+2	; 0x02
    3816:	9b 81       	ldd	r25, Y+3	; 0x03
    3818:	2c 81       	ldd	r18, Y+4	; 0x04
    381a:	3d 81       	ldd	r19, Y+5	; 0x05
    381c:	4c 85       	ldd	r20, Y+12	; 0x0c
    381e:	5d 85       	ldd	r21, Y+13	; 0x0d
    3820:	b9 01       	movw	r22, r18
    3822:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <pxPortInitialiseStack>
    3826:	e9 89       	ldd	r30, Y+17	; 0x11
    3828:	fa 89       	ldd	r31, Y+18	; 0x12
    382a:	91 83       	std	Z+1, r25	; 0x01
    382c:	80 83       	st	Z, r24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    382e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3830:	98 89       	ldd	r25, Y+16	; 0x10
    3832:	00 97       	sbiw	r24, 0x00	; 0
    3834:	31 f0       	breq	.+12     	; 0x3842 <prvInitialiseNewTask+0x152>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    3836:	ef 85       	ldd	r30, Y+15	; 0x0f
    3838:	f8 89       	ldd	r31, Y+16	; 0x10
    383a:	89 89       	ldd	r24, Y+17	; 0x11
    383c:	9a 89       	ldd	r25, Y+18	; 0x12
    383e:	91 83       	std	Z+1, r25	; 0x01
    3840:	80 83       	st	Z, r24
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    3842:	64 96       	adiw	r28, 0x14	; 20
    3844:	0f b6       	in	r0, 0x3f	; 63
    3846:	f8 94       	cli
    3848:	de bf       	out	0x3e, r29	; 62
    384a:	0f be       	out	0x3f, r0	; 63
    384c:	cd bf       	out	0x3d, r28	; 61
    384e:	cf 91       	pop	r28
    3850:	df 91       	pop	r29
    3852:	1f 91       	pop	r17
    3854:	0f 91       	pop	r16
    3856:	ef 90       	pop	r14
    3858:	df 90       	pop	r13
    385a:	cf 90       	pop	r12
    385c:	bf 90       	pop	r11
    385e:	af 90       	pop	r10
    3860:	9f 90       	pop	r9
    3862:	8f 90       	pop	r8
    3864:	08 95       	ret

00003866 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    3866:	df 93       	push	r29
    3868:	cf 93       	push	r28
    386a:	00 d0       	rcall	.+0      	; 0x386c <prvAddNewTaskToReadyList+0x6>
    386c:	cd b7       	in	r28, 0x3d	; 61
    386e:	de b7       	in	r29, 0x3e	; 62
    3870:	9a 83       	std	Y+2, r25	; 0x02
    3872:	89 83       	std	Y+1, r24	; 0x01
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    3874:	0f b6       	in	r0, 0x3f	; 63
    3876:	f8 94       	cli
    3878:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    387a:	80 91 a0 03 	lds	r24, 0x03A0
    387e:	8f 5f       	subi	r24, 0xFF	; 255
    3880:	80 93 a0 03 	sts	0x03A0, r24
		if( pxCurrentTCB == NULL )
    3884:	80 91 9d 03 	lds	r24, 0x039D
    3888:	90 91 9e 03 	lds	r25, 0x039E
    388c:	00 97       	sbiw	r24, 0x00	; 0
    388e:	69 f4       	brne	.+26     	; 0x38aa <prvAddNewTaskToReadyList+0x44>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    3890:	89 81       	ldd	r24, Y+1	; 0x01
    3892:	9a 81       	ldd	r25, Y+2	; 0x02
    3894:	90 93 9e 03 	sts	0x039E, r25
    3898:	80 93 9d 03 	sts	0x039D, r24

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    389c:	80 91 a0 03 	lds	r24, 0x03A0
    38a0:	81 30       	cpi	r24, 0x01	; 1
    38a2:	b9 f4       	brne	.+46     	; 0x38d2 <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    38a4:	0e 94 75 24 	call	0x48ea	; 0x48ea <prvInitialiseTaskLists>
    38a8:	14 c0       	rjmp	.+40     	; 0x38d2 <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    38aa:	80 91 a4 03 	lds	r24, 0x03A4
    38ae:	88 23       	and	r24, r24
    38b0:	81 f4       	brne	.+32     	; 0x38d2 <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    38b2:	e0 91 9d 03 	lds	r30, 0x039D
    38b6:	f0 91 9e 03 	lds	r31, 0x039E
    38ba:	96 89       	ldd	r25, Z+22	; 0x16
    38bc:	e9 81       	ldd	r30, Y+1	; 0x01
    38be:	fa 81       	ldd	r31, Y+2	; 0x02
    38c0:	86 89       	ldd	r24, Z+22	; 0x16
    38c2:	89 17       	cp	r24, r25
    38c4:	30 f0       	brcs	.+12     	; 0x38d2 <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
    38c6:	89 81       	ldd	r24, Y+1	; 0x01
    38c8:	9a 81       	ldd	r25, Y+2	; 0x02
    38ca:	90 93 9e 03 	sts	0x039E, r25
    38ce:	80 93 9d 03 	sts	0x039D, r24
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    38d2:	80 91 a8 03 	lds	r24, 0x03A8
    38d6:	8f 5f       	subi	r24, 0xFF	; 255
    38d8:	80 93 a8 03 	sts	0x03A8, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    38dc:	e9 81       	ldd	r30, Y+1	; 0x01
    38de:	fa 81       	ldd	r31, Y+2	; 0x02
    38e0:	96 89       	ldd	r25, Z+22	; 0x16
    38e2:	80 91 a3 03 	lds	r24, 0x03A3
    38e6:	89 17       	cp	r24, r25
    38e8:	28 f4       	brcc	.+10     	; 0x38f4 <prvAddNewTaskToReadyList+0x8e>
    38ea:	e9 81       	ldd	r30, Y+1	; 0x01
    38ec:	fa 81       	ldd	r31, Y+2	; 0x02
    38ee:	86 89       	ldd	r24, Z+22	; 0x16
    38f0:	80 93 a3 03 	sts	0x03A3, r24
    38f4:	e9 81       	ldd	r30, Y+1	; 0x01
    38f6:	fa 81       	ldd	r31, Y+2	; 0x02
    38f8:	86 89       	ldd	r24, Z+22	; 0x16
    38fa:	28 2f       	mov	r18, r24
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	c9 01       	movw	r24, r18
    3900:	88 0f       	add	r24, r24
    3902:	99 1f       	adc	r25, r25
    3904:	88 0f       	add	r24, r24
    3906:	99 1f       	adc	r25, r25
    3908:	88 0f       	add	r24, r24
    390a:	99 1f       	adc	r25, r25
    390c:	82 0f       	add	r24, r18
    390e:	93 1f       	adc	r25, r19
    3910:	ac 01       	movw	r20, r24
    3912:	42 55       	subi	r20, 0x52	; 82
    3914:	5c 4f       	sbci	r21, 0xFC	; 252
    3916:	89 81       	ldd	r24, Y+1	; 0x01
    3918:	9a 81       	ldd	r25, Y+2	; 0x02
    391a:	9c 01       	movw	r18, r24
    391c:	2e 5f       	subi	r18, 0xFE	; 254
    391e:	3f 4f       	sbci	r19, 0xFF	; 255
    3920:	ca 01       	movw	r24, r20
    3922:	b9 01       	movw	r22, r18
    3924:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    3928:	0f 90       	pop	r0
    392a:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    392c:	80 91 a4 03 	lds	r24, 0x03A4
    3930:	88 23       	and	r24, r24
    3932:	61 f0       	breq	.+24     	; 0x394c <prvAddNewTaskToReadyList+0xe6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    3934:	e0 91 9d 03 	lds	r30, 0x039D
    3938:	f0 91 9e 03 	lds	r31, 0x039E
    393c:	96 89       	ldd	r25, Z+22	; 0x16
    393e:	e9 81       	ldd	r30, Y+1	; 0x01
    3940:	fa 81       	ldd	r31, Y+2	; 0x02
    3942:	86 89       	ldd	r24, Z+22	; 0x16
    3944:	98 17       	cp	r25, r24
    3946:	10 f4       	brcc	.+4      	; 0x394c <prvAddNewTaskToReadyList+0xe6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    3948:	0e 94 4d 11 	call	0x229a	; 0x229a <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    394c:	0f 90       	pop	r0
    394e:	0f 90       	pop	r0
    3950:	cf 91       	pop	r28
    3952:	df 91       	pop	r29
    3954:	08 95       	ret

00003956 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    3956:	df 93       	push	r29
    3958:	cf 93       	push	r28
    395a:	00 d0       	rcall	.+0      	; 0x395c <vTaskDelete+0x6>
    395c:	00 d0       	rcall	.+0      	; 0x395e <vTaskDelete+0x8>
    395e:	00 d0       	rcall	.+0      	; 0x3960 <vTaskDelete+0xa>
    3960:	cd b7       	in	r28, 0x3d	; 61
    3962:	de b7       	in	r29, 0x3e	; 62
    3964:	9c 83       	std	Y+4, r25	; 0x04
    3966:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    3968:	0f b6       	in	r0, 0x3f	; 63
    396a:	f8 94       	cli
    396c:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    396e:	8b 81       	ldd	r24, Y+3	; 0x03
    3970:	9c 81       	ldd	r25, Y+4	; 0x04
    3972:	00 97       	sbiw	r24, 0x00	; 0
    3974:	39 f4       	brne	.+14     	; 0x3984 <vTaskDelete+0x2e>
    3976:	80 91 9d 03 	lds	r24, 0x039D
    397a:	90 91 9e 03 	lds	r25, 0x039E
    397e:	9e 83       	std	Y+6, r25	; 0x06
    3980:	8d 83       	std	Y+5, r24	; 0x05
    3982:	04 c0       	rjmp	.+8      	; 0x398c <vTaskDelete+0x36>
    3984:	8b 81       	ldd	r24, Y+3	; 0x03
    3986:	9c 81       	ldd	r25, Y+4	; 0x04
    3988:	9e 83       	std	Y+6, r25	; 0x06
    398a:	8d 83       	std	Y+5, r24	; 0x05
    398c:	8d 81       	ldd	r24, Y+5	; 0x05
    398e:	9e 81       	ldd	r25, Y+6	; 0x06
    3990:	9a 83       	std	Y+2, r25	; 0x02
    3992:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3994:	89 81       	ldd	r24, Y+1	; 0x01
    3996:	9a 81       	ldd	r25, Y+2	; 0x02
    3998:	02 96       	adiw	r24, 0x02	; 2
    399a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    399e:	e9 81       	ldd	r30, Y+1	; 0x01
    39a0:	fa 81       	ldd	r31, Y+2	; 0x02
    39a2:	84 89       	ldd	r24, Z+20	; 0x14
    39a4:	95 89       	ldd	r25, Z+21	; 0x15
    39a6:	00 97       	sbiw	r24, 0x00	; 0
    39a8:	29 f0       	breq	.+10     	; 0x39b4 <vTaskDelete+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    39aa:	89 81       	ldd	r24, Y+1	; 0x01
    39ac:	9a 81       	ldd	r25, Y+2	; 0x02
    39ae:	0c 96       	adiw	r24, 0x0c	; 12
    39b0:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    39b4:	80 91 a8 03 	lds	r24, 0x03A8
    39b8:	8f 5f       	subi	r24, 0xFF	; 255
    39ba:	80 93 a8 03 	sts	0x03A8, r24

			if( pxTCB == pxCurrentTCB )
    39be:	20 91 9d 03 	lds	r18, 0x039D
    39c2:	30 91 9e 03 	lds	r19, 0x039E
    39c6:	89 81       	ldd	r24, Y+1	; 0x01
    39c8:	9a 81       	ldd	r25, Y+2	; 0x02
    39ca:	82 17       	cp	r24, r18
    39cc:	93 07       	cpc	r25, r19
    39ce:	81 f4       	brne	.+32     	; 0x39f0 <vTaskDelete+0x9a>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    39d0:	89 81       	ldd	r24, Y+1	; 0x01
    39d2:	9a 81       	ldd	r25, Y+2	; 0x02
    39d4:	9c 01       	movw	r18, r24
    39d6:	2e 5f       	subi	r18, 0xFE	; 254
    39d8:	3f 4f       	sbci	r19, 0xFF	; 255
    39da:	8a ef       	ldi	r24, 0xFA	; 250
    39dc:	93 e0       	ldi	r25, 0x03	; 3
    39de:	b9 01       	movw	r22, r18
    39e0:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    39e4:	80 91 9f 03 	lds	r24, 0x039F
    39e8:	8f 5f       	subi	r24, 0xFF	; 255
    39ea:	80 93 9f 03 	sts	0x039F, r24
    39ee:	0b c0       	rjmp	.+22     	; 0x3a06 <vTaskDelete+0xb0>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    39f0:	80 91 a0 03 	lds	r24, 0x03A0
    39f4:	81 50       	subi	r24, 0x01	; 1
    39f6:	80 93 a0 03 	sts	0x03A0, r24
				prvDeleteTCB( pxTCB );
    39fa:	89 81       	ldd	r24, Y+1	; 0x01
    39fc:	9a 81       	ldd	r25, Y+2	; 0x02
    39fe:	0e 94 f5 24 	call	0x49ea	; 0x49ea <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    3a02:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    3a06:	0f 90       	pop	r0
    3a08:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    3a0a:	80 91 a4 03 	lds	r24, 0x03A4
    3a0e:	88 23       	and	r24, r24
    3a10:	59 f0       	breq	.+22     	; 0x3a28 <vTaskDelete+0xd2>
		{
			if( pxTCB == pxCurrentTCB )
    3a12:	20 91 9d 03 	lds	r18, 0x039D
    3a16:	30 91 9e 03 	lds	r19, 0x039E
    3a1a:	89 81       	ldd	r24, Y+1	; 0x01
    3a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a1e:	82 17       	cp	r24, r18
    3a20:	93 07       	cpc	r25, r19
    3a22:	11 f4       	brne	.+4      	; 0x3a28 <vTaskDelete+0xd2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    3a24:	0e 94 4d 11 	call	0x229a	; 0x229a <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    3a28:	26 96       	adiw	r28, 0x06	; 6
    3a2a:	0f b6       	in	r0, 0x3f	; 63
    3a2c:	f8 94       	cli
    3a2e:	de bf       	out	0x3e, r29	; 62
    3a30:	0f be       	out	0x3f, r0	; 63
    3a32:	cd bf       	out	0x3d, r28	; 61
    3a34:	cf 91       	pop	r28
    3a36:	df 91       	pop	r29
    3a38:	08 95       	ret

00003a3a <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    3a3a:	df 93       	push	r29
    3a3c:	cf 93       	push	r28
    3a3e:	cd b7       	in	r28, 0x3d	; 61
    3a40:	de b7       	in	r29, 0x3e	; 62
    3a42:	2a 97       	sbiw	r28, 0x0a	; 10
    3a44:	0f b6       	in	r0, 0x3f	; 63
    3a46:	f8 94       	cli
    3a48:	de bf       	out	0x3e, r29	; 62
    3a4a:	0f be       	out	0x3f, r0	; 63
    3a4c:	cd bf       	out	0x3d, r28	; 61
    3a4e:	98 87       	std	Y+8, r25	; 0x08
    3a50:	8f 83       	std	Y+7, r24	; 0x07
    3a52:	7a 87       	std	Y+10, r23	; 0x0a
    3a54:	69 87       	std	Y+9, r22	; 0x09
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    3a56:	1b 82       	std	Y+3, r1	; 0x03

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    3a58:	0e 94 7e 20 	call	0x40fc	; 0x40fc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    3a5c:	80 91 a1 03 	lds	r24, 0x03A1
    3a60:	90 91 a2 03 	lds	r25, 0x03A2
    3a64:	9a 83       	std	Y+2, r25	; 0x02
    3a66:	89 83       	std	Y+1, r24	; 0x01

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3a68:	ef 81       	ldd	r30, Y+7	; 0x07
    3a6a:	f8 85       	ldd	r31, Y+8	; 0x08
    3a6c:	20 81       	ld	r18, Z
    3a6e:	31 81       	ldd	r19, Z+1	; 0x01
    3a70:	89 85       	ldd	r24, Y+9	; 0x09
    3a72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a74:	82 0f       	add	r24, r18
    3a76:	93 1f       	adc	r25, r19
    3a78:	9e 83       	std	Y+6, r25	; 0x06
    3a7a:	8d 83       	std	Y+5, r24	; 0x05

			if( xConstTickCount < *pxPreviousWakeTime )
    3a7c:	ef 81       	ldd	r30, Y+7	; 0x07
    3a7e:	f8 85       	ldd	r31, Y+8	; 0x08
    3a80:	20 81       	ld	r18, Z
    3a82:	31 81       	ldd	r19, Z+1	; 0x01
    3a84:	89 81       	ldd	r24, Y+1	; 0x01
    3a86:	9a 81       	ldd	r25, Y+2	; 0x02
    3a88:	82 17       	cp	r24, r18
    3a8a:	93 07       	cpc	r25, r19
    3a8c:	98 f4       	brcc	.+38     	; 0x3ab4 <vTaskDelayUntil+0x7a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    3a8e:	ef 81       	ldd	r30, Y+7	; 0x07
    3a90:	f8 85       	ldd	r31, Y+8	; 0x08
    3a92:	20 81       	ld	r18, Z
    3a94:	31 81       	ldd	r19, Z+1	; 0x01
    3a96:	8d 81       	ldd	r24, Y+5	; 0x05
    3a98:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9a:	82 17       	cp	r24, r18
    3a9c:	93 07       	cpc	r25, r19
    3a9e:	e0 f4       	brcc	.+56     	; 0x3ad8 <vTaskDelayUntil+0x9e>
    3aa0:	2d 81       	ldd	r18, Y+5	; 0x05
    3aa2:	3e 81       	ldd	r19, Y+6	; 0x06
    3aa4:	89 81       	ldd	r24, Y+1	; 0x01
    3aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa8:	82 17       	cp	r24, r18
    3aaa:	93 07       	cpc	r25, r19
    3aac:	a8 f4       	brcc	.+42     	; 0x3ad8 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    3aae:	81 e0       	ldi	r24, 0x01	; 1
    3ab0:	8b 83       	std	Y+3, r24	; 0x03
    3ab2:	12 c0       	rjmp	.+36     	; 0x3ad8 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    3ab4:	ef 81       	ldd	r30, Y+7	; 0x07
    3ab6:	f8 85       	ldd	r31, Y+8	; 0x08
    3ab8:	20 81       	ld	r18, Z
    3aba:	31 81       	ldd	r19, Z+1	; 0x01
    3abc:	8d 81       	ldd	r24, Y+5	; 0x05
    3abe:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac0:	82 17       	cp	r24, r18
    3ac2:	93 07       	cpc	r25, r19
    3ac4:	38 f0       	brcs	.+14     	; 0x3ad4 <vTaskDelayUntil+0x9a>
    3ac6:	2d 81       	ldd	r18, Y+5	; 0x05
    3ac8:	3e 81       	ldd	r19, Y+6	; 0x06
    3aca:	89 81       	ldd	r24, Y+1	; 0x01
    3acc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ace:	82 17       	cp	r24, r18
    3ad0:	93 07       	cpc	r25, r19
    3ad2:	10 f4       	brcc	.+4      	; 0x3ad8 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    3ad4:	81 e0       	ldi	r24, 0x01	; 1
    3ad6:	8b 83       	std	Y+3, r24	; 0x03
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3ad8:	ef 81       	ldd	r30, Y+7	; 0x07
    3ada:	f8 85       	ldd	r31, Y+8	; 0x08
    3adc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ade:	9e 81       	ldd	r25, Y+6	; 0x06
    3ae0:	91 83       	std	Z+1, r25	; 0x01
    3ae2:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    3ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae6:	88 23       	and	r24, r24
    3ae8:	49 f0       	breq	.+18     	; 0x3afc <vTaskDelayUntil+0xc2>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    3aea:	8d 81       	ldd	r24, Y+5	; 0x05
    3aec:	9e 81       	ldd	r25, Y+6	; 0x06
    3aee:	29 81       	ldd	r18, Y+1	; 0x01
    3af0:	3a 81       	ldd	r19, Y+2	; 0x02
    3af2:	82 1b       	sub	r24, r18
    3af4:	93 0b       	sbc	r25, r19
    3af6:	60 e0       	ldi	r22, 0x00	; 0
    3af8:	0e 94 2e 2a 	call	0x545c	; 0x545c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3afc:	0e 94 8a 20 	call	0x4114	; 0x4114 <xTaskResumeAll>
    3b00:	8c 83       	std	Y+4, r24	; 0x04

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3b02:	8c 81       	ldd	r24, Y+4	; 0x04
    3b04:	88 23       	and	r24, r24
    3b06:	11 f4       	brne	.+4      	; 0x3b0c <vTaskDelayUntil+0xd2>
		{
			portYIELD_WITHIN_API();
    3b08:	0e 94 4d 11 	call	0x229a	; 0x229a <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3b0c:	2a 96       	adiw	r28, 0x0a	; 10
    3b0e:	0f b6       	in	r0, 0x3f	; 63
    3b10:	f8 94       	cli
    3b12:	de bf       	out	0x3e, r29	; 62
    3b14:	0f be       	out	0x3f, r0	; 63
    3b16:	cd bf       	out	0x3d, r28	; 61
    3b18:	cf 91       	pop	r28
    3b1a:	df 91       	pop	r29
    3b1c:	08 95       	ret

00003b1e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    3b1e:	df 93       	push	r29
    3b20:	cf 93       	push	r28
    3b22:	00 d0       	rcall	.+0      	; 0x3b24 <vTaskDelay+0x6>
    3b24:	0f 92       	push	r0
    3b26:	cd b7       	in	r28, 0x3d	; 61
    3b28:	de b7       	in	r29, 0x3e	; 62
    3b2a:	9b 83       	std	Y+3, r25	; 0x03
    3b2c:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xAlreadyYielded = pdFALSE;
    3b2e:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    3b30:	8a 81       	ldd	r24, Y+2	; 0x02
    3b32:	9b 81       	ldd	r25, Y+3	; 0x03
    3b34:	00 97       	sbiw	r24, 0x00	; 0
    3b36:	51 f0       	breq	.+20     	; 0x3b4c <vTaskDelay+0x2e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    3b38:	0e 94 7e 20 	call	0x40fc	; 0x40fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    3b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b3e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b40:	60 e0       	ldi	r22, 0x00	; 0
    3b42:	0e 94 2e 2a 	call	0x545c	; 0x545c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3b46:	0e 94 8a 20 	call	0x4114	; 0x4114 <xTaskResumeAll>
    3b4a:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3b4c:	89 81       	ldd	r24, Y+1	; 0x01
    3b4e:	88 23       	and	r24, r24
    3b50:	11 f4       	brne	.+4      	; 0x3b56 <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    3b52:	0e 94 4d 11 	call	0x229a	; 0x229a <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3b56:	0f 90       	pop	r0
    3b58:	0f 90       	pop	r0
    3b5a:	0f 90       	pop	r0
    3b5c:	cf 91       	pop	r28
    3b5e:	df 91       	pop	r29
    3b60:	08 95       	ret

00003b62 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
    3b62:	df 93       	push	r29
    3b64:	cf 93       	push	r28
    3b66:	cd b7       	in	r28, 0x3d	; 61
    3b68:	de b7       	in	r29, 0x3e	; 62
    3b6a:	27 97       	sbiw	r28, 0x07	; 7
    3b6c:	0f b6       	in	r0, 0x3f	; 63
    3b6e:	f8 94       	cli
    3b70:	de bf       	out	0x3e, r29	; 62
    3b72:	0f be       	out	0x3f, r0	; 63
    3b74:	cd bf       	out	0x3d, r28	; 61
    3b76:	9d 83       	std	Y+5, r25	; 0x05
    3b78:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
    3b7a:	0f b6       	in	r0, 0x3f	; 63
    3b7c:	f8 94       	cli
    3b7e:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    3b80:	8c 81       	ldd	r24, Y+4	; 0x04
    3b82:	9d 81       	ldd	r25, Y+5	; 0x05
    3b84:	00 97       	sbiw	r24, 0x00	; 0
    3b86:	39 f4       	brne	.+14     	; 0x3b96 <uxTaskPriorityGet+0x34>
    3b88:	80 91 9d 03 	lds	r24, 0x039D
    3b8c:	90 91 9e 03 	lds	r25, 0x039E
    3b90:	9f 83       	std	Y+7, r25	; 0x07
    3b92:	8e 83       	std	Y+6, r24	; 0x06
    3b94:	04 c0       	rjmp	.+8      	; 0x3b9e <uxTaskPriorityGet+0x3c>
    3b96:	8c 81       	ldd	r24, Y+4	; 0x04
    3b98:	9d 81       	ldd	r25, Y+5	; 0x05
    3b9a:	9f 83       	std	Y+7, r25	; 0x07
    3b9c:	8e 83       	std	Y+6, r24	; 0x06
    3b9e:	8e 81       	ldd	r24, Y+6	; 0x06
    3ba0:	9f 81       	ldd	r25, Y+7	; 0x07
    3ba2:	9b 83       	std	Y+3, r25	; 0x03
    3ba4:	8a 83       	std	Y+2, r24	; 0x02
			uxReturn = pxTCB->uxPriority;
    3ba6:	ea 81       	ldd	r30, Y+2	; 0x02
    3ba8:	fb 81       	ldd	r31, Y+3	; 0x03
    3baa:	86 89       	ldd	r24, Z+22	; 0x16
    3bac:	89 83       	std	Y+1, r24	; 0x01
		}
		taskEXIT_CRITICAL();
    3bae:	0f 90       	pop	r0
    3bb0:	0f be       	out	0x3f, r0	; 63

		return uxReturn;
    3bb2:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3bb4:	27 96       	adiw	r28, 0x07	; 7
    3bb6:	0f b6       	in	r0, 0x3f	; 63
    3bb8:	f8 94       	cli
    3bba:	de bf       	out	0x3e, r29	; 62
    3bbc:	0f be       	out	0x3f, r0	; 63
    3bbe:	cd bf       	out	0x3d, r28	; 61
    3bc0:	cf 91       	pop	r28
    3bc2:	df 91       	pop	r29
    3bc4:	08 95       	ret

00003bc6 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
    3bc6:	df 93       	push	r29
    3bc8:	cf 93       	push	r28
    3bca:	cd b7       	in	r28, 0x3d	; 61
    3bcc:	de b7       	in	r29, 0x3e	; 62
    3bce:	28 97       	sbiw	r28, 0x08	; 8
    3bd0:	0f b6       	in	r0, 0x3f	; 63
    3bd2:	f8 94       	cli
    3bd4:	de bf       	out	0x3e, r29	; 62
    3bd6:	0f be       	out	0x3f, r0	; 63
    3bd8:	cd bf       	out	0x3d, r28	; 61
    3bda:	9e 83       	std	Y+6, r25	; 0x06
    3bdc:	8d 83       	std	Y+5, r24	; 0x05
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
    3bde:	19 82       	std	Y+1, r1	; 0x01
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    3be0:	8d 81       	ldd	r24, Y+5	; 0x05
    3be2:	9e 81       	ldd	r25, Y+6	; 0x06
    3be4:	00 97       	sbiw	r24, 0x00	; 0
    3be6:	39 f4       	brne	.+14     	; 0x3bf6 <uxTaskPriorityGetFromISR+0x30>
    3be8:	80 91 9d 03 	lds	r24, 0x039D
    3bec:	90 91 9e 03 	lds	r25, 0x039E
    3bf0:	98 87       	std	Y+8, r25	; 0x08
    3bf2:	8f 83       	std	Y+7, r24	; 0x07
    3bf4:	04 c0       	rjmp	.+8      	; 0x3bfe <uxTaskPriorityGetFromISR+0x38>
    3bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bfa:	98 87       	std	Y+8, r25	; 0x08
    3bfc:	8f 83       	std	Y+7, r24	; 0x07
    3bfe:	8f 81       	ldd	r24, Y+7	; 0x07
    3c00:	98 85       	ldd	r25, Y+8	; 0x08
    3c02:	9c 83       	std	Y+4, r25	; 0x04
    3c04:	8b 83       	std	Y+3, r24	; 0x03
			uxReturn = pxTCB->uxPriority;
    3c06:	eb 81       	ldd	r30, Y+3	; 0x03
    3c08:	fc 81       	ldd	r31, Y+4	; 0x04
    3c0a:	86 89       	ldd	r24, Z+22	; 0x16
    3c0c:	8a 83       	std	Y+2, r24	; 0x02
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
    3c0e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    3c10:	28 96       	adiw	r28, 0x08	; 8
    3c12:	0f b6       	in	r0, 0x3f	; 63
    3c14:	f8 94       	cli
    3c16:	de bf       	out	0x3e, r29	; 62
    3c18:	0f be       	out	0x3f, r0	; 63
    3c1a:	cd bf       	out	0x3d, r28	; 61
    3c1c:	cf 91       	pop	r28
    3c1e:	df 91       	pop	r29
    3c20:	08 95       	ret

00003c22 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    3c22:	df 93       	push	r29
    3c24:	cf 93       	push	r28
    3c26:	cd b7       	in	r28, 0x3d	; 61
    3c28:	de b7       	in	r29, 0x3e	; 62
    3c2a:	2a 97       	sbiw	r28, 0x0a	; 10
    3c2c:	0f b6       	in	r0, 0x3f	; 63
    3c2e:	f8 94       	cli
    3c30:	de bf       	out	0x3e, r29	; 62
    3c32:	0f be       	out	0x3f, r0	; 63
    3c34:	cd bf       	out	0x3d, r28	; 61
    3c36:	9f 83       	std	Y+7, r25	; 0x07
    3c38:	8e 83       	std	Y+6, r24	; 0x06
    3c3a:	68 87       	std	Y+8, r22	; 0x08
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    3c3c:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    3c3e:	88 85       	ldd	r24, Y+8	; 0x08
    3c40:	85 30       	cpi	r24, 0x05	; 5
    3c42:	10 f0       	brcs	.+4      	; 0x3c48 <vTaskPrioritySet+0x26>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    3c44:	84 e0       	ldi	r24, 0x04	; 4
    3c46:	88 87       	std	Y+8, r24	; 0x08
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    3c48:	0f b6       	in	r0, 0x3f	; 63
    3c4a:	f8 94       	cli
    3c4c:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    3c4e:	8e 81       	ldd	r24, Y+6	; 0x06
    3c50:	9f 81       	ldd	r25, Y+7	; 0x07
    3c52:	00 97       	sbiw	r24, 0x00	; 0
    3c54:	39 f4       	brne	.+14     	; 0x3c64 <vTaskPrioritySet+0x42>
    3c56:	80 91 9d 03 	lds	r24, 0x039D
    3c5a:	90 91 9e 03 	lds	r25, 0x039E
    3c5e:	9a 87       	std	Y+10, r25	; 0x0a
    3c60:	89 87       	std	Y+9, r24	; 0x09
    3c62:	04 c0       	rjmp	.+8      	; 0x3c6c <vTaskPrioritySet+0x4a>
    3c64:	8e 81       	ldd	r24, Y+6	; 0x06
    3c66:	9f 81       	ldd	r25, Y+7	; 0x07
    3c68:	9a 87       	std	Y+10, r25	; 0x0a
    3c6a:	89 87       	std	Y+9, r24	; 0x09
    3c6c:	89 85       	ldd	r24, Y+9	; 0x09
    3c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c70:	9d 83       	std	Y+5, r25	; 0x05
    3c72:	8c 83       	std	Y+4, r24	; 0x04

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    3c74:	ec 81       	ldd	r30, Y+4	; 0x04
    3c76:	fd 81       	ldd	r31, Y+5	; 0x05
    3c78:	83 a1       	ldd	r24, Z+35	; 0x23
    3c7a:	8b 83       	std	Y+3, r24	; 0x03
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    3c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c7e:	88 85       	ldd	r24, Y+8	; 0x08
    3c80:	98 17       	cp	r25, r24
    3c82:	09 f4       	brne	.+2      	; 0x3c86 <vTaskPrioritySet+0x64>
    3c84:	8d c0       	rjmp	.+282    	; 0x3da0 <vTaskPrioritySet+0x17e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    3c86:	98 85       	ldd	r25, Y+8	; 0x08
    3c88:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8a:	89 17       	cp	r24, r25
    3c8c:	a0 f4       	brcc	.+40     	; 0x3cb6 <vTaskPrioritySet+0x94>
				{
					if( pxTCB != pxCurrentTCB )
    3c8e:	20 91 9d 03 	lds	r18, 0x039D
    3c92:	30 91 9e 03 	lds	r19, 0x039E
    3c96:	8c 81       	ldd	r24, Y+4	; 0x04
    3c98:	9d 81       	ldd	r25, Y+5	; 0x05
    3c9a:	82 17       	cp	r24, r18
    3c9c:	93 07       	cpc	r25, r19
    3c9e:	b1 f0       	breq	.+44     	; 0x3ccc <vTaskPrioritySet+0xaa>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    3ca0:	e0 91 9d 03 	lds	r30, 0x039D
    3ca4:	f0 91 9e 03 	lds	r31, 0x039E
    3ca8:	96 89       	ldd	r25, Z+22	; 0x16
    3caa:	88 85       	ldd	r24, Y+8	; 0x08
    3cac:	89 17       	cp	r24, r25
    3cae:	70 f0       	brcs	.+28     	; 0x3ccc <vTaskPrioritySet+0xaa>
						{
							xYieldRequired = pdTRUE;
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	89 83       	std	Y+1, r24	; 0x01
    3cb4:	0b c0       	rjmp	.+22     	; 0x3ccc <vTaskPrioritySet+0xaa>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    3cb6:	20 91 9d 03 	lds	r18, 0x039D
    3cba:	30 91 9e 03 	lds	r19, 0x039E
    3cbe:	8c 81       	ldd	r24, Y+4	; 0x04
    3cc0:	9d 81       	ldd	r25, Y+5	; 0x05
    3cc2:	82 17       	cp	r24, r18
    3cc4:	93 07       	cpc	r25, r19
    3cc6:	11 f4       	brne	.+4      	; 0x3ccc <vTaskPrioritySet+0xaa>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
    3cc8:	81 e0       	ldi	r24, 0x01	; 1
    3cca:	89 83       	std	Y+1, r24	; 0x01
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    3ccc:	ec 81       	ldd	r30, Y+4	; 0x04
    3cce:	fd 81       	ldd	r31, Y+5	; 0x05
    3cd0:	86 89       	ldd	r24, Z+22	; 0x16
    3cd2:	8a 83       	std	Y+2, r24	; 0x02

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    3cd4:	ec 81       	ldd	r30, Y+4	; 0x04
    3cd6:	fd 81       	ldd	r31, Y+5	; 0x05
    3cd8:	93 a1       	ldd	r25, Z+35	; 0x23
    3cda:	ec 81       	ldd	r30, Y+4	; 0x04
    3cdc:	fd 81       	ldd	r31, Y+5	; 0x05
    3cde:	86 89       	ldd	r24, Z+22	; 0x16
    3ce0:	98 17       	cp	r25, r24
    3ce2:	21 f4       	brne	.+8      	; 0x3cec <vTaskPrioritySet+0xca>
					{
						pxTCB->uxPriority = uxNewPriority;
    3ce4:	ec 81       	ldd	r30, Y+4	; 0x04
    3ce6:	fd 81       	ldd	r31, Y+5	; 0x05
    3ce8:	88 85       	ldd	r24, Y+8	; 0x08
    3cea:	86 8b       	std	Z+22, r24	; 0x16
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    3cec:	ec 81       	ldd	r30, Y+4	; 0x04
    3cee:	fd 81       	ldd	r31, Y+5	; 0x05
    3cf0:	88 85       	ldd	r24, Y+8	; 0x08
    3cf2:	83 a3       	std	Z+35, r24	; 0x23
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3cf4:	ec 81       	ldd	r30, Y+4	; 0x04
    3cf6:	fd 81       	ldd	r31, Y+5	; 0x05
    3cf8:	84 85       	ldd	r24, Z+12	; 0x0c
    3cfa:	95 85       	ldd	r25, Z+13	; 0x0d
    3cfc:	99 23       	and	r25, r25
    3cfe:	5c f0       	brlt	.+22     	; 0x3d16 <vTaskPrioritySet+0xf4>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3d00:	88 85       	ldd	r24, Y+8	; 0x08
    3d02:	28 2f       	mov	r18, r24
    3d04:	30 e0       	ldi	r19, 0x00	; 0
    3d06:	85 e0       	ldi	r24, 0x05	; 5
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	82 1b       	sub	r24, r18
    3d0c:	93 0b       	sbc	r25, r19
    3d0e:	ec 81       	ldd	r30, Y+4	; 0x04
    3d10:	fd 81       	ldd	r31, Y+5	; 0x05
    3d12:	95 87       	std	Z+13, r25	; 0x0d
    3d14:	84 87       	std	Z+12, r24	; 0x0c

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    3d16:	ec 81       	ldd	r30, Y+4	; 0x04
    3d18:	fd 81       	ldd	r31, Y+5	; 0x05
    3d1a:	42 85       	ldd	r20, Z+10	; 0x0a
    3d1c:	53 85       	ldd	r21, Z+11	; 0x0b
    3d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d20:	28 2f       	mov	r18, r24
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	c9 01       	movw	r24, r18
    3d26:	88 0f       	add	r24, r24
    3d28:	99 1f       	adc	r25, r25
    3d2a:	88 0f       	add	r24, r24
    3d2c:	99 1f       	adc	r25, r25
    3d2e:	88 0f       	add	r24, r24
    3d30:	99 1f       	adc	r25, r25
    3d32:	82 0f       	add	r24, r18
    3d34:	93 1f       	adc	r25, r19
    3d36:	82 55       	subi	r24, 0x52	; 82
    3d38:	9c 4f       	sbci	r25, 0xFC	; 252
    3d3a:	48 17       	cp	r20, r24
    3d3c:	59 07       	cpc	r21, r25
    3d3e:	59 f5       	brne	.+86     	; 0x3d96 <vTaskPrioritySet+0x174>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3d40:	8c 81       	ldd	r24, Y+4	; 0x04
    3d42:	9d 81       	ldd	r25, Y+5	; 0x05
    3d44:	02 96       	adiw	r24, 0x02	; 2
    3d46:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    3d4a:	ec 81       	ldd	r30, Y+4	; 0x04
    3d4c:	fd 81       	ldd	r31, Y+5	; 0x05
    3d4e:	96 89       	ldd	r25, Z+22	; 0x16
    3d50:	80 91 a3 03 	lds	r24, 0x03A3
    3d54:	89 17       	cp	r24, r25
    3d56:	28 f4       	brcc	.+10     	; 0x3d62 <vTaskPrioritySet+0x140>
    3d58:	ec 81       	ldd	r30, Y+4	; 0x04
    3d5a:	fd 81       	ldd	r31, Y+5	; 0x05
    3d5c:	86 89       	ldd	r24, Z+22	; 0x16
    3d5e:	80 93 a3 03 	sts	0x03A3, r24
    3d62:	ec 81       	ldd	r30, Y+4	; 0x04
    3d64:	fd 81       	ldd	r31, Y+5	; 0x05
    3d66:	86 89       	ldd	r24, Z+22	; 0x16
    3d68:	28 2f       	mov	r18, r24
    3d6a:	30 e0       	ldi	r19, 0x00	; 0
    3d6c:	c9 01       	movw	r24, r18
    3d6e:	88 0f       	add	r24, r24
    3d70:	99 1f       	adc	r25, r25
    3d72:	88 0f       	add	r24, r24
    3d74:	99 1f       	adc	r25, r25
    3d76:	88 0f       	add	r24, r24
    3d78:	99 1f       	adc	r25, r25
    3d7a:	82 0f       	add	r24, r18
    3d7c:	93 1f       	adc	r25, r19
    3d7e:	ac 01       	movw	r20, r24
    3d80:	42 55       	subi	r20, 0x52	; 82
    3d82:	5c 4f       	sbci	r21, 0xFC	; 252
    3d84:	8c 81       	ldd	r24, Y+4	; 0x04
    3d86:	9d 81       	ldd	r25, Y+5	; 0x05
    3d88:	9c 01       	movw	r18, r24
    3d8a:	2e 5f       	subi	r18, 0xFE	; 254
    3d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d8e:	ca 01       	movw	r24, r20
    3d90:	b9 01       	movw	r22, r18
    3d92:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
    3d96:	89 81       	ldd	r24, Y+1	; 0x01
    3d98:	88 23       	and	r24, r24
    3d9a:	11 f0       	breq	.+4      	; 0x3da0 <vTaskPrioritySet+0x17e>
				{
					taskYIELD_IF_USING_PREEMPTION();
    3d9c:	0e 94 4d 11 	call	0x229a	; 0x229a <vPortYield>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    3da0:	0f 90       	pop	r0
    3da2:	0f be       	out	0x3f, r0	; 63
	}
    3da4:	2a 96       	adiw	r28, 0x0a	; 10
    3da6:	0f b6       	in	r0, 0x3f	; 63
    3da8:	f8 94       	cli
    3daa:	de bf       	out	0x3e, r29	; 62
    3dac:	0f be       	out	0x3f, r0	; 63
    3dae:	cd bf       	out	0x3d, r28	; 61
    3db0:	cf 91       	pop	r28
    3db2:	df 91       	pop	r29
    3db4:	08 95       	ret

00003db6 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    3db6:	df 93       	push	r29
    3db8:	cf 93       	push	r28
    3dba:	00 d0       	rcall	.+0      	; 0x3dbc <vTaskSuspend+0x6>
    3dbc:	00 d0       	rcall	.+0      	; 0x3dbe <vTaskSuspend+0x8>
    3dbe:	00 d0       	rcall	.+0      	; 0x3dc0 <vTaskSuspend+0xa>
    3dc0:	cd b7       	in	r28, 0x3d	; 61
    3dc2:	de b7       	in	r29, 0x3e	; 62
    3dc4:	9c 83       	std	Y+4, r25	; 0x04
    3dc6:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    3dc8:	0f b6       	in	r0, 0x3f	; 63
    3dca:	f8 94       	cli
    3dcc:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    3dce:	8b 81       	ldd	r24, Y+3	; 0x03
    3dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    3dd2:	00 97       	sbiw	r24, 0x00	; 0
    3dd4:	39 f4       	brne	.+14     	; 0x3de4 <vTaskSuspend+0x2e>
    3dd6:	80 91 9d 03 	lds	r24, 0x039D
    3dda:	90 91 9e 03 	lds	r25, 0x039E
    3dde:	9e 83       	std	Y+6, r25	; 0x06
    3de0:	8d 83       	std	Y+5, r24	; 0x05
    3de2:	04 c0       	rjmp	.+8      	; 0x3dec <vTaskSuspend+0x36>
    3de4:	8b 81       	ldd	r24, Y+3	; 0x03
    3de6:	9c 81       	ldd	r25, Y+4	; 0x04
    3de8:	9e 83       	std	Y+6, r25	; 0x06
    3dea:	8d 83       	std	Y+5, r24	; 0x05
    3dec:	8d 81       	ldd	r24, Y+5	; 0x05
    3dee:	9e 81       	ldd	r25, Y+6	; 0x06
    3df0:	9a 83       	std	Y+2, r25	; 0x02
    3df2:	89 83       	std	Y+1, r24	; 0x01

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3df4:	89 81       	ldd	r24, Y+1	; 0x01
    3df6:	9a 81       	ldd	r25, Y+2	; 0x02
    3df8:	02 96       	adiw	r24, 0x02	; 2
    3dfa:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3dfe:	e9 81       	ldd	r30, Y+1	; 0x01
    3e00:	fa 81       	ldd	r31, Y+2	; 0x02
    3e02:	84 89       	ldd	r24, Z+20	; 0x14
    3e04:	95 89       	ldd	r25, Z+21	; 0x15
    3e06:	00 97       	sbiw	r24, 0x00	; 0
    3e08:	29 f0       	breq	.+10     	; 0x3e14 <vTaskSuspend+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3e0a:	89 81       	ldd	r24, Y+1	; 0x01
    3e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e0e:	0c 96       	adiw	r24, 0x0c	; 12
    3e10:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    3e14:	89 81       	ldd	r24, Y+1	; 0x01
    3e16:	9a 81       	ldd	r25, Y+2	; 0x02
    3e18:	9c 01       	movw	r18, r24
    3e1a:	2e 5f       	subi	r18, 0xFE	; 254
    3e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e1e:	83 e0       	ldi	r24, 0x03	; 3
    3e20:	94 e0       	ldi	r25, 0x04	; 4
    3e22:	b9 01       	movw	r22, r18
    3e24:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    3e28:	0f 90       	pop	r0
    3e2a:	0f be       	out	0x3f, r0	; 63

		if( xSchedulerRunning != pdFALSE )
    3e2c:	80 91 a4 03 	lds	r24, 0x03A4
    3e30:	88 23       	and	r24, r24
    3e32:	39 f0       	breq	.+14     	; 0x3e42 <vTaskSuspend+0x8c>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    3e34:	0f b6       	in	r0, 0x3f	; 63
    3e36:	f8 94       	cli
    3e38:	0f 92       	push	r0
			{
				prvResetNextTaskUnblockTime();
    3e3a:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    3e3e:	0f 90       	pop	r0
    3e40:	0f be       	out	0x3f, r0	; 63
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    3e42:	20 91 9d 03 	lds	r18, 0x039D
    3e46:	30 91 9e 03 	lds	r19, 0x039E
    3e4a:	89 81       	ldd	r24, Y+1	; 0x01
    3e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e4e:	82 17       	cp	r24, r18
    3e50:	93 07       	cpc	r25, r19
    3e52:	a1 f4       	brne	.+40     	; 0x3e7c <vTaskSuspend+0xc6>
		{
			if( xSchedulerRunning != pdFALSE )
    3e54:	80 91 a4 03 	lds	r24, 0x03A4
    3e58:	88 23       	and	r24, r24
    3e5a:	19 f0       	breq	.+6      	; 0x3e62 <vTaskSuspend+0xac>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    3e5c:	0e 94 4d 11 	call	0x229a	; 0x229a <vPortYield>
    3e60:	0d c0       	rjmp	.+26     	; 0x3e7c <vTaskSuspend+0xc6>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    3e62:	90 91 03 04 	lds	r25, 0x0403
    3e66:	80 91 a0 03 	lds	r24, 0x03A0
    3e6a:	98 17       	cp	r25, r24
    3e6c:	29 f4       	brne	.+10     	; 0x3e78 <vTaskSuspend+0xc2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    3e6e:	10 92 9e 03 	sts	0x039E, r1
    3e72:	10 92 9d 03 	sts	0x039D, r1
    3e76:	02 c0       	rjmp	.+4      	; 0x3e7c <vTaskSuspend+0xc6>
				}
				else
				{
					vTaskSwitchContext();
    3e78:	0e 94 46 22 	call	0x448c	; 0x448c <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3e7c:	26 96       	adiw	r28, 0x06	; 6
    3e7e:	0f b6       	in	r0, 0x3f	; 63
    3e80:	f8 94       	cli
    3e82:	de bf       	out	0x3e, r29	; 62
    3e84:	0f be       	out	0x3f, r0	; 63
    3e86:	cd bf       	out	0x3d, r28	; 61
    3e88:	cf 91       	pop	r28
    3e8a:	df 91       	pop	r29
    3e8c:	08 95       	ret

00003e8e <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    3e8e:	df 93       	push	r29
    3e90:	cf 93       	push	r28
    3e92:	00 d0       	rcall	.+0      	; 0x3e94 <prvTaskIsTaskSuspended+0x6>
    3e94:	00 d0       	rcall	.+0      	; 0x3e96 <prvTaskIsTaskSuspended+0x8>
    3e96:	0f 92       	push	r0
    3e98:	cd b7       	in	r28, 0x3d	; 61
    3e9a:	de b7       	in	r29, 0x3e	; 62
    3e9c:	9d 83       	std	Y+5, r25	; 0x05
    3e9e:	8c 83       	std	Y+4, r24	; 0x04
	BaseType_t xReturn = pdFALSE;
    3ea0:	1b 82       	std	Y+3, r1	; 0x03
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
    3ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ea4:	9d 81       	ldd	r25, Y+5	; 0x05
    3ea6:	9a 83       	std	Y+2, r25	; 0x02
    3ea8:	89 83       	std	Y+1, r24	; 0x01

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    3eaa:	e9 81       	ldd	r30, Y+1	; 0x01
    3eac:	fa 81       	ldd	r31, Y+2	; 0x02
    3eae:	82 85       	ldd	r24, Z+10	; 0x0a
    3eb0:	93 85       	ldd	r25, Z+11	; 0x0b
    3eb2:	24 e0       	ldi	r18, 0x04	; 4
    3eb4:	83 30       	cpi	r24, 0x03	; 3
    3eb6:	92 07       	cpc	r25, r18
    3eb8:	81 f4       	brne	.+32     	; 0x3eda <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    3eba:	e9 81       	ldd	r30, Y+1	; 0x01
    3ebc:	fa 81       	ldd	r31, Y+2	; 0x02
    3ebe:	84 89       	ldd	r24, Z+20	; 0x14
    3ec0:	95 89       	ldd	r25, Z+21	; 0x15
    3ec2:	23 e0       	ldi	r18, 0x03	; 3
    3ec4:	81 3f       	cpi	r24, 0xF1	; 241
    3ec6:	92 07       	cpc	r25, r18
    3ec8:	41 f0       	breq	.+16     	; 0x3eda <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
    3eca:	e9 81       	ldd	r30, Y+1	; 0x01
    3ecc:	fa 81       	ldd	r31, Y+2	; 0x02
    3ece:	84 89       	ldd	r24, Z+20	; 0x14
    3ed0:	95 89       	ldd	r25, Z+21	; 0x15
    3ed2:	00 97       	sbiw	r24, 0x00	; 0
    3ed4:	11 f4       	brne	.+4      	; 0x3eda <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	8b 83       	std	Y+3, r24	; 0x03
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    3eda:	8b 81       	ldd	r24, Y+3	; 0x03
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    3edc:	0f 90       	pop	r0
    3ede:	0f 90       	pop	r0
    3ee0:	0f 90       	pop	r0
    3ee2:	0f 90       	pop	r0
    3ee4:	0f 90       	pop	r0
    3ee6:	cf 91       	pop	r28
    3ee8:	df 91       	pop	r29
    3eea:	08 95       	ret

00003eec <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    3eec:	df 93       	push	r29
    3eee:	cf 93       	push	r28
    3ef0:	00 d0       	rcall	.+0      	; 0x3ef2 <vTaskResume+0x6>
    3ef2:	00 d0       	rcall	.+0      	; 0x3ef4 <vTaskResume+0x8>
    3ef4:	cd b7       	in	r28, 0x3d	; 61
    3ef6:	de b7       	in	r29, 0x3e	; 62
    3ef8:	9c 83       	std	Y+4, r25	; 0x04
    3efa:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    3efc:	8b 81       	ldd	r24, Y+3	; 0x03
    3efe:	9c 81       	ldd	r25, Y+4	; 0x04
    3f00:	9a 83       	std	Y+2, r25	; 0x02
    3f02:	89 83       	std	Y+1, r24	; 0x01
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    3f04:	89 81       	ldd	r24, Y+1	; 0x01
    3f06:	9a 81       	ldd	r25, Y+2	; 0x02
    3f08:	00 97       	sbiw	r24, 0x00	; 0
    3f0a:	09 f4       	brne	.+2      	; 0x3f0e <vTaskResume+0x22>
    3f0c:	4c c0       	rjmp	.+152    	; 0x3fa6 <vTaskResume+0xba>
    3f0e:	20 91 9d 03 	lds	r18, 0x039D
    3f12:	30 91 9e 03 	lds	r19, 0x039E
    3f16:	89 81       	ldd	r24, Y+1	; 0x01
    3f18:	9a 81       	ldd	r25, Y+2	; 0x02
    3f1a:	82 17       	cp	r24, r18
    3f1c:	93 07       	cpc	r25, r19
    3f1e:	09 f4       	brne	.+2      	; 0x3f22 <vTaskResume+0x36>
    3f20:	42 c0       	rjmp	.+132    	; 0x3fa6 <vTaskResume+0xba>
		{
			taskENTER_CRITICAL();
    3f22:	0f b6       	in	r0, 0x3f	; 63
    3f24:	f8 94       	cli
    3f26:	0f 92       	push	r0
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    3f28:	89 81       	ldd	r24, Y+1	; 0x01
    3f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f2c:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <prvTaskIsTaskSuspended>
    3f30:	88 23       	and	r24, r24
    3f32:	b9 f1       	breq	.+110    	; 0x3fa2 <vTaskResume+0xb6>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    3f34:	89 81       	ldd	r24, Y+1	; 0x01
    3f36:	9a 81       	ldd	r25, Y+2	; 0x02
    3f38:	02 96       	adiw	r24, 0x02	; 2
    3f3a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3f3e:	e9 81       	ldd	r30, Y+1	; 0x01
    3f40:	fa 81       	ldd	r31, Y+2	; 0x02
    3f42:	96 89       	ldd	r25, Z+22	; 0x16
    3f44:	80 91 a3 03 	lds	r24, 0x03A3
    3f48:	89 17       	cp	r24, r25
    3f4a:	28 f4       	brcc	.+10     	; 0x3f56 <vTaskResume+0x6a>
    3f4c:	e9 81       	ldd	r30, Y+1	; 0x01
    3f4e:	fa 81       	ldd	r31, Y+2	; 0x02
    3f50:	86 89       	ldd	r24, Z+22	; 0x16
    3f52:	80 93 a3 03 	sts	0x03A3, r24
    3f56:	e9 81       	ldd	r30, Y+1	; 0x01
    3f58:	fa 81       	ldd	r31, Y+2	; 0x02
    3f5a:	86 89       	ldd	r24, Z+22	; 0x16
    3f5c:	28 2f       	mov	r18, r24
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	c9 01       	movw	r24, r18
    3f62:	88 0f       	add	r24, r24
    3f64:	99 1f       	adc	r25, r25
    3f66:	88 0f       	add	r24, r24
    3f68:	99 1f       	adc	r25, r25
    3f6a:	88 0f       	add	r24, r24
    3f6c:	99 1f       	adc	r25, r25
    3f6e:	82 0f       	add	r24, r18
    3f70:	93 1f       	adc	r25, r19
    3f72:	ac 01       	movw	r20, r24
    3f74:	42 55       	subi	r20, 0x52	; 82
    3f76:	5c 4f       	sbci	r21, 0xFC	; 252
    3f78:	89 81       	ldd	r24, Y+1	; 0x01
    3f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f7c:	9c 01       	movw	r18, r24
    3f7e:	2e 5f       	subi	r18, 0xFE	; 254
    3f80:	3f 4f       	sbci	r19, 0xFF	; 255
    3f82:	ca 01       	movw	r24, r20
    3f84:	b9 01       	movw	r22, r18
    3f86:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3f8a:	e9 81       	ldd	r30, Y+1	; 0x01
    3f8c:	fa 81       	ldd	r31, Y+2	; 0x02
    3f8e:	96 89       	ldd	r25, Z+22	; 0x16
    3f90:	e0 91 9d 03 	lds	r30, 0x039D
    3f94:	f0 91 9e 03 	lds	r31, 0x039E
    3f98:	86 89       	ldd	r24, Z+22	; 0x16
    3f9a:	98 17       	cp	r25, r24
    3f9c:	10 f0       	brcs	.+4      	; 0x3fa2 <vTaskResume+0xb6>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    3f9e:	0e 94 4d 11 	call	0x229a	; 0x229a <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    3fa2:	0f 90       	pop	r0
    3fa4:	0f be       	out	0x3f, r0	; 63
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3fa6:	0f 90       	pop	r0
    3fa8:	0f 90       	pop	r0
    3faa:	0f 90       	pop	r0
    3fac:	0f 90       	pop	r0
    3fae:	cf 91       	pop	r28
    3fb0:	df 91       	pop	r29
    3fb2:	08 95       	ret

00003fb4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    3fb4:	df 93       	push	r29
    3fb6:	cf 93       	push	r28
    3fb8:	00 d0       	rcall	.+0      	; 0x3fba <xTaskResumeFromISR+0x6>
    3fba:	00 d0       	rcall	.+0      	; 0x3fbc <xTaskResumeFromISR+0x8>
    3fbc:	00 d0       	rcall	.+0      	; 0x3fbe <xTaskResumeFromISR+0xa>
    3fbe:	cd b7       	in	r28, 0x3d	; 61
    3fc0:	de b7       	in	r29, 0x3e	; 62
    3fc2:	9e 83       	std	Y+6, r25	; 0x06
    3fc4:	8d 83       	std	Y+5, r24	; 0x05
	BaseType_t xYieldRequired = pdFALSE;
    3fc6:	1c 82       	std	Y+4, r1	; 0x04
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    3fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3fca:	9e 81       	ldd	r25, Y+6	; 0x06
    3fcc:	9b 83       	std	Y+3, r25	; 0x03
    3fce:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3fd0:	19 82       	std	Y+1, r1	; 0x01
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    3fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd4:	9b 81       	ldd	r25, Y+3	; 0x03
    3fd6:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <prvTaskIsTaskSuspended>
    3fda:	88 23       	and	r24, r24
    3fdc:	09 f4       	brne	.+2      	; 0x3fe0 <xTaskResumeFromISR+0x2c>
    3fde:	46 c0       	rjmp	.+140    	; 0x406c <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3fe0:	80 91 ad 03 	lds	r24, 0x03AD
    3fe4:	88 23       	and	r24, r24
    3fe6:	c1 f5       	brne	.+112    	; 0x4058 <xTaskResumeFromISR+0xa4>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3fe8:	ea 81       	ldd	r30, Y+2	; 0x02
    3fea:	fb 81       	ldd	r31, Y+3	; 0x03
    3fec:	96 89       	ldd	r25, Z+22	; 0x16
    3fee:	e0 91 9d 03 	lds	r30, 0x039D
    3ff2:	f0 91 9e 03 	lds	r31, 0x039E
    3ff6:	86 89       	ldd	r24, Z+22	; 0x16
    3ff8:	98 17       	cp	r25, r24
    3ffa:	10 f0       	brcs	.+4      	; 0x4000 <xTaskResumeFromISR+0x4c>
					{
						xYieldRequired = pdTRUE;
    3ffc:	81 e0       	ldi	r24, 0x01	; 1
    3ffe:	8c 83       	std	Y+4, r24	; 0x04
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4000:	8a 81       	ldd	r24, Y+2	; 0x02
    4002:	9b 81       	ldd	r25, Y+3	; 0x03
    4004:	02 96       	adiw	r24, 0x02	; 2
    4006:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    400a:	ea 81       	ldd	r30, Y+2	; 0x02
    400c:	fb 81       	ldd	r31, Y+3	; 0x03
    400e:	96 89       	ldd	r25, Z+22	; 0x16
    4010:	80 91 a3 03 	lds	r24, 0x03A3
    4014:	89 17       	cp	r24, r25
    4016:	28 f4       	brcc	.+10     	; 0x4022 <xTaskResumeFromISR+0x6e>
    4018:	ea 81       	ldd	r30, Y+2	; 0x02
    401a:	fb 81       	ldd	r31, Y+3	; 0x03
    401c:	86 89       	ldd	r24, Z+22	; 0x16
    401e:	80 93 a3 03 	sts	0x03A3, r24
    4022:	ea 81       	ldd	r30, Y+2	; 0x02
    4024:	fb 81       	ldd	r31, Y+3	; 0x03
    4026:	86 89       	ldd	r24, Z+22	; 0x16
    4028:	28 2f       	mov	r18, r24
    402a:	30 e0       	ldi	r19, 0x00	; 0
    402c:	c9 01       	movw	r24, r18
    402e:	88 0f       	add	r24, r24
    4030:	99 1f       	adc	r25, r25
    4032:	88 0f       	add	r24, r24
    4034:	99 1f       	adc	r25, r25
    4036:	88 0f       	add	r24, r24
    4038:	99 1f       	adc	r25, r25
    403a:	82 0f       	add	r24, r18
    403c:	93 1f       	adc	r25, r19
    403e:	ac 01       	movw	r20, r24
    4040:	42 55       	subi	r20, 0x52	; 82
    4042:	5c 4f       	sbci	r21, 0xFC	; 252
    4044:	8a 81       	ldd	r24, Y+2	; 0x02
    4046:	9b 81       	ldd	r25, Y+3	; 0x03
    4048:	9c 01       	movw	r18, r24
    404a:	2e 5f       	subi	r18, 0xFE	; 254
    404c:	3f 4f       	sbci	r19, 0xFF	; 255
    404e:	ca 01       	movw	r24, r20
    4050:	b9 01       	movw	r22, r18
    4052:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
    4056:	0a c0       	rjmp	.+20     	; 0x406c <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4058:	8a 81       	ldd	r24, Y+2	; 0x02
    405a:	9b 81       	ldd	r25, Y+3	; 0x03
    405c:	9c 01       	movw	r18, r24
    405e:	24 5f       	subi	r18, 0xF4	; 244
    4060:	3f 4f       	sbci	r19, 0xFF	; 255
    4062:	81 ef       	ldi	r24, 0xF1	; 241
    4064:	93 e0       	ldi	r25, 0x03	; 3
    4066:	b9 01       	movw	r22, r18
    4068:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
    406c:	8c 81       	ldd	r24, Y+4	; 0x04
	}
    406e:	26 96       	adiw	r28, 0x06	; 6
    4070:	0f b6       	in	r0, 0x3f	; 63
    4072:	f8 94       	cli
    4074:	de bf       	out	0x3e, r29	; 62
    4076:	0f be       	out	0x3f, r0	; 63
    4078:	cd bf       	out	0x3d, r28	; 61
    407a:	cf 91       	pop	r28
    407c:	df 91       	pop	r29
    407e:	08 95       	ret

00004080 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    4080:	ef 92       	push	r14
    4082:	ff 92       	push	r15
    4084:	0f 93       	push	r16
    4086:	df 93       	push	r29
    4088:	cf 93       	push	r28
    408a:	0f 92       	push	r0
    408c:	cd b7       	in	r28, 0x3d	; 61
    408e:	de b7       	in	r29, 0x3e	; 62
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    4090:	85 e6       	ldi	r24, 0x65	; 101
    4092:	94 e2       	ldi	r25, 0x24	; 36
    4094:	22 e6       	ldi	r18, 0x62	; 98
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	eb ea       	ldi	r30, 0xAB	; 171
    409a:	f3 e0       	ldi	r31, 0x03	; 3
    409c:	b9 01       	movw	r22, r18
    409e:	48 ec       	ldi	r20, 0xC8	; 200
    40a0:	50 e0       	ldi	r21, 0x00	; 0
    40a2:	20 e0       	ldi	r18, 0x00	; 0
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	00 e0       	ldi	r16, 0x00	; 0
    40a8:	7f 01       	movw	r14, r30
    40aa:	0e 94 00 1b 	call	0x3600	; 0x3600 <xTaskCreate>
    40ae:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    40b0:	89 81       	ldd	r24, Y+1	; 0x01
    40b2:	81 30       	cpi	r24, 0x01	; 1
    40b4:	81 f4       	brne	.+32     	; 0x40d6 <vTaskStartScheduler+0x56>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    40b6:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    40b8:	8f ef       	ldi	r24, 0xFF	; 255
    40ba:	9f ef       	ldi	r25, 0xFF	; 255
    40bc:	90 93 aa 03 	sts	0x03AA, r25
    40c0:	80 93 a9 03 	sts	0x03A9, r24
		xSchedulerRunning = pdTRUE;
    40c4:	81 e0       	ldi	r24, 0x01	; 1
    40c6:	80 93 a4 03 	sts	0x03A4, r24
		xTickCount = ( TickType_t ) 0U;
    40ca:	10 92 a2 03 	sts	0x03A2, r1
    40ce:	10 92 a1 03 	sts	0x03A1, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    40d2:	0e 94 11 11 	call	0x2222	; 0x2222 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    40d6:	0f 90       	pop	r0
    40d8:	cf 91       	pop	r28
    40da:	df 91       	pop	r29
    40dc:	0f 91       	pop	r16
    40de:	ff 90       	pop	r15
    40e0:	ef 90       	pop	r14
    40e2:	08 95       	ret

000040e4 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    40e4:	df 93       	push	r29
    40e6:	cf 93       	push	r28
    40e8:	cd b7       	in	r28, 0x3d	; 61
    40ea:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    40ec:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    40ee:	10 92 a4 03 	sts	0x03A4, r1
	vPortEndScheduler();
    40f2:	0e 94 46 11 	call	0x228c	; 0x228c <vPortEndScheduler>
}
    40f6:	cf 91       	pop	r28
    40f8:	df 91       	pop	r29
    40fa:	08 95       	ret

000040fc <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    40fc:	df 93       	push	r29
    40fe:	cf 93       	push	r28
    4100:	cd b7       	in	r28, 0x3d	; 61
    4102:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    4104:	80 91 ad 03 	lds	r24, 0x03AD
    4108:	8f 5f       	subi	r24, 0xFF	; 255
    410a:	80 93 ad 03 	sts	0x03AD, r24
}
    410e:	cf 91       	pop	r28
    4110:	df 91       	pop	r29
    4112:	08 95       	ret

00004114 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    4114:	df 93       	push	r29
    4116:	cf 93       	push	r28
    4118:	00 d0       	rcall	.+0      	; 0x411a <xTaskResumeAll+0x6>
    411a:	00 d0       	rcall	.+0      	; 0x411c <xTaskResumeAll+0x8>
    411c:	cd b7       	in	r28, 0x3d	; 61
    411e:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB = NULL;
    4120:	1c 82       	std	Y+4, r1	; 0x04
    4122:	1b 82       	std	Y+3, r1	; 0x03
BaseType_t xAlreadyYielded = pdFALSE;
    4124:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    4126:	0f b6       	in	r0, 0x3f	; 63
    4128:	f8 94       	cli
    412a:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    412c:	80 91 ad 03 	lds	r24, 0x03AD
    4130:	81 50       	subi	r24, 0x01	; 1
    4132:	80 93 ad 03 	sts	0x03AD, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4136:	80 91 ad 03 	lds	r24, 0x03AD
    413a:	88 23       	and	r24, r24
    413c:	09 f0       	breq	.+2      	; 0x4140 <xTaskResumeAll+0x2c>
    413e:	73 c0       	rjmp	.+230    	; 0x4226 <xTaskResumeAll+0x112>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    4140:	80 91 a0 03 	lds	r24, 0x03A0
    4144:	88 23       	and	r24, r24
    4146:	09 f4       	brne	.+2      	; 0x414a <xTaskResumeAll+0x36>
    4148:	6e c0       	rjmp	.+220    	; 0x4226 <xTaskResumeAll+0x112>
    414a:	45 c0       	rjmp	.+138    	; 0x41d6 <xTaskResumeAll+0xc2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    414c:	e0 91 f6 03 	lds	r30, 0x03F6
    4150:	f0 91 f7 03 	lds	r31, 0x03F7
    4154:	86 81       	ldd	r24, Z+6	; 0x06
    4156:	97 81       	ldd	r25, Z+7	; 0x07
    4158:	9c 83       	std	Y+4, r25	; 0x04
    415a:	8b 83       	std	Y+3, r24	; 0x03
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    415c:	8b 81       	ldd	r24, Y+3	; 0x03
    415e:	9c 81       	ldd	r25, Y+4	; 0x04
    4160:	0c 96       	adiw	r24, 0x0c	; 12
    4162:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4166:	8b 81       	ldd	r24, Y+3	; 0x03
    4168:	9c 81       	ldd	r25, Y+4	; 0x04
    416a:	02 96       	adiw	r24, 0x02	; 2
    416c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    4170:	eb 81       	ldd	r30, Y+3	; 0x03
    4172:	fc 81       	ldd	r31, Y+4	; 0x04
    4174:	96 89       	ldd	r25, Z+22	; 0x16
    4176:	80 91 a3 03 	lds	r24, 0x03A3
    417a:	89 17       	cp	r24, r25
    417c:	28 f4       	brcc	.+10     	; 0x4188 <xTaskResumeAll+0x74>
    417e:	eb 81       	ldd	r30, Y+3	; 0x03
    4180:	fc 81       	ldd	r31, Y+4	; 0x04
    4182:	86 89       	ldd	r24, Z+22	; 0x16
    4184:	80 93 a3 03 	sts	0x03A3, r24
    4188:	eb 81       	ldd	r30, Y+3	; 0x03
    418a:	fc 81       	ldd	r31, Y+4	; 0x04
    418c:	86 89       	ldd	r24, Z+22	; 0x16
    418e:	28 2f       	mov	r18, r24
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	c9 01       	movw	r24, r18
    4194:	88 0f       	add	r24, r24
    4196:	99 1f       	adc	r25, r25
    4198:	88 0f       	add	r24, r24
    419a:	99 1f       	adc	r25, r25
    419c:	88 0f       	add	r24, r24
    419e:	99 1f       	adc	r25, r25
    41a0:	82 0f       	add	r24, r18
    41a2:	93 1f       	adc	r25, r19
    41a4:	ac 01       	movw	r20, r24
    41a6:	42 55       	subi	r20, 0x52	; 82
    41a8:	5c 4f       	sbci	r21, 0xFC	; 252
    41aa:	8b 81       	ldd	r24, Y+3	; 0x03
    41ac:	9c 81       	ldd	r25, Y+4	; 0x04
    41ae:	9c 01       	movw	r18, r24
    41b0:	2e 5f       	subi	r18, 0xFE	; 254
    41b2:	3f 4f       	sbci	r19, 0xFF	; 255
    41b4:	ca 01       	movw	r24, r20
    41b6:	b9 01       	movw	r22, r18
    41b8:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    41bc:	eb 81       	ldd	r30, Y+3	; 0x03
    41be:	fc 81       	ldd	r31, Y+4	; 0x04
    41c0:	96 89       	ldd	r25, Z+22	; 0x16
    41c2:	e0 91 9d 03 	lds	r30, 0x039D
    41c6:	f0 91 9e 03 	lds	r31, 0x039E
    41ca:	86 89       	ldd	r24, Z+22	; 0x16
    41cc:	98 17       	cp	r25, r24
    41ce:	18 f0       	brcs	.+6      	; 0x41d6 <xTaskResumeAll+0xc2>
					{
						xYieldPending = pdTRUE;
    41d0:	81 e0       	ldi	r24, 0x01	; 1
    41d2:	80 93 a6 03 	sts	0x03A6, r24
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    41d6:	80 91 f1 03 	lds	r24, 0x03F1
    41da:	88 23       	and	r24, r24
    41dc:	09 f0       	breq	.+2      	; 0x41e0 <xTaskResumeAll+0xcc>
    41de:	b6 cf       	rjmp	.-148    	; 0x414c <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    41e0:	8b 81       	ldd	r24, Y+3	; 0x03
    41e2:	9c 81       	ldd	r25, Y+4	; 0x04
    41e4:	00 97       	sbiw	r24, 0x00	; 0
    41e6:	11 f0       	breq	.+4      	; 0x41ec <xTaskResumeAll+0xd8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    41e8:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    41ec:	80 91 a5 03 	lds	r24, 0x03A5
    41f0:	89 83       	std	Y+1, r24	; 0x01

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    41f2:	89 81       	ldd	r24, Y+1	; 0x01
    41f4:	88 23       	and	r24, r24
    41f6:	79 f0       	breq	.+30     	; 0x4216 <xTaskResumeAll+0x102>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    41f8:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <xTaskIncrementTick>
    41fc:	88 23       	and	r24, r24
    41fe:	19 f0       	breq	.+6      	; 0x4206 <xTaskResumeAll+0xf2>
							{
								xYieldPending = pdTRUE;
    4200:	81 e0       	ldi	r24, 0x01	; 1
    4202:	80 93 a6 03 	sts	0x03A6, r24
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    4206:	89 81       	ldd	r24, Y+1	; 0x01
    4208:	81 50       	subi	r24, 0x01	; 1
    420a:	89 83       	std	Y+1, r24	; 0x01
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    420c:	89 81       	ldd	r24, Y+1	; 0x01
    420e:	88 23       	and	r24, r24
    4210:	99 f7       	brne	.-26     	; 0x41f8 <xTaskResumeAll+0xe4>

						uxPendedTicks = 0;
    4212:	10 92 a5 03 	sts	0x03A5, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    4216:	80 91 a6 03 	lds	r24, 0x03A6
    421a:	88 23       	and	r24, r24
    421c:	21 f0       	breq	.+8      	; 0x4226 <xTaskResumeAll+0x112>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    421e:	81 e0       	ldi	r24, 0x01	; 1
    4220:	8a 83       	std	Y+2, r24	; 0x02
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    4222:	0e 94 4d 11 	call	0x229a	; 0x229a <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    4226:	0f 90       	pop	r0
    4228:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    422a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    422c:	0f 90       	pop	r0
    422e:	0f 90       	pop	r0
    4230:	0f 90       	pop	r0
    4232:	0f 90       	pop	r0
    4234:	cf 91       	pop	r28
    4236:	df 91       	pop	r29
    4238:	08 95       	ret

0000423a <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    423a:	df 93       	push	r29
    423c:	cf 93       	push	r28
    423e:	00 d0       	rcall	.+0      	; 0x4240 <xTaskGetTickCount+0x6>
    4240:	cd b7       	in	r28, 0x3d	; 61
    4242:	de b7       	in	r29, 0x3e	; 62
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    4244:	0f b6       	in	r0, 0x3f	; 63
    4246:	f8 94       	cli
    4248:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    424a:	80 91 a1 03 	lds	r24, 0x03A1
    424e:	90 91 a2 03 	lds	r25, 0x03A2
    4252:	9a 83       	std	Y+2, r25	; 0x02
    4254:	89 83       	std	Y+1, r24	; 0x01
	}
	portTICK_TYPE_EXIT_CRITICAL();
    4256:	0f 90       	pop	r0
    4258:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    425a:	89 81       	ldd	r24, Y+1	; 0x01
    425c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    425e:	0f 90       	pop	r0
    4260:	0f 90       	pop	r0
    4262:	cf 91       	pop	r28
    4264:	df 91       	pop	r29
    4266:	08 95       	ret

00004268 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    4268:	df 93       	push	r29
    426a:	cf 93       	push	r28
    426c:	00 d0       	rcall	.+0      	; 0x426e <xTaskGetTickCountFromISR+0x6>
    426e:	0f 92       	push	r0
    4270:	cd b7       	in	r28, 0x3d	; 61
    4272:	de b7       	in	r29, 0x3e	; 62
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    4274:	19 82       	std	Y+1, r1	; 0x01
	{
		xReturn = xTickCount;
    4276:	80 91 a1 03 	lds	r24, 0x03A1
    427a:	90 91 a2 03 	lds	r25, 0x03A2
    427e:	9b 83       	std	Y+3, r25	; 0x03
    4280:	8a 83       	std	Y+2, r24	; 0x02
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    4282:	8a 81       	ldd	r24, Y+2	; 0x02
    4284:	9b 81       	ldd	r25, Y+3	; 0x03
}
    4286:	0f 90       	pop	r0
    4288:	0f 90       	pop	r0
    428a:	0f 90       	pop	r0
    428c:	cf 91       	pop	r28
    428e:	df 91       	pop	r29
    4290:	08 95       	ret

00004292 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    4292:	df 93       	push	r29
    4294:	cf 93       	push	r28
    4296:	cd b7       	in	r28, 0x3d	; 61
    4298:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    429a:	80 91 a0 03 	lds	r24, 0x03A0
}
    429e:	cf 91       	pop	r28
    42a0:	df 91       	pop	r29
    42a2:	08 95       	ret

000042a4 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    42a4:	df 93       	push	r29
    42a6:	cf 93       	push	r28
    42a8:	00 d0       	rcall	.+0      	; 0x42aa <pcTaskGetName+0x6>
    42aa:	00 d0       	rcall	.+0      	; 0x42ac <pcTaskGetName+0x8>
    42ac:	00 d0       	rcall	.+0      	; 0x42ae <pcTaskGetName+0xa>
    42ae:	cd b7       	in	r28, 0x3d	; 61
    42b0:	de b7       	in	r29, 0x3e	; 62
    42b2:	9c 83       	std	Y+4, r25	; 0x04
    42b4:	8b 83       	std	Y+3, r24	; 0x03
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    42b6:	8b 81       	ldd	r24, Y+3	; 0x03
    42b8:	9c 81       	ldd	r25, Y+4	; 0x04
    42ba:	00 97       	sbiw	r24, 0x00	; 0
    42bc:	39 f4       	brne	.+14     	; 0x42cc <pcTaskGetName+0x28>
    42be:	80 91 9d 03 	lds	r24, 0x039D
    42c2:	90 91 9e 03 	lds	r25, 0x039E
    42c6:	9e 83       	std	Y+6, r25	; 0x06
    42c8:	8d 83       	std	Y+5, r24	; 0x05
    42ca:	04 c0       	rjmp	.+8      	; 0x42d4 <pcTaskGetName+0x30>
    42cc:	8b 81       	ldd	r24, Y+3	; 0x03
    42ce:	9c 81       	ldd	r25, Y+4	; 0x04
    42d0:	9e 83       	std	Y+6, r25	; 0x06
    42d2:	8d 83       	std	Y+5, r24	; 0x05
    42d4:	8d 81       	ldd	r24, Y+5	; 0x05
    42d6:	9e 81       	ldd	r25, Y+6	; 0x06
    42d8:	9a 83       	std	Y+2, r25	; 0x02
    42da:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    42dc:	89 81       	ldd	r24, Y+1	; 0x01
    42de:	9a 81       	ldd	r25, Y+2	; 0x02
    42e0:	49 96       	adiw	r24, 0x19	; 25
}
    42e2:	26 96       	adiw	r28, 0x06	; 6
    42e4:	0f b6       	in	r0, 0x3f	; 63
    42e6:	f8 94       	cli
    42e8:	de bf       	out	0x3e, r29	; 62
    42ea:	0f be       	out	0x3f, r0	; 63
    42ec:	cd bf       	out	0x3d, r28	; 61
    42ee:	cf 91       	pop	r28
    42f0:	df 91       	pop	r29
    42f2:	08 95       	ret

000042f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    42f4:	df 93       	push	r29
    42f6:	cf 93       	push	r28
    42f8:	cd b7       	in	r28, 0x3d	; 61
    42fa:	de b7       	in	r29, 0x3e	; 62
    42fc:	29 97       	sbiw	r28, 0x09	; 9
    42fe:	0f b6       	in	r0, 0x3f	; 63
    4300:	f8 94       	cli
    4302:	de bf       	out	0x3e, r29	; 62
    4304:	0f be       	out	0x3f, r0	; 63
    4306:	cd bf       	out	0x3d, r28	; 61
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    4308:	1d 82       	std	Y+5, r1	; 0x05

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    430a:	80 91 ad 03 	lds	r24, 0x03AD
    430e:	88 23       	and	r24, r24
    4310:	09 f0       	breq	.+2      	; 0x4314 <xTaskIncrementTick+0x20>
    4312:	a7 c0       	rjmp	.+334    	; 0x4462 <xTaskIncrementTick+0x16e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    4314:	80 91 a1 03 	lds	r24, 0x03A1
    4318:	90 91 a2 03 	lds	r25, 0x03A2
    431c:	01 96       	adiw	r24, 0x01	; 1
    431e:	9c 83       	std	Y+4, r25	; 0x04
    4320:	8b 83       	std	Y+3, r24	; 0x03

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    4322:	8b 81       	ldd	r24, Y+3	; 0x03
    4324:	9c 81       	ldd	r25, Y+4	; 0x04
    4326:	90 93 a2 03 	sts	0x03A2, r25
    432a:	80 93 a1 03 	sts	0x03A1, r24

		if( xConstTickCount == ( TickType_t ) 0U )
    432e:	8b 81       	ldd	r24, Y+3	; 0x03
    4330:	9c 81       	ldd	r25, Y+4	; 0x04
    4332:	00 97       	sbiw	r24, 0x00	; 0
    4334:	d9 f4       	brne	.+54     	; 0x436c <xTaskIncrementTick+0x78>
		{
			taskSWITCH_DELAYED_LISTS();
    4336:	80 91 ed 03 	lds	r24, 0x03ED
    433a:	90 91 ee 03 	lds	r25, 0x03EE
    433e:	9a 83       	std	Y+2, r25	; 0x02
    4340:	89 83       	std	Y+1, r24	; 0x01
    4342:	80 91 ef 03 	lds	r24, 0x03EF
    4346:	90 91 f0 03 	lds	r25, 0x03F0
    434a:	90 93 ee 03 	sts	0x03EE, r25
    434e:	80 93 ed 03 	sts	0x03ED, r24
    4352:	89 81       	ldd	r24, Y+1	; 0x01
    4354:	9a 81       	ldd	r25, Y+2	; 0x02
    4356:	90 93 f0 03 	sts	0x03F0, r25
    435a:	80 93 ef 03 	sts	0x03EF, r24
    435e:	80 91 a7 03 	lds	r24, 0x03A7
    4362:	8f 5f       	subi	r24, 0xFF	; 255
    4364:	80 93 a7 03 	sts	0x03A7, r24
    4368:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    436c:	20 91 a9 03 	lds	r18, 0x03A9
    4370:	30 91 aa 03 	lds	r19, 0x03AA
    4374:	8b 81       	ldd	r24, Y+3	; 0x03
    4376:	9c 81       	ldd	r25, Y+4	; 0x04
    4378:	82 17       	cp	r24, r18
    437a:	93 07       	cpc	r25, r19
    437c:	08 f4       	brcc	.+2      	; 0x4380 <xTaskIncrementTick+0x8c>
    437e:	76 c0       	rjmp	.+236    	; 0x446c <xTaskIncrementTick+0x178>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4380:	e0 91 ed 03 	lds	r30, 0x03ED
    4384:	f0 91 ee 03 	lds	r31, 0x03EE
    4388:	80 81       	ld	r24, Z
    438a:	88 23       	and	r24, r24
    438c:	39 f4       	brne	.+14     	; 0x439c <xTaskIncrementTick+0xa8>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    438e:	8f ef       	ldi	r24, 0xFF	; 255
    4390:	9f ef       	ldi	r25, 0xFF	; 255
    4392:	90 93 aa 03 	sts	0x03AA, r25
    4396:	80 93 a9 03 	sts	0x03A9, r24
    439a:	68 c0       	rjmp	.+208    	; 0x446c <xTaskIncrementTick+0x178>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    439c:	e0 91 ed 03 	lds	r30, 0x03ED
    43a0:	f0 91 ee 03 	lds	r31, 0x03EE
    43a4:	05 80       	ldd	r0, Z+5	; 0x05
    43a6:	f6 81       	ldd	r31, Z+6	; 0x06
    43a8:	e0 2d       	mov	r30, r0
    43aa:	86 81       	ldd	r24, Z+6	; 0x06
    43ac:	97 81       	ldd	r25, Z+7	; 0x07
    43ae:	99 87       	std	Y+9, r25	; 0x09
    43b0:	88 87       	std	Y+8, r24	; 0x08
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    43b2:	e8 85       	ldd	r30, Y+8	; 0x08
    43b4:	f9 85       	ldd	r31, Y+9	; 0x09
    43b6:	82 81       	ldd	r24, Z+2	; 0x02
    43b8:	93 81       	ldd	r25, Z+3	; 0x03
    43ba:	9f 83       	std	Y+7, r25	; 0x07
    43bc:	8e 83       	std	Y+6, r24	; 0x06

					if( xConstTickCount < xItemValue )
    43be:	2b 81       	ldd	r18, Y+3	; 0x03
    43c0:	3c 81       	ldd	r19, Y+4	; 0x04
    43c2:	8e 81       	ldd	r24, Y+6	; 0x06
    43c4:	9f 81       	ldd	r25, Y+7	; 0x07
    43c6:	28 17       	cp	r18, r24
    43c8:	39 07       	cpc	r19, r25
    43ca:	38 f4       	brcc	.+14     	; 0x43da <xTaskIncrementTick+0xe6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    43cc:	8e 81       	ldd	r24, Y+6	; 0x06
    43ce:	9f 81       	ldd	r25, Y+7	; 0x07
    43d0:	90 93 aa 03 	sts	0x03AA, r25
    43d4:	80 93 a9 03 	sts	0x03A9, r24
    43d8:	49 c0       	rjmp	.+146    	; 0x446c <xTaskIncrementTick+0x178>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    43da:	88 85       	ldd	r24, Y+8	; 0x08
    43dc:	99 85       	ldd	r25, Y+9	; 0x09
    43de:	02 96       	adiw	r24, 0x02	; 2
    43e0:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    43e4:	e8 85       	ldd	r30, Y+8	; 0x08
    43e6:	f9 85       	ldd	r31, Y+9	; 0x09
    43e8:	84 89       	ldd	r24, Z+20	; 0x14
    43ea:	95 89       	ldd	r25, Z+21	; 0x15
    43ec:	00 97       	sbiw	r24, 0x00	; 0
    43ee:	29 f0       	breq	.+10     	; 0x43fa <xTaskIncrementTick+0x106>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    43f0:	88 85       	ldd	r24, Y+8	; 0x08
    43f2:	99 85       	ldd	r25, Y+9	; 0x09
    43f4:	0c 96       	adiw	r24, 0x0c	; 12
    43f6:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    43fa:	e8 85       	ldd	r30, Y+8	; 0x08
    43fc:	f9 85       	ldd	r31, Y+9	; 0x09
    43fe:	96 89       	ldd	r25, Z+22	; 0x16
    4400:	80 91 a3 03 	lds	r24, 0x03A3
    4404:	89 17       	cp	r24, r25
    4406:	28 f4       	brcc	.+10     	; 0x4412 <xTaskIncrementTick+0x11e>
    4408:	e8 85       	ldd	r30, Y+8	; 0x08
    440a:	f9 85       	ldd	r31, Y+9	; 0x09
    440c:	86 89       	ldd	r24, Z+22	; 0x16
    440e:	80 93 a3 03 	sts	0x03A3, r24
    4412:	e8 85       	ldd	r30, Y+8	; 0x08
    4414:	f9 85       	ldd	r31, Y+9	; 0x09
    4416:	86 89       	ldd	r24, Z+22	; 0x16
    4418:	28 2f       	mov	r18, r24
    441a:	30 e0       	ldi	r19, 0x00	; 0
    441c:	c9 01       	movw	r24, r18
    441e:	88 0f       	add	r24, r24
    4420:	99 1f       	adc	r25, r25
    4422:	88 0f       	add	r24, r24
    4424:	99 1f       	adc	r25, r25
    4426:	88 0f       	add	r24, r24
    4428:	99 1f       	adc	r25, r25
    442a:	82 0f       	add	r24, r18
    442c:	93 1f       	adc	r25, r19
    442e:	ac 01       	movw	r20, r24
    4430:	42 55       	subi	r20, 0x52	; 82
    4432:	5c 4f       	sbci	r21, 0xFC	; 252
    4434:	88 85       	ldd	r24, Y+8	; 0x08
    4436:	99 85       	ldd	r25, Y+9	; 0x09
    4438:	9c 01       	movw	r18, r24
    443a:	2e 5f       	subi	r18, 0xFE	; 254
    443c:	3f 4f       	sbci	r19, 0xFF	; 255
    443e:	ca 01       	movw	r24, r20
    4440:	b9 01       	movw	r22, r18
    4442:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4446:	e8 85       	ldd	r30, Y+8	; 0x08
    4448:	f9 85       	ldd	r31, Y+9	; 0x09
    444a:	96 89       	ldd	r25, Z+22	; 0x16
    444c:	e0 91 9d 03 	lds	r30, 0x039D
    4450:	f0 91 9e 03 	lds	r31, 0x039E
    4454:	86 89       	ldd	r24, Z+22	; 0x16
    4456:	98 17       	cp	r25, r24
    4458:	08 f4       	brcc	.+2      	; 0x445c <xTaskIncrementTick+0x168>
    445a:	92 cf       	rjmp	.-220    	; 0x4380 <xTaskIncrementTick+0x8c>
						{
							xSwitchRequired = pdTRUE;
    445c:	81 e0       	ldi	r24, 0x01	; 1
    445e:	8d 83       	std	Y+5, r24	; 0x05
    4460:	8f cf       	rjmp	.-226    	; 0x4380 <xTaskIncrementTick+0x8c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    4462:	80 91 a5 03 	lds	r24, 0x03A5
    4466:	8f 5f       	subi	r24, 0xFF	; 255
    4468:	80 93 a5 03 	sts	0x03A5, r24
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    446c:	80 91 a6 03 	lds	r24, 0x03A6
    4470:	88 23       	and	r24, r24
    4472:	11 f0       	breq	.+4      	; 0x4478 <xTaskIncrementTick+0x184>
		{
			xSwitchRequired = pdTRUE;
    4474:	81 e0       	ldi	r24, 0x01	; 1
    4476:	8d 83       	std	Y+5, r24	; 0x05
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    4478:	8d 81       	ldd	r24, Y+5	; 0x05
}
    447a:	29 96       	adiw	r28, 0x09	; 9
    447c:	0f b6       	in	r0, 0x3f	; 63
    447e:	f8 94       	cli
    4480:	de bf       	out	0x3e, r29	; 62
    4482:	0f be       	out	0x3f, r0	; 63
    4484:	cd bf       	out	0x3d, r28	; 61
    4486:	cf 91       	pop	r28
    4488:	df 91       	pop	r29
    448a:	08 95       	ret

0000448c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    448c:	df 93       	push	r29
    448e:	cf 93       	push	r28
    4490:	00 d0       	rcall	.+0      	; 0x4492 <vTaskSwitchContext+0x6>
    4492:	0f 92       	push	r0
    4494:	cd b7       	in	r28, 0x3d	; 61
    4496:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    4498:	80 91 ad 03 	lds	r24, 0x03AD
    449c:	88 23       	and	r24, r24
    449e:	21 f0       	breq	.+8      	; 0x44a8 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    44a0:	81 e0       	ldi	r24, 0x01	; 1
    44a2:	80 93 a6 03 	sts	0x03A6, r24
    44a6:	59 c0       	rjmp	.+178    	; 0x455a <vTaskSwitchContext+0xce>
	}
	else
	{
		xYieldPending = pdFALSE;
    44a8:	10 92 a6 03 	sts	0x03A6, r1
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    44ac:	80 91 a3 03 	lds	r24, 0x03A3
    44b0:	8b 83       	std	Y+3, r24	; 0x03
    44b2:	03 c0       	rjmp	.+6      	; 0x44ba <vTaskSwitchContext+0x2e>
    44b4:	8b 81       	ldd	r24, Y+3	; 0x03
    44b6:	81 50       	subi	r24, 0x01	; 1
    44b8:	8b 83       	std	Y+3, r24	; 0x03
    44ba:	8b 81       	ldd	r24, Y+3	; 0x03
    44bc:	28 2f       	mov	r18, r24
    44be:	30 e0       	ldi	r19, 0x00	; 0
    44c0:	c9 01       	movw	r24, r18
    44c2:	88 0f       	add	r24, r24
    44c4:	99 1f       	adc	r25, r25
    44c6:	88 0f       	add	r24, r24
    44c8:	99 1f       	adc	r25, r25
    44ca:	88 0f       	add	r24, r24
    44cc:	99 1f       	adc	r25, r25
    44ce:	82 0f       	add	r24, r18
    44d0:	93 1f       	adc	r25, r19
    44d2:	fc 01       	movw	r30, r24
    44d4:	e2 55       	subi	r30, 0x52	; 82
    44d6:	fc 4f       	sbci	r31, 0xFC	; 252
    44d8:	80 81       	ld	r24, Z
    44da:	88 23       	and	r24, r24
    44dc:	59 f3       	breq	.-42     	; 0x44b4 <vTaskSwitchContext+0x28>
    44de:	8b 81       	ldd	r24, Y+3	; 0x03
    44e0:	28 2f       	mov	r18, r24
    44e2:	30 e0       	ldi	r19, 0x00	; 0
    44e4:	c9 01       	movw	r24, r18
    44e6:	88 0f       	add	r24, r24
    44e8:	99 1f       	adc	r25, r25
    44ea:	88 0f       	add	r24, r24
    44ec:	99 1f       	adc	r25, r25
    44ee:	88 0f       	add	r24, r24
    44f0:	99 1f       	adc	r25, r25
    44f2:	82 0f       	add	r24, r18
    44f4:	93 1f       	adc	r25, r19
    44f6:	82 55       	subi	r24, 0x52	; 82
    44f8:	9c 4f       	sbci	r25, 0xFC	; 252
    44fa:	9a 83       	std	Y+2, r25	; 0x02
    44fc:	89 83       	std	Y+1, r24	; 0x01
    44fe:	e9 81       	ldd	r30, Y+1	; 0x01
    4500:	fa 81       	ldd	r31, Y+2	; 0x02
    4502:	01 80       	ldd	r0, Z+1	; 0x01
    4504:	f2 81       	ldd	r31, Z+2	; 0x02
    4506:	e0 2d       	mov	r30, r0
    4508:	82 81       	ldd	r24, Z+2	; 0x02
    450a:	93 81       	ldd	r25, Z+3	; 0x03
    450c:	e9 81       	ldd	r30, Y+1	; 0x01
    450e:	fa 81       	ldd	r31, Y+2	; 0x02
    4510:	92 83       	std	Z+2, r25	; 0x02
    4512:	81 83       	std	Z+1, r24	; 0x01
    4514:	e9 81       	ldd	r30, Y+1	; 0x01
    4516:	fa 81       	ldd	r31, Y+2	; 0x02
    4518:	21 81       	ldd	r18, Z+1	; 0x01
    451a:	32 81       	ldd	r19, Z+2	; 0x02
    451c:	89 81       	ldd	r24, Y+1	; 0x01
    451e:	9a 81       	ldd	r25, Y+2	; 0x02
    4520:	03 96       	adiw	r24, 0x03	; 3
    4522:	28 17       	cp	r18, r24
    4524:	39 07       	cpc	r19, r25
    4526:	59 f4       	brne	.+22     	; 0x453e <vTaskSwitchContext+0xb2>
    4528:	e9 81       	ldd	r30, Y+1	; 0x01
    452a:	fa 81       	ldd	r31, Y+2	; 0x02
    452c:	01 80       	ldd	r0, Z+1	; 0x01
    452e:	f2 81       	ldd	r31, Z+2	; 0x02
    4530:	e0 2d       	mov	r30, r0
    4532:	82 81       	ldd	r24, Z+2	; 0x02
    4534:	93 81       	ldd	r25, Z+3	; 0x03
    4536:	e9 81       	ldd	r30, Y+1	; 0x01
    4538:	fa 81       	ldd	r31, Y+2	; 0x02
    453a:	92 83       	std	Z+2, r25	; 0x02
    453c:	81 83       	std	Z+1, r24	; 0x01
    453e:	e9 81       	ldd	r30, Y+1	; 0x01
    4540:	fa 81       	ldd	r31, Y+2	; 0x02
    4542:	01 80       	ldd	r0, Z+1	; 0x01
    4544:	f2 81       	ldd	r31, Z+2	; 0x02
    4546:	e0 2d       	mov	r30, r0
    4548:	86 81       	ldd	r24, Z+6	; 0x06
    454a:	97 81       	ldd	r25, Z+7	; 0x07
    454c:	90 93 9e 03 	sts	0x039E, r25
    4550:	80 93 9d 03 	sts	0x039D, r24
    4554:	8b 81       	ldd	r24, Y+3	; 0x03
    4556:	80 93 a3 03 	sts	0x03A3, r24
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    455a:	0f 90       	pop	r0
    455c:	0f 90       	pop	r0
    455e:	0f 90       	pop	r0
    4560:	cf 91       	pop	r28
    4562:	df 91       	pop	r29
    4564:	08 95       	ret

00004566 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    4566:	df 93       	push	r29
    4568:	cf 93       	push	r28
    456a:	00 d0       	rcall	.+0      	; 0x456c <vTaskPlaceOnEventList+0x6>
    456c:	00 d0       	rcall	.+0      	; 0x456e <vTaskPlaceOnEventList+0x8>
    456e:	cd b7       	in	r28, 0x3d	; 61
    4570:	de b7       	in	r29, 0x3e	; 62
    4572:	9a 83       	std	Y+2, r25	; 0x02
    4574:	89 83       	std	Y+1, r24	; 0x01
    4576:	7c 83       	std	Y+4, r23	; 0x04
    4578:	6b 83       	std	Y+3, r22	; 0x03

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    457a:	80 91 9d 03 	lds	r24, 0x039D
    457e:	90 91 9e 03 	lds	r25, 0x039E
    4582:	9c 01       	movw	r18, r24
    4584:	24 5f       	subi	r18, 0xF4	; 244
    4586:	3f 4f       	sbci	r19, 0xFF	; 255
    4588:	89 81       	ldd	r24, Y+1	; 0x01
    458a:	9a 81       	ldd	r25, Y+2	; 0x02
    458c:	b9 01       	movw	r22, r18
    458e:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    4592:	8b 81       	ldd	r24, Y+3	; 0x03
    4594:	9c 81       	ldd	r25, Y+4	; 0x04
    4596:	61 e0       	ldi	r22, 0x01	; 1
    4598:	0e 94 2e 2a 	call	0x545c	; 0x545c <prvAddCurrentTaskToDelayedList>
}
    459c:	0f 90       	pop	r0
    459e:	0f 90       	pop	r0
    45a0:	0f 90       	pop	r0
    45a2:	0f 90       	pop	r0
    45a4:	cf 91       	pop	r28
    45a6:	df 91       	pop	r29
    45a8:	08 95       	ret

000045aa <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    45aa:	df 93       	push	r29
    45ac:	cf 93       	push	r28
    45ae:	00 d0       	rcall	.+0      	; 0x45b0 <vTaskPlaceOnUnorderedEventList+0x6>
    45b0:	00 d0       	rcall	.+0      	; 0x45b2 <vTaskPlaceOnUnorderedEventList+0x8>
    45b2:	00 d0       	rcall	.+0      	; 0x45b4 <vTaskPlaceOnUnorderedEventList+0xa>
    45b4:	cd b7       	in	r28, 0x3d	; 61
    45b6:	de b7       	in	r29, 0x3e	; 62
    45b8:	9a 83       	std	Y+2, r25	; 0x02
    45ba:	89 83       	std	Y+1, r24	; 0x01
    45bc:	7c 83       	std	Y+4, r23	; 0x04
    45be:	6b 83       	std	Y+3, r22	; 0x03
    45c0:	5e 83       	std	Y+6, r21	; 0x06
    45c2:	4d 83       	std	Y+5, r20	; 0x05
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    45c4:	e0 91 9d 03 	lds	r30, 0x039D
    45c8:	f0 91 9e 03 	lds	r31, 0x039E
    45cc:	8b 81       	ldd	r24, Y+3	; 0x03
    45ce:	9c 81       	ldd	r25, Y+4	; 0x04
    45d0:	90 68       	ori	r25, 0x80	; 128
    45d2:	95 87       	std	Z+13, r25	; 0x0d
    45d4:	84 87       	std	Z+12, r24	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    45d6:	80 91 9d 03 	lds	r24, 0x039D
    45da:	90 91 9e 03 	lds	r25, 0x039E
    45de:	9c 01       	movw	r18, r24
    45e0:	24 5f       	subi	r18, 0xF4	; 244
    45e2:	3f 4f       	sbci	r19, 0xFF	; 255
    45e4:	89 81       	ldd	r24, Y+1	; 0x01
    45e6:	9a 81       	ldd	r25, Y+2	; 0x02
    45e8:	b9 01       	movw	r22, r18
    45ea:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    45ee:	8d 81       	ldd	r24, Y+5	; 0x05
    45f0:	9e 81       	ldd	r25, Y+6	; 0x06
    45f2:	61 e0       	ldi	r22, 0x01	; 1
    45f4:	0e 94 2e 2a 	call	0x545c	; 0x545c <prvAddCurrentTaskToDelayedList>
}
    45f8:	26 96       	adiw	r28, 0x06	; 6
    45fa:	0f b6       	in	r0, 0x3f	; 63
    45fc:	f8 94       	cli
    45fe:	de bf       	out	0x3e, r29	; 62
    4600:	0f be       	out	0x3f, r0	; 63
    4602:	cd bf       	out	0x3d, r28	; 61
    4604:	cf 91       	pop	r28
    4606:	df 91       	pop	r29
    4608:	08 95       	ret

0000460a <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    460a:	df 93       	push	r29
    460c:	cf 93       	push	r28
    460e:	00 d0       	rcall	.+0      	; 0x4610 <xTaskRemoveFromEventList+0x6>
    4610:	00 d0       	rcall	.+0      	; 0x4612 <xTaskRemoveFromEventList+0x8>
    4612:	0f 92       	push	r0
    4614:	cd b7       	in	r28, 0x3d	; 61
    4616:	de b7       	in	r29, 0x3e	; 62
    4618:	9d 83       	std	Y+5, r25	; 0x05
    461a:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    461c:	ec 81       	ldd	r30, Y+4	; 0x04
    461e:	fd 81       	ldd	r31, Y+5	; 0x05
    4620:	05 80       	ldd	r0, Z+5	; 0x05
    4622:	f6 81       	ldd	r31, Z+6	; 0x06
    4624:	e0 2d       	mov	r30, r0
    4626:	86 81       	ldd	r24, Z+6	; 0x06
    4628:	97 81       	ldd	r25, Z+7	; 0x07
    462a:	9b 83       	std	Y+3, r25	; 0x03
    462c:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    462e:	8a 81       	ldd	r24, Y+2	; 0x02
    4630:	9b 81       	ldd	r25, Y+3	; 0x03
    4632:	0c 96       	adiw	r24, 0x0c	; 12
    4634:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4638:	80 91 ad 03 	lds	r24, 0x03AD
    463c:	88 23       	and	r24, r24
    463e:	61 f5       	brne	.+88     	; 0x4698 <xTaskRemoveFromEventList+0x8e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    4640:	8a 81       	ldd	r24, Y+2	; 0x02
    4642:	9b 81       	ldd	r25, Y+3	; 0x03
    4644:	02 96       	adiw	r24, 0x02	; 2
    4646:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    464a:	ea 81       	ldd	r30, Y+2	; 0x02
    464c:	fb 81       	ldd	r31, Y+3	; 0x03
    464e:	96 89       	ldd	r25, Z+22	; 0x16
    4650:	80 91 a3 03 	lds	r24, 0x03A3
    4654:	89 17       	cp	r24, r25
    4656:	28 f4       	brcc	.+10     	; 0x4662 <xTaskRemoveFromEventList+0x58>
    4658:	ea 81       	ldd	r30, Y+2	; 0x02
    465a:	fb 81       	ldd	r31, Y+3	; 0x03
    465c:	86 89       	ldd	r24, Z+22	; 0x16
    465e:	80 93 a3 03 	sts	0x03A3, r24
    4662:	ea 81       	ldd	r30, Y+2	; 0x02
    4664:	fb 81       	ldd	r31, Y+3	; 0x03
    4666:	86 89       	ldd	r24, Z+22	; 0x16
    4668:	28 2f       	mov	r18, r24
    466a:	30 e0       	ldi	r19, 0x00	; 0
    466c:	c9 01       	movw	r24, r18
    466e:	88 0f       	add	r24, r24
    4670:	99 1f       	adc	r25, r25
    4672:	88 0f       	add	r24, r24
    4674:	99 1f       	adc	r25, r25
    4676:	88 0f       	add	r24, r24
    4678:	99 1f       	adc	r25, r25
    467a:	82 0f       	add	r24, r18
    467c:	93 1f       	adc	r25, r19
    467e:	ac 01       	movw	r20, r24
    4680:	42 55       	subi	r20, 0x52	; 82
    4682:	5c 4f       	sbci	r21, 0xFC	; 252
    4684:	8a 81       	ldd	r24, Y+2	; 0x02
    4686:	9b 81       	ldd	r25, Y+3	; 0x03
    4688:	9c 01       	movw	r18, r24
    468a:	2e 5f       	subi	r18, 0xFE	; 254
    468c:	3f 4f       	sbci	r19, 0xFF	; 255
    468e:	ca 01       	movw	r24, r20
    4690:	b9 01       	movw	r22, r18
    4692:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
    4696:	0a c0       	rjmp	.+20     	; 0x46ac <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    4698:	8a 81       	ldd	r24, Y+2	; 0x02
    469a:	9b 81       	ldd	r25, Y+3	; 0x03
    469c:	9c 01       	movw	r18, r24
    469e:	24 5f       	subi	r18, 0xF4	; 244
    46a0:	3f 4f       	sbci	r19, 0xFF	; 255
    46a2:	81 ef       	ldi	r24, 0xF1	; 241
    46a4:	93 e0       	ldi	r25, 0x03	; 3
    46a6:	b9 01       	movw	r22, r18
    46a8:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    46ac:	ea 81       	ldd	r30, Y+2	; 0x02
    46ae:	fb 81       	ldd	r31, Y+3	; 0x03
    46b0:	96 89       	ldd	r25, Z+22	; 0x16
    46b2:	e0 91 9d 03 	lds	r30, 0x039D
    46b6:	f0 91 9e 03 	lds	r31, 0x039E
    46ba:	86 89       	ldd	r24, Z+22	; 0x16
    46bc:	89 17       	cp	r24, r25
    46be:	30 f4       	brcc	.+12     	; 0x46cc <xTaskRemoveFromEventList+0xc2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    46c0:	81 e0       	ldi	r24, 0x01	; 1
    46c2:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    46c4:	81 e0       	ldi	r24, 0x01	; 1
    46c6:	80 93 a6 03 	sts	0x03A6, r24
    46ca:	01 c0       	rjmp	.+2      	; 0x46ce <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		xReturn = pdFALSE;
    46cc:	19 82       	std	Y+1, r1	; 0x01
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    46ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    46d0:	0f 90       	pop	r0
    46d2:	0f 90       	pop	r0
    46d4:	0f 90       	pop	r0
    46d6:	0f 90       	pop	r0
    46d8:	0f 90       	pop	r0
    46da:	cf 91       	pop	r28
    46dc:	df 91       	pop	r29
    46de:	08 95       	ret

000046e0 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    46e0:	df 93       	push	r29
    46e2:	cf 93       	push	r28
    46e4:	cd b7       	in	r28, 0x3d	; 61
    46e6:	de b7       	in	r29, 0x3e	; 62
    46e8:	27 97       	sbiw	r28, 0x07	; 7
    46ea:	0f b6       	in	r0, 0x3f	; 63
    46ec:	f8 94       	cli
    46ee:	de bf       	out	0x3e, r29	; 62
    46f0:	0f be       	out	0x3f, r0	; 63
    46f2:	cd bf       	out	0x3d, r28	; 61
    46f4:	9d 83       	std	Y+5, r25	; 0x05
    46f6:	8c 83       	std	Y+4, r24	; 0x04
    46f8:	7f 83       	std	Y+7, r23	; 0x07
    46fa:	6e 83       	std	Y+6, r22	; 0x06
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    46fc:	8e 81       	ldd	r24, Y+6	; 0x06
    46fe:	9f 81       	ldd	r25, Y+7	; 0x07
    4700:	90 68       	ori	r25, 0x80	; 128
    4702:	ec 81       	ldd	r30, Y+4	; 0x04
    4704:	fd 81       	ldd	r31, Y+5	; 0x05
    4706:	91 83       	std	Z+1, r25	; 0x01
    4708:	80 83       	st	Z, r24

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    470a:	ec 81       	ldd	r30, Y+4	; 0x04
    470c:	fd 81       	ldd	r31, Y+5	; 0x05
    470e:	86 81       	ldd	r24, Z+6	; 0x06
    4710:	97 81       	ldd	r25, Z+7	; 0x07
    4712:	9b 83       	std	Y+3, r25	; 0x03
    4714:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    4716:	8c 81       	ldd	r24, Y+4	; 0x04
    4718:	9d 81       	ldd	r25, Y+5	; 0x05
    471a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    471e:	8a 81       	ldd	r24, Y+2	; 0x02
    4720:	9b 81       	ldd	r25, Y+3	; 0x03
    4722:	02 96       	adiw	r24, 0x02	; 2
    4724:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    4728:	ea 81       	ldd	r30, Y+2	; 0x02
    472a:	fb 81       	ldd	r31, Y+3	; 0x03
    472c:	96 89       	ldd	r25, Z+22	; 0x16
    472e:	80 91 a3 03 	lds	r24, 0x03A3
    4732:	89 17       	cp	r24, r25
    4734:	28 f4       	brcc	.+10     	; 0x4740 <xTaskRemoveFromUnorderedEventList+0x60>
    4736:	ea 81       	ldd	r30, Y+2	; 0x02
    4738:	fb 81       	ldd	r31, Y+3	; 0x03
    473a:	86 89       	ldd	r24, Z+22	; 0x16
    473c:	80 93 a3 03 	sts	0x03A3, r24
    4740:	ea 81       	ldd	r30, Y+2	; 0x02
    4742:	fb 81       	ldd	r31, Y+3	; 0x03
    4744:	86 89       	ldd	r24, Z+22	; 0x16
    4746:	28 2f       	mov	r18, r24
    4748:	30 e0       	ldi	r19, 0x00	; 0
    474a:	c9 01       	movw	r24, r18
    474c:	88 0f       	add	r24, r24
    474e:	99 1f       	adc	r25, r25
    4750:	88 0f       	add	r24, r24
    4752:	99 1f       	adc	r25, r25
    4754:	88 0f       	add	r24, r24
    4756:	99 1f       	adc	r25, r25
    4758:	82 0f       	add	r24, r18
    475a:	93 1f       	adc	r25, r19
    475c:	ac 01       	movw	r20, r24
    475e:	42 55       	subi	r20, 0x52	; 82
    4760:	5c 4f       	sbci	r21, 0xFC	; 252
    4762:	8a 81       	ldd	r24, Y+2	; 0x02
    4764:	9b 81       	ldd	r25, Y+3	; 0x03
    4766:	9c 01       	movw	r18, r24
    4768:	2e 5f       	subi	r18, 0xFE	; 254
    476a:	3f 4f       	sbci	r19, 0xFF	; 255
    476c:	ca 01       	movw	r24, r20
    476e:	b9 01       	movw	r22, r18
    4770:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    4774:	ea 81       	ldd	r30, Y+2	; 0x02
    4776:	fb 81       	ldd	r31, Y+3	; 0x03
    4778:	96 89       	ldd	r25, Z+22	; 0x16
    477a:	e0 91 9d 03 	lds	r30, 0x039D
    477e:	f0 91 9e 03 	lds	r31, 0x039E
    4782:	86 89       	ldd	r24, Z+22	; 0x16
    4784:	89 17       	cp	r24, r25
    4786:	30 f4       	brcc	.+12     	; 0x4794 <xTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    4788:	81 e0       	ldi	r24, 0x01	; 1
    478a:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    478c:	81 e0       	ldi	r24, 0x01	; 1
    478e:	80 93 a6 03 	sts	0x03A6, r24
    4792:	01 c0       	rjmp	.+2      	; 0x4796 <xTaskRemoveFromUnorderedEventList+0xb6>
	}
	else
	{
		xReturn = pdFALSE;
    4794:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    4796:	89 81       	ldd	r24, Y+1	; 0x01
}
    4798:	27 96       	adiw	r28, 0x07	; 7
    479a:	0f b6       	in	r0, 0x3f	; 63
    479c:	f8 94       	cli
    479e:	de bf       	out	0x3e, r29	; 62
    47a0:	0f be       	out	0x3f, r0	; 63
    47a2:	cd bf       	out	0x3d, r28	; 61
    47a4:	cf 91       	pop	r28
    47a6:	df 91       	pop	r29
    47a8:	08 95       	ret

000047aa <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    47aa:	df 93       	push	r29
    47ac:	cf 93       	push	r28
    47ae:	00 d0       	rcall	.+0      	; 0x47b0 <vTaskSetTimeOutState+0x6>
    47b0:	cd b7       	in	r28, 0x3d	; 61
    47b2:	de b7       	in	r29, 0x3e	; 62
    47b4:	9a 83       	std	Y+2, r25	; 0x02
    47b6:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    47b8:	80 91 a7 03 	lds	r24, 0x03A7
    47bc:	e9 81       	ldd	r30, Y+1	; 0x01
    47be:	fa 81       	ldd	r31, Y+2	; 0x02
    47c0:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    47c2:	80 91 a1 03 	lds	r24, 0x03A1
    47c6:	90 91 a2 03 	lds	r25, 0x03A2
    47ca:	e9 81       	ldd	r30, Y+1	; 0x01
    47cc:	fa 81       	ldd	r31, Y+2	; 0x02
    47ce:	92 83       	std	Z+2, r25	; 0x02
    47d0:	81 83       	std	Z+1, r24	; 0x01
}
    47d2:	0f 90       	pop	r0
    47d4:	0f 90       	pop	r0
    47d6:	cf 91       	pop	r28
    47d8:	df 91       	pop	r29
    47da:	08 95       	ret

000047dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    47dc:	df 93       	push	r29
    47de:	cf 93       	push	r28
    47e0:	cd b7       	in	r28, 0x3d	; 61
    47e2:	de b7       	in	r29, 0x3e	; 62
    47e4:	27 97       	sbiw	r28, 0x07	; 7
    47e6:	0f b6       	in	r0, 0x3f	; 63
    47e8:	f8 94       	cli
    47ea:	de bf       	out	0x3e, r29	; 62
    47ec:	0f be       	out	0x3f, r0	; 63
    47ee:	cd bf       	out	0x3d, r28	; 61
    47f0:	9d 83       	std	Y+5, r25	; 0x05
    47f2:	8c 83       	std	Y+4, r24	; 0x04
    47f4:	7f 83       	std	Y+7, r23	; 0x07
    47f6:	6e 83       	std	Y+6, r22	; 0x06
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    47f8:	0f b6       	in	r0, 0x3f	; 63
    47fa:	f8 94       	cli
    47fc:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    47fe:	80 91 a1 03 	lds	r24, 0x03A1
    4802:	90 91 a2 03 	lds	r25, 0x03A2
    4806:	9a 83       	std	Y+2, r25	; 0x02
    4808:	89 83       	std	Y+1, r24	; 0x01
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    480a:	ee 81       	ldd	r30, Y+6	; 0x06
    480c:	ff 81       	ldd	r31, Y+7	; 0x07
    480e:	80 81       	ld	r24, Z
    4810:	91 81       	ldd	r25, Z+1	; 0x01
    4812:	2f ef       	ldi	r18, 0xFF	; 255
    4814:	8f 3f       	cpi	r24, 0xFF	; 255
    4816:	92 07       	cpc	r25, r18
    4818:	11 f4       	brne	.+4      	; 0x481e <xTaskCheckForTimeOut+0x42>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    481a:	1b 82       	std	Y+3, r1	; 0x03
    481c:	40 c0       	rjmp	.+128    	; 0x489e <xTaskCheckForTimeOut+0xc2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    481e:	ec 81       	ldd	r30, Y+4	; 0x04
    4820:	fd 81       	ldd	r31, Y+5	; 0x05
    4822:	90 81       	ld	r25, Z
    4824:	80 91 a7 03 	lds	r24, 0x03A7
    4828:	98 17       	cp	r25, r24
    482a:	61 f0       	breq	.+24     	; 0x4844 <xTaskCheckForTimeOut+0x68>
    482c:	ec 81       	ldd	r30, Y+4	; 0x04
    482e:	fd 81       	ldd	r31, Y+5	; 0x05
    4830:	21 81       	ldd	r18, Z+1	; 0x01
    4832:	32 81       	ldd	r19, Z+2	; 0x02
    4834:	89 81       	ldd	r24, Y+1	; 0x01
    4836:	9a 81       	ldd	r25, Y+2	; 0x02
    4838:	82 17       	cp	r24, r18
    483a:	93 07       	cpc	r25, r19
    483c:	18 f0       	brcs	.+6      	; 0x4844 <xTaskCheckForTimeOut+0x68>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    483e:	81 e0       	ldi	r24, 0x01	; 1
    4840:	8b 83       	std	Y+3, r24	; 0x03
    4842:	2d c0       	rjmp	.+90     	; 0x489e <xTaskCheckForTimeOut+0xc2>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    4844:	ec 81       	ldd	r30, Y+4	; 0x04
    4846:	fd 81       	ldd	r31, Y+5	; 0x05
    4848:	21 81       	ldd	r18, Z+1	; 0x01
    484a:	32 81       	ldd	r19, Z+2	; 0x02
    484c:	89 81       	ldd	r24, Y+1	; 0x01
    484e:	9a 81       	ldd	r25, Y+2	; 0x02
    4850:	ac 01       	movw	r20, r24
    4852:	42 1b       	sub	r20, r18
    4854:	53 0b       	sbc	r21, r19
    4856:	9a 01       	movw	r18, r20
    4858:	ee 81       	ldd	r30, Y+6	; 0x06
    485a:	ff 81       	ldd	r31, Y+7	; 0x07
    485c:	80 81       	ld	r24, Z
    485e:	91 81       	ldd	r25, Z+1	; 0x01
    4860:	28 17       	cp	r18, r24
    4862:	39 07       	cpc	r19, r25
    4864:	d0 f4       	brcc	.+52     	; 0x489a <xTaskCheckForTimeOut+0xbe>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    4866:	ee 81       	ldd	r30, Y+6	; 0x06
    4868:	ff 81       	ldd	r31, Y+7	; 0x07
    486a:	40 81       	ld	r20, Z
    486c:	51 81       	ldd	r21, Z+1	; 0x01
    486e:	ec 81       	ldd	r30, Y+4	; 0x04
    4870:	fd 81       	ldd	r31, Y+5	; 0x05
    4872:	21 81       	ldd	r18, Z+1	; 0x01
    4874:	32 81       	ldd	r19, Z+2	; 0x02
    4876:	89 81       	ldd	r24, Y+1	; 0x01
    4878:	9a 81       	ldd	r25, Y+2	; 0x02
    487a:	b9 01       	movw	r22, r18
    487c:	68 1b       	sub	r22, r24
    487e:	79 0b       	sbc	r23, r25
    4880:	cb 01       	movw	r24, r22
    4882:	84 0f       	add	r24, r20
    4884:	95 1f       	adc	r25, r21
    4886:	ee 81       	ldd	r30, Y+6	; 0x06
    4888:	ff 81       	ldd	r31, Y+7	; 0x07
    488a:	91 83       	std	Z+1, r25	; 0x01
    488c:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    488e:	8c 81       	ldd	r24, Y+4	; 0x04
    4890:	9d 81       	ldd	r25, Y+5	; 0x05
    4892:	0e 94 d5 23 	call	0x47aa	; 0x47aa <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    4896:	1b 82       	std	Y+3, r1	; 0x03
    4898:	02 c0       	rjmp	.+4      	; 0x489e <xTaskCheckForTimeOut+0xc2>
		}
		else
		{
			xReturn = pdTRUE;
    489a:	81 e0       	ldi	r24, 0x01	; 1
    489c:	8b 83       	std	Y+3, r24	; 0x03
		}
	}
	taskEXIT_CRITICAL();
    489e:	0f 90       	pop	r0
    48a0:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    48a2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    48a4:	27 96       	adiw	r28, 0x07	; 7
    48a6:	0f b6       	in	r0, 0x3f	; 63
    48a8:	f8 94       	cli
    48aa:	de bf       	out	0x3e, r29	; 62
    48ac:	0f be       	out	0x3f, r0	; 63
    48ae:	cd bf       	out	0x3d, r28	; 61
    48b0:	cf 91       	pop	r28
    48b2:	df 91       	pop	r29
    48b4:	08 95       	ret

000048b6 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    48b6:	df 93       	push	r29
    48b8:	cf 93       	push	r28
    48ba:	cd b7       	in	r28, 0x3d	; 61
    48bc:	de b7       	in	r29, 0x3e	; 62
	xYieldPending = pdTRUE;
    48be:	81 e0       	ldi	r24, 0x01	; 1
    48c0:	80 93 a6 03 	sts	0x03A6, r24
}
    48c4:	cf 91       	pop	r28
    48c6:	df 91       	pop	r29
    48c8:	08 95       	ret

000048ca <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    48ca:	df 93       	push	r29
    48cc:	cf 93       	push	r28
    48ce:	00 d0       	rcall	.+0      	; 0x48d0 <prvIdleTask+0x6>
    48d0:	cd b7       	in	r28, 0x3d	; 61
    48d2:	de b7       	in	r29, 0x3e	; 62
    48d4:	9a 83       	std	Y+2, r25	; 0x02
    48d6:	89 83       	std	Y+1, r24	; 0x01

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    48d8:	0e 94 b6 24 	call	0x496c	; 0x496c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    48dc:	80 91 ae 03 	lds	r24, 0x03AE
    48e0:	82 30       	cpi	r24, 0x02	; 2
    48e2:	d0 f3       	brcs	.-12     	; 0x48d8 <prvIdleTask+0xe>
			{
				taskYIELD();
    48e4:	0e 94 4d 11 	call	0x229a	; 0x229a <vPortYield>
    48e8:	f7 cf       	rjmp	.-18     	; 0x48d8 <prvIdleTask+0xe>

000048ea <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    48ea:	df 93       	push	r29
    48ec:	cf 93       	push	r28
    48ee:	0f 92       	push	r0
    48f0:	cd b7       	in	r28, 0x3d	; 61
    48f2:	de b7       	in	r29, 0x3e	; 62
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    48f4:	19 82       	std	Y+1, r1	; 0x01
    48f6:	13 c0       	rjmp	.+38     	; 0x491e <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    48f8:	89 81       	ldd	r24, Y+1	; 0x01
    48fa:	28 2f       	mov	r18, r24
    48fc:	30 e0       	ldi	r19, 0x00	; 0
    48fe:	c9 01       	movw	r24, r18
    4900:	88 0f       	add	r24, r24
    4902:	99 1f       	adc	r25, r25
    4904:	88 0f       	add	r24, r24
    4906:	99 1f       	adc	r25, r25
    4908:	88 0f       	add	r24, r24
    490a:	99 1f       	adc	r25, r25
    490c:	82 0f       	add	r24, r18
    490e:	93 1f       	adc	r25, r19
    4910:	82 55       	subi	r24, 0x52	; 82
    4912:	9c 4f       	sbci	r25, 0xFC	; 252
    4914:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    4918:	89 81       	ldd	r24, Y+1	; 0x01
    491a:	8f 5f       	subi	r24, 0xFF	; 255
    491c:	89 83       	std	Y+1, r24	; 0x01
    491e:	89 81       	ldd	r24, Y+1	; 0x01
    4920:	85 30       	cpi	r24, 0x05	; 5
    4922:	50 f3       	brcs	.-44     	; 0x48f8 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    4924:	8b ed       	ldi	r24, 0xDB	; 219
    4926:	93 e0       	ldi	r25, 0x03	; 3
    4928:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    492c:	84 ee       	ldi	r24, 0xE4	; 228
    492e:	93 e0       	ldi	r25, 0x03	; 3
    4930:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    4934:	81 ef       	ldi	r24, 0xF1	; 241
    4936:	93 e0       	ldi	r25, 0x03	; 3
    4938:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    493c:	8a ef       	ldi	r24, 0xFA	; 250
    493e:	93 e0       	ldi	r25, 0x03	; 3
    4940:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    4944:	83 e0       	ldi	r24, 0x03	; 3
    4946:	94 e0       	ldi	r25, 0x04	; 4
    4948:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    494c:	8b ed       	ldi	r24, 0xDB	; 219
    494e:	93 e0       	ldi	r25, 0x03	; 3
    4950:	90 93 ee 03 	sts	0x03EE, r25
    4954:	80 93 ed 03 	sts	0x03ED, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    4958:	84 ee       	ldi	r24, 0xE4	; 228
    495a:	93 e0       	ldi	r25, 0x03	; 3
    495c:	90 93 f0 03 	sts	0x03F0, r25
    4960:	80 93 ef 03 	sts	0x03EF, r24
}
    4964:	0f 90       	pop	r0
    4966:	cf 91       	pop	r28
    4968:	df 91       	pop	r29
    496a:	08 95       	ret

0000496c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    496c:	df 93       	push	r29
    496e:	cf 93       	push	r28
    4970:	00 d0       	rcall	.+0      	; 0x4972 <prvCheckTasksWaitingTermination+0x6>
    4972:	0f 92       	push	r0
    4974:	cd b7       	in	r28, 0x3d	; 61
    4976:	de b7       	in	r29, 0x3e	; 62
    4978:	2e c0       	rjmp	.+92     	; 0x49d6 <prvCheckTasksWaitingTermination+0x6a>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    497a:	0e 94 7e 20 	call	0x40fc	; 0x40fc <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    497e:	80 91 fa 03 	lds	r24, 0x03FA
    4982:	1b 82       	std	Y+3, r1	; 0x03
    4984:	88 23       	and	r24, r24
    4986:	11 f4       	brne	.+4      	; 0x498c <prvCheckTasksWaitingTermination+0x20>
    4988:	81 e0       	ldi	r24, 0x01	; 1
    498a:	8b 83       	std	Y+3, r24	; 0x03
			}
			( void ) xTaskResumeAll();
    498c:	0e 94 8a 20 	call	0x4114	; 0x4114 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    4990:	8b 81       	ldd	r24, Y+3	; 0x03
    4992:	88 23       	and	r24, r24
    4994:	01 f5       	brne	.+64     	; 0x49d6 <prvCheckTasksWaitingTermination+0x6a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    4996:	0f b6       	in	r0, 0x3f	; 63
    4998:	f8 94       	cli
    499a:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    499c:	e0 91 ff 03 	lds	r30, 0x03FF
    49a0:	f0 91 00 04 	lds	r31, 0x0400
    49a4:	86 81       	ldd	r24, Z+6	; 0x06
    49a6:	97 81       	ldd	r25, Z+7	; 0x07
    49a8:	9a 83       	std	Y+2, r25	; 0x02
    49aa:	89 83       	std	Y+1, r24	; 0x01
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    49ac:	89 81       	ldd	r24, Y+1	; 0x01
    49ae:	9a 81       	ldd	r25, Y+2	; 0x02
    49b0:	02 96       	adiw	r24, 0x02	; 2
    49b2:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
					--uxCurrentNumberOfTasks;
    49b6:	80 91 a0 03 	lds	r24, 0x03A0
    49ba:	81 50       	subi	r24, 0x01	; 1
    49bc:	80 93 a0 03 	sts	0x03A0, r24
					--uxDeletedTasksWaitingCleanUp;
    49c0:	80 91 9f 03 	lds	r24, 0x039F
    49c4:	81 50       	subi	r24, 0x01	; 1
    49c6:	80 93 9f 03 	sts	0x039F, r24
				}
				taskEXIT_CRITICAL();
    49ca:	0f 90       	pop	r0
    49cc:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    49ce:	89 81       	ldd	r24, Y+1	; 0x01
    49d0:	9a 81       	ldd	r25, Y+2	; 0x02
    49d2:	0e 94 f5 24 	call	0x49ea	; 0x49ea <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    49d6:	80 91 9f 03 	lds	r24, 0x039F
    49da:	88 23       	and	r24, r24
    49dc:	71 f6       	brne	.-100    	; 0x497a <prvCheckTasksWaitingTermination+0xe>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    49de:	0f 90       	pop	r0
    49e0:	0f 90       	pop	r0
    49e2:	0f 90       	pop	r0
    49e4:	cf 91       	pop	r28
    49e6:	df 91       	pop	r29
    49e8:	08 95       	ret

000049ea <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    49ea:	df 93       	push	r29
    49ec:	cf 93       	push	r28
    49ee:	00 d0       	rcall	.+0      	; 0x49f0 <prvDeleteTCB+0x6>
    49f0:	cd b7       	in	r28, 0x3d	; 61
    49f2:	de b7       	in	r29, 0x3e	; 62
    49f4:	9a 83       	std	Y+2, r25	; 0x02
    49f6:	89 83       	std	Y+1, r24	; 0x01

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    49f8:	e9 81       	ldd	r30, Y+1	; 0x01
    49fa:	fa 81       	ldd	r31, Y+2	; 0x02
    49fc:	87 89       	ldd	r24, Z+23	; 0x17
    49fe:	90 8d       	ldd	r25, Z+24	; 0x18
    4a00:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <vPortFree>
			vPortFree( pxTCB );
    4a04:	89 81       	ldd	r24, Y+1	; 0x01
    4a06:	9a 81       	ldd	r25, Y+2	; 0x02
    4a08:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    4a0c:	0f 90       	pop	r0
    4a0e:	0f 90       	pop	r0
    4a10:	cf 91       	pop	r28
    4a12:	df 91       	pop	r29
    4a14:	08 95       	ret

00004a16 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    4a16:	df 93       	push	r29
    4a18:	cf 93       	push	r28
    4a1a:	00 d0       	rcall	.+0      	; 0x4a1c <prvResetNextTaskUnblockTime+0x6>
    4a1c:	cd b7       	in	r28, 0x3d	; 61
    4a1e:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4a20:	e0 91 ed 03 	lds	r30, 0x03ED
    4a24:	f0 91 ee 03 	lds	r31, 0x03EE
    4a28:	80 81       	ld	r24, Z
    4a2a:	88 23       	and	r24, r24
    4a2c:	39 f4       	brne	.+14     	; 0x4a3c <prvResetNextTaskUnblockTime+0x26>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    4a2e:	8f ef       	ldi	r24, 0xFF	; 255
    4a30:	9f ef       	ldi	r25, 0xFF	; 255
    4a32:	90 93 aa 03 	sts	0x03AA, r25
    4a36:	80 93 a9 03 	sts	0x03A9, r24
    4a3a:	13 c0       	rjmp	.+38     	; 0x4a62 <prvResetNextTaskUnblockTime+0x4c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4a3c:	e0 91 ed 03 	lds	r30, 0x03ED
    4a40:	f0 91 ee 03 	lds	r31, 0x03EE
    4a44:	05 80       	ldd	r0, Z+5	; 0x05
    4a46:	f6 81       	ldd	r31, Z+6	; 0x06
    4a48:	e0 2d       	mov	r30, r0
    4a4a:	86 81       	ldd	r24, Z+6	; 0x06
    4a4c:	97 81       	ldd	r25, Z+7	; 0x07
    4a4e:	9a 83       	std	Y+2, r25	; 0x02
    4a50:	89 83       	std	Y+1, r24	; 0x01
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    4a52:	e9 81       	ldd	r30, Y+1	; 0x01
    4a54:	fa 81       	ldd	r31, Y+2	; 0x02
    4a56:	82 81       	ldd	r24, Z+2	; 0x02
    4a58:	93 81       	ldd	r25, Z+3	; 0x03
    4a5a:	90 93 aa 03 	sts	0x03AA, r25
    4a5e:	80 93 a9 03 	sts	0x03A9, r24
	}
}
    4a62:	0f 90       	pop	r0
    4a64:	0f 90       	pop	r0
    4a66:	cf 91       	pop	r28
    4a68:	df 91       	pop	r29
    4a6a:	08 95       	ret

00004a6c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    4a6c:	df 93       	push	r29
    4a6e:	cf 93       	push	r28
    4a70:	00 d0       	rcall	.+0      	; 0x4a72 <xTaskGetCurrentTaskHandle+0x6>
    4a72:	cd b7       	in	r28, 0x3d	; 61
    4a74:	de b7       	in	r29, 0x3e	; 62
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    4a76:	80 91 9d 03 	lds	r24, 0x039D
    4a7a:	90 91 9e 03 	lds	r25, 0x039E
    4a7e:	9a 83       	std	Y+2, r25	; 0x02
    4a80:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
    4a82:	89 81       	ldd	r24, Y+1	; 0x01
    4a84:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    4a86:	0f 90       	pop	r0
    4a88:	0f 90       	pop	r0
    4a8a:	cf 91       	pop	r28
    4a8c:	df 91       	pop	r29
    4a8e:	08 95       	ret

00004a90 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    4a90:	df 93       	push	r29
    4a92:	cf 93       	push	r28
    4a94:	00 d0       	rcall	.+0      	; 0x4a96 <vTaskPriorityInherit+0x6>
    4a96:	00 d0       	rcall	.+0      	; 0x4a98 <vTaskPriorityInherit+0x8>
    4a98:	cd b7       	in	r28, 0x3d	; 61
    4a9a:	de b7       	in	r29, 0x3e	; 62
    4a9c:	9c 83       	std	Y+4, r25	; 0x04
    4a9e:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    4aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    4aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    4aa4:	9a 83       	std	Y+2, r25	; 0x02
    4aa6:	89 83       	std	Y+1, r24	; 0x01

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    4aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    4aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    4aac:	00 97       	sbiw	r24, 0x00	; 0
    4aae:	09 f4       	brne	.+2      	; 0x4ab2 <vTaskPriorityInherit+0x22>
    4ab0:	73 c0       	rjmp	.+230    	; 0x4b98 <vTaskPriorityInherit+0x108>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    4ab2:	e9 81       	ldd	r30, Y+1	; 0x01
    4ab4:	fa 81       	ldd	r31, Y+2	; 0x02
    4ab6:	96 89       	ldd	r25, Z+22	; 0x16
    4ab8:	e0 91 9d 03 	lds	r30, 0x039D
    4abc:	f0 91 9e 03 	lds	r31, 0x039E
    4ac0:	86 89       	ldd	r24, Z+22	; 0x16
    4ac2:	98 17       	cp	r25, r24
    4ac4:	08 f0       	brcs	.+2      	; 0x4ac8 <vTaskPriorityInherit+0x38>
    4ac6:	68 c0       	rjmp	.+208    	; 0x4b98 <vTaskPriorityInherit+0x108>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    4ac8:	e9 81       	ldd	r30, Y+1	; 0x01
    4aca:	fa 81       	ldd	r31, Y+2	; 0x02
    4acc:	84 85       	ldd	r24, Z+12	; 0x0c
    4ace:	95 85       	ldd	r25, Z+13	; 0x0d
    4ad0:	99 23       	and	r25, r25
    4ad2:	7c f0       	brlt	.+30     	; 0x4af2 <vTaskPriorityInherit+0x62>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4ad4:	e0 91 9d 03 	lds	r30, 0x039D
    4ad8:	f0 91 9e 03 	lds	r31, 0x039E
    4adc:	86 89       	ldd	r24, Z+22	; 0x16
    4ade:	28 2f       	mov	r18, r24
    4ae0:	30 e0       	ldi	r19, 0x00	; 0
    4ae2:	85 e0       	ldi	r24, 0x05	; 5
    4ae4:	90 e0       	ldi	r25, 0x00	; 0
    4ae6:	82 1b       	sub	r24, r18
    4ae8:	93 0b       	sbc	r25, r19
    4aea:	e9 81       	ldd	r30, Y+1	; 0x01
    4aec:	fa 81       	ldd	r31, Y+2	; 0x02
    4aee:	95 87       	std	Z+13, r25	; 0x0d
    4af0:	84 87       	std	Z+12, r24	; 0x0c
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    4af2:	e9 81       	ldd	r30, Y+1	; 0x01
    4af4:	fa 81       	ldd	r31, Y+2	; 0x02
    4af6:	42 85       	ldd	r20, Z+10	; 0x0a
    4af8:	53 85       	ldd	r21, Z+11	; 0x0b
    4afa:	e9 81       	ldd	r30, Y+1	; 0x01
    4afc:	fa 81       	ldd	r31, Y+2	; 0x02
    4afe:	86 89       	ldd	r24, Z+22	; 0x16
    4b00:	28 2f       	mov	r18, r24
    4b02:	30 e0       	ldi	r19, 0x00	; 0
    4b04:	c9 01       	movw	r24, r18
    4b06:	88 0f       	add	r24, r24
    4b08:	99 1f       	adc	r25, r25
    4b0a:	88 0f       	add	r24, r24
    4b0c:	99 1f       	adc	r25, r25
    4b0e:	88 0f       	add	r24, r24
    4b10:	99 1f       	adc	r25, r25
    4b12:	82 0f       	add	r24, r18
    4b14:	93 1f       	adc	r25, r19
    4b16:	82 55       	subi	r24, 0x52	; 82
    4b18:	9c 4f       	sbci	r25, 0xFC	; 252
    4b1a:	48 17       	cp	r20, r24
    4b1c:	59 07       	cpc	r21, r25
    4b1e:	a1 f5       	brne	.+104    	; 0x4b88 <vTaskPriorityInherit+0xf8>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4b20:	89 81       	ldd	r24, Y+1	; 0x01
    4b22:	9a 81       	ldd	r25, Y+2	; 0x02
    4b24:	02 96       	adiw	r24, 0x02	; 2
    4b26:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4b2a:	e0 91 9d 03 	lds	r30, 0x039D
    4b2e:	f0 91 9e 03 	lds	r31, 0x039E
    4b32:	86 89       	ldd	r24, Z+22	; 0x16
    4b34:	e9 81       	ldd	r30, Y+1	; 0x01
    4b36:	fa 81       	ldd	r31, Y+2	; 0x02
    4b38:	86 8b       	std	Z+22, r24	; 0x16
					prvAddTaskToReadyList( pxTCB );
    4b3a:	e9 81       	ldd	r30, Y+1	; 0x01
    4b3c:	fa 81       	ldd	r31, Y+2	; 0x02
    4b3e:	96 89       	ldd	r25, Z+22	; 0x16
    4b40:	80 91 a3 03 	lds	r24, 0x03A3
    4b44:	89 17       	cp	r24, r25
    4b46:	28 f4       	brcc	.+10     	; 0x4b52 <vTaskPriorityInherit+0xc2>
    4b48:	e9 81       	ldd	r30, Y+1	; 0x01
    4b4a:	fa 81       	ldd	r31, Y+2	; 0x02
    4b4c:	86 89       	ldd	r24, Z+22	; 0x16
    4b4e:	80 93 a3 03 	sts	0x03A3, r24
    4b52:	e9 81       	ldd	r30, Y+1	; 0x01
    4b54:	fa 81       	ldd	r31, Y+2	; 0x02
    4b56:	86 89       	ldd	r24, Z+22	; 0x16
    4b58:	28 2f       	mov	r18, r24
    4b5a:	30 e0       	ldi	r19, 0x00	; 0
    4b5c:	c9 01       	movw	r24, r18
    4b5e:	88 0f       	add	r24, r24
    4b60:	99 1f       	adc	r25, r25
    4b62:	88 0f       	add	r24, r24
    4b64:	99 1f       	adc	r25, r25
    4b66:	88 0f       	add	r24, r24
    4b68:	99 1f       	adc	r25, r25
    4b6a:	82 0f       	add	r24, r18
    4b6c:	93 1f       	adc	r25, r19
    4b6e:	ac 01       	movw	r20, r24
    4b70:	42 55       	subi	r20, 0x52	; 82
    4b72:	5c 4f       	sbci	r21, 0xFC	; 252
    4b74:	89 81       	ldd	r24, Y+1	; 0x01
    4b76:	9a 81       	ldd	r25, Y+2	; 0x02
    4b78:	9c 01       	movw	r18, r24
    4b7a:	2e 5f       	subi	r18, 0xFE	; 254
    4b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b7e:	ca 01       	movw	r24, r20
    4b80:	b9 01       	movw	r22, r18
    4b82:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
    4b86:	08 c0       	rjmp	.+16     	; 0x4b98 <vTaskPriorityInherit+0x108>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4b88:	e0 91 9d 03 	lds	r30, 0x039D
    4b8c:	f0 91 9e 03 	lds	r31, 0x039E
    4b90:	86 89       	ldd	r24, Z+22	; 0x16
    4b92:	e9 81       	ldd	r30, Y+1	; 0x01
    4b94:	fa 81       	ldd	r31, Y+2	; 0x02
    4b96:	86 8b       	std	Z+22, r24	; 0x16
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4b98:	0f 90       	pop	r0
    4b9a:	0f 90       	pop	r0
    4b9c:	0f 90       	pop	r0
    4b9e:	0f 90       	pop	r0
    4ba0:	cf 91       	pop	r28
    4ba2:	df 91       	pop	r29
    4ba4:	08 95       	ret

00004ba6 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    4ba6:	df 93       	push	r29
    4ba8:	cf 93       	push	r28
    4baa:	00 d0       	rcall	.+0      	; 0x4bac <xTaskPriorityDisinherit+0x6>
    4bac:	00 d0       	rcall	.+0      	; 0x4bae <xTaskPriorityDisinherit+0x8>
    4bae:	0f 92       	push	r0
    4bb0:	cd b7       	in	r28, 0x3d	; 61
    4bb2:	de b7       	in	r29, 0x3e	; 62
    4bb4:	9d 83       	std	Y+5, r25	; 0x05
    4bb6:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    4bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    4bba:	9d 81       	ldd	r25, Y+5	; 0x05
    4bbc:	9b 83       	std	Y+3, r25	; 0x03
    4bbe:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xReturn = pdFALSE;
    4bc0:	19 82       	std	Y+1, r1	; 0x01

		if( pxMutexHolder != NULL )
    4bc2:	8c 81       	ldd	r24, Y+4	; 0x04
    4bc4:	9d 81       	ldd	r25, Y+5	; 0x05
    4bc6:	00 97       	sbiw	r24, 0x00	; 0
    4bc8:	09 f4       	brne	.+2      	; 0x4bcc <xTaskPriorityDisinherit+0x26>
    4bca:	56 c0       	rjmp	.+172    	; 0x4c78 <xTaskPriorityDisinherit+0xd2>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    4bcc:	ea 81       	ldd	r30, Y+2	; 0x02
    4bce:	fb 81       	ldd	r31, Y+3	; 0x03
    4bd0:	84 a1       	ldd	r24, Z+36	; 0x24
    4bd2:	81 50       	subi	r24, 0x01	; 1
    4bd4:	ea 81       	ldd	r30, Y+2	; 0x02
    4bd6:	fb 81       	ldd	r31, Y+3	; 0x03
    4bd8:	84 a3       	std	Z+36, r24	; 0x24

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    4bda:	ea 81       	ldd	r30, Y+2	; 0x02
    4bdc:	fb 81       	ldd	r31, Y+3	; 0x03
    4bde:	96 89       	ldd	r25, Z+22	; 0x16
    4be0:	ea 81       	ldd	r30, Y+2	; 0x02
    4be2:	fb 81       	ldd	r31, Y+3	; 0x03
    4be4:	83 a1       	ldd	r24, Z+35	; 0x23
    4be6:	98 17       	cp	r25, r24
    4be8:	09 f4       	brne	.+2      	; 0x4bec <xTaskPriorityDisinherit+0x46>
    4bea:	46 c0       	rjmp	.+140    	; 0x4c78 <xTaskPriorityDisinherit+0xd2>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    4bec:	ea 81       	ldd	r30, Y+2	; 0x02
    4bee:	fb 81       	ldd	r31, Y+3	; 0x03
    4bf0:	84 a1       	ldd	r24, Z+36	; 0x24
    4bf2:	88 23       	and	r24, r24
    4bf4:	09 f0       	breq	.+2      	; 0x4bf8 <xTaskPriorityDisinherit+0x52>
    4bf6:	40 c0       	rjmp	.+128    	; 0x4c78 <xTaskPriorityDisinherit+0xd2>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    4bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    4bfc:	02 96       	adiw	r24, 0x02	; 2
    4bfe:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    4c02:	ea 81       	ldd	r30, Y+2	; 0x02
    4c04:	fb 81       	ldd	r31, Y+3	; 0x03
    4c06:	83 a1       	ldd	r24, Z+35	; 0x23
    4c08:	ea 81       	ldd	r30, Y+2	; 0x02
    4c0a:	fb 81       	ldd	r31, Y+3	; 0x03
    4c0c:	86 8b       	std	Z+22, r24	; 0x16

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4c0e:	ea 81       	ldd	r30, Y+2	; 0x02
    4c10:	fb 81       	ldd	r31, Y+3	; 0x03
    4c12:	86 89       	ldd	r24, Z+22	; 0x16
    4c14:	28 2f       	mov	r18, r24
    4c16:	30 e0       	ldi	r19, 0x00	; 0
    4c18:	85 e0       	ldi	r24, 0x05	; 5
    4c1a:	90 e0       	ldi	r25, 0x00	; 0
    4c1c:	82 1b       	sub	r24, r18
    4c1e:	93 0b       	sbc	r25, r19
    4c20:	ea 81       	ldd	r30, Y+2	; 0x02
    4c22:	fb 81       	ldd	r31, Y+3	; 0x03
    4c24:	95 87       	std	Z+13, r25	; 0x0d
    4c26:	84 87       	std	Z+12, r24	; 0x0c
					prvAddTaskToReadyList( pxTCB );
    4c28:	ea 81       	ldd	r30, Y+2	; 0x02
    4c2a:	fb 81       	ldd	r31, Y+3	; 0x03
    4c2c:	96 89       	ldd	r25, Z+22	; 0x16
    4c2e:	80 91 a3 03 	lds	r24, 0x03A3
    4c32:	89 17       	cp	r24, r25
    4c34:	28 f4       	brcc	.+10     	; 0x4c40 <xTaskPriorityDisinherit+0x9a>
    4c36:	ea 81       	ldd	r30, Y+2	; 0x02
    4c38:	fb 81       	ldd	r31, Y+3	; 0x03
    4c3a:	86 89       	ldd	r24, Z+22	; 0x16
    4c3c:	80 93 a3 03 	sts	0x03A3, r24
    4c40:	ea 81       	ldd	r30, Y+2	; 0x02
    4c42:	fb 81       	ldd	r31, Y+3	; 0x03
    4c44:	86 89       	ldd	r24, Z+22	; 0x16
    4c46:	28 2f       	mov	r18, r24
    4c48:	30 e0       	ldi	r19, 0x00	; 0
    4c4a:	c9 01       	movw	r24, r18
    4c4c:	88 0f       	add	r24, r24
    4c4e:	99 1f       	adc	r25, r25
    4c50:	88 0f       	add	r24, r24
    4c52:	99 1f       	adc	r25, r25
    4c54:	88 0f       	add	r24, r24
    4c56:	99 1f       	adc	r25, r25
    4c58:	82 0f       	add	r24, r18
    4c5a:	93 1f       	adc	r25, r19
    4c5c:	ac 01       	movw	r20, r24
    4c5e:	42 55       	subi	r20, 0x52	; 82
    4c60:	5c 4f       	sbci	r21, 0xFC	; 252
    4c62:	8a 81       	ldd	r24, Y+2	; 0x02
    4c64:	9b 81       	ldd	r25, Y+3	; 0x03
    4c66:	9c 01       	movw	r18, r24
    4c68:	2e 5f       	subi	r18, 0xFE	; 254
    4c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c6c:	ca 01       	movw	r24, r20
    4c6e:	b9 01       	movw	r22, r18
    4c70:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    4c74:	81 e0       	ldi	r24, 0x01	; 1
    4c76:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    4c78:	89 81       	ldd	r24, Y+1	; 0x01
	}
    4c7a:	0f 90       	pop	r0
    4c7c:	0f 90       	pop	r0
    4c7e:	0f 90       	pop	r0
    4c80:	0f 90       	pop	r0
    4c82:	0f 90       	pop	r0
    4c84:	cf 91       	pop	r28
    4c86:	df 91       	pop	r29
    4c88:	08 95       	ret

00004c8a <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    4c8a:	df 93       	push	r29
    4c8c:	cf 93       	push	r28
    4c8e:	00 d0       	rcall	.+0      	; 0x4c90 <uxTaskResetEventItemValue+0x6>
    4c90:	cd b7       	in	r28, 0x3d	; 61
    4c92:	de b7       	in	r29, 0x3e	; 62
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    4c94:	e0 91 9d 03 	lds	r30, 0x039D
    4c98:	f0 91 9e 03 	lds	r31, 0x039E
    4c9c:	84 85       	ldd	r24, Z+12	; 0x0c
    4c9e:	95 85       	ldd	r25, Z+13	; 0x0d
    4ca0:	9a 83       	std	Y+2, r25	; 0x02
    4ca2:	89 83       	std	Y+1, r24	; 0x01

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4ca4:	a0 91 9d 03 	lds	r26, 0x039D
    4ca8:	b0 91 9e 03 	lds	r27, 0x039E
    4cac:	e0 91 9d 03 	lds	r30, 0x039D
    4cb0:	f0 91 9e 03 	lds	r31, 0x039E
    4cb4:	86 89       	ldd	r24, Z+22	; 0x16
    4cb6:	28 2f       	mov	r18, r24
    4cb8:	30 e0       	ldi	r19, 0x00	; 0
    4cba:	85 e0       	ldi	r24, 0x05	; 5
    4cbc:	90 e0       	ldi	r25, 0x00	; 0
    4cbe:	82 1b       	sub	r24, r18
    4cc0:	93 0b       	sbc	r25, r19
    4cc2:	1d 96       	adiw	r26, 0x0d	; 13
    4cc4:	9c 93       	st	X, r25
    4cc6:	8e 93       	st	-X, r24
    4cc8:	1c 97       	sbiw	r26, 0x0c	; 12

	return uxReturn;
    4cca:	89 81       	ldd	r24, Y+1	; 0x01
    4ccc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4cce:	0f 90       	pop	r0
    4cd0:	0f 90       	pop	r0
    4cd2:	cf 91       	pop	r28
    4cd4:	df 91       	pop	r29
    4cd6:	08 95       	ret

00004cd8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    4cd8:	df 93       	push	r29
    4cda:	cf 93       	push	r28
    4cdc:	cd b7       	in	r28, 0x3d	; 61
    4cde:	de b7       	in	r29, 0x3e	; 62
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    4ce0:	80 91 9d 03 	lds	r24, 0x039D
    4ce4:	90 91 9e 03 	lds	r25, 0x039E
    4ce8:	00 97       	sbiw	r24, 0x00	; 0
    4cea:	39 f0       	breq	.+14     	; 0x4cfa <pvTaskIncrementMutexHeldCount+0x22>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    4cec:	e0 91 9d 03 	lds	r30, 0x039D
    4cf0:	f0 91 9e 03 	lds	r31, 0x039E
    4cf4:	84 a1       	ldd	r24, Z+36	; 0x24
    4cf6:	8f 5f       	subi	r24, 0xFF	; 255
    4cf8:	84 a3       	std	Z+36, r24	; 0x24
		}

		return pxCurrentTCB;
    4cfa:	80 91 9d 03 	lds	r24, 0x039D
    4cfe:	90 91 9e 03 	lds	r25, 0x039E
	}
    4d02:	cf 91       	pop	r28
    4d04:	df 91       	pop	r29
    4d06:	08 95       	ret

00004d08 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    4d08:	df 93       	push	r29
    4d0a:	cf 93       	push	r28
    4d0c:	cd b7       	in	r28, 0x3d	; 61
    4d0e:	de b7       	in	r29, 0x3e	; 62
    4d10:	27 97       	sbiw	r28, 0x07	; 7
    4d12:	0f b6       	in	r0, 0x3f	; 63
    4d14:	f8 94       	cli
    4d16:	de bf       	out	0x3e, r29	; 62
    4d18:	0f be       	out	0x3f, r0	; 63
    4d1a:	cd bf       	out	0x3d, r28	; 61
    4d1c:	8d 83       	std	Y+5, r24	; 0x05
    4d1e:	7f 83       	std	Y+7, r23	; 0x07
    4d20:	6e 83       	std	Y+6, r22	; 0x06
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    4d22:	0f b6       	in	r0, 0x3f	; 63
    4d24:	f8 94       	cli
    4d26:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    4d28:	e0 91 9d 03 	lds	r30, 0x039D
    4d2c:	f0 91 9e 03 	lds	r31, 0x039E
    4d30:	85 a1       	ldd	r24, Z+37	; 0x25
    4d32:	96 a1       	ldd	r25, Z+38	; 0x26
    4d34:	a7 a1       	ldd	r26, Z+39	; 0x27
    4d36:	b0 a5       	ldd	r27, Z+40	; 0x28
    4d38:	00 97       	sbiw	r24, 0x00	; 0
    4d3a:	a1 05       	cpc	r26, r1
    4d3c:	b1 05       	cpc	r27, r1
    4d3e:	89 f4       	brne	.+34     	; 0x4d62 <ulTaskNotifyTake+0x5a>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    4d40:	e0 91 9d 03 	lds	r30, 0x039D
    4d44:	f0 91 9e 03 	lds	r31, 0x039E
    4d48:	81 e0       	ldi	r24, 0x01	; 1
    4d4a:	81 a7       	std	Z+41, r24	; 0x29

				if( xTicksToWait > ( TickType_t ) 0 )
    4d4c:	8e 81       	ldd	r24, Y+6	; 0x06
    4d4e:	9f 81       	ldd	r25, Y+7	; 0x07
    4d50:	00 97       	sbiw	r24, 0x00	; 0
    4d52:	39 f0       	breq	.+14     	; 0x4d62 <ulTaskNotifyTake+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    4d54:	8e 81       	ldd	r24, Y+6	; 0x06
    4d56:	9f 81       	ldd	r25, Y+7	; 0x07
    4d58:	61 e0       	ldi	r22, 0x01	; 1
    4d5a:	0e 94 2e 2a 	call	0x545c	; 0x545c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    4d5e:	0e 94 4d 11 	call	0x229a	; 0x229a <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4d62:	0f 90       	pop	r0
    4d64:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    4d66:	0f b6       	in	r0, 0x3f	; 63
    4d68:	f8 94       	cli
    4d6a:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    4d6c:	e0 91 9d 03 	lds	r30, 0x039D
    4d70:	f0 91 9e 03 	lds	r31, 0x039E
    4d74:	85 a1       	ldd	r24, Z+37	; 0x25
    4d76:	96 a1       	ldd	r25, Z+38	; 0x26
    4d78:	a7 a1       	ldd	r26, Z+39	; 0x27
    4d7a:	b0 a5       	ldd	r27, Z+40	; 0x28
    4d7c:	89 83       	std	Y+1, r24	; 0x01
    4d7e:	9a 83       	std	Y+2, r25	; 0x02
    4d80:	ab 83       	std	Y+3, r26	; 0x03
    4d82:	bc 83       	std	Y+4, r27	; 0x04

			if( ulReturn != 0UL )
    4d84:	89 81       	ldd	r24, Y+1	; 0x01
    4d86:	9a 81       	ldd	r25, Y+2	; 0x02
    4d88:	ab 81       	ldd	r26, Y+3	; 0x03
    4d8a:	bc 81       	ldd	r27, Y+4	; 0x04
    4d8c:	00 97       	sbiw	r24, 0x00	; 0
    4d8e:	a1 05       	cpc	r26, r1
    4d90:	b1 05       	cpc	r27, r1
    4d92:	d9 f0       	breq	.+54     	; 0x4dca <ulTaskNotifyTake+0xc2>
			{
				if( xClearCountOnExit != pdFALSE )
    4d94:	8d 81       	ldd	r24, Y+5	; 0x05
    4d96:	88 23       	and	r24, r24
    4d98:	49 f0       	breq	.+18     	; 0x4dac <ulTaskNotifyTake+0xa4>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    4d9a:	e0 91 9d 03 	lds	r30, 0x039D
    4d9e:	f0 91 9e 03 	lds	r31, 0x039E
    4da2:	15 a2       	std	Z+37, r1	; 0x25
    4da4:	16 a2       	std	Z+38, r1	; 0x26
    4da6:	17 a2       	std	Z+39, r1	; 0x27
    4da8:	10 a6       	std	Z+40, r1	; 0x28
    4daa:	0f c0       	rjmp	.+30     	; 0x4dca <ulTaskNotifyTake+0xc2>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
    4dac:	e0 91 9d 03 	lds	r30, 0x039D
    4db0:	f0 91 9e 03 	lds	r31, 0x039E
    4db4:	89 81       	ldd	r24, Y+1	; 0x01
    4db6:	9a 81       	ldd	r25, Y+2	; 0x02
    4db8:	ab 81       	ldd	r26, Y+3	; 0x03
    4dba:	bc 81       	ldd	r27, Y+4	; 0x04
    4dbc:	01 97       	sbiw	r24, 0x01	; 1
    4dbe:	a1 09       	sbc	r26, r1
    4dc0:	b1 09       	sbc	r27, r1
    4dc2:	85 a3       	std	Z+37, r24	; 0x25
    4dc4:	96 a3       	std	Z+38, r25	; 0x26
    4dc6:	a7 a3       	std	Z+39, r26	; 0x27
    4dc8:	b0 a7       	std	Z+40, r27	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4dca:	e0 91 9d 03 	lds	r30, 0x039D
    4dce:	f0 91 9e 03 	lds	r31, 0x039E
    4dd2:	11 a6       	std	Z+41, r1	; 0x29
		}
		taskEXIT_CRITICAL();
    4dd4:	0f 90       	pop	r0
    4dd6:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
    4dd8:	89 81       	ldd	r24, Y+1	; 0x01
    4dda:	9a 81       	ldd	r25, Y+2	; 0x02
    4ddc:	ab 81       	ldd	r26, Y+3	; 0x03
    4dde:	bc 81       	ldd	r27, Y+4	; 0x04
	}
    4de0:	bc 01       	movw	r22, r24
    4de2:	cd 01       	movw	r24, r26
    4de4:	27 96       	adiw	r28, 0x07	; 7
    4de6:	0f b6       	in	r0, 0x3f	; 63
    4de8:	f8 94       	cli
    4dea:	de bf       	out	0x3e, r29	; 62
    4dec:	0f be       	out	0x3f, r0	; 63
    4dee:	cd bf       	out	0x3d, r28	; 61
    4df0:	cf 91       	pop	r28
    4df2:	df 91       	pop	r29
    4df4:	08 95       	ret

00004df6 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    4df6:	ef 92       	push	r14
    4df8:	ff 92       	push	r15
    4dfa:	0f 93       	push	r16
    4dfc:	1f 93       	push	r17
    4dfe:	df 93       	push	r29
    4e00:	cf 93       	push	r28
    4e02:	cd b7       	in	r28, 0x3d	; 61
    4e04:	de b7       	in	r29, 0x3e	; 62
    4e06:	2d 97       	sbiw	r28, 0x0d	; 13
    4e08:	0f b6       	in	r0, 0x3f	; 63
    4e0a:	f8 94       	cli
    4e0c:	de bf       	out	0x3e, r29	; 62
    4e0e:	0f be       	out	0x3f, r0	; 63
    4e10:	cd bf       	out	0x3d, r28	; 61
    4e12:	6a 83       	std	Y+2, r22	; 0x02
    4e14:	7b 83       	std	Y+3, r23	; 0x03
    4e16:	8c 83       	std	Y+4, r24	; 0x04
    4e18:	9d 83       	std	Y+5, r25	; 0x05
    4e1a:	2e 83       	std	Y+6, r18	; 0x06
    4e1c:	3f 83       	std	Y+7, r19	; 0x07
    4e1e:	48 87       	std	Y+8, r20	; 0x08
    4e20:	59 87       	std	Y+9, r21	; 0x09
    4e22:	1b 87       	std	Y+11, r17	; 0x0b
    4e24:	0a 87       	std	Y+10, r16	; 0x0a
    4e26:	fd 86       	std	Y+13, r15	; 0x0d
    4e28:	ec 86       	std	Y+12, r14	; 0x0c
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    4e2a:	0f b6       	in	r0, 0x3f	; 63
    4e2c:	f8 94       	cli
    4e2e:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    4e30:	e0 91 9d 03 	lds	r30, 0x039D
    4e34:	f0 91 9e 03 	lds	r31, 0x039E
    4e38:	81 a5       	ldd	r24, Z+41	; 0x29
    4e3a:	82 30       	cpi	r24, 0x02	; 2
    4e3c:	49 f1       	breq	.+82     	; 0x4e90 <xTaskNotifyWait+0x9a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    4e3e:	e0 91 9d 03 	lds	r30, 0x039D
    4e42:	f0 91 9e 03 	lds	r31, 0x039E
    4e46:	25 a1       	ldd	r18, Z+37	; 0x25
    4e48:	36 a1       	ldd	r19, Z+38	; 0x26
    4e4a:	47 a1       	ldd	r20, Z+39	; 0x27
    4e4c:	50 a5       	ldd	r21, Z+40	; 0x28
    4e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e50:	9b 81       	ldd	r25, Y+3	; 0x03
    4e52:	ac 81       	ldd	r26, Y+4	; 0x04
    4e54:	bd 81       	ldd	r27, Y+5	; 0x05
    4e56:	80 95       	com	r24
    4e58:	90 95       	com	r25
    4e5a:	a0 95       	com	r26
    4e5c:	b0 95       	com	r27
    4e5e:	82 23       	and	r24, r18
    4e60:	93 23       	and	r25, r19
    4e62:	a4 23       	and	r26, r20
    4e64:	b5 23       	and	r27, r21
    4e66:	85 a3       	std	Z+37, r24	; 0x25
    4e68:	96 a3       	std	Z+38, r25	; 0x26
    4e6a:	a7 a3       	std	Z+39, r26	; 0x27
    4e6c:	b0 a7       	std	Z+40, r27	; 0x28

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    4e6e:	e0 91 9d 03 	lds	r30, 0x039D
    4e72:	f0 91 9e 03 	lds	r31, 0x039E
    4e76:	81 e0       	ldi	r24, 0x01	; 1
    4e78:	81 a7       	std	Z+41, r24	; 0x29

				if( xTicksToWait > ( TickType_t ) 0 )
    4e7a:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e7c:	9d 85       	ldd	r25, Y+13	; 0x0d
    4e7e:	00 97       	sbiw	r24, 0x00	; 0
    4e80:	39 f0       	breq	.+14     	; 0x4e90 <xTaskNotifyWait+0x9a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    4e82:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e84:	9d 85       	ldd	r25, Y+13	; 0x0d
    4e86:	61 e0       	ldi	r22, 0x01	; 1
    4e88:	0e 94 2e 2a 	call	0x545c	; 0x545c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    4e8c:	0e 94 4d 11 	call	0x229a	; 0x229a <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4e90:	0f 90       	pop	r0
    4e92:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    4e94:	0f b6       	in	r0, 0x3f	; 63
    4e96:	f8 94       	cli
    4e98:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    4e9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e9e:	00 97       	sbiw	r24, 0x00	; 0
    4ea0:	71 f0       	breq	.+28     	; 0x4ebe <xTaskNotifyWait+0xc8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    4ea2:	e0 91 9d 03 	lds	r30, 0x039D
    4ea6:	f0 91 9e 03 	lds	r31, 0x039E
    4eaa:	85 a1       	ldd	r24, Z+37	; 0x25
    4eac:	96 a1       	ldd	r25, Z+38	; 0x26
    4eae:	a7 a1       	ldd	r26, Z+39	; 0x27
    4eb0:	b0 a5       	ldd	r27, Z+40	; 0x28
    4eb2:	ea 85       	ldd	r30, Y+10	; 0x0a
    4eb4:	fb 85       	ldd	r31, Y+11	; 0x0b
    4eb6:	80 83       	st	Z, r24
    4eb8:	91 83       	std	Z+1, r25	; 0x01
    4eba:	a2 83       	std	Z+2, r26	; 0x02
    4ebc:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    4ebe:	e0 91 9d 03 	lds	r30, 0x039D
    4ec2:	f0 91 9e 03 	lds	r31, 0x039E
    4ec6:	81 a5       	ldd	r24, Z+41	; 0x29
    4ec8:	81 30       	cpi	r24, 0x01	; 1
    4eca:	11 f4       	brne	.+4      	; 0x4ed0 <xTaskNotifyWait+0xda>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    4ecc:	19 82       	std	Y+1, r1	; 0x01
    4ece:	1a c0       	rjmp	.+52     	; 0x4f04 <xTaskNotifyWait+0x10e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    4ed0:	e0 91 9d 03 	lds	r30, 0x039D
    4ed4:	f0 91 9e 03 	lds	r31, 0x039E
    4ed8:	25 a1       	ldd	r18, Z+37	; 0x25
    4eda:	36 a1       	ldd	r19, Z+38	; 0x26
    4edc:	47 a1       	ldd	r20, Z+39	; 0x27
    4ede:	50 a5       	ldd	r21, Z+40	; 0x28
    4ee0:	8e 81       	ldd	r24, Y+6	; 0x06
    4ee2:	9f 81       	ldd	r25, Y+7	; 0x07
    4ee4:	a8 85       	ldd	r26, Y+8	; 0x08
    4ee6:	b9 85       	ldd	r27, Y+9	; 0x09
    4ee8:	80 95       	com	r24
    4eea:	90 95       	com	r25
    4eec:	a0 95       	com	r26
    4eee:	b0 95       	com	r27
    4ef0:	82 23       	and	r24, r18
    4ef2:	93 23       	and	r25, r19
    4ef4:	a4 23       	and	r26, r20
    4ef6:	b5 23       	and	r27, r21
    4ef8:	85 a3       	std	Z+37, r24	; 0x25
    4efa:	96 a3       	std	Z+38, r25	; 0x26
    4efc:	a7 a3       	std	Z+39, r26	; 0x27
    4efe:	b0 a7       	std	Z+40, r27	; 0x28
				xReturn = pdTRUE;
    4f00:	81 e0       	ldi	r24, 0x01	; 1
    4f02:	89 83       	std	Y+1, r24	; 0x01
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4f04:	e0 91 9d 03 	lds	r30, 0x039D
    4f08:	f0 91 9e 03 	lds	r31, 0x039E
    4f0c:	11 a6       	std	Z+41, r1	; 0x29
		}
		taskEXIT_CRITICAL();
    4f0e:	0f 90       	pop	r0
    4f10:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    4f12:	89 81       	ldd	r24, Y+1	; 0x01
	}
    4f14:	2d 96       	adiw	r28, 0x0d	; 13
    4f16:	0f b6       	in	r0, 0x3f	; 63
    4f18:	f8 94       	cli
    4f1a:	de bf       	out	0x3e, r29	; 62
    4f1c:	0f be       	out	0x3f, r0	; 63
    4f1e:	cd bf       	out	0x3d, r28	; 61
    4f20:	cf 91       	pop	r28
    4f22:	df 91       	pop	r29
    4f24:	1f 91       	pop	r17
    4f26:	0f 91       	pop	r16
    4f28:	ff 90       	pop	r15
    4f2a:	ef 90       	pop	r14
    4f2c:	08 95       	ret

00004f2e <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    4f2e:	0f 93       	push	r16
    4f30:	1f 93       	push	r17
    4f32:	df 93       	push	r29
    4f34:	cf 93       	push	r28
    4f36:	cd b7       	in	r28, 0x3d	; 61
    4f38:	de b7       	in	r29, 0x3e	; 62
    4f3a:	2f 97       	sbiw	r28, 0x0f	; 15
    4f3c:	0f b6       	in	r0, 0x3f	; 63
    4f3e:	f8 94       	cli
    4f40:	de bf       	out	0x3e, r29	; 62
    4f42:	0f be       	out	0x3f, r0	; 63
    4f44:	cd bf       	out	0x3d, r28	; 61
    4f46:	9e 83       	std	Y+6, r25	; 0x06
    4f48:	8d 83       	std	Y+5, r24	; 0x05
    4f4a:	4f 83       	std	Y+7, r20	; 0x07
    4f4c:	58 87       	std	Y+8, r21	; 0x08
    4f4e:	69 87       	std	Y+9, r22	; 0x09
    4f50:	7a 87       	std	Y+10, r23	; 0x0a
    4f52:	2b 87       	std	Y+11, r18	; 0x0b
    4f54:	1d 87       	std	Y+13, r17	; 0x0d
    4f56:	0c 87       	std	Y+12, r16	; 0x0c
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    4f58:	81 e0       	ldi	r24, 0x01	; 1
    4f5a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
    4f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    4f60:	9c 83       	std	Y+4, r25	; 0x04
    4f62:	8b 83       	std	Y+3, r24	; 0x03

		taskENTER_CRITICAL();
    4f64:	0f b6       	in	r0, 0x3f	; 63
    4f66:	f8 94       	cli
    4f68:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    4f6a:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f6c:	9d 85       	ldd	r25, Y+13	; 0x0d
    4f6e:	00 97       	sbiw	r24, 0x00	; 0
    4f70:	61 f0       	breq	.+24     	; 0x4f8a <xTaskGenericNotify+0x5c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    4f72:	eb 81       	ldd	r30, Y+3	; 0x03
    4f74:	fc 81       	ldd	r31, Y+4	; 0x04
    4f76:	85 a1       	ldd	r24, Z+37	; 0x25
    4f78:	96 a1       	ldd	r25, Z+38	; 0x26
    4f7a:	a7 a1       	ldd	r26, Z+39	; 0x27
    4f7c:	b0 a5       	ldd	r27, Z+40	; 0x28
    4f7e:	ec 85       	ldd	r30, Y+12	; 0x0c
    4f80:	fd 85       	ldd	r31, Y+13	; 0x0d
    4f82:	80 83       	st	Z, r24
    4f84:	91 83       	std	Z+1, r25	; 0x01
    4f86:	a2 83       	std	Z+2, r26	; 0x02
    4f88:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    4f8a:	eb 81       	ldd	r30, Y+3	; 0x03
    4f8c:	fc 81       	ldd	r31, Y+4	; 0x04
    4f8e:	81 a5       	ldd	r24, Z+41	; 0x29
    4f90:	89 83       	std	Y+1, r24	; 0x01

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    4f92:	eb 81       	ldd	r30, Y+3	; 0x03
    4f94:	fc 81       	ldd	r31, Y+4	; 0x04
    4f96:	82 e0       	ldi	r24, 0x02	; 2
    4f98:	81 a7       	std	Z+41, r24	; 0x29

			switch( eAction )
    4f9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f9c:	28 2f       	mov	r18, r24
    4f9e:	30 e0       	ldi	r19, 0x00	; 0
    4fa0:	3f 87       	std	Y+15, r19	; 0x0f
    4fa2:	2e 87       	std	Y+14, r18	; 0x0e
    4fa4:	8e 85       	ldd	r24, Y+14	; 0x0e
    4fa6:	9f 85       	ldd	r25, Y+15	; 0x0f
    4fa8:	82 30       	cpi	r24, 0x02	; 2
    4faa:	91 05       	cpc	r25, r1
    4fac:	59 f1       	breq	.+86     	; 0x5004 <xTaskGenericNotify+0xd6>
    4fae:	2e 85       	ldd	r18, Y+14	; 0x0e
    4fb0:	3f 85       	ldd	r19, Y+15	; 0x0f
    4fb2:	23 30       	cpi	r18, 0x03	; 3
    4fb4:	31 05       	cpc	r19, r1
    4fb6:	34 f4       	brge	.+12     	; 0x4fc4 <xTaskGenericNotify+0x96>
    4fb8:	8e 85       	ldd	r24, Y+14	; 0x0e
    4fba:	9f 85       	ldd	r25, Y+15	; 0x0f
    4fbc:	81 30       	cpi	r24, 0x01	; 1
    4fbe:	91 05       	cpc	r25, r1
    4fc0:	61 f0       	breq	.+24     	; 0x4fda <xTaskGenericNotify+0xac>
    4fc2:	4a c0       	rjmp	.+148    	; 0x5058 <xTaskGenericNotify+0x12a>
    4fc4:	2e 85       	ldd	r18, Y+14	; 0x0e
    4fc6:	3f 85       	ldd	r19, Y+15	; 0x0f
    4fc8:	23 30       	cpi	r18, 0x03	; 3
    4fca:	31 05       	cpc	r19, r1
    4fcc:	59 f1       	breq	.+86     	; 0x5024 <xTaskGenericNotify+0xf6>
    4fce:	8e 85       	ldd	r24, Y+14	; 0x0e
    4fd0:	9f 85       	ldd	r25, Y+15	; 0x0f
    4fd2:	84 30       	cpi	r24, 0x04	; 4
    4fd4:	91 05       	cpc	r25, r1
    4fd6:	89 f1       	breq	.+98     	; 0x503a <xTaskGenericNotify+0x10c>
    4fd8:	3f c0       	rjmp	.+126    	; 0x5058 <xTaskGenericNotify+0x12a>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    4fda:	eb 81       	ldd	r30, Y+3	; 0x03
    4fdc:	fc 81       	ldd	r31, Y+4	; 0x04
    4fde:	25 a1       	ldd	r18, Z+37	; 0x25
    4fe0:	36 a1       	ldd	r19, Z+38	; 0x26
    4fe2:	47 a1       	ldd	r20, Z+39	; 0x27
    4fe4:	50 a5       	ldd	r21, Z+40	; 0x28
    4fe6:	8f 81       	ldd	r24, Y+7	; 0x07
    4fe8:	98 85       	ldd	r25, Y+8	; 0x08
    4fea:	a9 85       	ldd	r26, Y+9	; 0x09
    4fec:	ba 85       	ldd	r27, Y+10	; 0x0a
    4fee:	82 2b       	or	r24, r18
    4ff0:	93 2b       	or	r25, r19
    4ff2:	a4 2b       	or	r26, r20
    4ff4:	b5 2b       	or	r27, r21
    4ff6:	eb 81       	ldd	r30, Y+3	; 0x03
    4ff8:	fc 81       	ldd	r31, Y+4	; 0x04
    4ffa:	85 a3       	std	Z+37, r24	; 0x25
    4ffc:	96 a3       	std	Z+38, r25	; 0x26
    4ffe:	a7 a3       	std	Z+39, r26	; 0x27
    5000:	b0 a7       	std	Z+40, r27	; 0x28
    5002:	2a c0       	rjmp	.+84     	; 0x5058 <xTaskGenericNotify+0x12a>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    5004:	eb 81       	ldd	r30, Y+3	; 0x03
    5006:	fc 81       	ldd	r31, Y+4	; 0x04
    5008:	85 a1       	ldd	r24, Z+37	; 0x25
    500a:	96 a1       	ldd	r25, Z+38	; 0x26
    500c:	a7 a1       	ldd	r26, Z+39	; 0x27
    500e:	b0 a5       	ldd	r27, Z+40	; 0x28
    5010:	01 96       	adiw	r24, 0x01	; 1
    5012:	a1 1d       	adc	r26, r1
    5014:	b1 1d       	adc	r27, r1
    5016:	eb 81       	ldd	r30, Y+3	; 0x03
    5018:	fc 81       	ldd	r31, Y+4	; 0x04
    501a:	85 a3       	std	Z+37, r24	; 0x25
    501c:	96 a3       	std	Z+38, r25	; 0x26
    501e:	a7 a3       	std	Z+39, r26	; 0x27
    5020:	b0 a7       	std	Z+40, r27	; 0x28
    5022:	1a c0       	rjmp	.+52     	; 0x5058 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    5024:	eb 81       	ldd	r30, Y+3	; 0x03
    5026:	fc 81       	ldd	r31, Y+4	; 0x04
    5028:	8f 81       	ldd	r24, Y+7	; 0x07
    502a:	98 85       	ldd	r25, Y+8	; 0x08
    502c:	a9 85       	ldd	r26, Y+9	; 0x09
    502e:	ba 85       	ldd	r27, Y+10	; 0x0a
    5030:	85 a3       	std	Z+37, r24	; 0x25
    5032:	96 a3       	std	Z+38, r25	; 0x26
    5034:	a7 a3       	std	Z+39, r26	; 0x27
    5036:	b0 a7       	std	Z+40, r27	; 0x28
    5038:	0f c0       	rjmp	.+30     	; 0x5058 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    503a:	89 81       	ldd	r24, Y+1	; 0x01
    503c:	82 30       	cpi	r24, 0x02	; 2
    503e:	59 f0       	breq	.+22     	; 0x5056 <xTaskGenericNotify+0x128>
					{
						pxTCB->ulNotifiedValue = ulValue;
    5040:	eb 81       	ldd	r30, Y+3	; 0x03
    5042:	fc 81       	ldd	r31, Y+4	; 0x04
    5044:	8f 81       	ldd	r24, Y+7	; 0x07
    5046:	98 85       	ldd	r25, Y+8	; 0x08
    5048:	a9 85       	ldd	r26, Y+9	; 0x09
    504a:	ba 85       	ldd	r27, Y+10	; 0x0a
    504c:	85 a3       	std	Z+37, r24	; 0x25
    504e:	96 a3       	std	Z+38, r25	; 0x26
    5050:	a7 a3       	std	Z+39, r26	; 0x27
    5052:	b0 a7       	std	Z+40, r27	; 0x28
    5054:	01 c0       	rjmp	.+2      	; 0x5058 <xTaskGenericNotify+0x12a>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    5056:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    5058:	89 81       	ldd	r24, Y+1	; 0x01
    505a:	81 30       	cpi	r24, 0x01	; 1
    505c:	b9 f5       	brne	.+110    	; 0x50cc <xTaskGenericNotify+0x19e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    505e:	8b 81       	ldd	r24, Y+3	; 0x03
    5060:	9c 81       	ldd	r25, Y+4	; 0x04
    5062:	02 96       	adiw	r24, 0x02	; 2
    5064:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    5068:	eb 81       	ldd	r30, Y+3	; 0x03
    506a:	fc 81       	ldd	r31, Y+4	; 0x04
    506c:	96 89       	ldd	r25, Z+22	; 0x16
    506e:	80 91 a3 03 	lds	r24, 0x03A3
    5072:	89 17       	cp	r24, r25
    5074:	28 f4       	brcc	.+10     	; 0x5080 <xTaskGenericNotify+0x152>
    5076:	eb 81       	ldd	r30, Y+3	; 0x03
    5078:	fc 81       	ldd	r31, Y+4	; 0x04
    507a:	86 89       	ldd	r24, Z+22	; 0x16
    507c:	80 93 a3 03 	sts	0x03A3, r24
    5080:	eb 81       	ldd	r30, Y+3	; 0x03
    5082:	fc 81       	ldd	r31, Y+4	; 0x04
    5084:	86 89       	ldd	r24, Z+22	; 0x16
    5086:	28 2f       	mov	r18, r24
    5088:	30 e0       	ldi	r19, 0x00	; 0
    508a:	c9 01       	movw	r24, r18
    508c:	88 0f       	add	r24, r24
    508e:	99 1f       	adc	r25, r25
    5090:	88 0f       	add	r24, r24
    5092:	99 1f       	adc	r25, r25
    5094:	88 0f       	add	r24, r24
    5096:	99 1f       	adc	r25, r25
    5098:	82 0f       	add	r24, r18
    509a:	93 1f       	adc	r25, r19
    509c:	ac 01       	movw	r20, r24
    509e:	42 55       	subi	r20, 0x52	; 82
    50a0:	5c 4f       	sbci	r21, 0xFC	; 252
    50a2:	8b 81       	ldd	r24, Y+3	; 0x03
    50a4:	9c 81       	ldd	r25, Y+4	; 0x04
    50a6:	9c 01       	movw	r18, r24
    50a8:	2e 5f       	subi	r18, 0xFE	; 254
    50aa:	3f 4f       	sbci	r19, 0xFF	; 255
    50ac:	ca 01       	movw	r24, r20
    50ae:	b9 01       	movw	r22, r18
    50b0:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    50b4:	eb 81       	ldd	r30, Y+3	; 0x03
    50b6:	fc 81       	ldd	r31, Y+4	; 0x04
    50b8:	96 89       	ldd	r25, Z+22	; 0x16
    50ba:	e0 91 9d 03 	lds	r30, 0x039D
    50be:	f0 91 9e 03 	lds	r31, 0x039E
    50c2:	86 89       	ldd	r24, Z+22	; 0x16
    50c4:	89 17       	cp	r24, r25
    50c6:	10 f4       	brcc	.+4      	; 0x50cc <xTaskGenericNotify+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    50c8:	0e 94 4d 11 	call	0x229a	; 0x229a <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    50cc:	0f 90       	pop	r0
    50ce:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    50d0:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    50d2:	2f 96       	adiw	r28, 0x0f	; 15
    50d4:	0f b6       	in	r0, 0x3f	; 63
    50d6:	f8 94       	cli
    50d8:	de bf       	out	0x3e, r29	; 62
    50da:	0f be       	out	0x3f, r0	; 63
    50dc:	cd bf       	out	0x3d, r28	; 61
    50de:	cf 91       	pop	r28
    50e0:	df 91       	pop	r29
    50e2:	1f 91       	pop	r17
    50e4:	0f 91       	pop	r16
    50e6:	08 95       	ret

000050e8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    50e8:	ef 92       	push	r14
    50ea:	ff 92       	push	r15
    50ec:	0f 93       	push	r16
    50ee:	1f 93       	push	r17
    50f0:	df 93       	push	r29
    50f2:	cf 93       	push	r28
    50f4:	cd b7       	in	r28, 0x3d	; 61
    50f6:	de b7       	in	r29, 0x3e	; 62
    50f8:	62 97       	sbiw	r28, 0x12	; 18
    50fa:	0f b6       	in	r0, 0x3f	; 63
    50fc:	f8 94       	cli
    50fe:	de bf       	out	0x3e, r29	; 62
    5100:	0f be       	out	0x3f, r0	; 63
    5102:	cd bf       	out	0x3d, r28	; 61
    5104:	9f 83       	std	Y+7, r25	; 0x07
    5106:	8e 83       	std	Y+6, r24	; 0x06
    5108:	48 87       	std	Y+8, r20	; 0x08
    510a:	59 87       	std	Y+9, r21	; 0x09
    510c:	6a 87       	std	Y+10, r22	; 0x0a
    510e:	7b 87       	std	Y+11, r23	; 0x0b
    5110:	2c 87       	std	Y+12, r18	; 0x0c
    5112:	1e 87       	std	Y+14, r17	; 0x0e
    5114:	0d 87       	std	Y+13, r16	; 0x0d
    5116:	f8 8a       	std	Y+16, r15	; 0x10
    5118:	ef 86       	std	Y+15, r14	; 0x0f
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    511a:	81 e0       	ldi	r24, 0x01	; 1
    511c:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    511e:	8e 81       	ldd	r24, Y+6	; 0x06
    5120:	9f 81       	ldd	r25, Y+7	; 0x07
    5122:	9d 83       	std	Y+5, r25	; 0x05
    5124:	8c 83       	std	Y+4, r24	; 0x04

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5126:	19 82       	std	Y+1, r1	; 0x01
		{
			if( pulPreviousNotificationValue != NULL )
    5128:	8d 85       	ldd	r24, Y+13	; 0x0d
    512a:	9e 85       	ldd	r25, Y+14	; 0x0e
    512c:	00 97       	sbiw	r24, 0x00	; 0
    512e:	61 f0       	breq	.+24     	; 0x5148 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    5130:	ec 81       	ldd	r30, Y+4	; 0x04
    5132:	fd 81       	ldd	r31, Y+5	; 0x05
    5134:	85 a1       	ldd	r24, Z+37	; 0x25
    5136:	96 a1       	ldd	r25, Z+38	; 0x26
    5138:	a7 a1       	ldd	r26, Z+39	; 0x27
    513a:	b0 a5       	ldd	r27, Z+40	; 0x28
    513c:	ed 85       	ldd	r30, Y+13	; 0x0d
    513e:	fe 85       	ldd	r31, Y+14	; 0x0e
    5140:	80 83       	st	Z, r24
    5142:	91 83       	std	Z+1, r25	; 0x01
    5144:	a2 83       	std	Z+2, r26	; 0x02
    5146:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    5148:	ec 81       	ldd	r30, Y+4	; 0x04
    514a:	fd 81       	ldd	r31, Y+5	; 0x05
    514c:	81 a5       	ldd	r24, Z+41	; 0x29
    514e:	8b 83       	std	Y+3, r24	; 0x03
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    5150:	ec 81       	ldd	r30, Y+4	; 0x04
    5152:	fd 81       	ldd	r31, Y+5	; 0x05
    5154:	82 e0       	ldi	r24, 0x02	; 2
    5156:	81 a7       	std	Z+41, r24	; 0x29

			switch( eAction )
    5158:	8c 85       	ldd	r24, Y+12	; 0x0c
    515a:	28 2f       	mov	r18, r24
    515c:	30 e0       	ldi	r19, 0x00	; 0
    515e:	3a 8b       	std	Y+18, r19	; 0x12
    5160:	29 8b       	std	Y+17, r18	; 0x11
    5162:	89 89       	ldd	r24, Y+17	; 0x11
    5164:	9a 89       	ldd	r25, Y+18	; 0x12
    5166:	82 30       	cpi	r24, 0x02	; 2
    5168:	91 05       	cpc	r25, r1
    516a:	59 f1       	breq	.+86     	; 0x51c2 <xTaskGenericNotifyFromISR+0xda>
    516c:	29 89       	ldd	r18, Y+17	; 0x11
    516e:	3a 89       	ldd	r19, Y+18	; 0x12
    5170:	23 30       	cpi	r18, 0x03	; 3
    5172:	31 05       	cpc	r19, r1
    5174:	34 f4       	brge	.+12     	; 0x5182 <xTaskGenericNotifyFromISR+0x9a>
    5176:	89 89       	ldd	r24, Y+17	; 0x11
    5178:	9a 89       	ldd	r25, Y+18	; 0x12
    517a:	81 30       	cpi	r24, 0x01	; 1
    517c:	91 05       	cpc	r25, r1
    517e:	61 f0       	breq	.+24     	; 0x5198 <xTaskGenericNotifyFromISR+0xb0>
    5180:	4a c0       	rjmp	.+148    	; 0x5216 <xTaskGenericNotifyFromISR+0x12e>
    5182:	29 89       	ldd	r18, Y+17	; 0x11
    5184:	3a 89       	ldd	r19, Y+18	; 0x12
    5186:	23 30       	cpi	r18, 0x03	; 3
    5188:	31 05       	cpc	r19, r1
    518a:	59 f1       	breq	.+86     	; 0x51e2 <xTaskGenericNotifyFromISR+0xfa>
    518c:	89 89       	ldd	r24, Y+17	; 0x11
    518e:	9a 89       	ldd	r25, Y+18	; 0x12
    5190:	84 30       	cpi	r24, 0x04	; 4
    5192:	91 05       	cpc	r25, r1
    5194:	89 f1       	breq	.+98     	; 0x51f8 <xTaskGenericNotifyFromISR+0x110>
    5196:	3f c0       	rjmp	.+126    	; 0x5216 <xTaskGenericNotifyFromISR+0x12e>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    5198:	ec 81       	ldd	r30, Y+4	; 0x04
    519a:	fd 81       	ldd	r31, Y+5	; 0x05
    519c:	25 a1       	ldd	r18, Z+37	; 0x25
    519e:	36 a1       	ldd	r19, Z+38	; 0x26
    51a0:	47 a1       	ldd	r20, Z+39	; 0x27
    51a2:	50 a5       	ldd	r21, Z+40	; 0x28
    51a4:	88 85       	ldd	r24, Y+8	; 0x08
    51a6:	99 85       	ldd	r25, Y+9	; 0x09
    51a8:	aa 85       	ldd	r26, Y+10	; 0x0a
    51aa:	bb 85       	ldd	r27, Y+11	; 0x0b
    51ac:	82 2b       	or	r24, r18
    51ae:	93 2b       	or	r25, r19
    51b0:	a4 2b       	or	r26, r20
    51b2:	b5 2b       	or	r27, r21
    51b4:	ec 81       	ldd	r30, Y+4	; 0x04
    51b6:	fd 81       	ldd	r31, Y+5	; 0x05
    51b8:	85 a3       	std	Z+37, r24	; 0x25
    51ba:	96 a3       	std	Z+38, r25	; 0x26
    51bc:	a7 a3       	std	Z+39, r26	; 0x27
    51be:	b0 a7       	std	Z+40, r27	; 0x28
    51c0:	2a c0       	rjmp	.+84     	; 0x5216 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    51c2:	ec 81       	ldd	r30, Y+4	; 0x04
    51c4:	fd 81       	ldd	r31, Y+5	; 0x05
    51c6:	85 a1       	ldd	r24, Z+37	; 0x25
    51c8:	96 a1       	ldd	r25, Z+38	; 0x26
    51ca:	a7 a1       	ldd	r26, Z+39	; 0x27
    51cc:	b0 a5       	ldd	r27, Z+40	; 0x28
    51ce:	01 96       	adiw	r24, 0x01	; 1
    51d0:	a1 1d       	adc	r26, r1
    51d2:	b1 1d       	adc	r27, r1
    51d4:	ec 81       	ldd	r30, Y+4	; 0x04
    51d6:	fd 81       	ldd	r31, Y+5	; 0x05
    51d8:	85 a3       	std	Z+37, r24	; 0x25
    51da:	96 a3       	std	Z+38, r25	; 0x26
    51dc:	a7 a3       	std	Z+39, r26	; 0x27
    51de:	b0 a7       	std	Z+40, r27	; 0x28
    51e0:	1a c0       	rjmp	.+52     	; 0x5216 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    51e2:	ec 81       	ldd	r30, Y+4	; 0x04
    51e4:	fd 81       	ldd	r31, Y+5	; 0x05
    51e6:	88 85       	ldd	r24, Y+8	; 0x08
    51e8:	99 85       	ldd	r25, Y+9	; 0x09
    51ea:	aa 85       	ldd	r26, Y+10	; 0x0a
    51ec:	bb 85       	ldd	r27, Y+11	; 0x0b
    51ee:	85 a3       	std	Z+37, r24	; 0x25
    51f0:	96 a3       	std	Z+38, r25	; 0x26
    51f2:	a7 a3       	std	Z+39, r26	; 0x27
    51f4:	b0 a7       	std	Z+40, r27	; 0x28
    51f6:	0f c0       	rjmp	.+30     	; 0x5216 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    51f8:	8b 81       	ldd	r24, Y+3	; 0x03
    51fa:	82 30       	cpi	r24, 0x02	; 2
    51fc:	59 f0       	breq	.+22     	; 0x5214 <xTaskGenericNotifyFromISR+0x12c>
					{
						pxTCB->ulNotifiedValue = ulValue;
    51fe:	ec 81       	ldd	r30, Y+4	; 0x04
    5200:	fd 81       	ldd	r31, Y+5	; 0x05
    5202:	88 85       	ldd	r24, Y+8	; 0x08
    5204:	99 85       	ldd	r25, Y+9	; 0x09
    5206:	aa 85       	ldd	r26, Y+10	; 0x0a
    5208:	bb 85       	ldd	r27, Y+11	; 0x0b
    520a:	85 a3       	std	Z+37, r24	; 0x25
    520c:	96 a3       	std	Z+38, r25	; 0x26
    520e:	a7 a3       	std	Z+39, r26	; 0x27
    5210:	b0 a7       	std	Z+40, r27	; 0x28
    5212:	01 c0       	rjmp	.+2      	; 0x5216 <xTaskGenericNotifyFromISR+0x12e>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    5214:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    5216:	8b 81       	ldd	r24, Y+3	; 0x03
    5218:	81 30       	cpi	r24, 0x01	; 1
    521a:	09 f0       	breq	.+2      	; 0x521e <xTaskGenericNotifyFromISR+0x136>
    521c:	50 c0       	rjmp	.+160    	; 0x52be <xTaskGenericNotifyFromISR+0x1d6>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    521e:	80 91 ad 03 	lds	r24, 0x03AD
    5222:	88 23       	and	r24, r24
    5224:	61 f5       	brne	.+88     	; 0x527e <xTaskGenericNotifyFromISR+0x196>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    5226:	8c 81       	ldd	r24, Y+4	; 0x04
    5228:	9d 81       	ldd	r25, Y+5	; 0x05
    522a:	02 96       	adiw	r24, 0x02	; 2
    522c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    5230:	ec 81       	ldd	r30, Y+4	; 0x04
    5232:	fd 81       	ldd	r31, Y+5	; 0x05
    5234:	96 89       	ldd	r25, Z+22	; 0x16
    5236:	80 91 a3 03 	lds	r24, 0x03A3
    523a:	89 17       	cp	r24, r25
    523c:	28 f4       	brcc	.+10     	; 0x5248 <xTaskGenericNotifyFromISR+0x160>
    523e:	ec 81       	ldd	r30, Y+4	; 0x04
    5240:	fd 81       	ldd	r31, Y+5	; 0x05
    5242:	86 89       	ldd	r24, Z+22	; 0x16
    5244:	80 93 a3 03 	sts	0x03A3, r24
    5248:	ec 81       	ldd	r30, Y+4	; 0x04
    524a:	fd 81       	ldd	r31, Y+5	; 0x05
    524c:	86 89       	ldd	r24, Z+22	; 0x16
    524e:	28 2f       	mov	r18, r24
    5250:	30 e0       	ldi	r19, 0x00	; 0
    5252:	c9 01       	movw	r24, r18
    5254:	88 0f       	add	r24, r24
    5256:	99 1f       	adc	r25, r25
    5258:	88 0f       	add	r24, r24
    525a:	99 1f       	adc	r25, r25
    525c:	88 0f       	add	r24, r24
    525e:	99 1f       	adc	r25, r25
    5260:	82 0f       	add	r24, r18
    5262:	93 1f       	adc	r25, r19
    5264:	ac 01       	movw	r20, r24
    5266:	42 55       	subi	r20, 0x52	; 82
    5268:	5c 4f       	sbci	r21, 0xFC	; 252
    526a:	8c 81       	ldd	r24, Y+4	; 0x04
    526c:	9d 81       	ldd	r25, Y+5	; 0x05
    526e:	9c 01       	movw	r18, r24
    5270:	2e 5f       	subi	r18, 0xFE	; 254
    5272:	3f 4f       	sbci	r19, 0xFF	; 255
    5274:	ca 01       	movw	r24, r20
    5276:	b9 01       	movw	r22, r18
    5278:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
    527c:	0a c0       	rjmp	.+20     	; 0x5292 <xTaskGenericNotifyFromISR+0x1aa>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    527e:	8c 81       	ldd	r24, Y+4	; 0x04
    5280:	9d 81       	ldd	r25, Y+5	; 0x05
    5282:	9c 01       	movw	r18, r24
    5284:	24 5f       	subi	r18, 0xF4	; 244
    5286:	3f 4f       	sbci	r19, 0xFF	; 255
    5288:	81 ef       	ldi	r24, 0xF1	; 241
    528a:	93 e0       	ldi	r25, 0x03	; 3
    528c:	b9 01       	movw	r22, r18
    528e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    5292:	ec 81       	ldd	r30, Y+4	; 0x04
    5294:	fd 81       	ldd	r31, Y+5	; 0x05
    5296:	96 89       	ldd	r25, Z+22	; 0x16
    5298:	e0 91 9d 03 	lds	r30, 0x039D
    529c:	f0 91 9e 03 	lds	r31, 0x039E
    52a0:	86 89       	ldd	r24, Z+22	; 0x16
    52a2:	89 17       	cp	r24, r25
    52a4:	60 f4       	brcc	.+24     	; 0x52be <xTaskGenericNotifyFromISR+0x1d6>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    52a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    52a8:	98 89       	ldd	r25, Y+16	; 0x10
    52aa:	00 97       	sbiw	r24, 0x00	; 0
    52ac:	29 f0       	breq	.+10     	; 0x52b8 <xTaskGenericNotifyFromISR+0x1d0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    52ae:	ef 85       	ldd	r30, Y+15	; 0x0f
    52b0:	f8 89       	ldd	r31, Y+16	; 0x10
    52b2:	81 e0       	ldi	r24, 0x01	; 1
    52b4:	80 83       	st	Z, r24
    52b6:	03 c0       	rjmp	.+6      	; 0x52be <xTaskGenericNotifyFromISR+0x1d6>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    52b8:	81 e0       	ldi	r24, 0x01	; 1
    52ba:	80 93 a6 03 	sts	0x03A6, r24
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    52be:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    52c0:	62 96       	adiw	r28, 0x12	; 18
    52c2:	0f b6       	in	r0, 0x3f	; 63
    52c4:	f8 94       	cli
    52c6:	de bf       	out	0x3e, r29	; 62
    52c8:	0f be       	out	0x3f, r0	; 63
    52ca:	cd bf       	out	0x3d, r28	; 61
    52cc:	cf 91       	pop	r28
    52ce:	df 91       	pop	r29
    52d0:	1f 91       	pop	r17
    52d2:	0f 91       	pop	r16
    52d4:	ff 90       	pop	r15
    52d6:	ef 90       	pop	r14
    52d8:	08 95       	ret

000052da <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    52da:	df 93       	push	r29
    52dc:	cf 93       	push	r28
    52de:	cd b7       	in	r28, 0x3d	; 61
    52e0:	de b7       	in	r29, 0x3e	; 62
    52e2:	28 97       	sbiw	r28, 0x08	; 8
    52e4:	0f b6       	in	r0, 0x3f	; 63
    52e6:	f8 94       	cli
    52e8:	de bf       	out	0x3e, r29	; 62
    52ea:	0f be       	out	0x3f, r0	; 63
    52ec:	cd bf       	out	0x3d, r28	; 61
    52ee:	9e 83       	std	Y+6, r25	; 0x06
    52f0:	8d 83       	std	Y+5, r24	; 0x05
    52f2:	78 87       	std	Y+8, r23	; 0x08
    52f4:	6f 83       	std	Y+7, r22	; 0x07
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    52f6:	8d 81       	ldd	r24, Y+5	; 0x05
    52f8:	9e 81       	ldd	r25, Y+6	; 0x06
    52fa:	9c 83       	std	Y+4, r25	; 0x04
    52fc:	8b 83       	std	Y+3, r24	; 0x03

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    52fe:	19 82       	std	Y+1, r1	; 0x01
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    5300:	eb 81       	ldd	r30, Y+3	; 0x03
    5302:	fc 81       	ldd	r31, Y+4	; 0x04
    5304:	81 a5       	ldd	r24, Z+41	; 0x29
    5306:	8a 83       	std	Y+2, r24	; 0x02
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    5308:	eb 81       	ldd	r30, Y+3	; 0x03
    530a:	fc 81       	ldd	r31, Y+4	; 0x04
    530c:	82 e0       	ldi	r24, 0x02	; 2
    530e:	81 a7       	std	Z+41, r24	; 0x29

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    5310:	eb 81       	ldd	r30, Y+3	; 0x03
    5312:	fc 81       	ldd	r31, Y+4	; 0x04
    5314:	85 a1       	ldd	r24, Z+37	; 0x25
    5316:	96 a1       	ldd	r25, Z+38	; 0x26
    5318:	a7 a1       	ldd	r26, Z+39	; 0x27
    531a:	b0 a5       	ldd	r27, Z+40	; 0x28
    531c:	01 96       	adiw	r24, 0x01	; 1
    531e:	a1 1d       	adc	r26, r1
    5320:	b1 1d       	adc	r27, r1
    5322:	eb 81       	ldd	r30, Y+3	; 0x03
    5324:	fc 81       	ldd	r31, Y+4	; 0x04
    5326:	85 a3       	std	Z+37, r24	; 0x25
    5328:	96 a3       	std	Z+38, r25	; 0x26
    532a:	a7 a3       	std	Z+39, r26	; 0x27
    532c:	b0 a7       	std	Z+40, r27	; 0x28

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    532e:	8a 81       	ldd	r24, Y+2	; 0x02
    5330:	81 30       	cpi	r24, 0x01	; 1
    5332:	09 f0       	breq	.+2      	; 0x5336 <vTaskNotifyGiveFromISR+0x5c>
    5334:	50 c0       	rjmp	.+160    	; 0x53d6 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    5336:	80 91 ad 03 	lds	r24, 0x03AD
    533a:	88 23       	and	r24, r24
    533c:	61 f5       	brne	.+88     	; 0x5396 <vTaskNotifyGiveFromISR+0xbc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    533e:	8b 81       	ldd	r24, Y+3	; 0x03
    5340:	9c 81       	ldd	r25, Y+4	; 0x04
    5342:	02 96       	adiw	r24, 0x02	; 2
    5344:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    5348:	eb 81       	ldd	r30, Y+3	; 0x03
    534a:	fc 81       	ldd	r31, Y+4	; 0x04
    534c:	96 89       	ldd	r25, Z+22	; 0x16
    534e:	80 91 a3 03 	lds	r24, 0x03A3
    5352:	89 17       	cp	r24, r25
    5354:	28 f4       	brcc	.+10     	; 0x5360 <vTaskNotifyGiveFromISR+0x86>
    5356:	eb 81       	ldd	r30, Y+3	; 0x03
    5358:	fc 81       	ldd	r31, Y+4	; 0x04
    535a:	86 89       	ldd	r24, Z+22	; 0x16
    535c:	80 93 a3 03 	sts	0x03A3, r24
    5360:	eb 81       	ldd	r30, Y+3	; 0x03
    5362:	fc 81       	ldd	r31, Y+4	; 0x04
    5364:	86 89       	ldd	r24, Z+22	; 0x16
    5366:	28 2f       	mov	r18, r24
    5368:	30 e0       	ldi	r19, 0x00	; 0
    536a:	c9 01       	movw	r24, r18
    536c:	88 0f       	add	r24, r24
    536e:	99 1f       	adc	r25, r25
    5370:	88 0f       	add	r24, r24
    5372:	99 1f       	adc	r25, r25
    5374:	88 0f       	add	r24, r24
    5376:	99 1f       	adc	r25, r25
    5378:	82 0f       	add	r24, r18
    537a:	93 1f       	adc	r25, r19
    537c:	ac 01       	movw	r20, r24
    537e:	42 55       	subi	r20, 0x52	; 82
    5380:	5c 4f       	sbci	r21, 0xFC	; 252
    5382:	8b 81       	ldd	r24, Y+3	; 0x03
    5384:	9c 81       	ldd	r25, Y+4	; 0x04
    5386:	9c 01       	movw	r18, r24
    5388:	2e 5f       	subi	r18, 0xFE	; 254
    538a:	3f 4f       	sbci	r19, 0xFF	; 255
    538c:	ca 01       	movw	r24, r20
    538e:	b9 01       	movw	r22, r18
    5390:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
    5394:	0a c0       	rjmp	.+20     	; 0x53aa <vTaskNotifyGiveFromISR+0xd0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    5396:	8b 81       	ldd	r24, Y+3	; 0x03
    5398:	9c 81       	ldd	r25, Y+4	; 0x04
    539a:	9c 01       	movw	r18, r24
    539c:	24 5f       	subi	r18, 0xF4	; 244
    539e:	3f 4f       	sbci	r19, 0xFF	; 255
    53a0:	81 ef       	ldi	r24, 0xF1	; 241
    53a2:	93 e0       	ldi	r25, 0x03	; 3
    53a4:	b9 01       	movw	r22, r18
    53a6:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    53aa:	eb 81       	ldd	r30, Y+3	; 0x03
    53ac:	fc 81       	ldd	r31, Y+4	; 0x04
    53ae:	96 89       	ldd	r25, Z+22	; 0x16
    53b0:	e0 91 9d 03 	lds	r30, 0x039D
    53b4:	f0 91 9e 03 	lds	r31, 0x039E
    53b8:	86 89       	ldd	r24, Z+22	; 0x16
    53ba:	89 17       	cp	r24, r25
    53bc:	60 f4       	brcc	.+24     	; 0x53d6 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    53be:	8f 81       	ldd	r24, Y+7	; 0x07
    53c0:	98 85       	ldd	r25, Y+8	; 0x08
    53c2:	00 97       	sbiw	r24, 0x00	; 0
    53c4:	29 f0       	breq	.+10     	; 0x53d0 <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    53c6:	ef 81       	ldd	r30, Y+7	; 0x07
    53c8:	f8 85       	ldd	r31, Y+8	; 0x08
    53ca:	81 e0       	ldi	r24, 0x01	; 1
    53cc:	80 83       	st	Z, r24
    53ce:	03 c0       	rjmp	.+6      	; 0x53d6 <vTaskNotifyGiveFromISR+0xfc>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    53d0:	81 e0       	ldi	r24, 0x01	; 1
    53d2:	80 93 a6 03 	sts	0x03A6, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    53d6:	28 96       	adiw	r28, 0x08	; 8
    53d8:	0f b6       	in	r0, 0x3f	; 63
    53da:	f8 94       	cli
    53dc:	de bf       	out	0x3e, r29	; 62
    53de:	0f be       	out	0x3f, r0	; 63
    53e0:	cd bf       	out	0x3d, r28	; 61
    53e2:	cf 91       	pop	r28
    53e4:	df 91       	pop	r29
    53e6:	08 95       	ret

000053e8 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
    53e8:	df 93       	push	r29
    53ea:	cf 93       	push	r28
    53ec:	cd b7       	in	r28, 0x3d	; 61
    53ee:	de b7       	in	r29, 0x3e	; 62
    53f0:	27 97       	sbiw	r28, 0x07	; 7
    53f2:	0f b6       	in	r0, 0x3f	; 63
    53f4:	f8 94       	cli
    53f6:	de bf       	out	0x3e, r29	; 62
    53f8:	0f be       	out	0x3f, r0	; 63
    53fa:	cd bf       	out	0x3d, r28	; 61
    53fc:	9d 83       	std	Y+5, r25	; 0x05
    53fe:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    5400:	8c 81       	ldd	r24, Y+4	; 0x04
    5402:	9d 81       	ldd	r25, Y+5	; 0x05
    5404:	00 97       	sbiw	r24, 0x00	; 0
    5406:	39 f4       	brne	.+14     	; 0x5416 <xTaskNotifyStateClear+0x2e>
    5408:	80 91 9d 03 	lds	r24, 0x039D
    540c:	90 91 9e 03 	lds	r25, 0x039E
    5410:	9f 83       	std	Y+7, r25	; 0x07
    5412:	8e 83       	std	Y+6, r24	; 0x06
    5414:	04 c0       	rjmp	.+8      	; 0x541e <xTaskNotifyStateClear+0x36>
    5416:	8c 81       	ldd	r24, Y+4	; 0x04
    5418:	9d 81       	ldd	r25, Y+5	; 0x05
    541a:	9f 83       	std	Y+7, r25	; 0x07
    541c:	8e 83       	std	Y+6, r24	; 0x06
    541e:	8e 81       	ldd	r24, Y+6	; 0x06
    5420:	9f 81       	ldd	r25, Y+7	; 0x07
    5422:	9b 83       	std	Y+3, r25	; 0x03
    5424:	8a 83       	std	Y+2, r24	; 0x02

		taskENTER_CRITICAL();
    5426:	0f b6       	in	r0, 0x3f	; 63
    5428:	f8 94       	cli
    542a:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    542c:	ea 81       	ldd	r30, Y+2	; 0x02
    542e:	fb 81       	ldd	r31, Y+3	; 0x03
    5430:	81 a5       	ldd	r24, Z+41	; 0x29
    5432:	82 30       	cpi	r24, 0x02	; 2
    5434:	31 f4       	brne	.+12     	; 0x5442 <xTaskNotifyStateClear+0x5a>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5436:	ea 81       	ldd	r30, Y+2	; 0x02
    5438:	fb 81       	ldd	r31, Y+3	; 0x03
    543a:	11 a6       	std	Z+41, r1	; 0x29
				xReturn = pdPASS;
    543c:	81 e0       	ldi	r24, 0x01	; 1
    543e:	89 83       	std	Y+1, r24	; 0x01
    5440:	01 c0       	rjmp	.+2      	; 0x5444 <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
    5442:	19 82       	std	Y+1, r1	; 0x01
			}
		}
		taskEXIT_CRITICAL();
    5444:	0f 90       	pop	r0
    5446:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    5448:	89 81       	ldd	r24, Y+1	; 0x01
	}
    544a:	27 96       	adiw	r28, 0x07	; 7
    544c:	0f b6       	in	r0, 0x3f	; 63
    544e:	f8 94       	cli
    5450:	de bf       	out	0x3e, r29	; 62
    5452:	0f be       	out	0x3f, r0	; 63
    5454:	cd bf       	out	0x3d, r28	; 61
    5456:	cf 91       	pop	r28
    5458:	df 91       	pop	r29
    545a:	08 95       	ret

0000545c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    545c:	df 93       	push	r29
    545e:	cf 93       	push	r28
    5460:	cd b7       	in	r28, 0x3d	; 61
    5462:	de b7       	in	r29, 0x3e	; 62
    5464:	27 97       	sbiw	r28, 0x07	; 7
    5466:	0f b6       	in	r0, 0x3f	; 63
    5468:	f8 94       	cli
    546a:	de bf       	out	0x3e, r29	; 62
    546c:	0f be       	out	0x3f, r0	; 63
    546e:	cd bf       	out	0x3d, r28	; 61
    5470:	9e 83       	std	Y+6, r25	; 0x06
    5472:	8d 83       	std	Y+5, r24	; 0x05
    5474:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    5476:	80 91 a1 03 	lds	r24, 0x03A1
    547a:	90 91 a2 03 	lds	r25, 0x03A2
    547e:	9a 83       	std	Y+2, r25	; 0x02
    5480:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    5482:	80 91 9d 03 	lds	r24, 0x039D
    5486:	90 91 9e 03 	lds	r25, 0x039E
    548a:	02 96       	adiw	r24, 0x02	; 2
    548c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    5490:	8d 81       	ldd	r24, Y+5	; 0x05
    5492:	9e 81       	ldd	r25, Y+6	; 0x06
    5494:	2f ef       	ldi	r18, 0xFF	; 255
    5496:	8f 3f       	cpi	r24, 0xFF	; 255
    5498:	92 07       	cpc	r25, r18
    549a:	81 f4       	brne	.+32     	; 0x54bc <prvAddCurrentTaskToDelayedList+0x60>
    549c:	8f 81       	ldd	r24, Y+7	; 0x07
    549e:	88 23       	and	r24, r24
    54a0:	69 f0       	breq	.+26     	; 0x54bc <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    54a2:	80 91 9d 03 	lds	r24, 0x039D
    54a6:	90 91 9e 03 	lds	r25, 0x039E
    54aa:	9c 01       	movw	r18, r24
    54ac:	2e 5f       	subi	r18, 0xFE	; 254
    54ae:	3f 4f       	sbci	r19, 0xFF	; 255
    54b0:	83 e0       	ldi	r24, 0x03	; 3
    54b2:	94 e0       	ldi	r25, 0x04	; 4
    54b4:	b9 01       	movw	r22, r18
    54b6:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vListInsertEnd>
    54ba:	43 c0       	rjmp	.+134    	; 0x5542 <prvAddCurrentTaskToDelayedList+0xe6>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    54bc:	29 81       	ldd	r18, Y+1	; 0x01
    54be:	3a 81       	ldd	r19, Y+2	; 0x02
    54c0:	8d 81       	ldd	r24, Y+5	; 0x05
    54c2:	9e 81       	ldd	r25, Y+6	; 0x06
    54c4:	82 0f       	add	r24, r18
    54c6:	93 1f       	adc	r25, r19
    54c8:	9c 83       	std	Y+4, r25	; 0x04
    54ca:	8b 83       	std	Y+3, r24	; 0x03

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    54cc:	e0 91 9d 03 	lds	r30, 0x039D
    54d0:	f0 91 9e 03 	lds	r31, 0x039E
    54d4:	8b 81       	ldd	r24, Y+3	; 0x03
    54d6:	9c 81       	ldd	r25, Y+4	; 0x04
    54d8:	93 83       	std	Z+3, r25	; 0x03
    54da:	82 83       	std	Z+2, r24	; 0x02

			if( xTimeToWake < xConstTickCount )
    54dc:	2b 81       	ldd	r18, Y+3	; 0x03
    54de:	3c 81       	ldd	r19, Y+4	; 0x04
    54e0:	89 81       	ldd	r24, Y+1	; 0x01
    54e2:	9a 81       	ldd	r25, Y+2	; 0x02
    54e4:	28 17       	cp	r18, r24
    54e6:	39 07       	cpc	r19, r25
    54e8:	70 f4       	brcc	.+28     	; 0x5506 <prvAddCurrentTaskToDelayedList+0xaa>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    54ea:	80 91 ef 03 	lds	r24, 0x03EF
    54ee:	90 91 f0 03 	lds	r25, 0x03F0
    54f2:	20 91 9d 03 	lds	r18, 0x039D
    54f6:	30 91 9e 03 	lds	r19, 0x039E
    54fa:	2e 5f       	subi	r18, 0xFE	; 254
    54fc:	3f 4f       	sbci	r19, 0xFF	; 255
    54fe:	b9 01       	movw	r22, r18
    5500:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <vListInsert>
    5504:	1e c0       	rjmp	.+60     	; 0x5542 <prvAddCurrentTaskToDelayedList+0xe6>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    5506:	40 91 ed 03 	lds	r20, 0x03ED
    550a:	50 91 ee 03 	lds	r21, 0x03EE
    550e:	80 91 9d 03 	lds	r24, 0x039D
    5512:	90 91 9e 03 	lds	r25, 0x039E
    5516:	9c 01       	movw	r18, r24
    5518:	2e 5f       	subi	r18, 0xFE	; 254
    551a:	3f 4f       	sbci	r19, 0xFF	; 255
    551c:	ca 01       	movw	r24, r20
    551e:	b9 01       	movw	r22, r18
    5520:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    5524:	20 91 a9 03 	lds	r18, 0x03A9
    5528:	30 91 aa 03 	lds	r19, 0x03AA
    552c:	8b 81       	ldd	r24, Y+3	; 0x03
    552e:	9c 81       	ldd	r25, Y+4	; 0x04
    5530:	82 17       	cp	r24, r18
    5532:	93 07       	cpc	r25, r19
    5534:	30 f4       	brcc	.+12     	; 0x5542 <prvAddCurrentTaskToDelayedList+0xe6>
				{
					xNextTaskUnblockTime = xTimeToWake;
    5536:	8b 81       	ldd	r24, Y+3	; 0x03
    5538:	9c 81       	ldd	r25, Y+4	; 0x04
    553a:	90 93 aa 03 	sts	0x03AA, r25
    553e:	80 93 a9 03 	sts	0x03A9, r24

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    5542:	27 96       	adiw	r28, 0x07	; 7
    5544:	0f b6       	in	r0, 0x3f	; 63
    5546:	f8 94       	cli
    5548:	de bf       	out	0x3e, r29	; 62
    554a:	0f be       	out	0x3f, r0	; 63
    554c:	cd bf       	out	0x3d, r28	; 61
    554e:	cf 91       	pop	r28
    5550:	df 91       	pop	r29
    5552:	08 95       	ret

00005554 <__prologue_saves__>:
    5554:	2f 92       	push	r2
    5556:	3f 92       	push	r3
    5558:	4f 92       	push	r4
    555a:	5f 92       	push	r5
    555c:	6f 92       	push	r6
    555e:	7f 92       	push	r7
    5560:	8f 92       	push	r8
    5562:	9f 92       	push	r9
    5564:	af 92       	push	r10
    5566:	bf 92       	push	r11
    5568:	cf 92       	push	r12
    556a:	df 92       	push	r13
    556c:	ef 92       	push	r14
    556e:	ff 92       	push	r15
    5570:	0f 93       	push	r16
    5572:	1f 93       	push	r17
    5574:	cf 93       	push	r28
    5576:	df 93       	push	r29
    5578:	cd b7       	in	r28, 0x3d	; 61
    557a:	de b7       	in	r29, 0x3e	; 62
    557c:	ca 1b       	sub	r28, r26
    557e:	db 0b       	sbc	r29, r27
    5580:	0f b6       	in	r0, 0x3f	; 63
    5582:	f8 94       	cli
    5584:	de bf       	out	0x3e, r29	; 62
    5586:	0f be       	out	0x3f, r0	; 63
    5588:	cd bf       	out	0x3d, r28	; 61
    558a:	09 94       	ijmp

0000558c <__epilogue_restores__>:
    558c:	2a 88       	ldd	r2, Y+18	; 0x12
    558e:	39 88       	ldd	r3, Y+17	; 0x11
    5590:	48 88       	ldd	r4, Y+16	; 0x10
    5592:	5f 84       	ldd	r5, Y+15	; 0x0f
    5594:	6e 84       	ldd	r6, Y+14	; 0x0e
    5596:	7d 84       	ldd	r7, Y+13	; 0x0d
    5598:	8c 84       	ldd	r8, Y+12	; 0x0c
    559a:	9b 84       	ldd	r9, Y+11	; 0x0b
    559c:	aa 84       	ldd	r10, Y+10	; 0x0a
    559e:	b9 84       	ldd	r11, Y+9	; 0x09
    55a0:	c8 84       	ldd	r12, Y+8	; 0x08
    55a2:	df 80       	ldd	r13, Y+7	; 0x07
    55a4:	ee 80       	ldd	r14, Y+6	; 0x06
    55a6:	fd 80       	ldd	r15, Y+5	; 0x05
    55a8:	0c 81       	ldd	r16, Y+4	; 0x04
    55aa:	1b 81       	ldd	r17, Y+3	; 0x03
    55ac:	aa 81       	ldd	r26, Y+2	; 0x02
    55ae:	b9 81       	ldd	r27, Y+1	; 0x01
    55b0:	ce 0f       	add	r28, r30
    55b2:	d1 1d       	adc	r29, r1
    55b4:	0f b6       	in	r0, 0x3f	; 63
    55b6:	f8 94       	cli
    55b8:	de bf       	out	0x3e, r29	; 62
    55ba:	0f be       	out	0x3f, r0	; 63
    55bc:	cd bf       	out	0x3d, r28	; 61
    55be:	ed 01       	movw	r28, r26
    55c0:	08 95       	ret

000055c2 <memcpy>:
    55c2:	fb 01       	movw	r30, r22
    55c4:	dc 01       	movw	r26, r24
    55c6:	02 c0       	rjmp	.+4      	; 0x55cc <memcpy+0xa>
    55c8:	01 90       	ld	r0, Z+
    55ca:	0d 92       	st	X+, r0
    55cc:	41 50       	subi	r20, 0x01	; 1
    55ce:	50 40       	sbci	r21, 0x00	; 0
    55d0:	d8 f7       	brcc	.-10     	; 0x55c8 <memcpy+0x6>
    55d2:	08 95       	ret

000055d4 <_exit>:
    55d4:	f8 94       	cli

000055d6 <__stop_program>:
    55d6:	ff cf       	rjmp	.-2      	; 0x55d6 <__stop_program>
