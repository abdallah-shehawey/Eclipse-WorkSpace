
LDR_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ba2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  00003ba2  00003c36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080016c  0080016c  00003d42  2**0
                  ALLOC
  3 .stab         00002cf4  00000000  00000000  00003d44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010a5  00000000  00000000  00006a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  00007add  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000277  00000000  00000000  00007cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002953  00000000  00000000  00007f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016b7  00000000  00000000  0000a8c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001570  00000000  00000000  0000bf7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  0000d4f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000036b  00000000  00000000  0000d730  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bf0  00000000  00000000  0000da9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e68b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a7 1c 	call	0x394e	; 0x394e <main>
      8a:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
      be:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__fixsfdi>:
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	7b 01       	movw	r14, r22
      f4:	8c 01       	movw	r16, r24
      f6:	20 e0       	ldi	r18, 0x00	; 0
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     102:	88 23       	and	r24, r24
     104:	0c f0       	brlt	.+2      	; 0x108 <__fixsfdi+0x1e>
     106:	5c c0       	rjmp	.+184    	; 0x1c0 <__fixsfdi+0xd6>
     108:	c8 01       	movw	r24, r16
     10a:	b7 01       	movw	r22, r14
     10c:	90 58       	subi	r25, 0x80	; 128
     10e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     112:	21 95       	neg	r18
     114:	e1 e0       	ldi	r30, 0x01	; 1
     116:	12 16       	cp	r1, r18
     118:	08 f0       	brcs	.+2      	; 0x11c <__fixsfdi+0x32>
     11a:	e0 e0       	ldi	r30, 0x00	; 0
     11c:	31 95       	neg	r19
     11e:	f1 e0       	ldi	r31, 0x01	; 1
     120:	13 16       	cp	r1, r19
     122:	08 f0       	brcs	.+2      	; 0x126 <__fixsfdi+0x3c>
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	e3 2e       	mov	r14, r19
     128:	ee 1a       	sub	r14, r30
     12a:	e1 e0       	ldi	r30, 0x01	; 1
     12c:	3e 15       	cp	r19, r14
     12e:	08 f0       	brcs	.+2      	; 0x132 <__fixsfdi+0x48>
     130:	e0 e0       	ldi	r30, 0x00	; 0
     132:	fe 2b       	or	r31, r30
     134:	41 95       	neg	r20
     136:	a1 e0       	ldi	r26, 0x01	; 1
     138:	14 16       	cp	r1, r20
     13a:	08 f0       	brcs	.+2      	; 0x13e <__fixsfdi+0x54>
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	f4 2e       	mov	r15, r20
     140:	ff 1a       	sub	r15, r31
     142:	e1 e0       	ldi	r30, 0x01	; 1
     144:	4f 15       	cp	r20, r15
     146:	08 f0       	brcs	.+2      	; 0x14a <__fixsfdi+0x60>
     148:	e0 e0       	ldi	r30, 0x00	; 0
     14a:	ae 2b       	or	r26, r30
     14c:	51 95       	neg	r21
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	15 16       	cp	r1, r21
     152:	08 f0       	brcs	.+2      	; 0x156 <__fixsfdi+0x6c>
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	05 2f       	mov	r16, r21
     158:	0a 1b       	sub	r16, r26
     15a:	e1 e0       	ldi	r30, 0x01	; 1
     15c:	50 17       	cp	r21, r16
     15e:	08 f0       	brcs	.+2      	; 0x162 <__fixsfdi+0x78>
     160:	e0 e0       	ldi	r30, 0x00	; 0
     162:	fe 2b       	or	r31, r30
     164:	61 95       	neg	r22
     166:	a1 e0       	ldi	r26, 0x01	; 1
     168:	16 16       	cp	r1, r22
     16a:	08 f0       	brcs	.+2      	; 0x16e <__fixsfdi+0x84>
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	16 2f       	mov	r17, r22
     170:	1f 1b       	sub	r17, r31
     172:	e1 e0       	ldi	r30, 0x01	; 1
     174:	61 17       	cp	r22, r17
     176:	08 f0       	brcs	.+2      	; 0x17a <__fixsfdi+0x90>
     178:	e0 e0       	ldi	r30, 0x00	; 0
     17a:	ae 2b       	or	r26, r30
     17c:	71 95       	neg	r23
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	17 16       	cp	r1, r23
     182:	08 f0       	brcs	.+2      	; 0x186 <__fixsfdi+0x9c>
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	b7 2f       	mov	r27, r23
     188:	ba 1b       	sub	r27, r26
     18a:	e1 e0       	ldi	r30, 0x01	; 1
     18c:	7b 17       	cp	r23, r27
     18e:	08 f0       	brcs	.+2      	; 0x192 <__fixsfdi+0xa8>
     190:	e0 e0       	ldi	r30, 0x00	; 0
     192:	fe 2b       	or	r31, r30
     194:	81 95       	neg	r24
     196:	a1 e0       	ldi	r26, 0x01	; 1
     198:	18 16       	cp	r1, r24
     19a:	08 f0       	brcs	.+2      	; 0x19e <__fixsfdi+0xb4>
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	38 2f       	mov	r19, r24
     1a0:	3f 1b       	sub	r19, r31
     1a2:	f3 2f       	mov	r31, r19
     1a4:	e1 e0       	ldi	r30, 0x01	; 1
     1a6:	83 17       	cp	r24, r19
     1a8:	08 f0       	brcs	.+2      	; 0x1ac <__fixsfdi+0xc2>
     1aa:	e0 e0       	ldi	r30, 0x00	; 0
     1ac:	ae 2b       	or	r26, r30
     1ae:	91 95       	neg	r25
     1b0:	3e 2d       	mov	r19, r14
     1b2:	4f 2d       	mov	r20, r15
     1b4:	50 2f       	mov	r21, r16
     1b6:	61 2f       	mov	r22, r17
     1b8:	7b 2f       	mov	r23, r27
     1ba:	8f 2f       	mov	r24, r31
     1bc:	9a 1b       	sub	r25, r26
     1be:	04 c0       	rjmp	.+8      	; 0x1c8 <__fixsfdi+0xde>
     1c0:	c8 01       	movw	r24, r16
     1c2:	b7 01       	movw	r22, r14
     1c4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	ff 90       	pop	r15
     1ce:	ef 90       	pop	r14
     1d0:	08 95       	ret

000001d2 <__fixunssfdi>:
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	ef ee       	ldi	r30, 0xEF	; 239
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <__prologue_saves__>
     1de:	7b 01       	movw	r14, r22
     1e0:	8c 01       	movw	r16, r24
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 e8       	ldi	r20, 0x80	; 128
     1e8:	5f e3       	ldi	r21, 0x3F	; 63
     1ea:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     1ee:	88 23       	and	r24, r24
     1f0:	4c f4       	brge	.+18     	; 0x204 <__fixunssfdi+0x32>
     1f2:	aa 24       	eor	r10, r10
     1f4:	bb 24       	eor	r11, r11
     1f6:	cc 24       	eor	r12, r12
     1f8:	dd 24       	eor	r13, r13
     1fa:	ee 24       	eor	r14, r14
     1fc:	ff 24       	eor	r15, r15
     1fe:	00 e0       	ldi	r16, 0x00	; 0
     200:	10 e0       	ldi	r17, 0x00	; 0
     202:	86 c0       	rjmp	.+268    	; 0x310 <__fixunssfdi+0x13e>
     204:	c8 01       	movw	r24, r16
     206:	b7 01       	movw	r22, r14
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	40 e8       	ldi	r20, 0x80	; 128
     20e:	5f e4       	ldi	r21, 0x4F	; 79
     210:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     214:	88 23       	and	r24, r24
     216:	54 f4       	brge	.+20     	; 0x22c <__fixunssfdi+0x5a>
     218:	c8 01       	movw	r24, r16
     21a:	b7 01       	movw	r22, r14
     21c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     220:	5b 01       	movw	r10, r22
     222:	6c 01       	movw	r12, r24
     224:	ee 24       	eor	r14, r14
     226:	ff 24       	eor	r15, r15
     228:	87 01       	movw	r16, r14
     22a:	72 c0       	rjmp	.+228    	; 0x310 <__fixunssfdi+0x13e>
     22c:	c8 01       	movw	r24, r16
     22e:	b7 01       	movw	r22, r14
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	40 e8       	ldi	r20, 0x80	; 128
     236:	5f e5       	ldi	r21, 0x5F	; 95
     238:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     23c:	87 fd       	sbrc	r24, 7
     23e:	0f c0       	rjmp	.+30     	; 0x25e <__fixunssfdi+0x8c>
     240:	aa 24       	eor	r10, r10
     242:	aa 94       	dec	r10
     244:	bb 24       	eor	r11, r11
     246:	ba 94       	dec	r11
     248:	cc 24       	eor	r12, r12
     24a:	ca 94       	dec	r12
     24c:	dd 24       	eor	r13, r13
     24e:	da 94       	dec	r13
     250:	ee 24       	eor	r14, r14
     252:	ea 94       	dec	r14
     254:	ff 24       	eor	r15, r15
     256:	fa 94       	dec	r15
     258:	0f ef       	ldi	r16, 0xFF	; 255
     25a:	1f ef       	ldi	r17, 0xFF	; 255
     25c:	59 c0       	rjmp	.+178    	; 0x310 <__fixunssfdi+0x13e>
     25e:	c8 01       	movw	r24, r16
     260:	b7 01       	movw	r22, r14
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e8       	ldi	r20, 0x80	; 128
     268:	5f e2       	ldi	r21, 0x2F	; 47
     26a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     26e:	7b 01       	movw	r14, r22
     270:	8c 01       	movw	r16, r24
     272:	22 24       	eor	r2, r2
     274:	33 24       	eor	r3, r3
     276:	21 01       	movw	r4, r2
     278:	90 e1       	ldi	r25, 0x10	; 16
     27a:	a9 2e       	mov	r10, r25
     27c:	b1 2c       	mov	r11, r1
     27e:	c1 2c       	mov	r12, r1
     280:	d1 2c       	mov	r13, r1
     282:	c0 e0       	ldi	r28, 0x00	; 0
     284:	d0 e0       	ldi	r29, 0x00	; 0
     286:	61 e0       	ldi	r22, 0x01	; 1
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0a 2c       	mov	r0, r10
     290:	04 c0       	rjmp	.+8      	; 0x29a <__fixunssfdi+0xc8>
     292:	66 0f       	add	r22, r22
     294:	77 1f       	adc	r23, r23
     296:	88 1f       	adc	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	0a 94       	dec	r0
     29c:	d2 f7       	brpl	.-12     	; 0x292 <__fixunssfdi+0xc0>
     29e:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
     2a2:	3b 01       	movw	r6, r22
     2a4:	4c 01       	movw	r8, r24
     2a6:	c8 01       	movw	r24, r16
     2a8:	b7 01       	movw	r22, r14
     2aa:	a4 01       	movw	r20, r8
     2ac:	93 01       	movw	r18, r6
     2ae:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
     2b2:	88 23       	and	r24, r24
     2b4:	64 f0       	brlt	.+24     	; 0x2ce <__fixunssfdi+0xfc>
     2b6:	2a 28       	or	r2, r10
     2b8:	3b 28       	or	r3, r11
     2ba:	4c 28       	or	r4, r12
     2bc:	5d 28       	or	r5, r13
     2be:	c8 01       	movw	r24, r16
     2c0:	b7 01       	movw	r22, r14
     2c2:	a4 01       	movw	r20, r8
     2c4:	93 01       	movw	r18, r6
     2c6:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
     2ca:	7b 01       	movw	r14, r22
     2cc:	8c 01       	movw	r16, r24
     2ce:	d6 94       	lsr	r13
     2d0:	c7 94       	ror	r12
     2d2:	b7 94       	ror	r11
     2d4:	a7 94       	ror	r10
     2d6:	21 96       	adiw	r28, 0x01	; 1
     2d8:	c5 30       	cpi	r28, 0x05	; 5
     2da:	d1 05       	cpc	r29, r1
     2dc:	a1 f6       	brne	.-88     	; 0x286 <__fixunssfdi+0xb4>
     2de:	c8 01       	movw	r24, r16
     2e0:	b7 01       	movw	r22, r14
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	5f e4       	ldi	r21, 0x4F	; 79
     2ea:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     2ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     2f2:	5b 01       	movw	r10, r22
     2f4:	6c 01       	movw	r12, r24
     2f6:	9b 01       	movw	r18, r22
     2f8:	a6 01       	movw	r20, r12
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	02 2d       	mov	r16, r2
     304:	0e 94 9c 06 	call	0xd38	; 0xd38 <__ashldi3>
     308:	59 01       	movw	r10, r18
     30a:	6a 01       	movw	r12, r20
     30c:	7b 01       	movw	r14, r22
     30e:	8c 01       	movw	r16, r24
     310:	95 01       	movw	r18, r10
     312:	a6 01       	movw	r20, r12
     314:	b7 01       	movw	r22, r14
     316:	c8 01       	movw	r24, r16
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	e2 e1       	ldi	r30, 0x12	; 18
     31e:	0c 94 b4 1d 	jmp	0x3b68	; 0x3b68 <__epilogue_restores__>

00000322 <_fpadd_parts>:
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	e7 e9       	ldi	r30, 0x97	; 151
     328:	f1 e0       	ldi	r31, 0x01	; 1
     32a:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <__prologue_saves__>
     32e:	dc 01       	movw	r26, r24
     330:	2b 01       	movw	r4, r22
     332:	fa 01       	movw	r30, r20
     334:	9c 91       	ld	r25, X
     336:	92 30       	cpi	r25, 0x02	; 2
     338:	08 f4       	brcc	.+2      	; 0x33c <_fpadd_parts+0x1a>
     33a:	39 c1       	rjmp	.+626    	; 0x5ae <_fpadd_parts+0x28c>
     33c:	eb 01       	movw	r28, r22
     33e:	88 81       	ld	r24, Y
     340:	82 30       	cpi	r24, 0x02	; 2
     342:	08 f4       	brcc	.+2      	; 0x346 <_fpadd_parts+0x24>
     344:	33 c1       	rjmp	.+614    	; 0x5ac <_fpadd_parts+0x28a>
     346:	94 30       	cpi	r25, 0x04	; 4
     348:	69 f4       	brne	.+26     	; 0x364 <_fpadd_parts+0x42>
     34a:	84 30       	cpi	r24, 0x04	; 4
     34c:	09 f0       	breq	.+2      	; 0x350 <_fpadd_parts+0x2e>
     34e:	2f c1       	rjmp	.+606    	; 0x5ae <_fpadd_parts+0x28c>
     350:	11 96       	adiw	r26, 0x01	; 1
     352:	9c 91       	ld	r25, X
     354:	11 97       	sbiw	r26, 0x01	; 1
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	98 17       	cp	r25, r24
     35a:	09 f4       	brne	.+2      	; 0x35e <_fpadd_parts+0x3c>
     35c:	28 c1       	rjmp	.+592    	; 0x5ae <_fpadd_parts+0x28c>
     35e:	a0 e6       	ldi	r26, 0x60	; 96
     360:	b0 e0       	ldi	r27, 0x00	; 0
     362:	25 c1       	rjmp	.+586    	; 0x5ae <_fpadd_parts+0x28c>
     364:	84 30       	cpi	r24, 0x04	; 4
     366:	09 f4       	brne	.+2      	; 0x36a <_fpadd_parts+0x48>
     368:	21 c1       	rjmp	.+578    	; 0x5ac <_fpadd_parts+0x28a>
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	a9 f4       	brne	.+42     	; 0x398 <_fpadd_parts+0x76>
     36e:	92 30       	cpi	r25, 0x02	; 2
     370:	09 f0       	breq	.+2      	; 0x374 <_fpadd_parts+0x52>
     372:	1d c1       	rjmp	.+570    	; 0x5ae <_fpadd_parts+0x28c>
     374:	9a 01       	movw	r18, r20
     376:	ad 01       	movw	r20, r26
     378:	88 e0       	ldi	r24, 0x08	; 8
     37a:	ea 01       	movw	r28, r20
     37c:	09 90       	ld	r0, Y+
     37e:	ae 01       	movw	r20, r28
     380:	e9 01       	movw	r28, r18
     382:	09 92       	st	Y+, r0
     384:	9e 01       	movw	r18, r28
     386:	81 50       	subi	r24, 0x01	; 1
     388:	c1 f7       	brne	.-16     	; 0x37a <_fpadd_parts+0x58>
     38a:	e2 01       	movw	r28, r4
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	11 96       	adiw	r26, 0x01	; 1
     390:	9c 91       	ld	r25, X
     392:	89 23       	and	r24, r25
     394:	81 83       	std	Z+1, r24	; 0x01
     396:	08 c1       	rjmp	.+528    	; 0x5a8 <_fpadd_parts+0x286>
     398:	92 30       	cpi	r25, 0x02	; 2
     39a:	09 f4       	brne	.+2      	; 0x39e <_fpadd_parts+0x7c>
     39c:	07 c1       	rjmp	.+526    	; 0x5ac <_fpadd_parts+0x28a>
     39e:	12 96       	adiw	r26, 0x02	; 2
     3a0:	2d 90       	ld	r2, X+
     3a2:	3c 90       	ld	r3, X
     3a4:	13 97       	sbiw	r26, 0x03	; 3
     3a6:	eb 01       	movw	r28, r22
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	9b 81       	ldd	r25, Y+3	; 0x03
     3ac:	14 96       	adiw	r26, 0x04	; 4
     3ae:	ad 90       	ld	r10, X+
     3b0:	bd 90       	ld	r11, X+
     3b2:	cd 90       	ld	r12, X+
     3b4:	dc 90       	ld	r13, X
     3b6:	17 97       	sbiw	r26, 0x07	; 7
     3b8:	ec 80       	ldd	r14, Y+4	; 0x04
     3ba:	fd 80       	ldd	r15, Y+5	; 0x05
     3bc:	0e 81       	ldd	r16, Y+6	; 0x06
     3be:	1f 81       	ldd	r17, Y+7	; 0x07
     3c0:	91 01       	movw	r18, r2
     3c2:	28 1b       	sub	r18, r24
     3c4:	39 0b       	sbc	r19, r25
     3c6:	b9 01       	movw	r22, r18
     3c8:	37 ff       	sbrs	r19, 7
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <_fpadd_parts+0xb2>
     3cc:	66 27       	eor	r22, r22
     3ce:	77 27       	eor	r23, r23
     3d0:	62 1b       	sub	r22, r18
     3d2:	73 0b       	sbc	r23, r19
     3d4:	60 32       	cpi	r22, 0x20	; 32
     3d6:	71 05       	cpc	r23, r1
     3d8:	0c f0       	brlt	.+2      	; 0x3dc <_fpadd_parts+0xba>
     3da:	61 c0       	rjmp	.+194    	; 0x49e <_fpadd_parts+0x17c>
     3dc:	12 16       	cp	r1, r18
     3de:	13 06       	cpc	r1, r19
     3e0:	6c f5       	brge	.+90     	; 0x43c <_fpadd_parts+0x11a>
     3e2:	37 01       	movw	r6, r14
     3e4:	48 01       	movw	r8, r16
     3e6:	06 2e       	mov	r0, r22
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <_fpadd_parts+0xd0>
     3ea:	96 94       	lsr	r9
     3ec:	87 94       	ror	r8
     3ee:	77 94       	ror	r7
     3f0:	67 94       	ror	r6
     3f2:	0a 94       	dec	r0
     3f4:	d2 f7       	brpl	.-12     	; 0x3ea <_fpadd_parts+0xc8>
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <_fpadd_parts+0xe6>
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	44 1f       	adc	r20, r20
     406:	55 1f       	adc	r21, r21
     408:	6a 95       	dec	r22
     40a:	d2 f7       	brpl	.-12     	; 0x400 <_fpadd_parts+0xde>
     40c:	21 50       	subi	r18, 0x01	; 1
     40e:	30 40       	sbci	r19, 0x00	; 0
     410:	40 40       	sbci	r20, 0x00	; 0
     412:	50 40       	sbci	r21, 0x00	; 0
     414:	2e 21       	and	r18, r14
     416:	3f 21       	and	r19, r15
     418:	40 23       	and	r20, r16
     41a:	51 23       	and	r21, r17
     41c:	21 15       	cp	r18, r1
     41e:	31 05       	cpc	r19, r1
     420:	41 05       	cpc	r20, r1
     422:	51 05       	cpc	r21, r1
     424:	21 f0       	breq	.+8      	; 0x42e <_fpadd_parts+0x10c>
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	79 01       	movw	r14, r18
     430:	8a 01       	movw	r16, r20
     432:	e6 28       	or	r14, r6
     434:	f7 28       	or	r15, r7
     436:	08 29       	or	r16, r8
     438:	19 29       	or	r17, r9
     43a:	3c c0       	rjmp	.+120    	; 0x4b4 <_fpadd_parts+0x192>
     43c:	23 2b       	or	r18, r19
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <_fpadd_parts+0x192>
     440:	26 0e       	add	r2, r22
     442:	37 1e       	adc	r3, r23
     444:	35 01       	movw	r6, r10
     446:	46 01       	movw	r8, r12
     448:	06 2e       	mov	r0, r22
     44a:	04 c0       	rjmp	.+8      	; 0x454 <_fpadd_parts+0x132>
     44c:	96 94       	lsr	r9
     44e:	87 94       	ror	r8
     450:	77 94       	ror	r7
     452:	67 94       	ror	r6
     454:	0a 94       	dec	r0
     456:	d2 f7       	brpl	.-12     	; 0x44c <_fpadd_parts+0x12a>
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	04 c0       	rjmp	.+8      	; 0x46a <_fpadd_parts+0x148>
     462:	22 0f       	add	r18, r18
     464:	33 1f       	adc	r19, r19
     466:	44 1f       	adc	r20, r20
     468:	55 1f       	adc	r21, r21
     46a:	6a 95       	dec	r22
     46c:	d2 f7       	brpl	.-12     	; 0x462 <_fpadd_parts+0x140>
     46e:	21 50       	subi	r18, 0x01	; 1
     470:	30 40       	sbci	r19, 0x00	; 0
     472:	40 40       	sbci	r20, 0x00	; 0
     474:	50 40       	sbci	r21, 0x00	; 0
     476:	2a 21       	and	r18, r10
     478:	3b 21       	and	r19, r11
     47a:	4c 21       	and	r20, r12
     47c:	5d 21       	and	r21, r13
     47e:	21 15       	cp	r18, r1
     480:	31 05       	cpc	r19, r1
     482:	41 05       	cpc	r20, r1
     484:	51 05       	cpc	r21, r1
     486:	21 f0       	breq	.+8      	; 0x490 <_fpadd_parts+0x16e>
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	59 01       	movw	r10, r18
     492:	6a 01       	movw	r12, r20
     494:	a6 28       	or	r10, r6
     496:	b7 28       	or	r11, r7
     498:	c8 28       	or	r12, r8
     49a:	d9 28       	or	r13, r9
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <_fpadd_parts+0x192>
     49e:	82 15       	cp	r24, r2
     4a0:	93 05       	cpc	r25, r3
     4a2:	2c f0       	brlt	.+10     	; 0x4ae <_fpadd_parts+0x18c>
     4a4:	1c 01       	movw	r2, r24
     4a6:	aa 24       	eor	r10, r10
     4a8:	bb 24       	eor	r11, r11
     4aa:	65 01       	movw	r12, r10
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <_fpadd_parts+0x192>
     4ae:	ee 24       	eor	r14, r14
     4b0:	ff 24       	eor	r15, r15
     4b2:	87 01       	movw	r16, r14
     4b4:	11 96       	adiw	r26, 0x01	; 1
     4b6:	9c 91       	ld	r25, X
     4b8:	d2 01       	movw	r26, r4
     4ba:	11 96       	adiw	r26, 0x01	; 1
     4bc:	8c 91       	ld	r24, X
     4be:	98 17       	cp	r25, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <_fpadd_parts+0x1a2>
     4c2:	45 c0       	rjmp	.+138    	; 0x54e <_fpadd_parts+0x22c>
     4c4:	99 23       	and	r25, r25
     4c6:	39 f0       	breq	.+14     	; 0x4d6 <_fpadd_parts+0x1b4>
     4c8:	a8 01       	movw	r20, r16
     4ca:	97 01       	movw	r18, r14
     4cc:	2a 19       	sub	r18, r10
     4ce:	3b 09       	sbc	r19, r11
     4d0:	4c 09       	sbc	r20, r12
     4d2:	5d 09       	sbc	r21, r13
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <_fpadd_parts+0x1c0>
     4d6:	a6 01       	movw	r20, r12
     4d8:	95 01       	movw	r18, r10
     4da:	2e 19       	sub	r18, r14
     4dc:	3f 09       	sbc	r19, r15
     4de:	40 0b       	sbc	r20, r16
     4e0:	51 0b       	sbc	r21, r17
     4e2:	57 fd       	sbrc	r21, 7
     4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <_fpadd_parts+0x1d4>
     4e6:	11 82       	std	Z+1, r1	; 0x01
     4e8:	33 82       	std	Z+3, r3	; 0x03
     4ea:	22 82       	std	Z+2, r2	; 0x02
     4ec:	24 83       	std	Z+4, r18	; 0x04
     4ee:	35 83       	std	Z+5, r19	; 0x05
     4f0:	46 83       	std	Z+6, r20	; 0x06
     4f2:	57 83       	std	Z+7, r21	; 0x07
     4f4:	1d c0       	rjmp	.+58     	; 0x530 <_fpadd_parts+0x20e>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	81 83       	std	Z+1, r24	; 0x01
     4fa:	33 82       	std	Z+3, r3	; 0x03
     4fc:	22 82       	std	Z+2, r2	; 0x02
     4fe:	88 27       	eor	r24, r24
     500:	99 27       	eor	r25, r25
     502:	dc 01       	movw	r26, r24
     504:	82 1b       	sub	r24, r18
     506:	93 0b       	sbc	r25, r19
     508:	a4 0b       	sbc	r26, r20
     50a:	b5 0b       	sbc	r27, r21
     50c:	84 83       	std	Z+4, r24	; 0x04
     50e:	95 83       	std	Z+5, r25	; 0x05
     510:	a6 83       	std	Z+6, r26	; 0x06
     512:	b7 83       	std	Z+7, r27	; 0x07
     514:	0d c0       	rjmp	.+26     	; 0x530 <_fpadd_parts+0x20e>
     516:	22 0f       	add	r18, r18
     518:	33 1f       	adc	r19, r19
     51a:	44 1f       	adc	r20, r20
     51c:	55 1f       	adc	r21, r21
     51e:	24 83       	std	Z+4, r18	; 0x04
     520:	35 83       	std	Z+5, r19	; 0x05
     522:	46 83       	std	Z+6, r20	; 0x06
     524:	57 83       	std	Z+7, r21	; 0x07
     526:	82 81       	ldd	r24, Z+2	; 0x02
     528:	93 81       	ldd	r25, Z+3	; 0x03
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	93 83       	std	Z+3, r25	; 0x03
     52e:	82 83       	std	Z+2, r24	; 0x02
     530:	24 81       	ldd	r18, Z+4	; 0x04
     532:	35 81       	ldd	r19, Z+5	; 0x05
     534:	46 81       	ldd	r20, Z+6	; 0x06
     536:	57 81       	ldd	r21, Z+7	; 0x07
     538:	da 01       	movw	r26, r20
     53a:	c9 01       	movw	r24, r18
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	a1 09       	sbc	r26, r1
     540:	b1 09       	sbc	r27, r1
     542:	8f 5f       	subi	r24, 0xFF	; 255
     544:	9f 4f       	sbci	r25, 0xFF	; 255
     546:	af 4f       	sbci	r26, 0xFF	; 255
     548:	bf 43       	sbci	r27, 0x3F	; 63
     54a:	28 f3       	brcs	.-54     	; 0x516 <_fpadd_parts+0x1f4>
     54c:	0b c0       	rjmp	.+22     	; 0x564 <_fpadd_parts+0x242>
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	33 82       	std	Z+3, r3	; 0x03
     552:	22 82       	std	Z+2, r2	; 0x02
     554:	ea 0c       	add	r14, r10
     556:	fb 1c       	adc	r15, r11
     558:	0c 1d       	adc	r16, r12
     55a:	1d 1d       	adc	r17, r13
     55c:	e4 82       	std	Z+4, r14	; 0x04
     55e:	f5 82       	std	Z+5, r15	; 0x05
     560:	06 83       	std	Z+6, r16	; 0x06
     562:	17 83       	std	Z+7, r17	; 0x07
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	80 83       	st	Z, r24
     568:	24 81       	ldd	r18, Z+4	; 0x04
     56a:	35 81       	ldd	r19, Z+5	; 0x05
     56c:	46 81       	ldd	r20, Z+6	; 0x06
     56e:	57 81       	ldd	r21, Z+7	; 0x07
     570:	57 ff       	sbrs	r21, 7
     572:	1a c0       	rjmp	.+52     	; 0x5a8 <_fpadd_parts+0x286>
     574:	c9 01       	movw	r24, r18
     576:	aa 27       	eor	r26, r26
     578:	97 fd       	sbrc	r25, 7
     57a:	a0 95       	com	r26
     57c:	ba 2f       	mov	r27, r26
     57e:	81 70       	andi	r24, 0x01	; 1
     580:	90 70       	andi	r25, 0x00	; 0
     582:	a0 70       	andi	r26, 0x00	; 0
     584:	b0 70       	andi	r27, 0x00	; 0
     586:	56 95       	lsr	r21
     588:	47 95       	ror	r20
     58a:	37 95       	ror	r19
     58c:	27 95       	ror	r18
     58e:	82 2b       	or	r24, r18
     590:	93 2b       	or	r25, r19
     592:	a4 2b       	or	r26, r20
     594:	b5 2b       	or	r27, r21
     596:	84 83       	std	Z+4, r24	; 0x04
     598:	95 83       	std	Z+5, r25	; 0x05
     59a:	a6 83       	std	Z+6, r26	; 0x06
     59c:	b7 83       	std	Z+7, r27	; 0x07
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	93 81       	ldd	r25, Z+3	; 0x03
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	93 83       	std	Z+3, r25	; 0x03
     5a6:	82 83       	std	Z+2, r24	; 0x02
     5a8:	df 01       	movw	r26, r30
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <_fpadd_parts+0x28c>
     5ac:	d2 01       	movw	r26, r4
     5ae:	cd 01       	movw	r24, r26
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	e2 e1       	ldi	r30, 0x12	; 18
     5b6:	0c 94 b4 1d 	jmp	0x3b68	; 0x3b68 <__epilogue_restores__>

000005ba <__subsf3>:
     5ba:	a0 e2       	ldi	r26, 0x20	; 32
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	e3 ee       	ldi	r30, 0xE3	; 227
     5c0:	f2 e0       	ldi	r31, 0x02	; 2
     5c2:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <__prologue_saves__+0x18>
     5c6:	69 83       	std	Y+1, r22	; 0x01
     5c8:	7a 83       	std	Y+2, r23	; 0x02
     5ca:	8b 83       	std	Y+3, r24	; 0x03
     5cc:	9c 83       	std	Y+4, r25	; 0x04
     5ce:	2d 83       	std	Y+5, r18	; 0x05
     5d0:	3e 83       	std	Y+6, r19	; 0x06
     5d2:	4f 83       	std	Y+7, r20	; 0x07
     5d4:	58 87       	std	Y+8, r21	; 0x08
     5d6:	e9 e0       	ldi	r30, 0x09	; 9
     5d8:	ee 2e       	mov	r14, r30
     5da:	f1 2c       	mov	r15, r1
     5dc:	ec 0e       	add	r14, r28
     5de:	fd 1e       	adc	r15, r29
     5e0:	ce 01       	movw	r24, r28
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	b7 01       	movw	r22, r14
     5e6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5ea:	8e 01       	movw	r16, r28
     5ec:	0f 5e       	subi	r16, 0xEF	; 239
     5ee:	1f 4f       	sbci	r17, 0xFF	; 255
     5f0:	ce 01       	movw	r24, r28
     5f2:	05 96       	adiw	r24, 0x05	; 5
     5f4:	b8 01       	movw	r22, r16
     5f6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5fa:	8a 89       	ldd	r24, Y+18	; 0x12
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	89 27       	eor	r24, r25
     600:	8a 8b       	std	Y+18, r24	; 0x12
     602:	c7 01       	movw	r24, r14
     604:	b8 01       	movw	r22, r16
     606:	ae 01       	movw	r20, r28
     608:	47 5e       	subi	r20, 0xE7	; 231
     60a:	5f 4f       	sbci	r21, 0xFF	; 255
     60c:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     610:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     614:	a0 96       	adiw	r28, 0x20	; 32
     616:	e6 e0       	ldi	r30, 0x06	; 6
     618:	0c 94 c0 1d 	jmp	0x3b80	; 0x3b80 <__epilogue_restores__+0x18>

0000061c <__addsf3>:
     61c:	a0 e2       	ldi	r26, 0x20	; 32
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	e4 e1       	ldi	r30, 0x14	; 20
     622:	f3 e0       	ldi	r31, 0x03	; 3
     624:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <__prologue_saves__+0x18>
     628:	69 83       	std	Y+1, r22	; 0x01
     62a:	7a 83       	std	Y+2, r23	; 0x02
     62c:	8b 83       	std	Y+3, r24	; 0x03
     62e:	9c 83       	std	Y+4, r25	; 0x04
     630:	2d 83       	std	Y+5, r18	; 0x05
     632:	3e 83       	std	Y+6, r19	; 0x06
     634:	4f 83       	std	Y+7, r20	; 0x07
     636:	58 87       	std	Y+8, r21	; 0x08
     638:	f9 e0       	ldi	r31, 0x09	; 9
     63a:	ef 2e       	mov	r14, r31
     63c:	f1 2c       	mov	r15, r1
     63e:	ec 0e       	add	r14, r28
     640:	fd 1e       	adc	r15, r29
     642:	ce 01       	movw	r24, r28
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	b7 01       	movw	r22, r14
     648:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     64c:	8e 01       	movw	r16, r28
     64e:	0f 5e       	subi	r16, 0xEF	; 239
     650:	1f 4f       	sbci	r17, 0xFF	; 255
     652:	ce 01       	movw	r24, r28
     654:	05 96       	adiw	r24, 0x05	; 5
     656:	b8 01       	movw	r22, r16
     658:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     65c:	c7 01       	movw	r24, r14
     65e:	b8 01       	movw	r22, r16
     660:	ae 01       	movw	r20, r28
     662:	47 5e       	subi	r20, 0xE7	; 231
     664:	5f 4f       	sbci	r21, 0xFF	; 255
     666:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     66a:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     66e:	a0 96       	adiw	r28, 0x20	; 32
     670:	e6 e0       	ldi	r30, 0x06	; 6
     672:	0c 94 c0 1d 	jmp	0x3b80	; 0x3b80 <__epilogue_restores__+0x18>

00000676 <__mulsf3>:
     676:	a0 e2       	ldi	r26, 0x20	; 32
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e1 e4       	ldi	r30, 0x41	; 65
     67c:	f3 e0       	ldi	r31, 0x03	; 3
     67e:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <__prologue_saves__>
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	7a 83       	std	Y+2, r23	; 0x02
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	2d 83       	std	Y+5, r18	; 0x05
     68c:	3e 83       	std	Y+6, r19	; 0x06
     68e:	4f 83       	std	Y+7, r20	; 0x07
     690:	58 87       	std	Y+8, r21	; 0x08
     692:	ce 01       	movw	r24, r28
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	be 01       	movw	r22, r28
     698:	67 5f       	subi	r22, 0xF7	; 247
     69a:	7f 4f       	sbci	r23, 0xFF	; 255
     69c:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6a0:	ce 01       	movw	r24, r28
     6a2:	05 96       	adiw	r24, 0x05	; 5
     6a4:	be 01       	movw	r22, r28
     6a6:	6f 5e       	subi	r22, 0xEF	; 239
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255
     6aa:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6ae:	99 85       	ldd	r25, Y+9	; 0x09
     6b0:	92 30       	cpi	r25, 0x02	; 2
     6b2:	88 f0       	brcs	.+34     	; 0x6d6 <__mulsf3+0x60>
     6b4:	89 89       	ldd	r24, Y+17	; 0x11
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	c8 f0       	brcs	.+50     	; 0x6ec <__mulsf3+0x76>
     6ba:	94 30       	cpi	r25, 0x04	; 4
     6bc:	19 f4       	brne	.+6      	; 0x6c4 <__mulsf3+0x4e>
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	51 f4       	brne	.+20     	; 0x6d6 <__mulsf3+0x60>
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <__mulsf3+0x56>
     6c4:	84 30       	cpi	r24, 0x04	; 4
     6c6:	29 f4       	brne	.+10     	; 0x6d2 <__mulsf3+0x5c>
     6c8:	92 30       	cpi	r25, 0x02	; 2
     6ca:	81 f4       	brne	.+32     	; 0x6ec <__mulsf3+0x76>
     6cc:	80 e6       	ldi	r24, 0x60	; 96
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	c6 c0       	rjmp	.+396    	; 0x85e <__mulsf3+0x1e8>
     6d2:	92 30       	cpi	r25, 0x02	; 2
     6d4:	49 f4       	brne	.+18     	; 0x6e8 <__mulsf3+0x72>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6da:	8a 89       	ldd	r24, Y+18	; 0x12
     6dc:	98 13       	cpse	r25, r24
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	2a 87       	std	Y+10, r18	; 0x0a
     6e2:	ce 01       	movw	r24, r28
     6e4:	09 96       	adiw	r24, 0x09	; 9
     6e6:	bb c0       	rjmp	.+374    	; 0x85e <__mulsf3+0x1e8>
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	49 f4       	brne	.+18     	; 0x6fe <__mulsf3+0x88>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f0:	8a 89       	ldd	r24, Y+18	; 0x12
     6f2:	98 13       	cpse	r25, r24
     6f4:	21 e0       	ldi	r18, 0x01	; 1
     6f6:	2a 8b       	std	Y+18, r18	; 0x12
     6f8:	ce 01       	movw	r24, r28
     6fa:	41 96       	adiw	r24, 0x11	; 17
     6fc:	b0 c0       	rjmp	.+352    	; 0x85e <__mulsf3+0x1e8>
     6fe:	2d 84       	ldd	r2, Y+13	; 0x0d
     700:	3e 84       	ldd	r3, Y+14	; 0x0e
     702:	4f 84       	ldd	r4, Y+15	; 0x0f
     704:	58 88       	ldd	r5, Y+16	; 0x10
     706:	6d 88       	ldd	r6, Y+21	; 0x15
     708:	7e 88       	ldd	r7, Y+22	; 0x16
     70a:	8f 88       	ldd	r8, Y+23	; 0x17
     70c:	98 8c       	ldd	r9, Y+24	; 0x18
     70e:	ee 24       	eor	r14, r14
     710:	ff 24       	eor	r15, r15
     712:	87 01       	movw	r16, r14
     714:	aa 24       	eor	r10, r10
     716:	bb 24       	eor	r11, r11
     718:	65 01       	movw	r12, r10
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	e0 e0       	ldi	r30, 0x00	; 0
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	c1 01       	movw	r24, r2
     728:	81 70       	andi	r24, 0x01	; 1
     72a:	90 70       	andi	r25, 0x00	; 0
     72c:	89 2b       	or	r24, r25
     72e:	e9 f0       	breq	.+58     	; 0x76a <__mulsf3+0xf4>
     730:	e6 0c       	add	r14, r6
     732:	f7 1c       	adc	r15, r7
     734:	08 1d       	adc	r16, r8
     736:	19 1d       	adc	r17, r9
     738:	9a 01       	movw	r18, r20
     73a:	ab 01       	movw	r20, r22
     73c:	2a 0d       	add	r18, r10
     73e:	3b 1d       	adc	r19, r11
     740:	4c 1d       	adc	r20, r12
     742:	5d 1d       	adc	r21, r13
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	a0 e0       	ldi	r26, 0x00	; 0
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	e6 14       	cp	r14, r6
     74e:	f7 04       	cpc	r15, r7
     750:	08 05       	cpc	r16, r8
     752:	19 05       	cpc	r17, r9
     754:	20 f4       	brcc	.+8      	; 0x75e <__mulsf3+0xe8>
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	a0 e0       	ldi	r26, 0x00	; 0
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	ba 01       	movw	r22, r20
     760:	a9 01       	movw	r20, r18
     762:	48 0f       	add	r20, r24
     764:	59 1f       	adc	r21, r25
     766:	6a 1f       	adc	r22, r26
     768:	7b 1f       	adc	r23, r27
     76a:	aa 0c       	add	r10, r10
     76c:	bb 1c       	adc	r11, r11
     76e:	cc 1c       	adc	r12, r12
     770:	dd 1c       	adc	r13, r13
     772:	97 fe       	sbrs	r9, 7
     774:	08 c0       	rjmp	.+16     	; 0x786 <__mulsf3+0x110>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	a0 e0       	ldi	r26, 0x00	; 0
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	a8 2a       	or	r10, r24
     780:	b9 2a       	or	r11, r25
     782:	ca 2a       	or	r12, r26
     784:	db 2a       	or	r13, r27
     786:	31 96       	adiw	r30, 0x01	; 1
     788:	e0 32       	cpi	r30, 0x20	; 32
     78a:	f1 05       	cpc	r31, r1
     78c:	49 f0       	breq	.+18     	; 0x7a0 <__mulsf3+0x12a>
     78e:	66 0c       	add	r6, r6
     790:	77 1c       	adc	r7, r7
     792:	88 1c       	adc	r8, r8
     794:	99 1c       	adc	r9, r9
     796:	56 94       	lsr	r5
     798:	47 94       	ror	r4
     79a:	37 94       	ror	r3
     79c:	27 94       	ror	r2
     79e:	c3 cf       	rjmp	.-122    	; 0x726 <__mulsf3+0xb0>
     7a0:	fa 85       	ldd	r31, Y+10	; 0x0a
     7a2:	ea 89       	ldd	r30, Y+18	; 0x12
     7a4:	2b 89       	ldd	r18, Y+19	; 0x13
     7a6:	3c 89       	ldd	r19, Y+20	; 0x14
     7a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ac:	28 0f       	add	r18, r24
     7ae:	39 1f       	adc	r19, r25
     7b0:	2e 5f       	subi	r18, 0xFE	; 254
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	17 c0       	rjmp	.+46     	; 0x7e4 <__mulsf3+0x16e>
     7b6:	ca 01       	movw	r24, r20
     7b8:	81 70       	andi	r24, 0x01	; 1
     7ba:	90 70       	andi	r25, 0x00	; 0
     7bc:	89 2b       	or	r24, r25
     7be:	61 f0       	breq	.+24     	; 0x7d8 <__mulsf3+0x162>
     7c0:	16 95       	lsr	r17
     7c2:	07 95       	ror	r16
     7c4:	f7 94       	ror	r15
     7c6:	e7 94       	ror	r14
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	a0 e0       	ldi	r26, 0x00	; 0
     7ce:	b0 e8       	ldi	r27, 0x80	; 128
     7d0:	e8 2a       	or	r14, r24
     7d2:	f9 2a       	or	r15, r25
     7d4:	0a 2b       	or	r16, r26
     7d6:	1b 2b       	or	r17, r27
     7d8:	76 95       	lsr	r23
     7da:	67 95       	ror	r22
     7dc:	57 95       	ror	r21
     7de:	47 95       	ror	r20
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	77 fd       	sbrc	r23, 7
     7e6:	e7 cf       	rjmp	.-50     	; 0x7b6 <__mulsf3+0x140>
     7e8:	0c c0       	rjmp	.+24     	; 0x802 <__mulsf3+0x18c>
     7ea:	44 0f       	add	r20, r20
     7ec:	55 1f       	adc	r21, r21
     7ee:	66 1f       	adc	r22, r22
     7f0:	77 1f       	adc	r23, r23
     7f2:	17 fd       	sbrc	r17, 7
     7f4:	41 60       	ori	r20, 0x01	; 1
     7f6:	ee 0c       	add	r14, r14
     7f8:	ff 1c       	adc	r15, r15
     7fa:	00 1f       	adc	r16, r16
     7fc:	11 1f       	adc	r17, r17
     7fe:	21 50       	subi	r18, 0x01	; 1
     800:	30 40       	sbci	r19, 0x00	; 0
     802:	40 30       	cpi	r20, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	59 07       	cpc	r21, r25
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	69 07       	cpc	r22, r25
     80c:	90 e4       	ldi	r25, 0x40	; 64
     80e:	79 07       	cpc	r23, r25
     810:	60 f3       	brcs	.-40     	; 0x7ea <__mulsf3+0x174>
     812:	2b 8f       	std	Y+27, r18	; 0x1b
     814:	3c 8f       	std	Y+28, r19	; 0x1c
     816:	db 01       	movw	r26, r22
     818:	ca 01       	movw	r24, r20
     81a:	8f 77       	andi	r24, 0x7F	; 127
     81c:	90 70       	andi	r25, 0x00	; 0
     81e:	a0 70       	andi	r26, 0x00	; 0
     820:	b0 70       	andi	r27, 0x00	; 0
     822:	80 34       	cpi	r24, 0x40	; 64
     824:	91 05       	cpc	r25, r1
     826:	a1 05       	cpc	r26, r1
     828:	b1 05       	cpc	r27, r1
     82a:	61 f4       	brne	.+24     	; 0x844 <__mulsf3+0x1ce>
     82c:	47 fd       	sbrc	r20, 7
     82e:	0a c0       	rjmp	.+20     	; 0x844 <__mulsf3+0x1ce>
     830:	e1 14       	cp	r14, r1
     832:	f1 04       	cpc	r15, r1
     834:	01 05       	cpc	r16, r1
     836:	11 05       	cpc	r17, r1
     838:	29 f0       	breq	.+10     	; 0x844 <__mulsf3+0x1ce>
     83a:	40 5c       	subi	r20, 0xC0	; 192
     83c:	5f 4f       	sbci	r21, 0xFF	; 255
     83e:	6f 4f       	sbci	r22, 0xFF	; 255
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	40 78       	andi	r20, 0x80	; 128
     844:	1a 8e       	std	Y+26, r1	; 0x1a
     846:	fe 17       	cp	r31, r30
     848:	11 f0       	breq	.+4      	; 0x84e <__mulsf3+0x1d8>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	8a 8f       	std	Y+26, r24	; 0x1a
     84e:	4d 8f       	std	Y+29, r20	; 0x1d
     850:	5e 8f       	std	Y+30, r21	; 0x1e
     852:	6f 8f       	std	Y+31, r22	; 0x1f
     854:	78 a3       	std	Y+32, r23	; 0x20
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	89 8f       	std	Y+25, r24	; 0x19
     85a:	ce 01       	movw	r24, r28
     85c:	49 96       	adiw	r24, 0x19	; 25
     85e:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     862:	a0 96       	adiw	r28, 0x20	; 32
     864:	e2 e1       	ldi	r30, 0x12	; 18
     866:	0c 94 b4 1d 	jmp	0x3b68	; 0x3b68 <__epilogue_restores__>

0000086a <__divsf3>:
     86a:	a8 e1       	ldi	r26, 0x18	; 24
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	eb e3       	ldi	r30, 0x3B	; 59
     870:	f4 e0       	ldi	r31, 0x04	; 4
     872:	0c 94 a0 1d 	jmp	0x3b40	; 0x3b40 <__prologue_saves__+0x10>
     876:	69 83       	std	Y+1, r22	; 0x01
     878:	7a 83       	std	Y+2, r23	; 0x02
     87a:	8b 83       	std	Y+3, r24	; 0x03
     87c:	9c 83       	std	Y+4, r25	; 0x04
     87e:	2d 83       	std	Y+5, r18	; 0x05
     880:	3e 83       	std	Y+6, r19	; 0x06
     882:	4f 83       	std	Y+7, r20	; 0x07
     884:	58 87       	std	Y+8, r21	; 0x08
     886:	b9 e0       	ldi	r27, 0x09	; 9
     888:	eb 2e       	mov	r14, r27
     88a:	f1 2c       	mov	r15, r1
     88c:	ec 0e       	add	r14, r28
     88e:	fd 1e       	adc	r15, r29
     890:	ce 01       	movw	r24, r28
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	b7 01       	movw	r22, r14
     896:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     89a:	8e 01       	movw	r16, r28
     89c:	0f 5e       	subi	r16, 0xEF	; 239
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	ce 01       	movw	r24, r28
     8a2:	05 96       	adiw	r24, 0x05	; 5
     8a4:	b8 01       	movw	r22, r16
     8a6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     8aa:	29 85       	ldd	r18, Y+9	; 0x09
     8ac:	22 30       	cpi	r18, 0x02	; 2
     8ae:	08 f4       	brcc	.+2      	; 0x8b2 <__divsf3+0x48>
     8b0:	7e c0       	rjmp	.+252    	; 0x9ae <__divsf3+0x144>
     8b2:	39 89       	ldd	r19, Y+17	; 0x11
     8b4:	32 30       	cpi	r19, 0x02	; 2
     8b6:	10 f4       	brcc	.+4      	; 0x8bc <__divsf3+0x52>
     8b8:	b8 01       	movw	r22, r16
     8ba:	7c c0       	rjmp	.+248    	; 0x9b4 <__divsf3+0x14a>
     8bc:	8a 85       	ldd	r24, Y+10	; 0x0a
     8be:	9a 89       	ldd	r25, Y+18	; 0x12
     8c0:	89 27       	eor	r24, r25
     8c2:	8a 87       	std	Y+10, r24	; 0x0a
     8c4:	24 30       	cpi	r18, 0x04	; 4
     8c6:	11 f0       	breq	.+4      	; 0x8cc <__divsf3+0x62>
     8c8:	22 30       	cpi	r18, 0x02	; 2
     8ca:	31 f4       	brne	.+12     	; 0x8d8 <__divsf3+0x6e>
     8cc:	23 17       	cp	r18, r19
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <__divsf3+0x68>
     8d0:	6e c0       	rjmp	.+220    	; 0x9ae <__divsf3+0x144>
     8d2:	60 e6       	ldi	r22, 0x60	; 96
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	6e c0       	rjmp	.+220    	; 0x9b4 <__divsf3+0x14a>
     8d8:	34 30       	cpi	r19, 0x04	; 4
     8da:	39 f4       	brne	.+14     	; 0x8ea <__divsf3+0x80>
     8dc:	1d 86       	std	Y+13, r1	; 0x0d
     8de:	1e 86       	std	Y+14, r1	; 0x0e
     8e0:	1f 86       	std	Y+15, r1	; 0x0f
     8e2:	18 8a       	std	Y+16, r1	; 0x10
     8e4:	1c 86       	std	Y+12, r1	; 0x0c
     8e6:	1b 86       	std	Y+11, r1	; 0x0b
     8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <__divsf3+0x88>
     8ea:	32 30       	cpi	r19, 0x02	; 2
     8ec:	21 f4       	brne	.+8      	; 0x8f6 <__divsf3+0x8c>
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	89 87       	std	Y+9, r24	; 0x09
     8f2:	b7 01       	movw	r22, r14
     8f4:	5f c0       	rjmp	.+190    	; 0x9b4 <__divsf3+0x14a>
     8f6:	2b 85       	ldd	r18, Y+11	; 0x0b
     8f8:	3c 85       	ldd	r19, Y+12	; 0x0c
     8fa:	8b 89       	ldd	r24, Y+19	; 0x13
     8fc:	9c 89       	ldd	r25, Y+20	; 0x14
     8fe:	28 1b       	sub	r18, r24
     900:	39 0b       	sbc	r19, r25
     902:	3c 87       	std	Y+12, r19	; 0x0c
     904:	2b 87       	std	Y+11, r18	; 0x0b
     906:	ed 84       	ldd	r14, Y+13	; 0x0d
     908:	fe 84       	ldd	r15, Y+14	; 0x0e
     90a:	0f 85       	ldd	r16, Y+15	; 0x0f
     90c:	18 89       	ldd	r17, Y+16	; 0x10
     90e:	ad 88       	ldd	r10, Y+21	; 0x15
     910:	be 88       	ldd	r11, Y+22	; 0x16
     912:	cf 88       	ldd	r12, Y+23	; 0x17
     914:	d8 8c       	ldd	r13, Y+24	; 0x18
     916:	ea 14       	cp	r14, r10
     918:	fb 04       	cpc	r15, r11
     91a:	0c 05       	cpc	r16, r12
     91c:	1d 05       	cpc	r17, r13
     91e:	40 f4       	brcc	.+16     	; 0x930 <__divsf3+0xc6>
     920:	ee 0c       	add	r14, r14
     922:	ff 1c       	adc	r15, r15
     924:	00 1f       	adc	r16, r16
     926:	11 1f       	adc	r17, r17
     928:	21 50       	subi	r18, 0x01	; 1
     92a:	30 40       	sbci	r19, 0x00	; 0
     92c:	3c 87       	std	Y+12, r19	; 0x0c
     92e:	2b 87       	std	Y+11, r18	; 0x0b
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e4       	ldi	r27, 0x40	; 64
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	ea 14       	cp	r14, r10
     946:	fb 04       	cpc	r15, r11
     948:	0c 05       	cpc	r16, r12
     94a:	1d 05       	cpc	r17, r13
     94c:	40 f0       	brcs	.+16     	; 0x95e <__divsf3+0xf4>
     94e:	28 2b       	or	r18, r24
     950:	39 2b       	or	r19, r25
     952:	4a 2b       	or	r20, r26
     954:	5b 2b       	or	r21, r27
     956:	ea 18       	sub	r14, r10
     958:	fb 08       	sbc	r15, r11
     95a:	0c 09       	sbc	r16, r12
     95c:	1d 09       	sbc	r17, r13
     95e:	b6 95       	lsr	r27
     960:	a7 95       	ror	r26
     962:	97 95       	ror	r25
     964:	87 95       	ror	r24
     966:	ee 0c       	add	r14, r14
     968:	ff 1c       	adc	r15, r15
     96a:	00 1f       	adc	r16, r16
     96c:	11 1f       	adc	r17, r17
     96e:	6f 5f       	subi	r22, 0xFF	; 255
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	6f 31       	cpi	r22, 0x1F	; 31
     974:	71 05       	cpc	r23, r1
     976:	31 f7       	brne	.-52     	; 0x944 <__divsf3+0xda>
     978:	da 01       	movw	r26, r20
     97a:	c9 01       	movw	r24, r18
     97c:	8f 77       	andi	r24, 0x7F	; 127
     97e:	90 70       	andi	r25, 0x00	; 0
     980:	a0 70       	andi	r26, 0x00	; 0
     982:	b0 70       	andi	r27, 0x00	; 0
     984:	80 34       	cpi	r24, 0x40	; 64
     986:	91 05       	cpc	r25, r1
     988:	a1 05       	cpc	r26, r1
     98a:	b1 05       	cpc	r27, r1
     98c:	61 f4       	brne	.+24     	; 0x9a6 <__divsf3+0x13c>
     98e:	27 fd       	sbrc	r18, 7
     990:	0a c0       	rjmp	.+20     	; 0x9a6 <__divsf3+0x13c>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	29 f0       	breq	.+10     	; 0x9a6 <__divsf3+0x13c>
     99c:	20 5c       	subi	r18, 0xC0	; 192
     99e:	3f 4f       	sbci	r19, 0xFF	; 255
     9a0:	4f 4f       	sbci	r20, 0xFF	; 255
     9a2:	5f 4f       	sbci	r21, 0xFF	; 255
     9a4:	20 78       	andi	r18, 0x80	; 128
     9a6:	2d 87       	std	Y+13, r18	; 0x0d
     9a8:	3e 87       	std	Y+14, r19	; 0x0e
     9aa:	4f 87       	std	Y+15, r20	; 0x0f
     9ac:	58 8b       	std	Y+16, r21	; 0x10
     9ae:	be 01       	movw	r22, r28
     9b0:	67 5f       	subi	r22, 0xF7	; 247
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	cb 01       	movw	r24, r22
     9b6:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     9ba:	68 96       	adiw	r28, 0x18	; 24
     9bc:	ea e0       	ldi	r30, 0x0A	; 10
     9be:	0c 94 bc 1d 	jmp	0x3b78	; 0x3b78 <__epilogue_restores__+0x10>

000009c2 <__gtsf2>:
     9c2:	a8 e1       	ldi	r26, 0x18	; 24
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	e7 ee       	ldi	r30, 0xE7	; 231
     9c8:	f4 e0       	ldi	r31, 0x04	; 4
     9ca:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <__prologue_saves__+0x18>
     9ce:	69 83       	std	Y+1, r22	; 0x01
     9d0:	7a 83       	std	Y+2, r23	; 0x02
     9d2:	8b 83       	std	Y+3, r24	; 0x03
     9d4:	9c 83       	std	Y+4, r25	; 0x04
     9d6:	2d 83       	std	Y+5, r18	; 0x05
     9d8:	3e 83       	std	Y+6, r19	; 0x06
     9da:	4f 83       	std	Y+7, r20	; 0x07
     9dc:	58 87       	std	Y+8, r21	; 0x08
     9de:	89 e0       	ldi	r24, 0x09	; 9
     9e0:	e8 2e       	mov	r14, r24
     9e2:	f1 2c       	mov	r15, r1
     9e4:	ec 0e       	add	r14, r28
     9e6:	fd 1e       	adc	r15, r29
     9e8:	ce 01       	movw	r24, r28
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	b7 01       	movw	r22, r14
     9ee:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     9f2:	8e 01       	movw	r16, r28
     9f4:	0f 5e       	subi	r16, 0xEF	; 239
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
     9f8:	ce 01       	movw	r24, r28
     9fa:	05 96       	adiw	r24, 0x05	; 5
     9fc:	b8 01       	movw	r22, r16
     9fe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a02:	89 85       	ldd	r24, Y+9	; 0x09
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	40 f0       	brcs	.+16     	; 0xa18 <__gtsf2+0x56>
     a08:	89 89       	ldd	r24, Y+17	; 0x11
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	28 f0       	brcs	.+10     	; 0xa18 <__gtsf2+0x56>
     a0e:	c7 01       	movw	r24, r14
     a10:	b8 01       	movw	r22, r16
     a12:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <__gtsf2+0x58>
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	68 96       	adiw	r28, 0x18	; 24
     a1c:	e6 e0       	ldi	r30, 0x06	; 6
     a1e:	0c 94 c0 1d 	jmp	0x3b80	; 0x3b80 <__epilogue_restores__+0x18>

00000a22 <__gesf2>:
     a22:	a8 e1       	ldi	r26, 0x18	; 24
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e7 e1       	ldi	r30, 0x17	; 23
     a28:	f5 e0       	ldi	r31, 0x05	; 5
     a2a:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <__prologue_saves__+0x18>
     a2e:	69 83       	std	Y+1, r22	; 0x01
     a30:	7a 83       	std	Y+2, r23	; 0x02
     a32:	8b 83       	std	Y+3, r24	; 0x03
     a34:	9c 83       	std	Y+4, r25	; 0x04
     a36:	2d 83       	std	Y+5, r18	; 0x05
     a38:	3e 83       	std	Y+6, r19	; 0x06
     a3a:	4f 83       	std	Y+7, r20	; 0x07
     a3c:	58 87       	std	Y+8, r21	; 0x08
     a3e:	89 e0       	ldi	r24, 0x09	; 9
     a40:	e8 2e       	mov	r14, r24
     a42:	f1 2c       	mov	r15, r1
     a44:	ec 0e       	add	r14, r28
     a46:	fd 1e       	adc	r15, r29
     a48:	ce 01       	movw	r24, r28
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	b7 01       	movw	r22, r14
     a4e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a52:	8e 01       	movw	r16, r28
     a54:	0f 5e       	subi	r16, 0xEF	; 239
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
     a58:	ce 01       	movw	r24, r28
     a5a:	05 96       	adiw	r24, 0x05	; 5
     a5c:	b8 01       	movw	r22, r16
     a5e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a62:	89 85       	ldd	r24, Y+9	; 0x09
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	40 f0       	brcs	.+16     	; 0xa78 <__gesf2+0x56>
     a68:	89 89       	ldd	r24, Y+17	; 0x11
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	28 f0       	brcs	.+10     	; 0xa78 <__gesf2+0x56>
     a6e:	c7 01       	movw	r24, r14
     a70:	b8 01       	movw	r22, r16
     a72:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <__gesf2+0x58>
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	68 96       	adiw	r28, 0x18	; 24
     a7c:	e6 e0       	ldi	r30, 0x06	; 6
     a7e:	0c 94 c0 1d 	jmp	0x3b80	; 0x3b80 <__epilogue_restores__+0x18>

00000a82 <__ltsf2>:
     a82:	a8 e1       	ldi	r26, 0x18	; 24
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	e7 e4       	ldi	r30, 0x47	; 71
     a88:	f5 e0       	ldi	r31, 0x05	; 5
     a8a:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <__prologue_saves__+0x18>
     a8e:	69 83       	std	Y+1, r22	; 0x01
     a90:	7a 83       	std	Y+2, r23	; 0x02
     a92:	8b 83       	std	Y+3, r24	; 0x03
     a94:	9c 83       	std	Y+4, r25	; 0x04
     a96:	2d 83       	std	Y+5, r18	; 0x05
     a98:	3e 83       	std	Y+6, r19	; 0x06
     a9a:	4f 83       	std	Y+7, r20	; 0x07
     a9c:	58 87       	std	Y+8, r21	; 0x08
     a9e:	89 e0       	ldi	r24, 0x09	; 9
     aa0:	e8 2e       	mov	r14, r24
     aa2:	f1 2c       	mov	r15, r1
     aa4:	ec 0e       	add	r14, r28
     aa6:	fd 1e       	adc	r15, r29
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	b7 01       	movw	r22, r14
     aae:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ab2:	8e 01       	movw	r16, r28
     ab4:	0f 5e       	subi	r16, 0xEF	; 239
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255
     ab8:	ce 01       	movw	r24, r28
     aba:	05 96       	adiw	r24, 0x05	; 5
     abc:	b8 01       	movw	r22, r16
     abe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ac2:	89 85       	ldd	r24, Y+9	; 0x09
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	40 f0       	brcs	.+16     	; 0xad8 <__ltsf2+0x56>
     ac8:	89 89       	ldd	r24, Y+17	; 0x11
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	28 f0       	brcs	.+10     	; 0xad8 <__ltsf2+0x56>
     ace:	c7 01       	movw	r24, r14
     ad0:	b8 01       	movw	r22, r16
     ad2:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     ad6:	01 c0       	rjmp	.+2      	; 0xada <__ltsf2+0x58>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	68 96       	adiw	r28, 0x18	; 24
     adc:	e6 e0       	ldi	r30, 0x06	; 6
     ade:	0c 94 c0 1d 	jmp	0x3b80	; 0x3b80 <__epilogue_restores__+0x18>

00000ae2 <__floatsisf>:
     ae2:	a8 e0       	ldi	r26, 0x08	; 8
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e7 e7       	ldi	r30, 0x77	; 119
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	0c 94 a1 1d 	jmp	0x3b42	; 0x3b42 <__prologue_saves__+0x12>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	da 01       	movw	r26, r20
     af8:	c9 01       	movw	r24, r18
     afa:	88 27       	eor	r24, r24
     afc:	b7 fd       	sbrc	r27, 7
     afe:	83 95       	inc	r24
     b00:	99 27       	eor	r25, r25
     b02:	aa 27       	eor	r26, r26
     b04:	bb 27       	eor	r27, r27
     b06:	b8 2e       	mov	r11, r24
     b08:	21 15       	cp	r18, r1
     b0a:	31 05       	cpc	r19, r1
     b0c:	41 05       	cpc	r20, r1
     b0e:	51 05       	cpc	r21, r1
     b10:	19 f4       	brne	.+6      	; 0xb18 <__floatsisf+0x36>
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	3a c0       	rjmp	.+116    	; 0xb8c <__floatsisf+0xaa>
     b18:	88 23       	and	r24, r24
     b1a:	a9 f0       	breq	.+42     	; 0xb46 <__floatsisf+0x64>
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	38 07       	cpc	r19, r24
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	48 07       	cpc	r20, r24
     b26:	80 e8       	ldi	r24, 0x80	; 128
     b28:	58 07       	cpc	r21, r24
     b2a:	29 f4       	brne	.+10     	; 0xb36 <__floatsisf+0x54>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	9f ec       	ldi	r25, 0xCF	; 207
     b34:	30 c0       	rjmp	.+96     	; 0xb96 <__floatsisf+0xb4>
     b36:	ee 24       	eor	r14, r14
     b38:	ff 24       	eor	r15, r15
     b3a:	87 01       	movw	r16, r14
     b3c:	e2 1a       	sub	r14, r18
     b3e:	f3 0a       	sbc	r15, r19
     b40:	04 0b       	sbc	r16, r20
     b42:	15 0b       	sbc	r17, r21
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <__floatsisf+0x68>
     b46:	79 01       	movw	r14, r18
     b48:	8a 01       	movw	r16, r20
     b4a:	8e e1       	ldi	r24, 0x1E	; 30
     b4c:	c8 2e       	mov	r12, r24
     b4e:	d1 2c       	mov	r13, r1
     b50:	dc 82       	std	Y+4, r13	; 0x04
     b52:	cb 82       	std	Y+3, r12	; 0x03
     b54:	ed 82       	std	Y+5, r14	; 0x05
     b56:	fe 82       	std	Y+6, r15	; 0x06
     b58:	0f 83       	std	Y+7, r16	; 0x07
     b5a:	18 87       	std	Y+8, r17	; 0x08
     b5c:	c8 01       	movw	r24, r16
     b5e:	b7 01       	movw	r22, r14
     b60:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	18 16       	cp	r1, r24
     b68:	19 06       	cpc	r1, r25
     b6a:	84 f4       	brge	.+32     	; 0xb8c <__floatsisf+0xaa>
     b6c:	08 2e       	mov	r0, r24
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__floatsisf+0x96>
     b70:	ee 0c       	add	r14, r14
     b72:	ff 1c       	adc	r15, r15
     b74:	00 1f       	adc	r16, r16
     b76:	11 1f       	adc	r17, r17
     b78:	0a 94       	dec	r0
     b7a:	d2 f7       	brpl	.-12     	; 0xb70 <__floatsisf+0x8e>
     b7c:	ed 82       	std	Y+5, r14	; 0x05
     b7e:	fe 82       	std	Y+6, r15	; 0x06
     b80:	0f 83       	std	Y+7, r16	; 0x07
     b82:	18 87       	std	Y+8, r17	; 0x08
     b84:	c8 1a       	sub	r12, r24
     b86:	d9 0a       	sbc	r13, r25
     b88:	dc 82       	std	Y+4, r13	; 0x04
     b8a:	cb 82       	std	Y+3, r12	; 0x03
     b8c:	ba 82       	std	Y+2, r11	; 0x02
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     b96:	28 96       	adiw	r28, 0x08	; 8
     b98:	e9 e0       	ldi	r30, 0x09	; 9
     b9a:	0c 94 bd 1d 	jmp	0x3b7a	; 0x3b7a <__epilogue_restores__+0x12>

00000b9e <__fixsfsi>:
     b9e:	ac e0       	ldi	r26, 0x0C	; 12
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e5 ed       	ldi	r30, 0xD5	; 213
     ba4:	f5 e0       	ldi	r31, 0x05	; 5
     ba6:	0c 94 a8 1d 	jmp	0x3b50	; 0x3b50 <__prologue_saves__+0x20>
     baa:	69 83       	std	Y+1, r22	; 0x01
     bac:	7a 83       	std	Y+2, r23	; 0x02
     bae:	8b 83       	std	Y+3, r24	; 0x03
     bb0:	9c 83       	std	Y+4, r25	; 0x04
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	be 01       	movw	r22, r28
     bb8:	6b 5f       	subi	r22, 0xFB	; 251
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	61 f1       	breq	.+88     	; 0xc1e <__fixsfsi+0x80>
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	50 f1       	brcs	.+84     	; 0xc1e <__fixsfsi+0x80>
     bca:	84 30       	cpi	r24, 0x04	; 4
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <__fixsfsi+0x38>
     bce:	8e 81       	ldd	r24, Y+6	; 0x06
     bd0:	88 23       	and	r24, r24
     bd2:	51 f1       	breq	.+84     	; 0xc28 <__fixsfsi+0x8a>
     bd4:	2e c0       	rjmp	.+92     	; 0xc32 <__fixsfsi+0x94>
     bd6:	2f 81       	ldd	r18, Y+7	; 0x07
     bd8:	38 85       	ldd	r19, Y+8	; 0x08
     bda:	37 fd       	sbrc	r19, 7
     bdc:	20 c0       	rjmp	.+64     	; 0xc1e <__fixsfsi+0x80>
     bde:	6e 81       	ldd	r22, Y+6	; 0x06
     be0:	2f 31       	cpi	r18, 0x1F	; 31
     be2:	31 05       	cpc	r19, r1
     be4:	1c f0       	brlt	.+6      	; 0xbec <__fixsfsi+0x4e>
     be6:	66 23       	and	r22, r22
     be8:	f9 f0       	breq	.+62     	; 0xc28 <__fixsfsi+0x8a>
     bea:	23 c0       	rjmp	.+70     	; 0xc32 <__fixsfsi+0x94>
     bec:	8e e1       	ldi	r24, 0x1E	; 30
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	82 1b       	sub	r24, r18
     bf2:	93 0b       	sbc	r25, r19
     bf4:	29 85       	ldd	r18, Y+9	; 0x09
     bf6:	3a 85       	ldd	r19, Y+10	; 0x0a
     bf8:	4b 85       	ldd	r20, Y+11	; 0x0b
     bfa:	5c 85       	ldd	r21, Y+12	; 0x0c
     bfc:	04 c0       	rjmp	.+8      	; 0xc06 <__fixsfsi+0x68>
     bfe:	56 95       	lsr	r21
     c00:	47 95       	ror	r20
     c02:	37 95       	ror	r19
     c04:	27 95       	ror	r18
     c06:	8a 95       	dec	r24
     c08:	d2 f7       	brpl	.-12     	; 0xbfe <__fixsfsi+0x60>
     c0a:	66 23       	and	r22, r22
     c0c:	b1 f0       	breq	.+44     	; 0xc3a <__fixsfsi+0x9c>
     c0e:	50 95       	com	r21
     c10:	40 95       	com	r20
     c12:	30 95       	com	r19
     c14:	21 95       	neg	r18
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	4f 4f       	sbci	r20, 0xFF	; 255
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <__fixsfsi+0x9c>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <__fixsfsi+0x9c>
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	3f ef       	ldi	r19, 0xFF	; 255
     c2c:	4f ef       	ldi	r20, 0xFF	; 255
     c2e:	5f e7       	ldi	r21, 0x7F	; 127
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__fixsfsi+0x9c>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e8       	ldi	r21, 0x80	; 128
     c3a:	b9 01       	movw	r22, r18
     c3c:	ca 01       	movw	r24, r20
     c3e:	2c 96       	adiw	r28, 0x0c	; 12
     c40:	e2 e0       	ldi	r30, 0x02	; 2
     c42:	0c 94 c4 1d 	jmp	0x3b88	; 0x3b88 <__epilogue_restores__+0x20>

00000c46 <__floatunsisf>:
     c46:	a8 e0       	ldi	r26, 0x08	; 8
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e9 e2       	ldi	r30, 0x29	; 41
     c4c:	f6 e0       	ldi	r31, 0x06	; 6
     c4e:	0c 94 a0 1d 	jmp	0x3b40	; 0x3b40 <__prologue_saves__+0x10>
     c52:	7b 01       	movw	r14, r22
     c54:	8c 01       	movw	r16, r24
     c56:	61 15       	cp	r22, r1
     c58:	71 05       	cpc	r23, r1
     c5a:	81 05       	cpc	r24, r1
     c5c:	91 05       	cpc	r25, r1
     c5e:	19 f4       	brne	.+6      	; 0xc66 <__floatunsisf+0x20>
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	60 c0       	rjmp	.+192    	; 0xd26 <__floatunsisf+0xe0>
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	8e e1       	ldi	r24, 0x1E	; 30
     c6c:	c8 2e       	mov	r12, r24
     c6e:	d1 2c       	mov	r13, r1
     c70:	dc 82       	std	Y+4, r13	; 0x04
     c72:	cb 82       	std	Y+3, r12	; 0x03
     c74:	ed 82       	std	Y+5, r14	; 0x05
     c76:	fe 82       	std	Y+6, r15	; 0x06
     c78:	0f 83       	std	Y+7, r16	; 0x07
     c7a:	18 87       	std	Y+8, r17	; 0x08
     c7c:	c8 01       	movw	r24, r16
     c7e:	b7 01       	movw	r22, r14
     c80:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     c84:	fc 01       	movw	r30, r24
     c86:	31 97       	sbiw	r30, 0x01	; 1
     c88:	f7 ff       	sbrs	r31, 7
     c8a:	3b c0       	rjmp	.+118    	; 0xd02 <__floatunsisf+0xbc>
     c8c:	22 27       	eor	r18, r18
     c8e:	33 27       	eor	r19, r19
     c90:	2e 1b       	sub	r18, r30
     c92:	3f 0b       	sbc	r19, r31
     c94:	57 01       	movw	r10, r14
     c96:	68 01       	movw	r12, r16
     c98:	02 2e       	mov	r0, r18
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <__floatunsisf+0x5e>
     c9c:	d6 94       	lsr	r13
     c9e:	c7 94       	ror	r12
     ca0:	b7 94       	ror	r11
     ca2:	a7 94       	ror	r10
     ca4:	0a 94       	dec	r0
     ca6:	d2 f7       	brpl	.-12     	; 0xc9c <__floatunsisf+0x56>
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <__floatunsisf+0x7c>
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	aa 1f       	adc	r26, r26
     cc0:	bb 1f       	adc	r27, r27
     cc2:	2a 95       	dec	r18
     cc4:	d2 f7       	brpl	.-12     	; 0xcba <__floatunsisf+0x74>
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	a1 09       	sbc	r26, r1
     cca:	b1 09       	sbc	r27, r1
     ccc:	8e 21       	and	r24, r14
     cce:	9f 21       	and	r25, r15
     cd0:	a0 23       	and	r26, r16
     cd2:	b1 23       	and	r27, r17
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	a1 05       	cpc	r26, r1
     cd8:	b1 05       	cpc	r27, r1
     cda:	21 f0       	breq	.+8      	; 0xce4 <__floatunsisf+0x9e>
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	4a 29       	or	r20, r10
     ce6:	5b 29       	or	r21, r11
     ce8:	6c 29       	or	r22, r12
     cea:	7d 29       	or	r23, r13
     cec:	4d 83       	std	Y+5, r20	; 0x05
     cee:	5e 83       	std	Y+6, r21	; 0x06
     cf0:	6f 83       	std	Y+7, r22	; 0x07
     cf2:	78 87       	std	Y+8, r23	; 0x08
     cf4:	8e e1       	ldi	r24, 0x1E	; 30
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	8e 1b       	sub	r24, r30
     cfa:	9f 0b       	sbc	r25, r31
     cfc:	9c 83       	std	Y+4, r25	; 0x04
     cfe:	8b 83       	std	Y+3, r24	; 0x03
     d00:	12 c0       	rjmp	.+36     	; 0xd26 <__floatunsisf+0xe0>
     d02:	30 97       	sbiw	r30, 0x00	; 0
     d04:	81 f0       	breq	.+32     	; 0xd26 <__floatunsisf+0xe0>
     d06:	0e 2e       	mov	r0, r30
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <__floatunsisf+0xcc>
     d0a:	ee 0c       	add	r14, r14
     d0c:	ff 1c       	adc	r15, r15
     d0e:	00 1f       	adc	r16, r16
     d10:	11 1f       	adc	r17, r17
     d12:	0a 94       	dec	r0
     d14:	d2 f7       	brpl	.-12     	; 0xd0a <__floatunsisf+0xc4>
     d16:	ed 82       	std	Y+5, r14	; 0x05
     d18:	fe 82       	std	Y+6, r15	; 0x06
     d1a:	0f 83       	std	Y+7, r16	; 0x07
     d1c:	18 87       	std	Y+8, r17	; 0x08
     d1e:	ce 1a       	sub	r12, r30
     d20:	df 0a       	sbc	r13, r31
     d22:	dc 82       	std	Y+4, r13	; 0x04
     d24:	cb 82       	std	Y+3, r12	; 0x03
     d26:	1a 82       	std	Y+2, r1	; 0x02
     d28:	ce 01       	movw	r24, r28
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     d30:	28 96       	adiw	r28, 0x08	; 8
     d32:	ea e0       	ldi	r30, 0x0A	; 10
     d34:	0c 94 bc 1d 	jmp	0x3b78	; 0x3b78 <__epilogue_restores__+0x10>

00000d38 <__ashldi3>:
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	60 97       	sbiw	r28, 0x10	; 16
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	a8 2f       	mov	r26, r24
     d54:	00 23       	and	r16, r16
     d56:	09 f4       	brne	.+2      	; 0xd5a <__ashldi3+0x22>
     d58:	61 c0       	rjmp	.+194    	; 0xe1c <__ashldi3+0xe4>
     d5a:	7e 01       	movw	r14, r28
     d5c:	08 94       	sec
     d5e:	e1 1c       	adc	r14, r1
     d60:	f1 1c       	adc	r15, r1
     d62:	88 e0       	ldi	r24, 0x08	; 8
     d64:	f7 01       	movw	r30, r14
     d66:	11 92       	st	Z+, r1
     d68:	8a 95       	dec	r24
     d6a:	e9 f7       	brne	.-6      	; 0xd66 <__ashldi3+0x2e>
     d6c:	29 83       	std	Y+1, r18	; 0x01
     d6e:	3a 83       	std	Y+2, r19	; 0x02
     d70:	4b 83       	std	Y+3, r20	; 0x03
     d72:	5c 83       	std	Y+4, r21	; 0x04
     d74:	6d 83       	std	Y+5, r22	; 0x05
     d76:	7e 83       	std	Y+6, r23	; 0x06
     d78:	af 83       	std	Y+7, r26	; 0x07
     d7a:	98 87       	std	Y+8, r25	; 0x08
     d7c:	80 e2       	ldi	r24, 0x20	; 32
     d7e:	80 1b       	sub	r24, r16
     d80:	e8 2f       	mov	r30, r24
     d82:	ff 27       	eor	r31, r31
     d84:	e7 fd       	sbrc	r30, 7
     d86:	f0 95       	com	r31
     d88:	49 81       	ldd	r20, Y+1	; 0x01
     d8a:	5a 81       	ldd	r21, Y+2	; 0x02
     d8c:	6b 81       	ldd	r22, Y+3	; 0x03
     d8e:	7c 81       	ldd	r23, Y+4	; 0x04
     d90:	18 16       	cp	r1, r24
     d92:	84 f0       	brlt	.+32     	; 0xdb4 <__ashldi3+0x7c>
     d94:	19 86       	std	Y+9, r1	; 0x09
     d96:	1a 86       	std	Y+10, r1	; 0x0a
     d98:	1b 86       	std	Y+11, r1	; 0x0b
     d9a:	1c 86       	std	Y+12, r1	; 0x0c
     d9c:	88 27       	eor	r24, r24
     d9e:	99 27       	eor	r25, r25
     da0:	8e 1b       	sub	r24, r30
     da2:	9f 0b       	sbc	r25, r31
     da4:	04 c0       	rjmp	.+8      	; 0xdae <__ashldi3+0x76>
     da6:	44 0f       	add	r20, r20
     da8:	55 1f       	adc	r21, r21
     daa:	66 1f       	adc	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	8a 95       	dec	r24
     db0:	d2 f7       	brpl	.-12     	; 0xda6 <__ashldi3+0x6e>
     db2:	28 c0       	rjmp	.+80     	; 0xe04 <__ashldi3+0xcc>
     db4:	20 2f       	mov	r18, r16
     db6:	33 27       	eor	r19, r19
     db8:	27 fd       	sbrc	r18, 7
     dba:	30 95       	com	r19
     dbc:	db 01       	movw	r26, r22
     dbe:	ca 01       	movw	r24, r20
     dc0:	02 2e       	mov	r0, r18
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <__ashldi3+0x94>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	aa 1f       	adc	r26, r26
     dca:	bb 1f       	adc	r27, r27
     dcc:	0a 94       	dec	r0
     dce:	d2 f7       	brpl	.-12     	; 0xdc4 <__ashldi3+0x8c>
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	ab 87       	std	Y+11, r26	; 0x0b
     dd6:	bc 87       	std	Y+12, r27	; 0x0c
     dd8:	04 c0       	rjmp	.+8      	; 0xde2 <__ashldi3+0xaa>
     dda:	76 95       	lsr	r23
     ddc:	67 95       	ror	r22
     dde:	57 95       	ror	r21
     de0:	47 95       	ror	r20
     de2:	ea 95       	dec	r30
     de4:	d2 f7       	brpl	.-12     	; 0xdda <__ashldi3+0xa2>
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	af 81       	ldd	r26, Y+7	; 0x07
     dec:	b8 85       	ldd	r27, Y+8	; 0x08
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__ashldi3+0xc0>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	aa 1f       	adc	r26, r26
     df6:	bb 1f       	adc	r27, r27
     df8:	2a 95       	dec	r18
     dfa:	d2 f7       	brpl	.-12     	; 0xdf0 <__ashldi3+0xb8>
     dfc:	48 2b       	or	r20, r24
     dfe:	59 2b       	or	r21, r25
     e00:	6a 2b       	or	r22, r26
     e02:	7b 2b       	or	r23, r27
     e04:	4d 87       	std	Y+13, r20	; 0x0d
     e06:	5e 87       	std	Y+14, r21	; 0x0e
     e08:	6f 87       	std	Y+15, r22	; 0x0f
     e0a:	78 8b       	std	Y+16, r23	; 0x10
     e0c:	29 85       	ldd	r18, Y+9	; 0x09
     e0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e10:	4b 85       	ldd	r20, Y+11	; 0x0b
     e12:	5c 85       	ldd	r21, Y+12	; 0x0c
     e14:	6d 85       	ldd	r22, Y+13	; 0x0d
     e16:	7e 85       	ldd	r23, Y+14	; 0x0e
     e18:	af 85       	ldd	r26, Y+15	; 0x0f
     e1a:	98 89       	ldd	r25, Y+16	; 0x10
     e1c:	8a 2f       	mov	r24, r26
     e1e:	60 96       	adiw	r28, 0x10	; 16
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	08 95       	ret

00000e36 <__clzsi2>:
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	7b 01       	movw	r14, r22
     e40:	8c 01       	movw	r16, r24
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	e8 16       	cp	r14, r24
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	f8 06       	cpc	r15, r24
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	08 07       	cpc	r16, r24
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	18 07       	cpc	r17, r24
     e52:	88 f4       	brcc	.+34     	; 0xe76 <__clzsi2+0x40>
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	e8 16       	cp	r14, r24
     e58:	f1 04       	cpc	r15, r1
     e5a:	01 05       	cpc	r16, r1
     e5c:	11 05       	cpc	r17, r1
     e5e:	31 f0       	breq	.+12     	; 0xe6c <__clzsi2+0x36>
     e60:	28 f0       	brcs	.+10     	; 0xe6c <__clzsi2+0x36>
     e62:	88 e0       	ldi	r24, 0x08	; 8
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	17 c0       	rjmp	.+46     	; 0xe9a <__clzsi2+0x64>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a0 e0       	ldi	r26, 0x00	; 0
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	12 c0       	rjmp	.+36     	; 0xe9a <__clzsi2+0x64>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	e8 16       	cp	r14, r24
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	f8 06       	cpc	r15, r24
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	08 07       	cpc	r16, r24
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	18 07       	cpc	r17, r24
     e86:	28 f0       	brcs	.+10     	; 0xe92 <__clzsi2+0x5c>
     e88:	88 e1       	ldi	r24, 0x18	; 24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a0 e0       	ldi	r26, 0x00	; 0
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <__clzsi2+0x64>
     e92:	80 e1       	ldi	r24, 0x10	; 16
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	20 e2       	ldi	r18, 0x20	; 32
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	28 1b       	sub	r18, r24
     ea4:	39 0b       	sbc	r19, r25
     ea6:	4a 0b       	sbc	r20, r26
     ea8:	5b 0b       	sbc	r21, r27
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <__clzsi2+0x7e>
     eac:	16 95       	lsr	r17
     eae:	07 95       	ror	r16
     eb0:	f7 94       	ror	r15
     eb2:	e7 94       	ror	r14
     eb4:	8a 95       	dec	r24
     eb6:	d2 f7       	brpl	.-12     	; 0xeac <__clzsi2+0x76>
     eb8:	f7 01       	movw	r30, r14
     eba:	e8 59       	subi	r30, 0x98	; 152
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	80 81       	ld	r24, Z
     ec0:	28 1b       	sub	r18, r24
     ec2:	31 09       	sbc	r19, r1
     ec4:	41 09       	sbc	r20, r1
     ec6:	51 09       	sbc	r21, r1
     ec8:	c9 01       	movw	r24, r18
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	08 95       	ret

00000ed4 <__pack_f>:
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	fc 01       	movw	r30, r24
     ee0:	e4 80       	ldd	r14, Z+4	; 0x04
     ee2:	f5 80       	ldd	r15, Z+5	; 0x05
     ee4:	06 81       	ldd	r16, Z+6	; 0x06
     ee6:	17 81       	ldd	r17, Z+7	; 0x07
     ee8:	d1 80       	ldd	r13, Z+1	; 0x01
     eea:	80 81       	ld	r24, Z
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	48 f4       	brcc	.+18     	; 0xf02 <__pack_f+0x2e>
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	a0 e1       	ldi	r26, 0x10	; 16
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e8 2a       	or	r14, r24
     efa:	f9 2a       	or	r15, r25
     efc:	0a 2b       	or	r16, r26
     efe:	1b 2b       	or	r17, r27
     f00:	a5 c0       	rjmp	.+330    	; 0x104c <__pack_f+0x178>
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	09 f4       	brne	.+2      	; 0xf08 <__pack_f+0x34>
     f06:	9f c0       	rjmp	.+318    	; 0x1046 <__pack_f+0x172>
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	21 f4       	brne	.+8      	; 0xf14 <__pack_f+0x40>
     f0c:	ee 24       	eor	r14, r14
     f0e:	ff 24       	eor	r15, r15
     f10:	87 01       	movw	r16, r14
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <__pack_f+0x4a>
     f14:	e1 14       	cp	r14, r1
     f16:	f1 04       	cpc	r15, r1
     f18:	01 05       	cpc	r16, r1
     f1a:	11 05       	cpc	r17, r1
     f1c:	19 f4       	brne	.+6      	; 0xf24 <__pack_f+0x50>
     f1e:	e0 e0       	ldi	r30, 0x00	; 0
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	96 c0       	rjmp	.+300    	; 0x1050 <__pack_f+0x17c>
     f24:	62 81       	ldd	r22, Z+2	; 0x02
     f26:	73 81       	ldd	r23, Z+3	; 0x03
     f28:	9f ef       	ldi	r25, 0xFF	; 255
     f2a:	62 38       	cpi	r22, 0x82	; 130
     f2c:	79 07       	cpc	r23, r25
     f2e:	0c f0       	brlt	.+2      	; 0xf32 <__pack_f+0x5e>
     f30:	5b c0       	rjmp	.+182    	; 0xfe8 <__pack_f+0x114>
     f32:	22 e8       	ldi	r18, 0x82	; 130
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	26 1b       	sub	r18, r22
     f38:	37 0b       	sbc	r19, r23
     f3a:	2a 31       	cpi	r18, 0x1A	; 26
     f3c:	31 05       	cpc	r19, r1
     f3e:	2c f0       	brlt	.+10     	; 0xf4a <__pack_f+0x76>
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	2a c0       	rjmp	.+84     	; 0xf9e <__pack_f+0xca>
     f4a:	b8 01       	movw	r22, r16
     f4c:	a7 01       	movw	r20, r14
     f4e:	02 2e       	mov	r0, r18
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <__pack_f+0x86>
     f52:	76 95       	lsr	r23
     f54:	67 95       	ror	r22
     f56:	57 95       	ror	r21
     f58:	47 95       	ror	r20
     f5a:	0a 94       	dec	r0
     f5c:	d2 f7       	brpl	.-12     	; 0xf52 <__pack_f+0x7e>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a0 e0       	ldi	r26, 0x00	; 0
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <__pack_f+0x9c>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	aa 1f       	adc	r26, r26
     f6e:	bb 1f       	adc	r27, r27
     f70:	2a 95       	dec	r18
     f72:	d2 f7       	brpl	.-12     	; 0xf68 <__pack_f+0x94>
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	a1 09       	sbc	r26, r1
     f78:	b1 09       	sbc	r27, r1
     f7a:	8e 21       	and	r24, r14
     f7c:	9f 21       	and	r25, r15
     f7e:	a0 23       	and	r26, r16
     f80:	b1 23       	and	r27, r17
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	21 f0       	breq	.+8      	; 0xf92 <__pack_f+0xbe>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	9a 01       	movw	r18, r20
     f94:	ab 01       	movw	r20, r22
     f96:	28 2b       	or	r18, r24
     f98:	39 2b       	or	r19, r25
     f9a:	4a 2b       	or	r20, r26
     f9c:	5b 2b       	or	r21, r27
     f9e:	da 01       	movw	r26, r20
     fa0:	c9 01       	movw	r24, r18
     fa2:	8f 77       	andi	r24, 0x7F	; 127
     fa4:	90 70       	andi	r25, 0x00	; 0
     fa6:	a0 70       	andi	r26, 0x00	; 0
     fa8:	b0 70       	andi	r27, 0x00	; 0
     faa:	80 34       	cpi	r24, 0x40	; 64
     fac:	91 05       	cpc	r25, r1
     fae:	a1 05       	cpc	r26, r1
     fb0:	b1 05       	cpc	r27, r1
     fb2:	39 f4       	brne	.+14     	; 0xfc2 <__pack_f+0xee>
     fb4:	27 ff       	sbrs	r18, 7
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <__pack_f+0xf6>
     fb8:	20 5c       	subi	r18, 0xC0	; 192
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	4f 4f       	sbci	r20, 0xFF	; 255
     fbe:	5f 4f       	sbci	r21, 0xFF	; 255
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <__pack_f+0xf6>
     fc2:	21 5c       	subi	r18, 0xC1	; 193
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	4f 4f       	sbci	r20, 0xFF	; 255
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255
     fca:	e0 e0       	ldi	r30, 0x00	; 0
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	20 30       	cpi	r18, 0x00	; 0
     fd0:	a0 e0       	ldi	r26, 0x00	; 0
     fd2:	3a 07       	cpc	r19, r26
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	4a 07       	cpc	r20, r26
     fd8:	a0 e4       	ldi	r26, 0x40	; 64
     fda:	5a 07       	cpc	r21, r26
     fdc:	10 f0       	brcs	.+4      	; 0xfe2 <__pack_f+0x10e>
     fde:	e1 e0       	ldi	r30, 0x01	; 1
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	79 01       	movw	r14, r18
     fe4:	8a 01       	movw	r16, r20
     fe6:	27 c0       	rjmp	.+78     	; 0x1036 <__pack_f+0x162>
     fe8:	60 38       	cpi	r22, 0x80	; 128
     fea:	71 05       	cpc	r23, r1
     fec:	64 f5       	brge	.+88     	; 0x1046 <__pack_f+0x172>
     fee:	fb 01       	movw	r30, r22
     ff0:	e1 58       	subi	r30, 0x81	; 129
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	d8 01       	movw	r26, r16
     ff6:	c7 01       	movw	r24, r14
     ff8:	8f 77       	andi	r24, 0x7F	; 127
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	a0 70       	andi	r26, 0x00	; 0
     ffe:	b0 70       	andi	r27, 0x00	; 0
    1000:	80 34       	cpi	r24, 0x40	; 64
    1002:	91 05       	cpc	r25, r1
    1004:	a1 05       	cpc	r26, r1
    1006:	b1 05       	cpc	r27, r1
    1008:	39 f4       	brne	.+14     	; 0x1018 <__pack_f+0x144>
    100a:	e7 fe       	sbrs	r14, 7
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <__pack_f+0x154>
    100e:	80 e4       	ldi	r24, 0x40	; 64
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	a0 e0       	ldi	r26, 0x00	; 0
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <__pack_f+0x14c>
    1018:	8f e3       	ldi	r24, 0x3F	; 63
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	a0 e0       	ldi	r26, 0x00	; 0
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e8 0e       	add	r14, r24
    1022:	f9 1e       	adc	r15, r25
    1024:	0a 1f       	adc	r16, r26
    1026:	1b 1f       	adc	r17, r27
    1028:	17 ff       	sbrs	r17, 7
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <__pack_f+0x162>
    102c:	16 95       	lsr	r17
    102e:	07 95       	ror	r16
    1030:	f7 94       	ror	r15
    1032:	e7 94       	ror	r14
    1034:	31 96       	adiw	r30, 0x01	; 1
    1036:	87 e0       	ldi	r24, 0x07	; 7
    1038:	16 95       	lsr	r17
    103a:	07 95       	ror	r16
    103c:	f7 94       	ror	r15
    103e:	e7 94       	ror	r14
    1040:	8a 95       	dec	r24
    1042:	d1 f7       	brne	.-12     	; 0x1038 <__pack_f+0x164>
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <__pack_f+0x17c>
    1046:	ee 24       	eor	r14, r14
    1048:	ff 24       	eor	r15, r15
    104a:	87 01       	movw	r16, r14
    104c:	ef ef       	ldi	r30, 0xFF	; 255
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	6e 2f       	mov	r22, r30
    1052:	67 95       	ror	r22
    1054:	66 27       	eor	r22, r22
    1056:	67 95       	ror	r22
    1058:	90 2f       	mov	r25, r16
    105a:	9f 77       	andi	r25, 0x7F	; 127
    105c:	d7 94       	ror	r13
    105e:	dd 24       	eor	r13, r13
    1060:	d7 94       	ror	r13
    1062:	8e 2f       	mov	r24, r30
    1064:	86 95       	lsr	r24
    1066:	49 2f       	mov	r20, r25
    1068:	46 2b       	or	r20, r22
    106a:	58 2f       	mov	r21, r24
    106c:	5d 29       	or	r21, r13
    106e:	b7 01       	movw	r22, r14
    1070:	ca 01       	movw	r24, r20
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	08 95       	ret

0000107e <__unpack_f>:
    107e:	fc 01       	movw	r30, r24
    1080:	db 01       	movw	r26, r22
    1082:	40 81       	ld	r20, Z
    1084:	51 81       	ldd	r21, Z+1	; 0x01
    1086:	22 81       	ldd	r18, Z+2	; 0x02
    1088:	62 2f       	mov	r22, r18
    108a:	6f 77       	andi	r22, 0x7F	; 127
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	22 1f       	adc	r18, r18
    1090:	22 27       	eor	r18, r18
    1092:	22 1f       	adc	r18, r18
    1094:	93 81       	ldd	r25, Z+3	; 0x03
    1096:	89 2f       	mov	r24, r25
    1098:	88 0f       	add	r24, r24
    109a:	82 2b       	or	r24, r18
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	99 1f       	adc	r25, r25
    10a2:	99 27       	eor	r25, r25
    10a4:	99 1f       	adc	r25, r25
    10a6:	11 96       	adiw	r26, 0x01	; 1
    10a8:	9c 93       	st	X, r25
    10aa:	11 97       	sbiw	r26, 0x01	; 1
    10ac:	21 15       	cp	r18, r1
    10ae:	31 05       	cpc	r19, r1
    10b0:	a9 f5       	brne	.+106    	; 0x111c <__unpack_f+0x9e>
    10b2:	41 15       	cp	r20, r1
    10b4:	51 05       	cpc	r21, r1
    10b6:	61 05       	cpc	r22, r1
    10b8:	71 05       	cpc	r23, r1
    10ba:	11 f4       	brne	.+4      	; 0x10c0 <__unpack_f+0x42>
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	37 c0       	rjmp	.+110    	; 0x112e <__unpack_f+0xb0>
    10c0:	82 e8       	ldi	r24, 0x82	; 130
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    10c4:	13 96       	adiw	r26, 0x03	; 3
    10c6:	9c 93       	st	X, r25
    10c8:	8e 93       	st	-X, r24
    10ca:	12 97       	sbiw	r26, 0x02	; 2
    10cc:	9a 01       	movw	r18, r20
    10ce:	ab 01       	movw	r20, r22
    10d0:	67 e0       	ldi	r22, 0x07	; 7
    10d2:	22 0f       	add	r18, r18
    10d4:	33 1f       	adc	r19, r19
    10d6:	44 1f       	adc	r20, r20
    10d8:	55 1f       	adc	r21, r21
    10da:	6a 95       	dec	r22
    10dc:	d1 f7       	brne	.-12     	; 0x10d2 <__unpack_f+0x54>
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	8c 93       	st	X, r24
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <__unpack_f+0x80>
    10e4:	22 0f       	add	r18, r18
    10e6:	33 1f       	adc	r19, r19
    10e8:	44 1f       	adc	r20, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	12 96       	adiw	r26, 0x02	; 2
    10ee:	8d 91       	ld	r24, X+
    10f0:	9c 91       	ld	r25, X
    10f2:	13 97       	sbiw	r26, 0x03	; 3
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	13 96       	adiw	r26, 0x03	; 3
    10f8:	9c 93       	st	X, r25
    10fa:	8e 93       	st	-X, r24
    10fc:	12 97       	sbiw	r26, 0x02	; 2
    10fe:	20 30       	cpi	r18, 0x00	; 0
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	38 07       	cpc	r19, r24
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	48 07       	cpc	r20, r24
    1108:	80 e4       	ldi	r24, 0x40	; 64
    110a:	58 07       	cpc	r21, r24
    110c:	58 f3       	brcs	.-42     	; 0x10e4 <__unpack_f+0x66>
    110e:	14 96       	adiw	r26, 0x04	; 4
    1110:	2d 93       	st	X+, r18
    1112:	3d 93       	st	X+, r19
    1114:	4d 93       	st	X+, r20
    1116:	5c 93       	st	X, r21
    1118:	17 97       	sbiw	r26, 0x07	; 7
    111a:	08 95       	ret
    111c:	2f 3f       	cpi	r18, 0xFF	; 255
    111e:	31 05       	cpc	r19, r1
    1120:	79 f4       	brne	.+30     	; 0x1140 <__unpack_f+0xc2>
    1122:	41 15       	cp	r20, r1
    1124:	51 05       	cpc	r21, r1
    1126:	61 05       	cpc	r22, r1
    1128:	71 05       	cpc	r23, r1
    112a:	19 f4       	brne	.+6      	; 0x1132 <__unpack_f+0xb4>
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	8c 93       	st	X, r24
    1130:	08 95       	ret
    1132:	64 ff       	sbrs	r22, 4
    1134:	03 c0       	rjmp	.+6      	; 0x113c <__unpack_f+0xbe>
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	8c 93       	st	X, r24
    113a:	12 c0       	rjmp	.+36     	; 0x1160 <__unpack_f+0xe2>
    113c:	1c 92       	st	X, r1
    113e:	10 c0       	rjmp	.+32     	; 0x1160 <__unpack_f+0xe2>
    1140:	2f 57       	subi	r18, 0x7F	; 127
    1142:	30 40       	sbci	r19, 0x00	; 0
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	3c 93       	st	X, r19
    1148:	2e 93       	st	-X, r18
    114a:	12 97       	sbiw	r26, 0x02	; 2
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	8c 93       	st	X, r24
    1150:	87 e0       	ldi	r24, 0x07	; 7
    1152:	44 0f       	add	r20, r20
    1154:	55 1f       	adc	r21, r21
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	8a 95       	dec	r24
    115c:	d1 f7       	brne	.-12     	; 0x1152 <__unpack_f+0xd4>
    115e:	70 64       	ori	r23, 0x40	; 64
    1160:	14 96       	adiw	r26, 0x04	; 4
    1162:	4d 93       	st	X+, r20
    1164:	5d 93       	st	X+, r21
    1166:	6d 93       	st	X+, r22
    1168:	7c 93       	st	X, r23
    116a:	17 97       	sbiw	r26, 0x07	; 7
    116c:	08 95       	ret

0000116e <__fpcmp_parts_f>:
    116e:	1f 93       	push	r17
    1170:	dc 01       	movw	r26, r24
    1172:	fb 01       	movw	r30, r22
    1174:	9c 91       	ld	r25, X
    1176:	92 30       	cpi	r25, 0x02	; 2
    1178:	08 f4       	brcc	.+2      	; 0x117c <__fpcmp_parts_f+0xe>
    117a:	47 c0       	rjmp	.+142    	; 0x120a <__fpcmp_parts_f+0x9c>
    117c:	80 81       	ld	r24, Z
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	08 f4       	brcc	.+2      	; 0x1184 <__fpcmp_parts_f+0x16>
    1182:	43 c0       	rjmp	.+134    	; 0x120a <__fpcmp_parts_f+0x9c>
    1184:	94 30       	cpi	r25, 0x04	; 4
    1186:	51 f4       	brne	.+20     	; 0x119c <__fpcmp_parts_f+0x2e>
    1188:	11 96       	adiw	r26, 0x01	; 1
    118a:	1c 91       	ld	r17, X
    118c:	84 30       	cpi	r24, 0x04	; 4
    118e:	99 f5       	brne	.+102    	; 0x11f6 <__fpcmp_parts_f+0x88>
    1190:	81 81       	ldd	r24, Z+1	; 0x01
    1192:	68 2f       	mov	r22, r24
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	61 1b       	sub	r22, r17
    1198:	71 09       	sbc	r23, r1
    119a:	3f c0       	rjmp	.+126    	; 0x121a <__fpcmp_parts_f+0xac>
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	21 f0       	breq	.+8      	; 0x11a8 <__fpcmp_parts_f+0x3a>
    11a0:	92 30       	cpi	r25, 0x02	; 2
    11a2:	31 f4       	brne	.+12     	; 0x11b0 <__fpcmp_parts_f+0x42>
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	b9 f1       	breq	.+110    	; 0x1216 <__fpcmp_parts_f+0xa8>
    11a8:	81 81       	ldd	r24, Z+1	; 0x01
    11aa:	88 23       	and	r24, r24
    11ac:	89 f1       	breq	.+98     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11ae:	2d c0       	rjmp	.+90     	; 0x120a <__fpcmp_parts_f+0x9c>
    11b0:	11 96       	adiw	r26, 0x01	; 1
    11b2:	1c 91       	ld	r17, X
    11b4:	11 97       	sbiw	r26, 0x01	; 1
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	f1 f0       	breq	.+60     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11ba:	81 81       	ldd	r24, Z+1	; 0x01
    11bc:	18 17       	cp	r17, r24
    11be:	d9 f4       	brne	.+54     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11c0:	12 96       	adiw	r26, 0x02	; 2
    11c2:	2d 91       	ld	r18, X+
    11c4:	3c 91       	ld	r19, X
    11c6:	13 97       	sbiw	r26, 0x03	; 3
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	93 81       	ldd	r25, Z+3	; 0x03
    11cc:	82 17       	cp	r24, r18
    11ce:	93 07       	cpc	r25, r19
    11d0:	94 f0       	brlt	.+36     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11d2:	28 17       	cp	r18, r24
    11d4:	39 07       	cpc	r19, r25
    11d6:	bc f0       	brlt	.+46     	; 0x1206 <__fpcmp_parts_f+0x98>
    11d8:	14 96       	adiw	r26, 0x04	; 4
    11da:	8d 91       	ld	r24, X+
    11dc:	9d 91       	ld	r25, X+
    11de:	0d 90       	ld	r0, X+
    11e0:	bc 91       	ld	r27, X
    11e2:	a0 2d       	mov	r26, r0
    11e4:	24 81       	ldd	r18, Z+4	; 0x04
    11e6:	35 81       	ldd	r19, Z+5	; 0x05
    11e8:	46 81       	ldd	r20, Z+6	; 0x06
    11ea:	57 81       	ldd	r21, Z+7	; 0x07
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	4a 07       	cpc	r20, r26
    11f2:	5b 07       	cpc	r21, r27
    11f4:	18 f4       	brcc	.+6      	; 0x11fc <__fpcmp_parts_f+0x8e>
    11f6:	11 23       	and	r17, r17
    11f8:	41 f0       	breq	.+16     	; 0x120a <__fpcmp_parts_f+0x9c>
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11fc:	82 17       	cp	r24, r18
    11fe:	93 07       	cpc	r25, r19
    1200:	a4 07       	cpc	r26, r20
    1202:	b5 07       	cpc	r27, r21
    1204:	40 f4       	brcc	.+16     	; 0x1216 <__fpcmp_parts_f+0xa8>
    1206:	11 23       	and	r17, r17
    1208:	19 f0       	breq	.+6      	; 0x1210 <__fpcmp_parts_f+0xa2>
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	05 c0       	rjmp	.+10     	; 0x121a <__fpcmp_parts_f+0xac>
    1210:	6f ef       	ldi	r22, 0xFF	; 255
    1212:	7f ef       	ldi	r23, 0xFF	; 255
    1214:	02 c0       	rjmp	.+4      	; 0x121a <__fpcmp_parts_f+0xac>
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	cb 01       	movw	r24, r22
    121c:	1f 91       	pop	r17
    121e:	08 95       	ret

00001220 <ADC_vInit>:
 * Parameters : Nothing
 * return     : Nothing
 */

void ADC_vInit(void)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
      CLR_BIT(ADMUX, ADMUX_REFS0);
      CLR_BIT(ADMUX, ADMUX_REFS1);

    #elif ADC_VREF == AVCC

      SET_BIT(ADMUX, ADMUX_REFS0);
    1228:	a7 e2       	ldi	r26, 0x27	; 39
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e7 e2       	ldi	r30, 0x27	; 39
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	80 64       	ori	r24, 0x40	; 64
    1234:	8c 93       	st	X, r24
      CLR_BIT(ADMUX, ADMUX_REFS1);
    1236:	a7 e2       	ldi	r26, 0x27	; 39
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e7 e2       	ldi	r30, 0x27	; 39
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	8f 77       	andi	r24, 0x7F	; 127
    1242:	8c 93       	st	X, r24
  /*Set Left Adjust Result*/
  #ifdef ADC_ADJUSTMENT

    #if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

      CLR_BIT(ADMUX, ADMUX_ADLAR);
    1244:	a7 e2       	ldi	r26, 0x27	; 39
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e7 e2       	ldi	r30, 0x27	; 39
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	8f 7d       	andi	r24, 0xDF	; 223
    1250:	8c 93       	st	X, r24
  /*Set Prescaler Value*/
  #ifdef ADC_PRESCALLER

    #if ADC_PRESCALLER <= ADC_PRE_128

      ADCSRA &= 0b11111000;
    1252:	a6 e2       	ldi	r26, 0x26	; 38
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e6 e2       	ldi	r30, 0x26	; 38
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	88 7f       	andi	r24, 0xF8	; 248
    125e:	8c 93       	st	X, r24
      ADCSRA |= ADC_PRESCALLER;
    1260:	a6 e2       	ldi	r26, 0x26	; 38
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e6 e2       	ldi	r30, 0x26	; 38
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	87 60       	ori	r24, 0x07	; 7
    126c:	8c 93       	st	X, r24

    #if ADC_TRIGGERING_SOURCE <= ADC_SINGLE_CONVERSION

      #if ADC_TRIGGERING_SOURCE == ADC_SINGLE_CONVERSION

        CLR_BIT(ADCSRA, ADCSRA_ADATE);
    126e:	a6 e2       	ldi	r26, 0x26	; 38
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e6 e2       	ldi	r30, 0x26	; 38
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	8f 7d       	andi	r24, 0xDF	; 223
    127a:	8c 93       	st	X, r24

      CLR_BIT(ADCSRA, ADCSRA_ADEN);

    #elif ADC_STATUS == ADC_EN

      SET_BIT(ADCSRA, ADCSRA_ADEN);
    127c:	a6 e2       	ldi	r26, 0x26	; 38
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e6 e2       	ldi	r30, 0x26	; 38
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	80 68       	ori	r24, 0x80	; 128
    1288:	8c 93       	st	X, r24
    /*Enable ADC Interrupt*/
  #ifdef ADC_INT_STATUS

    #if ADC_INT_STATUS == INT_DIS

      CLR_BIT(ADCSRA, ADCSRA_ADIE);
    128a:	a6 e2       	ldi	r26, 0x26	; 38
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e6 e2       	ldi	r30, 0x26	; 38
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	87 7f       	andi	r24, 0xF7	; 247
    1296:	8c 93       	st	X, r24
    #error "Wrong INT_STATUS config"

    #endif

  #endif
}
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <ADC_vEnable>:
 *                                              *--------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vEnable(void)
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA, ADCSRA_ADEN);
    12a6:	a6 e2       	ldi	r26, 0x26	; 38
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e6 e2       	ldi	r30, 0x26	; 38
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	80 68       	ori	r24, 0x80	; 128
    12b2:	8c 93       	st	X, r24
}
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <ADC_vDisable>:
 *                                                *--------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vDisable(void)
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA, ADCSRA_ADEN);
    12c2:	a6 e2       	ldi	r26, 0x26	; 38
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e6 e2       	ldi	r30, 0x26	; 38
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	8f 77       	andi	r24, 0x7F	; 127
    12ce:	8c 93       	st	X, r24
}
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <ADC_vInterruptEnable>:
 *                                               *----------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vInterruptEnable(void)
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA, ADCSRA_ADIE);
    12de:	a6 e2       	ldi	r26, 0x26	; 38
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e6 e2       	ldi	r30, 0x26	; 38
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	88 60       	ori	r24, 0x08	; 8
    12ea:	8c 93       	st	X, r24
}
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <ADC_vInterruptDisable>:
 *                                                *----------------------------------------------*
 * Parameters : Nothing
 * return     : Nothing
 */
void ADC_vInterruptDisable(void)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA, ADCSRA_ADIE);
    12fa:	a6 e2       	ldi	r26, 0x26	; 38
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e6 e2       	ldi	r30, 0x26	; 38
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	87 7f       	andi	r24, 0xF7	; 247
    1306:	8c 93       	st	X, r24
}
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <ADC_u8VoltageReference>:
 *		=>Copy_u8VREF => [AREF , AVCC , INTERNAL_2_56 ]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8VoltageReference(u8 Copy_u8VREF)
{
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	00 d0       	rcall	.+0      	; 0x1314 <ADC_u8VoltageReference+0x6>
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = NOK;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8VREF == AREF) || (Copy_u8VREF == AVCC) || (Copy_u8VREF == INTERNAL_2_56))
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	88 23       	and	r24, r24
    1322:	31 f0       	breq	.+12     	; 0x1330 <ADC_u8VoltageReference+0x22>
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	19 f0       	breq	.+6      	; 0x1330 <ADC_u8VoltageReference+0x22>
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	83 30       	cpi	r24, 0x03	; 3
    132e:	e1 f4       	brne	.+56     	; 0x1368 <ADC_u8VoltageReference+0x5a>
  {
    ADMUX &= 0b00111111;
    1330:	a7 e2       	ldi	r26, 0x27	; 39
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e7 e2       	ldi	r30, 0x27	; 39
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	8f 73       	andi	r24, 0x3F	; 63
    133c:	8c 93       	st	X, r24
    ADMUX |= (Copy_u8VREF << 6);
    133e:	a7 e2       	ldi	r26, 0x27	; 39
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e7 e2       	ldi	r30, 0x27	; 39
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	28 2f       	mov	r18, r24
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	88 2f       	mov	r24, r24
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	00 24       	eor	r0, r0
    1352:	96 95       	lsr	r25
    1354:	87 95       	ror	r24
    1356:	07 94       	ror	r0
    1358:	96 95       	lsr	r25
    135a:	87 95       	ror	r24
    135c:	07 94       	ror	r0
    135e:	98 2f       	mov	r25, r24
    1360:	80 2d       	mov	r24, r0
    1362:	82 2b       	or	r24, r18
    1364:	8c 93       	st	X, r24
    Local_u8ErrorState = OK;
    1366:	19 82       	std	Y+1, r1	; 0x01
  }

  return Local_u8ErrorState;
    1368:	89 81       	ldd	r24, Y+1	; 0x01
}
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <ADC_u8SetPrescaler>:
 *		=>Copy_u8Prescaler => [ADC_PRE_2 , ADC_PRE_4 , ADC_PRE_8 , ADC_PRE_16 , ADC_PRE_32 , ADC_PRE_64 , ADC_PRE_128]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetPrescaler(u8 Copy_u8Prescaler)
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <ADC_u8SetPrescaler+0x6>
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = NOK;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8Prescaler <= ADC_PRE_128)
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	88 30       	cpi	r24, 0x08	; 8
    1388:	80 f4       	brcc	.+32     	; 0x13aa <ADC_u8SetPrescaler+0x36>
  {
    /*Set Prescaler Value*/
    ADCSRA &= 0b11111000;
    138a:	a6 e2       	ldi	r26, 0x26	; 38
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e6 e2       	ldi	r30, 0x26	; 38
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	88 7f       	andi	r24, 0xF8	; 248
    1396:	8c 93       	st	X, r24
    ADCSRA |= Copy_u8Prescaler;
    1398:	a6 e2       	ldi	r26, 0x26	; 38
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e6 e2       	ldi	r30, 0x26	; 38
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	90 81       	ld	r25, Z
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	89 2b       	or	r24, r25
    13a6:	8c 93       	st	X, r24
    Local_u8ErrorState = OK;
    13a8:	19 82       	std	Y+1, r1	; 0x01
  }

  return Local_u8ErrorState;
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <ADC_u8SetAdjustment>:
 *		=>Copy_u8Adjust => [RIGHT_ADJUSTMENT , LEFT_ADJUSTMENT]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetAdjustment(u8 Copy_u8Adjust)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <ADC_u8SetAdjustment+0x6>
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	8a 83       	std	Y+2, r24	; 0x02

  u8 Local_u8ErrorState = OK;
    13c2:	19 82       	std	Y+1, r1	; 0x01

  if (Copy_u8Adjust == RIGHT_ADJUSTMENT)
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	88 23       	and	r24, r24
    13c8:	41 f4       	brne	.+16     	; 0x13da <ADC_u8SetAdjustment+0x24>
  {
    CLR_BIT(ADMUX, ADMUX_ADLAR);
    13ca:	a7 e2       	ldi	r26, 0x27	; 39
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e7 e2       	ldi	r30, 0x27	; 39
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	8f 7d       	andi	r24, 0xDF	; 223
    13d6:	8c 93       	st	X, r24
    13d8:	0d c0       	rjmp	.+26     	; 0x13f4 <ADC_u8SetAdjustment+0x3e>
  }
  else if (Copy_u8Adjust == LEFT_ADJUSTMENT)
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	41 f4       	brne	.+16     	; 0x13f0 <ADC_u8SetAdjustment+0x3a>
  {
    SET_BIT(ADMUX, ADMUX_ADLAR);
    13e0:	a7 e2       	ldi	r26, 0x27	; 39
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e7 e2       	ldi	r30, 0x27	; 39
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	80 62       	ori	r24, 0x20	; 32
    13ec:	8c 93       	st	X, r24
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <ADC_u8SetAdjustment+0x3e>
  }
  else
  {
    Local_u8ErrorState = NOK;
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <ADC_u8SetTriggerSource>:
 *		=>Copy_u8Trigger => [ADC_FREE_RUNNING , ADC_ANALOG_COMPARATOR , ADC_EXTI0 , ADC_TIM0_CTC , ADC_TIM0_OVF , ADC_TIM1_CTC_CHANNEL_B , ADC_TIM1_OVF , ADC_TIM1_ICU]
 *
 * return     : Error status with type u8
 */
u8 ADC_u8SetTriggerSource(u8 Copy_u8Trigger)
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	00 d0       	rcall	.+0      	; 0x1406 <ADC_u8SetTriggerSource+0x6>
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    140c:	19 82       	std	Y+1, r1	; 0x01

  if (Copy_u8Trigger == ADC_SINGLE_CONVERSION)
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	88 30       	cpi	r24, 0x08	; 8
    1412:	41 f4       	brne	.+16     	; 0x1424 <ADC_u8SetTriggerSource+0x24>
  {
    CLR_BIT(ADCSRA, ADCSRA_ADATE);
    1414:	a6 e2       	ldi	r26, 0x26	; 38
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e6 e2       	ldi	r30, 0x26	; 38
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	8f 7d       	andi	r24, 0xDF	; 223
    1420:	8c 93       	st	X, r24
    1422:	1a c0       	rjmp	.+52     	; 0x1458 <ADC_u8SetTriggerSource+0x58>
  }
  else if (Copy_u8Trigger <= ADC_TIM1_ICU)
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	88 30       	cpi	r24, 0x08	; 8
    1428:	a8 f4       	brcc	.+42     	; 0x1454 <ADC_u8SetTriggerSource+0x54>
  {
    /*Set Trigger source Value*/
    SET_BIT(ADCSRA, ADCSRA_ADATE);
    142a:	a6 e2       	ldi	r26, 0x26	; 38
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e6 e2       	ldi	r30, 0x26	; 38
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	80 62       	ori	r24, 0x20	; 32
    1436:	8c 93       	st	X, r24
    SFIOR &= 0b00011111;
    1438:	a0 e5       	ldi	r26, 0x50	; 80
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e0 e5       	ldi	r30, 0x50	; 80
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	8f 71       	andi	r24, 0x1F	; 31
    1444:	8c 93       	st	X, r24
    SFIOR |= (ADC_TRIGGERING_SOURCE << 5);
    1446:	a0 e5       	ldi	r26, 0x50	; 80
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e0 e5       	ldi	r30, 0x50	; 80
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	8c 93       	st	X, r24
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <ADC_u8SetTriggerSource+0x58>
  }
  else
  {
    Local_u8ErrorState = NOK;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    1458:	89 81       	ldd	r24, Y+1	; 0x01
}
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <ADC_u8GetResultSync>:
 *      =>Copy_pu16Result -> pointer to u16
 *
 * return     : Error status with type u8
 */
u8 ADC_u8GetResultSync(u8 Copy_u8Channel, u16 *Copy_pu16Result)
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	28 97       	sbiw	r28, 0x08	; 8
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	cd bf       	out	0x3d, r28	; 61
    1478:	8e 83       	std	Y+6, r24	; 0x06
    147a:	78 87       	std	Y+8, r23	; 0x08
    147c:	6f 83       	std	Y+7, r22	; 0x07
  u8 Local_u8ErrorState = OK;
    147e:	1d 82       	std	Y+5, r1	; 0x05

  u32 Local_u32TimeOutCounter = 0;
    1480:	19 82       	std	Y+1, r1	; 0x01
    1482:	1a 82       	std	Y+2, r1	; 0x02
    1484:	1b 82       	std	Y+3, r1	; 0x03
    1486:	1c 82       	std	Y+4, r1	; 0x04

  if (Copy_pu16Result != NULL)
    1488:	8f 81       	ldd	r24, Y+7	; 0x07
    148a:	98 85       	ldd	r25, Y+8	; 0x08
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	09 f4       	brne	.+2      	; 0x1492 <ADC_u8GetResultSync+0x2e>
    1490:	78 c0       	rjmp	.+240    	; 0x1582 <ADC_u8GetResultSync+0x11e>
  {
    if (ADC_u8State == IDLE)
    1492:	80 91 70 01 	lds	r24, 0x0170
    1496:	88 23       	and	r24, r24
    1498:	09 f0       	breq	.+2      	; 0x149c <ADC_u8GetResultSync+0x38>
    149a:	70 c0       	rjmp	.+224    	; 0x157c <ADC_u8GetResultSync+0x118>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	80 93 70 01 	sts	0x0170, r24

      /*Set required channel*/
      if (Copy_u8Channel <= ADC_GND)
    14a2:	8e 81       	ldd	r24, Y+6	; 0x06
    14a4:	80 32       	cpi	r24, 0x20	; 32
    14a6:	78 f4       	brcc	.+30     	; 0x14c6 <ADC_u8GetResultSync+0x62>
      {
        ADMUX &= 0b11100000;
    14a8:	a7 e2       	ldi	r26, 0x27	; 39
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e7 e2       	ldi	r30, 0x27	; 39
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	80 7e       	andi	r24, 0xE0	; 224
    14b4:	8c 93       	st	X, r24
        ADMUX |= Copy_u8Channel;
    14b6:	a7 e2       	ldi	r26, 0x27	; 39
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e7 e2       	ldi	r30, 0x27	; 39
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	90 81       	ld	r25, Z
    14c0:	8e 81       	ldd	r24, Y+6	; 0x06
    14c2:	89 2b       	or	r24, r25
    14c4:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    14c6:	a6 e2       	ldi	r26, 0x26	; 38
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e6 e2       	ldi	r30, 0x26	; 38
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	80 64       	ori	r24, 0x40	; 64
    14d2:	8c 93       	st	X, r24
    14d4:	0b c0       	rjmp	.+22     	; 0x14ec <ADC_u8GetResultSync+0x88>

      /*Waiting until the conversion is complete*/
      while ((READ_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_TIMEOUT))
      {
        Local_u32TimeOutCounter++;
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	9a 81       	ldd	r25, Y+2	; 0x02
    14da:	ab 81       	ldd	r26, Y+3	; 0x03
    14dc:	bc 81       	ldd	r27, Y+4	; 0x04
    14de:	01 96       	adiw	r24, 0x01	; 1
    14e0:	a1 1d       	adc	r26, r1
    14e2:	b1 1d       	adc	r27, r1
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	9a 83       	std	Y+2, r25	; 0x02
    14e8:	ab 83       	std	Y+3, r26	; 0x03
    14ea:	bc 83       	std	Y+4, r27	; 0x04

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);

      /*Waiting until the conversion is complete*/
      while ((READ_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_TIMEOUT))
    14ec:	e6 e2       	ldi	r30, 0x26	; 38
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	88 2f       	mov	r24, r24
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	80 71       	andi	r24, 0x10	; 16
    14f8:	90 70       	andi	r25, 0x00	; 0
    14fa:	95 95       	asr	r25
    14fc:	87 95       	ror	r24
    14fe:	95 95       	asr	r25
    1500:	87 95       	ror	r24
    1502:	95 95       	asr	r25
    1504:	87 95       	ror	r24
    1506:	95 95       	asr	r25
    1508:	87 95       	ror	r24
    150a:	00 97       	sbiw	r24, 0x00	; 0
    150c:	61 f4       	brne	.+24     	; 0x1526 <ADC_u8GetResultSync+0xc2>
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	9a 81       	ldd	r25, Y+2	; 0x02
    1512:	ab 81       	ldd	r26, Y+3	; 0x03
    1514:	bc 81       	ldd	r27, Y+4	; 0x04
    1516:	80 35       	cpi	r24, 0x50	; 80
    1518:	23 ec       	ldi	r18, 0xC3	; 195
    151a:	92 07       	cpc	r25, r18
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	a2 07       	cpc	r26, r18
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	b2 07       	cpc	r27, r18
    1524:	c0 f2       	brcs	.-80     	; 0x14d6 <ADC_u8GetResultSync+0x72>
      {
        Local_u32TimeOutCounter++;
      }
      if (Local_u32TimeOutCounter == ADC_TIMEOUT)
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	9a 81       	ldd	r25, Y+2	; 0x02
    152a:	ab 81       	ldd	r26, Y+3	; 0x03
    152c:	bc 81       	ldd	r27, Y+4	; 0x04
    152e:	80 35       	cpi	r24, 0x50	; 80
    1530:	23 ec       	ldi	r18, 0xC3	; 195
    1532:	92 07       	cpc	r25, r18
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	a2 07       	cpc	r26, r18
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	b2 07       	cpc	r27, r18
    153c:	19 f4       	brne	.+6      	; 0x1544 <ADC_u8GetResultSync+0xe0>
      {
        Local_u8ErrorState = NOK;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	8d 83       	std	Y+5, r24	; 0x05
    1542:	19 c0       	rjmp	.+50     	; 0x1576 <ADC_u8GetResultSync+0x112>
      }
      else
      {
        /*Clear the interrupt flag*/
        SET_BIT(ADCSRA, ADCSRA_ADIF);
    1544:	a6 e2       	ldi	r26, 0x26	; 38
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e6 e2       	ldi	r30, 0x26	; 38
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	80 61       	ori	r24, 0x10	; 16
    1550:	8c 93       	st	X, r24

/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

        *Copy_pu16Result = (ADCL | (ADCH << 8));
    1552:	e4 e2       	ldi	r30, 0x24	; 36
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	e5 e2       	ldi	r30, 0x25	; 37
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	98 2f       	mov	r25, r24
    1568:	88 27       	eor	r24, r24
    156a:	82 2b       	or	r24, r18
    156c:	93 2b       	or	r25, r19
    156e:	ef 81       	ldd	r30, Y+7	; 0x07
    1570:	f8 85       	ldd	r31, Y+8	; 0x08
    1572:	91 83       	std	Z+1, r25	; 0x01
    1574:	80 83       	st	Z, r24

#endif
      }

      /*ADC is IDLE*/
      ADC_u8State = IDLE;
    1576:	10 92 70 01 	sts	0x0170, r1
    157a:	05 c0       	rjmp	.+10     	; 0x1586 <ADC_u8GetResultSync+0x122>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    157c:	83 e0       	ldi	r24, 0x03	; 3
    157e:	8d 83       	std	Y+5, r24	; 0x05
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <ADC_u8GetResultSync+0x122>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    1582:	82 e0       	ldi	r24, 0x02	; 2
    1584:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1588:	28 96       	adiw	r28, 0x08	; 8
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <ADC_u8StartConversionAsynch>:
 *      =>Copy_pvNotificationFunc : poiter to function
 *
 * return     : Error status with type u8
 */
u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel, u16 *Copy_pu16Result, void (*Copy_pvNotificationFunc)(void))
{
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <ADC_u8StartConversionAsynch+0x6>
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <ADC_u8StartConversionAsynch+0x8>
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <ADC_u8StartConversionAsynch+0xa>
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
    15a8:	8a 83       	std	Y+2, r24	; 0x02
    15aa:	7c 83       	std	Y+4, r23	; 0x04
    15ac:	6b 83       	std	Y+3, r22	; 0x03
    15ae:	5e 83       	std	Y+6, r21	; 0x06
    15b0:	4d 83       	std	Y+5, r20	; 0x05
  u8 Local_u8ErrorState = OK;
    15b2:	19 82       	std	Y+1, r1	; 0x01

  if ((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	e9 f1       	breq	.+122    	; 0x1636 <ADC_u8StartConversionAsynch+0x9c>
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	9e 81       	ldd	r25, Y+6	; 0x06
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	c9 f1       	breq	.+114    	; 0x1636 <ADC_u8StartConversionAsynch+0x9c>
  {
    if (ADC_u8State == IDLE)
    15c4:	80 91 70 01 	lds	r24, 0x0170
    15c8:	88 23       	and	r24, r24
    15ca:	91 f5       	brne	.+100    	; 0x1630 <ADC_u8StartConversionAsynch+0x96>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	80 93 70 01 	sts	0x0170, r24

      /*Set ISR State*/
      ADC_u8ISRState = SINGLE_CHANNEL_ASYNCH;
    15d2:	10 92 71 01 	sts	0x0171, r1

      /*Initialize the global result pointer*/
      ADC_pu16AsynchConversionResult = Copy_pu16Result;
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	9c 81       	ldd	r25, Y+4	; 0x04
    15da:	90 93 6d 01 	sts	0x016D, r25
    15de:	80 93 6c 01 	sts	0x016C, r24

      /*Initialize the global notification function pointer*/
      ADC_pvNotificationFunc = Copy_pvNotificationFunc;
    15e2:	8d 81       	ldd	r24, Y+5	; 0x05
    15e4:	9e 81       	ldd	r25, Y+6	; 0x06
    15e6:	90 93 6f 01 	sts	0x016F, r25
    15ea:	80 93 6e 01 	sts	0x016E, r24

      /*Set required channel*/
      if (Copy_u8Channel <= ADC_GND)
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	80 32       	cpi	r24, 0x20	; 32
    15f2:	78 f4       	brcc	.+30     	; 0x1612 <ADC_u8StartConversionAsynch+0x78>
      {
        ADMUX &= 0b11100000;
    15f4:	a7 e2       	ldi	r26, 0x27	; 39
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e7 e2       	ldi	r30, 0x27	; 39
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	80 7e       	andi	r24, 0xE0	; 224
    1600:	8c 93       	st	X, r24
        ADMUX |= Copy_u8Channel;
    1602:	a7 e2       	ldi	r26, 0x27	; 39
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e7 e2       	ldi	r30, 0x27	; 39
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	90 81       	ld	r25, Z
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	89 2b       	or	r24, r25
    1610:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    1612:	a6 e2       	ldi	r26, 0x26	; 38
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e6 e2       	ldi	r30, 0x26	; 38
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	80 64       	ori	r24, 0x40	; 64
    161e:	8c 93       	st	X, r24

      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
    1620:	a6 e2       	ldi	r26, 0x26	; 38
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e6 e2       	ldi	r30, 0x26	; 38
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	88 60       	ori	r24, 0x08	; 8
    162c:	8c 93       	st	X, r24
    162e:	05 c0       	rjmp	.+10     	; 0x163a <ADC_u8StartConversionAsynch+0xa0>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    1630:	83 e0       	ldi	r24, 0x03	; 3
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	02 c0       	rjmp	.+4      	; 0x163a <ADC_u8StartConversionAsynch+0xa0>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    1636:	82 e0       	ldi	r24, 0x02	; 2
    1638:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    163a:	89 81       	ldd	r24, Y+1	; 0x01
}
    163c:	26 96       	adiw	r28, 0x06	; 6
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <ADC_u8StartChainAsynch>:
 *
 * return     : Error status with type u8
 */

u8 ADC_u8StartChainAsynch(Chain_t *Copy_Chain)
{
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	00 d0       	rcall	.+0      	; 0x1654 <ADC_u8StartChainAsynch+0x6>
    1654:	0f 92       	push	r0
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	9b 83       	std	Y+3, r25	; 0x03
    165c:	8a 83       	std	Y+2, r24	; 0x02
  u8 Local_u8ErrorState = OK;
    165e:	19 82       	std	Y+1, r1	; 0x01

  if ((Copy_Chain != NULL) && (Copy_Chain->Channel != NULL) && (Copy_Chain->NotificationFunc != NULL) && (Copy_Chain->Result != NULL))
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	9b 81       	ldd	r25, Y+3	; 0x03
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	09 f4       	brne	.+2      	; 0x166a <ADC_u8StartChainAsynch+0x1c>
    1668:	79 c0       	rjmp	.+242    	; 0x175c <ADC_u8StartChainAsynch+0x10e>
    166a:	ea 81       	ldd	r30, Y+2	; 0x02
    166c:	fb 81       	ldd	r31, Y+3	; 0x03
    166e:	80 81       	ld	r24, Z
    1670:	91 81       	ldd	r25, Z+1	; 0x01
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	09 f4       	brne	.+2      	; 0x1678 <ADC_u8StartChainAsynch+0x2a>
    1676:	72 c0       	rjmp	.+228    	; 0x175c <ADC_u8StartChainAsynch+0x10e>
    1678:	ea 81       	ldd	r30, Y+2	; 0x02
    167a:	fb 81       	ldd	r31, Y+3	; 0x03
    167c:	85 81       	ldd	r24, Z+5	; 0x05
    167e:	96 81       	ldd	r25, Z+6	; 0x06
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	09 f4       	brne	.+2      	; 0x1686 <ADC_u8StartChainAsynch+0x38>
    1684:	6b c0       	rjmp	.+214    	; 0x175c <ADC_u8StartChainAsynch+0x10e>
    1686:	ea 81       	ldd	r30, Y+2	; 0x02
    1688:	fb 81       	ldd	r31, Y+3	; 0x03
    168a:	82 81       	ldd	r24, Z+2	; 0x02
    168c:	93 81       	ldd	r25, Z+3	; 0x03
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	09 f4       	brne	.+2      	; 0x1694 <ADC_u8StartChainAsynch+0x46>
    1692:	64 c0       	rjmp	.+200    	; 0x175c <ADC_u8StartChainAsynch+0x10e>
  {
    if (ADC_u8State == IDLE)
    1694:	80 91 70 01 	lds	r24, 0x0170
    1698:	88 23       	and	r24, r24
    169a:	09 f0       	breq	.+2      	; 0x169e <ADC_u8StartChainAsynch+0x50>
    169c:	5c c0       	rjmp	.+184    	; 0x1756 <ADC_u8StartChainAsynch+0x108>
    {
      /*ADC is now Busy*/
      ADC_u8State = BUSY;
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	80 93 70 01 	sts	0x0170, r24

      /*Set ISR State*/
      ADC_u8ISRState = CHAIN_CHANNEL_ASYNCH;
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	80 93 71 01 	sts	0x0171, r24

      /*Assign the ADC data globally*/
      ADC_pu16AsynchConversionResult = Copy_Chain->Result;
    16aa:	ea 81       	ldd	r30, Y+2	; 0x02
    16ac:	fb 81       	ldd	r31, Y+3	; 0x03
    16ae:	82 81       	ldd	r24, Z+2	; 0x02
    16b0:	93 81       	ldd	r25, Z+3	; 0x03
    16b2:	90 93 6d 01 	sts	0x016D, r25
    16b6:	80 93 6c 01 	sts	0x016C, r24
      ADC_pu8ChainChannel = Copy_Chain->Channel;
    16ba:	ea 81       	ldd	r30, Y+2	; 0x02
    16bc:	fb 81       	ldd	r31, Y+3	; 0x03
    16be:	80 81       	ld	r24, Z
    16c0:	91 81       	ldd	r25, Z+1	; 0x01
    16c2:	90 93 73 01 	sts	0x0173, r25
    16c6:	80 93 72 01 	sts	0x0172, r24
      ADC_u8ChainSize = Copy_Chain->Size;
    16ca:	ea 81       	ldd	r30, Y+2	; 0x02
    16cc:	fb 81       	ldd	r31, Y+3	; 0x03
    16ce:	84 81       	ldd	r24, Z+4	; 0x04
    16d0:	80 93 74 01 	sts	0x0174, r24
      ADC_pvNotificationFunc = Copy_Chain->NotificationFunc;
    16d4:	ea 81       	ldd	r30, Y+2	; 0x02
    16d6:	fb 81       	ldd	r31, Y+3	; 0x03
    16d8:	85 81       	ldd	r24, Z+5	; 0x05
    16da:	96 81       	ldd	r25, Z+6	; 0x06
    16dc:	90 93 6f 01 	sts	0x016F, r25
    16e0:	80 93 6e 01 	sts	0x016E, r24

      /*Set Index to first element*/
      ADC_u8Index = 0;
    16e4:	10 92 75 01 	sts	0x0175, r1

      /*Set required channel*/
      if (ADC_pu8ChainChannel[ADC_u8Index] <= ADC_GND)
    16e8:	20 91 72 01 	lds	r18, 0x0172
    16ec:	30 91 73 01 	lds	r19, 0x0173
    16f0:	80 91 75 01 	lds	r24, 0x0175
    16f4:	88 2f       	mov	r24, r24
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	f9 01       	movw	r30, r18
    16fa:	e8 0f       	add	r30, r24
    16fc:	f9 1f       	adc	r31, r25
    16fe:	80 81       	ld	r24, Z
    1700:	80 32       	cpi	r24, 0x20	; 32
    1702:	d0 f4       	brcc	.+52     	; 0x1738 <ADC_u8StartChainAsynch+0xea>
      {
        ADMUX &= 0b11100000;
    1704:	a7 e2       	ldi	r26, 0x27	; 39
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e7 e2       	ldi	r30, 0x27	; 39
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	80 7e       	andi	r24, 0xE0	; 224
    1710:	8c 93       	st	X, r24
        ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
    1712:	a7 e2       	ldi	r26, 0x27	; 39
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e7 e2       	ldi	r30, 0x27	; 39
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	40 81       	ld	r20, Z
    171c:	20 91 72 01 	lds	r18, 0x0172
    1720:	30 91 73 01 	lds	r19, 0x0173
    1724:	80 91 75 01 	lds	r24, 0x0175
    1728:	88 2f       	mov	r24, r24
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	f9 01       	movw	r30, r18
    172e:	e8 0f       	add	r30, r24
    1730:	f9 1f       	adc	r31, r25
    1732:	80 81       	ld	r24, Z
    1734:	84 2b       	or	r24, r20
    1736:	8c 93       	st	X, r24
      }

      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    1738:	a6 e2       	ldi	r26, 0x26	; 38
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e6 e2       	ldi	r30, 0x26	; 38
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	80 64       	ori	r24, 0x40	; 64
    1744:	8c 93       	st	X, r24

      /*ADC Conversion Complete Interrupt Enable*/
      SET_BIT(ADCSRA, ADCSRA_ADIE);
    1746:	a6 e2       	ldi	r26, 0x26	; 38
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e6 e2       	ldi	r30, 0x26	; 38
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	88 60       	ori	r24, 0x08	; 8
    1752:	8c 93       	st	X, r24
    1754:	05 c0       	rjmp	.+10     	; 0x1760 <ADC_u8StartChainAsynch+0x112>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    1756:	83 e0       	ldi	r24, 0x03	; 3
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <ADC_u8StartChainAsynch+0x112>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    175c:	82 e0       	ldi	r24, 0x02	; 2
    175e:	89 83       	std	Y+1, r24	; 0x01
  }
  return Local_u8ErrorState;
    1760:	89 81       	ldd	r24, Y+1	; 0x01
}
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <__vector_16>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

/* ISR for ADC conversion complete */
void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
    176e:	1f 92       	push	r1
    1770:	0f 92       	push	r0
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	0f 92       	push	r0
    1776:	11 24       	eor	r1, r1
    1778:	2f 93       	push	r18
    177a:	3f 93       	push	r19
    177c:	4f 93       	push	r20
    177e:	5f 93       	push	r21
    1780:	6f 93       	push	r22
    1782:	7f 93       	push	r23
    1784:	8f 93       	push	r24
    1786:	9f 93       	push	r25
    1788:	af 93       	push	r26
    178a:	bf 93       	push	r27
    178c:	ef 93       	push	r30
    178e:	ff 93       	push	r31
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
  if (ADC_u8ISRState == SINGLE_CHANNEL_ASYNCH)
    1798:	80 91 71 01 	lds	r24, 0x0171
    179c:	88 23       	and	r24, r24
    179e:	19 f5       	brne	.+70     	; 0x17e6 <__vector_16+0x78>
  {
/*Return Conversion Result*/
#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

    *ADC_pu16AsynchConversionResult = (ADCL | (ADCH << 8));
    17a0:	a0 91 6c 01 	lds	r26, 0x016C
    17a4:	b0 91 6d 01 	lds	r27, 0x016D
    17a8:	e4 e2       	ldi	r30, 0x24	; 36
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	e5 e2       	ldi	r30, 0x25	; 37
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	88 2f       	mov	r24, r24
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	98 2f       	mov	r25, r24
    17be:	88 27       	eor	r24, r24
    17c0:	82 2b       	or	r24, r18
    17c2:	93 2b       	or	r25, r19
    17c4:	8d 93       	st	X+, r24
    17c6:	9c 93       	st	X, r25
#error "Wrong ADC_ADJUSTMENT config"

#endif

    /*ADC is IDLE*/
    ADC_u8State = IDLE;
    17c8:	10 92 70 01 	sts	0x0170, r1

    /*Call Notification Function*/
    ADC_pvNotificationFunc();
    17cc:	e0 91 6e 01 	lds	r30, 0x016E
    17d0:	f0 91 6f 01 	lds	r31, 0x016F
    17d4:	09 95       	icall

#if ADC_TRIGGERING_SOURCE == ADC_SINGLE_CONVERSION
    /*Disable the Conversion Complete Interrupt*/
    CLR_BIT(ADCSRA, ADCSRA_ADIE);
    17d6:	a6 e2       	ldi	r26, 0x26	; 38
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e6 e2       	ldi	r30, 0x26	; 38
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	87 7f       	andi	r24, 0xF7	; 247
    17e2:	8c 93       	st	X, r24
    17e4:	6c c0       	rjmp	.+216    	; 0x18be <__vector_16+0x150>
#endif
  }


  else if (ADC_u8ISRState == CHAIN_CHANNEL_ASYNCH)
    17e6:	80 91 71 01 	lds	r24, 0x0171
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <__vector_16+0x82>
    17ee:	67 c0       	rjmp	.+206    	; 0x18be <__vector_16+0x150>
  {
/*Return Conversion Result*/

  #if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT

      ADC_pu16AsynchConversionResult[ADC_u8Index] = (ADCL | (ADCH << 8));
    17f0:	20 91 6c 01 	lds	r18, 0x016C
    17f4:	30 91 6d 01 	lds	r19, 0x016D
    17f8:	80 91 75 01 	lds	r24, 0x0175
    17fc:	88 2f       	mov	r24, r24
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	d9 01       	movw	r26, r18
    1806:	a8 0f       	add	r26, r24
    1808:	b9 1f       	adc	r27, r25
    180a:	e4 e2       	ldi	r30, 0x24	; 36
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	e5 e2       	ldi	r30, 0x25	; 37
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	88 2f       	mov	r24, r24
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	98 2f       	mov	r25, r24
    1820:	88 27       	eor	r24, r24
    1822:	82 2b       	or	r24, r18
    1824:	93 2b       	or	r25, r19
    1826:	11 96       	adiw	r26, 0x01	; 1
    1828:	9c 93       	st	X, r25
    182a:	8e 93       	st	-X, r24
  #error "Wrong ADC_ADJUSTMENT config"

  #endif

    /*Increment Data index of the chain*/
    ADC_u8Index++;
    182c:	80 91 75 01 	lds	r24, 0x0175
    1830:	8f 5f       	subi	r24, 0xFF	; 255
    1832:	80 93 75 01 	sts	0x0175, r24

    if (ADC_u8Index == ADC_u8ChainSize)
    1836:	90 91 75 01 	lds	r25, 0x0175
    183a:	80 91 74 01 	lds	r24, 0x0174
    183e:	98 17       	cp	r25, r24
    1840:	79 f4       	brne	.+30     	; 0x1860 <__vector_16+0xf2>
    {
      /*ADC is IDLE*/
      ADC_u8State = IDLE;
    1842:	10 92 70 01 	sts	0x0170, r1

      /*Call Notification Function*/
      ADC_pvNotificationFunc();
    1846:	e0 91 6e 01 	lds	r30, 0x016E
    184a:	f0 91 6f 01 	lds	r31, 0x016F
    184e:	09 95       	icall

      /*Disable the Conversion Complete Interrupt*/
      CLR_BIT(ADCSRA, ADCSRA_ADIE);
    1850:	a6 e2       	ldi	r26, 0x26	; 38
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e6 e2       	ldi	r30, 0x26	; 38
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	87 7f       	andi	r24, 0xF7	; 247
    185c:	8c 93       	st	X, r24
    185e:	2f c0       	rjmp	.+94     	; 0x18be <__vector_16+0x150>
    }
    else
    {
      /*Set required channel*/
      if (ADC_pu8ChainChannel[ADC_u8Index] <= ADC_GND)
    1860:	20 91 72 01 	lds	r18, 0x0172
    1864:	30 91 73 01 	lds	r19, 0x0173
    1868:	80 91 75 01 	lds	r24, 0x0175
    186c:	88 2f       	mov	r24, r24
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	f9 01       	movw	r30, r18
    1872:	e8 0f       	add	r30, r24
    1874:	f9 1f       	adc	r31, r25
    1876:	80 81       	ld	r24, Z
    1878:	80 32       	cpi	r24, 0x20	; 32
    187a:	d0 f4       	brcc	.+52     	; 0x18b0 <__vector_16+0x142>
      {
        ADMUX &= 0b11100000;
    187c:	a7 e2       	ldi	r26, 0x27	; 39
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e7 e2       	ldi	r30, 0x27	; 39
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	80 7e       	andi	r24, 0xE0	; 224
    1888:	8c 93       	st	X, r24
        ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
    188a:	a7 e2       	ldi	r26, 0x27	; 39
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e7 e2       	ldi	r30, 0x27	; 39
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	40 81       	ld	r20, Z
    1894:	20 91 72 01 	lds	r18, 0x0172
    1898:	30 91 73 01 	lds	r19, 0x0173
    189c:	80 91 75 01 	lds	r24, 0x0175
    18a0:	88 2f       	mov	r24, r24
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	f9 01       	movw	r30, r18
    18a6:	e8 0f       	add	r30, r24
    18a8:	f9 1f       	adc	r31, r25
    18aa:	80 81       	ld	r24, Z
    18ac:	84 2b       	or	r24, r20
    18ae:	8c 93       	st	X, r24
      }
      /*Start Conversion*/
      SET_BIT(ADCSRA, ADCSRA_ADSC);
    18b0:	a6 e2       	ldi	r26, 0x26	; 38
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e6 e2       	ldi	r30, 0x26	; 38
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	80 64       	ori	r24, 0x40	; 64
    18bc:	8c 93       	st	X, r24
    }
  }
}
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	ff 91       	pop	r31
    18c4:	ef 91       	pop	r30
    18c6:	bf 91       	pop	r27
    18c8:	af 91       	pop	r26
    18ca:	9f 91       	pop	r25
    18cc:	8f 91       	pop	r24
    18ce:	7f 91       	pop	r23
    18d0:	6f 91       	pop	r22
    18d2:	5f 91       	pop	r21
    18d4:	4f 91       	pop	r20
    18d6:	3f 91       	pop	r19
    18d8:	2f 91       	pop	r18
    18da:	0f 90       	pop	r0
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	0f 90       	pop	r0
    18e0:	1f 90       	pop	r1
    18e2:	18 95       	reti

000018e4 <CLCD_vInit>:
 *                                              *-------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vInit(void)
{
    18e4:	0f 93       	push	r16
    18e6:	1f 93       	push	r17
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
    18f0:	c6 54       	subi	r28, 0x46	; 70
    18f2:	d0 40       	sbci	r29, 0x00	; 0
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	de bf       	out	0x3e, r29	; 62
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	cd bf       	out	0x3d, r28	; 61
    18fe:	fe 01       	movw	r30, r28
    1900:	ed 5b       	subi	r30, 0xBD	; 189
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	a8 e4       	ldi	r26, 0x48	; 72
    190a:	b2 e4       	ldi	r27, 0x42	; 66
    190c:	80 83       	st	Z, r24
    190e:	91 83       	std	Z+1, r25	; 0x01
    1910:	a2 83       	std	Z+2, r26	; 0x02
    1912:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1914:	8e 01       	movw	r16, r28
    1916:	01 5c       	subi	r16, 0xC1	; 193
    1918:	1f 4f       	sbci	r17, 0xFF	; 255
    191a:	fe 01       	movw	r30, r28
    191c:	ed 5b       	subi	r30, 0xBD	; 189
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	60 81       	ld	r22, Z
    1922:	71 81       	ldd	r23, Z+1	; 0x01
    1924:	82 81       	ldd	r24, Z+2	; 0x02
    1926:	93 81       	ldd	r25, Z+3	; 0x03
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	4a ef       	ldi	r20, 0xFA	; 250
    192e:	54 e4       	ldi	r21, 0x44	; 68
    1930:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	f8 01       	movw	r30, r16
    193a:	80 83       	st	Z, r24
    193c:	91 83       	std	Z+1, r25	; 0x01
    193e:	a2 83       	std	Z+2, r26	; 0x02
    1940:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1942:	fe 01       	movw	r30, r28
    1944:	ff 96       	adiw	r30, 0x3f	; 63
    1946:	60 81       	ld	r22, Z
    1948:	71 81       	ldd	r23, Z+1	; 0x01
    194a:	82 81       	ldd	r24, Z+2	; 0x02
    194c:	93 81       	ldd	r25, Z+3	; 0x03
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e8       	ldi	r20, 0x80	; 128
    1954:	5f e3       	ldi	r21, 0x3F	; 63
    1956:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    195a:	88 23       	and	r24, r24
    195c:	2c f4       	brge	.+10     	; 0x1968 <CLCD_vInit+0x84>
		__ticks = 1;
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	9e af       	std	Y+62, r25	; 0x3e
    1964:	8d af       	std	Y+61, r24	; 0x3d
    1966:	46 c0       	rjmp	.+140    	; 0x19f4 <CLCD_vInit+0x110>
	else if (__tmp > 65535)
    1968:	fe 01       	movw	r30, r28
    196a:	ff 96       	adiw	r30, 0x3f	; 63
    196c:	60 81       	ld	r22, Z
    196e:	71 81       	ldd	r23, Z+1	; 0x01
    1970:	82 81       	ldd	r24, Z+2	; 0x02
    1972:	93 81       	ldd	r25, Z+3	; 0x03
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	3f ef       	ldi	r19, 0xFF	; 255
    1978:	4f e7       	ldi	r20, 0x7F	; 127
    197a:	57 e4       	ldi	r21, 0x47	; 71
    197c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1980:	18 16       	cp	r1, r24
    1982:	64 f5       	brge	.+88     	; 0x19dc <CLCD_vInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1984:	fe 01       	movw	r30, r28
    1986:	ed 5b       	subi	r30, 0xBD	; 189
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	60 81       	ld	r22, Z
    198c:	71 81       	ldd	r23, Z+1	; 0x01
    198e:	82 81       	ldd	r24, Z+2	; 0x02
    1990:	93 81       	ldd	r25, Z+3	; 0x03
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	40 e2       	ldi	r20, 0x20	; 32
    1998:	51 e4       	ldi	r21, 0x41	; 65
    199a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	bc 01       	movw	r22, r24
    19a4:	cd 01       	movw	r24, r26
    19a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	9e af       	std	Y+62, r25	; 0x3e
    19b0:	8d af       	std	Y+61, r24	; 0x3d
    19b2:	0f c0       	rjmp	.+30     	; 0x19d2 <CLCD_vInit+0xee>
    19b4:	88 ec       	ldi	r24, 0xC8	; 200
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	9c af       	std	Y+60, r25	; 0x3c
    19ba:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19bc:	8b ad       	ldd	r24, Y+59	; 0x3b
    19be:	9c ad       	ldd	r25, Y+60	; 0x3c
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	f1 f7       	brne	.-4      	; 0x19c0 <CLCD_vInit+0xdc>
    19c4:	9c af       	std	Y+60, r25	; 0x3c
    19c6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    19ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	9e af       	std	Y+62, r25	; 0x3e
    19d0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    19d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	69 f7       	brne	.-38     	; 0x19b4 <CLCD_vInit+0xd0>
    19da:	16 c0       	rjmp	.+44     	; 0x1a08 <CLCD_vInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19dc:	fe 01       	movw	r30, r28
    19de:	ff 96       	adiw	r30, 0x3f	; 63
    19e0:	60 81       	ld	r22, Z
    19e2:	71 81       	ldd	r23, Z+1	; 0x01
    19e4:	82 81       	ldd	r24, Z+2	; 0x02
    19e6:	93 81       	ldd	r25, Z+3	; 0x03
    19e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	9e af       	std	Y+62, r25	; 0x3e
    19f2:	8d af       	std	Y+61, r24	; 0x3d
    19f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    19f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    19f8:	9a af       	std	Y+58, r25	; 0x3a
    19fa:	89 af       	std	Y+57, r24	; 0x39
    19fc:	89 ad       	ldd	r24, Y+57	; 0x39
    19fe:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	f1 f7       	brne	.-4      	; 0x1a00 <CLCD_vInit+0x11c>
    1a04:	9a af       	std	Y+58, r25	; 0x3a
    1a06:	89 af       	std	Y+57, r24	; 0x39

  _delay_ms(50); // must wait more than 30 ms befor any action (VDD rises to 4.5 v)

#if CLCD_DATA_NIBBLE == CLCD_HIGH_NIBBLE

  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN4, DIO_PIN_OUTPUT);
    1a08:	83 e0       	ldi	r24, 0x03	; 3
    1a0a:	64 e0       	ldi	r22, 0x04	; 4
    1a0c:	41 e0       	ldi	r20, 0x01	; 1
    1a0e:	0e 94 26 14 	call	0x284c	; 0x284c <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN5, DIO_PIN_OUTPUT);
    1a12:	83 e0       	ldi	r24, 0x03	; 3
    1a14:	65 e0       	ldi	r22, 0x05	; 5
    1a16:	41 e0       	ldi	r20, 0x01	; 1
    1a18:	0e 94 26 14 	call	0x284c	; 0x284c <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN6, DIO_PIN_OUTPUT);
    1a1c:	83 e0       	ldi	r24, 0x03	; 3
    1a1e:	66 e0       	ldi	r22, 0x06	; 6
    1a20:	41 e0       	ldi	r20, 0x01	; 1
    1a22:	0e 94 26 14 	call	0x284c	; 0x284c <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN7, DIO_PIN_OUTPUT);
    1a26:	83 e0       	ldi	r24, 0x03	; 3
    1a28:	67 e0       	ldi	r22, 0x07	; 7
    1a2a:	41 e0       	ldi	r20, 0x01	; 1
    1a2c:	0e 94 26 14 	call	0x284c	; 0x284c <DIO_enumSetPinDir>

#error "Wrong CLCD_DATA_NIBBLE Config"

#endif

  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_OUTPUT);
    1a30:	83 e0       	ldi	r24, 0x03	; 3
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	41 e0       	ldi	r20, 0x01	; 1
    1a36:	0e 94 26 14 	call	0x284c	; 0x284c <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_OUTPUT);
    1a3a:	83 e0       	ldi	r24, 0x03	; 3
    1a3c:	61 e0       	ldi	r22, 0x01	; 1
    1a3e:	41 e0       	ldi	r20, 0x01	; 1
    1a40:	0e 94 26 14 	call	0x284c	; 0x284c <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_OUTPUT);
    1a44:	83 e0       	ldi	r24, 0x03	; 3
    1a46:	62 e0       	ldi	r22, 0x02	; 2
    1a48:	41 e0       	ldi	r20, 0x01	; 1
    1a4a:	0e 94 26 14 	call	0x284c	; 0x284c <DIO_enumSetPinDir>

  CLCD_vSendCommand(CLCD_HOME);
    1a4e:	82 e0       	ldi	r24, 0x02	; 2
    1a50:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <CLCD_vSendCommand>
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	a0 e2       	ldi	r26, 0x20	; 32
    1a5a:	b1 e4       	ldi	r27, 0x41	; 65
    1a5c:	8d ab       	std	Y+53, r24	; 0x35
    1a5e:	9e ab       	std	Y+54, r25	; 0x36
    1a60:	af ab       	std	Y+55, r26	; 0x37
    1a62:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a64:	6d a9       	ldd	r22, Y+53	; 0x35
    1a66:	7e a9       	ldd	r23, Y+54	; 0x36
    1a68:	8f a9       	ldd	r24, Y+55	; 0x37
    1a6a:	98 ad       	ldd	r25, Y+56	; 0x38
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	4a ef       	ldi	r20, 0xFA	; 250
    1a72:	54 e4       	ldi	r21, 0x44	; 68
    1a74:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	89 ab       	std	Y+49, r24	; 0x31
    1a7e:	9a ab       	std	Y+50, r25	; 0x32
    1a80:	ab ab       	std	Y+51, r26	; 0x33
    1a82:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a84:	69 a9       	ldd	r22, Y+49	; 0x31
    1a86:	7a a9       	ldd	r23, Y+50	; 0x32
    1a88:	8b a9       	ldd	r24, Y+51	; 0x33
    1a8a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e8       	ldi	r20, 0x80	; 128
    1a92:	5f e3       	ldi	r21, 0x3F	; 63
    1a94:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1a98:	88 23       	and	r24, r24
    1a9a:	2c f4       	brge	.+10     	; 0x1aa6 <CLCD_vInit+0x1c2>
		__ticks = 1;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	98 ab       	std	Y+48, r25	; 0x30
    1aa2:	8f a7       	std	Y+47, r24	; 0x2f
    1aa4:	3f c0       	rjmp	.+126    	; 0x1b24 <CLCD_vInit+0x240>
	else if (__tmp > 65535)
    1aa6:	69 a9       	ldd	r22, Y+49	; 0x31
    1aa8:	7a a9       	ldd	r23, Y+50	; 0x32
    1aaa:	8b a9       	ldd	r24, Y+51	; 0x33
    1aac:	9c a9       	ldd	r25, Y+52	; 0x34
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	3f ef       	ldi	r19, 0xFF	; 255
    1ab2:	4f e7       	ldi	r20, 0x7F	; 127
    1ab4:	57 e4       	ldi	r21, 0x47	; 71
    1ab6:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1aba:	18 16       	cp	r1, r24
    1abc:	4c f5       	brge	.+82     	; 0x1b10 <CLCD_vInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1abe:	6d a9       	ldd	r22, Y+53	; 0x35
    1ac0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ac2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ac4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e2       	ldi	r20, 0x20	; 32
    1acc:	51 e4       	ldi	r21, 0x41	; 65
    1ace:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	bc 01       	movw	r22, r24
    1ad8:	cd 01       	movw	r24, r26
    1ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	98 ab       	std	Y+48, r25	; 0x30
    1ae4:	8f a7       	std	Y+47, r24	; 0x2f
    1ae6:	0f c0       	rjmp	.+30     	; 0x1b06 <CLCD_vInit+0x222>
    1ae8:	88 ec       	ldi	r24, 0xC8	; 200
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	9e a7       	std	Y+46, r25	; 0x2e
    1aee:	8d a7       	std	Y+45, r24	; 0x2d
    1af0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1af2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	f1 f7       	brne	.-4      	; 0x1af4 <CLCD_vInit+0x210>
    1af8:	9e a7       	std	Y+46, r25	; 0x2e
    1afa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1afe:	98 a9       	ldd	r25, Y+48	; 0x30
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	98 ab       	std	Y+48, r25	; 0x30
    1b04:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b06:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b08:	98 a9       	ldd	r25, Y+48	; 0x30
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	69 f7       	brne	.-38     	; 0x1ae8 <CLCD_vInit+0x204>
    1b0e:	14 c0       	rjmp	.+40     	; 0x1b38 <CLCD_vInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b10:	69 a9       	ldd	r22, Y+49	; 0x31
    1b12:	7a a9       	ldd	r23, Y+50	; 0x32
    1b14:	8b a9       	ldd	r24, Y+51	; 0x33
    1b16:	9c a9       	ldd	r25, Y+52	; 0x34
    1b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	98 ab       	std	Y+48, r25	; 0x30
    1b22:	8f a7       	std	Y+47, r24	; 0x2f
    1b24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b26:	98 a9       	ldd	r25, Y+48	; 0x30
    1b28:	9c a7       	std	Y+44, r25	; 0x2c
    1b2a:	8b a7       	std	Y+43, r24	; 0x2b
    1b2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <CLCD_vInit+0x24c>
    1b34:	9c a7       	std	Y+44, r25	; 0x2c
    1b36:	8b a7       	std	Y+43, r24	; 0x2b
  _delay_ms(10);

  CLCD_vSendCommand(FOUR_BITS);
    1b38:	88 e2       	ldi	r24, 0x28	; 40
    1b3a:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <CLCD_vSendCommand>
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	a0 e8       	ldi	r26, 0x80	; 128
    1b44:	bf e3       	ldi	r27, 0x3F	; 63
    1b46:	8f a3       	std	Y+39, r24	; 0x27
    1b48:	98 a7       	std	Y+40, r25	; 0x28
    1b4a:	a9 a7       	std	Y+41, r26	; 0x29
    1b4c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b50:	78 a5       	ldd	r23, Y+40	; 0x28
    1b52:	89 a5       	ldd	r24, Y+41	; 0x29
    1b54:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	4a ef       	ldi	r20, 0xFA	; 250
    1b5c:	54 e4       	ldi	r21, 0x44	; 68
    1b5e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	8b a3       	std	Y+35, r24	; 0x23
    1b68:	9c a3       	std	Y+36, r25	; 0x24
    1b6a:	ad a3       	std	Y+37, r26	; 0x25
    1b6c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b6e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b70:	7c a1       	ldd	r23, Y+36	; 0x24
    1b72:	8d a1       	ldd	r24, Y+37	; 0x25
    1b74:	9e a1       	ldd	r25, Y+38	; 0x26
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e8       	ldi	r20, 0x80	; 128
    1b7c:	5f e3       	ldi	r21, 0x3F	; 63
    1b7e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1b82:	88 23       	and	r24, r24
    1b84:	2c f4       	brge	.+10     	; 0x1b90 <CLCD_vInit+0x2ac>
		__ticks = 1;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	9a a3       	std	Y+34, r25	; 0x22
    1b8c:	89 a3       	std	Y+33, r24	; 0x21
    1b8e:	3f c0       	rjmp	.+126    	; 0x1c0e <CLCD_vInit+0x32a>
	else if (__tmp > 65535)
    1b90:	6b a1       	ldd	r22, Y+35	; 0x23
    1b92:	7c a1       	ldd	r23, Y+36	; 0x24
    1b94:	8d a1       	ldd	r24, Y+37	; 0x25
    1b96:	9e a1       	ldd	r25, Y+38	; 0x26
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	3f ef       	ldi	r19, 0xFF	; 255
    1b9c:	4f e7       	ldi	r20, 0x7F	; 127
    1b9e:	57 e4       	ldi	r21, 0x47	; 71
    1ba0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1ba4:	18 16       	cp	r1, r24
    1ba6:	4c f5       	brge	.+82     	; 0x1bfa <CLCD_vInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba8:	6f a1       	ldd	r22, Y+39	; 0x27
    1baa:	78 a5       	ldd	r23, Y+40	; 0x28
    1bac:	89 a5       	ldd	r24, Y+41	; 0x29
    1bae:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e2       	ldi	r20, 0x20	; 32
    1bb6:	51 e4       	ldi	r21, 0x41	; 65
    1bb8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	cd 01       	movw	r24, r26
    1bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	9a a3       	std	Y+34, r25	; 0x22
    1bce:	89 a3       	std	Y+33, r24	; 0x21
    1bd0:	0f c0       	rjmp	.+30     	; 0x1bf0 <CLCD_vInit+0x30c>
    1bd2:	88 ec       	ldi	r24, 0xC8	; 200
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	98 a3       	std	Y+32, r25	; 0x20
    1bd8:	8f 8f       	std	Y+31, r24	; 0x1f
    1bda:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bdc:	98 a1       	ldd	r25, Y+32	; 0x20
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <CLCD_vInit+0x2fa>
    1be2:	98 a3       	std	Y+32, r25	; 0x20
    1be4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be6:	89 a1       	ldd	r24, Y+33	; 0x21
    1be8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	9a a3       	std	Y+34, r25	; 0x22
    1bee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf0:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf2:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	69 f7       	brne	.-38     	; 0x1bd2 <CLCD_vInit+0x2ee>
    1bf8:	14 c0       	rjmp	.+40     	; 0x1c22 <CLCD_vInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfa:	6b a1       	ldd	r22, Y+35	; 0x23
    1bfc:	7c a1       	ldd	r23, Y+36	; 0x24
    1bfe:	8d a1       	ldd	r24, Y+37	; 0x25
    1c00:	9e a1       	ldd	r25, Y+38	; 0x26
    1c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	9a a3       	std	Y+34, r25	; 0x22
    1c0c:	89 a3       	std	Y+33, r24	; 0x21
    1c0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c10:	9a a1       	ldd	r25, Y+34	; 0x22
    1c12:	9e 8f       	std	Y+30, r25	; 0x1e
    1c14:	8d 8f       	std	Y+29, r24	; 0x1d
    1c16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <CLCD_vInit+0x336>
    1c1e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c20:	8d 8f       	std	Y+29, r24	; 0x1d
  _delay_ms(1);

  CLCD_vSendCommand(CLCD_DISPLAY_CURSOR);
    1c22:	8e e0       	ldi	r24, 0x0E	; 14
    1c24:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <CLCD_vSendCommand>
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	a0 e8       	ldi	r26, 0x80	; 128
    1c2e:	bf e3       	ldi	r27, 0x3F	; 63
    1c30:	89 8f       	std	Y+25, r24	; 0x19
    1c32:	9a 8f       	std	Y+26, r25	; 0x1a
    1c34:	ab 8f       	std	Y+27, r26	; 0x1b
    1c36:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c38:	69 8d       	ldd	r22, Y+25	; 0x19
    1c3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	4a ef       	ldi	r20, 0xFA	; 250
    1c46:	54 e4       	ldi	r21, 0x44	; 68
    1c48:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	8d 8b       	std	Y+21, r24	; 0x15
    1c52:	9e 8b       	std	Y+22, r25	; 0x16
    1c54:	af 8b       	std	Y+23, r26	; 0x17
    1c56:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c58:	6d 89       	ldd	r22, Y+21	; 0x15
    1c5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e8       	ldi	r20, 0x80	; 128
    1c66:	5f e3       	ldi	r21, 0x3F	; 63
    1c68:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1c6c:	88 23       	and	r24, r24
    1c6e:	2c f4       	brge	.+10     	; 0x1c7a <CLCD_vInit+0x396>
		__ticks = 1;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9c 8b       	std	Y+20, r25	; 0x14
    1c76:	8b 8b       	std	Y+19, r24	; 0x13
    1c78:	3f c0       	rjmp	.+126    	; 0x1cf8 <CLCD_vInit+0x414>
	else if (__tmp > 65535)
    1c7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c80:	98 8d       	ldd	r25, Y+24	; 0x18
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	3f ef       	ldi	r19, 0xFF	; 255
    1c86:	4f e7       	ldi	r20, 0x7F	; 127
    1c88:	57 e4       	ldi	r21, 0x47	; 71
    1c8a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1c8e:	18 16       	cp	r1, r24
    1c90:	4c f5       	brge	.+82     	; 0x1ce4 <CLCD_vInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c92:	69 8d       	ldd	r22, Y+25	; 0x19
    1c94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	40 e2       	ldi	r20, 0x20	; 32
    1ca0:	51 e4       	ldi	r21, 0x41	; 65
    1ca2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	bc 01       	movw	r22, r24
    1cac:	cd 01       	movw	r24, r26
    1cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	9c 8b       	std	Y+20, r25	; 0x14
    1cb8:	8b 8b       	std	Y+19, r24	; 0x13
    1cba:	0f c0       	rjmp	.+30     	; 0x1cda <CLCD_vInit+0x3f6>
    1cbc:	88 ec       	ldi	r24, 0xC8	; 200
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	9a 8b       	std	Y+18, r25	; 0x12
    1cc2:	89 8b       	std	Y+17, r24	; 0x11
    1cc4:	89 89       	ldd	r24, Y+17	; 0x11
    1cc6:	9a 89       	ldd	r25, Y+18	; 0x12
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <CLCD_vInit+0x3e4>
    1ccc:	9a 8b       	std	Y+18, r25	; 0x12
    1cce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	9c 8b       	std	Y+20, r25	; 0x14
    1cd8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cda:	8b 89       	ldd	r24, Y+19	; 0x13
    1cdc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	69 f7       	brne	.-38     	; 0x1cbc <CLCD_vInit+0x3d8>
    1ce2:	14 c0       	rjmp	.+40     	; 0x1d0c <CLCD_vInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cea:	98 8d       	ldd	r25, Y+24	; 0x18
    1cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9c 8b       	std	Y+20, r25	; 0x14
    1cf6:	8b 8b       	std	Y+19, r24	; 0x13
    1cf8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfc:	98 8b       	std	Y+16, r25	; 0x10
    1cfe:	8f 87       	std	Y+15, r24	; 0x0f
    1d00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d02:	98 89       	ldd	r25, Y+16	; 0x10
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <CLCD_vInit+0x420>
    1d08:	98 8b       	std	Y+16, r25	; 0x10
    1d0a:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);

  CLCD_vClearScreen();
    1d0c:	0e 94 52 10 	call	0x20a4	; 0x20a4 <CLCD_vClearScreen>

  CLCD_vSendCommand(CLCD_ENTRY_MODE);
    1d10:	86 e0       	ldi	r24, 0x06	; 6
    1d12:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <CLCD_vSendCommand>
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	a0 e8       	ldi	r26, 0x80	; 128
    1d1c:	bf e3       	ldi	r27, 0x3F	; 63
    1d1e:	8b 87       	std	Y+11, r24	; 0x0b
    1d20:	9c 87       	std	Y+12, r25	; 0x0c
    1d22:	ad 87       	std	Y+13, r26	; 0x0d
    1d24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	4a ef       	ldi	r20, 0xFA	; 250
    1d34:	54 e4       	ldi	r21, 0x44	; 68
    1d36:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	8f 83       	std	Y+7, r24	; 0x07
    1d40:	98 87       	std	Y+8, r25	; 0x08
    1d42:	a9 87       	std	Y+9, r26	; 0x09
    1d44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d46:	6f 81       	ldd	r22, Y+7	; 0x07
    1d48:	78 85       	ldd	r23, Y+8	; 0x08
    1d4a:	89 85       	ldd	r24, Y+9	; 0x09
    1d4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e8       	ldi	r20, 0x80	; 128
    1d54:	5f e3       	ldi	r21, 0x3F	; 63
    1d56:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1d5a:	88 23       	and	r24, r24
    1d5c:	2c f4       	brge	.+10     	; 0x1d68 <CLCD_vInit+0x484>
		__ticks = 1;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	8d 83       	std	Y+5, r24	; 0x05
    1d66:	3f c0       	rjmp	.+126    	; 0x1de6 <CLCD_vInit+0x502>
	else if (__tmp > 65535)
    1d68:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6a:	78 85       	ldd	r23, Y+8	; 0x08
    1d6c:	89 85       	ldd	r24, Y+9	; 0x09
    1d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	3f ef       	ldi	r19, 0xFF	; 255
    1d74:	4f e7       	ldi	r20, 0x7F	; 127
    1d76:	57 e4       	ldi	r21, 0x47	; 71
    1d78:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1d7c:	18 16       	cp	r1, r24
    1d7e:	4c f5       	brge	.+82     	; 0x1dd2 <CLCD_vInit+0x4ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e2       	ldi	r20, 0x20	; 32
    1d8e:	51 e4       	ldi	r21, 0x41	; 65
    1d90:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	bc 01       	movw	r22, r24
    1d9a:	cd 01       	movw	r24, r26
    1d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	9e 83       	std	Y+6, r25	; 0x06
    1da6:	8d 83       	std	Y+5, r24	; 0x05
    1da8:	0f c0       	rjmp	.+30     	; 0x1dc8 <CLCD_vInit+0x4e4>
    1daa:	88 ec       	ldi	r24, 0xC8	; 200
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9c 83       	std	Y+4, r25	; 0x04
    1db0:	8b 83       	std	Y+3, r24	; 0x03
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	9c 81       	ldd	r25, Y+4	; 0x04
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <CLCD_vInit+0x4d2>
    1dba:	9c 83       	std	Y+4, r25	; 0x04
    1dbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	9e 83       	std	Y+6, r25	; 0x06
    1dc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dca:	9e 81       	ldd	r25, Y+6	; 0x06
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	69 f7       	brne	.-38     	; 0x1daa <CLCD_vInit+0x4c6>
    1dd0:	14 c0       	rjmp	.+40     	; 0x1dfa <CLCD_vInit+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd4:	78 85       	ldd	r23, Y+8	; 0x08
    1dd6:	89 85       	ldd	r24, Y+9	; 0x09
    1dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9e 83       	std	Y+6, r25	; 0x06
    1de4:	8d 83       	std	Y+5, r24	; 0x05
    1de6:	8d 81       	ldd	r24, Y+5	; 0x05
    1de8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dea:	9a 83       	std	Y+2, r25	; 0x02
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	9a 81       	ldd	r25, Y+2	; 0x02
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <CLCD_vInit+0x50e>
    1df6:	9a 83       	std	Y+2, r25	; 0x02
    1df8:	89 83       	std	Y+1, r24	; 0x01
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    1dfa:	ca 5b       	subi	r28, 0xBA	; 186
    1dfc:	df 4f       	sbci	r29, 0xFF	; 255
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	1f 91       	pop	r17
    1e0e:	0f 91       	pop	r16
    1e10:	08 95       	ret

00001e12 <CLCD_vSendData>:
 * Parameters :
 *		=> Copy_u8Data --> Data that you want to display (for every location )
 * return     : nothing
 */
void CLCD_vSendData(u8 Copy_u8Data)
{
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	0f 92       	push	r0
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_HIGH);
    1e1e:	83 e0       	ldi	r24, 0x03	; 3
    1e20:	60 e0       	ldi	r22, 0x00	; 0
    1e22:	41 e0       	ldi	r20, 0x01	; 1
    1e24:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    1e28:	83 e0       	ldi	r24, 0x03	; 3
    1e2a:	61 e0       	ldi	r22, 0x01	; 1
    1e2c:	40 e0       	ldi	r20, 0x00	; 0
    1e2e:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enumWritePinVal>
  
#if CLCD_DATA_NIBBLE == CLCD_HIGH_NIBBLE

  DIO_vWriteHighNibble(CLCD_DATA_PORT, (Copy_u8Data >> 4)); // send the most 4 bits of data to high nibbles
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	98 2f       	mov	r25, r24
    1e36:	92 95       	swap	r25
    1e38:	9f 70       	andi	r25, 0x0F	; 15
    1e3a:	83 e0       	ldi	r24, 0x03	; 3
    1e3c:	69 2f       	mov	r22, r25
    1e3e:	0e 94 b7 1a 	call	0x356e	; 0x356e <DIO_vWriteHighNibble>
  CLCD_vSendFallingEdge();
    1e42:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <CLCD_vSendFallingEdge>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
    1e46:	83 e0       	ldi	r24, 0x03	; 3
    1e48:	69 81       	ldd	r22, Y+1	; 0x01
    1e4a:	0e 94 b7 1a 	call	0x356e	; 0x356e <DIO_vWriteHighNibble>
  CLCD_vSendFallingEdge();
    1e4e:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    1e52:	0f 90       	pop	r0
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <CLCD_vSendCommand>:
 * Parameters :
 *		=> Copy_u8Command --> Command number
 * return     : nothing
 */
void CLCD_vSendCommand(u8 Copy_u8Command)
{
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	0f 92       	push	r0
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_LOW);
    1e66:	83 e0       	ldi	r24, 0x03	; 3
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	40 e0       	ldi	r20, 0x00	; 0
    1e6c:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    1e70:	83 e0       	ldi	r24, 0x03	; 3
    1e72:	61 e0       	ldi	r22, 0x01	; 1
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enumWritePinVal>

#if CLCD_DATA_NIBBLE == CLCD_HIGH_NIBBLE

  DIO_vWriteHighNibble(CLCD_DATA_PORT, (Copy_u8Command >> 4)); // send the most 4 bits of data to high nibbles
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	98 2f       	mov	r25, r24
    1e7e:	92 95       	swap	r25
    1e80:	9f 70       	andi	r25, 0x0F	; 15
    1e82:	83 e0       	ldi	r24, 0x03	; 3
    1e84:	69 2f       	mov	r22, r25
    1e86:	0e 94 b7 1a 	call	0x356e	; 0x356e <DIO_vWriteHighNibble>
  CLCD_vSendFallingEdge();
    1e8a:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <CLCD_vSendFallingEdge>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to high nibbles
    1e8e:	83 e0       	ldi	r24, 0x03	; 3
    1e90:	69 81       	ldd	r22, Y+1	; 0x01
    1e92:	0e 94 b7 1a 	call	0x356e	; 0x356e <DIO_vWriteHighNibble>
  CLCD_vSendFallingEdge();
    1e96:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    1e9a:	0f 90       	pop	r0
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <CLCD_vSendFallingEdge>:
 * Parameters : nothing
 * return     : nothing
 */

static void CLCD_vSendFallingEdge(void)
{
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
    1eaa:	6c 97       	sbiw	r28, 0x1c	; 28
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	f8 94       	cli
    1eb0:	de bf       	out	0x3e, r29	; 62
    1eb2:	0f be       	out	0x3f, r0	; 63
    1eb4:	cd bf       	out	0x3d, r28	; 61
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    1eb6:	83 e0       	ldi	r24, 0x03	; 3
    1eb8:	62 e0       	ldi	r22, 0x02	; 2
    1eba:	41 e0       	ldi	r20, 0x01	; 1
    1ebc:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enumWritePinVal>
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	a0 e8       	ldi	r26, 0x80	; 128
    1ec6:	bf e3       	ldi	r27, 0x3F	; 63
    1ec8:	89 8f       	std	Y+25, r24	; 0x19
    1eca:	9a 8f       	std	Y+26, r25	; 0x1a
    1ecc:	ab 8f       	std	Y+27, r26	; 0x1b
    1ece:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ed2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ed4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ed6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	4a ef       	ldi	r20, 0xFA	; 250
    1ede:	54 e4       	ldi	r21, 0x44	; 68
    1ee0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	8d 8b       	std	Y+21, r24	; 0x15
    1eea:	9e 8b       	std	Y+22, r25	; 0x16
    1eec:	af 8b       	std	Y+23, r26	; 0x17
    1eee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ef0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ef2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ef4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e8       	ldi	r20, 0x80	; 128
    1efe:	5f e3       	ldi	r21, 0x3F	; 63
    1f00:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1f04:	88 23       	and	r24, r24
    1f06:	2c f4       	brge	.+10     	; 0x1f12 <CLCD_vSendFallingEdge+0x70>
		__ticks = 1;
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	9c 8b       	std	Y+20, r25	; 0x14
    1f0e:	8b 8b       	std	Y+19, r24	; 0x13
    1f10:	3f c0       	rjmp	.+126    	; 0x1f90 <CLCD_vSendFallingEdge+0xee>
	else if (__tmp > 65535)
    1f12:	6d 89       	ldd	r22, Y+21	; 0x15
    1f14:	7e 89       	ldd	r23, Y+22	; 0x16
    1f16:	8f 89       	ldd	r24, Y+23	; 0x17
    1f18:	98 8d       	ldd	r25, Y+24	; 0x18
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	3f ef       	ldi	r19, 0xFF	; 255
    1f1e:	4f e7       	ldi	r20, 0x7F	; 127
    1f20:	57 e4       	ldi	r21, 0x47	; 71
    1f22:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1f26:	18 16       	cp	r1, r24
    1f28:	4c f5       	brge	.+82     	; 0x1f7c <CLCD_vSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	40 e2       	ldi	r20, 0x20	; 32
    1f38:	51 e4       	ldi	r21, 0x41	; 65
    1f3a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	bc 01       	movw	r22, r24
    1f44:	cd 01       	movw	r24, r26
    1f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	9c 8b       	std	Y+20, r25	; 0x14
    1f50:	8b 8b       	std	Y+19, r24	; 0x13
    1f52:	0f c0       	rjmp	.+30     	; 0x1f72 <CLCD_vSendFallingEdge+0xd0>
    1f54:	88 ec       	ldi	r24, 0xC8	; 200
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	9a 8b       	std	Y+18, r25	; 0x12
    1f5a:	89 8b       	std	Y+17, r24	; 0x11
    1f5c:	89 89       	ldd	r24, Y+17	; 0x11
    1f5e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <CLCD_vSendFallingEdge+0xbe>
    1f64:	9a 8b       	std	Y+18, r25	; 0x12
    1f66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f68:	8b 89       	ldd	r24, Y+19	; 0x13
    1f6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	9c 8b       	std	Y+20, r25	; 0x14
    1f70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f72:	8b 89       	ldd	r24, Y+19	; 0x13
    1f74:	9c 89       	ldd	r25, Y+20	; 0x14
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	69 f7       	brne	.-38     	; 0x1f54 <CLCD_vSendFallingEdge+0xb2>
    1f7a:	14 c0       	rjmp	.+40     	; 0x1fa4 <CLCD_vSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f80:	8f 89       	ldd	r24, Y+23	; 0x17
    1f82:	98 8d       	ldd	r25, Y+24	; 0x18
    1f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	9c 8b       	std	Y+20, r25	; 0x14
    1f8e:	8b 8b       	std	Y+19, r24	; 0x13
    1f90:	8b 89       	ldd	r24, Y+19	; 0x13
    1f92:	9c 89       	ldd	r25, Y+20	; 0x14
    1f94:	98 8b       	std	Y+16, r25	; 0x10
    1f96:	8f 87       	std	Y+15, r24	; 0x0f
    1f98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f9a:	98 89       	ldd	r25, Y+16	; 0x10
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	f1 f7       	brne	.-4      	; 0x1f9c <CLCD_vSendFallingEdge+0xfa>
    1fa0:	98 8b       	std	Y+16, r25	; 0x10
    1fa2:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    1fa4:	83 e0       	ldi	r24, 0x03	; 3
    1fa6:	62 e0       	ldi	r22, 0x02	; 2
    1fa8:	40 e0       	ldi	r20, 0x00	; 0
    1faa:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <DIO_enumWritePinVal>
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	a0 e8       	ldi	r26, 0x80	; 128
    1fb4:	bf e3       	ldi	r27, 0x3F	; 63
    1fb6:	8b 87       	std	Y+11, r24	; 0x0b
    1fb8:	9c 87       	std	Y+12, r25	; 0x0c
    1fba:	ad 87       	std	Y+13, r26	; 0x0d
    1fbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	4a ef       	ldi	r20, 0xFA	; 250
    1fcc:	54 e4       	ldi	r21, 0x44	; 68
    1fce:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	8f 83       	std	Y+7, r24	; 0x07
    1fd8:	98 87       	std	Y+8, r25	; 0x08
    1fda:	a9 87       	std	Y+9, r26	; 0x09
    1fdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fde:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe0:	78 85       	ldd	r23, Y+8	; 0x08
    1fe2:	89 85       	ldd	r24, Y+9	; 0x09
    1fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e8       	ldi	r20, 0x80	; 128
    1fec:	5f e3       	ldi	r21, 0x3F	; 63
    1fee:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1ff2:	88 23       	and	r24, r24
    1ff4:	2c f4       	brge	.+10     	; 0x2000 <CLCD_vSendFallingEdge+0x15e>
		__ticks = 1;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	9e 83       	std	Y+6, r25	; 0x06
    1ffc:	8d 83       	std	Y+5, r24	; 0x05
    1ffe:	3f c0       	rjmp	.+126    	; 0x207e <CLCD_vSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    2000:	6f 81       	ldd	r22, Y+7	; 0x07
    2002:	78 85       	ldd	r23, Y+8	; 0x08
    2004:	89 85       	ldd	r24, Y+9	; 0x09
    2006:	9a 85       	ldd	r25, Y+10	; 0x0a
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	3f ef       	ldi	r19, 0xFF	; 255
    200c:	4f e7       	ldi	r20, 0x7F	; 127
    200e:	57 e4       	ldi	r21, 0x47	; 71
    2010:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2014:	18 16       	cp	r1, r24
    2016:	4c f5       	brge	.+82     	; 0x206a <CLCD_vSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2018:	6b 85       	ldd	r22, Y+11	; 0x0b
    201a:	7c 85       	ldd	r23, Y+12	; 0x0c
    201c:	8d 85       	ldd	r24, Y+13	; 0x0d
    201e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e2       	ldi	r20, 0x20	; 32
    2026:	51 e4       	ldi	r21, 0x41	; 65
    2028:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	bc 01       	movw	r22, r24
    2032:	cd 01       	movw	r24, r26
    2034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	9e 83       	std	Y+6, r25	; 0x06
    203e:	8d 83       	std	Y+5, r24	; 0x05
    2040:	0f c0       	rjmp	.+30     	; 0x2060 <CLCD_vSendFallingEdge+0x1be>
    2042:	88 ec       	ldi	r24, 0xC8	; 200
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	9c 83       	std	Y+4, r25	; 0x04
    2048:	8b 83       	std	Y+3, r24	; 0x03
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	9c 81       	ldd	r25, Y+4	; 0x04
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	f1 f7       	brne	.-4      	; 0x204e <CLCD_vSendFallingEdge+0x1ac>
    2052:	9c 83       	std	Y+4, r25	; 0x04
    2054:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2056:	8d 81       	ldd	r24, Y+5	; 0x05
    2058:	9e 81       	ldd	r25, Y+6	; 0x06
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	9e 83       	std	Y+6, r25	; 0x06
    205e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2060:	8d 81       	ldd	r24, Y+5	; 0x05
    2062:	9e 81       	ldd	r25, Y+6	; 0x06
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	69 f7       	brne	.-38     	; 0x2042 <CLCD_vSendFallingEdge+0x1a0>
    2068:	14 c0       	rjmp	.+40     	; 0x2092 <CLCD_vSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206a:	6f 81       	ldd	r22, Y+7	; 0x07
    206c:	78 85       	ldd	r23, Y+8	; 0x08
    206e:	89 85       	ldd	r24, Y+9	; 0x09
    2070:	9a 85       	ldd	r25, Y+10	; 0x0a
    2072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	9e 83       	std	Y+6, r25	; 0x06
    207c:	8d 83       	std	Y+5, r24	; 0x05
    207e:	8d 81       	ldd	r24, Y+5	; 0x05
    2080:	9e 81       	ldd	r25, Y+6	; 0x06
    2082:	9a 83       	std	Y+2, r25	; 0x02
    2084:	89 83       	std	Y+1, r24	; 0x01
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	9a 81       	ldd	r25, Y+2	; 0x02
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <CLCD_vSendFallingEdge+0x1e8>
    208e:	9a 83       	std	Y+2, r25	; 0x02
    2090:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    2092:	6c 96       	adiw	r28, 0x1c	; 28
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	f8 94       	cli
    2098:	de bf       	out	0x3e, r29	; 62
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	cd bf       	out	0x3d, r28	; 61
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	08 95       	ret

000020a4 <CLCD_vClearScreen>:
 *                                    *-----------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vClearScreen(void)
{
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	2e 97       	sbiw	r28, 0x0e	; 14
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_ClEAR);
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <CLCD_vSendCommand>
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a0 e2       	ldi	r26, 0x20	; 32
    20c4:	b1 e4       	ldi	r27, 0x41	; 65
    20c6:	8b 87       	std	Y+11, r24	; 0x0b
    20c8:	9c 87       	std	Y+12, r25	; 0x0c
    20ca:	ad 87       	std	Y+13, r26	; 0x0d
    20cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	4a ef       	ldi	r20, 0xFA	; 250
    20dc:	54 e4       	ldi	r21, 0x44	; 68
    20de:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	8f 83       	std	Y+7, r24	; 0x07
    20e8:	98 87       	std	Y+8, r25	; 0x08
    20ea:	a9 87       	std	Y+9, r26	; 0x09
    20ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ee:	6f 81       	ldd	r22, Y+7	; 0x07
    20f0:	78 85       	ldd	r23, Y+8	; 0x08
    20f2:	89 85       	ldd	r24, Y+9	; 0x09
    20f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e8       	ldi	r20, 0x80	; 128
    20fc:	5f e3       	ldi	r21, 0x3F	; 63
    20fe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2102:	88 23       	and	r24, r24
    2104:	2c f4       	brge	.+10     	; 0x2110 <CLCD_vClearScreen+0x6c>
		__ticks = 1;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9e 83       	std	Y+6, r25	; 0x06
    210c:	8d 83       	std	Y+5, r24	; 0x05
    210e:	3f c0       	rjmp	.+126    	; 0x218e <CLCD_vClearScreen+0xea>
	else if (__tmp > 65535)
    2110:	6f 81       	ldd	r22, Y+7	; 0x07
    2112:	78 85       	ldd	r23, Y+8	; 0x08
    2114:	89 85       	ldd	r24, Y+9	; 0x09
    2116:	9a 85       	ldd	r25, Y+10	; 0x0a
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	3f ef       	ldi	r19, 0xFF	; 255
    211c:	4f e7       	ldi	r20, 0x7F	; 127
    211e:	57 e4       	ldi	r21, 0x47	; 71
    2120:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2124:	18 16       	cp	r1, r24
    2126:	4c f5       	brge	.+82     	; 0x217a <CLCD_vClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2128:	6b 85       	ldd	r22, Y+11	; 0x0b
    212a:	7c 85       	ldd	r23, Y+12	; 0x0c
    212c:	8d 85       	ldd	r24, Y+13	; 0x0d
    212e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e2       	ldi	r20, 0x20	; 32
    2136:	51 e4       	ldi	r21, 0x41	; 65
    2138:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9e 83       	std	Y+6, r25	; 0x06
    214e:	8d 83       	std	Y+5, r24	; 0x05
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <CLCD_vClearScreen+0xcc>
    2152:	88 ec       	ldi	r24, 0xC8	; 200
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	9c 83       	std	Y+4, r25	; 0x04
    2158:	8b 83       	std	Y+3, r24	; 0x03
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	9c 81       	ldd	r25, Y+4	; 0x04
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <CLCD_vClearScreen+0xba>
    2162:	9c 83       	std	Y+4, r25	; 0x04
    2164:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2166:	8d 81       	ldd	r24, Y+5	; 0x05
    2168:	9e 81       	ldd	r25, Y+6	; 0x06
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	9e 83       	std	Y+6, r25	; 0x06
    216e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2170:	8d 81       	ldd	r24, Y+5	; 0x05
    2172:	9e 81       	ldd	r25, Y+6	; 0x06
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	69 f7       	brne	.-38     	; 0x2152 <CLCD_vClearScreen+0xae>
    2178:	14 c0       	rjmp	.+40     	; 0x21a2 <CLCD_vClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217a:	6f 81       	ldd	r22, Y+7	; 0x07
    217c:	78 85       	ldd	r23, Y+8	; 0x08
    217e:	89 85       	ldd	r24, Y+9	; 0x09
    2180:	9a 85       	ldd	r25, Y+10	; 0x0a
    2182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9e 83       	std	Y+6, r25	; 0x06
    218c:	8d 83       	std	Y+5, r24	; 0x05
    218e:	8d 81       	ldd	r24, Y+5	; 0x05
    2190:	9e 81       	ldd	r25, Y+6	; 0x06
    2192:	9a 83       	std	Y+2, r25	; 0x02
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	9a 81       	ldd	r25, Y+2	; 0x02
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <CLCD_vClearScreen+0xf6>
    219e:	9a 83       	std	Y+2, r25	; 0x02
    21a0:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(10); // wait more than 1.53 ms
}
    21a2:	2e 96       	adiw	r28, 0x0e	; 14
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <CLCD_vSendString>:
 *		=> Copy_u8ptrString  --> Pointer to the string
 * return     : nothing
 */

void CLCD_vSendString(const u8 *Copy_u8PrtStrign)
{
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <CLCD_vSendString+0x6>
    21ba:	0f 92       	push	r0
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	9b 83       	std	Y+3, r25	; 0x03
    21c2:	8a 83       	std	Y+2, r24	; 0x02
  u8 LOC_u8Iterator = 0;
    21c4:	19 82       	std	Y+1, r1	; 0x01
    21c6:	0e c0       	rjmp	.+28     	; 0x21e4 <CLCD_vSendString+0x30>
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	28 2f       	mov	r18, r24
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	9b 81       	ldd	r25, Y+3	; 0x03
    21d2:	fc 01       	movw	r30, r24
    21d4:	e2 0f       	add	r30, r18
    21d6:	f3 1f       	adc	r31, r19
    21d8:	80 81       	ld	r24, Z
    21da:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <CLCD_vSendData>
    LOC_u8Iterator++;
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	8f 5f       	subi	r24, 0xFF	; 255
    21e2:	89 83       	std	Y+1, r24	; 0x01
 */

void CLCD_vSendString(const u8 *Copy_u8PrtStrign)
{
  u8 LOC_u8Iterator = 0;
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	28 2f       	mov	r18, r24
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	9b 81       	ldd	r25, Y+3	; 0x03
    21ee:	fc 01       	movw	r30, r24
    21f0:	e2 0f       	add	r30, r18
    21f2:	f3 1f       	adc	r31, r19
    21f4:	80 81       	ld	r24, Z
    21f6:	88 23       	and	r24, r24
    21f8:	39 f7       	brne	.-50     	; 0x21c8 <CLCD_vSendString+0x14>
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    LOC_u8Iterator++;
  }
}
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	cf 91       	pop	r28
    2202:	df 91       	pop	r29
    2204:	08 95       	ret

00002206 <CLCD_vSendIntNumber>:
 *		=> Copy_s32Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendIntNumber(s32 Copy_s32Number)
{
    2206:	ef 92       	push	r14
    2208:	ff 92       	push	r15
    220a:	0f 93       	push	r16
    220c:	1f 93       	push	r17
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	28 97       	sbiw	r28, 0x08	; 8
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61
    2222:	6d 83       	std	Y+5, r22	; 0x05
    2224:	7e 83       	std	Y+6, r23	; 0x06
    2226:	8f 83       	std	Y+7, r24	; 0x07
    2228:	98 87       	std	Y+8, r25	; 0x08

  u32 LOC_u32Reverse = 1;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	a0 e0       	ldi	r26, 0x00	; 0
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	89 83       	std	Y+1, r24	; 0x01
    2234:	9a 83       	std	Y+2, r25	; 0x02
    2236:	ab 83       	std	Y+3, r26	; 0x03
    2238:	bc 83       	std	Y+4, r27	; 0x04

  if (Copy_s32Number == 0)
    223a:	8d 81       	ldd	r24, Y+5	; 0x05
    223c:	9e 81       	ldd	r25, Y+6	; 0x06
    223e:	af 81       	ldd	r26, Y+7	; 0x07
    2240:	b8 85       	ldd	r27, Y+8	; 0x08
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	a1 05       	cpc	r26, r1
    2246:	b1 05       	cpc	r27, r1
    2248:	21 f4       	brne	.+8      	; 0x2252 <CLCD_vSendIntNumber+0x4c>
  {
    CLCD_vSendData('0');
    224a:	80 e3       	ldi	r24, 0x30	; 48
    224c:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <CLCD_vSendData>
    2250:	85 c0       	rjmp	.+266    	; 0x235c <CLCD_vSendIntNumber+0x156>
  }
  else
  {
    if (Copy_s32Number < 0)
    2252:	8d 81       	ldd	r24, Y+5	; 0x05
    2254:	9e 81       	ldd	r25, Y+6	; 0x06
    2256:	af 81       	ldd	r26, Y+7	; 0x07
    2258:	b8 85       	ldd	r27, Y+8	; 0x08
    225a:	bb 23       	and	r27, r27
    225c:	0c f0       	brlt	.+2      	; 0x2260 <CLCD_vSendIntNumber+0x5a>
    225e:	49 c0       	rjmp	.+146    	; 0x22f2 <CLCD_vSendIntNumber+0xec>
    {
      CLCD_vSendData('-');
    2260:	8d e2       	ldi	r24, 0x2D	; 45
    2262:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <CLCD_vSendData>
      Copy_s32Number = (-1 * Copy_s32Number);
    2266:	8d 81       	ldd	r24, Y+5	; 0x05
    2268:	9e 81       	ldd	r25, Y+6	; 0x06
    226a:	af 81       	ldd	r26, Y+7	; 0x07
    226c:	b8 85       	ldd	r27, Y+8	; 0x08
    226e:	b0 95       	com	r27
    2270:	a0 95       	com	r26
    2272:	90 95       	com	r25
    2274:	81 95       	neg	r24
    2276:	9f 4f       	sbci	r25, 0xFF	; 255
    2278:	af 4f       	sbci	r26, 0xFF	; 255
    227a:	bf 4f       	sbci	r27, 0xFF	; 255
    227c:	8d 83       	std	Y+5, r24	; 0x05
    227e:	9e 83       	std	Y+6, r25	; 0x06
    2280:	af 83       	std	Y+7, r26	; 0x07
    2282:	b8 87       	std	Y+8, r27	; 0x08
    2284:	36 c0       	rjmp	.+108    	; 0x22f2 <CLCD_vSendIntNumber+0xec>
    }
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	9a 81       	ldd	r25, Y+2	; 0x02
    228a:	ab 81       	ldd	r26, Y+3	; 0x03
    228c:	bc 81       	ldd	r27, Y+4	; 0x04
    228e:	2a e0       	ldi	r18, 0x0A	; 10
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	50 e0       	ldi	r21, 0x00	; 0
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__mulsi3>
    229e:	7b 01       	movw	r14, r22
    22a0:	8c 01       	movw	r16, r24
    22a2:	8d 81       	ldd	r24, Y+5	; 0x05
    22a4:	9e 81       	ldd	r25, Y+6	; 0x06
    22a6:	af 81       	ldd	r26, Y+7	; 0x07
    22a8:	b8 85       	ldd	r27, Y+8	; 0x08
    22aa:	2a e0       	ldi	r18, 0x0A	; 10
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	bc 01       	movw	r22, r24
    22b4:	cd 01       	movw	r24, r26
    22b6:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <__divmodsi4>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	8e 0d       	add	r24, r14
    22c0:	9f 1d       	adc	r25, r15
    22c2:	a0 1f       	adc	r26, r16
    22c4:	b1 1f       	adc	r27, r17
    22c6:	89 83       	std	Y+1, r24	; 0x01
    22c8:	9a 83       	std	Y+2, r25	; 0x02
    22ca:	ab 83       	std	Y+3, r26	; 0x03
    22cc:	bc 83       	std	Y+4, r27	; 0x04
      Copy_s32Number /= 10;
    22ce:	8d 81       	ldd	r24, Y+5	; 0x05
    22d0:	9e 81       	ldd	r25, Y+6	; 0x06
    22d2:	af 81       	ldd	r26, Y+7	; 0x07
    22d4:	b8 85       	ldd	r27, Y+8	; 0x08
    22d6:	2a e0       	ldi	r18, 0x0A	; 10
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e0       	ldi	r20, 0x00	; 0
    22dc:	50 e0       	ldi	r21, 0x00	; 0
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <__divmodsi4>
    22e6:	da 01       	movw	r26, r20
    22e8:	c9 01       	movw	r24, r18
    22ea:	8d 83       	std	Y+5, r24	; 0x05
    22ec:	9e 83       	std	Y+6, r25	; 0x06
    22ee:	af 83       	std	Y+7, r26	; 0x07
    22f0:	b8 87       	std	Y+8, r27	; 0x08
    if (Copy_s32Number < 0)
    {
      CLCD_vSendData('-');
      Copy_s32Number = (-1 * Copy_s32Number);
    }
    while (Copy_s32Number != 0)
    22f2:	8d 81       	ldd	r24, Y+5	; 0x05
    22f4:	9e 81       	ldd	r25, Y+6	; 0x06
    22f6:	af 81       	ldd	r26, Y+7	; 0x07
    22f8:	b8 85       	ldd	r27, Y+8	; 0x08
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	a1 05       	cpc	r26, r1
    22fe:	b1 05       	cpc	r27, r1
    2300:	11 f6       	brne	.-124    	; 0x2286 <CLCD_vSendIntNumber+0x80>
    2302:	23 c0       	rjmp	.+70     	; 0x234a <CLCD_vSendIntNumber+0x144>
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	9a 81       	ldd	r25, Y+2	; 0x02
    2308:	ab 81       	ldd	r26, Y+3	; 0x03
    230a:	bc 81       	ldd	r27, Y+4	; 0x04
    230c:	2a e0       	ldi	r18, 0x0A	; 10
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	40 e0       	ldi	r20, 0x00	; 0
    2312:	50 e0       	ldi	r21, 0x00	; 0
    2314:	bc 01       	movw	r22, r24
    2316:	cd 01       	movw	r24, r26
    2318:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__udivmodsi4>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	80 5d       	subi	r24, 0xD0	; 208
    2322:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <CLCD_vSendData>
      LOC_u32Reverse /= 10;
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	9a 81       	ldd	r25, Y+2	; 0x02
    232a:	ab 81       	ldd	r26, Y+3	; 0x03
    232c:	bc 81       	ldd	r27, Y+4	; 0x04
    232e:	2a e0       	ldi	r18, 0x0A	; 10
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e0       	ldi	r20, 0x00	; 0
    2334:	50 e0       	ldi	r21, 0x00	; 0
    2336:	bc 01       	movw	r22, r24
    2338:	cd 01       	movw	r24, r26
    233a:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__udivmodsi4>
    233e:	da 01       	movw	r26, r20
    2340:	c9 01       	movw	r24, r18
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	9a 83       	std	Y+2, r25	; 0x02
    2346:	ab 83       	std	Y+3, r26	; 0x03
    2348:	bc 83       	std	Y+4, r27	; 0x04
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	9a 81       	ldd	r25, Y+2	; 0x02
    234e:	ab 81       	ldd	r26, Y+3	; 0x03
    2350:	bc 81       	ldd	r27, Y+4	; 0x04
    2352:	81 30       	cpi	r24, 0x01	; 1
    2354:	91 05       	cpc	r25, r1
    2356:	a1 05       	cpc	r26, r1
    2358:	b1 05       	cpc	r27, r1
    235a:	a1 f6       	brne	.-88     	; 0x2304 <CLCD_vSendIntNumber+0xfe>
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
      LOC_u32Reverse /= 10;
    }
  }
}
    235c:	28 96       	adiw	r28, 0x08	; 8
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	1f 91       	pop	r17
    236e:	0f 91       	pop	r16
    2370:	ff 90       	pop	r15
    2372:	ef 90       	pop	r14
    2374:	08 95       	ret

00002376 <CLCD_vSendFloatNumber>:
 *		=> Copy_f64Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendFloatNumber(f64 Copy_f64Number)
{
    2376:	af 92       	push	r10
    2378:	bf 92       	push	r11
    237a:	cf 92       	push	r12
    237c:	df 92       	push	r13
    237e:	ef 92       	push	r14
    2380:	ff 92       	push	r15
    2382:	0f 93       	push	r16
    2384:	1f 93       	push	r17
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	00 d0       	rcall	.+0      	; 0x238c <CLCD_vSendFloatNumber+0x16>
    238c:	00 d0       	rcall	.+0      	; 0x238e <CLCD_vSendFloatNumber+0x18>
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	69 83       	std	Y+1, r22	; 0x01
    2394:	7a 83       	std	Y+2, r23	; 0x02
    2396:	8b 83       	std	Y+3, r24	; 0x03
    2398:	9c 83       	std	Y+4, r25	; 0x04
  CLCD_vSendIntNumber((s32)Copy_f64Number);
    239a:	69 81       	ldd	r22, Y+1	; 0x01
    239c:	7a 81       	ldd	r23, Y+2	; 0x02
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	9c 81       	ldd	r25, Y+4	; 0x04
    23a2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	bc 01       	movw	r22, r24
    23ac:	cd 01       	movw	r24, r26
    23ae:	0e 94 03 11 	call	0x2206	; 0x2206 <CLCD_vSendIntNumber>
  if (Copy_f64Number < 0)
    23b2:	69 81       	ldd	r22, Y+1	; 0x01
    23b4:	7a 81       	ldd	r23, Y+2	; 0x02
    23b6:	8b 81       	ldd	r24, Y+3	; 0x03
    23b8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e0       	ldi	r20, 0x00	; 0
    23c0:	50 e0       	ldi	r21, 0x00	; 0
    23c2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    23c6:	88 23       	and	r24, r24
    23c8:	4c f4       	brge	.+18     	; 0x23dc <CLCD_vSendFloatNumber+0x66>
  {
    Copy_f64Number *= -1;
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	9a 81       	ldd	r25, Y+2	; 0x02
    23ce:	ab 81       	ldd	r26, Y+3	; 0x03
    23d0:	bc 81       	ldd	r27, Y+4	; 0x04
    23d2:	b0 58       	subi	r27, 0x80	; 128
    23d4:	89 83       	std	Y+1, r24	; 0x01
    23d6:	9a 83       	std	Y+2, r25	; 0x02
    23d8:	ab 83       	std	Y+3, r26	; 0x03
    23da:	bc 83       	std	Y+4, r27	; 0x04
  }
  Copy_f64Number = (f64)Copy_f64Number - (s32)Copy_f64Number;
    23dc:	69 81       	ldd	r22, Y+1	; 0x01
    23de:	7a 81       	ldd	r23, Y+2	; 0x02
    23e0:	8b 81       	ldd	r24, Y+3	; 0x03
    23e2:	9c 81       	ldd	r25, Y+4	; 0x04
    23e4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	bc 01       	movw	r22, r24
    23ee:	cd 01       	movw	r24, r26
    23f0:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatsisf>
    23f4:	9b 01       	movw	r18, r22
    23f6:	ac 01       	movw	r20, r24
    23f8:	69 81       	ldd	r22, Y+1	; 0x01
    23fa:	7a 81       	ldd	r23, Y+2	; 0x02
    23fc:	8b 81       	ldd	r24, Y+3	; 0x03
    23fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2400:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	89 83       	std	Y+1, r24	; 0x01
    240a:	9a 83       	std	Y+2, r25	; 0x02
    240c:	ab 83       	std	Y+3, r26	; 0x03
    240e:	bc 83       	std	Y+4, r27	; 0x04
  Copy_f64Number *= 10000;
    2410:	69 81       	ldd	r22, Y+1	; 0x01
    2412:	7a 81       	ldd	r23, Y+2	; 0x02
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	9c 81       	ldd	r25, Y+4	; 0x04
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e4       	ldi	r19, 0x40	; 64
    241c:	4c e1       	ldi	r20, 0x1C	; 28
    241e:	56 e4       	ldi	r21, 0x46	; 70
    2420:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	9a 83       	std	Y+2, r25	; 0x02
    242c:	ab 83       	std	Y+3, r26	; 0x03
    242e:	bc 83       	std	Y+4, r27	; 0x04
  if ((s64)Copy_f64Number != 0)
    2430:	69 81       	ldd	r22, Y+1	; 0x01
    2432:	7a 81       	ldd	r23, Y+2	; 0x02
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	9c 81       	ldd	r25, Y+4	; 0x04
    2438:	0e 94 75 00 	call	0xea	; 0xea <__fixsfdi>
    243c:	a2 2e       	mov	r10, r18
    243e:	b3 2e       	mov	r11, r19
    2440:	c4 2e       	mov	r12, r20
    2442:	d5 2e       	mov	r13, r21
    2444:	e6 2e       	mov	r14, r22
    2446:	f7 2e       	mov	r15, r23
    2448:	08 2f       	mov	r16, r24
    244a:	19 2f       	mov	r17, r25
    244c:	8a 2d       	mov	r24, r10
    244e:	8b 29       	or	r24, r11
    2450:	8c 29       	or	r24, r12
    2452:	8d 29       	or	r24, r13
    2454:	8e 29       	or	r24, r14
    2456:	8f 29       	or	r24, r15
    2458:	80 2b       	or	r24, r16
    245a:	81 2b       	or	r24, r17
    245c:	88 23       	and	r24, r24
    245e:	79 f0       	breq	.+30     	; 0x247e <CLCD_vSendFloatNumber+0x108>
  {
    CLCD_vSendData('.');
    2460:	8e e2       	ldi	r24, 0x2E	; 46
    2462:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <CLCD_vSendData>
    CLCD_vSendIntNumber((s32)Copy_f64Number);
    2466:	69 81       	ldd	r22, Y+1	; 0x01
    2468:	7a 81       	ldd	r23, Y+2	; 0x02
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	9c 81       	ldd	r25, Y+4	; 0x04
    246e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	bc 01       	movw	r22, r24
    2478:	cd 01       	movw	r24, r26
    247a:	0e 94 03 11 	call	0x2206	; 0x2206 <CLCD_vSendIntNumber>
  }
}
    247e:	0f 90       	pop	r0
    2480:	0f 90       	pop	r0
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	1f 91       	pop	r17
    248c:	0f 91       	pop	r16
    248e:	ff 90       	pop	r15
    2490:	ef 90       	pop	r14
    2492:	df 90       	pop	r13
    2494:	cf 90       	pop	r12
    2496:	bf 90       	pop	r11
    2498:	af 90       	pop	r10
    249a:	08 95       	ret

0000249c <CLCD_vSetPosition>:
 *		MSB = 1  ===> refers that it is command to set cursor
 *		xxxxxxx  ===> refers to AC ( Address Counter 7Bits / DDRAM Locations 128Location )
 */

void CLCD_vSetPosition(u8 Copy_u8ROW, u8 Copy_u8Col)
{
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	61 97       	sbiw	r28, 0x11	; 17
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	de bf       	out	0x3e, r29	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	88 8b       	std	Y+16, r24	; 0x10
    24b2:	69 8b       	std	Y+17, r22	; 0x11
  u8 LOC_u8Data;

  if ((Copy_u8ROW < CLCD_ROW_1) || (Copy_u8ROW > CLCD_ROW_2) || (Copy_u8Col < CLCD_COL_1) || (Copy_u8Col > CLCD_COL_16))
    24b4:	88 89       	ldd	r24, Y+16	; 0x10
    24b6:	88 23       	and	r24, r24
    24b8:	49 f0       	breq	.+18     	; 0x24cc <CLCD_vSetPosition+0x30>
    24ba:	88 89       	ldd	r24, Y+16	; 0x10
    24bc:	83 30       	cpi	r24, 0x03	; 3
    24be:	30 f4       	brcc	.+12     	; 0x24cc <CLCD_vSetPosition+0x30>
    24c0:	89 89       	ldd	r24, Y+17	; 0x11
    24c2:	88 23       	and	r24, r24
    24c4:	19 f0       	breq	.+6      	; 0x24cc <CLCD_vSetPosition+0x30>
    24c6:	89 89       	ldd	r24, Y+17	; 0x11
    24c8:	81 31       	cpi	r24, 0x11	; 17
    24ca:	18 f0       	brcs	.+6      	; 0x24d2 <CLCD_vSetPosition+0x36>
  {
    LOC_u8Data = CLCD_SET_CURSOR;
    24cc:	80 e8       	ldi	r24, 0x80	; 128
    24ce:	8f 87       	std	Y+15, r24	; 0x0f
    24d0:	0d c0       	rjmp	.+26     	; 0x24ec <CLCD_vSetPosition+0x50>
  }
  else if (Copy_u8ROW == CLCD_ROW_1)
    24d2:	88 89       	ldd	r24, Y+16	; 0x10
    24d4:	81 30       	cpi	r24, 0x01	; 1
    24d6:	21 f4       	brne	.+8      	; 0x24e0 <CLCD_vSetPosition+0x44>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (Copy_u8Col - 1));
    24d8:	89 89       	ldd	r24, Y+17	; 0x11
    24da:	81 58       	subi	r24, 0x81	; 129
    24dc:	8f 87       	std	Y+15, r24	; 0x0f
    24de:	06 c0       	rjmp	.+12     	; 0x24ec <CLCD_vSetPosition+0x50>
  }
  else if (Copy_u8ROW == CLCD_ROW_2)
    24e0:	88 89       	ldd	r24, Y+16	; 0x10
    24e2:	82 30       	cpi	r24, 0x02	; 2
    24e4:	19 f4       	brne	.+6      	; 0x24ec <CLCD_vSetPosition+0x50>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (64) + (Copy_u8Col - 1));
    24e6:	89 89       	ldd	r24, Y+17	; 0x11
    24e8:	81 54       	subi	r24, 0x41	; 65
    24ea:	8f 87       	std	Y+15, r24	; 0x0f
  }

  CLCD_vSendCommand(LOC_u8Data);
    24ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ee:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <CLCD_vSendCommand>
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	a0 e8       	ldi	r26, 0x80	; 128
    24f8:	bf e3       	ldi	r27, 0x3F	; 63
    24fa:	8b 87       	std	Y+11, r24	; 0x0b
    24fc:	9c 87       	std	Y+12, r25	; 0x0c
    24fe:	ad 87       	std	Y+13, r26	; 0x0d
    2500:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2502:	6b 85       	ldd	r22, Y+11	; 0x0b
    2504:	7c 85       	ldd	r23, Y+12	; 0x0c
    2506:	8d 85       	ldd	r24, Y+13	; 0x0d
    2508:	9e 85       	ldd	r25, Y+14	; 0x0e
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	4a ef       	ldi	r20, 0xFA	; 250
    2510:	54 e4       	ldi	r21, 0x44	; 68
    2512:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	8f 83       	std	Y+7, r24	; 0x07
    251c:	98 87       	std	Y+8, r25	; 0x08
    251e:	a9 87       	std	Y+9, r26	; 0x09
    2520:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2522:	6f 81       	ldd	r22, Y+7	; 0x07
    2524:	78 85       	ldd	r23, Y+8	; 0x08
    2526:	89 85       	ldd	r24, Y+9	; 0x09
    2528:	9a 85       	ldd	r25, Y+10	; 0x0a
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 e8       	ldi	r20, 0x80	; 128
    2530:	5f e3       	ldi	r21, 0x3F	; 63
    2532:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2536:	88 23       	and	r24, r24
    2538:	2c f4       	brge	.+10     	; 0x2544 <CLCD_vSetPosition+0xa8>
		__ticks = 1;
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	8d 83       	std	Y+5, r24	; 0x05
    2542:	3f c0       	rjmp	.+126    	; 0x25c2 <CLCD_vSetPosition+0x126>
	else if (__tmp > 65535)
    2544:	6f 81       	ldd	r22, Y+7	; 0x07
    2546:	78 85       	ldd	r23, Y+8	; 0x08
    2548:	89 85       	ldd	r24, Y+9	; 0x09
    254a:	9a 85       	ldd	r25, Y+10	; 0x0a
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	3f ef       	ldi	r19, 0xFF	; 255
    2550:	4f e7       	ldi	r20, 0x7F	; 127
    2552:	57 e4       	ldi	r21, 0x47	; 71
    2554:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2558:	18 16       	cp	r1, r24
    255a:	4c f5       	brge	.+82     	; 0x25ae <CLCD_vSetPosition+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255c:	6b 85       	ldd	r22, Y+11	; 0x0b
    255e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2560:	8d 85       	ldd	r24, Y+13	; 0x0d
    2562:	9e 85       	ldd	r25, Y+14	; 0x0e
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e2       	ldi	r20, 0x20	; 32
    256a:	51 e4       	ldi	r21, 0x41	; 65
    256c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	bc 01       	movw	r22, r24
    2576:	cd 01       	movw	r24, r26
    2578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	9e 83       	std	Y+6, r25	; 0x06
    2582:	8d 83       	std	Y+5, r24	; 0x05
    2584:	0f c0       	rjmp	.+30     	; 0x25a4 <CLCD_vSetPosition+0x108>
    2586:	88 ec       	ldi	r24, 0xC8	; 200
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	9c 83       	std	Y+4, r25	; 0x04
    258c:	8b 83       	std	Y+3, r24	; 0x03
    258e:	8b 81       	ldd	r24, Y+3	; 0x03
    2590:	9c 81       	ldd	r25, Y+4	; 0x04
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	f1 f7       	brne	.-4      	; 0x2592 <CLCD_vSetPosition+0xf6>
    2596:	9c 83       	std	Y+4, r25	; 0x04
    2598:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259a:	8d 81       	ldd	r24, Y+5	; 0x05
    259c:	9e 81       	ldd	r25, Y+6	; 0x06
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	9e 83       	std	Y+6, r25	; 0x06
    25a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a4:	8d 81       	ldd	r24, Y+5	; 0x05
    25a6:	9e 81       	ldd	r25, Y+6	; 0x06
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	69 f7       	brne	.-38     	; 0x2586 <CLCD_vSetPosition+0xea>
    25ac:	14 c0       	rjmp	.+40     	; 0x25d6 <CLCD_vSetPosition+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ae:	6f 81       	ldd	r22, Y+7	; 0x07
    25b0:	78 85       	ldd	r23, Y+8	; 0x08
    25b2:	89 85       	ldd	r24, Y+9	; 0x09
    25b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	9e 83       	std	Y+6, r25	; 0x06
    25c0:	8d 83       	std	Y+5, r24	; 0x05
    25c2:	8d 81       	ldd	r24, Y+5	; 0x05
    25c4:	9e 81       	ldd	r25, Y+6	; 0x06
    25c6:	9a 83       	std	Y+2, r25	; 0x02
    25c8:	89 83       	std	Y+1, r24	; 0x01
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	9a 81       	ldd	r25, Y+2	; 0x02
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	f1 f7       	brne	.-4      	; 0x25ce <CLCD_vSetPosition+0x132>
    25d2:	9a 83       	std	Y+2, r25	; 0x02
    25d4:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    25d6:	61 96       	adiw	r28, 0x11	; 17
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	de bf       	out	0x3e, r29	; 62
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	cd bf       	out	0x3d, r28	; 61
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <CLCD_vSendExtraChar>:
 * Hint       :-
 *	    Address Counter can refer to CGRAM and DDRAM
 */

void CLCD_vSendExtraChar(u8 Copy_u8Row, u8 Copy_u8Col)
{
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	00 d0       	rcall	.+0      	; 0x25ee <CLCD_vSendExtraChar+0x6>
    25ee:	0f 92       	push	r0
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	8a 83       	std	Y+2, r24	; 0x02
    25f6:	6b 83       	std	Y+3, r22	; 0x03

  u8 LOC_u8Iterator = 0;
    25f8:	19 82       	std	Y+1, r1	; 0x01

  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM
    25fa:	80 e4       	ldi	r24, 0x40	; 64
    25fc:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <CLCD_vSendCommand>

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    2600:	19 82       	std	Y+1, r1	; 0x01
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
  }

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);
    2602:	8a 81       	ldd	r24, Y+2	; 0x02
    2604:	6b 81       	ldd	r22, Y+3	; 0x03
    2606:	0e 94 4e 12 	call	0x249c	; 0x249c <CLCD_vSetPosition>

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    260a:	19 82       	std	Y+1, r1	; 0x01
    260c:	06 c0       	rjmp	.+12     	; 0x261a <CLCD_vSendExtraChar+0x32>
  {
    CLCD_vSendData(LOC_u8Iterator);
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <CLCD_vSendData>

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	8f 5f       	subi	r24, 0xFF	; 255
    2618:	89 83       	std	Y+1, r24	; 0x01
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	88 30       	cpi	r24, 0x08	; 8
    261e:	b8 f3       	brcs	.-18     	; 0x260e <CLCD_vSendExtraChar+0x26>
  {
    CLCD_vSendData(LOC_u8Iterator);
  }
}
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	cf 91       	pop	r28
    2628:	df 91       	pop	r29
    262a:	08 95       	ret

0000262c <CLCD_voidShiftDisplayRight>:
 *                                                *------------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayRight(void)
{
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	2e 97       	sbiw	r28, 0x0e	; 14
    2636:	0f b6       	in	r0, 0x3f	; 63
    2638:	f8 94       	cli
    263a:	de bf       	out	0x3e, r29	; 62
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_RIGHT);
    2640:	8c e1       	ldi	r24, 0x1C	; 28
    2642:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <CLCD_vSendCommand>
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	a0 e8       	ldi	r26, 0x80	; 128
    264c:	bf e3       	ldi	r27, 0x3F	; 63
    264e:	8b 87       	std	Y+11, r24	; 0x0b
    2650:	9c 87       	std	Y+12, r25	; 0x0c
    2652:	ad 87       	std	Y+13, r26	; 0x0d
    2654:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2656:	6b 85       	ldd	r22, Y+11	; 0x0b
    2658:	7c 85       	ldd	r23, Y+12	; 0x0c
    265a:	8d 85       	ldd	r24, Y+13	; 0x0d
    265c:	9e 85       	ldd	r25, Y+14	; 0x0e
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	4a ef       	ldi	r20, 0xFA	; 250
    2664:	54 e4       	ldi	r21, 0x44	; 68
    2666:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	8f 83       	std	Y+7, r24	; 0x07
    2670:	98 87       	std	Y+8, r25	; 0x08
    2672:	a9 87       	std	Y+9, r26	; 0x09
    2674:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2676:	6f 81       	ldd	r22, Y+7	; 0x07
    2678:	78 85       	ldd	r23, Y+8	; 0x08
    267a:	89 85       	ldd	r24, Y+9	; 0x09
    267c:	9a 85       	ldd	r25, Y+10	; 0x0a
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	40 e8       	ldi	r20, 0x80	; 128
    2684:	5f e3       	ldi	r21, 0x3F	; 63
    2686:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    268a:	88 23       	and	r24, r24
    268c:	2c f4       	brge	.+10     	; 0x2698 <CLCD_voidShiftDisplayRight+0x6c>
		__ticks = 1;
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	9e 83       	std	Y+6, r25	; 0x06
    2694:	8d 83       	std	Y+5, r24	; 0x05
    2696:	3f c0       	rjmp	.+126    	; 0x2716 <CLCD_voidShiftDisplayRight+0xea>
	else if (__tmp > 65535)
    2698:	6f 81       	ldd	r22, Y+7	; 0x07
    269a:	78 85       	ldd	r23, Y+8	; 0x08
    269c:	89 85       	ldd	r24, Y+9	; 0x09
    269e:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	3f ef       	ldi	r19, 0xFF	; 255
    26a4:	4f e7       	ldi	r20, 0x7F	; 127
    26a6:	57 e4       	ldi	r21, 0x47	; 71
    26a8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    26ac:	18 16       	cp	r1, r24
    26ae:	4c f5       	brge	.+82     	; 0x2702 <CLCD_voidShiftDisplayRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e2       	ldi	r20, 0x20	; 32
    26be:	51 e4       	ldi	r21, 0x41	; 65
    26c0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	bc 01       	movw	r22, r24
    26ca:	cd 01       	movw	r24, r26
    26cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	9e 83       	std	Y+6, r25	; 0x06
    26d6:	8d 83       	std	Y+5, r24	; 0x05
    26d8:	0f c0       	rjmp	.+30     	; 0x26f8 <CLCD_voidShiftDisplayRight+0xcc>
    26da:	88 ec       	ldi	r24, 0xC8	; 200
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	9c 83       	std	Y+4, r25	; 0x04
    26e0:	8b 83       	std	Y+3, r24	; 0x03
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	9c 81       	ldd	r25, Y+4	; 0x04
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <CLCD_voidShiftDisplayRight+0xba>
    26ea:	9c 83       	std	Y+4, r25	; 0x04
    26ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ee:	8d 81       	ldd	r24, Y+5	; 0x05
    26f0:	9e 81       	ldd	r25, Y+6	; 0x06
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	9e 83       	std	Y+6, r25	; 0x06
    26f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f8:	8d 81       	ldd	r24, Y+5	; 0x05
    26fa:	9e 81       	ldd	r25, Y+6	; 0x06
    26fc:	00 97       	sbiw	r24, 0x00	; 0
    26fe:	69 f7       	brne	.-38     	; 0x26da <CLCD_voidShiftDisplayRight+0xae>
    2700:	14 c0       	rjmp	.+40     	; 0x272a <CLCD_voidShiftDisplayRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2702:	6f 81       	ldd	r22, Y+7	; 0x07
    2704:	78 85       	ldd	r23, Y+8	; 0x08
    2706:	89 85       	ldd	r24, Y+9	; 0x09
    2708:	9a 85       	ldd	r25, Y+10	; 0x0a
    270a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	9e 83       	std	Y+6, r25	; 0x06
    2714:	8d 83       	std	Y+5, r24	; 0x05
    2716:	8d 81       	ldd	r24, Y+5	; 0x05
    2718:	9e 81       	ldd	r25, Y+6	; 0x06
    271a:	9a 83       	std	Y+2, r25	; 0x02
    271c:	89 83       	std	Y+1, r24	; 0x01
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	9a 81       	ldd	r25, Y+2	; 0x02
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	f1 f7       	brne	.-4      	; 0x2722 <CLCD_voidShiftDisplayRight+0xf6>
    2726:	9a 83       	std	Y+2, r25	; 0x02
    2728:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    272a:	2e 96       	adiw	r28, 0x0e	; 14
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	f8 94       	cli
    2730:	de bf       	out	0x3e, r29	; 62
    2732:	0f be       	out	0x3f, r0	; 63
    2734:	cd bf       	out	0x3d, r28	; 61
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	08 95       	ret

0000273c <CLCD_voidShiftDisplayLeft>:
 *                                                *-----------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayLeft(void)
{
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	2e 97       	sbiw	r28, 0x0e	; 14
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_LEFT);
    2750:	88 e1       	ldi	r24, 0x18	; 24
    2752:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <CLCD_vSendCommand>
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	a0 e8       	ldi	r26, 0x80	; 128
    275c:	bf e3       	ldi	r27, 0x3F	; 63
    275e:	8b 87       	std	Y+11, r24	; 0x0b
    2760:	9c 87       	std	Y+12, r25	; 0x0c
    2762:	ad 87       	std	Y+13, r26	; 0x0d
    2764:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2766:	6b 85       	ldd	r22, Y+11	; 0x0b
    2768:	7c 85       	ldd	r23, Y+12	; 0x0c
    276a:	8d 85       	ldd	r24, Y+13	; 0x0d
    276c:	9e 85       	ldd	r25, Y+14	; 0x0e
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	4a ef       	ldi	r20, 0xFA	; 250
    2774:	54 e4       	ldi	r21, 0x44	; 68
    2776:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	8f 83       	std	Y+7, r24	; 0x07
    2780:	98 87       	std	Y+8, r25	; 0x08
    2782:	a9 87       	std	Y+9, r26	; 0x09
    2784:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2786:	6f 81       	ldd	r22, Y+7	; 0x07
    2788:	78 85       	ldd	r23, Y+8	; 0x08
    278a:	89 85       	ldd	r24, Y+9	; 0x09
    278c:	9a 85       	ldd	r25, Y+10	; 0x0a
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	40 e8       	ldi	r20, 0x80	; 128
    2794:	5f e3       	ldi	r21, 0x3F	; 63
    2796:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    279a:	88 23       	and	r24, r24
    279c:	2c f4       	brge	.+10     	; 0x27a8 <CLCD_voidShiftDisplayLeft+0x6c>
		__ticks = 1;
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	9e 83       	std	Y+6, r25	; 0x06
    27a4:	8d 83       	std	Y+5, r24	; 0x05
    27a6:	3f c0       	rjmp	.+126    	; 0x2826 <CLCD_voidShiftDisplayLeft+0xea>
	else if (__tmp > 65535)
    27a8:	6f 81       	ldd	r22, Y+7	; 0x07
    27aa:	78 85       	ldd	r23, Y+8	; 0x08
    27ac:	89 85       	ldd	r24, Y+9	; 0x09
    27ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	3f ef       	ldi	r19, 0xFF	; 255
    27b4:	4f e7       	ldi	r20, 0x7F	; 127
    27b6:	57 e4       	ldi	r21, 0x47	; 71
    27b8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    27bc:	18 16       	cp	r1, r24
    27be:	4c f5       	brge	.+82     	; 0x2812 <CLCD_voidShiftDisplayLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	40 e2       	ldi	r20, 0x20	; 32
    27ce:	51 e4       	ldi	r21, 0x41	; 65
    27d0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	bc 01       	movw	r22, r24
    27da:	cd 01       	movw	r24, r26
    27dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	9e 83       	std	Y+6, r25	; 0x06
    27e6:	8d 83       	std	Y+5, r24	; 0x05
    27e8:	0f c0       	rjmp	.+30     	; 0x2808 <CLCD_voidShiftDisplayLeft+0xcc>
    27ea:	88 ec       	ldi	r24, 0xC8	; 200
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	9c 83       	std	Y+4, r25	; 0x04
    27f0:	8b 83       	std	Y+3, r24	; 0x03
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	9c 81       	ldd	r25, Y+4	; 0x04
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	f1 f7       	brne	.-4      	; 0x27f6 <CLCD_voidShiftDisplayLeft+0xba>
    27fa:	9c 83       	std	Y+4, r25	; 0x04
    27fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2800:	9e 81       	ldd	r25, Y+6	; 0x06
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	9e 83       	std	Y+6, r25	; 0x06
    2806:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2808:	8d 81       	ldd	r24, Y+5	; 0x05
    280a:	9e 81       	ldd	r25, Y+6	; 0x06
    280c:	00 97       	sbiw	r24, 0x00	; 0
    280e:	69 f7       	brne	.-38     	; 0x27ea <CLCD_voidShiftDisplayLeft+0xae>
    2810:	14 c0       	rjmp	.+40     	; 0x283a <CLCD_voidShiftDisplayLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2812:	6f 81       	ldd	r22, Y+7	; 0x07
    2814:	78 85       	ldd	r23, Y+8	; 0x08
    2816:	89 85       	ldd	r24, Y+9	; 0x09
    2818:	9a 85       	ldd	r25, Y+10	; 0x0a
    281a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	9e 83       	std	Y+6, r25	; 0x06
    2824:	8d 83       	std	Y+5, r24	; 0x05
    2826:	8d 81       	ldd	r24, Y+5	; 0x05
    2828:	9e 81       	ldd	r25, Y+6	; 0x06
    282a:	9a 83       	std	Y+2, r25	; 0x02
    282c:	89 83       	std	Y+1, r24	; 0x01
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	9a 81       	ldd	r25, Y+2	; 0x02
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	f1 f7       	brne	.-4      	; 0x2832 <CLCD_voidShiftDisplayLeft+0xf6>
    2836:	9a 83       	std	Y+2, r25	; 0x02
    2838:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    283a:	2e 96       	adiw	r28, 0x0e	; 14
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <DIO_enumSetPinDir>:
      =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */

DIO_errorStatus DIO_enumSetPinDir(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Direction)
{
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	28 97       	sbiw	r28, 0x08	; 8
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	8a 83       	std	Y+2, r24	; 0x02
    2862:	6b 83       	std	Y+3, r22	; 0x03
    2864:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    286a:	8a 81       	ldd	r24, Y+2	; 0x02
    286c:	84 30       	cpi	r24, 0x04	; 4
    286e:	08 f0       	brcs	.+2      	; 0x2872 <DIO_enumSetPinDir+0x26>
    2870:	f1 c0       	rjmp	.+482    	; 0x2a54 <DIO_enumSetPinDir+0x208>
    2872:	8b 81       	ldd	r24, Y+3	; 0x03
    2874:	88 30       	cpi	r24, 0x08	; 8
    2876:	08 f0       	brcs	.+2      	; 0x287a <DIO_enumSetPinDir+0x2e>
    2878:	ed c0       	rjmp	.+474    	; 0x2a54 <DIO_enumSetPinDir+0x208>
  {
    if (Copy_u8Direction == DIO_PIN_OUTPUT)
    287a:	8c 81       	ldd	r24, Y+4	; 0x04
    287c:	81 30       	cpi	r24, 0x01	; 1
    287e:	09 f0       	breq	.+2      	; 0x2882 <DIO_enumSetPinDir+0x36>
    2880:	6f c0       	rjmp	.+222    	; 0x2960 <DIO_enumSetPinDir+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    2882:	8a 81       	ldd	r24, Y+2	; 0x02
    2884:	28 2f       	mov	r18, r24
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	38 87       	std	Y+8, r19	; 0x08
    288a:	2f 83       	std	Y+7, r18	; 0x07
    288c:	8f 81       	ldd	r24, Y+7	; 0x07
    288e:	98 85       	ldd	r25, Y+8	; 0x08
    2890:	81 30       	cpi	r24, 0x01	; 1
    2892:	91 05       	cpc	r25, r1
    2894:	49 f1       	breq	.+82     	; 0x28e8 <DIO_enumSetPinDir+0x9c>
    2896:	2f 81       	ldd	r18, Y+7	; 0x07
    2898:	38 85       	ldd	r19, Y+8	; 0x08
    289a:	22 30       	cpi	r18, 0x02	; 2
    289c:	31 05       	cpc	r19, r1
    289e:	2c f4       	brge	.+10     	; 0x28aa <DIO_enumSetPinDir+0x5e>
    28a0:	8f 81       	ldd	r24, Y+7	; 0x07
    28a2:	98 85       	ldd	r25, Y+8	; 0x08
    28a4:	00 97       	sbiw	r24, 0x00	; 0
    28a6:	61 f0       	breq	.+24     	; 0x28c0 <DIO_enumSetPinDir+0x74>
    28a8:	d6 c0       	rjmp	.+428    	; 0x2a56 <DIO_enumSetPinDir+0x20a>
    28aa:	2f 81       	ldd	r18, Y+7	; 0x07
    28ac:	38 85       	ldd	r19, Y+8	; 0x08
    28ae:	22 30       	cpi	r18, 0x02	; 2
    28b0:	31 05       	cpc	r19, r1
    28b2:	71 f1       	breq	.+92     	; 0x2910 <DIO_enumSetPinDir+0xc4>
    28b4:	8f 81       	ldd	r24, Y+7	; 0x07
    28b6:	98 85       	ldd	r25, Y+8	; 0x08
    28b8:	83 30       	cpi	r24, 0x03	; 3
    28ba:	91 05       	cpc	r25, r1
    28bc:	e9 f1       	breq	.+122    	; 0x2938 <DIO_enumSetPinDir+0xec>
    28be:	cb c0       	rjmp	.+406    	; 0x2a56 <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(DDRA_REG, Copy_u8PIN);
    28c0:	aa e3       	ldi	r26, 0x3A	; 58
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	ea e3       	ldi	r30, 0x3A	; 58
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	48 2f       	mov	r20, r24
    28cc:	8b 81       	ldd	r24, Y+3	; 0x03
    28ce:	28 2f       	mov	r18, r24
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	02 2e       	mov	r0, r18
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <DIO_enumSetPinDir+0x92>
    28da:	88 0f       	add	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	0a 94       	dec	r0
    28e0:	e2 f7       	brpl	.-8      	; 0x28da <DIO_enumSetPinDir+0x8e>
    28e2:	84 2b       	or	r24, r20
    28e4:	8c 93       	st	X, r24
    28e6:	b7 c0       	rjmp	.+366    	; 0x2a56 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(DDRB_REG, Copy_u8PIN);
    28e8:	a7 e3       	ldi	r26, 0x37	; 55
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	e7 e3       	ldi	r30, 0x37	; 55
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	48 2f       	mov	r20, r24
    28f4:	8b 81       	ldd	r24, Y+3	; 0x03
    28f6:	28 2f       	mov	r18, r24
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	02 2e       	mov	r0, r18
    2900:	02 c0       	rjmp	.+4      	; 0x2906 <DIO_enumSetPinDir+0xba>
    2902:	88 0f       	add	r24, r24
    2904:	99 1f       	adc	r25, r25
    2906:	0a 94       	dec	r0
    2908:	e2 f7       	brpl	.-8      	; 0x2902 <DIO_enumSetPinDir+0xb6>
    290a:	84 2b       	or	r24, r20
    290c:	8c 93       	st	X, r24
    290e:	a3 c0       	rjmp	.+326    	; 0x2a56 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(DDRC_REG, Copy_u8PIN);
    2910:	a4 e3       	ldi	r26, 0x34	; 52
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	e4 e3       	ldi	r30, 0x34	; 52
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
    291a:	48 2f       	mov	r20, r24
    291c:	8b 81       	ldd	r24, Y+3	; 0x03
    291e:	28 2f       	mov	r18, r24
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	02 2e       	mov	r0, r18
    2928:	02 c0       	rjmp	.+4      	; 0x292e <DIO_enumSetPinDir+0xe2>
    292a:	88 0f       	add	r24, r24
    292c:	99 1f       	adc	r25, r25
    292e:	0a 94       	dec	r0
    2930:	e2 f7       	brpl	.-8      	; 0x292a <DIO_enumSetPinDir+0xde>
    2932:	84 2b       	or	r24, r20
    2934:	8c 93       	st	X, r24
    2936:	8f c0       	rjmp	.+286    	; 0x2a56 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(DDRD_REG, Copy_u8PIN);
    2938:	a1 e3       	ldi	r26, 0x31	; 49
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	e1 e3       	ldi	r30, 0x31	; 49
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	80 81       	ld	r24, Z
    2942:	48 2f       	mov	r20, r24
    2944:	8b 81       	ldd	r24, Y+3	; 0x03
    2946:	28 2f       	mov	r18, r24
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	02 2e       	mov	r0, r18
    2950:	02 c0       	rjmp	.+4      	; 0x2956 <DIO_enumSetPinDir+0x10a>
    2952:	88 0f       	add	r24, r24
    2954:	99 1f       	adc	r25, r25
    2956:	0a 94       	dec	r0
    2958:	e2 f7       	brpl	.-8      	; 0x2952 <DIO_enumSetPinDir+0x106>
    295a:	84 2b       	or	r24, r20
    295c:	8c 93       	st	X, r24
    295e:	7b c0       	rjmp	.+246    	; 0x2a56 <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else if (Copy_u8Direction == DIO_PIN_INPUT)
    2960:	8c 81       	ldd	r24, Y+4	; 0x04
    2962:	88 23       	and	r24, r24
    2964:	09 f0       	breq	.+2      	; 0x2968 <DIO_enumSetPinDir+0x11c>
    2966:	74 c0       	rjmp	.+232    	; 0x2a50 <DIO_enumSetPinDir+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    2968:	8a 81       	ldd	r24, Y+2	; 0x02
    296a:	28 2f       	mov	r18, r24
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	3e 83       	std	Y+6, r19	; 0x06
    2970:	2d 83       	std	Y+5, r18	; 0x05
    2972:	8d 81       	ldd	r24, Y+5	; 0x05
    2974:	9e 81       	ldd	r25, Y+6	; 0x06
    2976:	81 30       	cpi	r24, 0x01	; 1
    2978:	91 05       	cpc	r25, r1
    297a:	59 f1       	breq	.+86     	; 0x29d2 <DIO_enumSetPinDir+0x186>
    297c:	2d 81       	ldd	r18, Y+5	; 0x05
    297e:	3e 81       	ldd	r19, Y+6	; 0x06
    2980:	22 30       	cpi	r18, 0x02	; 2
    2982:	31 05       	cpc	r19, r1
    2984:	2c f4       	brge	.+10     	; 0x2990 <DIO_enumSetPinDir+0x144>
    2986:	8d 81       	ldd	r24, Y+5	; 0x05
    2988:	9e 81       	ldd	r25, Y+6	; 0x06
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	69 f0       	breq	.+26     	; 0x29a8 <DIO_enumSetPinDir+0x15c>
    298e:	63 c0       	rjmp	.+198    	; 0x2a56 <DIO_enumSetPinDir+0x20a>
    2990:	2d 81       	ldd	r18, Y+5	; 0x05
    2992:	3e 81       	ldd	r19, Y+6	; 0x06
    2994:	22 30       	cpi	r18, 0x02	; 2
    2996:	31 05       	cpc	r19, r1
    2998:	89 f1       	breq	.+98     	; 0x29fc <DIO_enumSetPinDir+0x1b0>
    299a:	8d 81       	ldd	r24, Y+5	; 0x05
    299c:	9e 81       	ldd	r25, Y+6	; 0x06
    299e:	83 30       	cpi	r24, 0x03	; 3
    29a0:	91 05       	cpc	r25, r1
    29a2:	09 f4       	brne	.+2      	; 0x29a6 <DIO_enumSetPinDir+0x15a>
    29a4:	40 c0       	rjmp	.+128    	; 0x2a26 <DIO_enumSetPinDir+0x1da>
    29a6:	57 c0       	rjmp	.+174    	; 0x2a56 <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    29a8:	aa e3       	ldi	r26, 0x3A	; 58
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	ea e3       	ldi	r30, 0x3A	; 58
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	48 2f       	mov	r20, r24
    29b4:	8b 81       	ldd	r24, Y+3	; 0x03
    29b6:	28 2f       	mov	r18, r24
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	02 2e       	mov	r0, r18
    29c0:	02 c0       	rjmp	.+4      	; 0x29c6 <DIO_enumSetPinDir+0x17a>
    29c2:	88 0f       	add	r24, r24
    29c4:	99 1f       	adc	r25, r25
    29c6:	0a 94       	dec	r0
    29c8:	e2 f7       	brpl	.-8      	; 0x29c2 <DIO_enumSetPinDir+0x176>
    29ca:	80 95       	com	r24
    29cc:	84 23       	and	r24, r20
    29ce:	8c 93       	st	X, r24
    29d0:	42 c0       	rjmp	.+132    	; 0x2a56 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    29d2:	a7 e3       	ldi	r26, 0x37	; 55
    29d4:	b0 e0       	ldi	r27, 0x00	; 0
    29d6:	e7 e3       	ldi	r30, 0x37	; 55
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	48 2f       	mov	r20, r24
    29de:	8b 81       	ldd	r24, Y+3	; 0x03
    29e0:	28 2f       	mov	r18, r24
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	02 2e       	mov	r0, r18
    29ea:	02 c0       	rjmp	.+4      	; 0x29f0 <DIO_enumSetPinDir+0x1a4>
    29ec:	88 0f       	add	r24, r24
    29ee:	99 1f       	adc	r25, r25
    29f0:	0a 94       	dec	r0
    29f2:	e2 f7       	brpl	.-8      	; 0x29ec <DIO_enumSetPinDir+0x1a0>
    29f4:	80 95       	com	r24
    29f6:	84 23       	and	r24, r20
    29f8:	8c 93       	st	X, r24
    29fa:	2d c0       	rjmp	.+90     	; 0x2a56 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    29fc:	a4 e3       	ldi	r26, 0x34	; 52
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	e4 e3       	ldi	r30, 0x34	; 52
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	48 2f       	mov	r20, r24
    2a08:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0a:	28 2f       	mov	r18, r24
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	02 2e       	mov	r0, r18
    2a14:	02 c0       	rjmp	.+4      	; 0x2a1a <DIO_enumSetPinDir+0x1ce>
    2a16:	88 0f       	add	r24, r24
    2a18:	99 1f       	adc	r25, r25
    2a1a:	0a 94       	dec	r0
    2a1c:	e2 f7       	brpl	.-8      	; 0x2a16 <DIO_enumSetPinDir+0x1ca>
    2a1e:	80 95       	com	r24
    2a20:	84 23       	and	r24, r20
    2a22:	8c 93       	st	X, r24
    2a24:	18 c0       	rjmp	.+48     	; 0x2a56 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    2a26:	a1 e3       	ldi	r26, 0x31	; 49
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	e1 e3       	ldi	r30, 0x31	; 49
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	48 2f       	mov	r20, r24
    2a32:	8b 81       	ldd	r24, Y+3	; 0x03
    2a34:	28 2f       	mov	r18, r24
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	02 2e       	mov	r0, r18
    2a3e:	02 c0       	rjmp	.+4      	; 0x2a44 <DIO_enumSetPinDir+0x1f8>
    2a40:	88 0f       	add	r24, r24
    2a42:	99 1f       	adc	r25, r25
    2a44:	0a 94       	dec	r0
    2a46:	e2 f7       	brpl	.-8      	; 0x2a40 <DIO_enumSetPinDir+0x1f4>
    2a48:	80 95       	com	r24
    2a4a:	84 23       	and	r24, r20
    2a4c:	8c 93       	st	X, r24
    2a4e:	03 c0       	rjmp	.+6      	; 0x2a56 <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    2a50:	19 82       	std	Y+1, r1	; 0x01
    2a52:	01 c0       	rjmp	.+2      	; 0x2a56 <DIO_enumSetPinDir+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2a54:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a58:	28 96       	adiw	r28, 0x08	; 8
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
    2a64:	cf 91       	pop	r28
    2a66:	df 91       	pop	r29
    2a68:	08 95       	ret

00002a6a <DIO_enumWritePinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Value)
{
    2a6a:	df 93       	push	r29
    2a6c:	cf 93       	push	r28
    2a6e:	cd b7       	in	r28, 0x3d	; 61
    2a70:	de b7       	in	r29, 0x3e	; 62
    2a72:	28 97       	sbiw	r28, 0x08	; 8
    2a74:	0f b6       	in	r0, 0x3f	; 63
    2a76:	f8 94       	cli
    2a78:	de bf       	out	0x3e, r29	; 62
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	cd bf       	out	0x3d, r28	; 61
    2a7e:	8a 83       	std	Y+2, r24	; 0x02
    2a80:	6b 83       	std	Y+3, r22	; 0x03
    2a82:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2a88:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8a:	84 30       	cpi	r24, 0x04	; 4
    2a8c:	08 f0       	brcs	.+2      	; 0x2a90 <DIO_enumWritePinVal+0x26>
    2a8e:	f1 c0       	rjmp	.+482    	; 0x2c72 <DIO_enumWritePinVal+0x208>
    2a90:	8b 81       	ldd	r24, Y+3	; 0x03
    2a92:	88 30       	cpi	r24, 0x08	; 8
    2a94:	08 f0       	brcs	.+2      	; 0x2a98 <DIO_enumWritePinVal+0x2e>
    2a96:	ed c0       	rjmp	.+474    	; 0x2c72 <DIO_enumWritePinVal+0x208>
  {
    if (Copy_u8Value == DIO_PIN_OUTPUT)
    2a98:	8c 81       	ldd	r24, Y+4	; 0x04
    2a9a:	81 30       	cpi	r24, 0x01	; 1
    2a9c:	09 f0       	breq	.+2      	; 0x2aa0 <DIO_enumWritePinVal+0x36>
    2a9e:	6f c0       	rjmp	.+222    	; 0x2b7e <DIO_enumWritePinVal+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    2aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa2:	28 2f       	mov	r18, r24
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	38 87       	std	Y+8, r19	; 0x08
    2aa8:	2f 83       	std	Y+7, r18	; 0x07
    2aaa:	8f 81       	ldd	r24, Y+7	; 0x07
    2aac:	98 85       	ldd	r25, Y+8	; 0x08
    2aae:	81 30       	cpi	r24, 0x01	; 1
    2ab0:	91 05       	cpc	r25, r1
    2ab2:	49 f1       	breq	.+82     	; 0x2b06 <DIO_enumWritePinVal+0x9c>
    2ab4:	2f 81       	ldd	r18, Y+7	; 0x07
    2ab6:	38 85       	ldd	r19, Y+8	; 0x08
    2ab8:	22 30       	cpi	r18, 0x02	; 2
    2aba:	31 05       	cpc	r19, r1
    2abc:	2c f4       	brge	.+10     	; 0x2ac8 <DIO_enumWritePinVal+0x5e>
    2abe:	8f 81       	ldd	r24, Y+7	; 0x07
    2ac0:	98 85       	ldd	r25, Y+8	; 0x08
    2ac2:	00 97       	sbiw	r24, 0x00	; 0
    2ac4:	61 f0       	breq	.+24     	; 0x2ade <DIO_enumWritePinVal+0x74>
    2ac6:	d6 c0       	rjmp	.+428    	; 0x2c74 <DIO_enumWritePinVal+0x20a>
    2ac8:	2f 81       	ldd	r18, Y+7	; 0x07
    2aca:	38 85       	ldd	r19, Y+8	; 0x08
    2acc:	22 30       	cpi	r18, 0x02	; 2
    2ace:	31 05       	cpc	r19, r1
    2ad0:	71 f1       	breq	.+92     	; 0x2b2e <DIO_enumWritePinVal+0xc4>
    2ad2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ad4:	98 85       	ldd	r25, Y+8	; 0x08
    2ad6:	83 30       	cpi	r24, 0x03	; 3
    2ad8:	91 05       	cpc	r25, r1
    2ada:	e9 f1       	breq	.+122    	; 0x2b56 <DIO_enumWritePinVal+0xec>
    2adc:	cb c0       	rjmp	.+406    	; 0x2c74 <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(PORTA_REG, Copy_u8PIN);
    2ade:	ab e3       	ldi	r26, 0x3B	; 59
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	eb e3       	ldi	r30, 0x3B	; 59
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	80 81       	ld	r24, Z
    2ae8:	48 2f       	mov	r20, r24
    2aea:	8b 81       	ldd	r24, Y+3	; 0x03
    2aec:	28 2f       	mov	r18, r24
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	02 2e       	mov	r0, r18
    2af6:	02 c0       	rjmp	.+4      	; 0x2afc <DIO_enumWritePinVal+0x92>
    2af8:	88 0f       	add	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	0a 94       	dec	r0
    2afe:	e2 f7       	brpl	.-8      	; 0x2af8 <DIO_enumWritePinVal+0x8e>
    2b00:	84 2b       	or	r24, r20
    2b02:	8c 93       	st	X, r24
    2b04:	b7 c0       	rjmp	.+366    	; 0x2c74 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(PORTB_REG, Copy_u8PIN);
    2b06:	a8 e3       	ldi	r26, 0x38	; 56
    2b08:	b0 e0       	ldi	r27, 0x00	; 0
    2b0a:	e8 e3       	ldi	r30, 0x38	; 56
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	80 81       	ld	r24, Z
    2b10:	48 2f       	mov	r20, r24
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	28 2f       	mov	r18, r24
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	02 2e       	mov	r0, r18
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <DIO_enumWritePinVal+0xba>
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	0a 94       	dec	r0
    2b26:	e2 f7       	brpl	.-8      	; 0x2b20 <DIO_enumWritePinVal+0xb6>
    2b28:	84 2b       	or	r24, r20
    2b2a:	8c 93       	st	X, r24
    2b2c:	a3 c0       	rjmp	.+326    	; 0x2c74 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(PORTC_REG, Copy_u8PIN);
    2b2e:	a5 e3       	ldi	r26, 0x35	; 53
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	e5 e3       	ldi	r30, 0x35	; 53
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 81       	ld	r24, Z
    2b38:	48 2f       	mov	r20, r24
    2b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3c:	28 2f       	mov	r18, r24
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	02 2e       	mov	r0, r18
    2b46:	02 c0       	rjmp	.+4      	; 0x2b4c <DIO_enumWritePinVal+0xe2>
    2b48:	88 0f       	add	r24, r24
    2b4a:	99 1f       	adc	r25, r25
    2b4c:	0a 94       	dec	r0
    2b4e:	e2 f7       	brpl	.-8      	; 0x2b48 <DIO_enumWritePinVal+0xde>
    2b50:	84 2b       	or	r24, r20
    2b52:	8c 93       	st	X, r24
    2b54:	8f c0       	rjmp	.+286    	; 0x2c74 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(PORTD_REG, Copy_u8PIN);
    2b56:	a2 e3       	ldi	r26, 0x32	; 50
    2b58:	b0 e0       	ldi	r27, 0x00	; 0
    2b5a:	e2 e3       	ldi	r30, 0x32	; 50
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	80 81       	ld	r24, Z
    2b60:	48 2f       	mov	r20, r24
    2b62:	8b 81       	ldd	r24, Y+3	; 0x03
    2b64:	28 2f       	mov	r18, r24
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	02 2e       	mov	r0, r18
    2b6e:	02 c0       	rjmp	.+4      	; 0x2b74 <DIO_enumWritePinVal+0x10a>
    2b70:	88 0f       	add	r24, r24
    2b72:	99 1f       	adc	r25, r25
    2b74:	0a 94       	dec	r0
    2b76:	e2 f7       	brpl	.-8      	; 0x2b70 <DIO_enumWritePinVal+0x106>
    2b78:	84 2b       	or	r24, r20
    2b7a:	8c 93       	st	X, r24
    2b7c:	7b c0       	rjmp	.+246    	; 0x2c74 <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else if (Copy_u8Value == DIO_PIN_INPUT)
    2b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b80:	88 23       	and	r24, r24
    2b82:	09 f0       	breq	.+2      	; 0x2b86 <DIO_enumWritePinVal+0x11c>
    2b84:	74 c0       	rjmp	.+232    	; 0x2c6e <DIO_enumWritePinVal+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    2b86:	8a 81       	ldd	r24, Y+2	; 0x02
    2b88:	28 2f       	mov	r18, r24
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	3e 83       	std	Y+6, r19	; 0x06
    2b8e:	2d 83       	std	Y+5, r18	; 0x05
    2b90:	8d 81       	ldd	r24, Y+5	; 0x05
    2b92:	9e 81       	ldd	r25, Y+6	; 0x06
    2b94:	81 30       	cpi	r24, 0x01	; 1
    2b96:	91 05       	cpc	r25, r1
    2b98:	59 f1       	breq	.+86     	; 0x2bf0 <DIO_enumWritePinVal+0x186>
    2b9a:	2d 81       	ldd	r18, Y+5	; 0x05
    2b9c:	3e 81       	ldd	r19, Y+6	; 0x06
    2b9e:	22 30       	cpi	r18, 0x02	; 2
    2ba0:	31 05       	cpc	r19, r1
    2ba2:	2c f4       	brge	.+10     	; 0x2bae <DIO_enumWritePinVal+0x144>
    2ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba8:	00 97       	sbiw	r24, 0x00	; 0
    2baa:	69 f0       	breq	.+26     	; 0x2bc6 <DIO_enumWritePinVal+0x15c>
    2bac:	63 c0       	rjmp	.+198    	; 0x2c74 <DIO_enumWritePinVal+0x20a>
    2bae:	2d 81       	ldd	r18, Y+5	; 0x05
    2bb0:	3e 81       	ldd	r19, Y+6	; 0x06
    2bb2:	22 30       	cpi	r18, 0x02	; 2
    2bb4:	31 05       	cpc	r19, r1
    2bb6:	89 f1       	breq	.+98     	; 0x2c1a <DIO_enumWritePinVal+0x1b0>
    2bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bba:	9e 81       	ldd	r25, Y+6	; 0x06
    2bbc:	83 30       	cpi	r24, 0x03	; 3
    2bbe:	91 05       	cpc	r25, r1
    2bc0:	09 f4       	brne	.+2      	; 0x2bc4 <DIO_enumWritePinVal+0x15a>
    2bc2:	40 c0       	rjmp	.+128    	; 0x2c44 <DIO_enumWritePinVal+0x1da>
    2bc4:	57 c0       	rjmp	.+174    	; 0x2c74 <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    2bc6:	ab e3       	ldi	r26, 0x3B	; 59
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	eb e3       	ldi	r30, 0x3B	; 59
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	80 81       	ld	r24, Z
    2bd0:	48 2f       	mov	r20, r24
    2bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd4:	28 2f       	mov	r18, r24
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	02 2e       	mov	r0, r18
    2bde:	02 c0       	rjmp	.+4      	; 0x2be4 <DIO_enumWritePinVal+0x17a>
    2be0:	88 0f       	add	r24, r24
    2be2:	99 1f       	adc	r25, r25
    2be4:	0a 94       	dec	r0
    2be6:	e2 f7       	brpl	.-8      	; 0x2be0 <DIO_enumWritePinVal+0x176>
    2be8:	80 95       	com	r24
    2bea:	84 23       	and	r24, r20
    2bec:	8c 93       	st	X, r24
    2bee:	42 c0       	rjmp	.+132    	; 0x2c74 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    2bf0:	a8 e3       	ldi	r26, 0x38	; 56
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	e8 e3       	ldi	r30, 0x38	; 56
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	48 2f       	mov	r20, r24
    2bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfe:	28 2f       	mov	r18, r24
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	02 2e       	mov	r0, r18
    2c08:	02 c0       	rjmp	.+4      	; 0x2c0e <DIO_enumWritePinVal+0x1a4>
    2c0a:	88 0f       	add	r24, r24
    2c0c:	99 1f       	adc	r25, r25
    2c0e:	0a 94       	dec	r0
    2c10:	e2 f7       	brpl	.-8      	; 0x2c0a <DIO_enumWritePinVal+0x1a0>
    2c12:	80 95       	com	r24
    2c14:	84 23       	and	r24, r20
    2c16:	8c 93       	st	X, r24
    2c18:	2d c0       	rjmp	.+90     	; 0x2c74 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    2c1a:	a5 e3       	ldi	r26, 0x35	; 53
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	e5 e3       	ldi	r30, 0x35	; 53
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	48 2f       	mov	r20, r24
    2c26:	8b 81       	ldd	r24, Y+3	; 0x03
    2c28:	28 2f       	mov	r18, r24
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	02 2e       	mov	r0, r18
    2c32:	02 c0       	rjmp	.+4      	; 0x2c38 <DIO_enumWritePinVal+0x1ce>
    2c34:	88 0f       	add	r24, r24
    2c36:	99 1f       	adc	r25, r25
    2c38:	0a 94       	dec	r0
    2c3a:	e2 f7       	brpl	.-8      	; 0x2c34 <DIO_enumWritePinVal+0x1ca>
    2c3c:	80 95       	com	r24
    2c3e:	84 23       	and	r24, r20
    2c40:	8c 93       	st	X, r24
    2c42:	18 c0       	rjmp	.+48     	; 0x2c74 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    2c44:	a2 e3       	ldi	r26, 0x32	; 50
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	e2 e3       	ldi	r30, 0x32	; 50
    2c4a:	f0 e0       	ldi	r31, 0x00	; 0
    2c4c:	80 81       	ld	r24, Z
    2c4e:	48 2f       	mov	r20, r24
    2c50:	8b 81       	ldd	r24, Y+3	; 0x03
    2c52:	28 2f       	mov	r18, r24
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	02 2e       	mov	r0, r18
    2c5c:	02 c0       	rjmp	.+4      	; 0x2c62 <DIO_enumWritePinVal+0x1f8>
    2c5e:	88 0f       	add	r24, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	0a 94       	dec	r0
    2c64:	e2 f7       	brpl	.-8      	; 0x2c5e <DIO_enumWritePinVal+0x1f4>
    2c66:	80 95       	com	r24
    2c68:	84 23       	and	r24, r20
    2c6a:	8c 93       	st	X, r24
    2c6c:	03 c0       	rjmp	.+6      	; 0x2c74 <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    2c6e:	19 82       	std	Y+1, r1	; 0x01
    2c70:	01 c0       	rjmp	.+2      	; 0x2c74 <DIO_enumWritePinVal+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2c72:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c76:	28 96       	adiw	r28, 0x08	; 8
    2c78:	0f b6       	in	r0, 0x3f	; 63
    2c7a:	f8 94       	cli
    2c7c:	de bf       	out	0x3e, r29	; 62
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	cd bf       	out	0x3d, r28	; 61
    2c82:	cf 91       	pop	r28
    2c84:	df 91       	pop	r29
    2c86:	08 95       	ret

00002c88 <DIO_enumReadPinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */
DIO_errorStatus DIO_enumReadPinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 *Copy_Pu8Data)
{
    2c88:	df 93       	push	r29
    2c8a:	cf 93       	push	r28
    2c8c:	cd b7       	in	r28, 0x3d	; 61
    2c8e:	de b7       	in	r29, 0x3e	; 62
    2c90:	27 97       	sbiw	r28, 0x07	; 7
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	8a 83       	std	Y+2, r24	; 0x02
    2c9e:	6b 83       	std	Y+3, r22	; 0x03
    2ca0:	5d 83       	std	Y+5, r21	; 0x05
    2ca2:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    2caa:	84 30       	cpi	r24, 0x04	; 4
    2cac:	08 f0       	brcs	.+2      	; 0x2cb0 <DIO_enumReadPinVal+0x28>
    2cae:	a6 c0       	rjmp	.+332    	; 0x2dfc <DIO_enumReadPinVal+0x174>
    2cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb2:	88 30       	cpi	r24, 0x08	; 8
    2cb4:	08 f0       	brcs	.+2      	; 0x2cb8 <DIO_enumReadPinVal+0x30>
    2cb6:	a2 c0       	rjmp	.+324    	; 0x2dfc <DIO_enumReadPinVal+0x174>
  {
    /* Check on the Required PORT Number */
    switch (Copy_u8PORT)
    2cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cba:	28 2f       	mov	r18, r24
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	3f 83       	std	Y+7, r19	; 0x07
    2cc0:	2e 83       	std	Y+6, r18	; 0x06
    2cc2:	4e 81       	ldd	r20, Y+6	; 0x06
    2cc4:	5f 81       	ldd	r21, Y+7	; 0x07
    2cc6:	41 30       	cpi	r20, 0x01	; 1
    2cc8:	51 05       	cpc	r21, r1
    2cca:	c1 f1       	breq	.+112    	; 0x2d3c <DIO_enumReadPinVal+0xb4>
    2ccc:	8e 81       	ldd	r24, Y+6	; 0x06
    2cce:	9f 81       	ldd	r25, Y+7	; 0x07
    2cd0:	82 30       	cpi	r24, 0x02	; 2
    2cd2:	91 05       	cpc	r25, r1
    2cd4:	34 f4       	brge	.+12     	; 0x2ce2 <DIO_enumReadPinVal+0x5a>
    2cd6:	2e 81       	ldd	r18, Y+6	; 0x06
    2cd8:	3f 81       	ldd	r19, Y+7	; 0x07
    2cda:	21 15       	cp	r18, r1
    2cdc:	31 05       	cpc	r19, r1
    2cde:	71 f0       	breq	.+28     	; 0x2cfc <DIO_enumReadPinVal+0x74>
    2ce0:	8e c0       	rjmp	.+284    	; 0x2dfe <DIO_enumReadPinVal+0x176>
    2ce2:	4e 81       	ldd	r20, Y+6	; 0x06
    2ce4:	5f 81       	ldd	r21, Y+7	; 0x07
    2ce6:	42 30       	cpi	r20, 0x02	; 2
    2ce8:	51 05       	cpc	r21, r1
    2cea:	09 f4       	brne	.+2      	; 0x2cee <DIO_enumReadPinVal+0x66>
    2cec:	47 c0       	rjmp	.+142    	; 0x2d7c <DIO_enumReadPinVal+0xf4>
    2cee:	8e 81       	ldd	r24, Y+6	; 0x06
    2cf0:	9f 81       	ldd	r25, Y+7	; 0x07
    2cf2:	83 30       	cpi	r24, 0x03	; 3
    2cf4:	91 05       	cpc	r25, r1
    2cf6:	09 f4       	brne	.+2      	; 0x2cfa <DIO_enumReadPinVal+0x72>
    2cf8:	61 c0       	rjmp	.+194    	; 0x2dbc <DIO_enumReadPinVal+0x134>
    2cfa:	81 c0       	rjmp	.+258    	; 0x2dfe <DIO_enumReadPinVal+0x176>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = READ_BIT(PINA_REG, Copy_u8PIN);
    2cfc:	e9 e3       	ldi	r30, 0x39	; 57
    2cfe:	f0 e0       	ldi	r31, 0x00	; 0
    2d00:	80 81       	ld	r24, Z
    2d02:	48 2f       	mov	r20, r24
    2d04:	50 e0       	ldi	r21, 0x00	; 0
    2d06:	8b 81       	ldd	r24, Y+3	; 0x03
    2d08:	28 2f       	mov	r18, r24
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	02 c0       	rjmp	.+4      	; 0x2d16 <DIO_enumReadPinVal+0x8e>
    2d12:	88 0f       	add	r24, r24
    2d14:	99 1f       	adc	r25, r25
    2d16:	2a 95       	dec	r18
    2d18:	e2 f7       	brpl	.-8      	; 0x2d12 <DIO_enumReadPinVal+0x8a>
    2d1a:	9a 01       	movw	r18, r20
    2d1c:	28 23       	and	r18, r24
    2d1e:	39 23       	and	r19, r25
    2d20:	8b 81       	ldd	r24, Y+3	; 0x03
    2d22:	88 2f       	mov	r24, r24
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	a9 01       	movw	r20, r18
    2d28:	02 c0       	rjmp	.+4      	; 0x2d2e <DIO_enumReadPinVal+0xa6>
    2d2a:	55 95       	asr	r21
    2d2c:	47 95       	ror	r20
    2d2e:	8a 95       	dec	r24
    2d30:	e2 f7       	brpl	.-8      	; 0x2d2a <DIO_enumReadPinVal+0xa2>
    2d32:	ca 01       	movw	r24, r20
    2d34:	ec 81       	ldd	r30, Y+4	; 0x04
    2d36:	fd 81       	ldd	r31, Y+5	; 0x05
    2d38:	80 83       	st	Z, r24
    2d3a:	61 c0       	rjmp	.+194    	; 0x2dfe <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = READ_BIT(PINB_REG, Copy_u8PIN);
    2d3c:	e6 e3       	ldi	r30, 0x36	; 54
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	80 81       	ld	r24, Z
    2d42:	48 2f       	mov	r20, r24
    2d44:	50 e0       	ldi	r21, 0x00	; 0
    2d46:	8b 81       	ldd	r24, Y+3	; 0x03
    2d48:	28 2f       	mov	r18, r24
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	02 c0       	rjmp	.+4      	; 0x2d56 <DIO_enumReadPinVal+0xce>
    2d52:	88 0f       	add	r24, r24
    2d54:	99 1f       	adc	r25, r25
    2d56:	2a 95       	dec	r18
    2d58:	e2 f7       	brpl	.-8      	; 0x2d52 <DIO_enumReadPinVal+0xca>
    2d5a:	9a 01       	movw	r18, r20
    2d5c:	28 23       	and	r18, r24
    2d5e:	39 23       	and	r19, r25
    2d60:	8b 81       	ldd	r24, Y+3	; 0x03
    2d62:	88 2f       	mov	r24, r24
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	a9 01       	movw	r20, r18
    2d68:	02 c0       	rjmp	.+4      	; 0x2d6e <DIO_enumReadPinVal+0xe6>
    2d6a:	55 95       	asr	r21
    2d6c:	47 95       	ror	r20
    2d6e:	8a 95       	dec	r24
    2d70:	e2 f7       	brpl	.-8      	; 0x2d6a <DIO_enumReadPinVal+0xe2>
    2d72:	ca 01       	movw	r24, r20
    2d74:	ec 81       	ldd	r30, Y+4	; 0x04
    2d76:	fd 81       	ldd	r31, Y+5	; 0x05
    2d78:	80 83       	st	Z, r24
    2d7a:	41 c0       	rjmp	.+130    	; 0x2dfe <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = READ_BIT(PINC_REG, Copy_u8PIN);
    2d7c:	e3 e3       	ldi	r30, 0x33	; 51
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	48 2f       	mov	r20, r24
    2d84:	50 e0       	ldi	r21, 0x00	; 0
    2d86:	8b 81       	ldd	r24, Y+3	; 0x03
    2d88:	28 2f       	mov	r18, r24
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	02 c0       	rjmp	.+4      	; 0x2d96 <DIO_enumReadPinVal+0x10e>
    2d92:	88 0f       	add	r24, r24
    2d94:	99 1f       	adc	r25, r25
    2d96:	2a 95       	dec	r18
    2d98:	e2 f7       	brpl	.-8      	; 0x2d92 <DIO_enumReadPinVal+0x10a>
    2d9a:	9a 01       	movw	r18, r20
    2d9c:	28 23       	and	r18, r24
    2d9e:	39 23       	and	r19, r25
    2da0:	8b 81       	ldd	r24, Y+3	; 0x03
    2da2:	88 2f       	mov	r24, r24
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	a9 01       	movw	r20, r18
    2da8:	02 c0       	rjmp	.+4      	; 0x2dae <DIO_enumReadPinVal+0x126>
    2daa:	55 95       	asr	r21
    2dac:	47 95       	ror	r20
    2dae:	8a 95       	dec	r24
    2db0:	e2 f7       	brpl	.-8      	; 0x2daa <DIO_enumReadPinVal+0x122>
    2db2:	ca 01       	movw	r24, r20
    2db4:	ec 81       	ldd	r30, Y+4	; 0x04
    2db6:	fd 81       	ldd	r31, Y+5	; 0x05
    2db8:	80 83       	st	Z, r24
    2dba:	21 c0       	rjmp	.+66     	; 0x2dfe <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = READ_BIT(PIND_REG, Copy_u8PIN);
    2dbc:	e0 e3       	ldi	r30, 0x30	; 48
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	48 2f       	mov	r20, r24
    2dc4:	50 e0       	ldi	r21, 0x00	; 0
    2dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc8:	28 2f       	mov	r18, r24
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	02 c0       	rjmp	.+4      	; 0x2dd6 <DIO_enumReadPinVal+0x14e>
    2dd2:	88 0f       	add	r24, r24
    2dd4:	99 1f       	adc	r25, r25
    2dd6:	2a 95       	dec	r18
    2dd8:	e2 f7       	brpl	.-8      	; 0x2dd2 <DIO_enumReadPinVal+0x14a>
    2dda:	9a 01       	movw	r18, r20
    2ddc:	28 23       	and	r18, r24
    2dde:	39 23       	and	r19, r25
    2de0:	8b 81       	ldd	r24, Y+3	; 0x03
    2de2:	88 2f       	mov	r24, r24
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	a9 01       	movw	r20, r18
    2de8:	02 c0       	rjmp	.+4      	; 0x2dee <DIO_enumReadPinVal+0x166>
    2dea:	55 95       	asr	r21
    2dec:	47 95       	ror	r20
    2dee:	8a 95       	dec	r24
    2df0:	e2 f7       	brpl	.-8      	; 0x2dea <DIO_enumReadPinVal+0x162>
    2df2:	ca 01       	movw	r24, r20
    2df4:	ec 81       	ldd	r30, Y+4	; 0x04
    2df6:	fd 81       	ldd	r31, Y+5	; 0x05
    2df8:	80 83       	st	Z, r24
    2dfa:	01 c0       	rjmp	.+2      	; 0x2dfe <DIO_enumReadPinVal+0x176>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    2dfc:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e00:	27 96       	adiw	r28, 0x07	; 7
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	f8 94       	cli
    2e06:	de bf       	out	0x3e, r29	; 62
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	cd bf       	out	0x3d, r28	; 61
    2e0c:	cf 91       	pop	r28
    2e0e:	df 91       	pop	r29
    2e10:	08 95       	ret

00002e12 <DIO_enumTogglePinVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN)
{
    2e12:	df 93       	push	r29
    2e14:	cf 93       	push	r28
    2e16:	00 d0       	rcall	.+0      	; 0x2e18 <DIO_enumTogglePinVal+0x6>
    2e18:	00 d0       	rcall	.+0      	; 0x2e1a <DIO_enumTogglePinVal+0x8>
    2e1a:	0f 92       	push	r0
    2e1c:	cd b7       	in	r28, 0x3d	; 61
    2e1e:	de b7       	in	r29, 0x3e	; 62
    2e20:	8a 83       	std	Y+2, r24	; 0x02
    2e22:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2e28:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2a:	84 30       	cpi	r24, 0x04	; 4
    2e2c:	08 f0       	brcs	.+2      	; 0x2e30 <DIO_enumTogglePinVal+0x1e>
    2e2e:	73 c0       	rjmp	.+230    	; 0x2f16 <DIO_enumTogglePinVal+0x104>
    2e30:	8b 81       	ldd	r24, Y+3	; 0x03
    2e32:	88 30       	cpi	r24, 0x08	; 8
    2e34:	08 f0       	brcs	.+2      	; 0x2e38 <DIO_enumTogglePinVal+0x26>
    2e36:	6f c0       	rjmp	.+222    	; 0x2f16 <DIO_enumTogglePinVal+0x104>
  {
    switch (Copy_u8PORT)
    2e38:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3a:	28 2f       	mov	r18, r24
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	3d 83       	std	Y+5, r19	; 0x05
    2e40:	2c 83       	std	Y+4, r18	; 0x04
    2e42:	8c 81       	ldd	r24, Y+4	; 0x04
    2e44:	9d 81       	ldd	r25, Y+5	; 0x05
    2e46:	81 30       	cpi	r24, 0x01	; 1
    2e48:	91 05       	cpc	r25, r1
    2e4a:	49 f1       	breq	.+82     	; 0x2e9e <DIO_enumTogglePinVal+0x8c>
    2e4c:	2c 81       	ldd	r18, Y+4	; 0x04
    2e4e:	3d 81       	ldd	r19, Y+5	; 0x05
    2e50:	22 30       	cpi	r18, 0x02	; 2
    2e52:	31 05       	cpc	r19, r1
    2e54:	2c f4       	brge	.+10     	; 0x2e60 <DIO_enumTogglePinVal+0x4e>
    2e56:	8c 81       	ldd	r24, Y+4	; 0x04
    2e58:	9d 81       	ldd	r25, Y+5	; 0x05
    2e5a:	00 97       	sbiw	r24, 0x00	; 0
    2e5c:	61 f0       	breq	.+24     	; 0x2e76 <DIO_enumTogglePinVal+0x64>
    2e5e:	5c c0       	rjmp	.+184    	; 0x2f18 <DIO_enumTogglePinVal+0x106>
    2e60:	2c 81       	ldd	r18, Y+4	; 0x04
    2e62:	3d 81       	ldd	r19, Y+5	; 0x05
    2e64:	22 30       	cpi	r18, 0x02	; 2
    2e66:	31 05       	cpc	r19, r1
    2e68:	71 f1       	breq	.+92     	; 0x2ec6 <DIO_enumTogglePinVal+0xb4>
    2e6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e6e:	83 30       	cpi	r24, 0x03	; 3
    2e70:	91 05       	cpc	r25, r1
    2e72:	e9 f1       	breq	.+122    	; 0x2eee <DIO_enumTogglePinVal+0xdc>
    2e74:	51 c0       	rjmp	.+162    	; 0x2f18 <DIO_enumTogglePinVal+0x106>
    {
    case DIO_PORTA:
      TOG_BIT(PORTA_REG, Copy_u8PIN);
    2e76:	ab e3       	ldi	r26, 0x3B	; 59
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	eb e3       	ldi	r30, 0x3B	; 59
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	80 81       	ld	r24, Z
    2e80:	48 2f       	mov	r20, r24
    2e82:	8b 81       	ldd	r24, Y+3	; 0x03
    2e84:	28 2f       	mov	r18, r24
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	02 2e       	mov	r0, r18
    2e8e:	02 c0       	rjmp	.+4      	; 0x2e94 <DIO_enumTogglePinVal+0x82>
    2e90:	88 0f       	add	r24, r24
    2e92:	99 1f       	adc	r25, r25
    2e94:	0a 94       	dec	r0
    2e96:	e2 f7       	brpl	.-8      	; 0x2e90 <DIO_enumTogglePinVal+0x7e>
    2e98:	84 27       	eor	r24, r20
    2e9a:	8c 93       	st	X, r24
    2e9c:	3d c0       	rjmp	.+122    	; 0x2f18 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTB:
      TOG_BIT(PORTB_REG, Copy_u8PIN);
    2e9e:	a8 e3       	ldi	r26, 0x38	; 56
    2ea0:	b0 e0       	ldi	r27, 0x00	; 0
    2ea2:	e8 e3       	ldi	r30, 0x38	; 56
    2ea4:	f0 e0       	ldi	r31, 0x00	; 0
    2ea6:	80 81       	ld	r24, Z
    2ea8:	48 2f       	mov	r20, r24
    2eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2eac:	28 2f       	mov	r18, r24
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	02 2e       	mov	r0, r18
    2eb6:	02 c0       	rjmp	.+4      	; 0x2ebc <DIO_enumTogglePinVal+0xaa>
    2eb8:	88 0f       	add	r24, r24
    2eba:	99 1f       	adc	r25, r25
    2ebc:	0a 94       	dec	r0
    2ebe:	e2 f7       	brpl	.-8      	; 0x2eb8 <DIO_enumTogglePinVal+0xa6>
    2ec0:	84 27       	eor	r24, r20
    2ec2:	8c 93       	st	X, r24
    2ec4:	29 c0       	rjmp	.+82     	; 0x2f18 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTC:
      TOG_BIT(PORTC_REG, Copy_u8PIN);
    2ec6:	a5 e3       	ldi	r26, 0x35	; 53
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	e5 e3       	ldi	r30, 0x35	; 53
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	80 81       	ld	r24, Z
    2ed0:	48 2f       	mov	r20, r24
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	28 2f       	mov	r18, r24
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	02 2e       	mov	r0, r18
    2ede:	02 c0       	rjmp	.+4      	; 0x2ee4 <DIO_enumTogglePinVal+0xd2>
    2ee0:	88 0f       	add	r24, r24
    2ee2:	99 1f       	adc	r25, r25
    2ee4:	0a 94       	dec	r0
    2ee6:	e2 f7       	brpl	.-8      	; 0x2ee0 <DIO_enumTogglePinVal+0xce>
    2ee8:	84 27       	eor	r24, r20
    2eea:	8c 93       	st	X, r24
    2eec:	15 c0       	rjmp	.+42     	; 0x2f18 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTD:
      TOG_BIT(PORTD_REG, Copy_u8PIN);
    2eee:	a2 e3       	ldi	r26, 0x32	; 50
    2ef0:	b0 e0       	ldi	r27, 0x00	; 0
    2ef2:	e2 e3       	ldi	r30, 0x32	; 50
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	80 81       	ld	r24, Z
    2ef8:	48 2f       	mov	r20, r24
    2efa:	8b 81       	ldd	r24, Y+3	; 0x03
    2efc:	28 2f       	mov	r18, r24
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	02 2e       	mov	r0, r18
    2f06:	02 c0       	rjmp	.+4      	; 0x2f0c <DIO_enumTogglePinVal+0xfa>
    2f08:	88 0f       	add	r24, r24
    2f0a:	99 1f       	adc	r25, r25
    2f0c:	0a 94       	dec	r0
    2f0e:	e2 f7       	brpl	.-8      	; 0x2f08 <DIO_enumTogglePinVal+0xf6>
    2f10:	84 27       	eor	r24, r20
    2f12:	8c 93       	st	X, r24
    2f14:	01 c0       	rjmp	.+2      	; 0x2f18 <DIO_enumTogglePinVal+0x106>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    2f16:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2f18:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f1a:	0f 90       	pop	r0
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	0f 90       	pop	r0
    2f24:	cf 91       	pop	r28
    2f26:	df 91       	pop	r29
    2f28:	08 95       	ret

00002f2a <DIO_enumConnectPullUp>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
    =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumConnectPullUp(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    2f2a:	df 93       	push	r29
    2f2c:	cf 93       	push	r28
    2f2e:	00 d0       	rcall	.+0      	; 0x2f30 <DIO_enumConnectPullUp+0x6>
    2f30:	00 d0       	rcall	.+0      	; 0x2f32 <DIO_enumConnectPullUp+0x8>
    2f32:	00 d0       	rcall	.+0      	; 0x2f34 <DIO_enumConnectPullUp+0xa>
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
    2f38:	8a 83       	std	Y+2, r24	; 0x02
    2f3a:	6b 83       	std	Y+3, r22	; 0x03
    2f3c:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2f42:	8a 81       	ldd	r24, Y+2	; 0x02
    2f44:	84 30       	cpi	r24, 0x04	; 4
    2f46:	08 f0       	brcs	.+2      	; 0x2f4a <DIO_enumConnectPullUp+0x20>
    2f48:	3e c1       	rjmp	.+636    	; 0x31c6 <DIO_enumConnectPullUp+0x29c>
    2f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4c:	88 30       	cpi	r24, 0x08	; 8
    2f4e:	08 f0       	brcs	.+2      	; 0x2f52 <DIO_enumConnectPullUp+0x28>
    2f50:	3a c1       	rjmp	.+628    	; 0x31c6 <DIO_enumConnectPullUp+0x29c>
  {
    switch (Copy_u8PORT)
    2f52:	8a 81       	ldd	r24, Y+2	; 0x02
    2f54:	28 2f       	mov	r18, r24
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	3e 83       	std	Y+6, r19	; 0x06
    2f5a:	2d 83       	std	Y+5, r18	; 0x05
    2f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f60:	81 30       	cpi	r24, 0x01	; 1
    2f62:	91 05       	cpc	r25, r1
    2f64:	09 f4       	brne	.+2      	; 0x2f68 <DIO_enumConnectPullUp+0x3e>
    2f66:	5d c0       	rjmp	.+186    	; 0x3022 <DIO_enumConnectPullUp+0xf8>
    2f68:	2d 81       	ldd	r18, Y+5	; 0x05
    2f6a:	3e 81       	ldd	r19, Y+6	; 0x06
    2f6c:	22 30       	cpi	r18, 0x02	; 2
    2f6e:	31 05       	cpc	r19, r1
    2f70:	2c f4       	brge	.+10     	; 0x2f7c <DIO_enumConnectPullUp+0x52>
    2f72:	8d 81       	ldd	r24, Y+5	; 0x05
    2f74:	9e 81       	ldd	r25, Y+6	; 0x06
    2f76:	00 97       	sbiw	r24, 0x00	; 0
    2f78:	71 f0       	breq	.+28     	; 0x2f96 <DIO_enumConnectPullUp+0x6c>
    2f7a:	26 c1       	rjmp	.+588    	; 0x31c8 <DIO_enumConnectPullUp+0x29e>
    2f7c:	2d 81       	ldd	r18, Y+5	; 0x05
    2f7e:	3e 81       	ldd	r19, Y+6	; 0x06
    2f80:	22 30       	cpi	r18, 0x02	; 2
    2f82:	31 05       	cpc	r19, r1
    2f84:	09 f4       	brne	.+2      	; 0x2f88 <DIO_enumConnectPullUp+0x5e>
    2f86:	93 c0       	rjmp	.+294    	; 0x30ae <DIO_enumConnectPullUp+0x184>
    2f88:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8c:	83 30       	cpi	r24, 0x03	; 3
    2f8e:	91 05       	cpc	r25, r1
    2f90:	09 f4       	brne	.+2      	; 0x2f94 <DIO_enumConnectPullUp+0x6a>
    2f92:	d3 c0       	rjmp	.+422    	; 0x313a <DIO_enumConnectPullUp+0x210>
    2f94:	19 c1       	rjmp	.+562    	; 0x31c8 <DIO_enumConnectPullUp+0x29e>
    {
    /* Connect or disconnect the pull up resistance to the given pin in port A */
    case DIO_PORTA:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    2f96:	8c 81       	ldd	r24, Y+4	; 0x04
    2f98:	81 30       	cpi	r24, 0x01	; 1
    2f9a:	71 f5       	brne	.+92     	; 0x2ff8 <DIO_enumConnectPullUp+0xce>
      {
        CLR_BIT(SFIOR_REG, PUD); // It's default is zero
    2f9c:	a0 e5       	ldi	r26, 0x50	; 80
    2f9e:	b0 e0       	ldi	r27, 0x00	; 0
    2fa0:	e0 e5       	ldi	r30, 0x50	; 80
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	80 81       	ld	r24, Z
    2fa6:	8b 7f       	andi	r24, 0xFB	; 251
    2fa8:	8c 93       	st	X, r24
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    2faa:	aa e3       	ldi	r26, 0x3A	; 58
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	ea e3       	ldi	r30, 0x3A	; 58
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 81       	ld	r24, Z
    2fb4:	48 2f       	mov	r20, r24
    2fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb8:	28 2f       	mov	r18, r24
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	02 c0       	rjmp	.+4      	; 0x2fc6 <DIO_enumConnectPullUp+0x9c>
    2fc2:	88 0f       	add	r24, r24
    2fc4:	99 1f       	adc	r25, r25
    2fc6:	2a 95       	dec	r18
    2fc8:	e2 f7       	brpl	.-8      	; 0x2fc2 <DIO_enumConnectPullUp+0x98>
    2fca:	80 95       	com	r24
    2fcc:	84 23       	and	r24, r20
    2fce:	8c 93       	st	X, r24
        SET_BIT(PORTA_REG, Copy_u8PIN);
    2fd0:	ab e3       	ldi	r26, 0x3B	; 59
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	eb e3       	ldi	r30, 0x3B	; 59
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	80 81       	ld	r24, Z
    2fda:	48 2f       	mov	r20, r24
    2fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fde:	28 2f       	mov	r18, r24
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	02 2e       	mov	r0, r18
    2fe8:	02 c0       	rjmp	.+4      	; 0x2fee <DIO_enumConnectPullUp+0xc4>
    2fea:	88 0f       	add	r24, r24
    2fec:	99 1f       	adc	r25, r25
    2fee:	0a 94       	dec	r0
    2ff0:	e2 f7       	brpl	.-8      	; 0x2fea <DIO_enumConnectPullUp+0xc0>
    2ff2:	84 2b       	or	r24, r20
    2ff4:	8c 93       	st	X, r24
    2ff6:	e8 c0       	rjmp	.+464    	; 0x31c8 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    2ff8:	ab e3       	ldi	r26, 0x3B	; 59
    2ffa:	b0 e0       	ldi	r27, 0x00	; 0
    2ffc:	eb e3       	ldi	r30, 0x3B	; 59
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	80 81       	ld	r24, Z
    3002:	48 2f       	mov	r20, r24
    3004:	8b 81       	ldd	r24, Y+3	; 0x03
    3006:	28 2f       	mov	r18, r24
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	02 2e       	mov	r0, r18
    3010:	02 c0       	rjmp	.+4      	; 0x3016 <DIO_enumConnectPullUp+0xec>
    3012:	88 0f       	add	r24, r24
    3014:	99 1f       	adc	r25, r25
    3016:	0a 94       	dec	r0
    3018:	e2 f7       	brpl	.-8      	; 0x3012 <DIO_enumConnectPullUp+0xe8>
    301a:	80 95       	com	r24
    301c:	84 23       	and	r24, r20
    301e:	8c 93       	st	X, r24
    3020:	d3 c0       	rjmp	.+422    	; 0x31c8 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port B */
    case DIO_PORTB:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    3022:	8c 81       	ldd	r24, Y+4	; 0x04
    3024:	81 30       	cpi	r24, 0x01	; 1
    3026:	71 f5       	brne	.+92     	; 0x3084 <DIO_enumConnectPullUp+0x15a>
      {
        CLR_BIT(SFIOR_REG, PUD);
    3028:	a0 e5       	ldi	r26, 0x50	; 80
    302a:	b0 e0       	ldi	r27, 0x00	; 0
    302c:	e0 e5       	ldi	r30, 0x50	; 80
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	80 81       	ld	r24, Z
    3032:	8b 7f       	andi	r24, 0xFB	; 251
    3034:	8c 93       	st	X, r24
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    3036:	a7 e3       	ldi	r26, 0x37	; 55
    3038:	b0 e0       	ldi	r27, 0x00	; 0
    303a:	e7 e3       	ldi	r30, 0x37	; 55
    303c:	f0 e0       	ldi	r31, 0x00	; 0
    303e:	80 81       	ld	r24, Z
    3040:	48 2f       	mov	r20, r24
    3042:	8b 81       	ldd	r24, Y+3	; 0x03
    3044:	28 2f       	mov	r18, r24
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	02 c0       	rjmp	.+4      	; 0x3052 <DIO_enumConnectPullUp+0x128>
    304e:	88 0f       	add	r24, r24
    3050:	99 1f       	adc	r25, r25
    3052:	2a 95       	dec	r18
    3054:	e2 f7       	brpl	.-8      	; 0x304e <DIO_enumConnectPullUp+0x124>
    3056:	80 95       	com	r24
    3058:	84 23       	and	r24, r20
    305a:	8c 93       	st	X, r24
        SET_BIT(PORTB_REG, Copy_u8PIN);
    305c:	a8 e3       	ldi	r26, 0x38	; 56
    305e:	b0 e0       	ldi	r27, 0x00	; 0
    3060:	e8 e3       	ldi	r30, 0x38	; 56
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	80 81       	ld	r24, Z
    3066:	48 2f       	mov	r20, r24
    3068:	8b 81       	ldd	r24, Y+3	; 0x03
    306a:	28 2f       	mov	r18, r24
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	02 2e       	mov	r0, r18
    3074:	02 c0       	rjmp	.+4      	; 0x307a <DIO_enumConnectPullUp+0x150>
    3076:	88 0f       	add	r24, r24
    3078:	99 1f       	adc	r25, r25
    307a:	0a 94       	dec	r0
    307c:	e2 f7       	brpl	.-8      	; 0x3076 <DIO_enumConnectPullUp+0x14c>
    307e:	84 2b       	or	r24, r20
    3080:	8c 93       	st	X, r24
    3082:	a2 c0       	rjmp	.+324    	; 0x31c8 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    3084:	a8 e3       	ldi	r26, 0x38	; 56
    3086:	b0 e0       	ldi	r27, 0x00	; 0
    3088:	e8 e3       	ldi	r30, 0x38	; 56
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	80 81       	ld	r24, Z
    308e:	48 2f       	mov	r20, r24
    3090:	8b 81       	ldd	r24, Y+3	; 0x03
    3092:	28 2f       	mov	r18, r24
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	02 2e       	mov	r0, r18
    309c:	02 c0       	rjmp	.+4      	; 0x30a2 <DIO_enumConnectPullUp+0x178>
    309e:	88 0f       	add	r24, r24
    30a0:	99 1f       	adc	r25, r25
    30a2:	0a 94       	dec	r0
    30a4:	e2 f7       	brpl	.-8      	; 0x309e <DIO_enumConnectPullUp+0x174>
    30a6:	80 95       	com	r24
    30a8:	84 23       	and	r24, r20
    30aa:	8c 93       	st	X, r24
    30ac:	8d c0       	rjmp	.+282    	; 0x31c8 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port C */
    case DIO_PORTC:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    30ae:	8c 81       	ldd	r24, Y+4	; 0x04
    30b0:	81 30       	cpi	r24, 0x01	; 1
    30b2:	71 f5       	brne	.+92     	; 0x3110 <DIO_enumConnectPullUp+0x1e6>
      {
        CLR_BIT(SFIOR_REG, PUD);
    30b4:	a0 e5       	ldi	r26, 0x50	; 80
    30b6:	b0 e0       	ldi	r27, 0x00	; 0
    30b8:	e0 e5       	ldi	r30, 0x50	; 80
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	80 81       	ld	r24, Z
    30be:	8b 7f       	andi	r24, 0xFB	; 251
    30c0:	8c 93       	st	X, r24
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    30c2:	a4 e3       	ldi	r26, 0x34	; 52
    30c4:	b0 e0       	ldi	r27, 0x00	; 0
    30c6:	e4 e3       	ldi	r30, 0x34	; 52
    30c8:	f0 e0       	ldi	r31, 0x00	; 0
    30ca:	80 81       	ld	r24, Z
    30cc:	48 2f       	mov	r20, r24
    30ce:	8b 81       	ldd	r24, Y+3	; 0x03
    30d0:	28 2f       	mov	r18, r24
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	02 c0       	rjmp	.+4      	; 0x30de <DIO_enumConnectPullUp+0x1b4>
    30da:	88 0f       	add	r24, r24
    30dc:	99 1f       	adc	r25, r25
    30de:	2a 95       	dec	r18
    30e0:	e2 f7       	brpl	.-8      	; 0x30da <DIO_enumConnectPullUp+0x1b0>
    30e2:	80 95       	com	r24
    30e4:	84 23       	and	r24, r20
    30e6:	8c 93       	st	X, r24
        SET_BIT(PORTC_REG, Copy_u8PIN);
    30e8:	a5 e3       	ldi	r26, 0x35	; 53
    30ea:	b0 e0       	ldi	r27, 0x00	; 0
    30ec:	e5 e3       	ldi	r30, 0x35	; 53
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	80 81       	ld	r24, Z
    30f2:	48 2f       	mov	r20, r24
    30f4:	8b 81       	ldd	r24, Y+3	; 0x03
    30f6:	28 2f       	mov	r18, r24
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	02 2e       	mov	r0, r18
    3100:	02 c0       	rjmp	.+4      	; 0x3106 <DIO_enumConnectPullUp+0x1dc>
    3102:	88 0f       	add	r24, r24
    3104:	99 1f       	adc	r25, r25
    3106:	0a 94       	dec	r0
    3108:	e2 f7       	brpl	.-8      	; 0x3102 <DIO_enumConnectPullUp+0x1d8>
    310a:	84 2b       	or	r24, r20
    310c:	8c 93       	st	X, r24
    310e:	5c c0       	rjmp	.+184    	; 0x31c8 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    3110:	a5 e3       	ldi	r26, 0x35	; 53
    3112:	b0 e0       	ldi	r27, 0x00	; 0
    3114:	e5 e3       	ldi	r30, 0x35	; 53
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	80 81       	ld	r24, Z
    311a:	48 2f       	mov	r20, r24
    311c:	8b 81       	ldd	r24, Y+3	; 0x03
    311e:	28 2f       	mov	r18, r24
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	02 2e       	mov	r0, r18
    3128:	02 c0       	rjmp	.+4      	; 0x312e <DIO_enumConnectPullUp+0x204>
    312a:	88 0f       	add	r24, r24
    312c:	99 1f       	adc	r25, r25
    312e:	0a 94       	dec	r0
    3130:	e2 f7       	brpl	.-8      	; 0x312a <DIO_enumConnectPullUp+0x200>
    3132:	80 95       	com	r24
    3134:	84 23       	and	r24, r20
    3136:	8c 93       	st	X, r24
    3138:	47 c0       	rjmp	.+142    	; 0x31c8 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port D */
    case DIO_PORTD:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    313a:	8c 81       	ldd	r24, Y+4	; 0x04
    313c:	81 30       	cpi	r24, 0x01	; 1
    313e:	71 f5       	brne	.+92     	; 0x319c <DIO_enumConnectPullUp+0x272>
      {
        CLR_BIT(SFIOR_REG, PUD);
    3140:	a0 e5       	ldi	r26, 0x50	; 80
    3142:	b0 e0       	ldi	r27, 0x00	; 0
    3144:	e0 e5       	ldi	r30, 0x50	; 80
    3146:	f0 e0       	ldi	r31, 0x00	; 0
    3148:	80 81       	ld	r24, Z
    314a:	8b 7f       	andi	r24, 0xFB	; 251
    314c:	8c 93       	st	X, r24
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    314e:	a1 e3       	ldi	r26, 0x31	; 49
    3150:	b0 e0       	ldi	r27, 0x00	; 0
    3152:	e1 e3       	ldi	r30, 0x31	; 49
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	80 81       	ld	r24, Z
    3158:	48 2f       	mov	r20, r24
    315a:	8b 81       	ldd	r24, Y+3	; 0x03
    315c:	28 2f       	mov	r18, r24
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	81 e0       	ldi	r24, 0x01	; 1
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	02 c0       	rjmp	.+4      	; 0x316a <DIO_enumConnectPullUp+0x240>
    3166:	88 0f       	add	r24, r24
    3168:	99 1f       	adc	r25, r25
    316a:	2a 95       	dec	r18
    316c:	e2 f7       	brpl	.-8      	; 0x3166 <DIO_enumConnectPullUp+0x23c>
    316e:	80 95       	com	r24
    3170:	84 23       	and	r24, r20
    3172:	8c 93       	st	X, r24
        SET_BIT(PORTD_REG, Copy_u8PIN);
    3174:	a2 e3       	ldi	r26, 0x32	; 50
    3176:	b0 e0       	ldi	r27, 0x00	; 0
    3178:	e2 e3       	ldi	r30, 0x32	; 50
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	80 81       	ld	r24, Z
    317e:	48 2f       	mov	r20, r24
    3180:	8b 81       	ldd	r24, Y+3	; 0x03
    3182:	28 2f       	mov	r18, r24
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	02 2e       	mov	r0, r18
    318c:	02 c0       	rjmp	.+4      	; 0x3192 <DIO_enumConnectPullUp+0x268>
    318e:	88 0f       	add	r24, r24
    3190:	99 1f       	adc	r25, r25
    3192:	0a 94       	dec	r0
    3194:	e2 f7       	brpl	.-8      	; 0x318e <DIO_enumConnectPullUp+0x264>
    3196:	84 2b       	or	r24, r20
    3198:	8c 93       	st	X, r24
    319a:	16 c0       	rjmp	.+44     	; 0x31c8 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    319c:	a2 e3       	ldi	r26, 0x32	; 50
    319e:	b0 e0       	ldi	r27, 0x00	; 0
    31a0:	e2 e3       	ldi	r30, 0x32	; 50
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	80 81       	ld	r24, Z
    31a6:	48 2f       	mov	r20, r24
    31a8:	8b 81       	ldd	r24, Y+3	; 0x03
    31aa:	28 2f       	mov	r18, r24
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	02 2e       	mov	r0, r18
    31b4:	02 c0       	rjmp	.+4      	; 0x31ba <DIO_enumConnectPullUp+0x290>
    31b6:	88 0f       	add	r24, r24
    31b8:	99 1f       	adc	r25, r25
    31ba:	0a 94       	dec	r0
    31bc:	e2 f7       	brpl	.-8      	; 0x31b6 <DIO_enumConnectPullUp+0x28c>
    31be:	80 95       	com	r24
    31c0:	84 23       	and	r24, r20
    31c2:	8c 93       	st	X, r24
    31c4:	01 c0       	rjmp	.+2      	; 0x31c8 <DIO_enumConnectPullUp+0x29e>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    31c6:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    31ca:	26 96       	adiw	r28, 0x06	; 6
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	de bf       	out	0x3e, r29	; 62
    31d2:	0f be       	out	0x3f, r0	; 63
    31d4:	cd bf       	out	0x3d, r28	; 61
    31d6:	cf 91       	pop	r28
    31d8:	df 91       	pop	r29
    31da:	08 95       	ret

000031dc <DIO_enumSetPortDir>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_errorStatus DIO_enumSetPortDir(u8 Copy_u8PORT, u8 Copy_u8Direction)
{
    31dc:	df 93       	push	r29
    31de:	cf 93       	push	r28
    31e0:	00 d0       	rcall	.+0      	; 0x31e2 <DIO_enumSetPortDir+0x6>
    31e2:	00 d0       	rcall	.+0      	; 0x31e4 <DIO_enumSetPortDir+0x8>
    31e4:	0f 92       	push	r0
    31e6:	cd b7       	in	r28, 0x3d	; 61
    31e8:	de b7       	in	r29, 0x3e	; 62
    31ea:	8a 83       	std	Y+2, r24	; 0x02
    31ec:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD))
    31f2:	8a 81       	ldd	r24, Y+2	; 0x02
    31f4:	84 30       	cpi	r24, 0x04	; 4
    31f6:	a8 f5       	brcc	.+106    	; 0x3262 <DIO_enumSetPortDir+0x86>
  {
    switch (Copy_u8PORT)
    31f8:	8a 81       	ldd	r24, Y+2	; 0x02
    31fa:	28 2f       	mov	r18, r24
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	3d 83       	std	Y+5, r19	; 0x05
    3200:	2c 83       	std	Y+4, r18	; 0x04
    3202:	8c 81       	ldd	r24, Y+4	; 0x04
    3204:	9d 81       	ldd	r25, Y+5	; 0x05
    3206:	81 30       	cpi	r24, 0x01	; 1
    3208:	91 05       	cpc	r25, r1
    320a:	d1 f0       	breq	.+52     	; 0x3240 <DIO_enumSetPortDir+0x64>
    320c:	2c 81       	ldd	r18, Y+4	; 0x04
    320e:	3d 81       	ldd	r19, Y+5	; 0x05
    3210:	22 30       	cpi	r18, 0x02	; 2
    3212:	31 05       	cpc	r19, r1
    3214:	2c f4       	brge	.+10     	; 0x3220 <DIO_enumSetPortDir+0x44>
    3216:	8c 81       	ldd	r24, Y+4	; 0x04
    3218:	9d 81       	ldd	r25, Y+5	; 0x05
    321a:	00 97       	sbiw	r24, 0x00	; 0
    321c:	61 f0       	breq	.+24     	; 0x3236 <DIO_enumSetPortDir+0x5a>
    321e:	1f c0       	rjmp	.+62     	; 0x325e <DIO_enumSetPortDir+0x82>
    3220:	2c 81       	ldd	r18, Y+4	; 0x04
    3222:	3d 81       	ldd	r19, Y+5	; 0x05
    3224:	22 30       	cpi	r18, 0x02	; 2
    3226:	31 05       	cpc	r19, r1
    3228:	81 f0       	breq	.+32     	; 0x324a <DIO_enumSetPortDir+0x6e>
    322a:	8c 81       	ldd	r24, Y+4	; 0x04
    322c:	9d 81       	ldd	r25, Y+5	; 0x05
    322e:	83 30       	cpi	r24, 0x03	; 3
    3230:	91 05       	cpc	r25, r1
    3232:	81 f0       	breq	.+32     	; 0x3254 <DIO_enumSetPortDir+0x78>
    3234:	14 c0       	rjmp	.+40     	; 0x325e <DIO_enumSetPortDir+0x82>
    {
    case DIO_PORTA:
      DDRA_REG = Copy_u8Direction;
    3236:	ea e3       	ldi	r30, 0x3A	; 58
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	8b 81       	ldd	r24, Y+3	; 0x03
    323c:	80 83       	st	Z, r24
    323e:	12 c0       	rjmp	.+36     	; 0x3264 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTB:
      DDRB_REG = Copy_u8Direction;
    3240:	e7 e3       	ldi	r30, 0x37	; 55
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	8b 81       	ldd	r24, Y+3	; 0x03
    3246:	80 83       	st	Z, r24
    3248:	0d c0       	rjmp	.+26     	; 0x3264 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTC:
      DDRC_REG = Copy_u8Direction;
    324a:	e4 e3       	ldi	r30, 0x34	; 52
    324c:	f0 e0       	ldi	r31, 0x00	; 0
    324e:	8b 81       	ldd	r24, Y+3	; 0x03
    3250:	80 83       	st	Z, r24
    3252:	08 c0       	rjmp	.+16     	; 0x3264 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTD:
      DDRD_REG = Copy_u8Direction;
    3254:	e1 e3       	ldi	r30, 0x31	; 49
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	8b 81       	ldd	r24, Y+3	; 0x03
    325a:	80 83       	st	Z, r24
    325c:	03 c0       	rjmp	.+6      	; 0x3264 <DIO_enumSetPortDir+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    325e:	19 82       	std	Y+1, r1	; 0x01
    3260:	01 c0       	rjmp	.+2      	; 0x3264 <DIO_enumSetPortDir+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    3262:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    3264:	89 81       	ldd	r24, Y+1	; 0x01
}
    3266:	0f 90       	pop	r0
    3268:	0f 90       	pop	r0
    326a:	0f 90       	pop	r0
    326c:	0f 90       	pop	r0
    326e:	0f 90       	pop	r0
    3270:	cf 91       	pop	r28
    3272:	df 91       	pop	r29
    3274:	08 95       	ret

00003276 <DIO_enumWritePortVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePortVal(u8 Copy_u8PORT, u8 Copy_u8Value)
{
    3276:	df 93       	push	r29
    3278:	cf 93       	push	r28
    327a:	00 d0       	rcall	.+0      	; 0x327c <DIO_enumWritePortVal+0x6>
    327c:	00 d0       	rcall	.+0      	; 0x327e <DIO_enumWritePortVal+0x8>
    327e:	0f 92       	push	r0
    3280:	cd b7       	in	r28, 0x3d	; 61
    3282:	de b7       	in	r29, 0x3e	; 62
    3284:	8a 83       	std	Y+2, r24	; 0x02
    3286:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD) && ((Copy_u8Value <= 255) || (Copy_u8Value == DIO_PORT_LOW) || (Copy_u8Value == DIO_PORT_HIGH)))
    328c:	8a 81       	ldd	r24, Y+2	; 0x02
    328e:	84 30       	cpi	r24, 0x04	; 4
    3290:	a8 f5       	brcc	.+106    	; 0x32fc <DIO_enumWritePortVal+0x86>
  {
    switch (Copy_u8PORT)
    3292:	8a 81       	ldd	r24, Y+2	; 0x02
    3294:	28 2f       	mov	r18, r24
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	3d 83       	std	Y+5, r19	; 0x05
    329a:	2c 83       	std	Y+4, r18	; 0x04
    329c:	8c 81       	ldd	r24, Y+4	; 0x04
    329e:	9d 81       	ldd	r25, Y+5	; 0x05
    32a0:	81 30       	cpi	r24, 0x01	; 1
    32a2:	91 05       	cpc	r25, r1
    32a4:	d1 f0       	breq	.+52     	; 0x32da <DIO_enumWritePortVal+0x64>
    32a6:	2c 81       	ldd	r18, Y+4	; 0x04
    32a8:	3d 81       	ldd	r19, Y+5	; 0x05
    32aa:	22 30       	cpi	r18, 0x02	; 2
    32ac:	31 05       	cpc	r19, r1
    32ae:	2c f4       	brge	.+10     	; 0x32ba <DIO_enumWritePortVal+0x44>
    32b0:	8c 81       	ldd	r24, Y+4	; 0x04
    32b2:	9d 81       	ldd	r25, Y+5	; 0x05
    32b4:	00 97       	sbiw	r24, 0x00	; 0
    32b6:	61 f0       	breq	.+24     	; 0x32d0 <DIO_enumWritePortVal+0x5a>
    32b8:	1f c0       	rjmp	.+62     	; 0x32f8 <DIO_enumWritePortVal+0x82>
    32ba:	2c 81       	ldd	r18, Y+4	; 0x04
    32bc:	3d 81       	ldd	r19, Y+5	; 0x05
    32be:	22 30       	cpi	r18, 0x02	; 2
    32c0:	31 05       	cpc	r19, r1
    32c2:	81 f0       	breq	.+32     	; 0x32e4 <DIO_enumWritePortVal+0x6e>
    32c4:	8c 81       	ldd	r24, Y+4	; 0x04
    32c6:	9d 81       	ldd	r25, Y+5	; 0x05
    32c8:	83 30       	cpi	r24, 0x03	; 3
    32ca:	91 05       	cpc	r25, r1
    32cc:	81 f0       	breq	.+32     	; 0x32ee <DIO_enumWritePortVal+0x78>
    32ce:	14 c0       	rjmp	.+40     	; 0x32f8 <DIO_enumWritePortVal+0x82>
    {
    case DIO_PORTA:
      PORTA_REG= Copy_u8Value;
    32d0:	eb e3       	ldi	r30, 0x3B	; 59
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	8b 81       	ldd	r24, Y+3	; 0x03
    32d6:	80 83       	st	Z, r24
    32d8:	12 c0       	rjmp	.+36     	; 0x32fe <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTB:
      PORTB_REG = Copy_u8Value;
    32da:	e8 e3       	ldi	r30, 0x38	; 56
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	8b 81       	ldd	r24, Y+3	; 0x03
    32e0:	80 83       	st	Z, r24
    32e2:	0d c0       	rjmp	.+26     	; 0x32fe <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTC:
      PORTC_REG = Copy_u8Value;
    32e4:	e5 e3       	ldi	r30, 0x35	; 53
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ea:	80 83       	st	Z, r24
    32ec:	08 c0       	rjmp	.+16     	; 0x32fe <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTD:
      PORTD_REG = Copy_u8Value;
    32ee:	e2 e3       	ldi	r30, 0x32	; 50
    32f0:	f0 e0       	ldi	r31, 0x00	; 0
    32f2:	8b 81       	ldd	r24, Y+3	; 0x03
    32f4:	80 83       	st	Z, r24
    32f6:	03 c0       	rjmp	.+6      	; 0x32fe <DIO_enumWritePortVal+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    32f8:	19 82       	std	Y+1, r1	; 0x01
    32fa:	01 c0       	rjmp	.+2      	; 0x32fe <DIO_enumWritePortVal+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    32fc:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    32fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3300:	0f 90       	pop	r0
    3302:	0f 90       	pop	r0
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	0f 90       	pop	r0
    330a:	cf 91       	pop	r28
    330c:	df 91       	pop	r29
    330e:	08 95       	ret

00003310 <DIO_enumReadPorVal>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_errorStatus DIO_enumReadPorVal(u8 Copy_u8PORT, u8 *Copy_Pu8Data)
{
    3310:	df 93       	push	r29
    3312:	cf 93       	push	r28
    3314:	cd b7       	in	r28, 0x3d	; 61
    3316:	de b7       	in	r29, 0x3e	; 62
    3318:	27 97       	sbiw	r28, 0x07	; 7
    331a:	0f b6       	in	r0, 0x3f	; 63
    331c:	f8 94       	cli
    331e:	de bf       	out	0x3e, r29	; 62
    3320:	0f be       	out	0x3f, r0	; 63
    3322:	cd bf       	out	0x3d, r28	; 61
    3324:	8a 83       	std	Y+2, r24	; 0x02
    3326:	7c 83       	std	Y+4, r23	; 0x04
    3328:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    332a:	81 e0       	ldi	r24, 0x01	; 1
    332c:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    332e:	8a 81       	ldd	r24, Y+2	; 0x02
    3330:	84 30       	cpi	r24, 0x04	; 4
    3332:	08 f0       	brcs	.+2      	; 0x3336 <DIO_enumReadPorVal+0x26>
    3334:	3f c0       	rjmp	.+126    	; 0x33b4 <DIO_enumReadPorVal+0xa4>
  {
    switch (Copy_u8PORT)
    3336:	8a 81       	ldd	r24, Y+2	; 0x02
    3338:	28 2f       	mov	r18, r24
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	3f 83       	std	Y+7, r19	; 0x07
    333e:	2e 83       	std	Y+6, r18	; 0x06
    3340:	8e 81       	ldd	r24, Y+6	; 0x06
    3342:	9f 81       	ldd	r25, Y+7	; 0x07
    3344:	81 30       	cpi	r24, 0x01	; 1
    3346:	91 05       	cpc	r25, r1
    3348:	e1 f0       	breq	.+56     	; 0x3382 <DIO_enumReadPorVal+0x72>
    334a:	2e 81       	ldd	r18, Y+6	; 0x06
    334c:	3f 81       	ldd	r19, Y+7	; 0x07
    334e:	22 30       	cpi	r18, 0x02	; 2
    3350:	31 05       	cpc	r19, r1
    3352:	2c f4       	brge	.+10     	; 0x335e <DIO_enumReadPorVal+0x4e>
    3354:	8e 81       	ldd	r24, Y+6	; 0x06
    3356:	9f 81       	ldd	r25, Y+7	; 0x07
    3358:	00 97       	sbiw	r24, 0x00	; 0
    335a:	61 f0       	breq	.+24     	; 0x3374 <DIO_enumReadPorVal+0x64>
    335c:	27 c0       	rjmp	.+78     	; 0x33ac <DIO_enumReadPorVal+0x9c>
    335e:	2e 81       	ldd	r18, Y+6	; 0x06
    3360:	3f 81       	ldd	r19, Y+7	; 0x07
    3362:	22 30       	cpi	r18, 0x02	; 2
    3364:	31 05       	cpc	r19, r1
    3366:	a1 f0       	breq	.+40     	; 0x3390 <DIO_enumReadPorVal+0x80>
    3368:	8e 81       	ldd	r24, Y+6	; 0x06
    336a:	9f 81       	ldd	r25, Y+7	; 0x07
    336c:	83 30       	cpi	r24, 0x03	; 3
    336e:	91 05       	cpc	r25, r1
    3370:	b1 f0       	breq	.+44     	; 0x339e <DIO_enumReadPorVal+0x8e>
    3372:	1c c0       	rjmp	.+56     	; 0x33ac <DIO_enumReadPorVal+0x9c>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = PINA_REG;
    3374:	e9 e3       	ldi	r30, 0x39	; 57
    3376:	f0 e0       	ldi	r31, 0x00	; 0
    3378:	80 81       	ld	r24, Z
    337a:	eb 81       	ldd	r30, Y+3	; 0x03
    337c:	fc 81       	ldd	r31, Y+4	; 0x04
    337e:	80 83       	st	Z, r24
    3380:	16 c0       	rjmp	.+44     	; 0x33ae <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = PINB_REG;
    3382:	e6 e3       	ldi	r30, 0x36	; 54
    3384:	f0 e0       	ldi	r31, 0x00	; 0
    3386:	80 81       	ld	r24, Z
    3388:	eb 81       	ldd	r30, Y+3	; 0x03
    338a:	fc 81       	ldd	r31, Y+4	; 0x04
    338c:	80 83       	st	Z, r24
    338e:	0f c0       	rjmp	.+30     	; 0x33ae <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = PINC_REG;
    3390:	e3 e3       	ldi	r30, 0x33	; 51
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	80 81       	ld	r24, Z
    3396:	eb 81       	ldd	r30, Y+3	; 0x03
    3398:	fc 81       	ldd	r31, Y+4	; 0x04
    339a:	80 83       	st	Z, r24
    339c:	08 c0       	rjmp	.+16     	; 0x33ae <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = PIND_REG;
    339e:	e0 e3       	ldi	r30, 0x30	; 48
    33a0:	f0 e0       	ldi	r31, 0x00	; 0
    33a2:	80 81       	ld	r24, Z
    33a4:	eb 81       	ldd	r30, Y+3	; 0x03
    33a6:	fc 81       	ldd	r31, Y+4	; 0x04
    33a8:	80 83       	st	Z, r24
    33aa:	01 c0       	rjmp	.+2      	; 0x33ae <DIO_enumReadPorVal+0x9e>
      break;
    default:
      LOC_enumState = DIO_NOK;
    33ac:	19 82       	std	Y+1, r1	; 0x01
      break;
    }
    return LOC_enumState;
    33ae:	99 81       	ldd	r25, Y+1	; 0x01
    33b0:	9d 83       	std	Y+5, r25	; 0x05
    33b2:	03 c0       	rjmp	.+6      	; 0x33ba <DIO_enumReadPorVal+0xaa>
  }
  else
  {
    LOC_enumState = DIO_NOK;
    33b4:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    33b6:	29 81       	ldd	r18, Y+1	; 0x01
    33b8:	2d 83       	std	Y+5, r18	; 0x05
    33ba:	8d 81       	ldd	r24, Y+5	; 0x05
}
    33bc:	27 96       	adiw	r28, 0x07	; 7
    33be:	0f b6       	in	r0, 0x3f	; 63
    33c0:	f8 94       	cli
    33c2:	de bf       	out	0x3e, r29	; 62
    33c4:	0f be       	out	0x3f, r0	; 63
    33c6:	cd bf       	out	0x3d, r28	; 61
    33c8:	cf 91       	pop	r28
    33ca:	df 91       	pop	r29
    33cc:	08 95       	ret

000033ce <DIO_enumTogglePortValue>:
 * Parameters :
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePortValue(u8 Copy_u8PORT)
{
    33ce:	df 93       	push	r29
    33d0:	cf 93       	push	r28
    33d2:	00 d0       	rcall	.+0      	; 0x33d4 <DIO_enumTogglePortValue+0x6>
    33d4:	00 d0       	rcall	.+0      	; 0x33d6 <DIO_enumTogglePortValue+0x8>
    33d6:	cd b7       	in	r28, 0x3d	; 61
    33d8:	de b7       	in	r29, 0x3e	; 62
    33da:	8a 83       	std	Y+2, r24	; 0x02
  DIO_errorStatus LOC_enumState = DIO_OK;
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8PORT <= DIO_PORTD)
    33e0:	8a 81       	ldd	r24, Y+2	; 0x02
    33e2:	84 30       	cpi	r24, 0x04	; 4
    33e4:	08 f0       	brcs	.+2      	; 0x33e8 <DIO_enumTogglePortValue+0x1a>
    33e6:	3f c0       	rjmp	.+126    	; 0x3466 <DIO_enumTogglePortValue+0x98>
  {
    switch (Copy_u8PORT)
    33e8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ea:	28 2f       	mov	r18, r24
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	3c 83       	std	Y+4, r19	; 0x04
    33f0:	2b 83       	std	Y+3, r18	; 0x03
    33f2:	8b 81       	ldd	r24, Y+3	; 0x03
    33f4:	9c 81       	ldd	r25, Y+4	; 0x04
    33f6:	81 30       	cpi	r24, 0x01	; 1
    33f8:	91 05       	cpc	r25, r1
    33fa:	e9 f0       	breq	.+58     	; 0x3436 <DIO_enumTogglePortValue+0x68>
    33fc:	2b 81       	ldd	r18, Y+3	; 0x03
    33fe:	3c 81       	ldd	r19, Y+4	; 0x04
    3400:	22 30       	cpi	r18, 0x02	; 2
    3402:	31 05       	cpc	r19, r1
    3404:	2c f4       	brge	.+10     	; 0x3410 <DIO_enumTogglePortValue+0x42>
    3406:	8b 81       	ldd	r24, Y+3	; 0x03
    3408:	9c 81       	ldd	r25, Y+4	; 0x04
    340a:	00 97       	sbiw	r24, 0x00	; 0
    340c:	61 f0       	breq	.+24     	; 0x3426 <DIO_enumTogglePortValue+0x58>
    340e:	2c c0       	rjmp	.+88     	; 0x3468 <DIO_enumTogglePortValue+0x9a>
    3410:	2b 81       	ldd	r18, Y+3	; 0x03
    3412:	3c 81       	ldd	r19, Y+4	; 0x04
    3414:	22 30       	cpi	r18, 0x02	; 2
    3416:	31 05       	cpc	r19, r1
    3418:	b1 f0       	breq	.+44     	; 0x3446 <DIO_enumTogglePortValue+0x78>
    341a:	8b 81       	ldd	r24, Y+3	; 0x03
    341c:	9c 81       	ldd	r25, Y+4	; 0x04
    341e:	83 30       	cpi	r24, 0x03	; 3
    3420:	91 05       	cpc	r25, r1
    3422:	c9 f0       	breq	.+50     	; 0x3456 <DIO_enumTogglePortValue+0x88>
    3424:	21 c0       	rjmp	.+66     	; 0x3468 <DIO_enumTogglePortValue+0x9a>
    {
    case DIO_PORTA:
      PORTA_REG = ~PORTA_REG;
    3426:	ab e3       	ldi	r26, 0x3B	; 59
    3428:	b0 e0       	ldi	r27, 0x00	; 0
    342a:	eb e3       	ldi	r30, 0x3B	; 59
    342c:	f0 e0       	ldi	r31, 0x00	; 0
    342e:	80 81       	ld	r24, Z
    3430:	80 95       	com	r24
    3432:	8c 93       	st	X, r24
    3434:	19 c0       	rjmp	.+50     	; 0x3468 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTB:
      PORTB_REG = ~PORTB_REG;
    3436:	a8 e3       	ldi	r26, 0x38	; 56
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	e8 e3       	ldi	r30, 0x38	; 56
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	80 81       	ld	r24, Z
    3440:	80 95       	com	r24
    3442:	8c 93       	st	X, r24
    3444:	11 c0       	rjmp	.+34     	; 0x3468 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTC:
      PORTC_REG = ~PORTC_REG;
    3446:	a5 e3       	ldi	r26, 0x35	; 53
    3448:	b0 e0       	ldi	r27, 0x00	; 0
    344a:	e5 e3       	ldi	r30, 0x35	; 53
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	80 81       	ld	r24, Z
    3450:	80 95       	com	r24
    3452:	8c 93       	st	X, r24
    3454:	09 c0       	rjmp	.+18     	; 0x3468 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTD:
      PORTD_REG = ~PORTD_REG;
    3456:	a2 e3       	ldi	r26, 0x32	; 50
    3458:	b0 e0       	ldi	r27, 0x00	; 0
    345a:	e2 e3       	ldi	r30, 0x32	; 50
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	80 81       	ld	r24, Z
    3460:	80 95       	com	r24
    3462:	8c 93       	st	X, r24
    3464:	01 c0       	rjmp	.+2      	; 0x3468 <DIO_enumTogglePortValue+0x9a>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    3466:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    3468:	89 81       	ldd	r24, Y+1	; 0x01
}
    346a:	0f 90       	pop	r0
    346c:	0f 90       	pop	r0
    346e:	0f 90       	pop	r0
    3470:	0f 90       	pop	r0
    3472:	cf 91       	pop	r28
    3474:	df 91       	pop	r29
    3476:	08 95       	ret

00003478 <DIO_vWriteLowNibble>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_errorStatus DIO_vWriteLowNibble(u8 Copy_u8PORT, u8 value)
{
    3478:	df 93       	push	r29
    347a:	cf 93       	push	r28
    347c:	00 d0       	rcall	.+0      	; 0x347e <DIO_vWriteLowNibble+0x6>
    347e:	00 d0       	rcall	.+0      	; 0x3480 <DIO_vWriteLowNibble+0x8>
    3480:	0f 92       	push	r0
    3482:	cd b7       	in	r28, 0x3d	; 61
    3484:	de b7       	in	r29, 0x3e	; 62
    3486:	8a 83       	std	Y+2, r24	; 0x02
    3488:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    348e:	8a 81       	ldd	r24, Y+2	; 0x02
    3490:	84 30       	cpi	r24, 0x04	; 4
    3492:	08 f0       	brcs	.+2      	; 0x3496 <DIO_vWriteLowNibble+0x1e>
    3494:	62 c0       	rjmp	.+196    	; 0x355a <DIO_vWriteLowNibble+0xe2>
  {
    value &= 0x0F;
    3496:	8b 81       	ldd	r24, Y+3	; 0x03
    3498:	8f 70       	andi	r24, 0x0F	; 15
    349a:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    349c:	8a 81       	ldd	r24, Y+2	; 0x02
    349e:	28 2f       	mov	r18, r24
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	3d 83       	std	Y+5, r19	; 0x05
    34a4:	2c 83       	std	Y+4, r18	; 0x04
    34a6:	8c 81       	ldd	r24, Y+4	; 0x04
    34a8:	9d 81       	ldd	r25, Y+5	; 0x05
    34aa:	81 30       	cpi	r24, 0x01	; 1
    34ac:	91 05       	cpc	r25, r1
    34ae:	29 f1       	breq	.+74     	; 0x34fa <DIO_vWriteLowNibble+0x82>
    34b0:	2c 81       	ldd	r18, Y+4	; 0x04
    34b2:	3d 81       	ldd	r19, Y+5	; 0x05
    34b4:	22 30       	cpi	r18, 0x02	; 2
    34b6:	31 05       	cpc	r19, r1
    34b8:	2c f4       	brge	.+10     	; 0x34c4 <DIO_vWriteLowNibble+0x4c>
    34ba:	8c 81       	ldd	r24, Y+4	; 0x04
    34bc:	9d 81       	ldd	r25, Y+5	; 0x05
    34be:	00 97       	sbiw	r24, 0x00	; 0
    34c0:	61 f0       	breq	.+24     	; 0x34da <DIO_vWriteLowNibble+0x62>
    34c2:	4c c0       	rjmp	.+152    	; 0x355c <DIO_vWriteLowNibble+0xe4>
    34c4:	2c 81       	ldd	r18, Y+4	; 0x04
    34c6:	3d 81       	ldd	r19, Y+5	; 0x05
    34c8:	22 30       	cpi	r18, 0x02	; 2
    34ca:	31 05       	cpc	r19, r1
    34cc:	31 f1       	breq	.+76     	; 0x351a <DIO_vWriteLowNibble+0xa2>
    34ce:	8c 81       	ldd	r24, Y+4	; 0x04
    34d0:	9d 81       	ldd	r25, Y+5	; 0x05
    34d2:	83 30       	cpi	r24, 0x03	; 3
    34d4:	91 05       	cpc	r25, r1
    34d6:	89 f1       	breq	.+98     	; 0x353a <DIO_vWriteLowNibble+0xc2>
    34d8:	41 c0       	rjmp	.+130    	; 0x355c <DIO_vWriteLowNibble+0xe4>
    {
    case DIO_PORTA:
      PORTA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    34da:	ab e3       	ldi	r26, 0x3B	; 59
    34dc:	b0 e0       	ldi	r27, 0x00	; 0
    34de:	eb e3       	ldi	r30, 0x3B	; 59
    34e0:	f0 e0       	ldi	r31, 0x00	; 0
    34e2:	80 81       	ld	r24, Z
    34e4:	80 7f       	andi	r24, 0xF0	; 240
    34e6:	8c 93       	st	X, r24
      PORTA_REG |= value;
    34e8:	ab e3       	ldi	r26, 0x3B	; 59
    34ea:	b0 e0       	ldi	r27, 0x00	; 0
    34ec:	eb e3       	ldi	r30, 0x3B	; 59
    34ee:	f0 e0       	ldi	r31, 0x00	; 0
    34f0:	90 81       	ld	r25, Z
    34f2:	8b 81       	ldd	r24, Y+3	; 0x03
    34f4:	89 2b       	or	r24, r25
    34f6:	8c 93       	st	X, r24
    34f8:	31 c0       	rjmp	.+98     	; 0x355c <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    34fa:	a8 e3       	ldi	r26, 0x38	; 56
    34fc:	b0 e0       	ldi	r27, 0x00	; 0
    34fe:	e8 e3       	ldi	r30, 0x38	; 56
    3500:	f0 e0       	ldi	r31, 0x00	; 0
    3502:	80 81       	ld	r24, Z
    3504:	80 7f       	andi	r24, 0xF0	; 240
    3506:	8c 93       	st	X, r24
      PORTB_REG |= value;
    3508:	a8 e3       	ldi	r26, 0x38	; 56
    350a:	b0 e0       	ldi	r27, 0x00	; 0
    350c:	e8 e3       	ldi	r30, 0x38	; 56
    350e:	f0 e0       	ldi	r31, 0x00	; 0
    3510:	90 81       	ld	r25, Z
    3512:	8b 81       	ldd	r24, Y+3	; 0x03
    3514:	89 2b       	or	r24, r25
    3516:	8c 93       	st	X, r24
    3518:	21 c0       	rjmp	.+66     	; 0x355c <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    351a:	a5 e3       	ldi	r26, 0x35	; 53
    351c:	b0 e0       	ldi	r27, 0x00	; 0
    351e:	e5 e3       	ldi	r30, 0x35	; 53
    3520:	f0 e0       	ldi	r31, 0x00	; 0
    3522:	80 81       	ld	r24, Z
    3524:	80 7f       	andi	r24, 0xF0	; 240
    3526:	8c 93       	st	X, r24
      PORTC_REG |= value;
    3528:	a5 e3       	ldi	r26, 0x35	; 53
    352a:	b0 e0       	ldi	r27, 0x00	; 0
    352c:	e5 e3       	ldi	r30, 0x35	; 53
    352e:	f0 e0       	ldi	r31, 0x00	; 0
    3530:	90 81       	ld	r25, Z
    3532:	8b 81       	ldd	r24, Y+3	; 0x03
    3534:	89 2b       	or	r24, r25
    3536:	8c 93       	st	X, r24
    3538:	11 c0       	rjmp	.+34     	; 0x355c <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    353a:	a2 e3       	ldi	r26, 0x32	; 50
    353c:	b0 e0       	ldi	r27, 0x00	; 0
    353e:	e2 e3       	ldi	r30, 0x32	; 50
    3540:	f0 e0       	ldi	r31, 0x00	; 0
    3542:	80 81       	ld	r24, Z
    3544:	80 7f       	andi	r24, 0xF0	; 240
    3546:	8c 93       	st	X, r24
      PORTD_REG |= value;
    3548:	a2 e3       	ldi	r26, 0x32	; 50
    354a:	b0 e0       	ldi	r27, 0x00	; 0
    354c:	e2 e3       	ldi	r30, 0x32	; 50
    354e:	f0 e0       	ldi	r31, 0x00	; 0
    3550:	90 81       	ld	r25, Z
    3552:	8b 81       	ldd	r24, Y+3	; 0x03
    3554:	89 2b       	or	r24, r25
    3556:	8c 93       	st	X, r24
    3558:	01 c0       	rjmp	.+2      	; 0x355c <DIO_vWriteLowNibble+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    355a:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    355c:	89 81       	ldd	r24, Y+1	; 0x01
}
    355e:	0f 90       	pop	r0
    3560:	0f 90       	pop	r0
    3562:	0f 90       	pop	r0
    3564:	0f 90       	pop	r0
    3566:	0f 90       	pop	r0
    3568:	cf 91       	pop	r28
    356a:	df 91       	pop	r29
    356c:	08 95       	ret

0000356e <DIO_vWriteHighNibble>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_errorStatus DIO_vWriteHighNibble(u8 Copy_u8PORT, u8 value)
{
    356e:	df 93       	push	r29
    3570:	cf 93       	push	r28
    3572:	00 d0       	rcall	.+0      	; 0x3574 <DIO_vWriteHighNibble+0x6>
    3574:	00 d0       	rcall	.+0      	; 0x3576 <DIO_vWriteHighNibble+0x8>
    3576:	0f 92       	push	r0
    3578:	cd b7       	in	r28, 0x3d	; 61
    357a:	de b7       	in	r29, 0x3e	; 62
    357c:	8a 83       	std	Y+2, r24	; 0x02
    357e:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    3584:	8a 81       	ldd	r24, Y+2	; 0x02
    3586:	84 30       	cpi	r24, 0x04	; 4
    3588:	08 f0       	brcs	.+2      	; 0x358c <DIO_vWriteHighNibble+0x1e>
    358a:	63 c0       	rjmp	.+198    	; 0x3652 <DIO_vWriteHighNibble+0xe4>
  {
    value <<= 4;
    358c:	8b 81       	ldd	r24, Y+3	; 0x03
    358e:	82 95       	swap	r24
    3590:	80 7f       	andi	r24, 0xF0	; 240
    3592:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    3594:	8a 81       	ldd	r24, Y+2	; 0x02
    3596:	28 2f       	mov	r18, r24
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	3d 83       	std	Y+5, r19	; 0x05
    359c:	2c 83       	std	Y+4, r18	; 0x04
    359e:	8c 81       	ldd	r24, Y+4	; 0x04
    35a0:	9d 81       	ldd	r25, Y+5	; 0x05
    35a2:	81 30       	cpi	r24, 0x01	; 1
    35a4:	91 05       	cpc	r25, r1
    35a6:	29 f1       	breq	.+74     	; 0x35f2 <DIO_vWriteHighNibble+0x84>
    35a8:	2c 81       	ldd	r18, Y+4	; 0x04
    35aa:	3d 81       	ldd	r19, Y+5	; 0x05
    35ac:	22 30       	cpi	r18, 0x02	; 2
    35ae:	31 05       	cpc	r19, r1
    35b0:	2c f4       	brge	.+10     	; 0x35bc <DIO_vWriteHighNibble+0x4e>
    35b2:	8c 81       	ldd	r24, Y+4	; 0x04
    35b4:	9d 81       	ldd	r25, Y+5	; 0x05
    35b6:	00 97       	sbiw	r24, 0x00	; 0
    35b8:	61 f0       	breq	.+24     	; 0x35d2 <DIO_vWriteHighNibble+0x64>
    35ba:	4c c0       	rjmp	.+152    	; 0x3654 <DIO_vWriteHighNibble+0xe6>
    35bc:	2c 81       	ldd	r18, Y+4	; 0x04
    35be:	3d 81       	ldd	r19, Y+5	; 0x05
    35c0:	22 30       	cpi	r18, 0x02	; 2
    35c2:	31 05       	cpc	r19, r1
    35c4:	31 f1       	breq	.+76     	; 0x3612 <DIO_vWriteHighNibble+0xa4>
    35c6:	8c 81       	ldd	r24, Y+4	; 0x04
    35c8:	9d 81       	ldd	r25, Y+5	; 0x05
    35ca:	83 30       	cpi	r24, 0x03	; 3
    35cc:	91 05       	cpc	r25, r1
    35ce:	89 f1       	breq	.+98     	; 0x3632 <DIO_vWriteHighNibble+0xc4>
    35d0:	41 c0       	rjmp	.+130    	; 0x3654 <DIO_vWriteHighNibble+0xe6>
    {
    case DIO_PORTA:
      PORTA_REG &= 0x0F;
    35d2:	ab e3       	ldi	r26, 0x3B	; 59
    35d4:	b0 e0       	ldi	r27, 0x00	; 0
    35d6:	eb e3       	ldi	r30, 0x3B	; 59
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	80 81       	ld	r24, Z
    35dc:	8f 70       	andi	r24, 0x0F	; 15
    35de:	8c 93       	st	X, r24
      PORTA_REG|= value;
    35e0:	ab e3       	ldi	r26, 0x3B	; 59
    35e2:	b0 e0       	ldi	r27, 0x00	; 0
    35e4:	eb e3       	ldi	r30, 0x3B	; 59
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	90 81       	ld	r25, Z
    35ea:	8b 81       	ldd	r24, Y+3	; 0x03
    35ec:	89 2b       	or	r24, r25
    35ee:	8c 93       	st	X, r24
    35f0:	31 c0       	rjmp	.+98     	; 0x3654 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0x0F;
    35f2:	a8 e3       	ldi	r26, 0x38	; 56
    35f4:	b0 e0       	ldi	r27, 0x00	; 0
    35f6:	e8 e3       	ldi	r30, 0x38	; 56
    35f8:	f0 e0       	ldi	r31, 0x00	; 0
    35fa:	80 81       	ld	r24, Z
    35fc:	8f 70       	andi	r24, 0x0F	; 15
    35fe:	8c 93       	st	X, r24
      PORTB_REG |= value;
    3600:	a8 e3       	ldi	r26, 0x38	; 56
    3602:	b0 e0       	ldi	r27, 0x00	; 0
    3604:	e8 e3       	ldi	r30, 0x38	; 56
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	90 81       	ld	r25, Z
    360a:	8b 81       	ldd	r24, Y+3	; 0x03
    360c:	89 2b       	or	r24, r25
    360e:	8c 93       	st	X, r24
    3610:	21 c0       	rjmp	.+66     	; 0x3654 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0x0F;
    3612:	a5 e3       	ldi	r26, 0x35	; 53
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	e5 e3       	ldi	r30, 0x35	; 53
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	80 81       	ld	r24, Z
    361c:	8f 70       	andi	r24, 0x0F	; 15
    361e:	8c 93       	st	X, r24
      PORTC_REG |= value;
    3620:	a5 e3       	ldi	r26, 0x35	; 53
    3622:	b0 e0       	ldi	r27, 0x00	; 0
    3624:	e5 e3       	ldi	r30, 0x35	; 53
    3626:	f0 e0       	ldi	r31, 0x00	; 0
    3628:	90 81       	ld	r25, Z
    362a:	8b 81       	ldd	r24, Y+3	; 0x03
    362c:	89 2b       	or	r24, r25
    362e:	8c 93       	st	X, r24
    3630:	11 c0       	rjmp	.+34     	; 0x3654 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0x0F;
    3632:	a2 e3       	ldi	r26, 0x32	; 50
    3634:	b0 e0       	ldi	r27, 0x00	; 0
    3636:	e2 e3       	ldi	r30, 0x32	; 50
    3638:	f0 e0       	ldi	r31, 0x00	; 0
    363a:	80 81       	ld	r24, Z
    363c:	8f 70       	andi	r24, 0x0F	; 15
    363e:	8c 93       	st	X, r24
      PORTD_REG |= value;
    3640:	a2 e3       	ldi	r26, 0x32	; 50
    3642:	b0 e0       	ldi	r27, 0x00	; 0
    3644:	e2 e3       	ldi	r30, 0x32	; 50
    3646:	f0 e0       	ldi	r31, 0x00	; 0
    3648:	90 81       	ld	r25, Z
    364a:	8b 81       	ldd	r24, Y+3	; 0x03
    364c:	89 2b       	or	r24, r25
    364e:	8c 93       	st	X, r24
    3650:	01 c0       	rjmp	.+2      	; 0x3654 <DIO_vWriteHighNibble+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    3652:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    3654:	89 81       	ldd	r24, Y+1	; 0x01
}
    3656:	0f 90       	pop	r0
    3658:	0f 90       	pop	r0
    365a:	0f 90       	pop	r0
    365c:	0f 90       	pop	r0
    365e:	0f 90       	pop	r0
    3660:	cf 91       	pop	r28
    3662:	df 91       	pop	r29
    3664:	08 95       	ret

00003666 <DIO_vSetLowNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetLowNibbleDir(u8 Copy_u8PORT, u8 value)
{
    3666:	df 93       	push	r29
    3668:	cf 93       	push	r28
    366a:	00 d0       	rcall	.+0      	; 0x366c <DIO_vSetLowNibbleDir+0x6>
    366c:	00 d0       	rcall	.+0      	; 0x366e <DIO_vSetLowNibbleDir+0x8>
    366e:	0f 92       	push	r0
    3670:	cd b7       	in	r28, 0x3d	; 61
    3672:	de b7       	in	r29, 0x3e	; 62
    3674:	8a 83       	std	Y+2, r24	; 0x02
    3676:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    367c:	8a 81       	ldd	r24, Y+2	; 0x02
    367e:	84 30       	cpi	r24, 0x04	; 4
    3680:	08 f0       	brcs	.+2      	; 0x3684 <DIO_vSetLowNibbleDir+0x1e>
    3682:	62 c0       	rjmp	.+196    	; 0x3748 <DIO_vSetLowNibbleDir+0xe2>
  {
    value &= 0x0F;
    3684:	8b 81       	ldd	r24, Y+3	; 0x03
    3686:	8f 70       	andi	r24, 0x0F	; 15
    3688:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    368a:	8a 81       	ldd	r24, Y+2	; 0x02
    368c:	28 2f       	mov	r18, r24
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	3d 83       	std	Y+5, r19	; 0x05
    3692:	2c 83       	std	Y+4, r18	; 0x04
    3694:	8c 81       	ldd	r24, Y+4	; 0x04
    3696:	9d 81       	ldd	r25, Y+5	; 0x05
    3698:	81 30       	cpi	r24, 0x01	; 1
    369a:	91 05       	cpc	r25, r1
    369c:	29 f1       	breq	.+74     	; 0x36e8 <DIO_vSetLowNibbleDir+0x82>
    369e:	2c 81       	ldd	r18, Y+4	; 0x04
    36a0:	3d 81       	ldd	r19, Y+5	; 0x05
    36a2:	22 30       	cpi	r18, 0x02	; 2
    36a4:	31 05       	cpc	r19, r1
    36a6:	2c f4       	brge	.+10     	; 0x36b2 <DIO_vSetLowNibbleDir+0x4c>
    36a8:	8c 81       	ldd	r24, Y+4	; 0x04
    36aa:	9d 81       	ldd	r25, Y+5	; 0x05
    36ac:	00 97       	sbiw	r24, 0x00	; 0
    36ae:	61 f0       	breq	.+24     	; 0x36c8 <DIO_vSetLowNibbleDir+0x62>
    36b0:	4c c0       	rjmp	.+152    	; 0x374a <DIO_vSetLowNibbleDir+0xe4>
    36b2:	2c 81       	ldd	r18, Y+4	; 0x04
    36b4:	3d 81       	ldd	r19, Y+5	; 0x05
    36b6:	22 30       	cpi	r18, 0x02	; 2
    36b8:	31 05       	cpc	r19, r1
    36ba:	31 f1       	breq	.+76     	; 0x3708 <DIO_vSetLowNibbleDir+0xa2>
    36bc:	8c 81       	ldd	r24, Y+4	; 0x04
    36be:	9d 81       	ldd	r25, Y+5	; 0x05
    36c0:	83 30       	cpi	r24, 0x03	; 3
    36c2:	91 05       	cpc	r25, r1
    36c4:	89 f1       	breq	.+98     	; 0x3728 <DIO_vSetLowNibbleDir+0xc2>
    36c6:	41 c0       	rjmp	.+130    	; 0x374a <DIO_vSetLowNibbleDir+0xe4>
    {
    case DIO_PORTA:
      DDRA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    36c8:	aa e3       	ldi	r26, 0x3A	; 58
    36ca:	b0 e0       	ldi	r27, 0x00	; 0
    36cc:	ea e3       	ldi	r30, 0x3A	; 58
    36ce:	f0 e0       	ldi	r31, 0x00	; 0
    36d0:	80 81       	ld	r24, Z
    36d2:	80 7f       	andi	r24, 0xF0	; 240
    36d4:	8c 93       	st	X, r24
      DDRA_REG |= value;
    36d6:	aa e3       	ldi	r26, 0x3A	; 58
    36d8:	b0 e0       	ldi	r27, 0x00	; 0
    36da:	ea e3       	ldi	r30, 0x3A	; 58
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	90 81       	ld	r25, Z
    36e0:	8b 81       	ldd	r24, Y+3	; 0x03
    36e2:	89 2b       	or	r24, r25
    36e4:	8c 93       	st	X, r24
    36e6:	31 c0       	rjmp	.+98     	; 0x374a <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    36e8:	a7 e3       	ldi	r26, 0x37	; 55
    36ea:	b0 e0       	ldi	r27, 0x00	; 0
    36ec:	e7 e3       	ldi	r30, 0x37	; 55
    36ee:	f0 e0       	ldi	r31, 0x00	; 0
    36f0:	80 81       	ld	r24, Z
    36f2:	80 7f       	andi	r24, 0xF0	; 240
    36f4:	8c 93       	st	X, r24
      DDRB_REG |= value;
    36f6:	a7 e3       	ldi	r26, 0x37	; 55
    36f8:	b0 e0       	ldi	r27, 0x00	; 0
    36fa:	e7 e3       	ldi	r30, 0x37	; 55
    36fc:	f0 e0       	ldi	r31, 0x00	; 0
    36fe:	90 81       	ld	r25, Z
    3700:	8b 81       	ldd	r24, Y+3	; 0x03
    3702:	89 2b       	or	r24, r25
    3704:	8c 93       	st	X, r24
    3706:	21 c0       	rjmp	.+66     	; 0x374a <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    3708:	a4 e3       	ldi	r26, 0x34	; 52
    370a:	b0 e0       	ldi	r27, 0x00	; 0
    370c:	e4 e3       	ldi	r30, 0x34	; 52
    370e:	f0 e0       	ldi	r31, 0x00	; 0
    3710:	80 81       	ld	r24, Z
    3712:	80 7f       	andi	r24, 0xF0	; 240
    3714:	8c 93       	st	X, r24
      DDRC_REG |= value;
    3716:	a4 e3       	ldi	r26, 0x34	; 52
    3718:	b0 e0       	ldi	r27, 0x00	; 0
    371a:	e4 e3       	ldi	r30, 0x34	; 52
    371c:	f0 e0       	ldi	r31, 0x00	; 0
    371e:	90 81       	ld	r25, Z
    3720:	8b 81       	ldd	r24, Y+3	; 0x03
    3722:	89 2b       	or	r24, r25
    3724:	8c 93       	st	X, r24
    3726:	11 c0       	rjmp	.+34     	; 0x374a <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    3728:	a1 e3       	ldi	r26, 0x31	; 49
    372a:	b0 e0       	ldi	r27, 0x00	; 0
    372c:	e1 e3       	ldi	r30, 0x31	; 49
    372e:	f0 e0       	ldi	r31, 0x00	; 0
    3730:	80 81       	ld	r24, Z
    3732:	80 7f       	andi	r24, 0xF0	; 240
    3734:	8c 93       	st	X, r24
      DDRD_REG|= value;
    3736:	a1 e3       	ldi	r26, 0x31	; 49
    3738:	b0 e0       	ldi	r27, 0x00	; 0
    373a:	e1 e3       	ldi	r30, 0x31	; 49
    373c:	f0 e0       	ldi	r31, 0x00	; 0
    373e:	90 81       	ld	r25, Z
    3740:	8b 81       	ldd	r24, Y+3	; 0x03
    3742:	89 2b       	or	r24, r25
    3744:	8c 93       	st	X, r24
    3746:	01 c0       	rjmp	.+2      	; 0x374a <DIO_vSetLowNibbleDir+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    3748:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    374a:	89 81       	ldd	r24, Y+1	; 0x01
}
    374c:	0f 90       	pop	r0
    374e:	0f 90       	pop	r0
    3750:	0f 90       	pop	r0
    3752:	0f 90       	pop	r0
    3754:	0f 90       	pop	r0
    3756:	cf 91       	pop	r28
    3758:	df 91       	pop	r29
    375a:	08 95       	ret

0000375c <DIO_vSetHighNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetHighNibbleDir(u8 Copy_u8PORT, u8 value)
{
    375c:	df 93       	push	r29
    375e:	cf 93       	push	r28
    3760:	00 d0       	rcall	.+0      	; 0x3762 <DIO_vSetHighNibbleDir+0x6>
    3762:	00 d0       	rcall	.+0      	; 0x3764 <DIO_vSetHighNibbleDir+0x8>
    3764:	0f 92       	push	r0
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
    376a:	8a 83       	std	Y+2, r24	; 0x02
    376c:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    376e:	81 e0       	ldi	r24, 0x01	; 1
    3770:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    3772:	8a 81       	ldd	r24, Y+2	; 0x02
    3774:	84 30       	cpi	r24, 0x04	; 4
    3776:	08 f0       	brcs	.+2      	; 0x377a <DIO_vSetHighNibbleDir+0x1e>
    3778:	63 c0       	rjmp	.+198    	; 0x3840 <DIO_vSetHighNibbleDir+0xe4>
  {
    value <<= 4;
    377a:	8b 81       	ldd	r24, Y+3	; 0x03
    377c:	82 95       	swap	r24
    377e:	80 7f       	andi	r24, 0xF0	; 240
    3780:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    3782:	8a 81       	ldd	r24, Y+2	; 0x02
    3784:	28 2f       	mov	r18, r24
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	3d 83       	std	Y+5, r19	; 0x05
    378a:	2c 83       	std	Y+4, r18	; 0x04
    378c:	8c 81       	ldd	r24, Y+4	; 0x04
    378e:	9d 81       	ldd	r25, Y+5	; 0x05
    3790:	81 30       	cpi	r24, 0x01	; 1
    3792:	91 05       	cpc	r25, r1
    3794:	29 f1       	breq	.+74     	; 0x37e0 <DIO_vSetHighNibbleDir+0x84>
    3796:	2c 81       	ldd	r18, Y+4	; 0x04
    3798:	3d 81       	ldd	r19, Y+5	; 0x05
    379a:	22 30       	cpi	r18, 0x02	; 2
    379c:	31 05       	cpc	r19, r1
    379e:	2c f4       	brge	.+10     	; 0x37aa <DIO_vSetHighNibbleDir+0x4e>
    37a0:	8c 81       	ldd	r24, Y+4	; 0x04
    37a2:	9d 81       	ldd	r25, Y+5	; 0x05
    37a4:	00 97       	sbiw	r24, 0x00	; 0
    37a6:	61 f0       	breq	.+24     	; 0x37c0 <DIO_vSetHighNibbleDir+0x64>
    37a8:	4c c0       	rjmp	.+152    	; 0x3842 <DIO_vSetHighNibbleDir+0xe6>
    37aa:	2c 81       	ldd	r18, Y+4	; 0x04
    37ac:	3d 81       	ldd	r19, Y+5	; 0x05
    37ae:	22 30       	cpi	r18, 0x02	; 2
    37b0:	31 05       	cpc	r19, r1
    37b2:	31 f1       	breq	.+76     	; 0x3800 <DIO_vSetHighNibbleDir+0xa4>
    37b4:	8c 81       	ldd	r24, Y+4	; 0x04
    37b6:	9d 81       	ldd	r25, Y+5	; 0x05
    37b8:	83 30       	cpi	r24, 0x03	; 3
    37ba:	91 05       	cpc	r25, r1
    37bc:	89 f1       	breq	.+98     	; 0x3820 <DIO_vSetHighNibbleDir+0xc4>
    37be:	41 c0       	rjmp	.+130    	; 0x3842 <DIO_vSetHighNibbleDir+0xe6>
    {
    case DIO_PORTA:
      DDRA_REG &= 0x0F;
    37c0:	aa e3       	ldi	r26, 0x3A	; 58
    37c2:	b0 e0       	ldi	r27, 0x00	; 0
    37c4:	ea e3       	ldi	r30, 0x3A	; 58
    37c6:	f0 e0       	ldi	r31, 0x00	; 0
    37c8:	80 81       	ld	r24, Z
    37ca:	8f 70       	andi	r24, 0x0F	; 15
    37cc:	8c 93       	st	X, r24
      DDRA_REG |= value;
    37ce:	aa e3       	ldi	r26, 0x3A	; 58
    37d0:	b0 e0       	ldi	r27, 0x00	; 0
    37d2:	ea e3       	ldi	r30, 0x3A	; 58
    37d4:	f0 e0       	ldi	r31, 0x00	; 0
    37d6:	90 81       	ld	r25, Z
    37d8:	8b 81       	ldd	r24, Y+3	; 0x03
    37da:	89 2b       	or	r24, r25
    37dc:	8c 93       	st	X, r24
    37de:	31 c0       	rjmp	.+98     	; 0x3842 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0x0F;
    37e0:	a7 e3       	ldi	r26, 0x37	; 55
    37e2:	b0 e0       	ldi	r27, 0x00	; 0
    37e4:	e7 e3       	ldi	r30, 0x37	; 55
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	80 81       	ld	r24, Z
    37ea:	8f 70       	andi	r24, 0x0F	; 15
    37ec:	8c 93       	st	X, r24
      DDRB_REG |= value;
    37ee:	a7 e3       	ldi	r26, 0x37	; 55
    37f0:	b0 e0       	ldi	r27, 0x00	; 0
    37f2:	e7 e3       	ldi	r30, 0x37	; 55
    37f4:	f0 e0       	ldi	r31, 0x00	; 0
    37f6:	90 81       	ld	r25, Z
    37f8:	8b 81       	ldd	r24, Y+3	; 0x03
    37fa:	89 2b       	or	r24, r25
    37fc:	8c 93       	st	X, r24
    37fe:	21 c0       	rjmp	.+66     	; 0x3842 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0x0F;
    3800:	a4 e3       	ldi	r26, 0x34	; 52
    3802:	b0 e0       	ldi	r27, 0x00	; 0
    3804:	e4 e3       	ldi	r30, 0x34	; 52
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	80 81       	ld	r24, Z
    380a:	8f 70       	andi	r24, 0x0F	; 15
    380c:	8c 93       	st	X, r24
      DDRC_REG |= value;
    380e:	a4 e3       	ldi	r26, 0x34	; 52
    3810:	b0 e0       	ldi	r27, 0x00	; 0
    3812:	e4 e3       	ldi	r30, 0x34	; 52
    3814:	f0 e0       	ldi	r31, 0x00	; 0
    3816:	90 81       	ld	r25, Z
    3818:	8b 81       	ldd	r24, Y+3	; 0x03
    381a:	89 2b       	or	r24, r25
    381c:	8c 93       	st	X, r24
    381e:	11 c0       	rjmp	.+34     	; 0x3842 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0x0F;
    3820:	a1 e3       	ldi	r26, 0x31	; 49
    3822:	b0 e0       	ldi	r27, 0x00	; 0
    3824:	e1 e3       	ldi	r30, 0x31	; 49
    3826:	f0 e0       	ldi	r31, 0x00	; 0
    3828:	80 81       	ld	r24, Z
    382a:	8f 70       	andi	r24, 0x0F	; 15
    382c:	8c 93       	st	X, r24
      DDRD_REG |= value;
    382e:	a1 e3       	ldi	r26, 0x31	; 49
    3830:	b0 e0       	ldi	r27, 0x00	; 0
    3832:	e1 e3       	ldi	r30, 0x31	; 49
    3834:	f0 e0       	ldi	r31, 0x00	; 0
    3836:	90 81       	ld	r25, Z
    3838:	8b 81       	ldd	r24, Y+3	; 0x03
    383a:	89 2b       	or	r24, r25
    383c:	8c 93       	st	X, r24
    383e:	01 c0       	rjmp	.+2      	; 0x3842 <DIO_vSetHighNibbleDir+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    3840:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    3842:	89 81       	ldd	r24, Y+1	; 0x01
}
    3844:	0f 90       	pop	r0
    3846:	0f 90       	pop	r0
    3848:	0f 90       	pop	r0
    384a:	0f 90       	pop	r0
    384c:	0f 90       	pop	r0
    384e:	cf 91       	pop	r28
    3850:	df 91       	pop	r29
    3852:	08 95       	ret

00003854 <LDR_u8GetLightPres>:
#include "LDR_interface.h"
#include "LDR_private.h"
#include "LDR_config.h"

u8 LDR_u8GetLightPres                  (LDR_Config * LDR, u8 *Copy_u8LightPres     )
{
    3854:	df 93       	push	r29
    3856:	cf 93       	push	r28
    3858:	cd b7       	in	r28, 0x3d	; 61
    385a:	de b7       	in	r29, 0x3e	; 62
    385c:	29 97       	sbiw	r28, 0x09	; 9
    385e:	0f b6       	in	r0, 0x3f	; 63
    3860:	f8 94       	cli
    3862:	de bf       	out	0x3e, r29	; 62
    3864:	0f be       	out	0x3f, r0	; 63
    3866:	cd bf       	out	0x3d, r28	; 61
    3868:	9f 83       	std	Y+7, r25	; 0x07
    386a:	8e 83       	std	Y+6, r24	; 0x06
    386c:	79 87       	std	Y+9, r23	; 0x09
    386e:	68 87       	std	Y+8, r22	; 0x08
  u8 Local_u8ErrorState = OK;
    3870:	1b 82       	std	Y+3, r1	; 0x03

  u16 Local_u16ADCResult;
  u16 Local_u16AnalogSignal;

  /* ADC Digital Reading */
  ADC_u8GetResultSync(LDR->Copy_u8LDRChannel, &Local_u16ADCResult);
    3872:	ee 81       	ldd	r30, Y+6	; 0x06
    3874:	ff 81       	ldd	r31, Y+7	; 0x07
    3876:	80 81       	ld	r24, Z
    3878:	9e 01       	movw	r18, r28
    387a:	2c 5f       	subi	r18, 0xFC	; 252
    387c:	3f 4f       	sbci	r19, 0xFF	; 255
    387e:	b9 01       	movw	r22, r18
    3880:	0e 94 32 0a 	call	0x1464	; 0x1464 <ADC_u8GetResultSync>

  /* Check for ADC Resolution */
  if (LDR->Copy_u8ADCRes == ADC_RES_10_BIT)
    3884:	ee 81       	ldd	r30, Y+6	; 0x06
    3886:	ff 81       	ldd	r31, Y+7	; 0x07
    3888:	82 81       	ldd	r24, Z+2	; 0x02
    388a:	88 23       	and	r24, r24
    388c:	49 f5       	brne	.+82     	; 0x38e0 <LDR_u8GetLightPres+0x8c>
  {
    *Copy_u8LightPres =  (Local_u16ADCResult / 1024.0) * 100 ;
    388e:	8c 81       	ldd	r24, Y+4	; 0x04
    3890:	9d 81       	ldd	r25, Y+5	; 0x05
    3892:	cc 01       	movw	r24, r24
    3894:	a0 e0       	ldi	r26, 0x00	; 0
    3896:	b0 e0       	ldi	r27, 0x00	; 0
    3898:	bc 01       	movw	r22, r24
    389a:	cd 01       	movw	r24, r26
    389c:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	bc 01       	movw	r22, r24
    38a6:	cd 01       	movw	r24, r26
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	40 e8       	ldi	r20, 0x80	; 128
    38ae:	54 e4       	ldi	r21, 0x44	; 68
    38b0:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
    38b4:	dc 01       	movw	r26, r24
    38b6:	cb 01       	movw	r24, r22
    38b8:	bc 01       	movw	r22, r24
    38ba:	cd 01       	movw	r24, r26
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	48 ec       	ldi	r20, 0xC8	; 200
    38c2:	52 e4       	ldi	r21, 0x42	; 66
    38c4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    38c8:	dc 01       	movw	r26, r24
    38ca:	cb 01       	movw	r24, r22
    38cc:	bc 01       	movw	r22, r24
    38ce:	cd 01       	movw	r24, r26
    38d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d4:	dc 01       	movw	r26, r24
    38d6:	cb 01       	movw	r24, r22
    38d8:	e8 85       	ldd	r30, Y+8	; 0x08
    38da:	f9 85       	ldd	r31, Y+9	; 0x09
    38dc:	80 83       	st	Z, r24
    38de:	2d c0       	rjmp	.+90     	; 0x393a <LDR_u8GetLightPres+0xe6>
  }
  else if (LDR->Copy_u8ADCRes == ADC_RES_8_BIT)
    38e0:	ee 81       	ldd	r30, Y+6	; 0x06
    38e2:	ff 81       	ldd	r31, Y+7	; 0x07
    38e4:	82 81       	ldd	r24, Z+2	; 0x02
    38e6:	81 30       	cpi	r24, 0x01	; 1
    38e8:	41 f5       	brne	.+80     	; 0x393a <LDR_u8GetLightPres+0xe6>
  {
    *Copy_u8LightPres =  (Local_u16ADCResult / 256.0) * 100 ;
    38ea:	8c 81       	ldd	r24, Y+4	; 0x04
    38ec:	9d 81       	ldd	r25, Y+5	; 0x05
    38ee:	cc 01       	movw	r24, r24
    38f0:	a0 e0       	ldi	r26, 0x00	; 0
    38f2:	b0 e0       	ldi	r27, 0x00	; 0
    38f4:	bc 01       	movw	r22, r24
    38f6:	cd 01       	movw	r24, r26
    38f8:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
    38fc:	dc 01       	movw	r26, r24
    38fe:	cb 01       	movw	r24, r22
    3900:	bc 01       	movw	r22, r24
    3902:	cd 01       	movw	r24, r26
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	40 e8       	ldi	r20, 0x80	; 128
    390a:	53 e4       	ldi	r21, 0x43	; 67
    390c:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	bc 01       	movw	r22, r24
    3916:	cd 01       	movw	r24, r26
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	48 ec       	ldi	r20, 0xC8	; 200
    391e:	52 e4       	ldi	r21, 0x42	; 66
    3920:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	bc 01       	movw	r22, r24
    392a:	cd 01       	movw	r24, r26
    392c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3930:	dc 01       	movw	r26, r24
    3932:	cb 01       	movw	r24, r22
    3934:	e8 85       	ldd	r30, Y+8	; 0x08
    3936:	f9 85       	ldd	r31, Y+9	; 0x09
    3938:	80 83       	st	Z, r24
  }

  return Local_u8ErrorState;
    393a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    393c:	29 96       	adiw	r28, 0x09	; 9
    393e:	0f b6       	in	r0, 0x3f	; 63
    3940:	f8 94       	cli
    3942:	de bf       	out	0x3e, r29	; 62
    3944:	0f be       	out	0x3f, r0	; 63
    3946:	cd bf       	out	0x3d, r28	; 61
    3948:	cf 91       	pop	r28
    394a:	df 91       	pop	r29
    394c:	08 95       	ret

0000394e <main>:

LDR_Config LDR0 = {ADC_CHANNEL1, 5, ADC_RES_10_BIT};
u16 LDR_Result;

void main()
{
    394e:	df 93       	push	r29
    3950:	cf 93       	push	r28
    3952:	cd b7       	in	r28, 0x3d	; 61
    3954:	de b7       	in	r29, 0x3e	; 62
    3956:	2e 97       	sbiw	r28, 0x0e	; 14
    3958:	0f b6       	in	r0, 0x3f	; 63
    395a:	f8 94       	cli
    395c:	de bf       	out	0x3e, r29	; 62
    395e:	0f be       	out	0x3f, r0	; 63
    3960:	cd bf       	out	0x3d, r28	; 61
	ADC_vInit();
    3962:	0e 94 10 09 	call	0x1220	; 0x1220 <ADC_vInit>
	CLCD_vInit();
    3966:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <CLCD_vInit>
	while(1)
	{
		LDR_u8GetLightPres(&LDR0, &LDR_Result);
    396a:	26 e7       	ldi	r18, 0x76	; 118
    396c:	31 e0       	ldi	r19, 0x01	; 1
    396e:	88 e6       	ldi	r24, 0x68	; 104
    3970:	91 e0       	ldi	r25, 0x01	; 1
    3972:	b9 01       	movw	r22, r18
    3974:	0e 94 2a 1c 	call	0x3854	; 0x3854 <LDR_u8GetLightPres>
		CLCD_vClearScreen();
    3978:	0e 94 52 10 	call	0x20a4	; 0x20a4 <CLCD_vClearScreen>
		CLCD_vSendIntNumber(LDR_Result);
    397c:	80 91 76 01 	lds	r24, 0x0176
    3980:	90 91 77 01 	lds	r25, 0x0177
    3984:	cc 01       	movw	r24, r24
    3986:	a0 e0       	ldi	r26, 0x00	; 0
    3988:	b0 e0       	ldi	r27, 0x00	; 0
    398a:	bc 01       	movw	r22, r24
    398c:	cd 01       	movw	r24, r26
    398e:	0e 94 03 11 	call	0x2206	; 0x2206 <CLCD_vSendIntNumber>
    3992:	80 e0       	ldi	r24, 0x00	; 0
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	a8 e4       	ldi	r26, 0x48	; 72
    3998:	b2 e4       	ldi	r27, 0x42	; 66
    399a:	8b 87       	std	Y+11, r24	; 0x0b
    399c:	9c 87       	std	Y+12, r25	; 0x0c
    399e:	ad 87       	std	Y+13, r26	; 0x0d
    39a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    39a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    39a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    39a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	4a ef       	ldi	r20, 0xFA	; 250
    39b0:	54 e4       	ldi	r21, 0x44	; 68
    39b2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	8f 83       	std	Y+7, r24	; 0x07
    39bc:	98 87       	std	Y+8, r25	; 0x08
    39be:	a9 87       	std	Y+9, r26	; 0x09
    39c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39c2:	6f 81       	ldd	r22, Y+7	; 0x07
    39c4:	78 85       	ldd	r23, Y+8	; 0x08
    39c6:	89 85       	ldd	r24, Y+9	; 0x09
    39c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ca:	20 e0       	ldi	r18, 0x00	; 0
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	40 e8       	ldi	r20, 0x80	; 128
    39d0:	5f e3       	ldi	r21, 0x3F	; 63
    39d2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    39d6:	88 23       	and	r24, r24
    39d8:	2c f4       	brge	.+10     	; 0x39e4 <main+0x96>
		__ticks = 1;
    39da:	81 e0       	ldi	r24, 0x01	; 1
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	9e 83       	std	Y+6, r25	; 0x06
    39e0:	8d 83       	std	Y+5, r24	; 0x05
    39e2:	3f c0       	rjmp	.+126    	; 0x3a62 <main+0x114>
	else if (__tmp > 65535)
    39e4:	6f 81       	ldd	r22, Y+7	; 0x07
    39e6:	78 85       	ldd	r23, Y+8	; 0x08
    39e8:	89 85       	ldd	r24, Y+9	; 0x09
    39ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	3f ef       	ldi	r19, 0xFF	; 255
    39f0:	4f e7       	ldi	r20, 0x7F	; 127
    39f2:	57 e4       	ldi	r21, 0x47	; 71
    39f4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    39f8:	18 16       	cp	r1, r24
    39fa:	4c f5       	brge	.+82     	; 0x3a4e <main+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    39fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a04:	20 e0       	ldi	r18, 0x00	; 0
    3a06:	30 e0       	ldi	r19, 0x00	; 0
    3a08:	40 e2       	ldi	r20, 0x20	; 32
    3a0a:	51 e4       	ldi	r21, 0x41	; 65
    3a0c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3a10:	dc 01       	movw	r26, r24
    3a12:	cb 01       	movw	r24, r22
    3a14:	bc 01       	movw	r22, r24
    3a16:	cd 01       	movw	r24, r26
    3a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	cb 01       	movw	r24, r22
    3a20:	9e 83       	std	Y+6, r25	; 0x06
    3a22:	8d 83       	std	Y+5, r24	; 0x05
    3a24:	0f c0       	rjmp	.+30     	; 0x3a44 <main+0xf6>
    3a26:	88 ec       	ldi	r24, 0xC8	; 200
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	9c 83       	std	Y+4, r25	; 0x04
    3a2c:	8b 83       	std	Y+3, r24	; 0x03
    3a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a30:	9c 81       	ldd	r25, Y+4	; 0x04
    3a32:	01 97       	sbiw	r24, 0x01	; 1
    3a34:	f1 f7       	brne	.-4      	; 0x3a32 <main+0xe4>
    3a36:	9c 83       	std	Y+4, r25	; 0x04
    3a38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a3e:	01 97       	sbiw	r24, 0x01	; 1
    3a40:	9e 83       	std	Y+6, r25	; 0x06
    3a42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a44:	8d 81       	ldd	r24, Y+5	; 0x05
    3a46:	9e 81       	ldd	r25, Y+6	; 0x06
    3a48:	00 97       	sbiw	r24, 0x00	; 0
    3a4a:	69 f7       	brne	.-38     	; 0x3a26 <main+0xd8>
    3a4c:	8e cf       	rjmp	.-228    	; 0x396a <main+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a50:	78 85       	ldd	r23, Y+8	; 0x08
    3a52:	89 85       	ldd	r24, Y+9	; 0x09
    3a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	9e 83       	std	Y+6, r25	; 0x06
    3a60:	8d 83       	std	Y+5, r24	; 0x05
    3a62:	8d 81       	ldd	r24, Y+5	; 0x05
    3a64:	9e 81       	ldd	r25, Y+6	; 0x06
    3a66:	9a 83       	std	Y+2, r25	; 0x02
    3a68:	89 83       	std	Y+1, r24	; 0x01
    3a6a:	89 81       	ldd	r24, Y+1	; 0x01
    3a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a6e:	01 97       	sbiw	r24, 0x01	; 1
    3a70:	f1 f7       	brne	.-4      	; 0x3a6e <main+0x120>
    3a72:	9a 83       	std	Y+2, r25	; 0x02
    3a74:	89 83       	std	Y+1, r24	; 0x01
    3a76:	79 cf       	rjmp	.-270    	; 0x396a <main+0x1c>

00003a78 <__mulsi3>:
    3a78:	62 9f       	mul	r22, r18
    3a7a:	d0 01       	movw	r26, r0
    3a7c:	73 9f       	mul	r23, r19
    3a7e:	f0 01       	movw	r30, r0
    3a80:	82 9f       	mul	r24, r18
    3a82:	e0 0d       	add	r30, r0
    3a84:	f1 1d       	adc	r31, r1
    3a86:	64 9f       	mul	r22, r20
    3a88:	e0 0d       	add	r30, r0
    3a8a:	f1 1d       	adc	r31, r1
    3a8c:	92 9f       	mul	r25, r18
    3a8e:	f0 0d       	add	r31, r0
    3a90:	83 9f       	mul	r24, r19
    3a92:	f0 0d       	add	r31, r0
    3a94:	74 9f       	mul	r23, r20
    3a96:	f0 0d       	add	r31, r0
    3a98:	65 9f       	mul	r22, r21
    3a9a:	f0 0d       	add	r31, r0
    3a9c:	99 27       	eor	r25, r25
    3a9e:	72 9f       	mul	r23, r18
    3aa0:	b0 0d       	add	r27, r0
    3aa2:	e1 1d       	adc	r30, r1
    3aa4:	f9 1f       	adc	r31, r25
    3aa6:	63 9f       	mul	r22, r19
    3aa8:	b0 0d       	add	r27, r0
    3aaa:	e1 1d       	adc	r30, r1
    3aac:	f9 1f       	adc	r31, r25
    3aae:	bd 01       	movw	r22, r26
    3ab0:	cf 01       	movw	r24, r30
    3ab2:	11 24       	eor	r1, r1
    3ab4:	08 95       	ret

00003ab6 <__udivmodsi4>:
    3ab6:	a1 e2       	ldi	r26, 0x21	; 33
    3ab8:	1a 2e       	mov	r1, r26
    3aba:	aa 1b       	sub	r26, r26
    3abc:	bb 1b       	sub	r27, r27
    3abe:	fd 01       	movw	r30, r26
    3ac0:	0d c0       	rjmp	.+26     	; 0x3adc <__udivmodsi4_ep>

00003ac2 <__udivmodsi4_loop>:
    3ac2:	aa 1f       	adc	r26, r26
    3ac4:	bb 1f       	adc	r27, r27
    3ac6:	ee 1f       	adc	r30, r30
    3ac8:	ff 1f       	adc	r31, r31
    3aca:	a2 17       	cp	r26, r18
    3acc:	b3 07       	cpc	r27, r19
    3ace:	e4 07       	cpc	r30, r20
    3ad0:	f5 07       	cpc	r31, r21
    3ad2:	20 f0       	brcs	.+8      	; 0x3adc <__udivmodsi4_ep>
    3ad4:	a2 1b       	sub	r26, r18
    3ad6:	b3 0b       	sbc	r27, r19
    3ad8:	e4 0b       	sbc	r30, r20
    3ada:	f5 0b       	sbc	r31, r21

00003adc <__udivmodsi4_ep>:
    3adc:	66 1f       	adc	r22, r22
    3ade:	77 1f       	adc	r23, r23
    3ae0:	88 1f       	adc	r24, r24
    3ae2:	99 1f       	adc	r25, r25
    3ae4:	1a 94       	dec	r1
    3ae6:	69 f7       	brne	.-38     	; 0x3ac2 <__udivmodsi4_loop>
    3ae8:	60 95       	com	r22
    3aea:	70 95       	com	r23
    3aec:	80 95       	com	r24
    3aee:	90 95       	com	r25
    3af0:	9b 01       	movw	r18, r22
    3af2:	ac 01       	movw	r20, r24
    3af4:	bd 01       	movw	r22, r26
    3af6:	cf 01       	movw	r24, r30
    3af8:	08 95       	ret

00003afa <__divmodsi4>:
    3afa:	97 fb       	bst	r25, 7
    3afc:	09 2e       	mov	r0, r25
    3afe:	05 26       	eor	r0, r21
    3b00:	0e d0       	rcall	.+28     	; 0x3b1e <__divmodsi4_neg1>
    3b02:	57 fd       	sbrc	r21, 7
    3b04:	04 d0       	rcall	.+8      	; 0x3b0e <__divmodsi4_neg2>
    3b06:	d7 df       	rcall	.-82     	; 0x3ab6 <__udivmodsi4>
    3b08:	0a d0       	rcall	.+20     	; 0x3b1e <__divmodsi4_neg1>
    3b0a:	00 1c       	adc	r0, r0
    3b0c:	38 f4       	brcc	.+14     	; 0x3b1c <__divmodsi4_exit>

00003b0e <__divmodsi4_neg2>:
    3b0e:	50 95       	com	r21
    3b10:	40 95       	com	r20
    3b12:	30 95       	com	r19
    3b14:	21 95       	neg	r18
    3b16:	3f 4f       	sbci	r19, 0xFF	; 255
    3b18:	4f 4f       	sbci	r20, 0xFF	; 255
    3b1a:	5f 4f       	sbci	r21, 0xFF	; 255

00003b1c <__divmodsi4_exit>:
    3b1c:	08 95       	ret

00003b1e <__divmodsi4_neg1>:
    3b1e:	f6 f7       	brtc	.-4      	; 0x3b1c <__divmodsi4_exit>
    3b20:	90 95       	com	r25
    3b22:	80 95       	com	r24
    3b24:	70 95       	com	r23
    3b26:	61 95       	neg	r22
    3b28:	7f 4f       	sbci	r23, 0xFF	; 255
    3b2a:	8f 4f       	sbci	r24, 0xFF	; 255
    3b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b2e:	08 95       	ret

00003b30 <__prologue_saves__>:
    3b30:	2f 92       	push	r2
    3b32:	3f 92       	push	r3
    3b34:	4f 92       	push	r4
    3b36:	5f 92       	push	r5
    3b38:	6f 92       	push	r6
    3b3a:	7f 92       	push	r7
    3b3c:	8f 92       	push	r8
    3b3e:	9f 92       	push	r9
    3b40:	af 92       	push	r10
    3b42:	bf 92       	push	r11
    3b44:	cf 92       	push	r12
    3b46:	df 92       	push	r13
    3b48:	ef 92       	push	r14
    3b4a:	ff 92       	push	r15
    3b4c:	0f 93       	push	r16
    3b4e:	1f 93       	push	r17
    3b50:	cf 93       	push	r28
    3b52:	df 93       	push	r29
    3b54:	cd b7       	in	r28, 0x3d	; 61
    3b56:	de b7       	in	r29, 0x3e	; 62
    3b58:	ca 1b       	sub	r28, r26
    3b5a:	db 0b       	sbc	r29, r27
    3b5c:	0f b6       	in	r0, 0x3f	; 63
    3b5e:	f8 94       	cli
    3b60:	de bf       	out	0x3e, r29	; 62
    3b62:	0f be       	out	0x3f, r0	; 63
    3b64:	cd bf       	out	0x3d, r28	; 61
    3b66:	09 94       	ijmp

00003b68 <__epilogue_restores__>:
    3b68:	2a 88       	ldd	r2, Y+18	; 0x12
    3b6a:	39 88       	ldd	r3, Y+17	; 0x11
    3b6c:	48 88       	ldd	r4, Y+16	; 0x10
    3b6e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b70:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b72:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b74:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b76:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b78:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b7a:	b9 84       	ldd	r11, Y+9	; 0x09
    3b7c:	c8 84       	ldd	r12, Y+8	; 0x08
    3b7e:	df 80       	ldd	r13, Y+7	; 0x07
    3b80:	ee 80       	ldd	r14, Y+6	; 0x06
    3b82:	fd 80       	ldd	r15, Y+5	; 0x05
    3b84:	0c 81       	ldd	r16, Y+4	; 0x04
    3b86:	1b 81       	ldd	r17, Y+3	; 0x03
    3b88:	aa 81       	ldd	r26, Y+2	; 0x02
    3b8a:	b9 81       	ldd	r27, Y+1	; 0x01
    3b8c:	ce 0f       	add	r28, r30
    3b8e:	d1 1d       	adc	r29, r1
    3b90:	0f b6       	in	r0, 0x3f	; 63
    3b92:	f8 94       	cli
    3b94:	de bf       	out	0x3e, r29	; 62
    3b96:	0f be       	out	0x3f, r0	; 63
    3b98:	cd bf       	out	0x3d, r28	; 61
    3b9a:	ed 01       	movw	r28, r26
    3b9c:	08 95       	ret

00003b9e <_exit>:
    3b9e:	f8 94       	cli

00003ba0 <__stop_program>:
    3ba0:	ff cf       	rjmp	.-2      	; 0x3ba0 <__stop_program>
