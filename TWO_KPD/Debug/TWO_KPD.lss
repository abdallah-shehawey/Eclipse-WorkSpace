
TWO_KPD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003756  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000168  00800060  00003756  000037ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008001c8  008001c8  00003952  2**0
                  ALLOC
  3 .stab         000027a8  00000000  00000000  00003954  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d49  00000000  00000000  000060fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  00006e45  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000277  00000000  00000000  00007065  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002953  00000000  00000000  000072dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016b7  00000000  00000000  00009c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001570  00000000  00000000  0000b2e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  0000c858  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000036b  00000000  00000000  0000ca98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bf0  00000000  00000000  0000ce03  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d9f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3c       	cpi	r26, 0xC8	; 200
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ec       	ldi	r26, 0xC8	; 200
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3c       	cpi	r26, 0xCA	; 202
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <main>
      8a:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
      be:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__fixsfdi>:
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	7b 01       	movw	r14, r22
      f4:	8c 01       	movw	r16, r24
      f6:	20 e0       	ldi	r18, 0x00	; 0
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     102:	88 23       	and	r24, r24
     104:	0c f0       	brlt	.+2      	; 0x108 <__fixsfdi+0x1e>
     106:	5c c0       	rjmp	.+184    	; 0x1c0 <__fixsfdi+0xd6>
     108:	c8 01       	movw	r24, r16
     10a:	b7 01       	movw	r22, r14
     10c:	90 58       	subi	r25, 0x80	; 128
     10e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     112:	21 95       	neg	r18
     114:	e1 e0       	ldi	r30, 0x01	; 1
     116:	12 16       	cp	r1, r18
     118:	08 f0       	brcs	.+2      	; 0x11c <__fixsfdi+0x32>
     11a:	e0 e0       	ldi	r30, 0x00	; 0
     11c:	31 95       	neg	r19
     11e:	f1 e0       	ldi	r31, 0x01	; 1
     120:	13 16       	cp	r1, r19
     122:	08 f0       	brcs	.+2      	; 0x126 <__fixsfdi+0x3c>
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	e3 2e       	mov	r14, r19
     128:	ee 1a       	sub	r14, r30
     12a:	e1 e0       	ldi	r30, 0x01	; 1
     12c:	3e 15       	cp	r19, r14
     12e:	08 f0       	brcs	.+2      	; 0x132 <__fixsfdi+0x48>
     130:	e0 e0       	ldi	r30, 0x00	; 0
     132:	fe 2b       	or	r31, r30
     134:	41 95       	neg	r20
     136:	a1 e0       	ldi	r26, 0x01	; 1
     138:	14 16       	cp	r1, r20
     13a:	08 f0       	brcs	.+2      	; 0x13e <__fixsfdi+0x54>
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	f4 2e       	mov	r15, r20
     140:	ff 1a       	sub	r15, r31
     142:	e1 e0       	ldi	r30, 0x01	; 1
     144:	4f 15       	cp	r20, r15
     146:	08 f0       	brcs	.+2      	; 0x14a <__fixsfdi+0x60>
     148:	e0 e0       	ldi	r30, 0x00	; 0
     14a:	ae 2b       	or	r26, r30
     14c:	51 95       	neg	r21
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	15 16       	cp	r1, r21
     152:	08 f0       	brcs	.+2      	; 0x156 <__fixsfdi+0x6c>
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	05 2f       	mov	r16, r21
     158:	0a 1b       	sub	r16, r26
     15a:	e1 e0       	ldi	r30, 0x01	; 1
     15c:	50 17       	cp	r21, r16
     15e:	08 f0       	brcs	.+2      	; 0x162 <__fixsfdi+0x78>
     160:	e0 e0       	ldi	r30, 0x00	; 0
     162:	fe 2b       	or	r31, r30
     164:	61 95       	neg	r22
     166:	a1 e0       	ldi	r26, 0x01	; 1
     168:	16 16       	cp	r1, r22
     16a:	08 f0       	brcs	.+2      	; 0x16e <__fixsfdi+0x84>
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	16 2f       	mov	r17, r22
     170:	1f 1b       	sub	r17, r31
     172:	e1 e0       	ldi	r30, 0x01	; 1
     174:	61 17       	cp	r22, r17
     176:	08 f0       	brcs	.+2      	; 0x17a <__fixsfdi+0x90>
     178:	e0 e0       	ldi	r30, 0x00	; 0
     17a:	ae 2b       	or	r26, r30
     17c:	71 95       	neg	r23
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	17 16       	cp	r1, r23
     182:	08 f0       	brcs	.+2      	; 0x186 <__fixsfdi+0x9c>
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	b7 2f       	mov	r27, r23
     188:	ba 1b       	sub	r27, r26
     18a:	e1 e0       	ldi	r30, 0x01	; 1
     18c:	7b 17       	cp	r23, r27
     18e:	08 f0       	brcs	.+2      	; 0x192 <__fixsfdi+0xa8>
     190:	e0 e0       	ldi	r30, 0x00	; 0
     192:	fe 2b       	or	r31, r30
     194:	81 95       	neg	r24
     196:	a1 e0       	ldi	r26, 0x01	; 1
     198:	18 16       	cp	r1, r24
     19a:	08 f0       	brcs	.+2      	; 0x19e <__fixsfdi+0xb4>
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	38 2f       	mov	r19, r24
     1a0:	3f 1b       	sub	r19, r31
     1a2:	f3 2f       	mov	r31, r19
     1a4:	e1 e0       	ldi	r30, 0x01	; 1
     1a6:	83 17       	cp	r24, r19
     1a8:	08 f0       	brcs	.+2      	; 0x1ac <__fixsfdi+0xc2>
     1aa:	e0 e0       	ldi	r30, 0x00	; 0
     1ac:	ae 2b       	or	r26, r30
     1ae:	91 95       	neg	r25
     1b0:	3e 2d       	mov	r19, r14
     1b2:	4f 2d       	mov	r20, r15
     1b4:	50 2f       	mov	r21, r16
     1b6:	61 2f       	mov	r22, r17
     1b8:	7b 2f       	mov	r23, r27
     1ba:	8f 2f       	mov	r24, r31
     1bc:	9a 1b       	sub	r25, r26
     1be:	04 c0       	rjmp	.+8      	; 0x1c8 <__fixsfdi+0xde>
     1c0:	c8 01       	movw	r24, r16
     1c2:	b7 01       	movw	r22, r14
     1c4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	ff 90       	pop	r15
     1ce:	ef 90       	pop	r14
     1d0:	08 95       	ret

000001d2 <__fixunssfdi>:
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	ef ee       	ldi	r30, 0xEF	; 239
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	0c 94 72 1b 	jmp	0x36e4	; 0x36e4 <__prologue_saves__>
     1de:	7b 01       	movw	r14, r22
     1e0:	8c 01       	movw	r16, r24
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 e8       	ldi	r20, 0x80	; 128
     1e8:	5f e3       	ldi	r21, 0x3F	; 63
     1ea:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     1ee:	88 23       	and	r24, r24
     1f0:	4c f4       	brge	.+18     	; 0x204 <__fixunssfdi+0x32>
     1f2:	aa 24       	eor	r10, r10
     1f4:	bb 24       	eor	r11, r11
     1f6:	cc 24       	eor	r12, r12
     1f8:	dd 24       	eor	r13, r13
     1fa:	ee 24       	eor	r14, r14
     1fc:	ff 24       	eor	r15, r15
     1fe:	00 e0       	ldi	r16, 0x00	; 0
     200:	10 e0       	ldi	r17, 0x00	; 0
     202:	86 c0       	rjmp	.+268    	; 0x310 <__fixunssfdi+0x13e>
     204:	c8 01       	movw	r24, r16
     206:	b7 01       	movw	r22, r14
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	40 e8       	ldi	r20, 0x80	; 128
     20e:	5f e4       	ldi	r21, 0x4F	; 79
     210:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     214:	88 23       	and	r24, r24
     216:	54 f4       	brge	.+20     	; 0x22c <__fixunssfdi+0x5a>
     218:	c8 01       	movw	r24, r16
     21a:	b7 01       	movw	r22, r14
     21c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     220:	5b 01       	movw	r10, r22
     222:	6c 01       	movw	r12, r24
     224:	ee 24       	eor	r14, r14
     226:	ff 24       	eor	r15, r15
     228:	87 01       	movw	r16, r14
     22a:	72 c0       	rjmp	.+228    	; 0x310 <__fixunssfdi+0x13e>
     22c:	c8 01       	movw	r24, r16
     22e:	b7 01       	movw	r22, r14
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	40 e8       	ldi	r20, 0x80	; 128
     236:	5f e5       	ldi	r21, 0x5F	; 95
     238:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     23c:	87 fd       	sbrc	r24, 7
     23e:	0f c0       	rjmp	.+30     	; 0x25e <__fixunssfdi+0x8c>
     240:	aa 24       	eor	r10, r10
     242:	aa 94       	dec	r10
     244:	bb 24       	eor	r11, r11
     246:	ba 94       	dec	r11
     248:	cc 24       	eor	r12, r12
     24a:	ca 94       	dec	r12
     24c:	dd 24       	eor	r13, r13
     24e:	da 94       	dec	r13
     250:	ee 24       	eor	r14, r14
     252:	ea 94       	dec	r14
     254:	ff 24       	eor	r15, r15
     256:	fa 94       	dec	r15
     258:	0f ef       	ldi	r16, 0xFF	; 255
     25a:	1f ef       	ldi	r17, 0xFF	; 255
     25c:	59 c0       	rjmp	.+178    	; 0x310 <__fixunssfdi+0x13e>
     25e:	c8 01       	movw	r24, r16
     260:	b7 01       	movw	r22, r14
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e8       	ldi	r20, 0x80	; 128
     268:	5f e2       	ldi	r21, 0x2F	; 47
     26a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     26e:	7b 01       	movw	r14, r22
     270:	8c 01       	movw	r16, r24
     272:	22 24       	eor	r2, r2
     274:	33 24       	eor	r3, r3
     276:	21 01       	movw	r4, r2
     278:	90 e1       	ldi	r25, 0x10	; 16
     27a:	a9 2e       	mov	r10, r25
     27c:	b1 2c       	mov	r11, r1
     27e:	c1 2c       	mov	r12, r1
     280:	d1 2c       	mov	r13, r1
     282:	c0 e0       	ldi	r28, 0x00	; 0
     284:	d0 e0       	ldi	r29, 0x00	; 0
     286:	61 e0       	ldi	r22, 0x01	; 1
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0a 2c       	mov	r0, r10
     290:	04 c0       	rjmp	.+8      	; 0x29a <__fixunssfdi+0xc8>
     292:	66 0f       	add	r22, r22
     294:	77 1f       	adc	r23, r23
     296:	88 1f       	adc	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	0a 94       	dec	r0
     29c:	d2 f7       	brpl	.-12     	; 0x292 <__fixunssfdi+0xc0>
     29e:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
     2a2:	3b 01       	movw	r6, r22
     2a4:	4c 01       	movw	r8, r24
     2a6:	c8 01       	movw	r24, r16
     2a8:	b7 01       	movw	r22, r14
     2aa:	a4 01       	movw	r20, r8
     2ac:	93 01       	movw	r18, r6
     2ae:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
     2b2:	88 23       	and	r24, r24
     2b4:	64 f0       	brlt	.+24     	; 0x2ce <__fixunssfdi+0xfc>
     2b6:	2a 28       	or	r2, r10
     2b8:	3b 28       	or	r3, r11
     2ba:	4c 28       	or	r4, r12
     2bc:	5d 28       	or	r5, r13
     2be:	c8 01       	movw	r24, r16
     2c0:	b7 01       	movw	r22, r14
     2c2:	a4 01       	movw	r20, r8
     2c4:	93 01       	movw	r18, r6
     2c6:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
     2ca:	7b 01       	movw	r14, r22
     2cc:	8c 01       	movw	r16, r24
     2ce:	d6 94       	lsr	r13
     2d0:	c7 94       	ror	r12
     2d2:	b7 94       	ror	r11
     2d4:	a7 94       	ror	r10
     2d6:	21 96       	adiw	r28, 0x01	; 1
     2d8:	c5 30       	cpi	r28, 0x05	; 5
     2da:	d1 05       	cpc	r29, r1
     2dc:	a1 f6       	brne	.-88     	; 0x286 <__fixunssfdi+0xb4>
     2de:	c8 01       	movw	r24, r16
     2e0:	b7 01       	movw	r22, r14
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	5f e4       	ldi	r21, 0x4F	; 79
     2ea:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     2ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     2f2:	5b 01       	movw	r10, r22
     2f4:	6c 01       	movw	r12, r24
     2f6:	9b 01       	movw	r18, r22
     2f8:	a6 01       	movw	r20, r12
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	02 2d       	mov	r16, r2
     304:	0e 94 9c 06 	call	0xd38	; 0xd38 <__ashldi3>
     308:	59 01       	movw	r10, r18
     30a:	6a 01       	movw	r12, r20
     30c:	7b 01       	movw	r14, r22
     30e:	8c 01       	movw	r16, r24
     310:	95 01       	movw	r18, r10
     312:	a6 01       	movw	r20, r12
     314:	b7 01       	movw	r22, r14
     316:	c8 01       	movw	r24, r16
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	e2 e1       	ldi	r30, 0x12	; 18
     31e:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__epilogue_restores__>

00000322 <_fpadd_parts>:
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	e7 e9       	ldi	r30, 0x97	; 151
     328:	f1 e0       	ldi	r31, 0x01	; 1
     32a:	0c 94 72 1b 	jmp	0x36e4	; 0x36e4 <__prologue_saves__>
     32e:	dc 01       	movw	r26, r24
     330:	2b 01       	movw	r4, r22
     332:	fa 01       	movw	r30, r20
     334:	9c 91       	ld	r25, X
     336:	92 30       	cpi	r25, 0x02	; 2
     338:	08 f4       	brcc	.+2      	; 0x33c <_fpadd_parts+0x1a>
     33a:	39 c1       	rjmp	.+626    	; 0x5ae <_fpadd_parts+0x28c>
     33c:	eb 01       	movw	r28, r22
     33e:	88 81       	ld	r24, Y
     340:	82 30       	cpi	r24, 0x02	; 2
     342:	08 f4       	brcc	.+2      	; 0x346 <_fpadd_parts+0x24>
     344:	33 c1       	rjmp	.+614    	; 0x5ac <_fpadd_parts+0x28a>
     346:	94 30       	cpi	r25, 0x04	; 4
     348:	69 f4       	brne	.+26     	; 0x364 <_fpadd_parts+0x42>
     34a:	84 30       	cpi	r24, 0x04	; 4
     34c:	09 f0       	breq	.+2      	; 0x350 <_fpadd_parts+0x2e>
     34e:	2f c1       	rjmp	.+606    	; 0x5ae <_fpadd_parts+0x28c>
     350:	11 96       	adiw	r26, 0x01	; 1
     352:	9c 91       	ld	r25, X
     354:	11 97       	sbiw	r26, 0x01	; 1
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	98 17       	cp	r25, r24
     35a:	09 f4       	brne	.+2      	; 0x35e <_fpadd_parts+0x3c>
     35c:	28 c1       	rjmp	.+592    	; 0x5ae <_fpadd_parts+0x28c>
     35e:	a0 e6       	ldi	r26, 0x60	; 96
     360:	b0 e0       	ldi	r27, 0x00	; 0
     362:	25 c1       	rjmp	.+586    	; 0x5ae <_fpadd_parts+0x28c>
     364:	84 30       	cpi	r24, 0x04	; 4
     366:	09 f4       	brne	.+2      	; 0x36a <_fpadd_parts+0x48>
     368:	21 c1       	rjmp	.+578    	; 0x5ac <_fpadd_parts+0x28a>
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	a9 f4       	brne	.+42     	; 0x398 <_fpadd_parts+0x76>
     36e:	92 30       	cpi	r25, 0x02	; 2
     370:	09 f0       	breq	.+2      	; 0x374 <_fpadd_parts+0x52>
     372:	1d c1       	rjmp	.+570    	; 0x5ae <_fpadd_parts+0x28c>
     374:	9a 01       	movw	r18, r20
     376:	ad 01       	movw	r20, r26
     378:	88 e0       	ldi	r24, 0x08	; 8
     37a:	ea 01       	movw	r28, r20
     37c:	09 90       	ld	r0, Y+
     37e:	ae 01       	movw	r20, r28
     380:	e9 01       	movw	r28, r18
     382:	09 92       	st	Y+, r0
     384:	9e 01       	movw	r18, r28
     386:	81 50       	subi	r24, 0x01	; 1
     388:	c1 f7       	brne	.-16     	; 0x37a <_fpadd_parts+0x58>
     38a:	e2 01       	movw	r28, r4
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	11 96       	adiw	r26, 0x01	; 1
     390:	9c 91       	ld	r25, X
     392:	89 23       	and	r24, r25
     394:	81 83       	std	Z+1, r24	; 0x01
     396:	08 c1       	rjmp	.+528    	; 0x5a8 <_fpadd_parts+0x286>
     398:	92 30       	cpi	r25, 0x02	; 2
     39a:	09 f4       	brne	.+2      	; 0x39e <_fpadd_parts+0x7c>
     39c:	07 c1       	rjmp	.+526    	; 0x5ac <_fpadd_parts+0x28a>
     39e:	12 96       	adiw	r26, 0x02	; 2
     3a0:	2d 90       	ld	r2, X+
     3a2:	3c 90       	ld	r3, X
     3a4:	13 97       	sbiw	r26, 0x03	; 3
     3a6:	eb 01       	movw	r28, r22
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	9b 81       	ldd	r25, Y+3	; 0x03
     3ac:	14 96       	adiw	r26, 0x04	; 4
     3ae:	ad 90       	ld	r10, X+
     3b0:	bd 90       	ld	r11, X+
     3b2:	cd 90       	ld	r12, X+
     3b4:	dc 90       	ld	r13, X
     3b6:	17 97       	sbiw	r26, 0x07	; 7
     3b8:	ec 80       	ldd	r14, Y+4	; 0x04
     3ba:	fd 80       	ldd	r15, Y+5	; 0x05
     3bc:	0e 81       	ldd	r16, Y+6	; 0x06
     3be:	1f 81       	ldd	r17, Y+7	; 0x07
     3c0:	91 01       	movw	r18, r2
     3c2:	28 1b       	sub	r18, r24
     3c4:	39 0b       	sbc	r19, r25
     3c6:	b9 01       	movw	r22, r18
     3c8:	37 ff       	sbrs	r19, 7
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <_fpadd_parts+0xb2>
     3cc:	66 27       	eor	r22, r22
     3ce:	77 27       	eor	r23, r23
     3d0:	62 1b       	sub	r22, r18
     3d2:	73 0b       	sbc	r23, r19
     3d4:	60 32       	cpi	r22, 0x20	; 32
     3d6:	71 05       	cpc	r23, r1
     3d8:	0c f0       	brlt	.+2      	; 0x3dc <_fpadd_parts+0xba>
     3da:	61 c0       	rjmp	.+194    	; 0x49e <_fpadd_parts+0x17c>
     3dc:	12 16       	cp	r1, r18
     3de:	13 06       	cpc	r1, r19
     3e0:	6c f5       	brge	.+90     	; 0x43c <_fpadd_parts+0x11a>
     3e2:	37 01       	movw	r6, r14
     3e4:	48 01       	movw	r8, r16
     3e6:	06 2e       	mov	r0, r22
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <_fpadd_parts+0xd0>
     3ea:	96 94       	lsr	r9
     3ec:	87 94       	ror	r8
     3ee:	77 94       	ror	r7
     3f0:	67 94       	ror	r6
     3f2:	0a 94       	dec	r0
     3f4:	d2 f7       	brpl	.-12     	; 0x3ea <_fpadd_parts+0xc8>
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <_fpadd_parts+0xe6>
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	44 1f       	adc	r20, r20
     406:	55 1f       	adc	r21, r21
     408:	6a 95       	dec	r22
     40a:	d2 f7       	brpl	.-12     	; 0x400 <_fpadd_parts+0xde>
     40c:	21 50       	subi	r18, 0x01	; 1
     40e:	30 40       	sbci	r19, 0x00	; 0
     410:	40 40       	sbci	r20, 0x00	; 0
     412:	50 40       	sbci	r21, 0x00	; 0
     414:	2e 21       	and	r18, r14
     416:	3f 21       	and	r19, r15
     418:	40 23       	and	r20, r16
     41a:	51 23       	and	r21, r17
     41c:	21 15       	cp	r18, r1
     41e:	31 05       	cpc	r19, r1
     420:	41 05       	cpc	r20, r1
     422:	51 05       	cpc	r21, r1
     424:	21 f0       	breq	.+8      	; 0x42e <_fpadd_parts+0x10c>
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	79 01       	movw	r14, r18
     430:	8a 01       	movw	r16, r20
     432:	e6 28       	or	r14, r6
     434:	f7 28       	or	r15, r7
     436:	08 29       	or	r16, r8
     438:	19 29       	or	r17, r9
     43a:	3c c0       	rjmp	.+120    	; 0x4b4 <_fpadd_parts+0x192>
     43c:	23 2b       	or	r18, r19
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <_fpadd_parts+0x192>
     440:	26 0e       	add	r2, r22
     442:	37 1e       	adc	r3, r23
     444:	35 01       	movw	r6, r10
     446:	46 01       	movw	r8, r12
     448:	06 2e       	mov	r0, r22
     44a:	04 c0       	rjmp	.+8      	; 0x454 <_fpadd_parts+0x132>
     44c:	96 94       	lsr	r9
     44e:	87 94       	ror	r8
     450:	77 94       	ror	r7
     452:	67 94       	ror	r6
     454:	0a 94       	dec	r0
     456:	d2 f7       	brpl	.-12     	; 0x44c <_fpadd_parts+0x12a>
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	04 c0       	rjmp	.+8      	; 0x46a <_fpadd_parts+0x148>
     462:	22 0f       	add	r18, r18
     464:	33 1f       	adc	r19, r19
     466:	44 1f       	adc	r20, r20
     468:	55 1f       	adc	r21, r21
     46a:	6a 95       	dec	r22
     46c:	d2 f7       	brpl	.-12     	; 0x462 <_fpadd_parts+0x140>
     46e:	21 50       	subi	r18, 0x01	; 1
     470:	30 40       	sbci	r19, 0x00	; 0
     472:	40 40       	sbci	r20, 0x00	; 0
     474:	50 40       	sbci	r21, 0x00	; 0
     476:	2a 21       	and	r18, r10
     478:	3b 21       	and	r19, r11
     47a:	4c 21       	and	r20, r12
     47c:	5d 21       	and	r21, r13
     47e:	21 15       	cp	r18, r1
     480:	31 05       	cpc	r19, r1
     482:	41 05       	cpc	r20, r1
     484:	51 05       	cpc	r21, r1
     486:	21 f0       	breq	.+8      	; 0x490 <_fpadd_parts+0x16e>
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	59 01       	movw	r10, r18
     492:	6a 01       	movw	r12, r20
     494:	a6 28       	or	r10, r6
     496:	b7 28       	or	r11, r7
     498:	c8 28       	or	r12, r8
     49a:	d9 28       	or	r13, r9
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <_fpadd_parts+0x192>
     49e:	82 15       	cp	r24, r2
     4a0:	93 05       	cpc	r25, r3
     4a2:	2c f0       	brlt	.+10     	; 0x4ae <_fpadd_parts+0x18c>
     4a4:	1c 01       	movw	r2, r24
     4a6:	aa 24       	eor	r10, r10
     4a8:	bb 24       	eor	r11, r11
     4aa:	65 01       	movw	r12, r10
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <_fpadd_parts+0x192>
     4ae:	ee 24       	eor	r14, r14
     4b0:	ff 24       	eor	r15, r15
     4b2:	87 01       	movw	r16, r14
     4b4:	11 96       	adiw	r26, 0x01	; 1
     4b6:	9c 91       	ld	r25, X
     4b8:	d2 01       	movw	r26, r4
     4ba:	11 96       	adiw	r26, 0x01	; 1
     4bc:	8c 91       	ld	r24, X
     4be:	98 17       	cp	r25, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <_fpadd_parts+0x1a2>
     4c2:	45 c0       	rjmp	.+138    	; 0x54e <_fpadd_parts+0x22c>
     4c4:	99 23       	and	r25, r25
     4c6:	39 f0       	breq	.+14     	; 0x4d6 <_fpadd_parts+0x1b4>
     4c8:	a8 01       	movw	r20, r16
     4ca:	97 01       	movw	r18, r14
     4cc:	2a 19       	sub	r18, r10
     4ce:	3b 09       	sbc	r19, r11
     4d0:	4c 09       	sbc	r20, r12
     4d2:	5d 09       	sbc	r21, r13
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <_fpadd_parts+0x1c0>
     4d6:	a6 01       	movw	r20, r12
     4d8:	95 01       	movw	r18, r10
     4da:	2e 19       	sub	r18, r14
     4dc:	3f 09       	sbc	r19, r15
     4de:	40 0b       	sbc	r20, r16
     4e0:	51 0b       	sbc	r21, r17
     4e2:	57 fd       	sbrc	r21, 7
     4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <_fpadd_parts+0x1d4>
     4e6:	11 82       	std	Z+1, r1	; 0x01
     4e8:	33 82       	std	Z+3, r3	; 0x03
     4ea:	22 82       	std	Z+2, r2	; 0x02
     4ec:	24 83       	std	Z+4, r18	; 0x04
     4ee:	35 83       	std	Z+5, r19	; 0x05
     4f0:	46 83       	std	Z+6, r20	; 0x06
     4f2:	57 83       	std	Z+7, r21	; 0x07
     4f4:	1d c0       	rjmp	.+58     	; 0x530 <_fpadd_parts+0x20e>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	81 83       	std	Z+1, r24	; 0x01
     4fa:	33 82       	std	Z+3, r3	; 0x03
     4fc:	22 82       	std	Z+2, r2	; 0x02
     4fe:	88 27       	eor	r24, r24
     500:	99 27       	eor	r25, r25
     502:	dc 01       	movw	r26, r24
     504:	82 1b       	sub	r24, r18
     506:	93 0b       	sbc	r25, r19
     508:	a4 0b       	sbc	r26, r20
     50a:	b5 0b       	sbc	r27, r21
     50c:	84 83       	std	Z+4, r24	; 0x04
     50e:	95 83       	std	Z+5, r25	; 0x05
     510:	a6 83       	std	Z+6, r26	; 0x06
     512:	b7 83       	std	Z+7, r27	; 0x07
     514:	0d c0       	rjmp	.+26     	; 0x530 <_fpadd_parts+0x20e>
     516:	22 0f       	add	r18, r18
     518:	33 1f       	adc	r19, r19
     51a:	44 1f       	adc	r20, r20
     51c:	55 1f       	adc	r21, r21
     51e:	24 83       	std	Z+4, r18	; 0x04
     520:	35 83       	std	Z+5, r19	; 0x05
     522:	46 83       	std	Z+6, r20	; 0x06
     524:	57 83       	std	Z+7, r21	; 0x07
     526:	82 81       	ldd	r24, Z+2	; 0x02
     528:	93 81       	ldd	r25, Z+3	; 0x03
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	93 83       	std	Z+3, r25	; 0x03
     52e:	82 83       	std	Z+2, r24	; 0x02
     530:	24 81       	ldd	r18, Z+4	; 0x04
     532:	35 81       	ldd	r19, Z+5	; 0x05
     534:	46 81       	ldd	r20, Z+6	; 0x06
     536:	57 81       	ldd	r21, Z+7	; 0x07
     538:	da 01       	movw	r26, r20
     53a:	c9 01       	movw	r24, r18
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	a1 09       	sbc	r26, r1
     540:	b1 09       	sbc	r27, r1
     542:	8f 5f       	subi	r24, 0xFF	; 255
     544:	9f 4f       	sbci	r25, 0xFF	; 255
     546:	af 4f       	sbci	r26, 0xFF	; 255
     548:	bf 43       	sbci	r27, 0x3F	; 63
     54a:	28 f3       	brcs	.-54     	; 0x516 <_fpadd_parts+0x1f4>
     54c:	0b c0       	rjmp	.+22     	; 0x564 <_fpadd_parts+0x242>
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	33 82       	std	Z+3, r3	; 0x03
     552:	22 82       	std	Z+2, r2	; 0x02
     554:	ea 0c       	add	r14, r10
     556:	fb 1c       	adc	r15, r11
     558:	0c 1d       	adc	r16, r12
     55a:	1d 1d       	adc	r17, r13
     55c:	e4 82       	std	Z+4, r14	; 0x04
     55e:	f5 82       	std	Z+5, r15	; 0x05
     560:	06 83       	std	Z+6, r16	; 0x06
     562:	17 83       	std	Z+7, r17	; 0x07
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	80 83       	st	Z, r24
     568:	24 81       	ldd	r18, Z+4	; 0x04
     56a:	35 81       	ldd	r19, Z+5	; 0x05
     56c:	46 81       	ldd	r20, Z+6	; 0x06
     56e:	57 81       	ldd	r21, Z+7	; 0x07
     570:	57 ff       	sbrs	r21, 7
     572:	1a c0       	rjmp	.+52     	; 0x5a8 <_fpadd_parts+0x286>
     574:	c9 01       	movw	r24, r18
     576:	aa 27       	eor	r26, r26
     578:	97 fd       	sbrc	r25, 7
     57a:	a0 95       	com	r26
     57c:	ba 2f       	mov	r27, r26
     57e:	81 70       	andi	r24, 0x01	; 1
     580:	90 70       	andi	r25, 0x00	; 0
     582:	a0 70       	andi	r26, 0x00	; 0
     584:	b0 70       	andi	r27, 0x00	; 0
     586:	56 95       	lsr	r21
     588:	47 95       	ror	r20
     58a:	37 95       	ror	r19
     58c:	27 95       	ror	r18
     58e:	82 2b       	or	r24, r18
     590:	93 2b       	or	r25, r19
     592:	a4 2b       	or	r26, r20
     594:	b5 2b       	or	r27, r21
     596:	84 83       	std	Z+4, r24	; 0x04
     598:	95 83       	std	Z+5, r25	; 0x05
     59a:	a6 83       	std	Z+6, r26	; 0x06
     59c:	b7 83       	std	Z+7, r27	; 0x07
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	93 81       	ldd	r25, Z+3	; 0x03
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	93 83       	std	Z+3, r25	; 0x03
     5a6:	82 83       	std	Z+2, r24	; 0x02
     5a8:	df 01       	movw	r26, r30
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <_fpadd_parts+0x28c>
     5ac:	d2 01       	movw	r26, r4
     5ae:	cd 01       	movw	r24, r26
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	e2 e1       	ldi	r30, 0x12	; 18
     5b6:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__epilogue_restores__>

000005ba <__subsf3>:
     5ba:	a0 e2       	ldi	r26, 0x20	; 32
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	e3 ee       	ldi	r30, 0xE3	; 227
     5c0:	f2 e0       	ldi	r31, 0x02	; 2
     5c2:	0c 94 7e 1b 	jmp	0x36fc	; 0x36fc <__prologue_saves__+0x18>
     5c6:	69 83       	std	Y+1, r22	; 0x01
     5c8:	7a 83       	std	Y+2, r23	; 0x02
     5ca:	8b 83       	std	Y+3, r24	; 0x03
     5cc:	9c 83       	std	Y+4, r25	; 0x04
     5ce:	2d 83       	std	Y+5, r18	; 0x05
     5d0:	3e 83       	std	Y+6, r19	; 0x06
     5d2:	4f 83       	std	Y+7, r20	; 0x07
     5d4:	58 87       	std	Y+8, r21	; 0x08
     5d6:	e9 e0       	ldi	r30, 0x09	; 9
     5d8:	ee 2e       	mov	r14, r30
     5da:	f1 2c       	mov	r15, r1
     5dc:	ec 0e       	add	r14, r28
     5de:	fd 1e       	adc	r15, r29
     5e0:	ce 01       	movw	r24, r28
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	b7 01       	movw	r22, r14
     5e6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5ea:	8e 01       	movw	r16, r28
     5ec:	0f 5e       	subi	r16, 0xEF	; 239
     5ee:	1f 4f       	sbci	r17, 0xFF	; 255
     5f0:	ce 01       	movw	r24, r28
     5f2:	05 96       	adiw	r24, 0x05	; 5
     5f4:	b8 01       	movw	r22, r16
     5f6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5fa:	8a 89       	ldd	r24, Y+18	; 0x12
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	89 27       	eor	r24, r25
     600:	8a 8b       	std	Y+18, r24	; 0x12
     602:	c7 01       	movw	r24, r14
     604:	b8 01       	movw	r22, r16
     606:	ae 01       	movw	r20, r28
     608:	47 5e       	subi	r20, 0xE7	; 231
     60a:	5f 4f       	sbci	r21, 0xFF	; 255
     60c:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     610:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     614:	a0 96       	adiw	r28, 0x20	; 32
     616:	e6 e0       	ldi	r30, 0x06	; 6
     618:	0c 94 9a 1b 	jmp	0x3734	; 0x3734 <__epilogue_restores__+0x18>

0000061c <__addsf3>:
     61c:	a0 e2       	ldi	r26, 0x20	; 32
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	e4 e1       	ldi	r30, 0x14	; 20
     622:	f3 e0       	ldi	r31, 0x03	; 3
     624:	0c 94 7e 1b 	jmp	0x36fc	; 0x36fc <__prologue_saves__+0x18>
     628:	69 83       	std	Y+1, r22	; 0x01
     62a:	7a 83       	std	Y+2, r23	; 0x02
     62c:	8b 83       	std	Y+3, r24	; 0x03
     62e:	9c 83       	std	Y+4, r25	; 0x04
     630:	2d 83       	std	Y+5, r18	; 0x05
     632:	3e 83       	std	Y+6, r19	; 0x06
     634:	4f 83       	std	Y+7, r20	; 0x07
     636:	58 87       	std	Y+8, r21	; 0x08
     638:	f9 e0       	ldi	r31, 0x09	; 9
     63a:	ef 2e       	mov	r14, r31
     63c:	f1 2c       	mov	r15, r1
     63e:	ec 0e       	add	r14, r28
     640:	fd 1e       	adc	r15, r29
     642:	ce 01       	movw	r24, r28
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	b7 01       	movw	r22, r14
     648:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     64c:	8e 01       	movw	r16, r28
     64e:	0f 5e       	subi	r16, 0xEF	; 239
     650:	1f 4f       	sbci	r17, 0xFF	; 255
     652:	ce 01       	movw	r24, r28
     654:	05 96       	adiw	r24, 0x05	; 5
     656:	b8 01       	movw	r22, r16
     658:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     65c:	c7 01       	movw	r24, r14
     65e:	b8 01       	movw	r22, r16
     660:	ae 01       	movw	r20, r28
     662:	47 5e       	subi	r20, 0xE7	; 231
     664:	5f 4f       	sbci	r21, 0xFF	; 255
     666:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     66a:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     66e:	a0 96       	adiw	r28, 0x20	; 32
     670:	e6 e0       	ldi	r30, 0x06	; 6
     672:	0c 94 9a 1b 	jmp	0x3734	; 0x3734 <__epilogue_restores__+0x18>

00000676 <__mulsf3>:
     676:	a0 e2       	ldi	r26, 0x20	; 32
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e1 e4       	ldi	r30, 0x41	; 65
     67c:	f3 e0       	ldi	r31, 0x03	; 3
     67e:	0c 94 72 1b 	jmp	0x36e4	; 0x36e4 <__prologue_saves__>
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	7a 83       	std	Y+2, r23	; 0x02
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	2d 83       	std	Y+5, r18	; 0x05
     68c:	3e 83       	std	Y+6, r19	; 0x06
     68e:	4f 83       	std	Y+7, r20	; 0x07
     690:	58 87       	std	Y+8, r21	; 0x08
     692:	ce 01       	movw	r24, r28
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	be 01       	movw	r22, r28
     698:	67 5f       	subi	r22, 0xF7	; 247
     69a:	7f 4f       	sbci	r23, 0xFF	; 255
     69c:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6a0:	ce 01       	movw	r24, r28
     6a2:	05 96       	adiw	r24, 0x05	; 5
     6a4:	be 01       	movw	r22, r28
     6a6:	6f 5e       	subi	r22, 0xEF	; 239
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255
     6aa:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6ae:	99 85       	ldd	r25, Y+9	; 0x09
     6b0:	92 30       	cpi	r25, 0x02	; 2
     6b2:	88 f0       	brcs	.+34     	; 0x6d6 <__mulsf3+0x60>
     6b4:	89 89       	ldd	r24, Y+17	; 0x11
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	c8 f0       	brcs	.+50     	; 0x6ec <__mulsf3+0x76>
     6ba:	94 30       	cpi	r25, 0x04	; 4
     6bc:	19 f4       	brne	.+6      	; 0x6c4 <__mulsf3+0x4e>
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	51 f4       	brne	.+20     	; 0x6d6 <__mulsf3+0x60>
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <__mulsf3+0x56>
     6c4:	84 30       	cpi	r24, 0x04	; 4
     6c6:	29 f4       	brne	.+10     	; 0x6d2 <__mulsf3+0x5c>
     6c8:	92 30       	cpi	r25, 0x02	; 2
     6ca:	81 f4       	brne	.+32     	; 0x6ec <__mulsf3+0x76>
     6cc:	80 e6       	ldi	r24, 0x60	; 96
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	c6 c0       	rjmp	.+396    	; 0x85e <__mulsf3+0x1e8>
     6d2:	92 30       	cpi	r25, 0x02	; 2
     6d4:	49 f4       	brne	.+18     	; 0x6e8 <__mulsf3+0x72>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6da:	8a 89       	ldd	r24, Y+18	; 0x12
     6dc:	98 13       	cpse	r25, r24
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	2a 87       	std	Y+10, r18	; 0x0a
     6e2:	ce 01       	movw	r24, r28
     6e4:	09 96       	adiw	r24, 0x09	; 9
     6e6:	bb c0       	rjmp	.+374    	; 0x85e <__mulsf3+0x1e8>
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	49 f4       	brne	.+18     	; 0x6fe <__mulsf3+0x88>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f0:	8a 89       	ldd	r24, Y+18	; 0x12
     6f2:	98 13       	cpse	r25, r24
     6f4:	21 e0       	ldi	r18, 0x01	; 1
     6f6:	2a 8b       	std	Y+18, r18	; 0x12
     6f8:	ce 01       	movw	r24, r28
     6fa:	41 96       	adiw	r24, 0x11	; 17
     6fc:	b0 c0       	rjmp	.+352    	; 0x85e <__mulsf3+0x1e8>
     6fe:	2d 84       	ldd	r2, Y+13	; 0x0d
     700:	3e 84       	ldd	r3, Y+14	; 0x0e
     702:	4f 84       	ldd	r4, Y+15	; 0x0f
     704:	58 88       	ldd	r5, Y+16	; 0x10
     706:	6d 88       	ldd	r6, Y+21	; 0x15
     708:	7e 88       	ldd	r7, Y+22	; 0x16
     70a:	8f 88       	ldd	r8, Y+23	; 0x17
     70c:	98 8c       	ldd	r9, Y+24	; 0x18
     70e:	ee 24       	eor	r14, r14
     710:	ff 24       	eor	r15, r15
     712:	87 01       	movw	r16, r14
     714:	aa 24       	eor	r10, r10
     716:	bb 24       	eor	r11, r11
     718:	65 01       	movw	r12, r10
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	e0 e0       	ldi	r30, 0x00	; 0
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	c1 01       	movw	r24, r2
     728:	81 70       	andi	r24, 0x01	; 1
     72a:	90 70       	andi	r25, 0x00	; 0
     72c:	89 2b       	or	r24, r25
     72e:	e9 f0       	breq	.+58     	; 0x76a <__mulsf3+0xf4>
     730:	e6 0c       	add	r14, r6
     732:	f7 1c       	adc	r15, r7
     734:	08 1d       	adc	r16, r8
     736:	19 1d       	adc	r17, r9
     738:	9a 01       	movw	r18, r20
     73a:	ab 01       	movw	r20, r22
     73c:	2a 0d       	add	r18, r10
     73e:	3b 1d       	adc	r19, r11
     740:	4c 1d       	adc	r20, r12
     742:	5d 1d       	adc	r21, r13
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	a0 e0       	ldi	r26, 0x00	; 0
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	e6 14       	cp	r14, r6
     74e:	f7 04       	cpc	r15, r7
     750:	08 05       	cpc	r16, r8
     752:	19 05       	cpc	r17, r9
     754:	20 f4       	brcc	.+8      	; 0x75e <__mulsf3+0xe8>
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	a0 e0       	ldi	r26, 0x00	; 0
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	ba 01       	movw	r22, r20
     760:	a9 01       	movw	r20, r18
     762:	48 0f       	add	r20, r24
     764:	59 1f       	adc	r21, r25
     766:	6a 1f       	adc	r22, r26
     768:	7b 1f       	adc	r23, r27
     76a:	aa 0c       	add	r10, r10
     76c:	bb 1c       	adc	r11, r11
     76e:	cc 1c       	adc	r12, r12
     770:	dd 1c       	adc	r13, r13
     772:	97 fe       	sbrs	r9, 7
     774:	08 c0       	rjmp	.+16     	; 0x786 <__mulsf3+0x110>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	a0 e0       	ldi	r26, 0x00	; 0
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	a8 2a       	or	r10, r24
     780:	b9 2a       	or	r11, r25
     782:	ca 2a       	or	r12, r26
     784:	db 2a       	or	r13, r27
     786:	31 96       	adiw	r30, 0x01	; 1
     788:	e0 32       	cpi	r30, 0x20	; 32
     78a:	f1 05       	cpc	r31, r1
     78c:	49 f0       	breq	.+18     	; 0x7a0 <__mulsf3+0x12a>
     78e:	66 0c       	add	r6, r6
     790:	77 1c       	adc	r7, r7
     792:	88 1c       	adc	r8, r8
     794:	99 1c       	adc	r9, r9
     796:	56 94       	lsr	r5
     798:	47 94       	ror	r4
     79a:	37 94       	ror	r3
     79c:	27 94       	ror	r2
     79e:	c3 cf       	rjmp	.-122    	; 0x726 <__mulsf3+0xb0>
     7a0:	fa 85       	ldd	r31, Y+10	; 0x0a
     7a2:	ea 89       	ldd	r30, Y+18	; 0x12
     7a4:	2b 89       	ldd	r18, Y+19	; 0x13
     7a6:	3c 89       	ldd	r19, Y+20	; 0x14
     7a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ac:	28 0f       	add	r18, r24
     7ae:	39 1f       	adc	r19, r25
     7b0:	2e 5f       	subi	r18, 0xFE	; 254
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	17 c0       	rjmp	.+46     	; 0x7e4 <__mulsf3+0x16e>
     7b6:	ca 01       	movw	r24, r20
     7b8:	81 70       	andi	r24, 0x01	; 1
     7ba:	90 70       	andi	r25, 0x00	; 0
     7bc:	89 2b       	or	r24, r25
     7be:	61 f0       	breq	.+24     	; 0x7d8 <__mulsf3+0x162>
     7c0:	16 95       	lsr	r17
     7c2:	07 95       	ror	r16
     7c4:	f7 94       	ror	r15
     7c6:	e7 94       	ror	r14
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	a0 e0       	ldi	r26, 0x00	; 0
     7ce:	b0 e8       	ldi	r27, 0x80	; 128
     7d0:	e8 2a       	or	r14, r24
     7d2:	f9 2a       	or	r15, r25
     7d4:	0a 2b       	or	r16, r26
     7d6:	1b 2b       	or	r17, r27
     7d8:	76 95       	lsr	r23
     7da:	67 95       	ror	r22
     7dc:	57 95       	ror	r21
     7de:	47 95       	ror	r20
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	77 fd       	sbrc	r23, 7
     7e6:	e7 cf       	rjmp	.-50     	; 0x7b6 <__mulsf3+0x140>
     7e8:	0c c0       	rjmp	.+24     	; 0x802 <__mulsf3+0x18c>
     7ea:	44 0f       	add	r20, r20
     7ec:	55 1f       	adc	r21, r21
     7ee:	66 1f       	adc	r22, r22
     7f0:	77 1f       	adc	r23, r23
     7f2:	17 fd       	sbrc	r17, 7
     7f4:	41 60       	ori	r20, 0x01	; 1
     7f6:	ee 0c       	add	r14, r14
     7f8:	ff 1c       	adc	r15, r15
     7fa:	00 1f       	adc	r16, r16
     7fc:	11 1f       	adc	r17, r17
     7fe:	21 50       	subi	r18, 0x01	; 1
     800:	30 40       	sbci	r19, 0x00	; 0
     802:	40 30       	cpi	r20, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	59 07       	cpc	r21, r25
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	69 07       	cpc	r22, r25
     80c:	90 e4       	ldi	r25, 0x40	; 64
     80e:	79 07       	cpc	r23, r25
     810:	60 f3       	brcs	.-40     	; 0x7ea <__mulsf3+0x174>
     812:	2b 8f       	std	Y+27, r18	; 0x1b
     814:	3c 8f       	std	Y+28, r19	; 0x1c
     816:	db 01       	movw	r26, r22
     818:	ca 01       	movw	r24, r20
     81a:	8f 77       	andi	r24, 0x7F	; 127
     81c:	90 70       	andi	r25, 0x00	; 0
     81e:	a0 70       	andi	r26, 0x00	; 0
     820:	b0 70       	andi	r27, 0x00	; 0
     822:	80 34       	cpi	r24, 0x40	; 64
     824:	91 05       	cpc	r25, r1
     826:	a1 05       	cpc	r26, r1
     828:	b1 05       	cpc	r27, r1
     82a:	61 f4       	brne	.+24     	; 0x844 <__mulsf3+0x1ce>
     82c:	47 fd       	sbrc	r20, 7
     82e:	0a c0       	rjmp	.+20     	; 0x844 <__mulsf3+0x1ce>
     830:	e1 14       	cp	r14, r1
     832:	f1 04       	cpc	r15, r1
     834:	01 05       	cpc	r16, r1
     836:	11 05       	cpc	r17, r1
     838:	29 f0       	breq	.+10     	; 0x844 <__mulsf3+0x1ce>
     83a:	40 5c       	subi	r20, 0xC0	; 192
     83c:	5f 4f       	sbci	r21, 0xFF	; 255
     83e:	6f 4f       	sbci	r22, 0xFF	; 255
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	40 78       	andi	r20, 0x80	; 128
     844:	1a 8e       	std	Y+26, r1	; 0x1a
     846:	fe 17       	cp	r31, r30
     848:	11 f0       	breq	.+4      	; 0x84e <__mulsf3+0x1d8>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	8a 8f       	std	Y+26, r24	; 0x1a
     84e:	4d 8f       	std	Y+29, r20	; 0x1d
     850:	5e 8f       	std	Y+30, r21	; 0x1e
     852:	6f 8f       	std	Y+31, r22	; 0x1f
     854:	78 a3       	std	Y+32, r23	; 0x20
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	89 8f       	std	Y+25, r24	; 0x19
     85a:	ce 01       	movw	r24, r28
     85c:	49 96       	adiw	r24, 0x19	; 25
     85e:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     862:	a0 96       	adiw	r28, 0x20	; 32
     864:	e2 e1       	ldi	r30, 0x12	; 18
     866:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__epilogue_restores__>

0000086a <__divsf3>:
     86a:	a8 e1       	ldi	r26, 0x18	; 24
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	eb e3       	ldi	r30, 0x3B	; 59
     870:	f4 e0       	ldi	r31, 0x04	; 4
     872:	0c 94 7a 1b 	jmp	0x36f4	; 0x36f4 <__prologue_saves__+0x10>
     876:	69 83       	std	Y+1, r22	; 0x01
     878:	7a 83       	std	Y+2, r23	; 0x02
     87a:	8b 83       	std	Y+3, r24	; 0x03
     87c:	9c 83       	std	Y+4, r25	; 0x04
     87e:	2d 83       	std	Y+5, r18	; 0x05
     880:	3e 83       	std	Y+6, r19	; 0x06
     882:	4f 83       	std	Y+7, r20	; 0x07
     884:	58 87       	std	Y+8, r21	; 0x08
     886:	b9 e0       	ldi	r27, 0x09	; 9
     888:	eb 2e       	mov	r14, r27
     88a:	f1 2c       	mov	r15, r1
     88c:	ec 0e       	add	r14, r28
     88e:	fd 1e       	adc	r15, r29
     890:	ce 01       	movw	r24, r28
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	b7 01       	movw	r22, r14
     896:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     89a:	8e 01       	movw	r16, r28
     89c:	0f 5e       	subi	r16, 0xEF	; 239
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	ce 01       	movw	r24, r28
     8a2:	05 96       	adiw	r24, 0x05	; 5
     8a4:	b8 01       	movw	r22, r16
     8a6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     8aa:	29 85       	ldd	r18, Y+9	; 0x09
     8ac:	22 30       	cpi	r18, 0x02	; 2
     8ae:	08 f4       	brcc	.+2      	; 0x8b2 <__divsf3+0x48>
     8b0:	7e c0       	rjmp	.+252    	; 0x9ae <__divsf3+0x144>
     8b2:	39 89       	ldd	r19, Y+17	; 0x11
     8b4:	32 30       	cpi	r19, 0x02	; 2
     8b6:	10 f4       	brcc	.+4      	; 0x8bc <__divsf3+0x52>
     8b8:	b8 01       	movw	r22, r16
     8ba:	7c c0       	rjmp	.+248    	; 0x9b4 <__divsf3+0x14a>
     8bc:	8a 85       	ldd	r24, Y+10	; 0x0a
     8be:	9a 89       	ldd	r25, Y+18	; 0x12
     8c0:	89 27       	eor	r24, r25
     8c2:	8a 87       	std	Y+10, r24	; 0x0a
     8c4:	24 30       	cpi	r18, 0x04	; 4
     8c6:	11 f0       	breq	.+4      	; 0x8cc <__divsf3+0x62>
     8c8:	22 30       	cpi	r18, 0x02	; 2
     8ca:	31 f4       	brne	.+12     	; 0x8d8 <__divsf3+0x6e>
     8cc:	23 17       	cp	r18, r19
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <__divsf3+0x68>
     8d0:	6e c0       	rjmp	.+220    	; 0x9ae <__divsf3+0x144>
     8d2:	60 e6       	ldi	r22, 0x60	; 96
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	6e c0       	rjmp	.+220    	; 0x9b4 <__divsf3+0x14a>
     8d8:	34 30       	cpi	r19, 0x04	; 4
     8da:	39 f4       	brne	.+14     	; 0x8ea <__divsf3+0x80>
     8dc:	1d 86       	std	Y+13, r1	; 0x0d
     8de:	1e 86       	std	Y+14, r1	; 0x0e
     8e0:	1f 86       	std	Y+15, r1	; 0x0f
     8e2:	18 8a       	std	Y+16, r1	; 0x10
     8e4:	1c 86       	std	Y+12, r1	; 0x0c
     8e6:	1b 86       	std	Y+11, r1	; 0x0b
     8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <__divsf3+0x88>
     8ea:	32 30       	cpi	r19, 0x02	; 2
     8ec:	21 f4       	brne	.+8      	; 0x8f6 <__divsf3+0x8c>
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	89 87       	std	Y+9, r24	; 0x09
     8f2:	b7 01       	movw	r22, r14
     8f4:	5f c0       	rjmp	.+190    	; 0x9b4 <__divsf3+0x14a>
     8f6:	2b 85       	ldd	r18, Y+11	; 0x0b
     8f8:	3c 85       	ldd	r19, Y+12	; 0x0c
     8fa:	8b 89       	ldd	r24, Y+19	; 0x13
     8fc:	9c 89       	ldd	r25, Y+20	; 0x14
     8fe:	28 1b       	sub	r18, r24
     900:	39 0b       	sbc	r19, r25
     902:	3c 87       	std	Y+12, r19	; 0x0c
     904:	2b 87       	std	Y+11, r18	; 0x0b
     906:	ed 84       	ldd	r14, Y+13	; 0x0d
     908:	fe 84       	ldd	r15, Y+14	; 0x0e
     90a:	0f 85       	ldd	r16, Y+15	; 0x0f
     90c:	18 89       	ldd	r17, Y+16	; 0x10
     90e:	ad 88       	ldd	r10, Y+21	; 0x15
     910:	be 88       	ldd	r11, Y+22	; 0x16
     912:	cf 88       	ldd	r12, Y+23	; 0x17
     914:	d8 8c       	ldd	r13, Y+24	; 0x18
     916:	ea 14       	cp	r14, r10
     918:	fb 04       	cpc	r15, r11
     91a:	0c 05       	cpc	r16, r12
     91c:	1d 05       	cpc	r17, r13
     91e:	40 f4       	brcc	.+16     	; 0x930 <__divsf3+0xc6>
     920:	ee 0c       	add	r14, r14
     922:	ff 1c       	adc	r15, r15
     924:	00 1f       	adc	r16, r16
     926:	11 1f       	adc	r17, r17
     928:	21 50       	subi	r18, 0x01	; 1
     92a:	30 40       	sbci	r19, 0x00	; 0
     92c:	3c 87       	std	Y+12, r19	; 0x0c
     92e:	2b 87       	std	Y+11, r18	; 0x0b
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e4       	ldi	r27, 0x40	; 64
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	ea 14       	cp	r14, r10
     946:	fb 04       	cpc	r15, r11
     948:	0c 05       	cpc	r16, r12
     94a:	1d 05       	cpc	r17, r13
     94c:	40 f0       	brcs	.+16     	; 0x95e <__divsf3+0xf4>
     94e:	28 2b       	or	r18, r24
     950:	39 2b       	or	r19, r25
     952:	4a 2b       	or	r20, r26
     954:	5b 2b       	or	r21, r27
     956:	ea 18       	sub	r14, r10
     958:	fb 08       	sbc	r15, r11
     95a:	0c 09       	sbc	r16, r12
     95c:	1d 09       	sbc	r17, r13
     95e:	b6 95       	lsr	r27
     960:	a7 95       	ror	r26
     962:	97 95       	ror	r25
     964:	87 95       	ror	r24
     966:	ee 0c       	add	r14, r14
     968:	ff 1c       	adc	r15, r15
     96a:	00 1f       	adc	r16, r16
     96c:	11 1f       	adc	r17, r17
     96e:	6f 5f       	subi	r22, 0xFF	; 255
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	6f 31       	cpi	r22, 0x1F	; 31
     974:	71 05       	cpc	r23, r1
     976:	31 f7       	brne	.-52     	; 0x944 <__divsf3+0xda>
     978:	da 01       	movw	r26, r20
     97a:	c9 01       	movw	r24, r18
     97c:	8f 77       	andi	r24, 0x7F	; 127
     97e:	90 70       	andi	r25, 0x00	; 0
     980:	a0 70       	andi	r26, 0x00	; 0
     982:	b0 70       	andi	r27, 0x00	; 0
     984:	80 34       	cpi	r24, 0x40	; 64
     986:	91 05       	cpc	r25, r1
     988:	a1 05       	cpc	r26, r1
     98a:	b1 05       	cpc	r27, r1
     98c:	61 f4       	brne	.+24     	; 0x9a6 <__divsf3+0x13c>
     98e:	27 fd       	sbrc	r18, 7
     990:	0a c0       	rjmp	.+20     	; 0x9a6 <__divsf3+0x13c>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	29 f0       	breq	.+10     	; 0x9a6 <__divsf3+0x13c>
     99c:	20 5c       	subi	r18, 0xC0	; 192
     99e:	3f 4f       	sbci	r19, 0xFF	; 255
     9a0:	4f 4f       	sbci	r20, 0xFF	; 255
     9a2:	5f 4f       	sbci	r21, 0xFF	; 255
     9a4:	20 78       	andi	r18, 0x80	; 128
     9a6:	2d 87       	std	Y+13, r18	; 0x0d
     9a8:	3e 87       	std	Y+14, r19	; 0x0e
     9aa:	4f 87       	std	Y+15, r20	; 0x0f
     9ac:	58 8b       	std	Y+16, r21	; 0x10
     9ae:	be 01       	movw	r22, r28
     9b0:	67 5f       	subi	r22, 0xF7	; 247
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	cb 01       	movw	r24, r22
     9b6:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     9ba:	68 96       	adiw	r28, 0x18	; 24
     9bc:	ea e0       	ldi	r30, 0x0A	; 10
     9be:	0c 94 96 1b 	jmp	0x372c	; 0x372c <__epilogue_restores__+0x10>

000009c2 <__gtsf2>:
     9c2:	a8 e1       	ldi	r26, 0x18	; 24
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	e7 ee       	ldi	r30, 0xE7	; 231
     9c8:	f4 e0       	ldi	r31, 0x04	; 4
     9ca:	0c 94 7e 1b 	jmp	0x36fc	; 0x36fc <__prologue_saves__+0x18>
     9ce:	69 83       	std	Y+1, r22	; 0x01
     9d0:	7a 83       	std	Y+2, r23	; 0x02
     9d2:	8b 83       	std	Y+3, r24	; 0x03
     9d4:	9c 83       	std	Y+4, r25	; 0x04
     9d6:	2d 83       	std	Y+5, r18	; 0x05
     9d8:	3e 83       	std	Y+6, r19	; 0x06
     9da:	4f 83       	std	Y+7, r20	; 0x07
     9dc:	58 87       	std	Y+8, r21	; 0x08
     9de:	89 e0       	ldi	r24, 0x09	; 9
     9e0:	e8 2e       	mov	r14, r24
     9e2:	f1 2c       	mov	r15, r1
     9e4:	ec 0e       	add	r14, r28
     9e6:	fd 1e       	adc	r15, r29
     9e8:	ce 01       	movw	r24, r28
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	b7 01       	movw	r22, r14
     9ee:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     9f2:	8e 01       	movw	r16, r28
     9f4:	0f 5e       	subi	r16, 0xEF	; 239
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
     9f8:	ce 01       	movw	r24, r28
     9fa:	05 96       	adiw	r24, 0x05	; 5
     9fc:	b8 01       	movw	r22, r16
     9fe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a02:	89 85       	ldd	r24, Y+9	; 0x09
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	40 f0       	brcs	.+16     	; 0xa18 <__gtsf2+0x56>
     a08:	89 89       	ldd	r24, Y+17	; 0x11
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	28 f0       	brcs	.+10     	; 0xa18 <__gtsf2+0x56>
     a0e:	c7 01       	movw	r24, r14
     a10:	b8 01       	movw	r22, r16
     a12:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <__gtsf2+0x58>
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	68 96       	adiw	r28, 0x18	; 24
     a1c:	e6 e0       	ldi	r30, 0x06	; 6
     a1e:	0c 94 9a 1b 	jmp	0x3734	; 0x3734 <__epilogue_restores__+0x18>

00000a22 <__gesf2>:
     a22:	a8 e1       	ldi	r26, 0x18	; 24
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e7 e1       	ldi	r30, 0x17	; 23
     a28:	f5 e0       	ldi	r31, 0x05	; 5
     a2a:	0c 94 7e 1b 	jmp	0x36fc	; 0x36fc <__prologue_saves__+0x18>
     a2e:	69 83       	std	Y+1, r22	; 0x01
     a30:	7a 83       	std	Y+2, r23	; 0x02
     a32:	8b 83       	std	Y+3, r24	; 0x03
     a34:	9c 83       	std	Y+4, r25	; 0x04
     a36:	2d 83       	std	Y+5, r18	; 0x05
     a38:	3e 83       	std	Y+6, r19	; 0x06
     a3a:	4f 83       	std	Y+7, r20	; 0x07
     a3c:	58 87       	std	Y+8, r21	; 0x08
     a3e:	89 e0       	ldi	r24, 0x09	; 9
     a40:	e8 2e       	mov	r14, r24
     a42:	f1 2c       	mov	r15, r1
     a44:	ec 0e       	add	r14, r28
     a46:	fd 1e       	adc	r15, r29
     a48:	ce 01       	movw	r24, r28
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	b7 01       	movw	r22, r14
     a4e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a52:	8e 01       	movw	r16, r28
     a54:	0f 5e       	subi	r16, 0xEF	; 239
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
     a58:	ce 01       	movw	r24, r28
     a5a:	05 96       	adiw	r24, 0x05	; 5
     a5c:	b8 01       	movw	r22, r16
     a5e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a62:	89 85       	ldd	r24, Y+9	; 0x09
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	40 f0       	brcs	.+16     	; 0xa78 <__gesf2+0x56>
     a68:	89 89       	ldd	r24, Y+17	; 0x11
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	28 f0       	brcs	.+10     	; 0xa78 <__gesf2+0x56>
     a6e:	c7 01       	movw	r24, r14
     a70:	b8 01       	movw	r22, r16
     a72:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <__gesf2+0x58>
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	68 96       	adiw	r28, 0x18	; 24
     a7c:	e6 e0       	ldi	r30, 0x06	; 6
     a7e:	0c 94 9a 1b 	jmp	0x3734	; 0x3734 <__epilogue_restores__+0x18>

00000a82 <__ltsf2>:
     a82:	a8 e1       	ldi	r26, 0x18	; 24
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	e7 e4       	ldi	r30, 0x47	; 71
     a88:	f5 e0       	ldi	r31, 0x05	; 5
     a8a:	0c 94 7e 1b 	jmp	0x36fc	; 0x36fc <__prologue_saves__+0x18>
     a8e:	69 83       	std	Y+1, r22	; 0x01
     a90:	7a 83       	std	Y+2, r23	; 0x02
     a92:	8b 83       	std	Y+3, r24	; 0x03
     a94:	9c 83       	std	Y+4, r25	; 0x04
     a96:	2d 83       	std	Y+5, r18	; 0x05
     a98:	3e 83       	std	Y+6, r19	; 0x06
     a9a:	4f 83       	std	Y+7, r20	; 0x07
     a9c:	58 87       	std	Y+8, r21	; 0x08
     a9e:	89 e0       	ldi	r24, 0x09	; 9
     aa0:	e8 2e       	mov	r14, r24
     aa2:	f1 2c       	mov	r15, r1
     aa4:	ec 0e       	add	r14, r28
     aa6:	fd 1e       	adc	r15, r29
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	b7 01       	movw	r22, r14
     aae:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ab2:	8e 01       	movw	r16, r28
     ab4:	0f 5e       	subi	r16, 0xEF	; 239
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255
     ab8:	ce 01       	movw	r24, r28
     aba:	05 96       	adiw	r24, 0x05	; 5
     abc:	b8 01       	movw	r22, r16
     abe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ac2:	89 85       	ldd	r24, Y+9	; 0x09
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	40 f0       	brcs	.+16     	; 0xad8 <__ltsf2+0x56>
     ac8:	89 89       	ldd	r24, Y+17	; 0x11
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	28 f0       	brcs	.+10     	; 0xad8 <__ltsf2+0x56>
     ace:	c7 01       	movw	r24, r14
     ad0:	b8 01       	movw	r22, r16
     ad2:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     ad6:	01 c0       	rjmp	.+2      	; 0xada <__ltsf2+0x58>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	68 96       	adiw	r28, 0x18	; 24
     adc:	e6 e0       	ldi	r30, 0x06	; 6
     ade:	0c 94 9a 1b 	jmp	0x3734	; 0x3734 <__epilogue_restores__+0x18>

00000ae2 <__floatsisf>:
     ae2:	a8 e0       	ldi	r26, 0x08	; 8
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e7 e7       	ldi	r30, 0x77	; 119
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	0c 94 7b 1b 	jmp	0x36f6	; 0x36f6 <__prologue_saves__+0x12>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	da 01       	movw	r26, r20
     af8:	c9 01       	movw	r24, r18
     afa:	88 27       	eor	r24, r24
     afc:	b7 fd       	sbrc	r27, 7
     afe:	83 95       	inc	r24
     b00:	99 27       	eor	r25, r25
     b02:	aa 27       	eor	r26, r26
     b04:	bb 27       	eor	r27, r27
     b06:	b8 2e       	mov	r11, r24
     b08:	21 15       	cp	r18, r1
     b0a:	31 05       	cpc	r19, r1
     b0c:	41 05       	cpc	r20, r1
     b0e:	51 05       	cpc	r21, r1
     b10:	19 f4       	brne	.+6      	; 0xb18 <__floatsisf+0x36>
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	3a c0       	rjmp	.+116    	; 0xb8c <__floatsisf+0xaa>
     b18:	88 23       	and	r24, r24
     b1a:	a9 f0       	breq	.+42     	; 0xb46 <__floatsisf+0x64>
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	38 07       	cpc	r19, r24
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	48 07       	cpc	r20, r24
     b26:	80 e8       	ldi	r24, 0x80	; 128
     b28:	58 07       	cpc	r21, r24
     b2a:	29 f4       	brne	.+10     	; 0xb36 <__floatsisf+0x54>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	9f ec       	ldi	r25, 0xCF	; 207
     b34:	30 c0       	rjmp	.+96     	; 0xb96 <__floatsisf+0xb4>
     b36:	ee 24       	eor	r14, r14
     b38:	ff 24       	eor	r15, r15
     b3a:	87 01       	movw	r16, r14
     b3c:	e2 1a       	sub	r14, r18
     b3e:	f3 0a       	sbc	r15, r19
     b40:	04 0b       	sbc	r16, r20
     b42:	15 0b       	sbc	r17, r21
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <__floatsisf+0x68>
     b46:	79 01       	movw	r14, r18
     b48:	8a 01       	movw	r16, r20
     b4a:	8e e1       	ldi	r24, 0x1E	; 30
     b4c:	c8 2e       	mov	r12, r24
     b4e:	d1 2c       	mov	r13, r1
     b50:	dc 82       	std	Y+4, r13	; 0x04
     b52:	cb 82       	std	Y+3, r12	; 0x03
     b54:	ed 82       	std	Y+5, r14	; 0x05
     b56:	fe 82       	std	Y+6, r15	; 0x06
     b58:	0f 83       	std	Y+7, r16	; 0x07
     b5a:	18 87       	std	Y+8, r17	; 0x08
     b5c:	c8 01       	movw	r24, r16
     b5e:	b7 01       	movw	r22, r14
     b60:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	18 16       	cp	r1, r24
     b68:	19 06       	cpc	r1, r25
     b6a:	84 f4       	brge	.+32     	; 0xb8c <__floatsisf+0xaa>
     b6c:	08 2e       	mov	r0, r24
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__floatsisf+0x96>
     b70:	ee 0c       	add	r14, r14
     b72:	ff 1c       	adc	r15, r15
     b74:	00 1f       	adc	r16, r16
     b76:	11 1f       	adc	r17, r17
     b78:	0a 94       	dec	r0
     b7a:	d2 f7       	brpl	.-12     	; 0xb70 <__floatsisf+0x8e>
     b7c:	ed 82       	std	Y+5, r14	; 0x05
     b7e:	fe 82       	std	Y+6, r15	; 0x06
     b80:	0f 83       	std	Y+7, r16	; 0x07
     b82:	18 87       	std	Y+8, r17	; 0x08
     b84:	c8 1a       	sub	r12, r24
     b86:	d9 0a       	sbc	r13, r25
     b88:	dc 82       	std	Y+4, r13	; 0x04
     b8a:	cb 82       	std	Y+3, r12	; 0x03
     b8c:	ba 82       	std	Y+2, r11	; 0x02
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     b96:	28 96       	adiw	r28, 0x08	; 8
     b98:	e9 e0       	ldi	r30, 0x09	; 9
     b9a:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__epilogue_restores__+0x12>

00000b9e <__fixsfsi>:
     b9e:	ac e0       	ldi	r26, 0x0C	; 12
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e5 ed       	ldi	r30, 0xD5	; 213
     ba4:	f5 e0       	ldi	r31, 0x05	; 5
     ba6:	0c 94 82 1b 	jmp	0x3704	; 0x3704 <__prologue_saves__+0x20>
     baa:	69 83       	std	Y+1, r22	; 0x01
     bac:	7a 83       	std	Y+2, r23	; 0x02
     bae:	8b 83       	std	Y+3, r24	; 0x03
     bb0:	9c 83       	std	Y+4, r25	; 0x04
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	be 01       	movw	r22, r28
     bb8:	6b 5f       	subi	r22, 0xFB	; 251
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	61 f1       	breq	.+88     	; 0xc1e <__fixsfsi+0x80>
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	50 f1       	brcs	.+84     	; 0xc1e <__fixsfsi+0x80>
     bca:	84 30       	cpi	r24, 0x04	; 4
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <__fixsfsi+0x38>
     bce:	8e 81       	ldd	r24, Y+6	; 0x06
     bd0:	88 23       	and	r24, r24
     bd2:	51 f1       	breq	.+84     	; 0xc28 <__fixsfsi+0x8a>
     bd4:	2e c0       	rjmp	.+92     	; 0xc32 <__fixsfsi+0x94>
     bd6:	2f 81       	ldd	r18, Y+7	; 0x07
     bd8:	38 85       	ldd	r19, Y+8	; 0x08
     bda:	37 fd       	sbrc	r19, 7
     bdc:	20 c0       	rjmp	.+64     	; 0xc1e <__fixsfsi+0x80>
     bde:	6e 81       	ldd	r22, Y+6	; 0x06
     be0:	2f 31       	cpi	r18, 0x1F	; 31
     be2:	31 05       	cpc	r19, r1
     be4:	1c f0       	brlt	.+6      	; 0xbec <__fixsfsi+0x4e>
     be6:	66 23       	and	r22, r22
     be8:	f9 f0       	breq	.+62     	; 0xc28 <__fixsfsi+0x8a>
     bea:	23 c0       	rjmp	.+70     	; 0xc32 <__fixsfsi+0x94>
     bec:	8e e1       	ldi	r24, 0x1E	; 30
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	82 1b       	sub	r24, r18
     bf2:	93 0b       	sbc	r25, r19
     bf4:	29 85       	ldd	r18, Y+9	; 0x09
     bf6:	3a 85       	ldd	r19, Y+10	; 0x0a
     bf8:	4b 85       	ldd	r20, Y+11	; 0x0b
     bfa:	5c 85       	ldd	r21, Y+12	; 0x0c
     bfc:	04 c0       	rjmp	.+8      	; 0xc06 <__fixsfsi+0x68>
     bfe:	56 95       	lsr	r21
     c00:	47 95       	ror	r20
     c02:	37 95       	ror	r19
     c04:	27 95       	ror	r18
     c06:	8a 95       	dec	r24
     c08:	d2 f7       	brpl	.-12     	; 0xbfe <__fixsfsi+0x60>
     c0a:	66 23       	and	r22, r22
     c0c:	b1 f0       	breq	.+44     	; 0xc3a <__fixsfsi+0x9c>
     c0e:	50 95       	com	r21
     c10:	40 95       	com	r20
     c12:	30 95       	com	r19
     c14:	21 95       	neg	r18
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	4f 4f       	sbci	r20, 0xFF	; 255
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <__fixsfsi+0x9c>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <__fixsfsi+0x9c>
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	3f ef       	ldi	r19, 0xFF	; 255
     c2c:	4f ef       	ldi	r20, 0xFF	; 255
     c2e:	5f e7       	ldi	r21, 0x7F	; 127
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__fixsfsi+0x9c>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e8       	ldi	r21, 0x80	; 128
     c3a:	b9 01       	movw	r22, r18
     c3c:	ca 01       	movw	r24, r20
     c3e:	2c 96       	adiw	r28, 0x0c	; 12
     c40:	e2 e0       	ldi	r30, 0x02	; 2
     c42:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__epilogue_restores__+0x20>

00000c46 <__floatunsisf>:
     c46:	a8 e0       	ldi	r26, 0x08	; 8
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e9 e2       	ldi	r30, 0x29	; 41
     c4c:	f6 e0       	ldi	r31, 0x06	; 6
     c4e:	0c 94 7a 1b 	jmp	0x36f4	; 0x36f4 <__prologue_saves__+0x10>
     c52:	7b 01       	movw	r14, r22
     c54:	8c 01       	movw	r16, r24
     c56:	61 15       	cp	r22, r1
     c58:	71 05       	cpc	r23, r1
     c5a:	81 05       	cpc	r24, r1
     c5c:	91 05       	cpc	r25, r1
     c5e:	19 f4       	brne	.+6      	; 0xc66 <__floatunsisf+0x20>
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	60 c0       	rjmp	.+192    	; 0xd26 <__floatunsisf+0xe0>
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	8e e1       	ldi	r24, 0x1E	; 30
     c6c:	c8 2e       	mov	r12, r24
     c6e:	d1 2c       	mov	r13, r1
     c70:	dc 82       	std	Y+4, r13	; 0x04
     c72:	cb 82       	std	Y+3, r12	; 0x03
     c74:	ed 82       	std	Y+5, r14	; 0x05
     c76:	fe 82       	std	Y+6, r15	; 0x06
     c78:	0f 83       	std	Y+7, r16	; 0x07
     c7a:	18 87       	std	Y+8, r17	; 0x08
     c7c:	c8 01       	movw	r24, r16
     c7e:	b7 01       	movw	r22, r14
     c80:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     c84:	fc 01       	movw	r30, r24
     c86:	31 97       	sbiw	r30, 0x01	; 1
     c88:	f7 ff       	sbrs	r31, 7
     c8a:	3b c0       	rjmp	.+118    	; 0xd02 <__floatunsisf+0xbc>
     c8c:	22 27       	eor	r18, r18
     c8e:	33 27       	eor	r19, r19
     c90:	2e 1b       	sub	r18, r30
     c92:	3f 0b       	sbc	r19, r31
     c94:	57 01       	movw	r10, r14
     c96:	68 01       	movw	r12, r16
     c98:	02 2e       	mov	r0, r18
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <__floatunsisf+0x5e>
     c9c:	d6 94       	lsr	r13
     c9e:	c7 94       	ror	r12
     ca0:	b7 94       	ror	r11
     ca2:	a7 94       	ror	r10
     ca4:	0a 94       	dec	r0
     ca6:	d2 f7       	brpl	.-12     	; 0xc9c <__floatunsisf+0x56>
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <__floatunsisf+0x7c>
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	aa 1f       	adc	r26, r26
     cc0:	bb 1f       	adc	r27, r27
     cc2:	2a 95       	dec	r18
     cc4:	d2 f7       	brpl	.-12     	; 0xcba <__floatunsisf+0x74>
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	a1 09       	sbc	r26, r1
     cca:	b1 09       	sbc	r27, r1
     ccc:	8e 21       	and	r24, r14
     cce:	9f 21       	and	r25, r15
     cd0:	a0 23       	and	r26, r16
     cd2:	b1 23       	and	r27, r17
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	a1 05       	cpc	r26, r1
     cd8:	b1 05       	cpc	r27, r1
     cda:	21 f0       	breq	.+8      	; 0xce4 <__floatunsisf+0x9e>
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	4a 29       	or	r20, r10
     ce6:	5b 29       	or	r21, r11
     ce8:	6c 29       	or	r22, r12
     cea:	7d 29       	or	r23, r13
     cec:	4d 83       	std	Y+5, r20	; 0x05
     cee:	5e 83       	std	Y+6, r21	; 0x06
     cf0:	6f 83       	std	Y+7, r22	; 0x07
     cf2:	78 87       	std	Y+8, r23	; 0x08
     cf4:	8e e1       	ldi	r24, 0x1E	; 30
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	8e 1b       	sub	r24, r30
     cfa:	9f 0b       	sbc	r25, r31
     cfc:	9c 83       	std	Y+4, r25	; 0x04
     cfe:	8b 83       	std	Y+3, r24	; 0x03
     d00:	12 c0       	rjmp	.+36     	; 0xd26 <__floatunsisf+0xe0>
     d02:	30 97       	sbiw	r30, 0x00	; 0
     d04:	81 f0       	breq	.+32     	; 0xd26 <__floatunsisf+0xe0>
     d06:	0e 2e       	mov	r0, r30
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <__floatunsisf+0xcc>
     d0a:	ee 0c       	add	r14, r14
     d0c:	ff 1c       	adc	r15, r15
     d0e:	00 1f       	adc	r16, r16
     d10:	11 1f       	adc	r17, r17
     d12:	0a 94       	dec	r0
     d14:	d2 f7       	brpl	.-12     	; 0xd0a <__floatunsisf+0xc4>
     d16:	ed 82       	std	Y+5, r14	; 0x05
     d18:	fe 82       	std	Y+6, r15	; 0x06
     d1a:	0f 83       	std	Y+7, r16	; 0x07
     d1c:	18 87       	std	Y+8, r17	; 0x08
     d1e:	ce 1a       	sub	r12, r30
     d20:	df 0a       	sbc	r13, r31
     d22:	dc 82       	std	Y+4, r13	; 0x04
     d24:	cb 82       	std	Y+3, r12	; 0x03
     d26:	1a 82       	std	Y+2, r1	; 0x02
     d28:	ce 01       	movw	r24, r28
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     d30:	28 96       	adiw	r28, 0x08	; 8
     d32:	ea e0       	ldi	r30, 0x0A	; 10
     d34:	0c 94 96 1b 	jmp	0x372c	; 0x372c <__epilogue_restores__+0x10>

00000d38 <__ashldi3>:
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	60 97       	sbiw	r28, 0x10	; 16
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	a8 2f       	mov	r26, r24
     d54:	00 23       	and	r16, r16
     d56:	09 f4       	brne	.+2      	; 0xd5a <__ashldi3+0x22>
     d58:	61 c0       	rjmp	.+194    	; 0xe1c <__ashldi3+0xe4>
     d5a:	7e 01       	movw	r14, r28
     d5c:	08 94       	sec
     d5e:	e1 1c       	adc	r14, r1
     d60:	f1 1c       	adc	r15, r1
     d62:	88 e0       	ldi	r24, 0x08	; 8
     d64:	f7 01       	movw	r30, r14
     d66:	11 92       	st	Z+, r1
     d68:	8a 95       	dec	r24
     d6a:	e9 f7       	brne	.-6      	; 0xd66 <__ashldi3+0x2e>
     d6c:	29 83       	std	Y+1, r18	; 0x01
     d6e:	3a 83       	std	Y+2, r19	; 0x02
     d70:	4b 83       	std	Y+3, r20	; 0x03
     d72:	5c 83       	std	Y+4, r21	; 0x04
     d74:	6d 83       	std	Y+5, r22	; 0x05
     d76:	7e 83       	std	Y+6, r23	; 0x06
     d78:	af 83       	std	Y+7, r26	; 0x07
     d7a:	98 87       	std	Y+8, r25	; 0x08
     d7c:	80 e2       	ldi	r24, 0x20	; 32
     d7e:	80 1b       	sub	r24, r16
     d80:	e8 2f       	mov	r30, r24
     d82:	ff 27       	eor	r31, r31
     d84:	e7 fd       	sbrc	r30, 7
     d86:	f0 95       	com	r31
     d88:	49 81       	ldd	r20, Y+1	; 0x01
     d8a:	5a 81       	ldd	r21, Y+2	; 0x02
     d8c:	6b 81       	ldd	r22, Y+3	; 0x03
     d8e:	7c 81       	ldd	r23, Y+4	; 0x04
     d90:	18 16       	cp	r1, r24
     d92:	84 f0       	brlt	.+32     	; 0xdb4 <__ashldi3+0x7c>
     d94:	19 86       	std	Y+9, r1	; 0x09
     d96:	1a 86       	std	Y+10, r1	; 0x0a
     d98:	1b 86       	std	Y+11, r1	; 0x0b
     d9a:	1c 86       	std	Y+12, r1	; 0x0c
     d9c:	88 27       	eor	r24, r24
     d9e:	99 27       	eor	r25, r25
     da0:	8e 1b       	sub	r24, r30
     da2:	9f 0b       	sbc	r25, r31
     da4:	04 c0       	rjmp	.+8      	; 0xdae <__ashldi3+0x76>
     da6:	44 0f       	add	r20, r20
     da8:	55 1f       	adc	r21, r21
     daa:	66 1f       	adc	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	8a 95       	dec	r24
     db0:	d2 f7       	brpl	.-12     	; 0xda6 <__ashldi3+0x6e>
     db2:	28 c0       	rjmp	.+80     	; 0xe04 <__ashldi3+0xcc>
     db4:	20 2f       	mov	r18, r16
     db6:	33 27       	eor	r19, r19
     db8:	27 fd       	sbrc	r18, 7
     dba:	30 95       	com	r19
     dbc:	db 01       	movw	r26, r22
     dbe:	ca 01       	movw	r24, r20
     dc0:	02 2e       	mov	r0, r18
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <__ashldi3+0x94>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	aa 1f       	adc	r26, r26
     dca:	bb 1f       	adc	r27, r27
     dcc:	0a 94       	dec	r0
     dce:	d2 f7       	brpl	.-12     	; 0xdc4 <__ashldi3+0x8c>
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	ab 87       	std	Y+11, r26	; 0x0b
     dd6:	bc 87       	std	Y+12, r27	; 0x0c
     dd8:	04 c0       	rjmp	.+8      	; 0xde2 <__ashldi3+0xaa>
     dda:	76 95       	lsr	r23
     ddc:	67 95       	ror	r22
     dde:	57 95       	ror	r21
     de0:	47 95       	ror	r20
     de2:	ea 95       	dec	r30
     de4:	d2 f7       	brpl	.-12     	; 0xdda <__ashldi3+0xa2>
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	af 81       	ldd	r26, Y+7	; 0x07
     dec:	b8 85       	ldd	r27, Y+8	; 0x08
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__ashldi3+0xc0>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	aa 1f       	adc	r26, r26
     df6:	bb 1f       	adc	r27, r27
     df8:	2a 95       	dec	r18
     dfa:	d2 f7       	brpl	.-12     	; 0xdf0 <__ashldi3+0xb8>
     dfc:	48 2b       	or	r20, r24
     dfe:	59 2b       	or	r21, r25
     e00:	6a 2b       	or	r22, r26
     e02:	7b 2b       	or	r23, r27
     e04:	4d 87       	std	Y+13, r20	; 0x0d
     e06:	5e 87       	std	Y+14, r21	; 0x0e
     e08:	6f 87       	std	Y+15, r22	; 0x0f
     e0a:	78 8b       	std	Y+16, r23	; 0x10
     e0c:	29 85       	ldd	r18, Y+9	; 0x09
     e0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e10:	4b 85       	ldd	r20, Y+11	; 0x0b
     e12:	5c 85       	ldd	r21, Y+12	; 0x0c
     e14:	6d 85       	ldd	r22, Y+13	; 0x0d
     e16:	7e 85       	ldd	r23, Y+14	; 0x0e
     e18:	af 85       	ldd	r26, Y+15	; 0x0f
     e1a:	98 89       	ldd	r25, Y+16	; 0x10
     e1c:	8a 2f       	mov	r24, r26
     e1e:	60 96       	adiw	r28, 0x10	; 16
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	08 95       	ret

00000e36 <__clzsi2>:
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	7b 01       	movw	r14, r22
     e40:	8c 01       	movw	r16, r24
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	e8 16       	cp	r14, r24
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	f8 06       	cpc	r15, r24
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	08 07       	cpc	r16, r24
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	18 07       	cpc	r17, r24
     e52:	88 f4       	brcc	.+34     	; 0xe76 <__clzsi2+0x40>
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	e8 16       	cp	r14, r24
     e58:	f1 04       	cpc	r15, r1
     e5a:	01 05       	cpc	r16, r1
     e5c:	11 05       	cpc	r17, r1
     e5e:	31 f0       	breq	.+12     	; 0xe6c <__clzsi2+0x36>
     e60:	28 f0       	brcs	.+10     	; 0xe6c <__clzsi2+0x36>
     e62:	88 e0       	ldi	r24, 0x08	; 8
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	17 c0       	rjmp	.+46     	; 0xe9a <__clzsi2+0x64>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a0 e0       	ldi	r26, 0x00	; 0
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	12 c0       	rjmp	.+36     	; 0xe9a <__clzsi2+0x64>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	e8 16       	cp	r14, r24
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	f8 06       	cpc	r15, r24
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	08 07       	cpc	r16, r24
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	18 07       	cpc	r17, r24
     e86:	28 f0       	brcs	.+10     	; 0xe92 <__clzsi2+0x5c>
     e88:	88 e1       	ldi	r24, 0x18	; 24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a0 e0       	ldi	r26, 0x00	; 0
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <__clzsi2+0x64>
     e92:	80 e1       	ldi	r24, 0x10	; 16
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	20 e2       	ldi	r18, 0x20	; 32
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	28 1b       	sub	r18, r24
     ea4:	39 0b       	sbc	r19, r25
     ea6:	4a 0b       	sbc	r20, r26
     ea8:	5b 0b       	sbc	r21, r27
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <__clzsi2+0x7e>
     eac:	16 95       	lsr	r17
     eae:	07 95       	ror	r16
     eb0:	f7 94       	ror	r15
     eb2:	e7 94       	ror	r14
     eb4:	8a 95       	dec	r24
     eb6:	d2 f7       	brpl	.-12     	; 0xeac <__clzsi2+0x76>
     eb8:	f7 01       	movw	r30, r14
     eba:	e8 59       	subi	r30, 0x98	; 152
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	80 81       	ld	r24, Z
     ec0:	28 1b       	sub	r18, r24
     ec2:	31 09       	sbc	r19, r1
     ec4:	41 09       	sbc	r20, r1
     ec6:	51 09       	sbc	r21, r1
     ec8:	c9 01       	movw	r24, r18
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	08 95       	ret

00000ed4 <__pack_f>:
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	fc 01       	movw	r30, r24
     ee0:	e4 80       	ldd	r14, Z+4	; 0x04
     ee2:	f5 80       	ldd	r15, Z+5	; 0x05
     ee4:	06 81       	ldd	r16, Z+6	; 0x06
     ee6:	17 81       	ldd	r17, Z+7	; 0x07
     ee8:	d1 80       	ldd	r13, Z+1	; 0x01
     eea:	80 81       	ld	r24, Z
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	48 f4       	brcc	.+18     	; 0xf02 <__pack_f+0x2e>
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	a0 e1       	ldi	r26, 0x10	; 16
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e8 2a       	or	r14, r24
     efa:	f9 2a       	or	r15, r25
     efc:	0a 2b       	or	r16, r26
     efe:	1b 2b       	or	r17, r27
     f00:	a5 c0       	rjmp	.+330    	; 0x104c <__pack_f+0x178>
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	09 f4       	brne	.+2      	; 0xf08 <__pack_f+0x34>
     f06:	9f c0       	rjmp	.+318    	; 0x1046 <__pack_f+0x172>
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	21 f4       	brne	.+8      	; 0xf14 <__pack_f+0x40>
     f0c:	ee 24       	eor	r14, r14
     f0e:	ff 24       	eor	r15, r15
     f10:	87 01       	movw	r16, r14
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <__pack_f+0x4a>
     f14:	e1 14       	cp	r14, r1
     f16:	f1 04       	cpc	r15, r1
     f18:	01 05       	cpc	r16, r1
     f1a:	11 05       	cpc	r17, r1
     f1c:	19 f4       	brne	.+6      	; 0xf24 <__pack_f+0x50>
     f1e:	e0 e0       	ldi	r30, 0x00	; 0
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	96 c0       	rjmp	.+300    	; 0x1050 <__pack_f+0x17c>
     f24:	62 81       	ldd	r22, Z+2	; 0x02
     f26:	73 81       	ldd	r23, Z+3	; 0x03
     f28:	9f ef       	ldi	r25, 0xFF	; 255
     f2a:	62 38       	cpi	r22, 0x82	; 130
     f2c:	79 07       	cpc	r23, r25
     f2e:	0c f0       	brlt	.+2      	; 0xf32 <__pack_f+0x5e>
     f30:	5b c0       	rjmp	.+182    	; 0xfe8 <__pack_f+0x114>
     f32:	22 e8       	ldi	r18, 0x82	; 130
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	26 1b       	sub	r18, r22
     f38:	37 0b       	sbc	r19, r23
     f3a:	2a 31       	cpi	r18, 0x1A	; 26
     f3c:	31 05       	cpc	r19, r1
     f3e:	2c f0       	brlt	.+10     	; 0xf4a <__pack_f+0x76>
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	2a c0       	rjmp	.+84     	; 0xf9e <__pack_f+0xca>
     f4a:	b8 01       	movw	r22, r16
     f4c:	a7 01       	movw	r20, r14
     f4e:	02 2e       	mov	r0, r18
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <__pack_f+0x86>
     f52:	76 95       	lsr	r23
     f54:	67 95       	ror	r22
     f56:	57 95       	ror	r21
     f58:	47 95       	ror	r20
     f5a:	0a 94       	dec	r0
     f5c:	d2 f7       	brpl	.-12     	; 0xf52 <__pack_f+0x7e>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a0 e0       	ldi	r26, 0x00	; 0
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <__pack_f+0x9c>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	aa 1f       	adc	r26, r26
     f6e:	bb 1f       	adc	r27, r27
     f70:	2a 95       	dec	r18
     f72:	d2 f7       	brpl	.-12     	; 0xf68 <__pack_f+0x94>
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	a1 09       	sbc	r26, r1
     f78:	b1 09       	sbc	r27, r1
     f7a:	8e 21       	and	r24, r14
     f7c:	9f 21       	and	r25, r15
     f7e:	a0 23       	and	r26, r16
     f80:	b1 23       	and	r27, r17
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	21 f0       	breq	.+8      	; 0xf92 <__pack_f+0xbe>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	9a 01       	movw	r18, r20
     f94:	ab 01       	movw	r20, r22
     f96:	28 2b       	or	r18, r24
     f98:	39 2b       	or	r19, r25
     f9a:	4a 2b       	or	r20, r26
     f9c:	5b 2b       	or	r21, r27
     f9e:	da 01       	movw	r26, r20
     fa0:	c9 01       	movw	r24, r18
     fa2:	8f 77       	andi	r24, 0x7F	; 127
     fa4:	90 70       	andi	r25, 0x00	; 0
     fa6:	a0 70       	andi	r26, 0x00	; 0
     fa8:	b0 70       	andi	r27, 0x00	; 0
     faa:	80 34       	cpi	r24, 0x40	; 64
     fac:	91 05       	cpc	r25, r1
     fae:	a1 05       	cpc	r26, r1
     fb0:	b1 05       	cpc	r27, r1
     fb2:	39 f4       	brne	.+14     	; 0xfc2 <__pack_f+0xee>
     fb4:	27 ff       	sbrs	r18, 7
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <__pack_f+0xf6>
     fb8:	20 5c       	subi	r18, 0xC0	; 192
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	4f 4f       	sbci	r20, 0xFF	; 255
     fbe:	5f 4f       	sbci	r21, 0xFF	; 255
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <__pack_f+0xf6>
     fc2:	21 5c       	subi	r18, 0xC1	; 193
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	4f 4f       	sbci	r20, 0xFF	; 255
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255
     fca:	e0 e0       	ldi	r30, 0x00	; 0
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	20 30       	cpi	r18, 0x00	; 0
     fd0:	a0 e0       	ldi	r26, 0x00	; 0
     fd2:	3a 07       	cpc	r19, r26
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	4a 07       	cpc	r20, r26
     fd8:	a0 e4       	ldi	r26, 0x40	; 64
     fda:	5a 07       	cpc	r21, r26
     fdc:	10 f0       	brcs	.+4      	; 0xfe2 <__pack_f+0x10e>
     fde:	e1 e0       	ldi	r30, 0x01	; 1
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	79 01       	movw	r14, r18
     fe4:	8a 01       	movw	r16, r20
     fe6:	27 c0       	rjmp	.+78     	; 0x1036 <__pack_f+0x162>
     fe8:	60 38       	cpi	r22, 0x80	; 128
     fea:	71 05       	cpc	r23, r1
     fec:	64 f5       	brge	.+88     	; 0x1046 <__pack_f+0x172>
     fee:	fb 01       	movw	r30, r22
     ff0:	e1 58       	subi	r30, 0x81	; 129
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	d8 01       	movw	r26, r16
     ff6:	c7 01       	movw	r24, r14
     ff8:	8f 77       	andi	r24, 0x7F	; 127
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	a0 70       	andi	r26, 0x00	; 0
     ffe:	b0 70       	andi	r27, 0x00	; 0
    1000:	80 34       	cpi	r24, 0x40	; 64
    1002:	91 05       	cpc	r25, r1
    1004:	a1 05       	cpc	r26, r1
    1006:	b1 05       	cpc	r27, r1
    1008:	39 f4       	brne	.+14     	; 0x1018 <__pack_f+0x144>
    100a:	e7 fe       	sbrs	r14, 7
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <__pack_f+0x154>
    100e:	80 e4       	ldi	r24, 0x40	; 64
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	a0 e0       	ldi	r26, 0x00	; 0
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <__pack_f+0x14c>
    1018:	8f e3       	ldi	r24, 0x3F	; 63
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	a0 e0       	ldi	r26, 0x00	; 0
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e8 0e       	add	r14, r24
    1022:	f9 1e       	adc	r15, r25
    1024:	0a 1f       	adc	r16, r26
    1026:	1b 1f       	adc	r17, r27
    1028:	17 ff       	sbrs	r17, 7
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <__pack_f+0x162>
    102c:	16 95       	lsr	r17
    102e:	07 95       	ror	r16
    1030:	f7 94       	ror	r15
    1032:	e7 94       	ror	r14
    1034:	31 96       	adiw	r30, 0x01	; 1
    1036:	87 e0       	ldi	r24, 0x07	; 7
    1038:	16 95       	lsr	r17
    103a:	07 95       	ror	r16
    103c:	f7 94       	ror	r15
    103e:	e7 94       	ror	r14
    1040:	8a 95       	dec	r24
    1042:	d1 f7       	brne	.-12     	; 0x1038 <__pack_f+0x164>
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <__pack_f+0x17c>
    1046:	ee 24       	eor	r14, r14
    1048:	ff 24       	eor	r15, r15
    104a:	87 01       	movw	r16, r14
    104c:	ef ef       	ldi	r30, 0xFF	; 255
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	6e 2f       	mov	r22, r30
    1052:	67 95       	ror	r22
    1054:	66 27       	eor	r22, r22
    1056:	67 95       	ror	r22
    1058:	90 2f       	mov	r25, r16
    105a:	9f 77       	andi	r25, 0x7F	; 127
    105c:	d7 94       	ror	r13
    105e:	dd 24       	eor	r13, r13
    1060:	d7 94       	ror	r13
    1062:	8e 2f       	mov	r24, r30
    1064:	86 95       	lsr	r24
    1066:	49 2f       	mov	r20, r25
    1068:	46 2b       	or	r20, r22
    106a:	58 2f       	mov	r21, r24
    106c:	5d 29       	or	r21, r13
    106e:	b7 01       	movw	r22, r14
    1070:	ca 01       	movw	r24, r20
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	08 95       	ret

0000107e <__unpack_f>:
    107e:	fc 01       	movw	r30, r24
    1080:	db 01       	movw	r26, r22
    1082:	40 81       	ld	r20, Z
    1084:	51 81       	ldd	r21, Z+1	; 0x01
    1086:	22 81       	ldd	r18, Z+2	; 0x02
    1088:	62 2f       	mov	r22, r18
    108a:	6f 77       	andi	r22, 0x7F	; 127
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	22 1f       	adc	r18, r18
    1090:	22 27       	eor	r18, r18
    1092:	22 1f       	adc	r18, r18
    1094:	93 81       	ldd	r25, Z+3	; 0x03
    1096:	89 2f       	mov	r24, r25
    1098:	88 0f       	add	r24, r24
    109a:	82 2b       	or	r24, r18
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	99 1f       	adc	r25, r25
    10a2:	99 27       	eor	r25, r25
    10a4:	99 1f       	adc	r25, r25
    10a6:	11 96       	adiw	r26, 0x01	; 1
    10a8:	9c 93       	st	X, r25
    10aa:	11 97       	sbiw	r26, 0x01	; 1
    10ac:	21 15       	cp	r18, r1
    10ae:	31 05       	cpc	r19, r1
    10b0:	a9 f5       	brne	.+106    	; 0x111c <__unpack_f+0x9e>
    10b2:	41 15       	cp	r20, r1
    10b4:	51 05       	cpc	r21, r1
    10b6:	61 05       	cpc	r22, r1
    10b8:	71 05       	cpc	r23, r1
    10ba:	11 f4       	brne	.+4      	; 0x10c0 <__unpack_f+0x42>
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	37 c0       	rjmp	.+110    	; 0x112e <__unpack_f+0xb0>
    10c0:	82 e8       	ldi	r24, 0x82	; 130
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    10c4:	13 96       	adiw	r26, 0x03	; 3
    10c6:	9c 93       	st	X, r25
    10c8:	8e 93       	st	-X, r24
    10ca:	12 97       	sbiw	r26, 0x02	; 2
    10cc:	9a 01       	movw	r18, r20
    10ce:	ab 01       	movw	r20, r22
    10d0:	67 e0       	ldi	r22, 0x07	; 7
    10d2:	22 0f       	add	r18, r18
    10d4:	33 1f       	adc	r19, r19
    10d6:	44 1f       	adc	r20, r20
    10d8:	55 1f       	adc	r21, r21
    10da:	6a 95       	dec	r22
    10dc:	d1 f7       	brne	.-12     	; 0x10d2 <__unpack_f+0x54>
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	8c 93       	st	X, r24
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <__unpack_f+0x80>
    10e4:	22 0f       	add	r18, r18
    10e6:	33 1f       	adc	r19, r19
    10e8:	44 1f       	adc	r20, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	12 96       	adiw	r26, 0x02	; 2
    10ee:	8d 91       	ld	r24, X+
    10f0:	9c 91       	ld	r25, X
    10f2:	13 97       	sbiw	r26, 0x03	; 3
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	13 96       	adiw	r26, 0x03	; 3
    10f8:	9c 93       	st	X, r25
    10fa:	8e 93       	st	-X, r24
    10fc:	12 97       	sbiw	r26, 0x02	; 2
    10fe:	20 30       	cpi	r18, 0x00	; 0
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	38 07       	cpc	r19, r24
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	48 07       	cpc	r20, r24
    1108:	80 e4       	ldi	r24, 0x40	; 64
    110a:	58 07       	cpc	r21, r24
    110c:	58 f3       	brcs	.-42     	; 0x10e4 <__unpack_f+0x66>
    110e:	14 96       	adiw	r26, 0x04	; 4
    1110:	2d 93       	st	X+, r18
    1112:	3d 93       	st	X+, r19
    1114:	4d 93       	st	X+, r20
    1116:	5c 93       	st	X, r21
    1118:	17 97       	sbiw	r26, 0x07	; 7
    111a:	08 95       	ret
    111c:	2f 3f       	cpi	r18, 0xFF	; 255
    111e:	31 05       	cpc	r19, r1
    1120:	79 f4       	brne	.+30     	; 0x1140 <__unpack_f+0xc2>
    1122:	41 15       	cp	r20, r1
    1124:	51 05       	cpc	r21, r1
    1126:	61 05       	cpc	r22, r1
    1128:	71 05       	cpc	r23, r1
    112a:	19 f4       	brne	.+6      	; 0x1132 <__unpack_f+0xb4>
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	8c 93       	st	X, r24
    1130:	08 95       	ret
    1132:	64 ff       	sbrs	r22, 4
    1134:	03 c0       	rjmp	.+6      	; 0x113c <__unpack_f+0xbe>
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	8c 93       	st	X, r24
    113a:	12 c0       	rjmp	.+36     	; 0x1160 <__unpack_f+0xe2>
    113c:	1c 92       	st	X, r1
    113e:	10 c0       	rjmp	.+32     	; 0x1160 <__unpack_f+0xe2>
    1140:	2f 57       	subi	r18, 0x7F	; 127
    1142:	30 40       	sbci	r19, 0x00	; 0
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	3c 93       	st	X, r19
    1148:	2e 93       	st	-X, r18
    114a:	12 97       	sbiw	r26, 0x02	; 2
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	8c 93       	st	X, r24
    1150:	87 e0       	ldi	r24, 0x07	; 7
    1152:	44 0f       	add	r20, r20
    1154:	55 1f       	adc	r21, r21
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	8a 95       	dec	r24
    115c:	d1 f7       	brne	.-12     	; 0x1152 <__unpack_f+0xd4>
    115e:	70 64       	ori	r23, 0x40	; 64
    1160:	14 96       	adiw	r26, 0x04	; 4
    1162:	4d 93       	st	X+, r20
    1164:	5d 93       	st	X+, r21
    1166:	6d 93       	st	X+, r22
    1168:	7c 93       	st	X, r23
    116a:	17 97       	sbiw	r26, 0x07	; 7
    116c:	08 95       	ret

0000116e <__fpcmp_parts_f>:
    116e:	1f 93       	push	r17
    1170:	dc 01       	movw	r26, r24
    1172:	fb 01       	movw	r30, r22
    1174:	9c 91       	ld	r25, X
    1176:	92 30       	cpi	r25, 0x02	; 2
    1178:	08 f4       	brcc	.+2      	; 0x117c <__fpcmp_parts_f+0xe>
    117a:	47 c0       	rjmp	.+142    	; 0x120a <__fpcmp_parts_f+0x9c>
    117c:	80 81       	ld	r24, Z
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	08 f4       	brcc	.+2      	; 0x1184 <__fpcmp_parts_f+0x16>
    1182:	43 c0       	rjmp	.+134    	; 0x120a <__fpcmp_parts_f+0x9c>
    1184:	94 30       	cpi	r25, 0x04	; 4
    1186:	51 f4       	brne	.+20     	; 0x119c <__fpcmp_parts_f+0x2e>
    1188:	11 96       	adiw	r26, 0x01	; 1
    118a:	1c 91       	ld	r17, X
    118c:	84 30       	cpi	r24, 0x04	; 4
    118e:	99 f5       	brne	.+102    	; 0x11f6 <__fpcmp_parts_f+0x88>
    1190:	81 81       	ldd	r24, Z+1	; 0x01
    1192:	68 2f       	mov	r22, r24
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	61 1b       	sub	r22, r17
    1198:	71 09       	sbc	r23, r1
    119a:	3f c0       	rjmp	.+126    	; 0x121a <__fpcmp_parts_f+0xac>
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	21 f0       	breq	.+8      	; 0x11a8 <__fpcmp_parts_f+0x3a>
    11a0:	92 30       	cpi	r25, 0x02	; 2
    11a2:	31 f4       	brne	.+12     	; 0x11b0 <__fpcmp_parts_f+0x42>
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	b9 f1       	breq	.+110    	; 0x1216 <__fpcmp_parts_f+0xa8>
    11a8:	81 81       	ldd	r24, Z+1	; 0x01
    11aa:	88 23       	and	r24, r24
    11ac:	89 f1       	breq	.+98     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11ae:	2d c0       	rjmp	.+90     	; 0x120a <__fpcmp_parts_f+0x9c>
    11b0:	11 96       	adiw	r26, 0x01	; 1
    11b2:	1c 91       	ld	r17, X
    11b4:	11 97       	sbiw	r26, 0x01	; 1
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	f1 f0       	breq	.+60     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11ba:	81 81       	ldd	r24, Z+1	; 0x01
    11bc:	18 17       	cp	r17, r24
    11be:	d9 f4       	brne	.+54     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11c0:	12 96       	adiw	r26, 0x02	; 2
    11c2:	2d 91       	ld	r18, X+
    11c4:	3c 91       	ld	r19, X
    11c6:	13 97       	sbiw	r26, 0x03	; 3
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	93 81       	ldd	r25, Z+3	; 0x03
    11cc:	82 17       	cp	r24, r18
    11ce:	93 07       	cpc	r25, r19
    11d0:	94 f0       	brlt	.+36     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11d2:	28 17       	cp	r18, r24
    11d4:	39 07       	cpc	r19, r25
    11d6:	bc f0       	brlt	.+46     	; 0x1206 <__fpcmp_parts_f+0x98>
    11d8:	14 96       	adiw	r26, 0x04	; 4
    11da:	8d 91       	ld	r24, X+
    11dc:	9d 91       	ld	r25, X+
    11de:	0d 90       	ld	r0, X+
    11e0:	bc 91       	ld	r27, X
    11e2:	a0 2d       	mov	r26, r0
    11e4:	24 81       	ldd	r18, Z+4	; 0x04
    11e6:	35 81       	ldd	r19, Z+5	; 0x05
    11e8:	46 81       	ldd	r20, Z+6	; 0x06
    11ea:	57 81       	ldd	r21, Z+7	; 0x07
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	4a 07       	cpc	r20, r26
    11f2:	5b 07       	cpc	r21, r27
    11f4:	18 f4       	brcc	.+6      	; 0x11fc <__fpcmp_parts_f+0x8e>
    11f6:	11 23       	and	r17, r17
    11f8:	41 f0       	breq	.+16     	; 0x120a <__fpcmp_parts_f+0x9c>
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11fc:	82 17       	cp	r24, r18
    11fe:	93 07       	cpc	r25, r19
    1200:	a4 07       	cpc	r26, r20
    1202:	b5 07       	cpc	r27, r21
    1204:	40 f4       	brcc	.+16     	; 0x1216 <__fpcmp_parts_f+0xa8>
    1206:	11 23       	and	r17, r17
    1208:	19 f0       	breq	.+6      	; 0x1210 <__fpcmp_parts_f+0xa2>
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	05 c0       	rjmp	.+10     	; 0x121a <__fpcmp_parts_f+0xac>
    1210:	6f ef       	ldi	r22, 0xFF	; 255
    1212:	7f ef       	ldi	r23, 0xFF	; 255
    1214:	02 c0       	rjmp	.+4      	; 0x121a <__fpcmp_parts_f+0xac>
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	cb 01       	movw	r24, r22
    121c:	1f 91       	pop	r17
    121e:	08 95       	ret

00001220 <CLCD_vInit>:
 *                                              *-------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vInit(void)
{
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	c6 54       	subi	r28, 0x46	; 70
    122e:	d0 40       	sbci	r29, 0x00	; 0
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	fe 01       	movw	r30, r28
    123c:	ed 5b       	subi	r30, 0xBD	; 189
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	a8 e4       	ldi	r26, 0x48	; 72
    1246:	b2 e4       	ldi	r27, 0x42	; 66
    1248:	80 83       	st	Z, r24
    124a:	91 83       	std	Z+1, r25	; 0x01
    124c:	a2 83       	std	Z+2, r26	; 0x02
    124e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1250:	8e 01       	movw	r16, r28
    1252:	01 5c       	subi	r16, 0xC1	; 193
    1254:	1f 4f       	sbci	r17, 0xFF	; 255
    1256:	fe 01       	movw	r30, r28
    1258:	ed 5b       	subi	r30, 0xBD	; 189
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	60 81       	ld	r22, Z
    125e:	71 81       	ldd	r23, Z+1	; 0x01
    1260:	82 81       	ldd	r24, Z+2	; 0x02
    1262:	93 81       	ldd	r25, Z+3	; 0x03
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	4a ef       	ldi	r20, 0xFA	; 250
    126a:	54 e4       	ldi	r21, 0x44	; 68
    126c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	f8 01       	movw	r30, r16
    1276:	80 83       	st	Z, r24
    1278:	91 83       	std	Z+1, r25	; 0x01
    127a:	a2 83       	std	Z+2, r26	; 0x02
    127c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    127e:	fe 01       	movw	r30, r28
    1280:	ff 96       	adiw	r30, 0x3f	; 63
    1282:	60 81       	ld	r22, Z
    1284:	71 81       	ldd	r23, Z+1	; 0x01
    1286:	82 81       	ldd	r24, Z+2	; 0x02
    1288:	93 81       	ldd	r25, Z+3	; 0x03
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e8       	ldi	r20, 0x80	; 128
    1290:	5f e3       	ldi	r21, 0x3F	; 63
    1292:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1296:	88 23       	and	r24, r24
    1298:	2c f4       	brge	.+10     	; 0x12a4 <CLCD_vInit+0x84>
		__ticks = 1;
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	9e af       	std	Y+62, r25	; 0x3e
    12a0:	8d af       	std	Y+61, r24	; 0x3d
    12a2:	46 c0       	rjmp	.+140    	; 0x1330 <CLCD_vInit+0x110>
	else if (__tmp > 65535)
    12a4:	fe 01       	movw	r30, r28
    12a6:	ff 96       	adiw	r30, 0x3f	; 63
    12a8:	60 81       	ld	r22, Z
    12aa:	71 81       	ldd	r23, Z+1	; 0x01
    12ac:	82 81       	ldd	r24, Z+2	; 0x02
    12ae:	93 81       	ldd	r25, Z+3	; 0x03
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	3f ef       	ldi	r19, 0xFF	; 255
    12b4:	4f e7       	ldi	r20, 0x7F	; 127
    12b6:	57 e4       	ldi	r21, 0x47	; 71
    12b8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    12bc:	18 16       	cp	r1, r24
    12be:	64 f5       	brge	.+88     	; 0x1318 <CLCD_vInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c0:	fe 01       	movw	r30, r28
    12c2:	ed 5b       	subi	r30, 0xBD	; 189
    12c4:	ff 4f       	sbci	r31, 0xFF	; 255
    12c6:	60 81       	ld	r22, Z
    12c8:	71 81       	ldd	r23, Z+1	; 0x01
    12ca:	82 81       	ldd	r24, Z+2	; 0x02
    12cc:	93 81       	ldd	r25, Z+3	; 0x03
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e2       	ldi	r20, 0x20	; 32
    12d4:	51 e4       	ldi	r21, 0x41	; 65
    12d6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	9e af       	std	Y+62, r25	; 0x3e
    12ec:	8d af       	std	Y+61, r24	; 0x3d
    12ee:	0f c0       	rjmp	.+30     	; 0x130e <CLCD_vInit+0xee>
    12f0:	88 ec       	ldi	r24, 0xC8	; 200
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9c af       	std	Y+60, r25	; 0x3c
    12f6:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12f8:	8b ad       	ldd	r24, Y+59	; 0x3b
    12fa:	9c ad       	ldd	r25, Y+60	; 0x3c
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <CLCD_vInit+0xdc>
    1300:	9c af       	std	Y+60, r25	; 0x3c
    1302:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1304:	8d ad       	ldd	r24, Y+61	; 0x3d
    1306:	9e ad       	ldd	r25, Y+62	; 0x3e
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	9e af       	std	Y+62, r25	; 0x3e
    130c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1310:	9e ad       	ldd	r25, Y+62	; 0x3e
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	69 f7       	brne	.-38     	; 0x12f0 <CLCD_vInit+0xd0>
    1316:	16 c0       	rjmp	.+44     	; 0x1344 <CLCD_vInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1318:	fe 01       	movw	r30, r28
    131a:	ff 96       	adiw	r30, 0x3f	; 63
    131c:	60 81       	ld	r22, Z
    131e:	71 81       	ldd	r23, Z+1	; 0x01
    1320:	82 81       	ldd	r24, Z+2	; 0x02
    1322:	93 81       	ldd	r25, Z+3	; 0x03
    1324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	9e af       	std	Y+62, r25	; 0x3e
    132e:	8d af       	std	Y+61, r24	; 0x3d
    1330:	8d ad       	ldd	r24, Y+61	; 0x3d
    1332:	9e ad       	ldd	r25, Y+62	; 0x3e
    1334:	9a af       	std	Y+58, r25	; 0x3a
    1336:	89 af       	std	Y+57, r24	; 0x39
    1338:	89 ad       	ldd	r24, Y+57	; 0x39
    133a:	9a ad       	ldd	r25, Y+58	; 0x3a
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	f1 f7       	brne	.-4      	; 0x133c <CLCD_vInit+0x11c>
    1340:	9a af       	std	Y+58, r25	; 0x3a
    1342:	89 af       	std	Y+57, r24	; 0x39
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN6, DIO_PIN_OUTPUT);
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN7, DIO_PIN_OUTPUT);

#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE

  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN0, DIO_PIN_OUTPUT);
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	60 e0       	ldi	r22, 0x00	; 0
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN1, DIO_PIN_OUTPUT);
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	61 e0       	ldi	r22, 0x01	; 1
    1352:	41 e0       	ldi	r20, 0x01	; 1
    1354:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN2, DIO_PIN_OUTPUT);
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	62 e0       	ldi	r22, 0x02	; 2
    135c:	41 e0       	ldi	r20, 0x01	; 1
    135e:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN3, DIO_PIN_OUTPUT);
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	63 e0       	ldi	r22, 0x03	; 3
    1366:	41 e0       	ldi	r20, 0x01	; 1
    1368:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <DIO_enumSetPinDir>

#error "Wrong CLCD_DATA_NIBBLE Config"

#endif

  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_OUTPUT);
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	66 e0       	ldi	r22, 0x06	; 6
    1370:	41 e0       	ldi	r20, 0x01	; 1
    1372:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_OUTPUT);
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	65 e0       	ldi	r22, 0x05	; 5
    137a:	41 e0       	ldi	r20, 0x01	; 1
    137c:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_OUTPUT);
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	64 e0       	ldi	r22, 0x04	; 4
    1384:	41 e0       	ldi	r20, 0x01	; 1
    1386:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <DIO_enumSetPinDir>

  CLCD_vSendCommand(CLCD_HOME);
    138a:	82 e0       	ldi	r24, 0x02	; 2
    138c:	0e 94 cb 0b 	call	0x1796	; 0x1796 <CLCD_vSendCommand>
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	a0 e2       	ldi	r26, 0x20	; 32
    1396:	b1 e4       	ldi	r27, 0x41	; 65
    1398:	8d ab       	std	Y+53, r24	; 0x35
    139a:	9e ab       	std	Y+54, r25	; 0x36
    139c:	af ab       	std	Y+55, r26	; 0x37
    139e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a0:	6d a9       	ldd	r22, Y+53	; 0x35
    13a2:	7e a9       	ldd	r23, Y+54	; 0x36
    13a4:	8f a9       	ldd	r24, Y+55	; 0x37
    13a6:	98 ad       	ldd	r25, Y+56	; 0x38
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	4a ef       	ldi	r20, 0xFA	; 250
    13ae:	54 e4       	ldi	r21, 0x44	; 68
    13b0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	89 ab       	std	Y+49, r24	; 0x31
    13ba:	9a ab       	std	Y+50, r25	; 0x32
    13bc:	ab ab       	std	Y+51, r26	; 0x33
    13be:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13c0:	69 a9       	ldd	r22, Y+49	; 0x31
    13c2:	7a a9       	ldd	r23, Y+50	; 0x32
    13c4:	8b a9       	ldd	r24, Y+51	; 0x33
    13c6:	9c a9       	ldd	r25, Y+52	; 0x34
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e8       	ldi	r20, 0x80	; 128
    13ce:	5f e3       	ldi	r21, 0x3F	; 63
    13d0:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    13d4:	88 23       	and	r24, r24
    13d6:	2c f4       	brge	.+10     	; 0x13e2 <CLCD_vInit+0x1c2>
		__ticks = 1;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	98 ab       	std	Y+48, r25	; 0x30
    13de:	8f a7       	std	Y+47, r24	; 0x2f
    13e0:	3f c0       	rjmp	.+126    	; 0x1460 <CLCD_vInit+0x240>
	else if (__tmp > 65535)
    13e2:	69 a9       	ldd	r22, Y+49	; 0x31
    13e4:	7a a9       	ldd	r23, Y+50	; 0x32
    13e6:	8b a9       	ldd	r24, Y+51	; 0x33
    13e8:	9c a9       	ldd	r25, Y+52	; 0x34
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	3f ef       	ldi	r19, 0xFF	; 255
    13ee:	4f e7       	ldi	r20, 0x7F	; 127
    13f0:	57 e4       	ldi	r21, 0x47	; 71
    13f2:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    13f6:	18 16       	cp	r1, r24
    13f8:	4c f5       	brge	.+82     	; 0x144c <CLCD_vInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fa:	6d a9       	ldd	r22, Y+53	; 0x35
    13fc:	7e a9       	ldd	r23, Y+54	; 0x36
    13fe:	8f a9       	ldd	r24, Y+55	; 0x37
    1400:	98 ad       	ldd	r25, Y+56	; 0x38
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	40 e2       	ldi	r20, 0x20	; 32
    1408:	51 e4       	ldi	r21, 0x41	; 65
    140a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	bc 01       	movw	r22, r24
    1414:	cd 01       	movw	r24, r26
    1416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	98 ab       	std	Y+48, r25	; 0x30
    1420:	8f a7       	std	Y+47, r24	; 0x2f
    1422:	0f c0       	rjmp	.+30     	; 0x1442 <CLCD_vInit+0x222>
    1424:	88 ec       	ldi	r24, 0xC8	; 200
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	9e a7       	std	Y+46, r25	; 0x2e
    142a:	8d a7       	std	Y+45, r24	; 0x2d
    142c:	8d a5       	ldd	r24, Y+45	; 0x2d
    142e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	f1 f7       	brne	.-4      	; 0x1430 <CLCD_vInit+0x210>
    1434:	9e a7       	std	Y+46, r25	; 0x2e
    1436:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1438:	8f a5       	ldd	r24, Y+47	; 0x2f
    143a:	98 a9       	ldd	r25, Y+48	; 0x30
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	98 ab       	std	Y+48, r25	; 0x30
    1440:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1442:	8f a5       	ldd	r24, Y+47	; 0x2f
    1444:	98 a9       	ldd	r25, Y+48	; 0x30
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	69 f7       	brne	.-38     	; 0x1424 <CLCD_vInit+0x204>
    144a:	14 c0       	rjmp	.+40     	; 0x1474 <CLCD_vInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    144c:	69 a9       	ldd	r22, Y+49	; 0x31
    144e:	7a a9       	ldd	r23, Y+50	; 0x32
    1450:	8b a9       	ldd	r24, Y+51	; 0x33
    1452:	9c a9       	ldd	r25, Y+52	; 0x34
    1454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	98 ab       	std	Y+48, r25	; 0x30
    145e:	8f a7       	std	Y+47, r24	; 0x2f
    1460:	8f a5       	ldd	r24, Y+47	; 0x2f
    1462:	98 a9       	ldd	r25, Y+48	; 0x30
    1464:	9c a7       	std	Y+44, r25	; 0x2c
    1466:	8b a7       	std	Y+43, r24	; 0x2b
    1468:	8b a5       	ldd	r24, Y+43	; 0x2b
    146a:	9c a5       	ldd	r25, Y+44	; 0x2c
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	f1 f7       	brne	.-4      	; 0x146c <CLCD_vInit+0x24c>
    1470:	9c a7       	std	Y+44, r25	; 0x2c
    1472:	8b a7       	std	Y+43, r24	; 0x2b
  _delay_ms(10);

  CLCD_vSendCommand(FOUR_BITS);
    1474:	88 e2       	ldi	r24, 0x28	; 40
    1476:	0e 94 cb 0b 	call	0x1796	; 0x1796 <CLCD_vSendCommand>
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	a0 e8       	ldi	r26, 0x80	; 128
    1480:	bf e3       	ldi	r27, 0x3F	; 63
    1482:	8f a3       	std	Y+39, r24	; 0x27
    1484:	98 a7       	std	Y+40, r25	; 0x28
    1486:	a9 a7       	std	Y+41, r26	; 0x29
    1488:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    148a:	6f a1       	ldd	r22, Y+39	; 0x27
    148c:	78 a5       	ldd	r23, Y+40	; 0x28
    148e:	89 a5       	ldd	r24, Y+41	; 0x29
    1490:	9a a5       	ldd	r25, Y+42	; 0x2a
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	4a ef       	ldi	r20, 0xFA	; 250
    1498:	54 e4       	ldi	r21, 0x44	; 68
    149a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	8b a3       	std	Y+35, r24	; 0x23
    14a4:	9c a3       	std	Y+36, r25	; 0x24
    14a6:	ad a3       	std	Y+37, r26	; 0x25
    14a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14aa:	6b a1       	ldd	r22, Y+35	; 0x23
    14ac:	7c a1       	ldd	r23, Y+36	; 0x24
    14ae:	8d a1       	ldd	r24, Y+37	; 0x25
    14b0:	9e a1       	ldd	r25, Y+38	; 0x26
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	40 e8       	ldi	r20, 0x80	; 128
    14b8:	5f e3       	ldi	r21, 0x3F	; 63
    14ba:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    14be:	88 23       	and	r24, r24
    14c0:	2c f4       	brge	.+10     	; 0x14cc <CLCD_vInit+0x2ac>
		__ticks = 1;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	9a a3       	std	Y+34, r25	; 0x22
    14c8:	89 a3       	std	Y+33, r24	; 0x21
    14ca:	3f c0       	rjmp	.+126    	; 0x154a <CLCD_vInit+0x32a>
	else if (__tmp > 65535)
    14cc:	6b a1       	ldd	r22, Y+35	; 0x23
    14ce:	7c a1       	ldd	r23, Y+36	; 0x24
    14d0:	8d a1       	ldd	r24, Y+37	; 0x25
    14d2:	9e a1       	ldd	r25, Y+38	; 0x26
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	3f ef       	ldi	r19, 0xFF	; 255
    14d8:	4f e7       	ldi	r20, 0x7F	; 127
    14da:	57 e4       	ldi	r21, 0x47	; 71
    14dc:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    14e0:	18 16       	cp	r1, r24
    14e2:	4c f5       	brge	.+82     	; 0x1536 <CLCD_vInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e4:	6f a1       	ldd	r22, Y+39	; 0x27
    14e6:	78 a5       	ldd	r23, Y+40	; 0x28
    14e8:	89 a5       	ldd	r24, Y+41	; 0x29
    14ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	40 e2       	ldi	r20, 0x20	; 32
    14f2:	51 e4       	ldi	r21, 0x41	; 65
    14f4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	bc 01       	movw	r22, r24
    14fe:	cd 01       	movw	r24, r26
    1500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	9a a3       	std	Y+34, r25	; 0x22
    150a:	89 a3       	std	Y+33, r24	; 0x21
    150c:	0f c0       	rjmp	.+30     	; 0x152c <CLCD_vInit+0x30c>
    150e:	88 ec       	ldi	r24, 0xC8	; 200
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	98 a3       	std	Y+32, r25	; 0x20
    1514:	8f 8f       	std	Y+31, r24	; 0x1f
    1516:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1518:	98 a1       	ldd	r25, Y+32	; 0x20
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	f1 f7       	brne	.-4      	; 0x151a <CLCD_vInit+0x2fa>
    151e:	98 a3       	std	Y+32, r25	; 0x20
    1520:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1522:	89 a1       	ldd	r24, Y+33	; 0x21
    1524:	9a a1       	ldd	r25, Y+34	; 0x22
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	9a a3       	std	Y+34, r25	; 0x22
    152a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152c:	89 a1       	ldd	r24, Y+33	; 0x21
    152e:	9a a1       	ldd	r25, Y+34	; 0x22
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	69 f7       	brne	.-38     	; 0x150e <CLCD_vInit+0x2ee>
    1534:	14 c0       	rjmp	.+40     	; 0x155e <CLCD_vInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1536:	6b a1       	ldd	r22, Y+35	; 0x23
    1538:	7c a1       	ldd	r23, Y+36	; 0x24
    153a:	8d a1       	ldd	r24, Y+37	; 0x25
    153c:	9e a1       	ldd	r25, Y+38	; 0x26
    153e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	9a a3       	std	Y+34, r25	; 0x22
    1548:	89 a3       	std	Y+33, r24	; 0x21
    154a:	89 a1       	ldd	r24, Y+33	; 0x21
    154c:	9a a1       	ldd	r25, Y+34	; 0x22
    154e:	9e 8f       	std	Y+30, r25	; 0x1e
    1550:	8d 8f       	std	Y+29, r24	; 0x1d
    1552:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1554:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	f1 f7       	brne	.-4      	; 0x1556 <CLCD_vInit+0x336>
    155a:	9e 8f       	std	Y+30, r25	; 0x1e
    155c:	8d 8f       	std	Y+29, r24	; 0x1d
  _delay_ms(1);

  CLCD_vSendCommand(CLCD_DISPLAY_CURSOR);
    155e:	8e e0       	ldi	r24, 0x0E	; 14
    1560:	0e 94 cb 0b 	call	0x1796	; 0x1796 <CLCD_vSendCommand>
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	a0 e8       	ldi	r26, 0x80	; 128
    156a:	bf e3       	ldi	r27, 0x3F	; 63
    156c:	89 8f       	std	Y+25, r24	; 0x19
    156e:	9a 8f       	std	Y+26, r25	; 0x1a
    1570:	ab 8f       	std	Y+27, r26	; 0x1b
    1572:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1574:	69 8d       	ldd	r22, Y+25	; 0x19
    1576:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1578:	8b 8d       	ldd	r24, Y+27	; 0x1b
    157a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	4a ef       	ldi	r20, 0xFA	; 250
    1582:	54 e4       	ldi	r21, 0x44	; 68
    1584:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	8d 8b       	std	Y+21, r24	; 0x15
    158e:	9e 8b       	std	Y+22, r25	; 0x16
    1590:	af 8b       	std	Y+23, r26	; 0x17
    1592:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1594:	6d 89       	ldd	r22, Y+21	; 0x15
    1596:	7e 89       	ldd	r23, Y+22	; 0x16
    1598:	8f 89       	ldd	r24, Y+23	; 0x17
    159a:	98 8d       	ldd	r25, Y+24	; 0x18
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	40 e8       	ldi	r20, 0x80	; 128
    15a2:	5f e3       	ldi	r21, 0x3F	; 63
    15a4:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    15a8:	88 23       	and	r24, r24
    15aa:	2c f4       	brge	.+10     	; 0x15b6 <CLCD_vInit+0x396>
		__ticks = 1;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	9c 8b       	std	Y+20, r25	; 0x14
    15b2:	8b 8b       	std	Y+19, r24	; 0x13
    15b4:	3f c0       	rjmp	.+126    	; 0x1634 <CLCD_vInit+0x414>
	else if (__tmp > 65535)
    15b6:	6d 89       	ldd	r22, Y+21	; 0x15
    15b8:	7e 89       	ldd	r23, Y+22	; 0x16
    15ba:	8f 89       	ldd	r24, Y+23	; 0x17
    15bc:	98 8d       	ldd	r25, Y+24	; 0x18
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	3f ef       	ldi	r19, 0xFF	; 255
    15c2:	4f e7       	ldi	r20, 0x7F	; 127
    15c4:	57 e4       	ldi	r21, 0x47	; 71
    15c6:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    15ca:	18 16       	cp	r1, r24
    15cc:	4c f5       	brge	.+82     	; 0x1620 <CLCD_vInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ce:	69 8d       	ldd	r22, Y+25	; 0x19
    15d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e2       	ldi	r20, 0x20	; 32
    15dc:	51 e4       	ldi	r21, 0x41	; 65
    15de:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	bc 01       	movw	r22, r24
    15e8:	cd 01       	movw	r24, r26
    15ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	9c 8b       	std	Y+20, r25	; 0x14
    15f4:	8b 8b       	std	Y+19, r24	; 0x13
    15f6:	0f c0       	rjmp	.+30     	; 0x1616 <CLCD_vInit+0x3f6>
    15f8:	88 ec       	ldi	r24, 0xC8	; 200
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	9a 8b       	std	Y+18, r25	; 0x12
    15fe:	89 8b       	std	Y+17, r24	; 0x11
    1600:	89 89       	ldd	r24, Y+17	; 0x11
    1602:	9a 89       	ldd	r25, Y+18	; 0x12
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <CLCD_vInit+0x3e4>
    1608:	9a 8b       	std	Y+18, r25	; 0x12
    160a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160c:	8b 89       	ldd	r24, Y+19	; 0x13
    160e:	9c 89       	ldd	r25, Y+20	; 0x14
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	9c 8b       	std	Y+20, r25	; 0x14
    1614:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1616:	8b 89       	ldd	r24, Y+19	; 0x13
    1618:	9c 89       	ldd	r25, Y+20	; 0x14
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	69 f7       	brne	.-38     	; 0x15f8 <CLCD_vInit+0x3d8>
    161e:	14 c0       	rjmp	.+40     	; 0x1648 <CLCD_vInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1620:	6d 89       	ldd	r22, Y+21	; 0x15
    1622:	7e 89       	ldd	r23, Y+22	; 0x16
    1624:	8f 89       	ldd	r24, Y+23	; 0x17
    1626:	98 8d       	ldd	r25, Y+24	; 0x18
    1628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	9c 8b       	std	Y+20, r25	; 0x14
    1632:	8b 8b       	std	Y+19, r24	; 0x13
    1634:	8b 89       	ldd	r24, Y+19	; 0x13
    1636:	9c 89       	ldd	r25, Y+20	; 0x14
    1638:	98 8b       	std	Y+16, r25	; 0x10
    163a:	8f 87       	std	Y+15, r24	; 0x0f
    163c:	8f 85       	ldd	r24, Y+15	; 0x0f
    163e:	98 89       	ldd	r25, Y+16	; 0x10
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <CLCD_vInit+0x420>
    1644:	98 8b       	std	Y+16, r25	; 0x10
    1646:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);

  CLCD_vClearScreen();
    1648:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <CLCD_vClearScreen>

  CLCD_vSendCommand(CLCD_ENTRY_MODE);
    164c:	86 e0       	ldi	r24, 0x06	; 6
    164e:	0e 94 cb 0b 	call	0x1796	; 0x1796 <CLCD_vSendCommand>
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	a0 e8       	ldi	r26, 0x80	; 128
    1658:	bf e3       	ldi	r27, 0x3F	; 63
    165a:	8b 87       	std	Y+11, r24	; 0x0b
    165c:	9c 87       	std	Y+12, r25	; 0x0c
    165e:	ad 87       	std	Y+13, r26	; 0x0d
    1660:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1662:	6b 85       	ldd	r22, Y+11	; 0x0b
    1664:	7c 85       	ldd	r23, Y+12	; 0x0c
    1666:	8d 85       	ldd	r24, Y+13	; 0x0d
    1668:	9e 85       	ldd	r25, Y+14	; 0x0e
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	4a ef       	ldi	r20, 0xFA	; 250
    1670:	54 e4       	ldi	r21, 0x44	; 68
    1672:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	8f 83       	std	Y+7, r24	; 0x07
    167c:	98 87       	std	Y+8, r25	; 0x08
    167e:	a9 87       	std	Y+9, r26	; 0x09
    1680:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1682:	6f 81       	ldd	r22, Y+7	; 0x07
    1684:	78 85       	ldd	r23, Y+8	; 0x08
    1686:	89 85       	ldd	r24, Y+9	; 0x09
    1688:	9a 85       	ldd	r25, Y+10	; 0x0a
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e8       	ldi	r20, 0x80	; 128
    1690:	5f e3       	ldi	r21, 0x3F	; 63
    1692:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1696:	88 23       	and	r24, r24
    1698:	2c f4       	brge	.+10     	; 0x16a4 <CLCD_vInit+0x484>
		__ticks = 1;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	9e 83       	std	Y+6, r25	; 0x06
    16a0:	8d 83       	std	Y+5, r24	; 0x05
    16a2:	3f c0       	rjmp	.+126    	; 0x1722 <CLCD_vInit+0x502>
	else if (__tmp > 65535)
    16a4:	6f 81       	ldd	r22, Y+7	; 0x07
    16a6:	78 85       	ldd	r23, Y+8	; 0x08
    16a8:	89 85       	ldd	r24, Y+9	; 0x09
    16aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	3f ef       	ldi	r19, 0xFF	; 255
    16b0:	4f e7       	ldi	r20, 0x7F	; 127
    16b2:	57 e4       	ldi	r21, 0x47	; 71
    16b4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    16b8:	18 16       	cp	r1, r24
    16ba:	4c f5       	brge	.+82     	; 0x170e <CLCD_vInit+0x4ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16be:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e2       	ldi	r20, 0x20	; 32
    16ca:	51 e4       	ldi	r21, 0x41	; 65
    16cc:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	bc 01       	movw	r22, r24
    16d6:	cd 01       	movw	r24, r26
    16d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	9e 83       	std	Y+6, r25	; 0x06
    16e2:	8d 83       	std	Y+5, r24	; 0x05
    16e4:	0f c0       	rjmp	.+30     	; 0x1704 <CLCD_vInit+0x4e4>
    16e6:	88 ec       	ldi	r24, 0xC8	; 200
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	9c 83       	std	Y+4, r25	; 0x04
    16ec:	8b 83       	std	Y+3, r24	; 0x03
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	9c 81       	ldd	r25, Y+4	; 0x04
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	f1 f7       	brne	.-4      	; 0x16f2 <CLCD_vInit+0x4d2>
    16f6:	9c 83       	std	Y+4, r25	; 0x04
    16f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16fa:	8d 81       	ldd	r24, Y+5	; 0x05
    16fc:	9e 81       	ldd	r25, Y+6	; 0x06
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	9e 83       	std	Y+6, r25	; 0x06
    1702:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1704:	8d 81       	ldd	r24, Y+5	; 0x05
    1706:	9e 81       	ldd	r25, Y+6	; 0x06
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	69 f7       	brne	.-38     	; 0x16e6 <CLCD_vInit+0x4c6>
    170c:	14 c0       	rjmp	.+40     	; 0x1736 <CLCD_vInit+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    170e:	6f 81       	ldd	r22, Y+7	; 0x07
    1710:	78 85       	ldd	r23, Y+8	; 0x08
    1712:	89 85       	ldd	r24, Y+9	; 0x09
    1714:	9a 85       	ldd	r25, Y+10	; 0x0a
    1716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	9e 83       	std	Y+6, r25	; 0x06
    1720:	8d 83       	std	Y+5, r24	; 0x05
    1722:	8d 81       	ldd	r24, Y+5	; 0x05
    1724:	9e 81       	ldd	r25, Y+6	; 0x06
    1726:	9a 83       	std	Y+2, r25	; 0x02
    1728:	89 83       	std	Y+1, r24	; 0x01
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	9a 81       	ldd	r25, Y+2	; 0x02
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	f1 f7       	brne	.-4      	; 0x172e <CLCD_vInit+0x50e>
    1732:	9a 83       	std	Y+2, r25	; 0x02
    1734:	89 83       	std	Y+1, r24	; 0x01
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    1736:	ca 5b       	subi	r28, 0xBA	; 186
    1738:	df 4f       	sbci	r29, 0xFF	; 255
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	1f 91       	pop	r17
    174a:	0f 91       	pop	r16
    174c:	08 95       	ret

0000174e <CLCD_vSendData>:
 * Parameters :
 *		=> Copy_u8Data --> Data that you want to display (for every location )
 * return     : nothing
 */
void CLCD_vSendData(u8 Copy_u8Data)
{
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	0f 92       	push	r0
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_HIGH);
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	66 e0       	ldi	r22, 0x06	; 6
    175e:	41 e0       	ldi	r20, 0x01	; 1
    1760:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	65 e0       	ldi	r22, 0x05	; 5
    1768:	40 e0       	ldi	r20, 0x00	; 0
    176a:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <DIO_enumWritePinVal>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
  CLCD_vSendFallingEdge();

#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE

  DIO_vWriteLowNibble(CLCD_DATA_PORT, (Copy_u8Data >> 4)); // send the most 4 bits of data to low nibbles
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	98 2f       	mov	r25, r24
    1772:	92 95       	swap	r25
    1774:	9f 70       	andi	r25, 0x0F	; 15
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	69 2f       	mov	r22, r25
    177a:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
    177e:	0e 94 ef 0b 	call	0x17de	; 0x17de <CLCD_vSendFallingEdge>
  DIO_vWriteLowNibble(CLCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to low nibbles
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	69 81       	ldd	r22, Y+1	; 0x01
    1786:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
    178a:	0e 94 ef 0b 	call	0x17de	; 0x17de <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    178e:	0f 90       	pop	r0
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <CLCD_vSendCommand>:
 * Parameters :
 *		=> Copy_u8Command --> Command number
 * return     : nothing
 */
void CLCD_vSendCommand(u8 Copy_u8Command)
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	0f 92       	push	r0
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_LOW);
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	66 e0       	ldi	r22, 0x06	; 6
    17a6:	40 e0       	ldi	r20, 0x00	; 0
    17a8:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	65 e0       	ldi	r22, 0x05	; 5
    17b0:	40 e0       	ldi	r20, 0x00	; 0
    17b2:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <DIO_enumWritePinVal>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to high nibbles
  CLCD_vSendFallingEdge();

#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE

  DIO_vWriteLowNibble(CLCD_DATA_PORT, (Copy_u8Command >> 4)); // send the most 4 bits of data to low nibbles
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	98 2f       	mov	r25, r24
    17ba:	92 95       	swap	r25
    17bc:	9f 70       	andi	r25, 0x0F	; 15
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	69 2f       	mov	r22, r25
    17c2:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
    17c6:	0e 94 ef 0b 	call	0x17de	; 0x17de <CLCD_vSendFallingEdge>
  DIO_vWriteLowNibble(CLCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to low nibbles
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	69 81       	ldd	r22, Y+1	; 0x01
    17ce:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
    17d2:	0e 94 ef 0b 	call	0x17de	; 0x17de <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    17d6:	0f 90       	pop	r0
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <CLCD_vSendFallingEdge>:
 * Parameters : nothing
 * return     : nothing
 */

static void CLCD_vSendFallingEdge(void)
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	6c 97       	sbiw	r28, 0x1c	; 28
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	64 e0       	ldi	r22, 0x04	; 4
    17f6:	41 e0       	ldi	r20, 0x01	; 1
    17f8:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <DIO_enumWritePinVal>
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	a0 e8       	ldi	r26, 0x80	; 128
    1802:	bf e3       	ldi	r27, 0x3F	; 63
    1804:	89 8f       	std	Y+25, r24	; 0x19
    1806:	9a 8f       	std	Y+26, r25	; 0x1a
    1808:	ab 8f       	std	Y+27, r26	; 0x1b
    180a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    180c:	69 8d       	ldd	r22, Y+25	; 0x19
    180e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1810:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1812:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	4a ef       	ldi	r20, 0xFA	; 250
    181a:	54 e4       	ldi	r21, 0x44	; 68
    181c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	8d 8b       	std	Y+21, r24	; 0x15
    1826:	9e 8b       	std	Y+22, r25	; 0x16
    1828:	af 8b       	std	Y+23, r26	; 0x17
    182a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    182c:	6d 89       	ldd	r22, Y+21	; 0x15
    182e:	7e 89       	ldd	r23, Y+22	; 0x16
    1830:	8f 89       	ldd	r24, Y+23	; 0x17
    1832:	98 8d       	ldd	r25, Y+24	; 0x18
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e8       	ldi	r20, 0x80	; 128
    183a:	5f e3       	ldi	r21, 0x3F	; 63
    183c:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1840:	88 23       	and	r24, r24
    1842:	2c f4       	brge	.+10     	; 0x184e <CLCD_vSendFallingEdge+0x70>
		__ticks = 1;
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	9c 8b       	std	Y+20, r25	; 0x14
    184a:	8b 8b       	std	Y+19, r24	; 0x13
    184c:	3f c0       	rjmp	.+126    	; 0x18cc <CLCD_vSendFallingEdge+0xee>
	else if (__tmp > 65535)
    184e:	6d 89       	ldd	r22, Y+21	; 0x15
    1850:	7e 89       	ldd	r23, Y+22	; 0x16
    1852:	8f 89       	ldd	r24, Y+23	; 0x17
    1854:	98 8d       	ldd	r25, Y+24	; 0x18
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	3f ef       	ldi	r19, 0xFF	; 255
    185a:	4f e7       	ldi	r20, 0x7F	; 127
    185c:	57 e4       	ldi	r21, 0x47	; 71
    185e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1862:	18 16       	cp	r1, r24
    1864:	4c f5       	brge	.+82     	; 0x18b8 <CLCD_vSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1866:	69 8d       	ldd	r22, Y+25	; 0x19
    1868:	7a 8d       	ldd	r23, Y+26	; 0x1a
    186a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    186c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e2       	ldi	r20, 0x20	; 32
    1874:	51 e4       	ldi	r21, 0x41	; 65
    1876:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	bc 01       	movw	r22, r24
    1880:	cd 01       	movw	r24, r26
    1882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	9c 8b       	std	Y+20, r25	; 0x14
    188c:	8b 8b       	std	Y+19, r24	; 0x13
    188e:	0f c0       	rjmp	.+30     	; 0x18ae <CLCD_vSendFallingEdge+0xd0>
    1890:	88 ec       	ldi	r24, 0xC8	; 200
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	9a 8b       	std	Y+18, r25	; 0x12
    1896:	89 8b       	std	Y+17, r24	; 0x11
    1898:	89 89       	ldd	r24, Y+17	; 0x11
    189a:	9a 89       	ldd	r25, Y+18	; 0x12
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	f1 f7       	brne	.-4      	; 0x189c <CLCD_vSendFallingEdge+0xbe>
    18a0:	9a 8b       	std	Y+18, r25	; 0x12
    18a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a4:	8b 89       	ldd	r24, Y+19	; 0x13
    18a6:	9c 89       	ldd	r25, Y+20	; 0x14
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	9c 8b       	std	Y+20, r25	; 0x14
    18ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ae:	8b 89       	ldd	r24, Y+19	; 0x13
    18b0:	9c 89       	ldd	r25, Y+20	; 0x14
    18b2:	00 97       	sbiw	r24, 0x00	; 0
    18b4:	69 f7       	brne	.-38     	; 0x1890 <CLCD_vSendFallingEdge+0xb2>
    18b6:	14 c0       	rjmp	.+40     	; 0x18e0 <CLCD_vSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b8:	6d 89       	ldd	r22, Y+21	; 0x15
    18ba:	7e 89       	ldd	r23, Y+22	; 0x16
    18bc:	8f 89       	ldd	r24, Y+23	; 0x17
    18be:	98 8d       	ldd	r25, Y+24	; 0x18
    18c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	9c 8b       	std	Y+20, r25	; 0x14
    18ca:	8b 8b       	std	Y+19, r24	; 0x13
    18cc:	8b 89       	ldd	r24, Y+19	; 0x13
    18ce:	9c 89       	ldd	r25, Y+20	; 0x14
    18d0:	98 8b       	std	Y+16, r25	; 0x10
    18d2:	8f 87       	std	Y+15, r24	; 0x0f
    18d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    18d6:	98 89       	ldd	r25, Y+16	; 0x10
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	f1 f7       	brne	.-4      	; 0x18d8 <CLCD_vSendFallingEdge+0xfa>
    18dc:	98 8b       	std	Y+16, r25	; 0x10
    18de:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	64 e0       	ldi	r22, 0x04	; 4
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <DIO_enumWritePinVal>
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	a0 e8       	ldi	r26, 0x80	; 128
    18f0:	bf e3       	ldi	r27, 0x3F	; 63
    18f2:	8b 87       	std	Y+11, r24	; 0x0b
    18f4:	9c 87       	std	Y+12, r25	; 0x0c
    18f6:	ad 87       	std	Y+13, r26	; 0x0d
    18f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    18fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1900:	9e 85       	ldd	r25, Y+14	; 0x0e
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	4a ef       	ldi	r20, 0xFA	; 250
    1908:	54 e4       	ldi	r21, 0x44	; 68
    190a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	8f 83       	std	Y+7, r24	; 0x07
    1914:	98 87       	std	Y+8, r25	; 0x08
    1916:	a9 87       	std	Y+9, r26	; 0x09
    1918:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    191a:	6f 81       	ldd	r22, Y+7	; 0x07
    191c:	78 85       	ldd	r23, Y+8	; 0x08
    191e:	89 85       	ldd	r24, Y+9	; 0x09
    1920:	9a 85       	ldd	r25, Y+10	; 0x0a
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e8       	ldi	r20, 0x80	; 128
    1928:	5f e3       	ldi	r21, 0x3F	; 63
    192a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    192e:	88 23       	and	r24, r24
    1930:	2c f4       	brge	.+10     	; 0x193c <CLCD_vSendFallingEdge+0x15e>
		__ticks = 1;
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9e 83       	std	Y+6, r25	; 0x06
    1938:	8d 83       	std	Y+5, r24	; 0x05
    193a:	3f c0       	rjmp	.+126    	; 0x19ba <CLCD_vSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    193c:	6f 81       	ldd	r22, Y+7	; 0x07
    193e:	78 85       	ldd	r23, Y+8	; 0x08
    1940:	89 85       	ldd	r24, Y+9	; 0x09
    1942:	9a 85       	ldd	r25, Y+10	; 0x0a
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	3f ef       	ldi	r19, 0xFF	; 255
    1948:	4f e7       	ldi	r20, 0x7F	; 127
    194a:	57 e4       	ldi	r21, 0x47	; 71
    194c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1950:	18 16       	cp	r1, r24
    1952:	4c f5       	brge	.+82     	; 0x19a6 <CLCD_vSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1954:	6b 85       	ldd	r22, Y+11	; 0x0b
    1956:	7c 85       	ldd	r23, Y+12	; 0x0c
    1958:	8d 85       	ldd	r24, Y+13	; 0x0d
    195a:	9e 85       	ldd	r25, Y+14	; 0x0e
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e2       	ldi	r20, 0x20	; 32
    1962:	51 e4       	ldi	r21, 0x41	; 65
    1964:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	bc 01       	movw	r22, r24
    196e:	cd 01       	movw	r24, r26
    1970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	9e 83       	std	Y+6, r25	; 0x06
    197a:	8d 83       	std	Y+5, r24	; 0x05
    197c:	0f c0       	rjmp	.+30     	; 0x199c <CLCD_vSendFallingEdge+0x1be>
    197e:	88 ec       	ldi	r24, 0xC8	; 200
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	9c 83       	std	Y+4, r25	; 0x04
    1984:	8b 83       	std	Y+3, r24	; 0x03
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	9c 81       	ldd	r25, Y+4	; 0x04
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <CLCD_vSendFallingEdge+0x1ac>
    198e:	9c 83       	std	Y+4, r25	; 0x04
    1990:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1992:	8d 81       	ldd	r24, Y+5	; 0x05
    1994:	9e 81       	ldd	r25, Y+6	; 0x06
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	9e 83       	std	Y+6, r25	; 0x06
    199a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199c:	8d 81       	ldd	r24, Y+5	; 0x05
    199e:	9e 81       	ldd	r25, Y+6	; 0x06
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	69 f7       	brne	.-38     	; 0x197e <CLCD_vSendFallingEdge+0x1a0>
    19a4:	14 c0       	rjmp	.+40     	; 0x19ce <CLCD_vSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a6:	6f 81       	ldd	r22, Y+7	; 0x07
    19a8:	78 85       	ldd	r23, Y+8	; 0x08
    19aa:	89 85       	ldd	r24, Y+9	; 0x09
    19ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	9e 83       	std	Y+6, r25	; 0x06
    19b8:	8d 83       	std	Y+5, r24	; 0x05
    19ba:	8d 81       	ldd	r24, Y+5	; 0x05
    19bc:	9e 81       	ldd	r25, Y+6	; 0x06
    19be:	9a 83       	std	Y+2, r25	; 0x02
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	9a 81       	ldd	r25, Y+2	; 0x02
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <CLCD_vSendFallingEdge+0x1e8>
    19ca:	9a 83       	std	Y+2, r25	; 0x02
    19cc:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    19ce:	6c 96       	adiw	r28, 0x1c	; 28
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <CLCD_vClearScreen>:
 *                                    *-----------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vClearScreen(void)
{
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	2e 97       	sbiw	r28, 0x0e	; 14
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_ClEAR);
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	0e 94 cb 0b 	call	0x1796	; 0x1796 <CLCD_vSendCommand>
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	a0 e2       	ldi	r26, 0x20	; 32
    1a00:	b1 e4       	ldi	r27, 0x41	; 65
    1a02:	8b 87       	std	Y+11, r24	; 0x0b
    1a04:	9c 87       	std	Y+12, r25	; 0x0c
    1a06:	ad 87       	std	Y+13, r26	; 0x0d
    1a08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	4a ef       	ldi	r20, 0xFA	; 250
    1a18:	54 e4       	ldi	r21, 0x44	; 68
    1a1a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	8f 83       	std	Y+7, r24	; 0x07
    1a24:	98 87       	std	Y+8, r25	; 0x08
    1a26:	a9 87       	std	Y+9, r26	; 0x09
    1a28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2c:	78 85       	ldd	r23, Y+8	; 0x08
    1a2e:	89 85       	ldd	r24, Y+9	; 0x09
    1a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	40 e8       	ldi	r20, 0x80	; 128
    1a38:	5f e3       	ldi	r21, 0x3F	; 63
    1a3a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1a3e:	88 23       	and	r24, r24
    1a40:	2c f4       	brge	.+10     	; 0x1a4c <CLCD_vClearScreen+0x6c>
		__ticks = 1;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	9e 83       	std	Y+6, r25	; 0x06
    1a48:	8d 83       	std	Y+5, r24	; 0x05
    1a4a:	3f c0       	rjmp	.+126    	; 0x1aca <CLCD_vClearScreen+0xea>
	else if (__tmp > 65535)
    1a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4e:	78 85       	ldd	r23, Y+8	; 0x08
    1a50:	89 85       	ldd	r24, Y+9	; 0x09
    1a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	3f ef       	ldi	r19, 0xFF	; 255
    1a58:	4f e7       	ldi	r20, 0x7F	; 127
    1a5a:	57 e4       	ldi	r21, 0x47	; 71
    1a5c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1a60:	18 16       	cp	r1, r24
    1a62:	4c f5       	brge	.+82     	; 0x1ab6 <CLCD_vClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	40 e2       	ldi	r20, 0x20	; 32
    1a72:	51 e4       	ldi	r21, 0x41	; 65
    1a74:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	bc 01       	movw	r22, r24
    1a7e:	cd 01       	movw	r24, r26
    1a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	9e 83       	std	Y+6, r25	; 0x06
    1a8a:	8d 83       	std	Y+5, r24	; 0x05
    1a8c:	0f c0       	rjmp	.+30     	; 0x1aac <CLCD_vClearScreen+0xcc>
    1a8e:	88 ec       	ldi	r24, 0xC8	; 200
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	9c 83       	std	Y+4, r25	; 0x04
    1a94:	8b 83       	std	Y+3, r24	; 0x03
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <CLCD_vClearScreen+0xba>
    1a9e:	9c 83       	std	Y+4, r25	; 0x04
    1aa0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	9e 83       	std	Y+6, r25	; 0x06
    1aaa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aac:	8d 81       	ldd	r24, Y+5	; 0x05
    1aae:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	69 f7       	brne	.-38     	; 0x1a8e <CLCD_vClearScreen+0xae>
    1ab4:	14 c0       	rjmp	.+40     	; 0x1ade <CLCD_vClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab8:	78 85       	ldd	r23, Y+8	; 0x08
    1aba:	89 85       	ldd	r24, Y+9	; 0x09
    1abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	9e 83       	std	Y+6, r25	; 0x06
    1ac8:	8d 83       	std	Y+5, r24	; 0x05
    1aca:	8d 81       	ldd	r24, Y+5	; 0x05
    1acc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ace:	9a 83       	std	Y+2, r25	; 0x02
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <CLCD_vClearScreen+0xf6>
    1ada:	9a 83       	std	Y+2, r25	; 0x02
    1adc:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(10); // wait more than 1.53 ms
}
    1ade:	2e 96       	adiw	r28, 0x0e	; 14
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <CLCD_vSendString>:
 *		=> Copy_u8ptrString  --> Pointer to the string
 * return     : nothing
 */

void CLCD_vSendString(const u8 *Copy_u8PrtStrign)
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <CLCD_vSendString+0x6>
    1af6:	0f 92       	push	r0
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
    1afc:	9b 83       	std	Y+3, r25	; 0x03
    1afe:	8a 83       	std	Y+2, r24	; 0x02
  u8 LOC_u8Iterator = 0;
    1b00:	19 82       	std	Y+1, r1	; 0x01
    1b02:	0e c0       	rjmp	.+28     	; 0x1b20 <CLCD_vSendString+0x30>
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0e:	fc 01       	movw	r30, r24
    1b10:	e2 0f       	add	r30, r18
    1b12:	f3 1f       	adc	r31, r19
    1b14:	80 81       	ld	r24, Z
    1b16:	0e 94 a7 0b 	call	0x174e	; 0x174e <CLCD_vSendData>
    LOC_u8Iterator++;
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	8f 5f       	subi	r24, 0xFF	; 255
    1b1e:	89 83       	std	Y+1, r24	; 0x01
 */

void CLCD_vSendString(const u8 *Copy_u8PrtStrign)
{
  u8 LOC_u8Iterator = 0;
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	9b 81       	ldd	r25, Y+3	; 0x03
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	e2 0f       	add	r30, r18
    1b2e:	f3 1f       	adc	r31, r19
    1b30:	80 81       	ld	r24, Z
    1b32:	88 23       	and	r24, r24
    1b34:	39 f7       	brne	.-50     	; 0x1b04 <CLCD_vSendString+0x14>
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    LOC_u8Iterator++;
  }
}
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <CLCD_vSendIntNumber>:
 *		=> Copy_s32Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendIntNumber(s32 Copy_s32Number)
{
    1b42:	ef 92       	push	r14
    1b44:	ff 92       	push	r15
    1b46:	0f 93       	push	r16
    1b48:	1f 93       	push	r17
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	28 97       	sbiw	r28, 0x08	; 8
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	6d 83       	std	Y+5, r22	; 0x05
    1b60:	7e 83       	std	Y+6, r23	; 0x06
    1b62:	8f 83       	std	Y+7, r24	; 0x07
    1b64:	98 87       	std	Y+8, r25	; 0x08

  u32 LOC_u32Reverse = 1;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	a0 e0       	ldi	r26, 0x00	; 0
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	9a 83       	std	Y+2, r25	; 0x02
    1b72:	ab 83       	std	Y+3, r26	; 0x03
    1b74:	bc 83       	std	Y+4, r27	; 0x04

  if (Copy_s32Number == 0)
    1b76:	8d 81       	ldd	r24, Y+5	; 0x05
    1b78:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7a:	af 81       	ldd	r26, Y+7	; 0x07
    1b7c:	b8 85       	ldd	r27, Y+8	; 0x08
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	a1 05       	cpc	r26, r1
    1b82:	b1 05       	cpc	r27, r1
    1b84:	21 f4       	brne	.+8      	; 0x1b8e <CLCD_vSendIntNumber+0x4c>
  {
    CLCD_vSendData('0');
    1b86:	80 e3       	ldi	r24, 0x30	; 48
    1b88:	0e 94 a7 0b 	call	0x174e	; 0x174e <CLCD_vSendData>
    1b8c:	85 c0       	rjmp	.+266    	; 0x1c98 <CLCD_vSendIntNumber+0x156>
  }
  else
  {
    if (Copy_s32Number < 0)
    1b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b90:	9e 81       	ldd	r25, Y+6	; 0x06
    1b92:	af 81       	ldd	r26, Y+7	; 0x07
    1b94:	b8 85       	ldd	r27, Y+8	; 0x08
    1b96:	bb 23       	and	r27, r27
    1b98:	0c f0       	brlt	.+2      	; 0x1b9c <CLCD_vSendIntNumber+0x5a>
    1b9a:	49 c0       	rjmp	.+146    	; 0x1c2e <CLCD_vSendIntNumber+0xec>
    {
      CLCD_vSendData('-');
    1b9c:	8d e2       	ldi	r24, 0x2D	; 45
    1b9e:	0e 94 a7 0b 	call	0x174e	; 0x174e <CLCD_vSendData>
      Copy_s32Number = (-1 * Copy_s32Number);
    1ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba6:	af 81       	ldd	r26, Y+7	; 0x07
    1ba8:	b8 85       	ldd	r27, Y+8	; 0x08
    1baa:	b0 95       	com	r27
    1bac:	a0 95       	com	r26
    1bae:	90 95       	com	r25
    1bb0:	81 95       	neg	r24
    1bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb4:	af 4f       	sbci	r26, 0xFF	; 255
    1bb6:	bf 4f       	sbci	r27, 0xFF	; 255
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	af 83       	std	Y+7, r26	; 0x07
    1bbe:	b8 87       	std	Y+8, r27	; 0x08
    1bc0:	36 c0       	rjmp	.+108    	; 0x1c2e <CLCD_vSendIntNumber+0xec>
    }
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	ab 81       	ldd	r26, Y+3	; 0x03
    1bc8:	bc 81       	ldd	r27, Y+4	; 0x04
    1bca:	2a e0       	ldi	r18, 0x0A	; 10
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	0e 94 16 1b 	call	0x362c	; 0x362c <__mulsi3>
    1bda:	7b 01       	movw	r14, r22
    1bdc:	8c 01       	movw	r16, r24
    1bde:	8d 81       	ldd	r24, Y+5	; 0x05
    1be0:	9e 81       	ldd	r25, Y+6	; 0x06
    1be2:	af 81       	ldd	r26, Y+7	; 0x07
    1be4:	b8 85       	ldd	r27, Y+8	; 0x08
    1be6:	2a e0       	ldi	r18, 0x0A	; 10
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e0       	ldi	r20, 0x00	; 0
    1bec:	50 e0       	ldi	r21, 0x00	; 0
    1bee:	bc 01       	movw	r22, r24
    1bf0:	cd 01       	movw	r24, r26
    1bf2:	0e 94 57 1b 	call	0x36ae	; 0x36ae <__divmodsi4>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	8e 0d       	add	r24, r14
    1bfc:	9f 1d       	adc	r25, r15
    1bfe:	a0 1f       	adc	r26, r16
    1c00:	b1 1f       	adc	r27, r17
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	ab 83       	std	Y+3, r26	; 0x03
    1c08:	bc 83       	std	Y+4, r27	; 0x04
      Copy_s32Number /= 10;
    1c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0e:	af 81       	ldd	r26, Y+7	; 0x07
    1c10:	b8 85       	ldd	r27, Y+8	; 0x08
    1c12:	2a e0       	ldi	r18, 0x0A	; 10
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e0       	ldi	r20, 0x00	; 0
    1c18:	50 e0       	ldi	r21, 0x00	; 0
    1c1a:	bc 01       	movw	r22, r24
    1c1c:	cd 01       	movw	r24, r26
    1c1e:	0e 94 57 1b 	call	0x36ae	; 0x36ae <__divmodsi4>
    1c22:	da 01       	movw	r26, r20
    1c24:	c9 01       	movw	r24, r18
    1c26:	8d 83       	std	Y+5, r24	; 0x05
    1c28:	9e 83       	std	Y+6, r25	; 0x06
    1c2a:	af 83       	std	Y+7, r26	; 0x07
    1c2c:	b8 87       	std	Y+8, r27	; 0x08
    if (Copy_s32Number < 0)
    {
      CLCD_vSendData('-');
      Copy_s32Number = (-1 * Copy_s32Number);
    }
    while (Copy_s32Number != 0)
    1c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c30:	9e 81       	ldd	r25, Y+6	; 0x06
    1c32:	af 81       	ldd	r26, Y+7	; 0x07
    1c34:	b8 85       	ldd	r27, Y+8	; 0x08
    1c36:	00 97       	sbiw	r24, 0x00	; 0
    1c38:	a1 05       	cpc	r26, r1
    1c3a:	b1 05       	cpc	r27, r1
    1c3c:	11 f6       	brne	.-124    	; 0x1bc2 <CLCD_vSendIntNumber+0x80>
    1c3e:	23 c0       	rjmp	.+70     	; 0x1c86 <CLCD_vSendIntNumber+0x144>
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	9a 81       	ldd	r25, Y+2	; 0x02
    1c44:	ab 81       	ldd	r26, Y+3	; 0x03
    1c46:	bc 81       	ldd	r27, Y+4	; 0x04
    1c48:	2a e0       	ldi	r18, 0x0A	; 10
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e0       	ldi	r20, 0x00	; 0
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	bc 01       	movw	r22, r24
    1c52:	cd 01       	movw	r24, r26
    1c54:	0e 94 35 1b 	call	0x366a	; 0x366a <__udivmodsi4>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	80 5d       	subi	r24, 0xD0	; 208
    1c5e:	0e 94 a7 0b 	call	0x174e	; 0x174e <CLCD_vSendData>
      LOC_u32Reverse /= 10;
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	9a 81       	ldd	r25, Y+2	; 0x02
    1c66:	ab 81       	ldd	r26, Y+3	; 0x03
    1c68:	bc 81       	ldd	r27, Y+4	; 0x04
    1c6a:	2a e0       	ldi	r18, 0x0A	; 10
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e0       	ldi	r20, 0x00	; 0
    1c70:	50 e0       	ldi	r21, 0x00	; 0
    1c72:	bc 01       	movw	r22, r24
    1c74:	cd 01       	movw	r24, r26
    1c76:	0e 94 35 1b 	call	0x366a	; 0x366a <__udivmodsi4>
    1c7a:	da 01       	movw	r26, r20
    1c7c:	c9 01       	movw	r24, r18
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    1c80:	9a 83       	std	Y+2, r25	; 0x02
    1c82:	ab 83       	std	Y+3, r26	; 0x03
    1c84:	bc 83       	std	Y+4, r27	; 0x04
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8a:	ab 81       	ldd	r26, Y+3	; 0x03
    1c8c:	bc 81       	ldd	r27, Y+4	; 0x04
    1c8e:	81 30       	cpi	r24, 0x01	; 1
    1c90:	91 05       	cpc	r25, r1
    1c92:	a1 05       	cpc	r26, r1
    1c94:	b1 05       	cpc	r27, r1
    1c96:	a1 f6       	brne	.-88     	; 0x1c40 <CLCD_vSendIntNumber+0xfe>
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
      LOC_u32Reverse /= 10;
    }
  }
}
    1c98:	28 96       	adiw	r28, 0x08	; 8
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	f8 94       	cli
    1c9e:	de bf       	out	0x3e, r29	; 62
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	cd bf       	out	0x3d, r28	; 61
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	ff 90       	pop	r15
    1cae:	ef 90       	pop	r14
    1cb0:	08 95       	ret

00001cb2 <CLCD_vSendFloatNumber>:
 *		=> Copy_f64Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendFloatNumber(f64 Copy_f64Number)
{
    1cb2:	af 92       	push	r10
    1cb4:	bf 92       	push	r11
    1cb6:	cf 92       	push	r12
    1cb8:	df 92       	push	r13
    1cba:	ef 92       	push	r14
    1cbc:	ff 92       	push	r15
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <CLCD_vSendFloatNumber+0x16>
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <CLCD_vSendFloatNumber+0x18>
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	69 83       	std	Y+1, r22	; 0x01
    1cd0:	7a 83       	std	Y+2, r23	; 0x02
    1cd2:	8b 83       	std	Y+3, r24	; 0x03
    1cd4:	9c 83       	std	Y+4, r25	; 0x04
  CLCD_vSendIntNumber((s32)Copy_f64Number);
    1cd6:	69 81       	ldd	r22, Y+1	; 0x01
    1cd8:	7a 81       	ldd	r23, Y+2	; 0x02
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_vSendIntNumber>
  if (Copy_f64Number < 0)
    1cee:	69 81       	ldd	r22, Y+1	; 0x01
    1cf0:	7a 81       	ldd	r23, Y+2	; 0x02
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e0       	ldi	r20, 0x00	; 0
    1cfc:	50 e0       	ldi	r21, 0x00	; 0
    1cfe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1d02:	88 23       	and	r24, r24
    1d04:	4c f4       	brge	.+18     	; 0x1d18 <CLCD_vSendFloatNumber+0x66>
  {
    Copy_f64Number *= -1;
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0a:	ab 81       	ldd	r26, Y+3	; 0x03
    1d0c:	bc 81       	ldd	r27, Y+4	; 0x04
    1d0e:	b0 58       	subi	r27, 0x80	; 128
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	9a 83       	std	Y+2, r25	; 0x02
    1d14:	ab 83       	std	Y+3, r26	; 0x03
    1d16:	bc 83       	std	Y+4, r27	; 0x04
  }
  Copy_f64Number = (f64)Copy_f64Number - (s32)Copy_f64Number;
    1d18:	69 81       	ldd	r22, Y+1	; 0x01
    1d1a:	7a 81       	ldd	r23, Y+2	; 0x02
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d20:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	bc 01       	movw	r22, r24
    1d2a:	cd 01       	movw	r24, r26
    1d2c:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatsisf>
    1d30:	9b 01       	movw	r18, r22
    1d32:	ac 01       	movw	r20, r24
    1d34:	69 81       	ldd	r22, Y+1	; 0x01
    1d36:	7a 81       	ldd	r23, Y+2	; 0x02
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	9a 83       	std	Y+2, r25	; 0x02
    1d48:	ab 83       	std	Y+3, r26	; 0x03
    1d4a:	bc 83       	std	Y+4, r27	; 0x04
  Copy_f64Number *= 10000;
    1d4c:	69 81       	ldd	r22, Y+1	; 0x01
    1d4e:	7a 81       	ldd	r23, Y+2	; 0x02
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	9c 81       	ldd	r25, Y+4	; 0x04
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e4       	ldi	r19, 0x40	; 64
    1d58:	4c e1       	ldi	r20, 0x1C	; 28
    1d5a:	56 e4       	ldi	r21, 0x46	; 70
    1d5c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	9a 83       	std	Y+2, r25	; 0x02
    1d68:	ab 83       	std	Y+3, r26	; 0x03
    1d6a:	bc 83       	std	Y+4, r27	; 0x04
  if ((s64)Copy_f64Number != 0)
    1d6c:	69 81       	ldd	r22, Y+1	; 0x01
    1d6e:	7a 81       	ldd	r23, Y+2	; 0x02
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	9c 81       	ldd	r25, Y+4	; 0x04
    1d74:	0e 94 75 00 	call	0xea	; 0xea <__fixsfdi>
    1d78:	a2 2e       	mov	r10, r18
    1d7a:	b3 2e       	mov	r11, r19
    1d7c:	c4 2e       	mov	r12, r20
    1d7e:	d5 2e       	mov	r13, r21
    1d80:	e6 2e       	mov	r14, r22
    1d82:	f7 2e       	mov	r15, r23
    1d84:	08 2f       	mov	r16, r24
    1d86:	19 2f       	mov	r17, r25
    1d88:	8a 2d       	mov	r24, r10
    1d8a:	8b 29       	or	r24, r11
    1d8c:	8c 29       	or	r24, r12
    1d8e:	8d 29       	or	r24, r13
    1d90:	8e 29       	or	r24, r14
    1d92:	8f 29       	or	r24, r15
    1d94:	80 2b       	or	r24, r16
    1d96:	81 2b       	or	r24, r17
    1d98:	88 23       	and	r24, r24
    1d9a:	79 f0       	breq	.+30     	; 0x1dba <CLCD_vSendFloatNumber+0x108>
  {
    CLCD_vSendData('.');
    1d9c:	8e e2       	ldi	r24, 0x2E	; 46
    1d9e:	0e 94 a7 0b 	call	0x174e	; 0x174e <CLCD_vSendData>
    CLCD_vSendIntNumber((s32)Copy_f64Number);
    1da2:	69 81       	ldd	r22, Y+1	; 0x01
    1da4:	7a 81       	ldd	r23, Y+2	; 0x02
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	9c 81       	ldd	r25, Y+4	; 0x04
    1daa:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	bc 01       	movw	r22, r24
    1db4:	cd 01       	movw	r24, r26
    1db6:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_vSendIntNumber>
  }
}
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	1f 91       	pop	r17
    1dc8:	0f 91       	pop	r16
    1dca:	ff 90       	pop	r15
    1dcc:	ef 90       	pop	r14
    1dce:	df 90       	pop	r13
    1dd0:	cf 90       	pop	r12
    1dd2:	bf 90       	pop	r11
    1dd4:	af 90       	pop	r10
    1dd6:	08 95       	ret

00001dd8 <CLCD_vSetPosition>:
 *		MSB = 1  ===> refers that it is command to set cursor
 *		xxxxxxx  ===> refers to AC ( Address Counter 7Bits / DDRAM Locations 128Location )
 */

void CLCD_vSetPosition(u8 Copy_u8ROW, u8 Copy_u8Col)
{
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	61 97       	sbiw	r28, 0x11	; 17
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	88 8b       	std	Y+16, r24	; 0x10
    1dee:	69 8b       	std	Y+17, r22	; 0x11
  u8 LOC_u8Data;

  if ((Copy_u8ROW < CLCD_ROW_1) || (Copy_u8ROW > CLCD_ROW_2) || (Copy_u8Col < CLCD_COL_1) || (Copy_u8Col > CLCD_COL_16))
    1df0:	88 89       	ldd	r24, Y+16	; 0x10
    1df2:	88 23       	and	r24, r24
    1df4:	49 f0       	breq	.+18     	; 0x1e08 <CLCD_vSetPosition+0x30>
    1df6:	88 89       	ldd	r24, Y+16	; 0x10
    1df8:	83 30       	cpi	r24, 0x03	; 3
    1dfa:	30 f4       	brcc	.+12     	; 0x1e08 <CLCD_vSetPosition+0x30>
    1dfc:	89 89       	ldd	r24, Y+17	; 0x11
    1dfe:	88 23       	and	r24, r24
    1e00:	19 f0       	breq	.+6      	; 0x1e08 <CLCD_vSetPosition+0x30>
    1e02:	89 89       	ldd	r24, Y+17	; 0x11
    1e04:	81 31       	cpi	r24, 0x11	; 17
    1e06:	18 f0       	brcs	.+6      	; 0x1e0e <CLCD_vSetPosition+0x36>
  {
    LOC_u8Data = CLCD_SET_CURSOR;
    1e08:	80 e8       	ldi	r24, 0x80	; 128
    1e0a:	8f 87       	std	Y+15, r24	; 0x0f
    1e0c:	0d c0       	rjmp	.+26     	; 0x1e28 <CLCD_vSetPosition+0x50>
  }
  else if (Copy_u8ROW == CLCD_ROW_1)
    1e0e:	88 89       	ldd	r24, Y+16	; 0x10
    1e10:	81 30       	cpi	r24, 0x01	; 1
    1e12:	21 f4       	brne	.+8      	; 0x1e1c <CLCD_vSetPosition+0x44>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (Copy_u8Col - 1));
    1e14:	89 89       	ldd	r24, Y+17	; 0x11
    1e16:	81 58       	subi	r24, 0x81	; 129
    1e18:	8f 87       	std	Y+15, r24	; 0x0f
    1e1a:	06 c0       	rjmp	.+12     	; 0x1e28 <CLCD_vSetPosition+0x50>
  }
  else if (Copy_u8ROW == CLCD_ROW_2)
    1e1c:	88 89       	ldd	r24, Y+16	; 0x10
    1e1e:	82 30       	cpi	r24, 0x02	; 2
    1e20:	19 f4       	brne	.+6      	; 0x1e28 <CLCD_vSetPosition+0x50>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (64) + (Copy_u8Col - 1));
    1e22:	89 89       	ldd	r24, Y+17	; 0x11
    1e24:	81 54       	subi	r24, 0x41	; 65
    1e26:	8f 87       	std	Y+15, r24	; 0x0f
  }

  CLCD_vSendCommand(LOC_u8Data);
    1e28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e2a:	0e 94 cb 0b 	call	0x1796	; 0x1796 <CLCD_vSendCommand>
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	a0 e8       	ldi	r26, 0x80	; 128
    1e34:	bf e3       	ldi	r27, 0x3F	; 63
    1e36:	8b 87       	std	Y+11, r24	; 0x0b
    1e38:	9c 87       	std	Y+12, r25	; 0x0c
    1e3a:	ad 87       	std	Y+13, r26	; 0x0d
    1e3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	4a ef       	ldi	r20, 0xFA	; 250
    1e4c:	54 e4       	ldi	r21, 0x44	; 68
    1e4e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	8f 83       	std	Y+7, r24	; 0x07
    1e58:	98 87       	std	Y+8, r25	; 0x08
    1e5a:	a9 87       	std	Y+9, r26	; 0x09
    1e5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e60:	78 85       	ldd	r23, Y+8	; 0x08
    1e62:	89 85       	ldd	r24, Y+9	; 0x09
    1e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e8       	ldi	r20, 0x80	; 128
    1e6c:	5f e3       	ldi	r21, 0x3F	; 63
    1e6e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1e72:	88 23       	and	r24, r24
    1e74:	2c f4       	brge	.+10     	; 0x1e80 <CLCD_vSetPosition+0xa8>
		__ticks = 1;
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	9e 83       	std	Y+6, r25	; 0x06
    1e7c:	8d 83       	std	Y+5, r24	; 0x05
    1e7e:	3f c0       	rjmp	.+126    	; 0x1efe <CLCD_vSetPosition+0x126>
	else if (__tmp > 65535)
    1e80:	6f 81       	ldd	r22, Y+7	; 0x07
    1e82:	78 85       	ldd	r23, Y+8	; 0x08
    1e84:	89 85       	ldd	r24, Y+9	; 0x09
    1e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	3f ef       	ldi	r19, 0xFF	; 255
    1e8c:	4f e7       	ldi	r20, 0x7F	; 127
    1e8e:	57 e4       	ldi	r21, 0x47	; 71
    1e90:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1e94:	18 16       	cp	r1, r24
    1e96:	4c f5       	brge	.+82     	; 0x1eea <CLCD_vSetPosition+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e2       	ldi	r20, 0x20	; 32
    1ea6:	51 e4       	ldi	r21, 0x41	; 65
    1ea8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	bc 01       	movw	r22, r24
    1eb2:	cd 01       	movw	r24, r26
    1eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	9e 83       	std	Y+6, r25	; 0x06
    1ebe:	8d 83       	std	Y+5, r24	; 0x05
    1ec0:	0f c0       	rjmp	.+30     	; 0x1ee0 <CLCD_vSetPosition+0x108>
    1ec2:	88 ec       	ldi	r24, 0xC8	; 200
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9c 83       	std	Y+4, r25	; 0x04
    1ec8:	8b 83       	std	Y+3, r24	; 0x03
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	f1 f7       	brne	.-4      	; 0x1ece <CLCD_vSetPosition+0xf6>
    1ed2:	9c 83       	std	Y+4, r25	; 0x04
    1ed4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	9e 83       	std	Y+6, r25	; 0x06
    1ede:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	69 f7       	brne	.-38     	; 0x1ec2 <CLCD_vSetPosition+0xea>
    1ee8:	14 c0       	rjmp	.+40     	; 0x1f12 <CLCD_vSetPosition+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eea:	6f 81       	ldd	r22, Y+7	; 0x07
    1eec:	78 85       	ldd	r23, Y+8	; 0x08
    1eee:	89 85       	ldd	r24, Y+9	; 0x09
    1ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	9e 83       	std	Y+6, r25	; 0x06
    1efc:	8d 83       	std	Y+5, r24	; 0x05
    1efe:	8d 81       	ldd	r24, Y+5	; 0x05
    1f00:	9e 81       	ldd	r25, Y+6	; 0x06
    1f02:	9a 83       	std	Y+2, r25	; 0x02
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <CLCD_vSetPosition+0x132>
    1f0e:	9a 83       	std	Y+2, r25	; 0x02
    1f10:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    1f12:	61 96       	adiw	r28, 0x11	; 17
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	de bf       	out	0x3e, r29	; 62
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <CLCD_vSendExtraChar>:
 * Hint       :-
 *	    Address Counter can refer to CGRAM and DDRAM
 */

void CLCD_vSendExtraChar(u8 Copy_u8Row, u8 Copy_u8Col)
{
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	00 d0       	rcall	.+0      	; 0x1f2a <CLCD_vSendExtraChar+0x6>
    1f2a:	0f 92       	push	r0
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
    1f30:	8a 83       	std	Y+2, r24	; 0x02
    1f32:	6b 83       	std	Y+3, r22	; 0x03

  u8 LOC_u8Iterator = 0;
    1f34:	19 82       	std	Y+1, r1	; 0x01

  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM
    1f36:	80 e4       	ldi	r24, 0x40	; 64
    1f38:	0e 94 cb 0b 	call	0x1796	; 0x1796 <CLCD_vSendCommand>

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    1f3c:	19 82       	std	Y+1, r1	; 0x01
    1f3e:	0c c0       	rjmp	.+24     	; 0x1f58 <CLCD_vSendExtraChar+0x34>
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	88 2f       	mov	r24, r24
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	fc 01       	movw	r30, r24
    1f48:	e8 59       	subi	r30, 0x98	; 152
    1f4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f4c:	80 81       	ld	r24, Z
    1f4e:	0e 94 a7 0b 	call	0x174e	; 0x174e <CLCD_vSendData>
  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	8f 5f       	subi	r24, 0xFF	; 255
    1f56:	89 83       	std	Y+1, r24	; 0x01
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	80 34       	cpi	r24, 0x40	; 64
    1f5c:	88 f3       	brcs	.-30     	; 0x1f40 <CLCD_vSendExtraChar+0x1c>
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
  }

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	6b 81       	ldd	r22, Y+3	; 0x03
    1f62:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <CLCD_vSetPosition>

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    1f66:	19 82       	std	Y+1, r1	; 0x01
    1f68:	06 c0       	rjmp	.+12     	; 0x1f76 <CLCD_vSendExtraChar+0x52>
  {
    CLCD_vSendData(LOC_u8Iterator);
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	0e 94 a7 0b 	call	0x174e	; 0x174e <CLCD_vSendData>

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	8f 5f       	subi	r24, 0xFF	; 255
    1f74:	89 83       	std	Y+1, r24	; 0x01
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	88 30       	cpi	r24, 0x08	; 8
    1f7a:	b8 f3       	brcs	.-18     	; 0x1f6a <CLCD_vSendExtraChar+0x46>
  {
    CLCD_vSendData(LOC_u8Iterator);
  }
}
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	cf 91       	pop	r28
    1f84:	df 91       	pop	r29
    1f86:	08 95       	ret

00001f88 <CLCD_voidShiftDisplayRight>:
 *                                                *------------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayRight(void)
{
    1f88:	df 93       	push	r29
    1f8a:	cf 93       	push	r28
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	2e 97       	sbiw	r28, 0x0e	; 14
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_RIGHT);
    1f9c:	8c e1       	ldi	r24, 0x1C	; 28
    1f9e:	0e 94 cb 0b 	call	0x1796	; 0x1796 <CLCD_vSendCommand>
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	a0 e8       	ldi	r26, 0x80	; 128
    1fa8:	bf e3       	ldi	r27, 0x3F	; 63
    1faa:	8b 87       	std	Y+11, r24	; 0x0b
    1fac:	9c 87       	std	Y+12, r25	; 0x0c
    1fae:	ad 87       	std	Y+13, r26	; 0x0d
    1fb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	4a ef       	ldi	r20, 0xFA	; 250
    1fc0:	54 e4       	ldi	r21, 0x44	; 68
    1fc2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	8f 83       	std	Y+7, r24	; 0x07
    1fcc:	98 87       	std	Y+8, r25	; 0x08
    1fce:	a9 87       	std	Y+9, r26	; 0x09
    1fd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd4:	78 85       	ldd	r23, Y+8	; 0x08
    1fd6:	89 85       	ldd	r24, Y+9	; 0x09
    1fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	40 e8       	ldi	r20, 0x80	; 128
    1fe0:	5f e3       	ldi	r21, 0x3F	; 63
    1fe2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    1fe6:	88 23       	and	r24, r24
    1fe8:	2c f4       	brge	.+10     	; 0x1ff4 <CLCD_voidShiftDisplayRight+0x6c>
		__ticks = 1;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	9e 83       	std	Y+6, r25	; 0x06
    1ff0:	8d 83       	std	Y+5, r24	; 0x05
    1ff2:	3f c0       	rjmp	.+126    	; 0x2072 <CLCD_voidShiftDisplayRight+0xea>
	else if (__tmp > 65535)
    1ff4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff6:	78 85       	ldd	r23, Y+8	; 0x08
    1ff8:	89 85       	ldd	r24, Y+9	; 0x09
    1ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	3f ef       	ldi	r19, 0xFF	; 255
    2000:	4f e7       	ldi	r20, 0x7F	; 127
    2002:	57 e4       	ldi	r21, 0x47	; 71
    2004:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2008:	18 16       	cp	r1, r24
    200a:	4c f5       	brge	.+82     	; 0x205e <CLCD_voidShiftDisplayRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200c:	6b 85       	ldd	r22, Y+11	; 0x0b
    200e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2010:	8d 85       	ldd	r24, Y+13	; 0x0d
    2012:	9e 85       	ldd	r25, Y+14	; 0x0e
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	40 e2       	ldi	r20, 0x20	; 32
    201a:	51 e4       	ldi	r21, 0x41	; 65
    201c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	bc 01       	movw	r22, r24
    2026:	cd 01       	movw	r24, r26
    2028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	9e 83       	std	Y+6, r25	; 0x06
    2032:	8d 83       	std	Y+5, r24	; 0x05
    2034:	0f c0       	rjmp	.+30     	; 0x2054 <CLCD_voidShiftDisplayRight+0xcc>
    2036:	88 ec       	ldi	r24, 0xC8	; 200
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	9c 83       	std	Y+4, r25	; 0x04
    203c:	8b 83       	std	Y+3, r24	; 0x03
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	9c 81       	ldd	r25, Y+4	; 0x04
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	f1 f7       	brne	.-4      	; 0x2042 <CLCD_voidShiftDisplayRight+0xba>
    2046:	9c 83       	std	Y+4, r25	; 0x04
    2048:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204a:	8d 81       	ldd	r24, Y+5	; 0x05
    204c:	9e 81       	ldd	r25, Y+6	; 0x06
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	9e 83       	std	Y+6, r25	; 0x06
    2052:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2054:	8d 81       	ldd	r24, Y+5	; 0x05
    2056:	9e 81       	ldd	r25, Y+6	; 0x06
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	69 f7       	brne	.-38     	; 0x2036 <CLCD_voidShiftDisplayRight+0xae>
    205c:	14 c0       	rjmp	.+40     	; 0x2086 <CLCD_voidShiftDisplayRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205e:	6f 81       	ldd	r22, Y+7	; 0x07
    2060:	78 85       	ldd	r23, Y+8	; 0x08
    2062:	89 85       	ldd	r24, Y+9	; 0x09
    2064:	9a 85       	ldd	r25, Y+10	; 0x0a
    2066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	9e 83       	std	Y+6, r25	; 0x06
    2070:	8d 83       	std	Y+5, r24	; 0x05
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	9e 81       	ldd	r25, Y+6	; 0x06
    2076:	9a 83       	std	Y+2, r25	; 0x02
    2078:	89 83       	std	Y+1, r24	; 0x01
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	9a 81       	ldd	r25, Y+2	; 0x02
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	f1 f7       	brne	.-4      	; 0x207e <CLCD_voidShiftDisplayRight+0xf6>
    2082:	9a 83       	std	Y+2, r25	; 0x02
    2084:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    2086:	2e 96       	adiw	r28, 0x0e	; 14
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	cd bf       	out	0x3d, r28	; 61
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <CLCD_voidShiftDisplayLeft>:
 *                                                *-----------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayLeft(void)
{
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	2e 97       	sbiw	r28, 0x0e	; 14
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	de bf       	out	0x3e, r29	; 62
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_LEFT);
    20ac:	88 e1       	ldi	r24, 0x18	; 24
    20ae:	0e 94 cb 0b 	call	0x1796	; 0x1796 <CLCD_vSendCommand>
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	a0 e8       	ldi	r26, 0x80	; 128
    20b8:	bf e3       	ldi	r27, 0x3F	; 63
    20ba:	8b 87       	std	Y+11, r24	; 0x0b
    20bc:	9c 87       	std	Y+12, r25	; 0x0c
    20be:	ad 87       	std	Y+13, r26	; 0x0d
    20c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	4a ef       	ldi	r20, 0xFA	; 250
    20d0:	54 e4       	ldi	r21, 0x44	; 68
    20d2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	8f 83       	std	Y+7, r24	; 0x07
    20dc:	98 87       	std	Y+8, r25	; 0x08
    20de:	a9 87       	std	Y+9, r26	; 0x09
    20e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20e2:	6f 81       	ldd	r22, Y+7	; 0x07
    20e4:	78 85       	ldd	r23, Y+8	; 0x08
    20e6:	89 85       	ldd	r24, Y+9	; 0x09
    20e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	40 e8       	ldi	r20, 0x80	; 128
    20f0:	5f e3       	ldi	r21, 0x3F	; 63
    20f2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    20f6:	88 23       	and	r24, r24
    20f8:	2c f4       	brge	.+10     	; 0x2104 <CLCD_voidShiftDisplayLeft+0x6c>
		__ticks = 1;
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	9e 83       	std	Y+6, r25	; 0x06
    2100:	8d 83       	std	Y+5, r24	; 0x05
    2102:	3f c0       	rjmp	.+126    	; 0x2182 <CLCD_voidShiftDisplayLeft+0xea>
	else if (__tmp > 65535)
    2104:	6f 81       	ldd	r22, Y+7	; 0x07
    2106:	78 85       	ldd	r23, Y+8	; 0x08
    2108:	89 85       	ldd	r24, Y+9	; 0x09
    210a:	9a 85       	ldd	r25, Y+10	; 0x0a
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	3f ef       	ldi	r19, 0xFF	; 255
    2110:	4f e7       	ldi	r20, 0x7F	; 127
    2112:	57 e4       	ldi	r21, 0x47	; 71
    2114:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2118:	18 16       	cp	r1, r24
    211a:	4c f5       	brge	.+82     	; 0x216e <CLCD_voidShiftDisplayLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211c:	6b 85       	ldd	r22, Y+11	; 0x0b
    211e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2120:	8d 85       	ldd	r24, Y+13	; 0x0d
    2122:	9e 85       	ldd	r25, Y+14	; 0x0e
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	40 e2       	ldi	r20, 0x20	; 32
    212a:	51 e4       	ldi	r21, 0x41	; 65
    212c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	bc 01       	movw	r22, r24
    2136:	cd 01       	movw	r24, r26
    2138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	9e 83       	std	Y+6, r25	; 0x06
    2142:	8d 83       	std	Y+5, r24	; 0x05
    2144:	0f c0       	rjmp	.+30     	; 0x2164 <CLCD_voidShiftDisplayLeft+0xcc>
    2146:	88 ec       	ldi	r24, 0xC8	; 200
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	9c 83       	std	Y+4, r25	; 0x04
    214c:	8b 83       	std	Y+3, r24	; 0x03
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	9c 81       	ldd	r25, Y+4	; 0x04
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	f1 f7       	brne	.-4      	; 0x2152 <CLCD_voidShiftDisplayLeft+0xba>
    2156:	9c 83       	std	Y+4, r25	; 0x04
    2158:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215a:	8d 81       	ldd	r24, Y+5	; 0x05
    215c:	9e 81       	ldd	r25, Y+6	; 0x06
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	9e 83       	std	Y+6, r25	; 0x06
    2162:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2164:	8d 81       	ldd	r24, Y+5	; 0x05
    2166:	9e 81       	ldd	r25, Y+6	; 0x06
    2168:	00 97       	sbiw	r24, 0x00	; 0
    216a:	69 f7       	brne	.-38     	; 0x2146 <CLCD_voidShiftDisplayLeft+0xae>
    216c:	14 c0       	rjmp	.+40     	; 0x2196 <CLCD_voidShiftDisplayLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216e:	6f 81       	ldd	r22, Y+7	; 0x07
    2170:	78 85       	ldd	r23, Y+8	; 0x08
    2172:	89 85       	ldd	r24, Y+9	; 0x09
    2174:	9a 85       	ldd	r25, Y+10	; 0x0a
    2176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	9e 83       	std	Y+6, r25	; 0x06
    2180:	8d 83       	std	Y+5, r24	; 0x05
    2182:	8d 81       	ldd	r24, Y+5	; 0x05
    2184:	9e 81       	ldd	r25, Y+6	; 0x06
    2186:	9a 83       	std	Y+2, r25	; 0x02
    2188:	89 83       	std	Y+1, r24	; 0x01
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	9a 81       	ldd	r25, Y+2	; 0x02
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	f1 f7       	brne	.-4      	; 0x218e <CLCD_voidShiftDisplayLeft+0xf6>
    2192:	9a 83       	std	Y+2, r25	; 0x02
    2194:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    2196:	2e 96       	adiw	r28, 0x0e	; 14
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	cd bf       	out	0x3d, r28	; 61
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <DIO_enumSetPinDir>:
      =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */

DIO_errorStatus DIO_enumSetPinDir(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Direction)
{
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	28 97       	sbiw	r28, 0x08	; 8
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	8a 83       	std	Y+2, r24	; 0x02
    21be:	6b 83       	std	Y+3, r22	; 0x03
    21c0:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	84 30       	cpi	r24, 0x04	; 4
    21ca:	08 f0       	brcs	.+2      	; 0x21ce <DIO_enumSetPinDir+0x26>
    21cc:	f1 c0       	rjmp	.+482    	; 0x23b0 <DIO_enumSetPinDir+0x208>
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	88 30       	cpi	r24, 0x08	; 8
    21d2:	08 f0       	brcs	.+2      	; 0x21d6 <DIO_enumSetPinDir+0x2e>
    21d4:	ed c0       	rjmp	.+474    	; 0x23b0 <DIO_enumSetPinDir+0x208>
  {
    if (Copy_u8Direction == DIO_PIN_OUTPUT)
    21d6:	8c 81       	ldd	r24, Y+4	; 0x04
    21d8:	81 30       	cpi	r24, 0x01	; 1
    21da:	09 f0       	breq	.+2      	; 0x21de <DIO_enumSetPinDir+0x36>
    21dc:	6f c0       	rjmp	.+222    	; 0x22bc <DIO_enumSetPinDir+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	28 2f       	mov	r18, r24
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	38 87       	std	Y+8, r19	; 0x08
    21e6:	2f 83       	std	Y+7, r18	; 0x07
    21e8:	8f 81       	ldd	r24, Y+7	; 0x07
    21ea:	98 85       	ldd	r25, Y+8	; 0x08
    21ec:	81 30       	cpi	r24, 0x01	; 1
    21ee:	91 05       	cpc	r25, r1
    21f0:	49 f1       	breq	.+82     	; 0x2244 <DIO_enumSetPinDir+0x9c>
    21f2:	2f 81       	ldd	r18, Y+7	; 0x07
    21f4:	38 85       	ldd	r19, Y+8	; 0x08
    21f6:	22 30       	cpi	r18, 0x02	; 2
    21f8:	31 05       	cpc	r19, r1
    21fa:	2c f4       	brge	.+10     	; 0x2206 <DIO_enumSetPinDir+0x5e>
    21fc:	8f 81       	ldd	r24, Y+7	; 0x07
    21fe:	98 85       	ldd	r25, Y+8	; 0x08
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	61 f0       	breq	.+24     	; 0x221c <DIO_enumSetPinDir+0x74>
    2204:	d6 c0       	rjmp	.+428    	; 0x23b2 <DIO_enumSetPinDir+0x20a>
    2206:	2f 81       	ldd	r18, Y+7	; 0x07
    2208:	38 85       	ldd	r19, Y+8	; 0x08
    220a:	22 30       	cpi	r18, 0x02	; 2
    220c:	31 05       	cpc	r19, r1
    220e:	71 f1       	breq	.+92     	; 0x226c <DIO_enumSetPinDir+0xc4>
    2210:	8f 81       	ldd	r24, Y+7	; 0x07
    2212:	98 85       	ldd	r25, Y+8	; 0x08
    2214:	83 30       	cpi	r24, 0x03	; 3
    2216:	91 05       	cpc	r25, r1
    2218:	e9 f1       	breq	.+122    	; 0x2294 <DIO_enumSetPinDir+0xec>
    221a:	cb c0       	rjmp	.+406    	; 0x23b2 <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(DDRA, Copy_u8PIN);
    221c:	aa e3       	ldi	r26, 0x3A	; 58
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	ea e3       	ldi	r30, 0x3A	; 58
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	48 2f       	mov	r20, r24
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	02 2e       	mov	r0, r18
    2234:	02 c0       	rjmp	.+4      	; 0x223a <DIO_enumSetPinDir+0x92>
    2236:	88 0f       	add	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	0a 94       	dec	r0
    223c:	e2 f7       	brpl	.-8      	; 0x2236 <DIO_enumSetPinDir+0x8e>
    223e:	84 2b       	or	r24, r20
    2240:	8c 93       	st	X, r24
    2242:	b7 c0       	rjmp	.+366    	; 0x23b2 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(DDRB, Copy_u8PIN);
    2244:	a7 e3       	ldi	r26, 0x37	; 55
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e7 e3       	ldi	r30, 0x37	; 55
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	48 2f       	mov	r20, r24
    2250:	8b 81       	ldd	r24, Y+3	; 0x03
    2252:	28 2f       	mov	r18, r24
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	02 2e       	mov	r0, r18
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <DIO_enumSetPinDir+0xba>
    225e:	88 0f       	add	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	0a 94       	dec	r0
    2264:	e2 f7       	brpl	.-8      	; 0x225e <DIO_enumSetPinDir+0xb6>
    2266:	84 2b       	or	r24, r20
    2268:	8c 93       	st	X, r24
    226a:	a3 c0       	rjmp	.+326    	; 0x23b2 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(DDRC, Copy_u8PIN);
    226c:	a4 e3       	ldi	r26, 0x34	; 52
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	e4 e3       	ldi	r30, 0x34	; 52
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	48 2f       	mov	r20, r24
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	28 2f       	mov	r18, r24
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	02 2e       	mov	r0, r18
    2284:	02 c0       	rjmp	.+4      	; 0x228a <DIO_enumSetPinDir+0xe2>
    2286:	88 0f       	add	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	0a 94       	dec	r0
    228c:	e2 f7       	brpl	.-8      	; 0x2286 <DIO_enumSetPinDir+0xde>
    228e:	84 2b       	or	r24, r20
    2290:	8c 93       	st	X, r24
    2292:	8f c0       	rjmp	.+286    	; 0x23b2 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(DDRD, Copy_u8PIN);
    2294:	a1 e3       	ldi	r26, 0x31	; 49
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e1 e3       	ldi	r30, 0x31	; 49
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	48 2f       	mov	r20, r24
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	28 2f       	mov	r18, r24
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	02 2e       	mov	r0, r18
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <DIO_enumSetPinDir+0x10a>
    22ae:	88 0f       	add	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	0a 94       	dec	r0
    22b4:	e2 f7       	brpl	.-8      	; 0x22ae <DIO_enumSetPinDir+0x106>
    22b6:	84 2b       	or	r24, r20
    22b8:	8c 93       	st	X, r24
    22ba:	7b c0       	rjmp	.+246    	; 0x23b2 <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else if (Copy_u8Direction == DIO_PIN_INPUT)
    22bc:	8c 81       	ldd	r24, Y+4	; 0x04
    22be:	88 23       	and	r24, r24
    22c0:	09 f0       	breq	.+2      	; 0x22c4 <DIO_enumSetPinDir+0x11c>
    22c2:	74 c0       	rjmp	.+232    	; 0x23ac <DIO_enumSetPinDir+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    22c4:	8a 81       	ldd	r24, Y+2	; 0x02
    22c6:	28 2f       	mov	r18, r24
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	3e 83       	std	Y+6, r19	; 0x06
    22cc:	2d 83       	std	Y+5, r18	; 0x05
    22ce:	8d 81       	ldd	r24, Y+5	; 0x05
    22d0:	9e 81       	ldd	r25, Y+6	; 0x06
    22d2:	81 30       	cpi	r24, 0x01	; 1
    22d4:	91 05       	cpc	r25, r1
    22d6:	59 f1       	breq	.+86     	; 0x232e <DIO_enumSetPinDir+0x186>
    22d8:	2d 81       	ldd	r18, Y+5	; 0x05
    22da:	3e 81       	ldd	r19, Y+6	; 0x06
    22dc:	22 30       	cpi	r18, 0x02	; 2
    22de:	31 05       	cpc	r19, r1
    22e0:	2c f4       	brge	.+10     	; 0x22ec <DIO_enumSetPinDir+0x144>
    22e2:	8d 81       	ldd	r24, Y+5	; 0x05
    22e4:	9e 81       	ldd	r25, Y+6	; 0x06
    22e6:	00 97       	sbiw	r24, 0x00	; 0
    22e8:	69 f0       	breq	.+26     	; 0x2304 <DIO_enumSetPinDir+0x15c>
    22ea:	63 c0       	rjmp	.+198    	; 0x23b2 <DIO_enumSetPinDir+0x20a>
    22ec:	2d 81       	ldd	r18, Y+5	; 0x05
    22ee:	3e 81       	ldd	r19, Y+6	; 0x06
    22f0:	22 30       	cpi	r18, 0x02	; 2
    22f2:	31 05       	cpc	r19, r1
    22f4:	89 f1       	breq	.+98     	; 0x2358 <DIO_enumSetPinDir+0x1b0>
    22f6:	8d 81       	ldd	r24, Y+5	; 0x05
    22f8:	9e 81       	ldd	r25, Y+6	; 0x06
    22fa:	83 30       	cpi	r24, 0x03	; 3
    22fc:	91 05       	cpc	r25, r1
    22fe:	09 f4       	brne	.+2      	; 0x2302 <DIO_enumSetPinDir+0x15a>
    2300:	40 c0       	rjmp	.+128    	; 0x2382 <DIO_enumSetPinDir+0x1da>
    2302:	57 c0       	rjmp	.+174    	; 0x23b2 <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(DDRA, Copy_u8PIN);
    2304:	aa e3       	ldi	r26, 0x3A	; 58
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	ea e3       	ldi	r30, 0x3A	; 58
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	48 2f       	mov	r20, r24
    2310:	8b 81       	ldd	r24, Y+3	; 0x03
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	02 2e       	mov	r0, r18
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <DIO_enumSetPinDir+0x17a>
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	0a 94       	dec	r0
    2324:	e2 f7       	brpl	.-8      	; 0x231e <DIO_enumSetPinDir+0x176>
    2326:	80 95       	com	r24
    2328:	84 23       	and	r24, r20
    232a:	8c 93       	st	X, r24
    232c:	42 c0       	rjmp	.+132    	; 0x23b2 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(DDRB, Copy_u8PIN);
    232e:	a7 e3       	ldi	r26, 0x37	; 55
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	e7 e3       	ldi	r30, 0x37	; 55
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	48 2f       	mov	r20, r24
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	28 2f       	mov	r18, r24
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	02 2e       	mov	r0, r18
    2346:	02 c0       	rjmp	.+4      	; 0x234c <DIO_enumSetPinDir+0x1a4>
    2348:	88 0f       	add	r24, r24
    234a:	99 1f       	adc	r25, r25
    234c:	0a 94       	dec	r0
    234e:	e2 f7       	brpl	.-8      	; 0x2348 <DIO_enumSetPinDir+0x1a0>
    2350:	80 95       	com	r24
    2352:	84 23       	and	r24, r20
    2354:	8c 93       	st	X, r24
    2356:	2d c0       	rjmp	.+90     	; 0x23b2 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(DDRC, Copy_u8PIN);
    2358:	a4 e3       	ldi	r26, 0x34	; 52
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	e4 e3       	ldi	r30, 0x34	; 52
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	48 2f       	mov	r20, r24
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	02 2e       	mov	r0, r18
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <DIO_enumSetPinDir+0x1ce>
    2372:	88 0f       	add	r24, r24
    2374:	99 1f       	adc	r25, r25
    2376:	0a 94       	dec	r0
    2378:	e2 f7       	brpl	.-8      	; 0x2372 <DIO_enumSetPinDir+0x1ca>
    237a:	80 95       	com	r24
    237c:	84 23       	and	r24, r20
    237e:	8c 93       	st	X, r24
    2380:	18 c0       	rjmp	.+48     	; 0x23b2 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(DDRD, Copy_u8PIN);
    2382:	a1 e3       	ldi	r26, 0x31	; 49
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	e1 e3       	ldi	r30, 0x31	; 49
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	48 2f       	mov	r20, r24
    238e:	8b 81       	ldd	r24, Y+3	; 0x03
    2390:	28 2f       	mov	r18, r24
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	02 2e       	mov	r0, r18
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <DIO_enumSetPinDir+0x1f8>
    239c:	88 0f       	add	r24, r24
    239e:	99 1f       	adc	r25, r25
    23a0:	0a 94       	dec	r0
    23a2:	e2 f7       	brpl	.-8      	; 0x239c <DIO_enumSetPinDir+0x1f4>
    23a4:	80 95       	com	r24
    23a6:	84 23       	and	r24, r20
    23a8:	8c 93       	st	X, r24
    23aa:	03 c0       	rjmp	.+6      	; 0x23b2 <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    23ac:	19 82       	std	Y+1, r1	; 0x01
    23ae:	01 c0       	rjmp	.+2      	; 0x23b2 <DIO_enumSetPinDir+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    23b0:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23b4:	28 96       	adiw	r28, 0x08	; 8
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	cd bf       	out	0x3d, r28	; 61
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <DIO_enumWritePinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Value)
{
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
    23ce:	28 97       	sbiw	r28, 0x08	; 8
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	f8 94       	cli
    23d4:	de bf       	out	0x3e, r29	; 62
    23d6:	0f be       	out	0x3f, r0	; 63
    23d8:	cd bf       	out	0x3d, r28	; 61
    23da:	8a 83       	std	Y+2, r24	; 0x02
    23dc:	6b 83       	std	Y+3, r22	; 0x03
    23de:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    23e4:	8a 81       	ldd	r24, Y+2	; 0x02
    23e6:	84 30       	cpi	r24, 0x04	; 4
    23e8:	08 f0       	brcs	.+2      	; 0x23ec <DIO_enumWritePinVal+0x26>
    23ea:	f1 c0       	rjmp	.+482    	; 0x25ce <DIO_enumWritePinVal+0x208>
    23ec:	8b 81       	ldd	r24, Y+3	; 0x03
    23ee:	88 30       	cpi	r24, 0x08	; 8
    23f0:	08 f0       	brcs	.+2      	; 0x23f4 <DIO_enumWritePinVal+0x2e>
    23f2:	ed c0       	rjmp	.+474    	; 0x25ce <DIO_enumWritePinVal+0x208>
  {
    if (Copy_u8Value == DIO_PIN_OUTPUT)
    23f4:	8c 81       	ldd	r24, Y+4	; 0x04
    23f6:	81 30       	cpi	r24, 0x01	; 1
    23f8:	09 f0       	breq	.+2      	; 0x23fc <DIO_enumWritePinVal+0x36>
    23fa:	6f c0       	rjmp	.+222    	; 0x24da <DIO_enumWritePinVal+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	28 2f       	mov	r18, r24
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	38 87       	std	Y+8, r19	; 0x08
    2404:	2f 83       	std	Y+7, r18	; 0x07
    2406:	8f 81       	ldd	r24, Y+7	; 0x07
    2408:	98 85       	ldd	r25, Y+8	; 0x08
    240a:	81 30       	cpi	r24, 0x01	; 1
    240c:	91 05       	cpc	r25, r1
    240e:	49 f1       	breq	.+82     	; 0x2462 <DIO_enumWritePinVal+0x9c>
    2410:	2f 81       	ldd	r18, Y+7	; 0x07
    2412:	38 85       	ldd	r19, Y+8	; 0x08
    2414:	22 30       	cpi	r18, 0x02	; 2
    2416:	31 05       	cpc	r19, r1
    2418:	2c f4       	brge	.+10     	; 0x2424 <DIO_enumWritePinVal+0x5e>
    241a:	8f 81       	ldd	r24, Y+7	; 0x07
    241c:	98 85       	ldd	r25, Y+8	; 0x08
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	61 f0       	breq	.+24     	; 0x243a <DIO_enumWritePinVal+0x74>
    2422:	d6 c0       	rjmp	.+428    	; 0x25d0 <DIO_enumWritePinVal+0x20a>
    2424:	2f 81       	ldd	r18, Y+7	; 0x07
    2426:	38 85       	ldd	r19, Y+8	; 0x08
    2428:	22 30       	cpi	r18, 0x02	; 2
    242a:	31 05       	cpc	r19, r1
    242c:	71 f1       	breq	.+92     	; 0x248a <DIO_enumWritePinVal+0xc4>
    242e:	8f 81       	ldd	r24, Y+7	; 0x07
    2430:	98 85       	ldd	r25, Y+8	; 0x08
    2432:	83 30       	cpi	r24, 0x03	; 3
    2434:	91 05       	cpc	r25, r1
    2436:	e9 f1       	breq	.+122    	; 0x24b2 <DIO_enumWritePinVal+0xec>
    2438:	cb c0       	rjmp	.+406    	; 0x25d0 <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(PORTA, Copy_u8PIN);
    243a:	ab e3       	ldi	r26, 0x3B	; 59
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	eb e3       	ldi	r30, 0x3B	; 59
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	80 81       	ld	r24, Z
    2444:	48 2f       	mov	r20, r24
    2446:	8b 81       	ldd	r24, Y+3	; 0x03
    2448:	28 2f       	mov	r18, r24
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	02 2e       	mov	r0, r18
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <DIO_enumWritePinVal+0x92>
    2454:	88 0f       	add	r24, r24
    2456:	99 1f       	adc	r25, r25
    2458:	0a 94       	dec	r0
    245a:	e2 f7       	brpl	.-8      	; 0x2454 <DIO_enumWritePinVal+0x8e>
    245c:	84 2b       	or	r24, r20
    245e:	8c 93       	st	X, r24
    2460:	b7 c0       	rjmp	.+366    	; 0x25d0 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(PORTB, Copy_u8PIN);
    2462:	a8 e3       	ldi	r26, 0x38	; 56
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e8 e3       	ldi	r30, 0x38	; 56
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	48 2f       	mov	r20, r24
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	28 2f       	mov	r18, r24
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	02 2e       	mov	r0, r18
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <DIO_enumWritePinVal+0xba>
    247c:	88 0f       	add	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	0a 94       	dec	r0
    2482:	e2 f7       	brpl	.-8      	; 0x247c <DIO_enumWritePinVal+0xb6>
    2484:	84 2b       	or	r24, r20
    2486:	8c 93       	st	X, r24
    2488:	a3 c0       	rjmp	.+326    	; 0x25d0 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(PORTC, Copy_u8PIN);
    248a:	a5 e3       	ldi	r26, 0x35	; 53
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e5 e3       	ldi	r30, 0x35	; 53
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	48 2f       	mov	r20, r24
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	28 2f       	mov	r18, r24
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	02 2e       	mov	r0, r18
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <DIO_enumWritePinVal+0xe2>
    24a4:	88 0f       	add	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	0a 94       	dec	r0
    24aa:	e2 f7       	brpl	.-8      	; 0x24a4 <DIO_enumWritePinVal+0xde>
    24ac:	84 2b       	or	r24, r20
    24ae:	8c 93       	st	X, r24
    24b0:	8f c0       	rjmp	.+286    	; 0x25d0 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(PORTD, Copy_u8PIN);
    24b2:	a2 e3       	ldi	r26, 0x32	; 50
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	e2 e3       	ldi	r30, 0x32	; 50
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	48 2f       	mov	r20, r24
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	28 2f       	mov	r18, r24
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	02 2e       	mov	r0, r18
    24ca:	02 c0       	rjmp	.+4      	; 0x24d0 <DIO_enumWritePinVal+0x10a>
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	0a 94       	dec	r0
    24d2:	e2 f7       	brpl	.-8      	; 0x24cc <DIO_enumWritePinVal+0x106>
    24d4:	84 2b       	or	r24, r20
    24d6:	8c 93       	st	X, r24
    24d8:	7b c0       	rjmp	.+246    	; 0x25d0 <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else if (Copy_u8Value == DIO_PIN_INPUT)
    24da:	8c 81       	ldd	r24, Y+4	; 0x04
    24dc:	88 23       	and	r24, r24
    24de:	09 f0       	breq	.+2      	; 0x24e2 <DIO_enumWritePinVal+0x11c>
    24e0:	74 c0       	rjmp	.+232    	; 0x25ca <DIO_enumWritePinVal+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    24e2:	8a 81       	ldd	r24, Y+2	; 0x02
    24e4:	28 2f       	mov	r18, r24
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	3e 83       	std	Y+6, r19	; 0x06
    24ea:	2d 83       	std	Y+5, r18	; 0x05
    24ec:	8d 81       	ldd	r24, Y+5	; 0x05
    24ee:	9e 81       	ldd	r25, Y+6	; 0x06
    24f0:	81 30       	cpi	r24, 0x01	; 1
    24f2:	91 05       	cpc	r25, r1
    24f4:	59 f1       	breq	.+86     	; 0x254c <DIO_enumWritePinVal+0x186>
    24f6:	2d 81       	ldd	r18, Y+5	; 0x05
    24f8:	3e 81       	ldd	r19, Y+6	; 0x06
    24fa:	22 30       	cpi	r18, 0x02	; 2
    24fc:	31 05       	cpc	r19, r1
    24fe:	2c f4       	brge	.+10     	; 0x250a <DIO_enumWritePinVal+0x144>
    2500:	8d 81       	ldd	r24, Y+5	; 0x05
    2502:	9e 81       	ldd	r25, Y+6	; 0x06
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	69 f0       	breq	.+26     	; 0x2522 <DIO_enumWritePinVal+0x15c>
    2508:	63 c0       	rjmp	.+198    	; 0x25d0 <DIO_enumWritePinVal+0x20a>
    250a:	2d 81       	ldd	r18, Y+5	; 0x05
    250c:	3e 81       	ldd	r19, Y+6	; 0x06
    250e:	22 30       	cpi	r18, 0x02	; 2
    2510:	31 05       	cpc	r19, r1
    2512:	89 f1       	breq	.+98     	; 0x2576 <DIO_enumWritePinVal+0x1b0>
    2514:	8d 81       	ldd	r24, Y+5	; 0x05
    2516:	9e 81       	ldd	r25, Y+6	; 0x06
    2518:	83 30       	cpi	r24, 0x03	; 3
    251a:	91 05       	cpc	r25, r1
    251c:	09 f4       	brne	.+2      	; 0x2520 <DIO_enumWritePinVal+0x15a>
    251e:	40 c0       	rjmp	.+128    	; 0x25a0 <DIO_enumWritePinVal+0x1da>
    2520:	57 c0       	rjmp	.+174    	; 0x25d0 <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(PORTA, Copy_u8PIN);
    2522:	ab e3       	ldi	r26, 0x3B	; 59
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	eb e3       	ldi	r30, 0x3B	; 59
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	48 2f       	mov	r20, r24
    252e:	8b 81       	ldd	r24, Y+3	; 0x03
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	02 2e       	mov	r0, r18
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <DIO_enumWritePinVal+0x17a>
    253c:	88 0f       	add	r24, r24
    253e:	99 1f       	adc	r25, r25
    2540:	0a 94       	dec	r0
    2542:	e2 f7       	brpl	.-8      	; 0x253c <DIO_enumWritePinVal+0x176>
    2544:	80 95       	com	r24
    2546:	84 23       	and	r24, r20
    2548:	8c 93       	st	X, r24
    254a:	42 c0       	rjmp	.+132    	; 0x25d0 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(PORTB, Copy_u8PIN);
    254c:	a8 e3       	ldi	r26, 0x38	; 56
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	e8 e3       	ldi	r30, 0x38	; 56
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	48 2f       	mov	r20, r24
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	28 2f       	mov	r18, r24
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	02 2e       	mov	r0, r18
    2564:	02 c0       	rjmp	.+4      	; 0x256a <DIO_enumWritePinVal+0x1a4>
    2566:	88 0f       	add	r24, r24
    2568:	99 1f       	adc	r25, r25
    256a:	0a 94       	dec	r0
    256c:	e2 f7       	brpl	.-8      	; 0x2566 <DIO_enumWritePinVal+0x1a0>
    256e:	80 95       	com	r24
    2570:	84 23       	and	r24, r20
    2572:	8c 93       	st	X, r24
    2574:	2d c0       	rjmp	.+90     	; 0x25d0 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(PORTC, Copy_u8PIN);
    2576:	a5 e3       	ldi	r26, 0x35	; 53
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e5 e3       	ldi	r30, 0x35	; 53
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	48 2f       	mov	r20, r24
    2582:	8b 81       	ldd	r24, Y+3	; 0x03
    2584:	28 2f       	mov	r18, r24
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	02 2e       	mov	r0, r18
    258e:	02 c0       	rjmp	.+4      	; 0x2594 <DIO_enumWritePinVal+0x1ce>
    2590:	88 0f       	add	r24, r24
    2592:	99 1f       	adc	r25, r25
    2594:	0a 94       	dec	r0
    2596:	e2 f7       	brpl	.-8      	; 0x2590 <DIO_enumWritePinVal+0x1ca>
    2598:	80 95       	com	r24
    259a:	84 23       	and	r24, r20
    259c:	8c 93       	st	X, r24
    259e:	18 c0       	rjmp	.+48     	; 0x25d0 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(PORTD, Copy_u8PIN);
    25a0:	a2 e3       	ldi	r26, 0x32	; 50
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e2 e3       	ldi	r30, 0x32	; 50
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	48 2f       	mov	r20, r24
    25ac:	8b 81       	ldd	r24, Y+3	; 0x03
    25ae:	28 2f       	mov	r18, r24
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	02 2e       	mov	r0, r18
    25b8:	02 c0       	rjmp	.+4      	; 0x25be <DIO_enumWritePinVal+0x1f8>
    25ba:	88 0f       	add	r24, r24
    25bc:	99 1f       	adc	r25, r25
    25be:	0a 94       	dec	r0
    25c0:	e2 f7       	brpl	.-8      	; 0x25ba <DIO_enumWritePinVal+0x1f4>
    25c2:	80 95       	com	r24
    25c4:	84 23       	and	r24, r20
    25c6:	8c 93       	st	X, r24
    25c8:	03 c0       	rjmp	.+6      	; 0x25d0 <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    25ca:	19 82       	std	Y+1, r1	; 0x01
    25cc:	01 c0       	rjmp	.+2      	; 0x25d0 <DIO_enumWritePinVal+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    25ce:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    25d2:	28 96       	adiw	r28, 0x08	; 8
    25d4:	0f b6       	in	r0, 0x3f	; 63
    25d6:	f8 94       	cli
    25d8:	de bf       	out	0x3e, r29	; 62
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	cd bf       	out	0x3d, r28	; 61
    25de:	cf 91       	pop	r28
    25e0:	df 91       	pop	r29
    25e2:	08 95       	ret

000025e4 <DIO_enumReadPinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */
DIO_errorStatus DIO_enumReadPinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 *Copy_Pu8Data)
{
    25e4:	df 93       	push	r29
    25e6:	cf 93       	push	r28
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	27 97       	sbiw	r28, 0x07	; 7
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	f8 94       	cli
    25f2:	de bf       	out	0x3e, r29	; 62
    25f4:	0f be       	out	0x3f, r0	; 63
    25f6:	cd bf       	out	0x3d, r28	; 61
    25f8:	8a 83       	std	Y+2, r24	; 0x02
    25fa:	6b 83       	std	Y+3, r22	; 0x03
    25fc:	5d 83       	std	Y+5, r21	; 0x05
    25fe:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	84 30       	cpi	r24, 0x04	; 4
    2608:	08 f0       	brcs	.+2      	; 0x260c <DIO_enumReadPinVal+0x28>
    260a:	a6 c0       	rjmp	.+332    	; 0x2758 <DIO_enumReadPinVal+0x174>
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	88 30       	cpi	r24, 0x08	; 8
    2610:	08 f0       	brcs	.+2      	; 0x2614 <DIO_enumReadPinVal+0x30>
    2612:	a2 c0       	rjmp	.+324    	; 0x2758 <DIO_enumReadPinVal+0x174>
  {
    /* Check on the Required PORT Number */
    switch (Copy_u8PORT)
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	28 2f       	mov	r18, r24
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	3f 83       	std	Y+7, r19	; 0x07
    261c:	2e 83       	std	Y+6, r18	; 0x06
    261e:	4e 81       	ldd	r20, Y+6	; 0x06
    2620:	5f 81       	ldd	r21, Y+7	; 0x07
    2622:	41 30       	cpi	r20, 0x01	; 1
    2624:	51 05       	cpc	r21, r1
    2626:	c1 f1       	breq	.+112    	; 0x2698 <DIO_enumReadPinVal+0xb4>
    2628:	8e 81       	ldd	r24, Y+6	; 0x06
    262a:	9f 81       	ldd	r25, Y+7	; 0x07
    262c:	82 30       	cpi	r24, 0x02	; 2
    262e:	91 05       	cpc	r25, r1
    2630:	34 f4       	brge	.+12     	; 0x263e <DIO_enumReadPinVal+0x5a>
    2632:	2e 81       	ldd	r18, Y+6	; 0x06
    2634:	3f 81       	ldd	r19, Y+7	; 0x07
    2636:	21 15       	cp	r18, r1
    2638:	31 05       	cpc	r19, r1
    263a:	71 f0       	breq	.+28     	; 0x2658 <DIO_enumReadPinVal+0x74>
    263c:	8e c0       	rjmp	.+284    	; 0x275a <DIO_enumReadPinVal+0x176>
    263e:	4e 81       	ldd	r20, Y+6	; 0x06
    2640:	5f 81       	ldd	r21, Y+7	; 0x07
    2642:	42 30       	cpi	r20, 0x02	; 2
    2644:	51 05       	cpc	r21, r1
    2646:	09 f4       	brne	.+2      	; 0x264a <DIO_enumReadPinVal+0x66>
    2648:	47 c0       	rjmp	.+142    	; 0x26d8 <DIO_enumReadPinVal+0xf4>
    264a:	8e 81       	ldd	r24, Y+6	; 0x06
    264c:	9f 81       	ldd	r25, Y+7	; 0x07
    264e:	83 30       	cpi	r24, 0x03	; 3
    2650:	91 05       	cpc	r25, r1
    2652:	09 f4       	brne	.+2      	; 0x2656 <DIO_enumReadPinVal+0x72>
    2654:	61 c0       	rjmp	.+194    	; 0x2718 <DIO_enumReadPinVal+0x134>
    2656:	81 c0       	rjmp	.+258    	; 0x275a <DIO_enumReadPinVal+0x176>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = READ_BIT(PINA, Copy_u8PIN);
    2658:	e9 e3       	ldi	r30, 0x39	; 57
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	48 2f       	mov	r20, r24
    2660:	50 e0       	ldi	r21, 0x00	; 0
    2662:	8b 81       	ldd	r24, Y+3	; 0x03
    2664:	28 2f       	mov	r18, r24
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	02 c0       	rjmp	.+4      	; 0x2672 <DIO_enumReadPinVal+0x8e>
    266e:	88 0f       	add	r24, r24
    2670:	99 1f       	adc	r25, r25
    2672:	2a 95       	dec	r18
    2674:	e2 f7       	brpl	.-8      	; 0x266e <DIO_enumReadPinVal+0x8a>
    2676:	9a 01       	movw	r18, r20
    2678:	28 23       	and	r18, r24
    267a:	39 23       	and	r19, r25
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	88 2f       	mov	r24, r24
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	a9 01       	movw	r20, r18
    2684:	02 c0       	rjmp	.+4      	; 0x268a <DIO_enumReadPinVal+0xa6>
    2686:	55 95       	asr	r21
    2688:	47 95       	ror	r20
    268a:	8a 95       	dec	r24
    268c:	e2 f7       	brpl	.-8      	; 0x2686 <DIO_enumReadPinVal+0xa2>
    268e:	ca 01       	movw	r24, r20
    2690:	ec 81       	ldd	r30, Y+4	; 0x04
    2692:	fd 81       	ldd	r31, Y+5	; 0x05
    2694:	80 83       	st	Z, r24
    2696:	61 c0       	rjmp	.+194    	; 0x275a <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = READ_BIT(PINB, Copy_u8PIN);
    2698:	e6 e3       	ldi	r30, 0x36	; 54
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	48 2f       	mov	r20, r24
    26a0:	50 e0       	ldi	r21, 0x00	; 0
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	28 2f       	mov	r18, r24
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	02 c0       	rjmp	.+4      	; 0x26b2 <DIO_enumReadPinVal+0xce>
    26ae:	88 0f       	add	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	2a 95       	dec	r18
    26b4:	e2 f7       	brpl	.-8      	; 0x26ae <DIO_enumReadPinVal+0xca>
    26b6:	9a 01       	movw	r18, r20
    26b8:	28 23       	and	r18, r24
    26ba:	39 23       	and	r19, r25
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	88 2f       	mov	r24, r24
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	a9 01       	movw	r20, r18
    26c4:	02 c0       	rjmp	.+4      	; 0x26ca <DIO_enumReadPinVal+0xe6>
    26c6:	55 95       	asr	r21
    26c8:	47 95       	ror	r20
    26ca:	8a 95       	dec	r24
    26cc:	e2 f7       	brpl	.-8      	; 0x26c6 <DIO_enumReadPinVal+0xe2>
    26ce:	ca 01       	movw	r24, r20
    26d0:	ec 81       	ldd	r30, Y+4	; 0x04
    26d2:	fd 81       	ldd	r31, Y+5	; 0x05
    26d4:	80 83       	st	Z, r24
    26d6:	41 c0       	rjmp	.+130    	; 0x275a <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = READ_BIT(PINC, Copy_u8PIN);
    26d8:	e3 e3       	ldi	r30, 0x33	; 51
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	48 2f       	mov	r20, r24
    26e0:	50 e0       	ldi	r21, 0x00	; 0
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	28 2f       	mov	r18, r24
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	02 c0       	rjmp	.+4      	; 0x26f2 <DIO_enumReadPinVal+0x10e>
    26ee:	88 0f       	add	r24, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	2a 95       	dec	r18
    26f4:	e2 f7       	brpl	.-8      	; 0x26ee <DIO_enumReadPinVal+0x10a>
    26f6:	9a 01       	movw	r18, r20
    26f8:	28 23       	and	r18, r24
    26fa:	39 23       	and	r19, r25
    26fc:	8b 81       	ldd	r24, Y+3	; 0x03
    26fe:	88 2f       	mov	r24, r24
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	a9 01       	movw	r20, r18
    2704:	02 c0       	rjmp	.+4      	; 0x270a <DIO_enumReadPinVal+0x126>
    2706:	55 95       	asr	r21
    2708:	47 95       	ror	r20
    270a:	8a 95       	dec	r24
    270c:	e2 f7       	brpl	.-8      	; 0x2706 <DIO_enumReadPinVal+0x122>
    270e:	ca 01       	movw	r24, r20
    2710:	ec 81       	ldd	r30, Y+4	; 0x04
    2712:	fd 81       	ldd	r31, Y+5	; 0x05
    2714:	80 83       	st	Z, r24
    2716:	21 c0       	rjmp	.+66     	; 0x275a <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = READ_BIT(PIND, Copy_u8PIN);
    2718:	e0 e3       	ldi	r30, 0x30	; 48
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	48 2f       	mov	r20, r24
    2720:	50 e0       	ldi	r21, 0x00	; 0
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	28 2f       	mov	r18, r24
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	02 c0       	rjmp	.+4      	; 0x2732 <DIO_enumReadPinVal+0x14e>
    272e:	88 0f       	add	r24, r24
    2730:	99 1f       	adc	r25, r25
    2732:	2a 95       	dec	r18
    2734:	e2 f7       	brpl	.-8      	; 0x272e <DIO_enumReadPinVal+0x14a>
    2736:	9a 01       	movw	r18, r20
    2738:	28 23       	and	r18, r24
    273a:	39 23       	and	r19, r25
    273c:	8b 81       	ldd	r24, Y+3	; 0x03
    273e:	88 2f       	mov	r24, r24
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	a9 01       	movw	r20, r18
    2744:	02 c0       	rjmp	.+4      	; 0x274a <DIO_enumReadPinVal+0x166>
    2746:	55 95       	asr	r21
    2748:	47 95       	ror	r20
    274a:	8a 95       	dec	r24
    274c:	e2 f7       	brpl	.-8      	; 0x2746 <DIO_enumReadPinVal+0x162>
    274e:	ca 01       	movw	r24, r20
    2750:	ec 81       	ldd	r30, Y+4	; 0x04
    2752:	fd 81       	ldd	r31, Y+5	; 0x05
    2754:	80 83       	st	Z, r24
    2756:	01 c0       	rjmp	.+2      	; 0x275a <DIO_enumReadPinVal+0x176>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    2758:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    275a:	89 81       	ldd	r24, Y+1	; 0x01
}
    275c:	27 96       	adiw	r28, 0x07	; 7
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	de bf       	out	0x3e, r29	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	cd bf       	out	0x3d, r28	; 61
    2768:	cf 91       	pop	r28
    276a:	df 91       	pop	r29
    276c:	08 95       	ret

0000276e <DIO_enumTogglePinVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN)
{
    276e:	df 93       	push	r29
    2770:	cf 93       	push	r28
    2772:	00 d0       	rcall	.+0      	; 0x2774 <DIO_enumTogglePinVal+0x6>
    2774:	00 d0       	rcall	.+0      	; 0x2776 <DIO_enumTogglePinVal+0x8>
    2776:	0f 92       	push	r0
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
    277c:	8a 83       	std	Y+2, r24	; 0x02
    277e:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2784:	8a 81       	ldd	r24, Y+2	; 0x02
    2786:	84 30       	cpi	r24, 0x04	; 4
    2788:	08 f0       	brcs	.+2      	; 0x278c <DIO_enumTogglePinVal+0x1e>
    278a:	73 c0       	rjmp	.+230    	; 0x2872 <DIO_enumTogglePinVal+0x104>
    278c:	8b 81       	ldd	r24, Y+3	; 0x03
    278e:	88 30       	cpi	r24, 0x08	; 8
    2790:	08 f0       	brcs	.+2      	; 0x2794 <DIO_enumTogglePinVal+0x26>
    2792:	6f c0       	rjmp	.+222    	; 0x2872 <DIO_enumTogglePinVal+0x104>
  {
    switch (Copy_u8PORT)
    2794:	8a 81       	ldd	r24, Y+2	; 0x02
    2796:	28 2f       	mov	r18, r24
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	3d 83       	std	Y+5, r19	; 0x05
    279c:	2c 83       	std	Y+4, r18	; 0x04
    279e:	8c 81       	ldd	r24, Y+4	; 0x04
    27a0:	9d 81       	ldd	r25, Y+5	; 0x05
    27a2:	81 30       	cpi	r24, 0x01	; 1
    27a4:	91 05       	cpc	r25, r1
    27a6:	49 f1       	breq	.+82     	; 0x27fa <DIO_enumTogglePinVal+0x8c>
    27a8:	2c 81       	ldd	r18, Y+4	; 0x04
    27aa:	3d 81       	ldd	r19, Y+5	; 0x05
    27ac:	22 30       	cpi	r18, 0x02	; 2
    27ae:	31 05       	cpc	r19, r1
    27b0:	2c f4       	brge	.+10     	; 0x27bc <DIO_enumTogglePinVal+0x4e>
    27b2:	8c 81       	ldd	r24, Y+4	; 0x04
    27b4:	9d 81       	ldd	r25, Y+5	; 0x05
    27b6:	00 97       	sbiw	r24, 0x00	; 0
    27b8:	61 f0       	breq	.+24     	; 0x27d2 <DIO_enumTogglePinVal+0x64>
    27ba:	5c c0       	rjmp	.+184    	; 0x2874 <DIO_enumTogglePinVal+0x106>
    27bc:	2c 81       	ldd	r18, Y+4	; 0x04
    27be:	3d 81       	ldd	r19, Y+5	; 0x05
    27c0:	22 30       	cpi	r18, 0x02	; 2
    27c2:	31 05       	cpc	r19, r1
    27c4:	71 f1       	breq	.+92     	; 0x2822 <DIO_enumTogglePinVal+0xb4>
    27c6:	8c 81       	ldd	r24, Y+4	; 0x04
    27c8:	9d 81       	ldd	r25, Y+5	; 0x05
    27ca:	83 30       	cpi	r24, 0x03	; 3
    27cc:	91 05       	cpc	r25, r1
    27ce:	e9 f1       	breq	.+122    	; 0x284a <DIO_enumTogglePinVal+0xdc>
    27d0:	51 c0       	rjmp	.+162    	; 0x2874 <DIO_enumTogglePinVal+0x106>
    {
    case DIO_PORTA:
      TOG_BIT(PORTA, Copy_u8PIN);
    27d2:	ab e3       	ldi	r26, 0x3B	; 59
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	eb e3       	ldi	r30, 0x3B	; 59
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	48 2f       	mov	r20, r24
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	02 2e       	mov	r0, r18
    27ea:	02 c0       	rjmp	.+4      	; 0x27f0 <DIO_enumTogglePinVal+0x82>
    27ec:	88 0f       	add	r24, r24
    27ee:	99 1f       	adc	r25, r25
    27f0:	0a 94       	dec	r0
    27f2:	e2 f7       	brpl	.-8      	; 0x27ec <DIO_enumTogglePinVal+0x7e>
    27f4:	84 27       	eor	r24, r20
    27f6:	8c 93       	st	X, r24
    27f8:	3d c0       	rjmp	.+122    	; 0x2874 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTB:
      TOG_BIT(PORTB, Copy_u8PIN);
    27fa:	a8 e3       	ldi	r26, 0x38	; 56
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	e8 e3       	ldi	r30, 0x38	; 56
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	48 2f       	mov	r20, r24
    2806:	8b 81       	ldd	r24, Y+3	; 0x03
    2808:	28 2f       	mov	r18, r24
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	02 2e       	mov	r0, r18
    2812:	02 c0       	rjmp	.+4      	; 0x2818 <DIO_enumTogglePinVal+0xaa>
    2814:	88 0f       	add	r24, r24
    2816:	99 1f       	adc	r25, r25
    2818:	0a 94       	dec	r0
    281a:	e2 f7       	brpl	.-8      	; 0x2814 <DIO_enumTogglePinVal+0xa6>
    281c:	84 27       	eor	r24, r20
    281e:	8c 93       	st	X, r24
    2820:	29 c0       	rjmp	.+82     	; 0x2874 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTC:
      TOG_BIT(PORTC, Copy_u8PIN);
    2822:	a5 e3       	ldi	r26, 0x35	; 53
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	e5 e3       	ldi	r30, 0x35	; 53
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	48 2f       	mov	r20, r24
    282e:	8b 81       	ldd	r24, Y+3	; 0x03
    2830:	28 2f       	mov	r18, r24
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	02 2e       	mov	r0, r18
    283a:	02 c0       	rjmp	.+4      	; 0x2840 <DIO_enumTogglePinVal+0xd2>
    283c:	88 0f       	add	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	0a 94       	dec	r0
    2842:	e2 f7       	brpl	.-8      	; 0x283c <DIO_enumTogglePinVal+0xce>
    2844:	84 27       	eor	r24, r20
    2846:	8c 93       	st	X, r24
    2848:	15 c0       	rjmp	.+42     	; 0x2874 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTD:
      TOG_BIT(PORTD, Copy_u8PIN);
    284a:	a2 e3       	ldi	r26, 0x32	; 50
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	e2 e3       	ldi	r30, 0x32	; 50
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	48 2f       	mov	r20, r24
    2856:	8b 81       	ldd	r24, Y+3	; 0x03
    2858:	28 2f       	mov	r18, r24
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	02 2e       	mov	r0, r18
    2862:	02 c0       	rjmp	.+4      	; 0x2868 <DIO_enumTogglePinVal+0xfa>
    2864:	88 0f       	add	r24, r24
    2866:	99 1f       	adc	r25, r25
    2868:	0a 94       	dec	r0
    286a:	e2 f7       	brpl	.-8      	; 0x2864 <DIO_enumTogglePinVal+0xf6>
    286c:	84 27       	eor	r24, r20
    286e:	8c 93       	st	X, r24
    2870:	01 c0       	rjmp	.+2      	; 0x2874 <DIO_enumTogglePinVal+0x106>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    2872:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2874:	89 81       	ldd	r24, Y+1	; 0x01
}
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	0f 90       	pop	r0
    287c:	0f 90       	pop	r0
    287e:	0f 90       	pop	r0
    2880:	cf 91       	pop	r28
    2882:	df 91       	pop	r29
    2884:	08 95       	ret

00002886 <DIO_enumConnectPullUp>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
    =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumConnectPullUp(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    2886:	df 93       	push	r29
    2888:	cf 93       	push	r28
    288a:	00 d0       	rcall	.+0      	; 0x288c <DIO_enumConnectPullUp+0x6>
    288c:	00 d0       	rcall	.+0      	; 0x288e <DIO_enumConnectPullUp+0x8>
    288e:	00 d0       	rcall	.+0      	; 0x2890 <DIO_enumConnectPullUp+0xa>
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	8a 83       	std	Y+2, r24	; 0x02
    2896:	6b 83       	std	Y+3, r22	; 0x03
    2898:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    289e:	8a 81       	ldd	r24, Y+2	; 0x02
    28a0:	84 30       	cpi	r24, 0x04	; 4
    28a2:	08 f0       	brcs	.+2      	; 0x28a6 <DIO_enumConnectPullUp+0x20>
    28a4:	3e c1       	rjmp	.+636    	; 0x2b22 <DIO_enumConnectPullUp+0x29c>
    28a6:	8b 81       	ldd	r24, Y+3	; 0x03
    28a8:	88 30       	cpi	r24, 0x08	; 8
    28aa:	08 f0       	brcs	.+2      	; 0x28ae <DIO_enumConnectPullUp+0x28>
    28ac:	3a c1       	rjmp	.+628    	; 0x2b22 <DIO_enumConnectPullUp+0x29c>
  {
    switch (Copy_u8PORT)
    28ae:	8a 81       	ldd	r24, Y+2	; 0x02
    28b0:	28 2f       	mov	r18, r24
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	3e 83       	std	Y+6, r19	; 0x06
    28b6:	2d 83       	std	Y+5, r18	; 0x05
    28b8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ba:	9e 81       	ldd	r25, Y+6	; 0x06
    28bc:	81 30       	cpi	r24, 0x01	; 1
    28be:	91 05       	cpc	r25, r1
    28c0:	09 f4       	brne	.+2      	; 0x28c4 <DIO_enumConnectPullUp+0x3e>
    28c2:	5d c0       	rjmp	.+186    	; 0x297e <DIO_enumConnectPullUp+0xf8>
    28c4:	2d 81       	ldd	r18, Y+5	; 0x05
    28c6:	3e 81       	ldd	r19, Y+6	; 0x06
    28c8:	22 30       	cpi	r18, 0x02	; 2
    28ca:	31 05       	cpc	r19, r1
    28cc:	2c f4       	brge	.+10     	; 0x28d8 <DIO_enumConnectPullUp+0x52>
    28ce:	8d 81       	ldd	r24, Y+5	; 0x05
    28d0:	9e 81       	ldd	r25, Y+6	; 0x06
    28d2:	00 97       	sbiw	r24, 0x00	; 0
    28d4:	71 f0       	breq	.+28     	; 0x28f2 <DIO_enumConnectPullUp+0x6c>
    28d6:	26 c1       	rjmp	.+588    	; 0x2b24 <DIO_enumConnectPullUp+0x29e>
    28d8:	2d 81       	ldd	r18, Y+5	; 0x05
    28da:	3e 81       	ldd	r19, Y+6	; 0x06
    28dc:	22 30       	cpi	r18, 0x02	; 2
    28de:	31 05       	cpc	r19, r1
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <DIO_enumConnectPullUp+0x5e>
    28e2:	93 c0       	rjmp	.+294    	; 0x2a0a <DIO_enumConnectPullUp+0x184>
    28e4:	8d 81       	ldd	r24, Y+5	; 0x05
    28e6:	9e 81       	ldd	r25, Y+6	; 0x06
    28e8:	83 30       	cpi	r24, 0x03	; 3
    28ea:	91 05       	cpc	r25, r1
    28ec:	09 f4       	brne	.+2      	; 0x28f0 <DIO_enumConnectPullUp+0x6a>
    28ee:	d3 c0       	rjmp	.+422    	; 0x2a96 <DIO_enumConnectPullUp+0x210>
    28f0:	19 c1       	rjmp	.+562    	; 0x2b24 <DIO_enumConnectPullUp+0x29e>
    {
    /* Connect or disconnect the pull up resistance to the given pin in port A */
    case DIO_PORTA:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    28f2:	8c 81       	ldd	r24, Y+4	; 0x04
    28f4:	81 30       	cpi	r24, 0x01	; 1
    28f6:	71 f5       	brne	.+92     	; 0x2954 <DIO_enumConnectPullUp+0xce>
      {
        CLR_BIT(SFIOR, PUD); // It's default is zero
    28f8:	a0 e5       	ldi	r26, 0x50	; 80
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	e0 e5       	ldi	r30, 0x50	; 80
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	80 81       	ld	r24, Z
    2902:	8b 7f       	andi	r24, 0xFB	; 251
    2904:	8c 93       	st	X, r24
        CLR_BIT(DDRA, Copy_u8PIN);
    2906:	aa e3       	ldi	r26, 0x3A	; 58
    2908:	b0 e0       	ldi	r27, 0x00	; 0
    290a:	ea e3       	ldi	r30, 0x3A	; 58
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	48 2f       	mov	r20, r24
    2912:	8b 81       	ldd	r24, Y+3	; 0x03
    2914:	28 2f       	mov	r18, r24
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <DIO_enumConnectPullUp+0x9c>
    291e:	88 0f       	add	r24, r24
    2920:	99 1f       	adc	r25, r25
    2922:	2a 95       	dec	r18
    2924:	e2 f7       	brpl	.-8      	; 0x291e <DIO_enumConnectPullUp+0x98>
    2926:	80 95       	com	r24
    2928:	84 23       	and	r24, r20
    292a:	8c 93       	st	X, r24
        SET_BIT(PORTA, Copy_u8PIN);
    292c:	ab e3       	ldi	r26, 0x3B	; 59
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	eb e3       	ldi	r30, 0x3B	; 59
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	48 2f       	mov	r20, r24
    2938:	8b 81       	ldd	r24, Y+3	; 0x03
    293a:	28 2f       	mov	r18, r24
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	02 2e       	mov	r0, r18
    2944:	02 c0       	rjmp	.+4      	; 0x294a <DIO_enumConnectPullUp+0xc4>
    2946:	88 0f       	add	r24, r24
    2948:	99 1f       	adc	r25, r25
    294a:	0a 94       	dec	r0
    294c:	e2 f7       	brpl	.-8      	; 0x2946 <DIO_enumConnectPullUp+0xc0>
    294e:	84 2b       	or	r24, r20
    2950:	8c 93       	st	X, r24
    2952:	e8 c0       	rjmp	.+464    	; 0x2b24 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTA, Copy_u8PIN);
    2954:	ab e3       	ldi	r26, 0x3B	; 59
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	eb e3       	ldi	r30, 0x3B	; 59
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	48 2f       	mov	r20, r24
    2960:	8b 81       	ldd	r24, Y+3	; 0x03
    2962:	28 2f       	mov	r18, r24
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	02 2e       	mov	r0, r18
    296c:	02 c0       	rjmp	.+4      	; 0x2972 <DIO_enumConnectPullUp+0xec>
    296e:	88 0f       	add	r24, r24
    2970:	99 1f       	adc	r25, r25
    2972:	0a 94       	dec	r0
    2974:	e2 f7       	brpl	.-8      	; 0x296e <DIO_enumConnectPullUp+0xe8>
    2976:	80 95       	com	r24
    2978:	84 23       	and	r24, r20
    297a:	8c 93       	st	X, r24
    297c:	d3 c0       	rjmp	.+422    	; 0x2b24 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port B */
    case DIO_PORTB:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    297e:	8c 81       	ldd	r24, Y+4	; 0x04
    2980:	81 30       	cpi	r24, 0x01	; 1
    2982:	71 f5       	brne	.+92     	; 0x29e0 <DIO_enumConnectPullUp+0x15a>
      {
        CLR_BIT(SFIOR, PUD);
    2984:	a0 e5       	ldi	r26, 0x50	; 80
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	e0 e5       	ldi	r30, 0x50	; 80
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	80 81       	ld	r24, Z
    298e:	8b 7f       	andi	r24, 0xFB	; 251
    2990:	8c 93       	st	X, r24
        CLR_BIT(DDRB, Copy_u8PIN);
    2992:	a7 e3       	ldi	r26, 0x37	; 55
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	e7 e3       	ldi	r30, 0x37	; 55
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	48 2f       	mov	r20, r24
    299e:	8b 81       	ldd	r24, Y+3	; 0x03
    29a0:	28 2f       	mov	r18, r24
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	02 c0       	rjmp	.+4      	; 0x29ae <DIO_enumConnectPullUp+0x128>
    29aa:	88 0f       	add	r24, r24
    29ac:	99 1f       	adc	r25, r25
    29ae:	2a 95       	dec	r18
    29b0:	e2 f7       	brpl	.-8      	; 0x29aa <DIO_enumConnectPullUp+0x124>
    29b2:	80 95       	com	r24
    29b4:	84 23       	and	r24, r20
    29b6:	8c 93       	st	X, r24
        SET_BIT(PORTB, Copy_u8PIN);
    29b8:	a8 e3       	ldi	r26, 0x38	; 56
    29ba:	b0 e0       	ldi	r27, 0x00	; 0
    29bc:	e8 e3       	ldi	r30, 0x38	; 56
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	48 2f       	mov	r20, r24
    29c4:	8b 81       	ldd	r24, Y+3	; 0x03
    29c6:	28 2f       	mov	r18, r24
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	02 2e       	mov	r0, r18
    29d0:	02 c0       	rjmp	.+4      	; 0x29d6 <DIO_enumConnectPullUp+0x150>
    29d2:	88 0f       	add	r24, r24
    29d4:	99 1f       	adc	r25, r25
    29d6:	0a 94       	dec	r0
    29d8:	e2 f7       	brpl	.-8      	; 0x29d2 <DIO_enumConnectPullUp+0x14c>
    29da:	84 2b       	or	r24, r20
    29dc:	8c 93       	st	X, r24
    29de:	a2 c0       	rjmp	.+324    	; 0x2b24 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTB, Copy_u8PIN);
    29e0:	a8 e3       	ldi	r26, 0x38	; 56
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	e8 e3       	ldi	r30, 0x38	; 56
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	80 81       	ld	r24, Z
    29ea:	48 2f       	mov	r20, r24
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	28 2f       	mov	r18, r24
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	02 2e       	mov	r0, r18
    29f8:	02 c0       	rjmp	.+4      	; 0x29fe <DIO_enumConnectPullUp+0x178>
    29fa:	88 0f       	add	r24, r24
    29fc:	99 1f       	adc	r25, r25
    29fe:	0a 94       	dec	r0
    2a00:	e2 f7       	brpl	.-8      	; 0x29fa <DIO_enumConnectPullUp+0x174>
    2a02:	80 95       	com	r24
    2a04:	84 23       	and	r24, r20
    2a06:	8c 93       	st	X, r24
    2a08:	8d c0       	rjmp	.+282    	; 0x2b24 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port C */
    case DIO_PORTC:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    2a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0c:	81 30       	cpi	r24, 0x01	; 1
    2a0e:	71 f5       	brne	.+92     	; 0x2a6c <DIO_enumConnectPullUp+0x1e6>
      {
        CLR_BIT(SFIOR, PUD);
    2a10:	a0 e5       	ldi	r26, 0x50	; 80
    2a12:	b0 e0       	ldi	r27, 0x00	; 0
    2a14:	e0 e5       	ldi	r30, 0x50	; 80
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	80 81       	ld	r24, Z
    2a1a:	8b 7f       	andi	r24, 0xFB	; 251
    2a1c:	8c 93       	st	X, r24
        CLR_BIT(DDRC, Copy_u8PIN);
    2a1e:	a4 e3       	ldi	r26, 0x34	; 52
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	e4 e3       	ldi	r30, 0x34	; 52
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	80 81       	ld	r24, Z
    2a28:	48 2f       	mov	r20, r24
    2a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2c:	28 2f       	mov	r18, r24
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	02 c0       	rjmp	.+4      	; 0x2a3a <DIO_enumConnectPullUp+0x1b4>
    2a36:	88 0f       	add	r24, r24
    2a38:	99 1f       	adc	r25, r25
    2a3a:	2a 95       	dec	r18
    2a3c:	e2 f7       	brpl	.-8      	; 0x2a36 <DIO_enumConnectPullUp+0x1b0>
    2a3e:	80 95       	com	r24
    2a40:	84 23       	and	r24, r20
    2a42:	8c 93       	st	X, r24
        SET_BIT(PORTC, Copy_u8PIN);
    2a44:	a5 e3       	ldi	r26, 0x35	; 53
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	e5 e3       	ldi	r30, 0x35	; 53
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	48 2f       	mov	r20, r24
    2a50:	8b 81       	ldd	r24, Y+3	; 0x03
    2a52:	28 2f       	mov	r18, r24
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	02 2e       	mov	r0, r18
    2a5c:	02 c0       	rjmp	.+4      	; 0x2a62 <DIO_enumConnectPullUp+0x1dc>
    2a5e:	88 0f       	add	r24, r24
    2a60:	99 1f       	adc	r25, r25
    2a62:	0a 94       	dec	r0
    2a64:	e2 f7       	brpl	.-8      	; 0x2a5e <DIO_enumConnectPullUp+0x1d8>
    2a66:	84 2b       	or	r24, r20
    2a68:	8c 93       	st	X, r24
    2a6a:	5c c0       	rjmp	.+184    	; 0x2b24 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTC, Copy_u8PIN);
    2a6c:	a5 e3       	ldi	r26, 0x35	; 53
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	e5 e3       	ldi	r30, 0x35	; 53
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	80 81       	ld	r24, Z
    2a76:	48 2f       	mov	r20, r24
    2a78:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7a:	28 2f       	mov	r18, r24
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	02 2e       	mov	r0, r18
    2a84:	02 c0       	rjmp	.+4      	; 0x2a8a <DIO_enumConnectPullUp+0x204>
    2a86:	88 0f       	add	r24, r24
    2a88:	99 1f       	adc	r25, r25
    2a8a:	0a 94       	dec	r0
    2a8c:	e2 f7       	brpl	.-8      	; 0x2a86 <DIO_enumConnectPullUp+0x200>
    2a8e:	80 95       	com	r24
    2a90:	84 23       	and	r24, r20
    2a92:	8c 93       	st	X, r24
    2a94:	47 c0       	rjmp	.+142    	; 0x2b24 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port D */
    case DIO_PORTD:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    2a96:	8c 81       	ldd	r24, Y+4	; 0x04
    2a98:	81 30       	cpi	r24, 0x01	; 1
    2a9a:	71 f5       	brne	.+92     	; 0x2af8 <DIO_enumConnectPullUp+0x272>
      {
        CLR_BIT(SFIOR, PUD);
    2a9c:	a0 e5       	ldi	r26, 0x50	; 80
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	e0 e5       	ldi	r30, 0x50	; 80
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	80 81       	ld	r24, Z
    2aa6:	8b 7f       	andi	r24, 0xFB	; 251
    2aa8:	8c 93       	st	X, r24
        CLR_BIT(DDRD, Copy_u8PIN);
    2aaa:	a1 e3       	ldi	r26, 0x31	; 49
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	e1 e3       	ldi	r30, 0x31	; 49
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	48 2f       	mov	r20, r24
    2ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab8:	28 2f       	mov	r18, r24
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	02 c0       	rjmp	.+4      	; 0x2ac6 <DIO_enumConnectPullUp+0x240>
    2ac2:	88 0f       	add	r24, r24
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	2a 95       	dec	r18
    2ac8:	e2 f7       	brpl	.-8      	; 0x2ac2 <DIO_enumConnectPullUp+0x23c>
    2aca:	80 95       	com	r24
    2acc:	84 23       	and	r24, r20
    2ace:	8c 93       	st	X, r24
        SET_BIT(PORTD, Copy_u8PIN);
    2ad0:	a2 e3       	ldi	r26, 0x32	; 50
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	e2 e3       	ldi	r30, 0x32	; 50
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	80 81       	ld	r24, Z
    2ada:	48 2f       	mov	r20, r24
    2adc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ade:	28 2f       	mov	r18, r24
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	02 2e       	mov	r0, r18
    2ae8:	02 c0       	rjmp	.+4      	; 0x2aee <DIO_enumConnectPullUp+0x268>
    2aea:	88 0f       	add	r24, r24
    2aec:	99 1f       	adc	r25, r25
    2aee:	0a 94       	dec	r0
    2af0:	e2 f7       	brpl	.-8      	; 0x2aea <DIO_enumConnectPullUp+0x264>
    2af2:	84 2b       	or	r24, r20
    2af4:	8c 93       	st	X, r24
    2af6:	16 c0       	rjmp	.+44     	; 0x2b24 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTD, Copy_u8PIN);
    2af8:	a2 e3       	ldi	r26, 0x32	; 50
    2afa:	b0 e0       	ldi	r27, 0x00	; 0
    2afc:	e2 e3       	ldi	r30, 0x32	; 50
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	80 81       	ld	r24, Z
    2b02:	48 2f       	mov	r20, r24
    2b04:	8b 81       	ldd	r24, Y+3	; 0x03
    2b06:	28 2f       	mov	r18, r24
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	02 2e       	mov	r0, r18
    2b10:	02 c0       	rjmp	.+4      	; 0x2b16 <DIO_enumConnectPullUp+0x290>
    2b12:	88 0f       	add	r24, r24
    2b14:	99 1f       	adc	r25, r25
    2b16:	0a 94       	dec	r0
    2b18:	e2 f7       	brpl	.-8      	; 0x2b12 <DIO_enumConnectPullUp+0x28c>
    2b1a:	80 95       	com	r24
    2b1c:	84 23       	and	r24, r20
    2b1e:	8c 93       	st	X, r24
    2b20:	01 c0       	rjmp	.+2      	; 0x2b24 <DIO_enumConnectPullUp+0x29e>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    2b22:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b26:	26 96       	adiw	r28, 0x06	; 6
    2b28:	0f b6       	in	r0, 0x3f	; 63
    2b2a:	f8 94       	cli
    2b2c:	de bf       	out	0x3e, r29	; 62
    2b2e:	0f be       	out	0x3f, r0	; 63
    2b30:	cd bf       	out	0x3d, r28	; 61
    2b32:	cf 91       	pop	r28
    2b34:	df 91       	pop	r29
    2b36:	08 95       	ret

00002b38 <DIO_enumSetPortDir>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_errorStatus DIO_enumSetPortDir(u8 Copy_u8PORT, u8 Copy_u8Direction)
{
    2b38:	df 93       	push	r29
    2b3a:	cf 93       	push	r28
    2b3c:	00 d0       	rcall	.+0      	; 0x2b3e <DIO_enumSetPortDir+0x6>
    2b3e:	00 d0       	rcall	.+0      	; 0x2b40 <DIO_enumSetPortDir+0x8>
    2b40:	0f 92       	push	r0
    2b42:	cd b7       	in	r28, 0x3d	; 61
    2b44:	de b7       	in	r29, 0x3e	; 62
    2b46:	8a 83       	std	Y+2, r24	; 0x02
    2b48:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD))
    2b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b50:	84 30       	cpi	r24, 0x04	; 4
    2b52:	a8 f5       	brcc	.+106    	; 0x2bbe <DIO_enumSetPortDir+0x86>
  {
    switch (Copy_u8PORT)
    2b54:	8a 81       	ldd	r24, Y+2	; 0x02
    2b56:	28 2f       	mov	r18, r24
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	3d 83       	std	Y+5, r19	; 0x05
    2b5c:	2c 83       	std	Y+4, r18	; 0x04
    2b5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b60:	9d 81       	ldd	r25, Y+5	; 0x05
    2b62:	81 30       	cpi	r24, 0x01	; 1
    2b64:	91 05       	cpc	r25, r1
    2b66:	d1 f0       	breq	.+52     	; 0x2b9c <DIO_enumSetPortDir+0x64>
    2b68:	2c 81       	ldd	r18, Y+4	; 0x04
    2b6a:	3d 81       	ldd	r19, Y+5	; 0x05
    2b6c:	22 30       	cpi	r18, 0x02	; 2
    2b6e:	31 05       	cpc	r19, r1
    2b70:	2c f4       	brge	.+10     	; 0x2b7c <DIO_enumSetPortDir+0x44>
    2b72:	8c 81       	ldd	r24, Y+4	; 0x04
    2b74:	9d 81       	ldd	r25, Y+5	; 0x05
    2b76:	00 97       	sbiw	r24, 0x00	; 0
    2b78:	61 f0       	breq	.+24     	; 0x2b92 <DIO_enumSetPortDir+0x5a>
    2b7a:	1f c0       	rjmp	.+62     	; 0x2bba <DIO_enumSetPortDir+0x82>
    2b7c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b7e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b80:	22 30       	cpi	r18, 0x02	; 2
    2b82:	31 05       	cpc	r19, r1
    2b84:	81 f0       	breq	.+32     	; 0x2ba6 <DIO_enumSetPortDir+0x6e>
    2b86:	8c 81       	ldd	r24, Y+4	; 0x04
    2b88:	9d 81       	ldd	r25, Y+5	; 0x05
    2b8a:	83 30       	cpi	r24, 0x03	; 3
    2b8c:	91 05       	cpc	r25, r1
    2b8e:	81 f0       	breq	.+32     	; 0x2bb0 <DIO_enumSetPortDir+0x78>
    2b90:	14 c0       	rjmp	.+40     	; 0x2bba <DIO_enumSetPortDir+0x82>
    {
    case DIO_PORTA:
      DDRA = Copy_u8Direction;
    2b92:	ea e3       	ldi	r30, 0x3A	; 58
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	8b 81       	ldd	r24, Y+3	; 0x03
    2b98:	80 83       	st	Z, r24
    2b9a:	12 c0       	rjmp	.+36     	; 0x2bc0 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTB:
      DDRB = Copy_u8Direction;
    2b9c:	e7 e3       	ldi	r30, 0x37	; 55
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba2:	80 83       	st	Z, r24
    2ba4:	0d c0       	rjmp	.+26     	; 0x2bc0 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTC:
      DDRC = Copy_u8Direction;
    2ba6:	e4 e3       	ldi	r30, 0x34	; 52
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bac:	80 83       	st	Z, r24
    2bae:	08 c0       	rjmp	.+16     	; 0x2bc0 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTD:
      DDRD = Copy_u8Direction;
    2bb0:	e1 e3       	ldi	r30, 0x31	; 49
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb6:	80 83       	st	Z, r24
    2bb8:	03 c0       	rjmp	.+6      	; 0x2bc0 <DIO_enumSetPortDir+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    2bba:	19 82       	std	Y+1, r1	; 0x01
    2bbc:	01 c0       	rjmp	.+2      	; 0x2bc0 <DIO_enumSetPortDir+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2bbe:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	cf 91       	pop	r28
    2bce:	df 91       	pop	r29
    2bd0:	08 95       	ret

00002bd2 <DIO_enumWritePortVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePortVal(u8 Copy_u8PORT, u8 Copy_u8Value)
{
    2bd2:	df 93       	push	r29
    2bd4:	cf 93       	push	r28
    2bd6:	00 d0       	rcall	.+0      	; 0x2bd8 <DIO_enumWritePortVal+0x6>
    2bd8:	00 d0       	rcall	.+0      	; 0x2bda <DIO_enumWritePortVal+0x8>
    2bda:	0f 92       	push	r0
    2bdc:	cd b7       	in	r28, 0x3d	; 61
    2bde:	de b7       	in	r29, 0x3e	; 62
    2be0:	8a 83       	std	Y+2, r24	; 0x02
    2be2:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD) && ((Copy_u8Value <= 255) || (Copy_u8Value == DIO_PORT_LOW) || (Copy_u8Value == DIO_PORT_HIGH)))
    2be8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bea:	84 30       	cpi	r24, 0x04	; 4
    2bec:	a8 f5       	brcc	.+106    	; 0x2c58 <DIO_enumWritePortVal+0x86>
  {
    switch (Copy_u8PORT)
    2bee:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf0:	28 2f       	mov	r18, r24
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	3d 83       	std	Y+5, r19	; 0x05
    2bf6:	2c 83       	std	Y+4, r18	; 0x04
    2bf8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bfa:	9d 81       	ldd	r25, Y+5	; 0x05
    2bfc:	81 30       	cpi	r24, 0x01	; 1
    2bfe:	91 05       	cpc	r25, r1
    2c00:	d1 f0       	breq	.+52     	; 0x2c36 <DIO_enumWritePortVal+0x64>
    2c02:	2c 81       	ldd	r18, Y+4	; 0x04
    2c04:	3d 81       	ldd	r19, Y+5	; 0x05
    2c06:	22 30       	cpi	r18, 0x02	; 2
    2c08:	31 05       	cpc	r19, r1
    2c0a:	2c f4       	brge	.+10     	; 0x2c16 <DIO_enumWritePortVal+0x44>
    2c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2c10:	00 97       	sbiw	r24, 0x00	; 0
    2c12:	61 f0       	breq	.+24     	; 0x2c2c <DIO_enumWritePortVal+0x5a>
    2c14:	1f c0       	rjmp	.+62     	; 0x2c54 <DIO_enumWritePortVal+0x82>
    2c16:	2c 81       	ldd	r18, Y+4	; 0x04
    2c18:	3d 81       	ldd	r19, Y+5	; 0x05
    2c1a:	22 30       	cpi	r18, 0x02	; 2
    2c1c:	31 05       	cpc	r19, r1
    2c1e:	81 f0       	breq	.+32     	; 0x2c40 <DIO_enumWritePortVal+0x6e>
    2c20:	8c 81       	ldd	r24, Y+4	; 0x04
    2c22:	9d 81       	ldd	r25, Y+5	; 0x05
    2c24:	83 30       	cpi	r24, 0x03	; 3
    2c26:	91 05       	cpc	r25, r1
    2c28:	81 f0       	breq	.+32     	; 0x2c4a <DIO_enumWritePortVal+0x78>
    2c2a:	14 c0       	rjmp	.+40     	; 0x2c54 <DIO_enumWritePortVal+0x82>
    {
    case DIO_PORTA:
      PORTA = Copy_u8Value;
    2c2c:	eb e3       	ldi	r30, 0x3B	; 59
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	8b 81       	ldd	r24, Y+3	; 0x03
    2c32:	80 83       	st	Z, r24
    2c34:	12 c0       	rjmp	.+36     	; 0x2c5a <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTB:
      PORTB = Copy_u8Value;
    2c36:	e8 e3       	ldi	r30, 0x38	; 56
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3c:	80 83       	st	Z, r24
    2c3e:	0d c0       	rjmp	.+26     	; 0x2c5a <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTC:
      PORTC = Copy_u8Value;
    2c40:	e5 e3       	ldi	r30, 0x35	; 53
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	8b 81       	ldd	r24, Y+3	; 0x03
    2c46:	80 83       	st	Z, r24
    2c48:	08 c0       	rjmp	.+16     	; 0x2c5a <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTD:
      PORTD = Copy_u8Value;
    2c4a:	e2 e3       	ldi	r30, 0x32	; 50
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c50:	80 83       	st	Z, r24
    2c52:	03 c0       	rjmp	.+6      	; 0x2c5a <DIO_enumWritePortVal+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    2c54:	19 82       	std	Y+1, r1	; 0x01
    2c56:	01 c0       	rjmp	.+2      	; 0x2c5a <DIO_enumWritePortVal+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2c58:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    2c5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c5c:	0f 90       	pop	r0
    2c5e:	0f 90       	pop	r0
    2c60:	0f 90       	pop	r0
    2c62:	0f 90       	pop	r0
    2c64:	0f 90       	pop	r0
    2c66:	cf 91       	pop	r28
    2c68:	df 91       	pop	r29
    2c6a:	08 95       	ret

00002c6c <DIO_enumReadPorVal>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_errorStatus DIO_enumReadPorVal(u8 Copy_u8PORT, u8 *Copy_Pu8Data)
{
    2c6c:	df 93       	push	r29
    2c6e:	cf 93       	push	r28
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	27 97       	sbiw	r28, 0x07	; 7
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	8a 83       	std	Y+2, r24	; 0x02
    2c82:	7c 83       	std	Y+4, r23	; 0x04
    2c84:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8c:	84 30       	cpi	r24, 0x04	; 4
    2c8e:	08 f0       	brcs	.+2      	; 0x2c92 <DIO_enumReadPorVal+0x26>
    2c90:	3f c0       	rjmp	.+126    	; 0x2d10 <DIO_enumReadPorVal+0xa4>
  {
    switch (Copy_u8PORT)
    2c92:	8a 81       	ldd	r24, Y+2	; 0x02
    2c94:	28 2f       	mov	r18, r24
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	3f 83       	std	Y+7, r19	; 0x07
    2c9a:	2e 83       	std	Y+6, r18	; 0x06
    2c9c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c9e:	9f 81       	ldd	r25, Y+7	; 0x07
    2ca0:	81 30       	cpi	r24, 0x01	; 1
    2ca2:	91 05       	cpc	r25, r1
    2ca4:	e1 f0       	breq	.+56     	; 0x2cde <DIO_enumReadPorVal+0x72>
    2ca6:	2e 81       	ldd	r18, Y+6	; 0x06
    2ca8:	3f 81       	ldd	r19, Y+7	; 0x07
    2caa:	22 30       	cpi	r18, 0x02	; 2
    2cac:	31 05       	cpc	r19, r1
    2cae:	2c f4       	brge	.+10     	; 0x2cba <DIO_enumReadPorVal+0x4e>
    2cb0:	8e 81       	ldd	r24, Y+6	; 0x06
    2cb2:	9f 81       	ldd	r25, Y+7	; 0x07
    2cb4:	00 97       	sbiw	r24, 0x00	; 0
    2cb6:	61 f0       	breq	.+24     	; 0x2cd0 <DIO_enumReadPorVal+0x64>
    2cb8:	27 c0       	rjmp	.+78     	; 0x2d08 <DIO_enumReadPorVal+0x9c>
    2cba:	2e 81       	ldd	r18, Y+6	; 0x06
    2cbc:	3f 81       	ldd	r19, Y+7	; 0x07
    2cbe:	22 30       	cpi	r18, 0x02	; 2
    2cc0:	31 05       	cpc	r19, r1
    2cc2:	a1 f0       	breq	.+40     	; 0x2cec <DIO_enumReadPorVal+0x80>
    2cc4:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc6:	9f 81       	ldd	r25, Y+7	; 0x07
    2cc8:	83 30       	cpi	r24, 0x03	; 3
    2cca:	91 05       	cpc	r25, r1
    2ccc:	b1 f0       	breq	.+44     	; 0x2cfa <DIO_enumReadPorVal+0x8e>
    2cce:	1c c0       	rjmp	.+56     	; 0x2d08 <DIO_enumReadPorVal+0x9c>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = PINA;
    2cd0:	e9 e3       	ldi	r30, 0x39	; 57
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	eb 81       	ldd	r30, Y+3	; 0x03
    2cd8:	fc 81       	ldd	r31, Y+4	; 0x04
    2cda:	80 83       	st	Z, r24
    2cdc:	16 c0       	rjmp	.+44     	; 0x2d0a <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = PINB;
    2cde:	e6 e3       	ldi	r30, 0x36	; 54
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ce6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ce8:	80 83       	st	Z, r24
    2cea:	0f c0       	rjmp	.+30     	; 0x2d0a <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = PINC;
    2cec:	e3 e3       	ldi	r30, 0x33	; 51
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	80 81       	ld	r24, Z
    2cf2:	eb 81       	ldd	r30, Y+3	; 0x03
    2cf4:	fc 81       	ldd	r31, Y+4	; 0x04
    2cf6:	80 83       	st	Z, r24
    2cf8:	08 c0       	rjmp	.+16     	; 0x2d0a <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = PIND;
    2cfa:	e0 e3       	ldi	r30, 0x30	; 48
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	eb 81       	ldd	r30, Y+3	; 0x03
    2d02:	fc 81       	ldd	r31, Y+4	; 0x04
    2d04:	80 83       	st	Z, r24
    2d06:	01 c0       	rjmp	.+2      	; 0x2d0a <DIO_enumReadPorVal+0x9e>
      break;
    default:
      LOC_enumState = DIO_NOK;
    2d08:	19 82       	std	Y+1, r1	; 0x01
      break;
    }
    return LOC_enumState;
    2d0a:	99 81       	ldd	r25, Y+1	; 0x01
    2d0c:	9d 83       	std	Y+5, r25	; 0x05
    2d0e:	03 c0       	rjmp	.+6      	; 0x2d16 <DIO_enumReadPorVal+0xaa>
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2d10:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    2d12:	29 81       	ldd	r18, Y+1	; 0x01
    2d14:	2d 83       	std	Y+5, r18	; 0x05
    2d16:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2d18:	27 96       	adiw	r28, 0x07	; 7
    2d1a:	0f b6       	in	r0, 0x3f	; 63
    2d1c:	f8 94       	cli
    2d1e:	de bf       	out	0x3e, r29	; 62
    2d20:	0f be       	out	0x3f, r0	; 63
    2d22:	cd bf       	out	0x3d, r28	; 61
    2d24:	cf 91       	pop	r28
    2d26:	df 91       	pop	r29
    2d28:	08 95       	ret

00002d2a <DIO_enumTogglePortValue>:
 * Parameters :
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePortValue(u8 Copy_u8PORT)
{
    2d2a:	df 93       	push	r29
    2d2c:	cf 93       	push	r28
    2d2e:	00 d0       	rcall	.+0      	; 0x2d30 <DIO_enumTogglePortValue+0x6>
    2d30:	00 d0       	rcall	.+0      	; 0x2d32 <DIO_enumTogglePortValue+0x8>
    2d32:	cd b7       	in	r28, 0x3d	; 61
    2d34:	de b7       	in	r29, 0x3e	; 62
    2d36:	8a 83       	std	Y+2, r24	; 0x02
  DIO_errorStatus LOC_enumState = DIO_OK;
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8PORT <= DIO_PORTD)
    2d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3e:	84 30       	cpi	r24, 0x04	; 4
    2d40:	08 f0       	brcs	.+2      	; 0x2d44 <DIO_enumTogglePortValue+0x1a>
    2d42:	3f c0       	rjmp	.+126    	; 0x2dc2 <DIO_enumTogglePortValue+0x98>
  {
    switch (Copy_u8PORT)
    2d44:	8a 81       	ldd	r24, Y+2	; 0x02
    2d46:	28 2f       	mov	r18, r24
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	3c 83       	std	Y+4, r19	; 0x04
    2d4c:	2b 83       	std	Y+3, r18	; 0x03
    2d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d50:	9c 81       	ldd	r25, Y+4	; 0x04
    2d52:	81 30       	cpi	r24, 0x01	; 1
    2d54:	91 05       	cpc	r25, r1
    2d56:	e9 f0       	breq	.+58     	; 0x2d92 <DIO_enumTogglePortValue+0x68>
    2d58:	2b 81       	ldd	r18, Y+3	; 0x03
    2d5a:	3c 81       	ldd	r19, Y+4	; 0x04
    2d5c:	22 30       	cpi	r18, 0x02	; 2
    2d5e:	31 05       	cpc	r19, r1
    2d60:	2c f4       	brge	.+10     	; 0x2d6c <DIO_enumTogglePortValue+0x42>
    2d62:	8b 81       	ldd	r24, Y+3	; 0x03
    2d64:	9c 81       	ldd	r25, Y+4	; 0x04
    2d66:	00 97       	sbiw	r24, 0x00	; 0
    2d68:	61 f0       	breq	.+24     	; 0x2d82 <DIO_enumTogglePortValue+0x58>
    2d6a:	2c c0       	rjmp	.+88     	; 0x2dc4 <DIO_enumTogglePortValue+0x9a>
    2d6c:	2b 81       	ldd	r18, Y+3	; 0x03
    2d6e:	3c 81       	ldd	r19, Y+4	; 0x04
    2d70:	22 30       	cpi	r18, 0x02	; 2
    2d72:	31 05       	cpc	r19, r1
    2d74:	b1 f0       	breq	.+44     	; 0x2da2 <DIO_enumTogglePortValue+0x78>
    2d76:	8b 81       	ldd	r24, Y+3	; 0x03
    2d78:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7a:	83 30       	cpi	r24, 0x03	; 3
    2d7c:	91 05       	cpc	r25, r1
    2d7e:	c9 f0       	breq	.+50     	; 0x2db2 <DIO_enumTogglePortValue+0x88>
    2d80:	21 c0       	rjmp	.+66     	; 0x2dc4 <DIO_enumTogglePortValue+0x9a>
    {
    case DIO_PORTA:
      PORTA = ~PORTA;
    2d82:	ab e3       	ldi	r26, 0x3B	; 59
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	eb e3       	ldi	r30, 0x3B	; 59
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	80 95       	com	r24
    2d8e:	8c 93       	st	X, r24
    2d90:	19 c0       	rjmp	.+50     	; 0x2dc4 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTB:
      PORTB = ~PORTB;
    2d92:	a8 e3       	ldi	r26, 0x38	; 56
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	e8 e3       	ldi	r30, 0x38	; 56
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	80 81       	ld	r24, Z
    2d9c:	80 95       	com	r24
    2d9e:	8c 93       	st	X, r24
    2da0:	11 c0       	rjmp	.+34     	; 0x2dc4 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTC:
      PORTC = ~PORTC;
    2da2:	a5 e3       	ldi	r26, 0x35	; 53
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	e5 e3       	ldi	r30, 0x35	; 53
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	80 95       	com	r24
    2dae:	8c 93       	st	X, r24
    2db0:	09 c0       	rjmp	.+18     	; 0x2dc4 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTD:
      PORTD = ~PORTD;
    2db2:	a2 e3       	ldi	r26, 0x32	; 50
    2db4:	b0 e0       	ldi	r27, 0x00	; 0
    2db6:	e2 e3       	ldi	r30, 0x32	; 50
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	80 81       	ld	r24, Z
    2dbc:	80 95       	com	r24
    2dbe:	8c 93       	st	X, r24
    2dc0:	01 c0       	rjmp	.+2      	; 0x2dc4 <DIO_enumTogglePortValue+0x9a>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2dc2:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dc6:	0f 90       	pop	r0
    2dc8:	0f 90       	pop	r0
    2dca:	0f 90       	pop	r0
    2dcc:	0f 90       	pop	r0
    2dce:	cf 91       	pop	r28
    2dd0:	df 91       	pop	r29
    2dd2:	08 95       	ret

00002dd4 <DIO_vWriteLowNibble>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_errorStatus DIO_vWriteLowNibble(u8 Copy_u8PORT, u8 value)
{
    2dd4:	df 93       	push	r29
    2dd6:	cf 93       	push	r28
    2dd8:	00 d0       	rcall	.+0      	; 0x2dda <DIO_vWriteLowNibble+0x6>
    2dda:	00 d0       	rcall	.+0      	; 0x2ddc <DIO_vWriteLowNibble+0x8>
    2ddc:	0f 92       	push	r0
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
    2de2:	8a 83       	std	Y+2, r24	; 0x02
    2de4:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	84 30       	cpi	r24, 0x04	; 4
    2dee:	08 f0       	brcs	.+2      	; 0x2df2 <DIO_vWriteLowNibble+0x1e>
    2df0:	62 c0       	rjmp	.+196    	; 0x2eb6 <DIO_vWriteLowNibble+0xe2>
  {
    value &= 0x0F;
    2df2:	8b 81       	ldd	r24, Y+3	; 0x03
    2df4:	8f 70       	andi	r24, 0x0F	; 15
    2df6:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    2df8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfa:	28 2f       	mov	r18, r24
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	3d 83       	std	Y+5, r19	; 0x05
    2e00:	2c 83       	std	Y+4, r18	; 0x04
    2e02:	8c 81       	ldd	r24, Y+4	; 0x04
    2e04:	9d 81       	ldd	r25, Y+5	; 0x05
    2e06:	81 30       	cpi	r24, 0x01	; 1
    2e08:	91 05       	cpc	r25, r1
    2e0a:	29 f1       	breq	.+74     	; 0x2e56 <DIO_vWriteLowNibble+0x82>
    2e0c:	2c 81       	ldd	r18, Y+4	; 0x04
    2e0e:	3d 81       	ldd	r19, Y+5	; 0x05
    2e10:	22 30       	cpi	r18, 0x02	; 2
    2e12:	31 05       	cpc	r19, r1
    2e14:	2c f4       	brge	.+10     	; 0x2e20 <DIO_vWriteLowNibble+0x4c>
    2e16:	8c 81       	ldd	r24, Y+4	; 0x04
    2e18:	9d 81       	ldd	r25, Y+5	; 0x05
    2e1a:	00 97       	sbiw	r24, 0x00	; 0
    2e1c:	61 f0       	breq	.+24     	; 0x2e36 <DIO_vWriteLowNibble+0x62>
    2e1e:	4c c0       	rjmp	.+152    	; 0x2eb8 <DIO_vWriteLowNibble+0xe4>
    2e20:	2c 81       	ldd	r18, Y+4	; 0x04
    2e22:	3d 81       	ldd	r19, Y+5	; 0x05
    2e24:	22 30       	cpi	r18, 0x02	; 2
    2e26:	31 05       	cpc	r19, r1
    2e28:	31 f1       	breq	.+76     	; 0x2e76 <DIO_vWriteLowNibble+0xa2>
    2e2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e2c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e2e:	83 30       	cpi	r24, 0x03	; 3
    2e30:	91 05       	cpc	r25, r1
    2e32:	89 f1       	breq	.+98     	; 0x2e96 <DIO_vWriteLowNibble+0xc2>
    2e34:	41 c0       	rjmp	.+130    	; 0x2eb8 <DIO_vWriteLowNibble+0xe4>
    {
    case DIO_PORTA:
      PORTA &= 0xF0; // Set only the high nibble of the port A by the given value
    2e36:	ab e3       	ldi	r26, 0x3B	; 59
    2e38:	b0 e0       	ldi	r27, 0x00	; 0
    2e3a:	eb e3       	ldi	r30, 0x3B	; 59
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	80 81       	ld	r24, Z
    2e40:	80 7f       	andi	r24, 0xF0	; 240
    2e42:	8c 93       	st	X, r24
      PORTA |= value;
    2e44:	ab e3       	ldi	r26, 0x3B	; 59
    2e46:	b0 e0       	ldi	r27, 0x00	; 0
    2e48:	eb e3       	ldi	r30, 0x3B	; 59
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	90 81       	ld	r25, Z
    2e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e50:	89 2b       	or	r24, r25
    2e52:	8c 93       	st	X, r24
    2e54:	31 c0       	rjmp	.+98     	; 0x2eb8 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTB:
      PORTB &= 0xF0; // Set only the high nibble of the port B by the given value
    2e56:	a8 e3       	ldi	r26, 0x38	; 56
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
    2e5a:	e8 e3       	ldi	r30, 0x38	; 56
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	80 81       	ld	r24, Z
    2e60:	80 7f       	andi	r24, 0xF0	; 240
    2e62:	8c 93       	st	X, r24
      PORTB |= value;
    2e64:	a8 e3       	ldi	r26, 0x38	; 56
    2e66:	b0 e0       	ldi	r27, 0x00	; 0
    2e68:	e8 e3       	ldi	r30, 0x38	; 56
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	90 81       	ld	r25, Z
    2e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e70:	89 2b       	or	r24, r25
    2e72:	8c 93       	st	X, r24
    2e74:	21 c0       	rjmp	.+66     	; 0x2eb8 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTC:
      PORTC &= 0xF0; // Set only the high nibble of the port C by the given value
    2e76:	a5 e3       	ldi	r26, 0x35	; 53
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	e5 e3       	ldi	r30, 0x35	; 53
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	80 81       	ld	r24, Z
    2e80:	80 7f       	andi	r24, 0xF0	; 240
    2e82:	8c 93       	st	X, r24
      PORTC |= value;
    2e84:	a5 e3       	ldi	r26, 0x35	; 53
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	e5 e3       	ldi	r30, 0x35	; 53
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	90 81       	ld	r25, Z
    2e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e90:	89 2b       	or	r24, r25
    2e92:	8c 93       	st	X, r24
    2e94:	11 c0       	rjmp	.+34     	; 0x2eb8 <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTD:
      PORTD &= 0xF0; // Set only the high nibble of the port D by the given value
    2e96:	a2 e3       	ldi	r26, 0x32	; 50
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	e2 e3       	ldi	r30, 0x32	; 50
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	80 81       	ld	r24, Z
    2ea0:	80 7f       	andi	r24, 0xF0	; 240
    2ea2:	8c 93       	st	X, r24
      PORTD |= value;
    2ea4:	a2 e3       	ldi	r26, 0x32	; 50
    2ea6:	b0 e0       	ldi	r27, 0x00	; 0
    2ea8:	e2 e3       	ldi	r30, 0x32	; 50
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	90 81       	ld	r25, Z
    2eae:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb0:	89 2b       	or	r24, r25
    2eb2:	8c 93       	st	X, r24
    2eb4:	01 c0       	rjmp	.+2      	; 0x2eb8 <DIO_vWriteLowNibble+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    2eb6:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2eb8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eba:	0f 90       	pop	r0
    2ebc:	0f 90       	pop	r0
    2ebe:	0f 90       	pop	r0
    2ec0:	0f 90       	pop	r0
    2ec2:	0f 90       	pop	r0
    2ec4:	cf 91       	pop	r28
    2ec6:	df 91       	pop	r29
    2ec8:	08 95       	ret

00002eca <DIO_vWriteHighNibble>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_errorStatus DIO_vWriteHighNibble(u8 Copy_u8PORT, u8 value)
{
    2eca:	df 93       	push	r29
    2ecc:	cf 93       	push	r28
    2ece:	00 d0       	rcall	.+0      	; 0x2ed0 <DIO_vWriteHighNibble+0x6>
    2ed0:	00 d0       	rcall	.+0      	; 0x2ed2 <DIO_vWriteHighNibble+0x8>
    2ed2:	0f 92       	push	r0
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
    2ed8:	8a 83       	std	Y+2, r24	; 0x02
    2eda:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee2:	84 30       	cpi	r24, 0x04	; 4
    2ee4:	08 f0       	brcs	.+2      	; 0x2ee8 <DIO_vWriteHighNibble+0x1e>
    2ee6:	63 c0       	rjmp	.+198    	; 0x2fae <DIO_vWriteHighNibble+0xe4>
  {
    value <<= 4;
    2ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eea:	82 95       	swap	r24
    2eec:	80 7f       	andi	r24, 0xF0	; 240
    2eee:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    2ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef2:	28 2f       	mov	r18, r24
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	3d 83       	std	Y+5, r19	; 0x05
    2ef8:	2c 83       	std	Y+4, r18	; 0x04
    2efa:	8c 81       	ldd	r24, Y+4	; 0x04
    2efc:	9d 81       	ldd	r25, Y+5	; 0x05
    2efe:	81 30       	cpi	r24, 0x01	; 1
    2f00:	91 05       	cpc	r25, r1
    2f02:	29 f1       	breq	.+74     	; 0x2f4e <DIO_vWriteHighNibble+0x84>
    2f04:	2c 81       	ldd	r18, Y+4	; 0x04
    2f06:	3d 81       	ldd	r19, Y+5	; 0x05
    2f08:	22 30       	cpi	r18, 0x02	; 2
    2f0a:	31 05       	cpc	r19, r1
    2f0c:	2c f4       	brge	.+10     	; 0x2f18 <DIO_vWriteHighNibble+0x4e>
    2f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f10:	9d 81       	ldd	r25, Y+5	; 0x05
    2f12:	00 97       	sbiw	r24, 0x00	; 0
    2f14:	61 f0       	breq	.+24     	; 0x2f2e <DIO_vWriteHighNibble+0x64>
    2f16:	4c c0       	rjmp	.+152    	; 0x2fb0 <DIO_vWriteHighNibble+0xe6>
    2f18:	2c 81       	ldd	r18, Y+4	; 0x04
    2f1a:	3d 81       	ldd	r19, Y+5	; 0x05
    2f1c:	22 30       	cpi	r18, 0x02	; 2
    2f1e:	31 05       	cpc	r19, r1
    2f20:	31 f1       	breq	.+76     	; 0x2f6e <DIO_vWriteHighNibble+0xa4>
    2f22:	8c 81       	ldd	r24, Y+4	; 0x04
    2f24:	9d 81       	ldd	r25, Y+5	; 0x05
    2f26:	83 30       	cpi	r24, 0x03	; 3
    2f28:	91 05       	cpc	r25, r1
    2f2a:	89 f1       	breq	.+98     	; 0x2f8e <DIO_vWriteHighNibble+0xc4>
    2f2c:	41 c0       	rjmp	.+130    	; 0x2fb0 <DIO_vWriteHighNibble+0xe6>
    {
    case DIO_PORTA:
      PORTA &= 0x0F;
    2f2e:	ab e3       	ldi	r26, 0x3B	; 59
    2f30:	b0 e0       	ldi	r27, 0x00	; 0
    2f32:	eb e3       	ldi	r30, 0x3B	; 59
    2f34:	f0 e0       	ldi	r31, 0x00	; 0
    2f36:	80 81       	ld	r24, Z
    2f38:	8f 70       	andi	r24, 0x0F	; 15
    2f3a:	8c 93       	st	X, r24
      PORTA |= value;
    2f3c:	ab e3       	ldi	r26, 0x3B	; 59
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	eb e3       	ldi	r30, 0x3B	; 59
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	90 81       	ld	r25, Z
    2f46:	8b 81       	ldd	r24, Y+3	; 0x03
    2f48:	89 2b       	or	r24, r25
    2f4a:	8c 93       	st	X, r24
    2f4c:	31 c0       	rjmp	.+98     	; 0x2fb0 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTB:
      PORTB &= 0x0F;
    2f4e:	a8 e3       	ldi	r26, 0x38	; 56
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	e8 e3       	ldi	r30, 0x38	; 56
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	80 81       	ld	r24, Z
    2f58:	8f 70       	andi	r24, 0x0F	; 15
    2f5a:	8c 93       	st	X, r24
      PORTB |= value;
    2f5c:	a8 e3       	ldi	r26, 0x38	; 56
    2f5e:	b0 e0       	ldi	r27, 0x00	; 0
    2f60:	e8 e3       	ldi	r30, 0x38	; 56
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	90 81       	ld	r25, Z
    2f66:	8b 81       	ldd	r24, Y+3	; 0x03
    2f68:	89 2b       	or	r24, r25
    2f6a:	8c 93       	st	X, r24
    2f6c:	21 c0       	rjmp	.+66     	; 0x2fb0 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTC:
      PORTC &= 0x0F;
    2f6e:	a5 e3       	ldi	r26, 0x35	; 53
    2f70:	b0 e0       	ldi	r27, 0x00	; 0
    2f72:	e5 e3       	ldi	r30, 0x35	; 53
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	80 81       	ld	r24, Z
    2f78:	8f 70       	andi	r24, 0x0F	; 15
    2f7a:	8c 93       	st	X, r24
      PORTC |= value;
    2f7c:	a5 e3       	ldi	r26, 0x35	; 53
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	e5 e3       	ldi	r30, 0x35	; 53
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	90 81       	ld	r25, Z
    2f86:	8b 81       	ldd	r24, Y+3	; 0x03
    2f88:	89 2b       	or	r24, r25
    2f8a:	8c 93       	st	X, r24
    2f8c:	11 c0       	rjmp	.+34     	; 0x2fb0 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTD:
      PORTD &= 0x0F;
    2f8e:	a2 e3       	ldi	r26, 0x32	; 50
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	e2 e3       	ldi	r30, 0x32	; 50
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	8f 70       	andi	r24, 0x0F	; 15
    2f9a:	8c 93       	st	X, r24
      PORTD |= value;
    2f9c:	a2 e3       	ldi	r26, 0x32	; 50
    2f9e:	b0 e0       	ldi	r27, 0x00	; 0
    2fa0:	e2 e3       	ldi	r30, 0x32	; 50
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	90 81       	ld	r25, Z
    2fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa8:	89 2b       	or	r24, r25
    2faa:	8c 93       	st	X, r24
    2fac:	01 c0       	rjmp	.+2      	; 0x2fb0 <DIO_vWriteHighNibble+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2fae:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	0f 90       	pop	r0
    2fb8:	0f 90       	pop	r0
    2fba:	0f 90       	pop	r0
    2fbc:	cf 91       	pop	r28
    2fbe:	df 91       	pop	r29
    2fc0:	08 95       	ret

00002fc2 <DIO_vSetLowNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetLowNibbleDir(u8 Copy_u8PORT, u8 value)
{
    2fc2:	df 93       	push	r29
    2fc4:	cf 93       	push	r28
    2fc6:	00 d0       	rcall	.+0      	; 0x2fc8 <DIO_vSetLowNibbleDir+0x6>
    2fc8:	00 d0       	rcall	.+0      	; 0x2fca <DIO_vSetLowNibbleDir+0x8>
    2fca:	0f 92       	push	r0
    2fcc:	cd b7       	in	r28, 0x3d	; 61
    2fce:	de b7       	in	r29, 0x3e	; 62
    2fd0:	8a 83       	std	Y+2, r24	; 0x02
    2fd2:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fda:	84 30       	cpi	r24, 0x04	; 4
    2fdc:	08 f0       	brcs	.+2      	; 0x2fe0 <DIO_vSetLowNibbleDir+0x1e>
    2fde:	62 c0       	rjmp	.+196    	; 0x30a4 <DIO_vSetLowNibbleDir+0xe2>
  {
    value &= 0x0F;
    2fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe2:	8f 70       	andi	r24, 0x0F	; 15
    2fe4:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    2fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe8:	28 2f       	mov	r18, r24
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	3d 83       	std	Y+5, r19	; 0x05
    2fee:	2c 83       	std	Y+4, r18	; 0x04
    2ff0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ff4:	81 30       	cpi	r24, 0x01	; 1
    2ff6:	91 05       	cpc	r25, r1
    2ff8:	29 f1       	breq	.+74     	; 0x3044 <DIO_vSetLowNibbleDir+0x82>
    2ffa:	2c 81       	ldd	r18, Y+4	; 0x04
    2ffc:	3d 81       	ldd	r19, Y+5	; 0x05
    2ffe:	22 30       	cpi	r18, 0x02	; 2
    3000:	31 05       	cpc	r19, r1
    3002:	2c f4       	brge	.+10     	; 0x300e <DIO_vSetLowNibbleDir+0x4c>
    3004:	8c 81       	ldd	r24, Y+4	; 0x04
    3006:	9d 81       	ldd	r25, Y+5	; 0x05
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	61 f0       	breq	.+24     	; 0x3024 <DIO_vSetLowNibbleDir+0x62>
    300c:	4c c0       	rjmp	.+152    	; 0x30a6 <DIO_vSetLowNibbleDir+0xe4>
    300e:	2c 81       	ldd	r18, Y+4	; 0x04
    3010:	3d 81       	ldd	r19, Y+5	; 0x05
    3012:	22 30       	cpi	r18, 0x02	; 2
    3014:	31 05       	cpc	r19, r1
    3016:	31 f1       	breq	.+76     	; 0x3064 <DIO_vSetLowNibbleDir+0xa2>
    3018:	8c 81       	ldd	r24, Y+4	; 0x04
    301a:	9d 81       	ldd	r25, Y+5	; 0x05
    301c:	83 30       	cpi	r24, 0x03	; 3
    301e:	91 05       	cpc	r25, r1
    3020:	89 f1       	breq	.+98     	; 0x3084 <DIO_vSetLowNibbleDir+0xc2>
    3022:	41 c0       	rjmp	.+130    	; 0x30a6 <DIO_vSetLowNibbleDir+0xe4>
    {
    case DIO_PORTA:
      DDRA &= 0xF0; // Set only the high nibble of the port A by the given value
    3024:	aa e3       	ldi	r26, 0x3A	; 58
    3026:	b0 e0       	ldi	r27, 0x00	; 0
    3028:	ea e3       	ldi	r30, 0x3A	; 58
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	80 81       	ld	r24, Z
    302e:	80 7f       	andi	r24, 0xF0	; 240
    3030:	8c 93       	st	X, r24
      DDRA |= value;
    3032:	aa e3       	ldi	r26, 0x3A	; 58
    3034:	b0 e0       	ldi	r27, 0x00	; 0
    3036:	ea e3       	ldi	r30, 0x3A	; 58
    3038:	f0 e0       	ldi	r31, 0x00	; 0
    303a:	90 81       	ld	r25, Z
    303c:	8b 81       	ldd	r24, Y+3	; 0x03
    303e:	89 2b       	or	r24, r25
    3040:	8c 93       	st	X, r24
    3042:	31 c0       	rjmp	.+98     	; 0x30a6 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTB:
      DDRB &= 0xF0; // Set only the high nibble of the port B by the given value
    3044:	a7 e3       	ldi	r26, 0x37	; 55
    3046:	b0 e0       	ldi	r27, 0x00	; 0
    3048:	e7 e3       	ldi	r30, 0x37	; 55
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	80 81       	ld	r24, Z
    304e:	80 7f       	andi	r24, 0xF0	; 240
    3050:	8c 93       	st	X, r24
      DDRB |= value;
    3052:	a7 e3       	ldi	r26, 0x37	; 55
    3054:	b0 e0       	ldi	r27, 0x00	; 0
    3056:	e7 e3       	ldi	r30, 0x37	; 55
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	90 81       	ld	r25, Z
    305c:	8b 81       	ldd	r24, Y+3	; 0x03
    305e:	89 2b       	or	r24, r25
    3060:	8c 93       	st	X, r24
    3062:	21 c0       	rjmp	.+66     	; 0x30a6 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTC:
      DDRC &= 0xF0; // Set only the high nibble of the port C by the given value
    3064:	a4 e3       	ldi	r26, 0x34	; 52
    3066:	b0 e0       	ldi	r27, 0x00	; 0
    3068:	e4 e3       	ldi	r30, 0x34	; 52
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	80 81       	ld	r24, Z
    306e:	80 7f       	andi	r24, 0xF0	; 240
    3070:	8c 93       	st	X, r24
      DDRC |= value;
    3072:	a4 e3       	ldi	r26, 0x34	; 52
    3074:	b0 e0       	ldi	r27, 0x00	; 0
    3076:	e4 e3       	ldi	r30, 0x34	; 52
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	90 81       	ld	r25, Z
    307c:	8b 81       	ldd	r24, Y+3	; 0x03
    307e:	89 2b       	or	r24, r25
    3080:	8c 93       	st	X, r24
    3082:	11 c0       	rjmp	.+34     	; 0x30a6 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTD:
      DDRD &= 0xF0; // Set only the high nibble of the port D by the given value
    3084:	a1 e3       	ldi	r26, 0x31	; 49
    3086:	b0 e0       	ldi	r27, 0x00	; 0
    3088:	e1 e3       	ldi	r30, 0x31	; 49
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	80 81       	ld	r24, Z
    308e:	80 7f       	andi	r24, 0xF0	; 240
    3090:	8c 93       	st	X, r24
      DDRD |= value;
    3092:	a1 e3       	ldi	r26, 0x31	; 49
    3094:	b0 e0       	ldi	r27, 0x00	; 0
    3096:	e1 e3       	ldi	r30, 0x31	; 49
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	90 81       	ld	r25, Z
    309c:	8b 81       	ldd	r24, Y+3	; 0x03
    309e:	89 2b       	or	r24, r25
    30a0:	8c 93       	st	X, r24
    30a2:	01 c0       	rjmp	.+2      	; 0x30a6 <DIO_vSetLowNibbleDir+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    30a4:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    30a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    30a8:	0f 90       	pop	r0
    30aa:	0f 90       	pop	r0
    30ac:	0f 90       	pop	r0
    30ae:	0f 90       	pop	r0
    30b0:	0f 90       	pop	r0
    30b2:	cf 91       	pop	r28
    30b4:	df 91       	pop	r29
    30b6:	08 95       	ret

000030b8 <DIO_vSetHighNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetHighNibbleDir(u8 Copy_u8PORT, u8 value)
{
    30b8:	df 93       	push	r29
    30ba:	cf 93       	push	r28
    30bc:	00 d0       	rcall	.+0      	; 0x30be <DIO_vSetHighNibbleDir+0x6>
    30be:	00 d0       	rcall	.+0      	; 0x30c0 <DIO_vSetHighNibbleDir+0x8>
    30c0:	0f 92       	push	r0
    30c2:	cd b7       	in	r28, 0x3d	; 61
    30c4:	de b7       	in	r29, 0x3e	; 62
    30c6:	8a 83       	std	Y+2, r24	; 0x02
    30c8:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    30ce:	8a 81       	ldd	r24, Y+2	; 0x02
    30d0:	84 30       	cpi	r24, 0x04	; 4
    30d2:	08 f0       	brcs	.+2      	; 0x30d6 <DIO_vSetHighNibbleDir+0x1e>
    30d4:	63 c0       	rjmp	.+198    	; 0x319c <DIO_vSetHighNibbleDir+0xe4>
  {
    value <<= 4;
    30d6:	8b 81       	ldd	r24, Y+3	; 0x03
    30d8:	82 95       	swap	r24
    30da:	80 7f       	andi	r24, 0xF0	; 240
    30dc:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    30de:	8a 81       	ldd	r24, Y+2	; 0x02
    30e0:	28 2f       	mov	r18, r24
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	3d 83       	std	Y+5, r19	; 0x05
    30e6:	2c 83       	std	Y+4, r18	; 0x04
    30e8:	8c 81       	ldd	r24, Y+4	; 0x04
    30ea:	9d 81       	ldd	r25, Y+5	; 0x05
    30ec:	81 30       	cpi	r24, 0x01	; 1
    30ee:	91 05       	cpc	r25, r1
    30f0:	29 f1       	breq	.+74     	; 0x313c <DIO_vSetHighNibbleDir+0x84>
    30f2:	2c 81       	ldd	r18, Y+4	; 0x04
    30f4:	3d 81       	ldd	r19, Y+5	; 0x05
    30f6:	22 30       	cpi	r18, 0x02	; 2
    30f8:	31 05       	cpc	r19, r1
    30fa:	2c f4       	brge	.+10     	; 0x3106 <DIO_vSetHighNibbleDir+0x4e>
    30fc:	8c 81       	ldd	r24, Y+4	; 0x04
    30fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3100:	00 97       	sbiw	r24, 0x00	; 0
    3102:	61 f0       	breq	.+24     	; 0x311c <DIO_vSetHighNibbleDir+0x64>
    3104:	4c c0       	rjmp	.+152    	; 0x319e <DIO_vSetHighNibbleDir+0xe6>
    3106:	2c 81       	ldd	r18, Y+4	; 0x04
    3108:	3d 81       	ldd	r19, Y+5	; 0x05
    310a:	22 30       	cpi	r18, 0x02	; 2
    310c:	31 05       	cpc	r19, r1
    310e:	31 f1       	breq	.+76     	; 0x315c <DIO_vSetHighNibbleDir+0xa4>
    3110:	8c 81       	ldd	r24, Y+4	; 0x04
    3112:	9d 81       	ldd	r25, Y+5	; 0x05
    3114:	83 30       	cpi	r24, 0x03	; 3
    3116:	91 05       	cpc	r25, r1
    3118:	89 f1       	breq	.+98     	; 0x317c <DIO_vSetHighNibbleDir+0xc4>
    311a:	41 c0       	rjmp	.+130    	; 0x319e <DIO_vSetHighNibbleDir+0xe6>
    {
    case DIO_PORTA:
      DDRA &= 0x0F;
    311c:	aa e3       	ldi	r26, 0x3A	; 58
    311e:	b0 e0       	ldi	r27, 0x00	; 0
    3120:	ea e3       	ldi	r30, 0x3A	; 58
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	80 81       	ld	r24, Z
    3126:	8f 70       	andi	r24, 0x0F	; 15
    3128:	8c 93       	st	X, r24
      DDRA |= value;
    312a:	aa e3       	ldi	r26, 0x3A	; 58
    312c:	b0 e0       	ldi	r27, 0x00	; 0
    312e:	ea e3       	ldi	r30, 0x3A	; 58
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	90 81       	ld	r25, Z
    3134:	8b 81       	ldd	r24, Y+3	; 0x03
    3136:	89 2b       	or	r24, r25
    3138:	8c 93       	st	X, r24
    313a:	31 c0       	rjmp	.+98     	; 0x319e <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTB:
      DDRB &= 0x0F;
    313c:	a7 e3       	ldi	r26, 0x37	; 55
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	e7 e3       	ldi	r30, 0x37	; 55
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	80 81       	ld	r24, Z
    3146:	8f 70       	andi	r24, 0x0F	; 15
    3148:	8c 93       	st	X, r24
      DDRB |= value;
    314a:	a7 e3       	ldi	r26, 0x37	; 55
    314c:	b0 e0       	ldi	r27, 0x00	; 0
    314e:	e7 e3       	ldi	r30, 0x37	; 55
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	90 81       	ld	r25, Z
    3154:	8b 81       	ldd	r24, Y+3	; 0x03
    3156:	89 2b       	or	r24, r25
    3158:	8c 93       	st	X, r24
    315a:	21 c0       	rjmp	.+66     	; 0x319e <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTC:
      DDRC &= 0x0F;
    315c:	a4 e3       	ldi	r26, 0x34	; 52
    315e:	b0 e0       	ldi	r27, 0x00	; 0
    3160:	e4 e3       	ldi	r30, 0x34	; 52
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	80 81       	ld	r24, Z
    3166:	8f 70       	andi	r24, 0x0F	; 15
    3168:	8c 93       	st	X, r24
      DDRC |= value;
    316a:	a4 e3       	ldi	r26, 0x34	; 52
    316c:	b0 e0       	ldi	r27, 0x00	; 0
    316e:	e4 e3       	ldi	r30, 0x34	; 52
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	90 81       	ld	r25, Z
    3174:	8b 81       	ldd	r24, Y+3	; 0x03
    3176:	89 2b       	or	r24, r25
    3178:	8c 93       	st	X, r24
    317a:	11 c0       	rjmp	.+34     	; 0x319e <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTD:
      DDRD &= 0x0F;
    317c:	a1 e3       	ldi	r26, 0x31	; 49
    317e:	b0 e0       	ldi	r27, 0x00	; 0
    3180:	e1 e3       	ldi	r30, 0x31	; 49
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	80 81       	ld	r24, Z
    3186:	8f 70       	andi	r24, 0x0F	; 15
    3188:	8c 93       	st	X, r24
      DDRD |= value;
    318a:	a1 e3       	ldi	r26, 0x31	; 49
    318c:	b0 e0       	ldi	r27, 0x00	; 0
    318e:	e1 e3       	ldi	r30, 0x31	; 49
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	90 81       	ld	r25, Z
    3194:	8b 81       	ldd	r24, Y+3	; 0x03
    3196:	89 2b       	or	r24, r25
    3198:	8c 93       	st	X, r24
    319a:	01 c0       	rjmp	.+2      	; 0x319e <DIO_vSetHighNibbleDir+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    319c:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    319e:	89 81       	ldd	r24, Y+1	; 0x01
}
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	0f 90       	pop	r0
    31a6:	0f 90       	pop	r0
    31a8:	0f 90       	pop	r0
    31aa:	cf 91       	pop	r28
    31ac:	df 91       	pop	r29
    31ae:	08 95       	ret

000031b0 <KPD1_vInit>:
 * Breif : This Function initialize the pin which connected to KPD as input pins
 * Parameters : Nothing
 * return : Nothing
 */
void KPD1_vInit(void)
{
    31b0:	df 93       	push	r29
    31b2:	cf 93       	push	r28
    31b4:	cd b7       	in	r28, 0x3d	; 61
    31b6:	de b7       	in	r29, 0x3e	; 62

  /*                    connect pull up for the pins of the rows                             */

  DIO_enumConnectPullUp(KPD_PORT, KPD_R0, DIO_PIN_HIGH);
    31b8:	82 e0       	ldi	r24, 0x02	; 2
    31ba:	60 e0       	ldi	r22, 0x00	; 0
    31bc:	41 e0       	ldi	r20, 0x01	; 1
    31be:	0e 94 43 14 	call	0x2886	; 0x2886 <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R1, DIO_PIN_HIGH);
    31c2:	82 e0       	ldi	r24, 0x02	; 2
    31c4:	61 e0       	ldi	r22, 0x01	; 1
    31c6:	41 e0       	ldi	r20, 0x01	; 1
    31c8:	0e 94 43 14 	call	0x2886	; 0x2886 <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R2, DIO_PIN_HIGH);
    31cc:	82 e0       	ldi	r24, 0x02	; 2
    31ce:	62 e0       	ldi	r22, 0x02	; 2
    31d0:	41 e0       	ldi	r20, 0x01	; 1
    31d2:	0e 94 43 14 	call	0x2886	; 0x2886 <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R3, DIO_PIN_HIGH);
    31d6:	82 e0       	ldi	r24, 0x02	; 2
    31d8:	63 e0       	ldi	r22, 0x03	; 3
    31da:	41 e0       	ldi	r20, 0x01	; 1
    31dc:	0e 94 43 14 	call	0x2886	; 0x2886 <DIO_enumConnectPullUp>
  DIO_enumWritePinValue      ( KPD_PORT , KPD_R3 , DIO_HIGH );
  */

  /*                 connect the pins of the columns as output pins (HIGH)                    */
  
  DIO_vSetHighNibbleDir(KPD_PORT, 0x0F);
    31e0:	82 e0       	ldi	r24, 0x02	; 2
    31e2:	6f e0       	ldi	r22, 0x0F	; 15
    31e4:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <DIO_vSetHighNibbleDir>
  DIO_vWriteHighNibble (KPD_PORT, 0x0F);
    31e8:	82 e0       	ldi	r24, 0x02	; 2
    31ea:	6f e0       	ldi	r22, 0x0F	; 15
    31ec:	0e 94 65 17 	call	0x2eca	; 0x2eca <DIO_vWriteHighNibble>
    DIO_enumWritePinValue(KPD_PORT, KPD_C0, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C1, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C2, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C3, DIO_PIN_HIGH);
    */
}
    31f0:	cf 91       	pop	r28
    31f2:	df 91       	pop	r29
    31f4:	08 95       	ret

000031f6 <KPD1_u8GetPressed>:
 * Breif : This Function used to get the pressed button of the kpd
 * Parameters : Nothing
 * return : the pressed button
 */
u8 KPD1_u8GetPressed(void)
{
    31f6:	df 93       	push	r29
    31f8:	cf 93       	push	r28
    31fa:	cd b7       	in	r28, 0x3d	; 61
    31fc:	de b7       	in	r29, 0x3e	; 62
    31fe:	62 97       	sbiw	r28, 0x12	; 18
    3200:	0f b6       	in	r0, 0x3f	; 63
    3202:	f8 94       	cli
    3204:	de bf       	out	0x3e, r29	; 62
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	cd bf       	out	0x3d, r28	; 61
  u8 LOC_u8ReturnData = NOTPRESSED;
    320a:	8f ef       	ldi	r24, 0xFF	; 255
    320c:	89 8b       	std	Y+17, r24	; 0x11
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
    320e:	84 e0       	ldi	r24, 0x04	; 4
    3210:	8f 87       	std	Y+15, r24	; 0x0f
    3212:	c9 c0       	rjmp	.+402    	; 0x33a6 <KPD1_u8GetPressed+0x1b0>
  {
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns
    3214:	82 e0       	ldi	r24, 0x02	; 2
    3216:	6f 85       	ldd	r22, Y+15	; 0x0f
    3218:	40 e0       	ldi	r20, 0x00	; 0
    321a:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <DIO_enumWritePinVal>

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    321e:	18 8a       	std	Y+16, r1	; 0x10
    3220:	b6 c0       	rjmp	.+364    	; 0x338e <KPD1_u8GetPressed+0x198>
    {
      DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // retun the row value
    3222:	9e 01       	movw	r18, r28
    3224:	2e 5e       	subi	r18, 0xEE	; 238
    3226:	3f 4f       	sbci	r19, 0xFF	; 255
    3228:	82 e0       	ldi	r24, 0x02	; 2
    322a:	68 89       	ldd	r22, Y+16	; 0x10
    322c:	a9 01       	movw	r20, r18
    322e:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <DIO_enumReadPinVal>
      /*
      if the row is high ....there is no pressed buttons
      if the row is low ....there is pressed button ===>> I will check on this
      */
      if (LOC_u8GetPressed == 0)
    3232:	8a 89       	ldd	r24, Y+18	; 0x12
    3234:	88 23       	and	r24, r24
    3236:	09 f0       	breq	.+2      	; 0x323a <KPD1_u8GetPressed+0x44>
    3238:	a7 c0       	rjmp	.+334    	; 0x3388 <KPD1_u8GetPressed+0x192>
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	a8 e4       	ldi	r26, 0x48	; 72
    3240:	b2 e4       	ldi	r27, 0x42	; 66
    3242:	8b 87       	std	Y+11, r24	; 0x0b
    3244:	9c 87       	std	Y+12, r25	; 0x0c
    3246:	ad 87       	std	Y+13, r26	; 0x0d
    3248:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    324a:	6b 85       	ldd	r22, Y+11	; 0x0b
    324c:	7c 85       	ldd	r23, Y+12	; 0x0c
    324e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3250:	9e 85       	ldd	r25, Y+14	; 0x0e
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	4a ef       	ldi	r20, 0xFA	; 250
    3258:	54 e4       	ldi	r21, 0x44	; 68
    325a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    325e:	dc 01       	movw	r26, r24
    3260:	cb 01       	movw	r24, r22
    3262:	8f 83       	std	Y+7, r24	; 0x07
    3264:	98 87       	std	Y+8, r25	; 0x08
    3266:	a9 87       	std	Y+9, r26	; 0x09
    3268:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    326a:	6f 81       	ldd	r22, Y+7	; 0x07
    326c:	78 85       	ldd	r23, Y+8	; 0x08
    326e:	89 85       	ldd	r24, Y+9	; 0x09
    3270:	9a 85       	ldd	r25, Y+10	; 0x0a
    3272:	20 e0       	ldi	r18, 0x00	; 0
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	40 e8       	ldi	r20, 0x80	; 128
    3278:	5f e3       	ldi	r21, 0x3F	; 63
    327a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    327e:	88 23       	and	r24, r24
    3280:	2c f4       	brge	.+10     	; 0x328c <KPD1_u8GetPressed+0x96>
		__ticks = 1;
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	9e 83       	std	Y+6, r25	; 0x06
    3288:	8d 83       	std	Y+5, r24	; 0x05
    328a:	3f c0       	rjmp	.+126    	; 0x330a <KPD1_u8GetPressed+0x114>
	else if (__tmp > 65535)
    328c:	6f 81       	ldd	r22, Y+7	; 0x07
    328e:	78 85       	ldd	r23, Y+8	; 0x08
    3290:	89 85       	ldd	r24, Y+9	; 0x09
    3292:	9a 85       	ldd	r25, Y+10	; 0x0a
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	3f ef       	ldi	r19, 0xFF	; 255
    3298:	4f e7       	ldi	r20, 0x7F	; 127
    329a:	57 e4       	ldi	r21, 0x47	; 71
    329c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    32a0:	18 16       	cp	r1, r24
    32a2:	4c f5       	brge	.+82     	; 0x32f6 <KPD1_u8GetPressed+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	40 e2       	ldi	r20, 0x20	; 32
    32b2:	51 e4       	ldi	r21, 0x41	; 65
    32b4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	bc 01       	movw	r22, r24
    32be:	cd 01       	movw	r24, r26
    32c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	9e 83       	std	Y+6, r25	; 0x06
    32ca:	8d 83       	std	Y+5, r24	; 0x05
    32cc:	0f c0       	rjmp	.+30     	; 0x32ec <KPD1_u8GetPressed+0xf6>
    32ce:	88 ec       	ldi	r24, 0xC8	; 200
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	9c 83       	std	Y+4, r25	; 0x04
    32d4:	8b 83       	std	Y+3, r24	; 0x03
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	9c 81       	ldd	r25, Y+4	; 0x04
    32da:	01 97       	sbiw	r24, 0x01	; 1
    32dc:	f1 f7       	brne	.-4      	; 0x32da <KPD1_u8GetPressed+0xe4>
    32de:	9c 83       	std	Y+4, r25	; 0x04
    32e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e2:	8d 81       	ldd	r24, Y+5	; 0x05
    32e4:	9e 81       	ldd	r25, Y+6	; 0x06
    32e6:	01 97       	sbiw	r24, 0x01	; 1
    32e8:	9e 83       	std	Y+6, r25	; 0x06
    32ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ec:	8d 81       	ldd	r24, Y+5	; 0x05
    32ee:	9e 81       	ldd	r25, Y+6	; 0x06
    32f0:	00 97       	sbiw	r24, 0x00	; 0
    32f2:	69 f7       	brne	.-38     	; 0x32ce <KPD1_u8GetPressed+0xd8>
    32f4:	14 c0       	rjmp	.+40     	; 0x331e <KPD1_u8GetPressed+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f6:	6f 81       	ldd	r22, Y+7	; 0x07
    32f8:	78 85       	ldd	r23, Y+8	; 0x08
    32fa:	89 85       	ldd	r24, Y+9	; 0x09
    32fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3302:	dc 01       	movw	r26, r24
    3304:	cb 01       	movw	r24, r22
    3306:	9e 83       	std	Y+6, r25	; 0x06
    3308:	8d 83       	std	Y+5, r24	; 0x05
    330a:	8d 81       	ldd	r24, Y+5	; 0x05
    330c:	9e 81       	ldd	r25, Y+6	; 0x06
    330e:	9a 83       	std	Y+2, r25	; 0x02
    3310:	89 83       	std	Y+1, r24	; 0x01
    3312:	89 81       	ldd	r24, Y+1	; 0x01
    3314:	9a 81       	ldd	r25, Y+2	; 0x02
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	f1 f7       	brne	.-4      	; 0x3316 <KPD1_u8GetPressed+0x120>
    331a:	9a 83       	std	Y+2, r25	; 0x02
    331c:	89 83       	std	Y+1, r24	; 0x01
      {
        _delay_ms(50);         // delay for bouncing

        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // to make sure that the button is pressed & check again
    331e:	9e 01       	movw	r18, r28
    3320:	2e 5e       	subi	r18, 0xEE	; 238
    3322:	3f 4f       	sbci	r19, 0xFF	; 255
    3324:	82 e0       	ldi	r24, 0x02	; 2
    3326:	68 89       	ldd	r22, Y+16	; 0x10
    3328:	a9 01       	movw	r20, r18
    332a:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <DIO_enumReadPinVal>

        if (LOC_u8GetPressed == 0)
    332e:	8a 89       	ldd	r24, Y+18	; 0x12
    3330:	88 23       	and	r24, r24
    3332:	a9 f4       	brne	.+42     	; 0x335e <KPD1_u8GetPressed+0x168>
                    the button will khnow by the row and the column (ASCII Code)
                    ==> Hint1 : I already defined The ASCII Codes in 2D array at --> "KPD_config.h"
                    ==> Hint2 : if there is no pressed buttons , it will retured NOTPRESSED (0xff) and there is not any button has this ASCII (0xff)
          */

          LOC_u8ReturnData = KPD_u8Buttons1[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
    3334:	88 89       	ldd	r24, Y+16	; 0x10
    3336:	48 2f       	mov	r20, r24
    3338:	50 e0       	ldi	r21, 0x00	; 0
    333a:	8f 85       	ldd	r24, Y+15	; 0x0f
    333c:	88 2f       	mov	r24, r24
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	9c 01       	movw	r18, r24
    3342:	24 50       	subi	r18, 0x04	; 4
    3344:	30 40       	sbci	r19, 0x00	; 0
    3346:	ca 01       	movw	r24, r20
    3348:	88 0f       	add	r24, r24
    334a:	99 1f       	adc	r25, r25
    334c:	88 0f       	add	r24, r24
    334e:	99 1f       	adc	r25, r25
    3350:	82 0f       	add	r24, r18
    3352:	93 1f       	adc	r25, r19
    3354:	fc 01       	movw	r30, r24
    3356:	e8 55       	subi	r30, 0x58	; 88
    3358:	fe 4f       	sbci	r31, 0xFE	; 254
    335a:	80 81       	ld	r24, Z
    335c:	89 8b       	std	Y+17, r24	; 0x11
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    335e:	9e 01       	movw	r18, r28
    3360:	2e 5e       	subi	r18, 0xEE	; 238
    3362:	3f 4f       	sbci	r19, 0xFF	; 255
    3364:	82 e0       	ldi	r24, 0x02	; 2
    3366:	68 89       	ldd	r22, Y+16	; 0x10
    3368:	a9 01       	movw	r20, r18
    336a:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <DIO_enumReadPinVal>
    336e:	08 c0       	rjmp	.+16     	; 0x3380 <KPD1_u8GetPressed+0x18a>
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
        {
          DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    3370:	9e 01       	movw	r18, r28
    3372:	2e 5e       	subi	r18, 0xEE	; 238
    3374:	3f 4f       	sbci	r19, 0xFF	; 255
    3376:	82 e0       	ldi	r24, 0x02	; 2
    3378:	68 89       	ldd	r22, Y+16	; 0x10
    337a:	a9 01       	movw	r20, r18
    337c:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <DIO_enumReadPinVal>

          LOC_u8ReturnData = KPD_u8Buttons1[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
    3380:	8a 89       	ldd	r24, Y+18	; 0x12
    3382:	88 23       	and	r24, r24
    3384:	a9 f3       	breq	.-22     	; 0x3370 <KPD1_u8GetPressed+0x17a>
    3386:	07 c0       	rjmp	.+14     	; 0x3396 <KPD1_u8GetPressed+0x1a0>

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
  {
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    3388:	88 89       	ldd	r24, Y+16	; 0x10
    338a:	8f 5f       	subi	r24, 0xFF	; 255
    338c:	88 8b       	std	Y+16, r24	; 0x10
    338e:	88 89       	ldd	r24, Y+16	; 0x10
    3390:	84 30       	cpi	r24, 0x04	; 4
    3392:	08 f4       	brcc	.+2      	; 0x3396 <KPD1_u8GetPressed+0x1a0>
    3394:	46 cf       	rjmp	.-372    	; 0x3222 <KPD1_u8GetPressed+0x2c>
        break;
      }
    }

    // return this column’s pin to high
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
    3396:	82 e0       	ldi	r24, 0x02	; 2
    3398:	6f 85       	ldd	r22, Y+15	; 0x0f
    339a:	41 e0       	ldi	r20, 0x01	; 1
    339c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <DIO_enumWritePinVal>
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
    33a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    33a2:	8f 5f       	subi	r24, 0xFF	; 255
    33a4:	8f 87       	std	Y+15, r24	; 0x0f
    33a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    33a8:	88 30       	cpi	r24, 0x08	; 8
    33aa:	08 f4       	brcc	.+2      	; 0x33ae <KPD1_u8GetPressed+0x1b8>
    33ac:	33 cf       	rjmp	.-410    	; 0x3214 <KPD1_u8GetPressed+0x1e>

    // return this column’s pin to high
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
  }

  return LOC_u8ReturnData;
    33ae:	89 89       	ldd	r24, Y+17	; 0x11
}
    33b0:	62 96       	adiw	r28, 0x12	; 18
    33b2:	0f b6       	in	r0, 0x3f	; 63
    33b4:	f8 94       	cli
    33b6:	de bf       	out	0x3e, r29	; 62
    33b8:	0f be       	out	0x3f, r0	; 63
    33ba:	cd bf       	out	0x3d, r28	; 61
    33bc:	cf 91       	pop	r28
    33be:	df 91       	pop	r29
    33c0:	08 95       	ret

000033c2 <KPD2_vInit>:
 * Breif : This Function initialize the pin which connected to KPD as input pins
 * Parameters : Nothing
 * return : Nothing
 */
void KPD2_vInit(void)
{
    33c2:	df 93       	push	r29
    33c4:	cf 93       	push	r28
    33c6:	cd b7       	in	r28, 0x3d	; 61
    33c8:	de b7       	in	r29, 0x3e	; 62

  /*                    connect pull up for the pins of the rows                             */

  DIO_enumConnectPullUp(KPD_PORT, KPD_R0, DIO_PIN_HIGH);
    33ca:	83 e0       	ldi	r24, 0x03	; 3
    33cc:	60 e0       	ldi	r22, 0x00	; 0
    33ce:	41 e0       	ldi	r20, 0x01	; 1
    33d0:	0e 94 43 14 	call	0x2886	; 0x2886 <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R1, DIO_PIN_HIGH);
    33d4:	83 e0       	ldi	r24, 0x03	; 3
    33d6:	61 e0       	ldi	r22, 0x01	; 1
    33d8:	41 e0       	ldi	r20, 0x01	; 1
    33da:	0e 94 43 14 	call	0x2886	; 0x2886 <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R2, DIO_PIN_HIGH);
    33de:	83 e0       	ldi	r24, 0x03	; 3
    33e0:	62 e0       	ldi	r22, 0x02	; 2
    33e2:	41 e0       	ldi	r20, 0x01	; 1
    33e4:	0e 94 43 14 	call	0x2886	; 0x2886 <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R3, DIO_PIN_HIGH);
    33e8:	83 e0       	ldi	r24, 0x03	; 3
    33ea:	63 e0       	ldi	r22, 0x03	; 3
    33ec:	41 e0       	ldi	r20, 0x01	; 1
    33ee:	0e 94 43 14 	call	0x2886	; 0x2886 <DIO_enumConnectPullUp>
  DIO_enumWritePinValue      ( KPD_PORT , KPD_R3 , DIO_HIGH );
  */

  /*                 connect the pins of the columns as output pins (HIGH)                    */
  
  DIO_vSetHighNibbleDir(KPD_PORT, 0x0F);
    33f2:	83 e0       	ldi	r24, 0x03	; 3
    33f4:	6f e0       	ldi	r22, 0x0F	; 15
    33f6:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <DIO_vSetHighNibbleDir>
  DIO_vWriteHighNibble (KPD_PORT, 0x0F);
    33fa:	83 e0       	ldi	r24, 0x03	; 3
    33fc:	6f e0       	ldi	r22, 0x0F	; 15
    33fe:	0e 94 65 17 	call	0x2eca	; 0x2eca <DIO_vWriteHighNibble>
    DIO_enumWritePinValue(KPD_PORT, KPD_C0, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C1, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C2, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C3, DIO_PIN_HIGH);
    */
}
    3402:	cf 91       	pop	r28
    3404:	df 91       	pop	r29
    3406:	08 95       	ret

00003408 <KPD2_u8GetPressed>:
 * Breif : This Function used to get the pressed button of the kpd
 * Parameters : Nothing
 * return : the pressed button
 */
u8 KPD2_u8GetPressed(void)
{
    3408:	df 93       	push	r29
    340a:	cf 93       	push	r28
    340c:	cd b7       	in	r28, 0x3d	; 61
    340e:	de b7       	in	r29, 0x3e	; 62
    3410:	62 97       	sbiw	r28, 0x12	; 18
    3412:	0f b6       	in	r0, 0x3f	; 63
    3414:	f8 94       	cli
    3416:	de bf       	out	0x3e, r29	; 62
    3418:	0f be       	out	0x3f, r0	; 63
    341a:	cd bf       	out	0x3d, r28	; 61
  u8 LOC_u8ReturnData = NOTPRESSED;
    341c:	8f ef       	ldi	r24, 0xFF	; 255
    341e:	89 8b       	std	Y+17, r24	; 0x11
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
    3420:	84 e0       	ldi	r24, 0x04	; 4
    3422:	8f 87       	std	Y+15, r24	; 0x0f
    3424:	c9 c0       	rjmp	.+402    	; 0x35b8 <KPD2_u8GetPressed+0x1b0>
  {
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns
    3426:	83 e0       	ldi	r24, 0x03	; 3
    3428:	6f 85       	ldd	r22, Y+15	; 0x0f
    342a:	40 e0       	ldi	r20, 0x00	; 0
    342c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <DIO_enumWritePinVal>

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    3430:	18 8a       	std	Y+16, r1	; 0x10
    3432:	b6 c0       	rjmp	.+364    	; 0x35a0 <KPD2_u8GetPressed+0x198>
    {
      DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // retun the row value
    3434:	9e 01       	movw	r18, r28
    3436:	2e 5e       	subi	r18, 0xEE	; 238
    3438:	3f 4f       	sbci	r19, 0xFF	; 255
    343a:	83 e0       	ldi	r24, 0x03	; 3
    343c:	68 89       	ldd	r22, Y+16	; 0x10
    343e:	a9 01       	movw	r20, r18
    3440:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <DIO_enumReadPinVal>
      /*
      if the row is high ....there is no pressed buttons
      if the row is low ....there is pressed button ===>> I will check on this
      */
      if (LOC_u8GetPressed == 0)
    3444:	8a 89       	ldd	r24, Y+18	; 0x12
    3446:	88 23       	and	r24, r24
    3448:	09 f0       	breq	.+2      	; 0x344c <KPD2_u8GetPressed+0x44>
    344a:	a7 c0       	rjmp	.+334    	; 0x359a <KPD2_u8GetPressed+0x192>
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	a8 e4       	ldi	r26, 0x48	; 72
    3452:	b2 e4       	ldi	r27, 0x42	; 66
    3454:	8b 87       	std	Y+11, r24	; 0x0b
    3456:	9c 87       	std	Y+12, r25	; 0x0c
    3458:	ad 87       	std	Y+13, r26	; 0x0d
    345a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    345c:	6b 85       	ldd	r22, Y+11	; 0x0b
    345e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3460:	8d 85       	ldd	r24, Y+13	; 0x0d
    3462:	9e 85       	ldd	r25, Y+14	; 0x0e
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	4a ef       	ldi	r20, 0xFA	; 250
    346a:	54 e4       	ldi	r21, 0x44	; 68
    346c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	8f 83       	std	Y+7, r24	; 0x07
    3476:	98 87       	std	Y+8, r25	; 0x08
    3478:	a9 87       	std	Y+9, r26	; 0x09
    347a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    347c:	6f 81       	ldd	r22, Y+7	; 0x07
    347e:	78 85       	ldd	r23, Y+8	; 0x08
    3480:	89 85       	ldd	r24, Y+9	; 0x09
    3482:	9a 85       	ldd	r25, Y+10	; 0x0a
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	40 e8       	ldi	r20, 0x80	; 128
    348a:	5f e3       	ldi	r21, 0x3F	; 63
    348c:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3490:	88 23       	and	r24, r24
    3492:	2c f4       	brge	.+10     	; 0x349e <KPD2_u8GetPressed+0x96>
		__ticks = 1;
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	9e 83       	std	Y+6, r25	; 0x06
    349a:	8d 83       	std	Y+5, r24	; 0x05
    349c:	3f c0       	rjmp	.+126    	; 0x351c <KPD2_u8GetPressed+0x114>
	else if (__tmp > 65535)
    349e:	6f 81       	ldd	r22, Y+7	; 0x07
    34a0:	78 85       	ldd	r23, Y+8	; 0x08
    34a2:	89 85       	ldd	r24, Y+9	; 0x09
    34a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	3f ef       	ldi	r19, 0xFF	; 255
    34aa:	4f e7       	ldi	r20, 0x7F	; 127
    34ac:	57 e4       	ldi	r21, 0x47	; 71
    34ae:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    34b2:	18 16       	cp	r1, r24
    34b4:	4c f5       	brge	.+82     	; 0x3508 <KPD2_u8GetPressed+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    34b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    34ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    34bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	40 e2       	ldi	r20, 0x20	; 32
    34c4:	51 e4       	ldi	r21, 0x41	; 65
    34c6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    34ca:	dc 01       	movw	r26, r24
    34cc:	cb 01       	movw	r24, r22
    34ce:	bc 01       	movw	r22, r24
    34d0:	cd 01       	movw	r24, r26
    34d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	9e 83       	std	Y+6, r25	; 0x06
    34dc:	8d 83       	std	Y+5, r24	; 0x05
    34de:	0f c0       	rjmp	.+30     	; 0x34fe <KPD2_u8GetPressed+0xf6>
    34e0:	88 ec       	ldi	r24, 0xC8	; 200
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	9c 83       	std	Y+4, r25	; 0x04
    34e6:	8b 83       	std	Y+3, r24	; 0x03
    34e8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ea:	9c 81       	ldd	r25, Y+4	; 0x04
    34ec:	01 97       	sbiw	r24, 0x01	; 1
    34ee:	f1 f7       	brne	.-4      	; 0x34ec <KPD2_u8GetPressed+0xe4>
    34f0:	9c 83       	std	Y+4, r25	; 0x04
    34f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34f4:	8d 81       	ldd	r24, Y+5	; 0x05
    34f6:	9e 81       	ldd	r25, Y+6	; 0x06
    34f8:	01 97       	sbiw	r24, 0x01	; 1
    34fa:	9e 83       	std	Y+6, r25	; 0x06
    34fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3500:	9e 81       	ldd	r25, Y+6	; 0x06
    3502:	00 97       	sbiw	r24, 0x00	; 0
    3504:	69 f7       	brne	.-38     	; 0x34e0 <KPD2_u8GetPressed+0xd8>
    3506:	14 c0       	rjmp	.+40     	; 0x3530 <KPD2_u8GetPressed+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3508:	6f 81       	ldd	r22, Y+7	; 0x07
    350a:	78 85       	ldd	r23, Y+8	; 0x08
    350c:	89 85       	ldd	r24, Y+9	; 0x09
    350e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3514:	dc 01       	movw	r26, r24
    3516:	cb 01       	movw	r24, r22
    3518:	9e 83       	std	Y+6, r25	; 0x06
    351a:	8d 83       	std	Y+5, r24	; 0x05
    351c:	8d 81       	ldd	r24, Y+5	; 0x05
    351e:	9e 81       	ldd	r25, Y+6	; 0x06
    3520:	9a 83       	std	Y+2, r25	; 0x02
    3522:	89 83       	std	Y+1, r24	; 0x01
    3524:	89 81       	ldd	r24, Y+1	; 0x01
    3526:	9a 81       	ldd	r25, Y+2	; 0x02
    3528:	01 97       	sbiw	r24, 0x01	; 1
    352a:	f1 f7       	brne	.-4      	; 0x3528 <KPD2_u8GetPressed+0x120>
    352c:	9a 83       	std	Y+2, r25	; 0x02
    352e:	89 83       	std	Y+1, r24	; 0x01
      {
        _delay_ms(50);         // delay for bouncing

        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // to make sure that the button is pressed & check again
    3530:	9e 01       	movw	r18, r28
    3532:	2e 5e       	subi	r18, 0xEE	; 238
    3534:	3f 4f       	sbci	r19, 0xFF	; 255
    3536:	83 e0       	ldi	r24, 0x03	; 3
    3538:	68 89       	ldd	r22, Y+16	; 0x10
    353a:	a9 01       	movw	r20, r18
    353c:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <DIO_enumReadPinVal>

        if (LOC_u8GetPressed == 0)
    3540:	8a 89       	ldd	r24, Y+18	; 0x12
    3542:	88 23       	and	r24, r24
    3544:	a9 f4       	brne	.+42     	; 0x3570 <KPD2_u8GetPressed+0x168>
                    the button will khnow by the row and the column (ASCII Code)
                    ==> Hint1 : I already defined The ASCII Codes in 2D array at --> "KPD_config.h"
                    ==> Hint2 : if there is no pressed buttons , it will retured NOTPRESSED (0xff) and there is not any button has this ASCII (0xff)
          */

          LOC_u8ReturnData = KPD_u8Buttons2[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
    3546:	88 89       	ldd	r24, Y+16	; 0x10
    3548:	48 2f       	mov	r20, r24
    354a:	50 e0       	ldi	r21, 0x00	; 0
    354c:	8f 85       	ldd	r24, Y+15	; 0x0f
    354e:	88 2f       	mov	r24, r24
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	9c 01       	movw	r18, r24
    3554:	24 50       	subi	r18, 0x04	; 4
    3556:	30 40       	sbci	r19, 0x00	; 0
    3558:	ca 01       	movw	r24, r20
    355a:	88 0f       	add	r24, r24
    355c:	99 1f       	adc	r25, r25
    355e:	88 0f       	add	r24, r24
    3560:	99 1f       	adc	r25, r25
    3562:	82 0f       	add	r24, r18
    3564:	93 1f       	adc	r25, r19
    3566:	fc 01       	movw	r30, r24
    3568:	e8 54       	subi	r30, 0x48	; 72
    356a:	fe 4f       	sbci	r31, 0xFE	; 254
    356c:	80 81       	ld	r24, Z
    356e:	89 8b       	std	Y+17, r24	; 0x11
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    3570:	9e 01       	movw	r18, r28
    3572:	2e 5e       	subi	r18, 0xEE	; 238
    3574:	3f 4f       	sbci	r19, 0xFF	; 255
    3576:	83 e0       	ldi	r24, 0x03	; 3
    3578:	68 89       	ldd	r22, Y+16	; 0x10
    357a:	a9 01       	movw	r20, r18
    357c:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <DIO_enumReadPinVal>
    3580:	08 c0       	rjmp	.+16     	; 0x3592 <KPD2_u8GetPressed+0x18a>
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
        {
          DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    3582:	9e 01       	movw	r18, r28
    3584:	2e 5e       	subi	r18, 0xEE	; 238
    3586:	3f 4f       	sbci	r19, 0xFF	; 255
    3588:	83 e0       	ldi	r24, 0x03	; 3
    358a:	68 89       	ldd	r22, Y+16	; 0x10
    358c:	a9 01       	movw	r20, r18
    358e:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <DIO_enumReadPinVal>

          LOC_u8ReturnData = KPD_u8Buttons2[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
    3592:	8a 89       	ldd	r24, Y+18	; 0x12
    3594:	88 23       	and	r24, r24
    3596:	a9 f3       	breq	.-22     	; 0x3582 <KPD2_u8GetPressed+0x17a>
    3598:	07 c0       	rjmp	.+14     	; 0x35a8 <KPD2_u8GetPressed+0x1a0>

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
  {
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    359a:	88 89       	ldd	r24, Y+16	; 0x10
    359c:	8f 5f       	subi	r24, 0xFF	; 255
    359e:	88 8b       	std	Y+16, r24	; 0x10
    35a0:	88 89       	ldd	r24, Y+16	; 0x10
    35a2:	84 30       	cpi	r24, 0x04	; 4
    35a4:	08 f4       	brcc	.+2      	; 0x35a8 <KPD2_u8GetPressed+0x1a0>
    35a6:	46 cf       	rjmp	.-372    	; 0x3434 <KPD2_u8GetPressed+0x2c>
        break;
      }
    }

    // return this column’s pin to high
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
    35a8:	83 e0       	ldi	r24, 0x03	; 3
    35aa:	6f 85       	ldd	r22, Y+15	; 0x0f
    35ac:	41 e0       	ldi	r20, 0x01	; 1
    35ae:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <DIO_enumWritePinVal>
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
    35b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    35b4:	8f 5f       	subi	r24, 0xFF	; 255
    35b6:	8f 87       	std	Y+15, r24	; 0x0f
    35b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ba:	88 30       	cpi	r24, 0x08	; 8
    35bc:	08 f4       	brcc	.+2      	; 0x35c0 <KPD2_u8GetPressed+0x1b8>
    35be:	33 cf       	rjmp	.-410    	; 0x3426 <KPD2_u8GetPressed+0x1e>

    // return this column’s pin to high
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
  }

  return LOC_u8ReturnData;
    35c0:	89 89       	ldd	r24, Y+17	; 0x11
}
    35c2:	62 96       	adiw	r28, 0x12	; 18
    35c4:	0f b6       	in	r0, 0x3f	; 63
    35c6:	f8 94       	cli
    35c8:	de bf       	out	0x3e, r29	; 62
    35ca:	0f be       	out	0x3f, r0	; 63
    35cc:	cd bf       	out	0x3d, r28	; 61
    35ce:	cf 91       	pop	r28
    35d0:	df 91       	pop	r29
    35d2:	08 95       	ret

000035d4 <main>:

#include <util/delay.h>
u8 press1 , press2;

int main()
{
    35d4:	df 93       	push	r29
    35d6:	cf 93       	push	r28
    35d8:	cd b7       	in	r28, 0x3d	; 61
    35da:	de b7       	in	r29, 0x3e	; 62
	CLCD_vInit();
    35dc:	0e 94 10 09 	call	0x1220	; 0x1220 <CLCD_vInit>
	KPD1_vInit();
    35e0:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <KPD1_vInit>
	KPD2_vInit();
    35e4:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <KPD2_vInit>

	while(1)
	{
		do
		{
			press1 = KPD1_u8GetPressed();
    35e8:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <KPD1_u8GetPressed>
    35ec:	80 93 c9 01 	sts	0x01C9, r24
			press2 = KPD2_u8GetPressed();
    35f0:	0e 94 04 1a 	call	0x3408	; 0x3408 <KPD2_u8GetPressed>
    35f4:	80 93 c8 01 	sts	0x01C8, r24
		}while(press1 == NOTPRESSED && press2 == NOTPRESSED);
    35f8:	80 91 c9 01 	lds	r24, 0x01C9
    35fc:	8f 3f       	cpi	r24, 0xFF	; 255
    35fe:	21 f4       	brne	.+8      	; 0x3608 <main+0x34>
    3600:	80 91 c8 01 	lds	r24, 0x01C8
    3604:	8f 3f       	cpi	r24, 0xFF	; 255
    3606:	81 f3       	breq	.-32     	; 0x35e8 <main+0x14>

		if (press1 != NOTPRESSED)
    3608:	80 91 c9 01 	lds	r24, 0x01C9
    360c:	8f 3f       	cpi	r24, 0xFF	; 255
    360e:	29 f0       	breq	.+10     	; 0x361a <main+0x46>
		{
			CLCD_vSendData(press1);
    3610:	80 91 c9 01 	lds	r24, 0x01C9
    3614:	0e 94 a7 0b 	call	0x174e	; 0x174e <CLCD_vSendData>
    3618:	e7 cf       	rjmp	.-50     	; 0x35e8 <main+0x14>
		}
		else if (press2 != NOTPRESSED)
    361a:	80 91 c8 01 	lds	r24, 0x01C8
    361e:	8f 3f       	cpi	r24, 0xFF	; 255
    3620:	19 f3       	breq	.-58     	; 0x35e8 <main+0x14>
		{
			CLCD_vSendData(press2);
    3622:	80 91 c8 01 	lds	r24, 0x01C8
    3626:	0e 94 a7 0b 	call	0x174e	; 0x174e <CLCD_vSendData>
    362a:	de cf       	rjmp	.-68     	; 0x35e8 <main+0x14>

0000362c <__mulsi3>:
    362c:	62 9f       	mul	r22, r18
    362e:	d0 01       	movw	r26, r0
    3630:	73 9f       	mul	r23, r19
    3632:	f0 01       	movw	r30, r0
    3634:	82 9f       	mul	r24, r18
    3636:	e0 0d       	add	r30, r0
    3638:	f1 1d       	adc	r31, r1
    363a:	64 9f       	mul	r22, r20
    363c:	e0 0d       	add	r30, r0
    363e:	f1 1d       	adc	r31, r1
    3640:	92 9f       	mul	r25, r18
    3642:	f0 0d       	add	r31, r0
    3644:	83 9f       	mul	r24, r19
    3646:	f0 0d       	add	r31, r0
    3648:	74 9f       	mul	r23, r20
    364a:	f0 0d       	add	r31, r0
    364c:	65 9f       	mul	r22, r21
    364e:	f0 0d       	add	r31, r0
    3650:	99 27       	eor	r25, r25
    3652:	72 9f       	mul	r23, r18
    3654:	b0 0d       	add	r27, r0
    3656:	e1 1d       	adc	r30, r1
    3658:	f9 1f       	adc	r31, r25
    365a:	63 9f       	mul	r22, r19
    365c:	b0 0d       	add	r27, r0
    365e:	e1 1d       	adc	r30, r1
    3660:	f9 1f       	adc	r31, r25
    3662:	bd 01       	movw	r22, r26
    3664:	cf 01       	movw	r24, r30
    3666:	11 24       	eor	r1, r1
    3668:	08 95       	ret

0000366a <__udivmodsi4>:
    366a:	a1 e2       	ldi	r26, 0x21	; 33
    366c:	1a 2e       	mov	r1, r26
    366e:	aa 1b       	sub	r26, r26
    3670:	bb 1b       	sub	r27, r27
    3672:	fd 01       	movw	r30, r26
    3674:	0d c0       	rjmp	.+26     	; 0x3690 <__udivmodsi4_ep>

00003676 <__udivmodsi4_loop>:
    3676:	aa 1f       	adc	r26, r26
    3678:	bb 1f       	adc	r27, r27
    367a:	ee 1f       	adc	r30, r30
    367c:	ff 1f       	adc	r31, r31
    367e:	a2 17       	cp	r26, r18
    3680:	b3 07       	cpc	r27, r19
    3682:	e4 07       	cpc	r30, r20
    3684:	f5 07       	cpc	r31, r21
    3686:	20 f0       	brcs	.+8      	; 0x3690 <__udivmodsi4_ep>
    3688:	a2 1b       	sub	r26, r18
    368a:	b3 0b       	sbc	r27, r19
    368c:	e4 0b       	sbc	r30, r20
    368e:	f5 0b       	sbc	r31, r21

00003690 <__udivmodsi4_ep>:
    3690:	66 1f       	adc	r22, r22
    3692:	77 1f       	adc	r23, r23
    3694:	88 1f       	adc	r24, r24
    3696:	99 1f       	adc	r25, r25
    3698:	1a 94       	dec	r1
    369a:	69 f7       	brne	.-38     	; 0x3676 <__udivmodsi4_loop>
    369c:	60 95       	com	r22
    369e:	70 95       	com	r23
    36a0:	80 95       	com	r24
    36a2:	90 95       	com	r25
    36a4:	9b 01       	movw	r18, r22
    36a6:	ac 01       	movw	r20, r24
    36a8:	bd 01       	movw	r22, r26
    36aa:	cf 01       	movw	r24, r30
    36ac:	08 95       	ret

000036ae <__divmodsi4>:
    36ae:	97 fb       	bst	r25, 7
    36b0:	09 2e       	mov	r0, r25
    36b2:	05 26       	eor	r0, r21
    36b4:	0e d0       	rcall	.+28     	; 0x36d2 <__divmodsi4_neg1>
    36b6:	57 fd       	sbrc	r21, 7
    36b8:	04 d0       	rcall	.+8      	; 0x36c2 <__divmodsi4_neg2>
    36ba:	d7 df       	rcall	.-82     	; 0x366a <__udivmodsi4>
    36bc:	0a d0       	rcall	.+20     	; 0x36d2 <__divmodsi4_neg1>
    36be:	00 1c       	adc	r0, r0
    36c0:	38 f4       	brcc	.+14     	; 0x36d0 <__divmodsi4_exit>

000036c2 <__divmodsi4_neg2>:
    36c2:	50 95       	com	r21
    36c4:	40 95       	com	r20
    36c6:	30 95       	com	r19
    36c8:	21 95       	neg	r18
    36ca:	3f 4f       	sbci	r19, 0xFF	; 255
    36cc:	4f 4f       	sbci	r20, 0xFF	; 255
    36ce:	5f 4f       	sbci	r21, 0xFF	; 255

000036d0 <__divmodsi4_exit>:
    36d0:	08 95       	ret

000036d2 <__divmodsi4_neg1>:
    36d2:	f6 f7       	brtc	.-4      	; 0x36d0 <__divmodsi4_exit>
    36d4:	90 95       	com	r25
    36d6:	80 95       	com	r24
    36d8:	70 95       	com	r23
    36da:	61 95       	neg	r22
    36dc:	7f 4f       	sbci	r23, 0xFF	; 255
    36de:	8f 4f       	sbci	r24, 0xFF	; 255
    36e0:	9f 4f       	sbci	r25, 0xFF	; 255
    36e2:	08 95       	ret

000036e4 <__prologue_saves__>:
    36e4:	2f 92       	push	r2
    36e6:	3f 92       	push	r3
    36e8:	4f 92       	push	r4
    36ea:	5f 92       	push	r5
    36ec:	6f 92       	push	r6
    36ee:	7f 92       	push	r7
    36f0:	8f 92       	push	r8
    36f2:	9f 92       	push	r9
    36f4:	af 92       	push	r10
    36f6:	bf 92       	push	r11
    36f8:	cf 92       	push	r12
    36fa:	df 92       	push	r13
    36fc:	ef 92       	push	r14
    36fe:	ff 92       	push	r15
    3700:	0f 93       	push	r16
    3702:	1f 93       	push	r17
    3704:	cf 93       	push	r28
    3706:	df 93       	push	r29
    3708:	cd b7       	in	r28, 0x3d	; 61
    370a:	de b7       	in	r29, 0x3e	; 62
    370c:	ca 1b       	sub	r28, r26
    370e:	db 0b       	sbc	r29, r27
    3710:	0f b6       	in	r0, 0x3f	; 63
    3712:	f8 94       	cli
    3714:	de bf       	out	0x3e, r29	; 62
    3716:	0f be       	out	0x3f, r0	; 63
    3718:	cd bf       	out	0x3d, r28	; 61
    371a:	09 94       	ijmp

0000371c <__epilogue_restores__>:
    371c:	2a 88       	ldd	r2, Y+18	; 0x12
    371e:	39 88       	ldd	r3, Y+17	; 0x11
    3720:	48 88       	ldd	r4, Y+16	; 0x10
    3722:	5f 84       	ldd	r5, Y+15	; 0x0f
    3724:	6e 84       	ldd	r6, Y+14	; 0x0e
    3726:	7d 84       	ldd	r7, Y+13	; 0x0d
    3728:	8c 84       	ldd	r8, Y+12	; 0x0c
    372a:	9b 84       	ldd	r9, Y+11	; 0x0b
    372c:	aa 84       	ldd	r10, Y+10	; 0x0a
    372e:	b9 84       	ldd	r11, Y+9	; 0x09
    3730:	c8 84       	ldd	r12, Y+8	; 0x08
    3732:	df 80       	ldd	r13, Y+7	; 0x07
    3734:	ee 80       	ldd	r14, Y+6	; 0x06
    3736:	fd 80       	ldd	r15, Y+5	; 0x05
    3738:	0c 81       	ldd	r16, Y+4	; 0x04
    373a:	1b 81       	ldd	r17, Y+3	; 0x03
    373c:	aa 81       	ldd	r26, Y+2	; 0x02
    373e:	b9 81       	ldd	r27, Y+1	; 0x01
    3740:	ce 0f       	add	r28, r30
    3742:	d1 1d       	adc	r29, r1
    3744:	0f b6       	in	r0, 0x3f	; 63
    3746:	f8 94       	cli
    3748:	de bf       	out	0x3e, r29	; 62
    374a:	0f be       	out	0x3f, r0	; 63
    374c:	cd bf       	out	0x3d, r28	; 61
    374e:	ed 01       	movw	r28, r26
    3750:	08 95       	ret

00003752 <_exit>:
    3752:	f8 94       	cli

00003754 <__stop_program>:
    3754:	ff cf       	rjmp	.-2      	; 0x3754 <__stop_program>
