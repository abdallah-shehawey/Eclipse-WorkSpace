
OC0_with_non_PWM_mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000005dc  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000722  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 04 01 	jmp	0x208	; 0x208 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


#include <avr/io.h>
#include "timer.h"
int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	timer_wave_nonPWM();
  74:	0e 94 65 00 	call	0xca	; 0xca <timer_wave_nonPWM>
  78:	ff cf       	rjmp	.-2      	; 0x78 <main+0xc>

0000007a <timer_CTC_init_interrupt>:
 
#include "std_macros.h"
#include <avr/io.h>
#include <avr/interrupt.h>
void timer_CTC_init_interrupt(void)
{
  7a:	df 93       	push	r29
  7c:	cf 93       	push	r28
  7e:	cd b7       	in	r28, 0x3d	; 61
  80:	de b7       	in	r29, 0x3e	; 62
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
  82:	a3 e5       	ldi	r26, 0x53	; 83
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e3 e5       	ldi	r30, 0x53	; 83
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	88 60       	ori	r24, 0x08	; 8
  8e:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=80;
  90:	ec e5       	ldi	r30, 0x5C	; 92
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 e5       	ldi	r24, 0x50	; 80
  96:	80 83       	st	Z, r24
	/* select timer clock */	
	SET_BIT(TCCR0,CS00);
  98:	a3 e5       	ldi	r26, 0x53	; 83
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	e3 e5       	ldi	r30, 0x53	; 83
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
  a6:	a3 e5       	ldi	r26, 0x53	; 83
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	e3 e5       	ldi	r30, 0x53	; 83
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	84 60       	ori	r24, 0x04	; 4
  b2:	8c 93       	st	X, r24
	/* enable interrupt*/
	sei();
  b4:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
  b6:	a9 e5       	ldi	r26, 0x59	; 89
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	e9 e5       	ldi	r30, 0x59	; 89
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	8c 93       	st	X, r24
}
  c4:	cf 91       	pop	r28
  c6:	df 91       	pop	r29
  c8:	08 95       	ret

000000ca <timer_wave_nonPWM>:


void timer_wave_nonPWM(void)
{
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
  d2:	a7 e3       	ldi	r26, 0x37	; 55
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	e7 e3       	ldi	r30, 0x37	; 55
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	88 60       	ori	r24, 0x08	; 8
  de:	8c 93       	st	X, r24
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
  e0:	a3 e5       	ldi	r26, 0x53	; 83
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e3 e5       	ldi	r30, 0x53	; 83
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=64;
  ee:	ec e5       	ldi	r30, 0x5C	; 92
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 e4       	ldi	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
  f6:	a3 e5       	ldi	r26, 0x53	; 83
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	e3 e5       	ldi	r30, 0x53	; 83
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	81 60       	ori	r24, 0x01	; 1
 102:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
 104:	a3 e5       	ldi	r26, 0x53	; 83
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	e3 e5       	ldi	r30, 0x53	; 83
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	84 60       	ori	r24, 0x04	; 4
 110:	8c 93       	st	X, r24
	/* toggle OC0 on compare match*/
	SET_BIT(TCCR0,COM00);
 112:	a3 e5       	ldi	r26, 0x53	; 83
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e3 e5       	ldi	r30, 0x53	; 83
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	80 61       	ori	r24, 0x10	; 16
 11e:	8c 93       	st	X, r24
}
 120:	cf 91       	pop	r28
 122:	df 91       	pop	r29
 124:	08 95       	ret

00000126 <timer_wave_fastPWM>:

void timer_wave_fastPWM(void)
{
 126:	df 93       	push	r29
 128:	cf 93       	push	r28
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
 12e:	a7 e3       	ldi	r26, 0x37	; 55
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	e7 e3       	ldi	r30, 0x37	; 55
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	88 60       	ori	r24, 0x08	; 8
 13a:	8c 93       	st	X, r24
	/* select fast PWM mode*/
	SET_BIT(TCCR0,WGM00);
 13c:	a3 e5       	ldi	r26, 0x53	; 83
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e3 e5       	ldi	r30, 0x53	; 83
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	80 64       	ori	r24, 0x40	; 64
 148:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
 14a:	a3 e5       	ldi	r26, 0x53	; 83
 14c:	b0 e0       	ldi	r27, 0x00	; 0
 14e:	e3 e5       	ldi	r30, 0x53	; 83
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	88 60       	ori	r24, 0x08	; 8
 156:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=64;
 158:	ec e5       	ldi	r30, 0x5C	; 92
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 e4       	ldi	r24, 0x40	; 64
 15e:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
 160:	a3 e5       	ldi	r26, 0x53	; 83
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	e3 e5       	ldi	r30, 0x53	; 83
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	81 60       	ori	r24, 0x01	; 1
 16c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
 16e:	a3 e5       	ldi	r26, 0x53	; 83
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	e3 e5       	ldi	r30, 0x53	; 83
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	84 60       	ori	r24, 0x04	; 4
 17a:	8c 93       	st	X, r24
	/* Set OC0 on compare match, clear OC0 at BOTTOM,(inverting mode)*/
	SET_BIT(TCCR0,COM00);
 17c:	a3 e5       	ldi	r26, 0x53	; 83
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	e3 e5       	ldi	r30, 0x53	; 83
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	80 61       	ori	r24, 0x10	; 16
 188:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
 18a:	a3 e5       	ldi	r26, 0x53	; 83
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	e3 e5       	ldi	r30, 0x53	; 83
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	80 62       	ori	r24, 0x20	; 32
 196:	8c 93       	st	X, r24
}
 198:	cf 91       	pop	r28
 19a:	df 91       	pop	r29
 19c:	08 95       	ret

0000019e <timer_wave_phasecorrectPWM>:


void timer_wave_phasecorrectPWM(void)
{
 19e:	df 93       	push	r29
 1a0:	cf 93       	push	r28
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
 1a6:	a7 e3       	ldi	r26, 0x37	; 55
 1a8:	b0 e0       	ldi	r27, 0x00	; 0
 1aa:	e7 e3       	ldi	r30, 0x37	; 55
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	88 60       	ori	r24, 0x08	; 8
 1b2:	8c 93       	st	X, r24
	/* select phase correct PWM mode*/
	SET_BIT(TCCR0,WGM00);
 1b4:	a3 e5       	ldi	r26, 0x53	; 83
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	e3 e5       	ldi	r30, 0x53	; 83
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	80 64       	ori	r24, 0x40	; 64
 1c0:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=64;
 1c2:	ec e5       	ldi	r30, 0x5C	; 92
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 e4       	ldi	r24, 0x40	; 64
 1c8:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
 1ca:	a3 e5       	ldi	r26, 0x53	; 83
 1cc:	b0 e0       	ldi	r27, 0x00	; 0
 1ce:	e3 e5       	ldi	r30, 0x53	; 83
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	81 60       	ori	r24, 0x01	; 1
 1d6:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
 1d8:	a3 e5       	ldi	r26, 0x53	; 83
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	e3 e5       	ldi	r30, 0x53	; 83
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	84 60       	ori	r24, 0x04	; 4
 1e4:	8c 93       	st	X, r24
	/* Set OC0 on compare match when up-counting. Clear OC0 on compare match when down counting.*/
	SET_BIT(TCCR0,COM00);
 1e6:	a3 e5       	ldi	r26, 0x53	; 83
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	e3 e5       	ldi	r30, 0x53	; 83
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	80 61       	ori	r24, 0x10	; 16
 1f2:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
 1f4:	a3 e5       	ldi	r26, 0x53	; 83
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	e3 e5       	ldi	r30, 0x53	; 83
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	80 62       	ori	r24, 0x20	; 32
 200:	8c 93       	st	X, r24
}
 202:	cf 91       	pop	r28
 204:	df 91       	pop	r29
 206:	08 95       	ret

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
